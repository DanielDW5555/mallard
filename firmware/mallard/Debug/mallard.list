
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009260  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800945c  0800945c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800945c  0800945c  0001945c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009464  08009464  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009468  08009468  00019468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800946c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000090  080094fc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  080094fc  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b20f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003751  00000000  00000000  0003b2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0003ea20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  0003fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b037  00000000  00000000  000409c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001392c  00000000  00000000  0006b9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd3d9  00000000  00000000  0007f32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017c704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f8  00000000  00000000  0017c758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080093f4 	.word	0x080093f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	080093f4 	.word	0x080093f4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fab7 	bl	8000a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f81a 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8e2 	bl	80006b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f4:	f000 f8b2 	bl	800065c <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 80004f8:	f008 fb7a 	bl	8008bf0 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fc:	f008 fb9e 	bl	8008c3c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // Blinky!
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	4807      	ldr	r0, [pc, #28]	; (8000520 <main+0x3c>)
 8000504:	f000 fdfe 	bl	8001104 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8000508:	20fa      	movs	r0, #250	; 0xfa
 800050a:	f000 fb1b 	bl	8000b44 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <main+0x3c>)
 8000514:	f000 fdf6 	bl	8001104 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000518:	20fa      	movs	r0, #250	; 0xfa
 800051a:	f000 fb13 	bl	8000b44 <HAL_Delay>
    MX_USB_HOST_Process();
 800051e:	e7ed      	b.n	80004fc <main+0x18>
 8000520:	48000400 	.word	0x48000400

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b0ba      	sub	sp, #232	; 0xe8
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800052e:	2244      	movs	r2, #68	; 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fe8e 	bl	8009254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	228c      	movs	r2, #140	; 0x8c
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f008 fe80 	bl	8009254 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000554:	f002 fab4 	bl	8002ac0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000558:	4b3f      	ldr	r3, [pc, #252]	; (8000658 <SystemClock_Config+0x134>)
 800055a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800055e:	4a3e      	ldr	r2, [pc, #248]	; (8000658 <SystemClock_Config+0x134>)
 8000560:	f023 0318 	bic.w	r3, r3, #24
 8000564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000568:	2314      	movs	r3, #20
 800056a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000580:	2390      	movs	r3, #144	; 0x90
 8000582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800058c:	2301      	movs	r3, #1
 800058e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000592:	2305      	movs	r3, #5
 8000594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000598:	2347      	movs	r3, #71	; 0x47
 800059a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80005aa:	2306      	movs	r3, #6
 80005ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fb17 	bl	8002be8 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005c0:	f000 f916 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005d0:	2390      	movs	r3, #144	; 0x90
 80005d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 ff22 	bl	8003434 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80005f6:	f000 f8fb 	bl	80007f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
 80005fa:	f242 0320 	movw	r3, #8224	; 0x2020
 80005fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000600:	2300      	movs	r3, #0
 8000602:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000604:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000608:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800060a:	2301      	movs	r3, #1
 800060c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800060e:	2305      	movs	r3, #5
 8000610:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000612:	2314      	movs	r3, #20
 8000614:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000622:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000626:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f908 	bl	8003840 <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000636:	f000 f8db 	bl	80007f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f002 fa5d 	bl	8002afc <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000648:	f000 f8d2 	bl	80007f0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800064c:	f003 fbf4 	bl	8003e38 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000650:	bf00      	nop
 8000652:	37e8      	adds	r7, #232	; 0xe8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000

0800065c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_LPUART1_UART_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_LPUART1_UART_Init+0x58>)
 800066a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 800066e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000672:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 800069a:	f003 fdab 	bl	80041f4 <HAL_UART_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006a4:	f000 f8a4 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000bc 	.word	0x200000bc
 80006b0:	40008000 	.word	0x40008000
 80006b4:	00033324 	.word	0x00033324

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b43      	ldr	r3, [pc, #268]	; (80007dc <MX_GPIO_Init+0x124>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a42      	ldr	r2, [pc, #264]	; (80007dc <MX_GPIO_Init+0x124>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b40      	ldr	r3, [pc, #256]	; (80007dc <MX_GPIO_Init+0x124>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	4b3d      	ldr	r3, [pc, #244]	; (80007dc <MX_GPIO_Init+0x124>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a3c      	ldr	r2, [pc, #240]	; (80007dc <MX_GPIO_Init+0x124>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b3a      	ldr	r3, [pc, #232]	; (80007dc <MX_GPIO_Init+0x124>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b37      	ldr	r3, [pc, #220]	; (80007dc <MX_GPIO_Init+0x124>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a36      	ldr	r2, [pc, #216]	; (80007dc <MX_GPIO_Init+0x124>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <MX_GPIO_Init+0x124>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <MX_GPIO_Init+0x124>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a30      	ldr	r2, [pc, #192]	; (80007dc <MX_GPIO_Init+0x124>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <MX_GPIO_Init+0x124>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800072e:	f002 fa4b 	bl	8002bc8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_GPIO_Init+0x124>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a29      	ldr	r2, [pc, #164]	; (80007dc <MX_GPIO_Init+0x124>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_GPIO_Init+0x124>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000750:	4823      	ldr	r0, [pc, #140]	; (80007e0 <MX_GPIO_Init+0x128>)
 8000752:	f000 fcbf 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 800075c:	4821      	ldr	r0, [pc, #132]	; (80007e4 <MX_GPIO_Init+0x12c>)
 800075e:	f000 fcb9 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_GPIO_Init+0x130>)
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <MX_GPIO_Init+0x134>)
 8000778:	f000 fb1a 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800077c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0x128>)
 8000796:	f000 fb0b 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 800079a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_GPIO_Init+0x12c>)
 80007b0:	f000 fafe 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80007b4:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_GPIO_Init+0x12c>)
 80007ce:	f000 faef 	bl	8000db0 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400
 80007e4:	48001800 	.word	0x48001800
 80007e8:	10110000 	.word	0x10110000
 80007ec:	48000800 	.word	0x48000800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6613      	str	r3, [r2, #96]	; 0x60
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6593      	str	r3, [r2, #88]	; 0x58
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d12a      	bne.n	80008bc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0x84>)
 8000868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_UART_MspInit+0x84>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0x84>)
 8000874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_UART_MspInit+0x84>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <HAL_UART_MspInit+0x84>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_UART_MspInit+0x84>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000896:	f002 f997 	bl	8002bc8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800089a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ac:	2308      	movs	r3, #8
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_UART_MspInit+0x88>)
 80008b8:	f000 fa7a 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40008000 	.word	0x40008000
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48001800 	.word	0x48001800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f8f2 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <OTG_FS_IRQHandler+0x10>)
 800092a:	f000 fe6b 	bl	8001604 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200005ec 	.word	0x200005ec

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f008 fc3a 	bl	80091e0 <__errno>
 800096c:	4603      	mov	r3, r0
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20050000 	.word	0x20050000
 8000998:	00000400 	.word	0x00000400
 800099c:	200000ac 	.word	0x200000ac
 80009a0:	20000900 	.word	0x20000900

080009a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <SystemInit+0x5c>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <SystemInit+0x5c>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <SystemInit+0x60>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <SystemInit+0x60>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <SystemInit+0x60>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <SystemInit+0x60>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <SystemInit+0x60>)
 80009d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <SystemInit+0x60>)
 80009dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <SystemInit+0x60>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <SystemInit+0x60>)
 80009e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SystemInit+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	40021000 	.word	0x40021000

08000a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a0c:	f7ff ffca 	bl	80009a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
	ldr	r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <LoopForever+0x16>)
	cmp	r2, r3
 8000a32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a36:	f008 fbd9 	bl	80091ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3a:	f7ff fd53 	bl	80004e4 <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a40:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000a44:	0800946c 	.word	0x0800946c
	ldr	r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a4c:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000a50:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000a54:	20000900 	.word	0x20000900

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>

08000a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f961 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f80e 	bl	8000a8c <HAL_InitTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e001      	b.n	8000a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a7c:	f7ff febe 	bl	80007fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_InitTick+0x6c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d023      	beq.n	8000ae8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_InitTick+0x70>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_InitTick+0x6c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f96d 	bl	8000d96 <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10f      	bne.n	8000ae2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d809      	bhi.n	8000adc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f937 	bl	8000d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_InitTick+0x74>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e007      	b.n	8000aec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e004      	b.n	8000aec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	e001      	b.n	8000aec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000140 	.word	0x20000140

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000140 	.word	0x20000140

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_Delay+0x44>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <__NVIC_EnableIRQ+0x38>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff8e 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff29 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff3e 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff8e 	bl	8000c80 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5d 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff31 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa2 	bl	8000ce8 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e166      	b.n	800108e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 8158 	beq.w	8001088 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d00b      	beq.n	8000df8 <HAL_GPIO_Init+0x48>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d007      	beq.n	8000df8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dec:	2b11      	cmp	r3, #17
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b12      	cmp	r3, #18
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	f003 0201 	and.w	r2, r3, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0xea>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d123      	bne.n	8000ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	6939      	ldr	r1, [r7, #16]
 8000ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0203 	and.w	r2, r3, #3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 80b2 	beq.w	8001088 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	4b61      	ldr	r3, [pc, #388]	; (80010ac <HAL_GPIO_Init+0x2fc>)
 8000f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f28:	4a60      	ldr	r2, [pc, #384]	; (80010ac <HAL_GPIO_Init+0x2fc>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f30:	4b5e      	ldr	r3, [pc, #376]	; (80010ac <HAL_GPIO_Init+0x2fc>)
 8000f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f3c:	4a5c      	ldr	r2, [pc, #368]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f66:	d02b      	beq.n	8000fc0 <HAL_GPIO_Init+0x210>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a52      	ldr	r2, [pc, #328]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d025      	beq.n	8000fbc <HAL_GPIO_Init+0x20c>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a51      	ldr	r2, [pc, #324]	; (80010b8 <HAL_GPIO_Init+0x308>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d01f      	beq.n	8000fb8 <HAL_GPIO_Init+0x208>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a50      	ldr	r2, [pc, #320]	; (80010bc <HAL_GPIO_Init+0x30c>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d019      	beq.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <HAL_GPIO_Init+0x310>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d013      	beq.n	8000fb0 <HAL_GPIO_Init+0x200>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4e      	ldr	r2, [pc, #312]	; (80010c4 <HAL_GPIO_Init+0x314>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d00d      	beq.n	8000fac <HAL_GPIO_Init+0x1fc>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a4d      	ldr	r2, [pc, #308]	; (80010c8 <HAL_GPIO_Init+0x318>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d007      	beq.n	8000fa8 <HAL_GPIO_Init+0x1f8>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_GPIO_Init+0x31c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d101      	bne.n	8000fa4 <HAL_GPIO_Init+0x1f4>
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	e00e      	b.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	e00c      	b.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fa8:	2306      	movs	r3, #6
 8000faa:	e00a      	b.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fac:	2305      	movs	r3, #5
 8000fae:	e008      	b.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e004      	b.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	f002 0203 	and.w	r2, r2, #3
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	4093      	lsls	r3, r2
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fd2:	4937      	ldr	r1, [pc, #220]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fe0:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_GPIO_Init+0x320>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001004:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <HAL_GPIO_Init+0x320>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <HAL_GPIO_Init+0x320>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102e:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <HAL_GPIO_Init+0x320>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <HAL_GPIO_Init+0x320>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_GPIO_Init+0x320>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_GPIO_Init+0x320>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <HAL_GPIO_Init+0x320>)
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	f47f ae91 	bne.w	8000dc0 <HAL_GPIO_Init+0x10>
  }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000
 80010b4:	48000400 	.word	0x48000400
 80010b8:	48000800 	.word	0x48000800
 80010bc:	48000c00 	.word	0x48000c00
 80010c0:	48001000 	.word	0x48001000
 80010c4:	48001400 	.word	0x48001400
 80010c8:	48001800 	.word	0x48001800
 80010cc:	48001c00 	.word	0x48001c00
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43d9      	mvns	r1, r3
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	400b      	ands	r3, r1
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b08f      	sub	sp, #60	; 0x3c
 800113c:	af0a      	add	r7, sp, #40	; 0x28
 800113e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e054      	b.n	80011f4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d106      	bne.n	800116a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f007 fda1 	bl	8008cac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2203      	movs	r2, #3
 800116e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fcaf 	bl	8004aec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	687e      	ldr	r6, [r7, #4]
 8001196:	466d      	mov	r5, sp
 8001198:	f106 0410 	add.w	r4, r6, #16
 800119c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80011ac:	1d33      	adds	r3, r6, #4
 80011ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f003 fc5e 	bl	8004a72 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2101      	movs	r1, #1
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fca6 	bl	8004b0e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	687e      	ldr	r6, [r7, #4]
 80011ca:	466d      	mov	r5, sp
 80011cc:	f106 0410 	add.w	r4, r6, #16
 80011d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e0:	1d33      	adds	r3, r6, #4
 80011e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e4:	6838      	ldr	r0, [r7, #0]
 80011e6:	f003 fdb5 	bl	8004d54 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011fc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af04      	add	r7, sp, #16
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	70fb      	strb	r3, [r7, #3]
 800120e:	460b      	mov	r3, r1
 8001210:	70bb      	strb	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_HCD_HC_Init+0x28>
 8001220:	2302      	movs	r3, #2
 8001222:	e076      	b.n	8001312 <HAL_HCD_HC_Init+0x116>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	212c      	movs	r1, #44	; 0x2c
 8001232:	fb01 f303 	mul.w	r3, r1, r3
 8001236:	4413      	add	r3, r2
 8001238:	333d      	adds	r3, #61	; 0x3d
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	212c      	movs	r1, #44	; 0x2c
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	4413      	add	r3, r2
 800124a:	3338      	adds	r3, #56	; 0x38
 800124c:	787a      	ldrb	r2, [r7, #1]
 800124e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	212c      	movs	r1, #44	; 0x2c
 8001256:	fb01 f303 	mul.w	r3, r1, r3
 800125a:	4413      	add	r3, r2
 800125c:	3340      	adds	r3, #64	; 0x40
 800125e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001260:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	212c      	movs	r1, #44	; 0x2c
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	4413      	add	r3, r2
 800126e:	3339      	adds	r3, #57	; 0x39
 8001270:	78fa      	ldrb	r2, [r7, #3]
 8001272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	212c      	movs	r1, #44	; 0x2c
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	333f      	adds	r3, #63	; 0x3f
 8001282:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	78ba      	ldrb	r2, [r7, #2]
 800128c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001290:	b2d0      	uxtb	r0, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	212c      	movs	r1, #44	; 0x2c
 8001296:	fb01 f303 	mul.w	r3, r1, r3
 800129a:	4413      	add	r3, r2
 800129c:	333a      	adds	r3, #58	; 0x3a
 800129e:	4602      	mov	r2, r0
 80012a0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80012a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da09      	bge.n	80012be <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	212c      	movs	r1, #44	; 0x2c
 80012b0:	fb01 f303 	mul.w	r3, r1, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	333b      	adds	r3, #59	; 0x3b
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	e008      	b.n	80012d0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	212c      	movs	r1, #44	; 0x2c
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	333b      	adds	r3, #59	; 0x3b
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	212c      	movs	r1, #44	; 0x2c
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	4413      	add	r3, r2
 80012dc:	333c      	adds	r3, #60	; 0x3c
 80012de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012e2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	787c      	ldrb	r4, [r7, #1]
 80012ea:	78ba      	ldrb	r2, [r7, #2]
 80012ec:	78f9      	ldrb	r1, [r7, #3]
 80012ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4623      	mov	r3, r4
 8001300:	f003 fe6c 	bl	8004fdc <USB_HC_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}

0800131a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_HCD_HC_Halt+0x1e>
 8001334:	2302      	movs	r3, #2
 8001336:	e00f      	b.n	8001358 <HAL_HCD_HC_Halt+0x3e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f004 f848 	bl	80053de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	70fb      	strb	r3, [r7, #3]
 8001372:	460b      	mov	r3, r1
 8001374:	70bb      	strb	r3, [r7, #2]
 8001376:	4613      	mov	r3, r2
 8001378:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	212c      	movs	r1, #44	; 0x2c
 8001380:	fb01 f303 	mul.w	r3, r1, r3
 8001384:	4413      	add	r3, r2
 8001386:	333b      	adds	r3, #59	; 0x3b
 8001388:	78ba      	ldrb	r2, [r7, #2]
 800138a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	212c      	movs	r1, #44	; 0x2c
 8001392:	fb01 f303 	mul.w	r3, r1, r3
 8001396:	4413      	add	r3, r2
 8001398:	333f      	adds	r3, #63	; 0x3f
 800139a:	787a      	ldrb	r2, [r7, #1]
 800139c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800139e:	7c3b      	ldrb	r3, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d112      	bne.n	80013ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	212c      	movs	r1, #44	; 0x2c
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	3342      	adds	r3, #66	; 0x42
 80013b2:	2203      	movs	r2, #3
 80013b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	212c      	movs	r1, #44	; 0x2c
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	333d      	adds	r3, #61	; 0x3d
 80013c4:	7f3a      	ldrb	r2, [r7, #28]
 80013c6:	701a      	strb	r2, [r3, #0]
 80013c8:	e008      	b.n	80013dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	212c      	movs	r1, #44	; 0x2c
 80013d0:	fb01 f303 	mul.w	r3, r1, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	3342      	adds	r3, #66	; 0x42
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	f200 80c6 	bhi.w	8001570 <HAL_HCD_HC_SubmitRequest+0x210>
 80013e4:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	0800155d 	.word	0x0800155d
 80013f4:	08001461 	.word	0x08001461
 80013f8:	080014df 	.word	0x080014df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80013fc:	7c3b      	ldrb	r3, [r7, #16]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f040 80b8 	bne.w	8001574 <HAL_HCD_HC_SubmitRequest+0x214>
 8001404:	78bb      	ldrb	r3, [r7, #2]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 80b4 	bne.w	8001574 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800140c:	8b3b      	ldrh	r3, [r7, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d108      	bne.n	8001424 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	212c      	movs	r1, #44	; 0x2c
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	3355      	adds	r3, #85	; 0x55
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	212c      	movs	r1, #44	; 0x2c
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4413      	add	r3, r2
 8001430:	3355      	adds	r3, #85	; 0x55
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	212c      	movs	r1, #44	; 0x2c
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	4413      	add	r3, r2
 8001444:	3342      	adds	r3, #66	; 0x42
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800144a:	e093      	b.n	8001574 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	212c      	movs	r1, #44	; 0x2c
 8001452:	fb01 f303 	mul.w	r3, r1, r3
 8001456:	4413      	add	r3, r2
 8001458:	3342      	adds	r3, #66	; 0x42
 800145a:	2202      	movs	r2, #2
 800145c:	701a      	strb	r2, [r3, #0]
      break;
 800145e:	e089      	b.n	8001574 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001460:	78bb      	ldrb	r3, [r7, #2]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d11d      	bne.n	80014a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	212c      	movs	r1, #44	; 0x2c
 800146c:	fb01 f303 	mul.w	r3, r1, r3
 8001470:	4413      	add	r3, r2
 8001472:	3355      	adds	r3, #85	; 0x55
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	212c      	movs	r1, #44	; 0x2c
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	4413      	add	r3, r2
 8001486:	3342      	adds	r3, #66	; 0x42
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800148c:	e073      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	212c      	movs	r1, #44	; 0x2c
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	4413      	add	r3, r2
 800149a:	3342      	adds	r3, #66	; 0x42
 800149c:	2202      	movs	r2, #2
 800149e:	701a      	strb	r2, [r3, #0]
      break;
 80014a0:	e069      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	212c      	movs	r1, #44	; 0x2c
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	3354      	adds	r3, #84	; 0x54
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	212c      	movs	r1, #44	; 0x2c
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	3342      	adds	r3, #66	; 0x42
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
      break;
 80014c8:	e055      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	212c      	movs	r1, #44	; 0x2c
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	3342      	adds	r3, #66	; 0x42
 80014d8:	2202      	movs	r2, #2
 80014da:	701a      	strb	r2, [r3, #0]
      break;
 80014dc:	e04b      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80014de:	78bb      	ldrb	r3, [r7, #2]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d11d      	bne.n	8001520 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	3355      	adds	r3, #85	; 0x55
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	212c      	movs	r1, #44	; 0x2c
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	3342      	adds	r3, #66	; 0x42
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800150a:	e034      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	212c      	movs	r1, #44	; 0x2c
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	4413      	add	r3, r2
 8001518:	3342      	adds	r3, #66	; 0x42
 800151a:	2202      	movs	r2, #2
 800151c:	701a      	strb	r2, [r3, #0]
      break;
 800151e:	e02a      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	4413      	add	r3, r2
 800152c:	3354      	adds	r3, #84	; 0x54
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	212c      	movs	r1, #44	; 0x2c
 800153a:	fb01 f303 	mul.w	r3, r1, r3
 800153e:	4413      	add	r3, r2
 8001540:	3342      	adds	r3, #66	; 0x42
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
      break;
 8001546:	e016      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	212c      	movs	r1, #44	; 0x2c
 800154e:	fb01 f303 	mul.w	r3, r1, r3
 8001552:	4413      	add	r3, r2
 8001554:	3342      	adds	r3, #66	; 0x42
 8001556:	2202      	movs	r2, #2
 8001558:	701a      	strb	r2, [r3, #0]
      break;
 800155a:	e00c      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	212c      	movs	r1, #44	; 0x2c
 8001562:	fb01 f303 	mul.w	r3, r1, r3
 8001566:	4413      	add	r3, r2
 8001568:	3342      	adds	r3, #66	; 0x42
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
      break;
 800156e:	e002      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001570:	bf00      	nop
 8001572:	e000      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001574:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	212c      	movs	r1, #44	; 0x2c
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	3344      	adds	r3, #68	; 0x44
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	8b3a      	ldrh	r2, [r7, #24]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	202c      	movs	r0, #44	; 0x2c
 8001590:	fb00 f303 	mul.w	r3, r0, r3
 8001594:	440b      	add	r3, r1
 8001596:	334c      	adds	r3, #76	; 0x4c
 8001598:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	212c      	movs	r1, #44	; 0x2c
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	3360      	adds	r3, #96	; 0x60
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	212c      	movs	r1, #44	; 0x2c
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	3350      	adds	r3, #80	; 0x50
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	212c      	movs	r1, #44	; 0x2c
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	3339      	adds	r3, #57	; 0x39
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	212c      	movs	r1, #44	; 0x2c
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	3361      	adds	r3, #97	; 0x61
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	222c      	movs	r2, #44	; 0x2c
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	3338      	adds	r3, #56	; 0x38
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f003 fde9 	bl	80051cc <USB_HC_StartXfer>
 80015fa:	4603      	mov	r3, r0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fb57 	bl	8004cce <USB_GetMode>
 8001620:	4603      	mov	r3, r0
 8001622:	2b01      	cmp	r3, #1
 8001624:	f040 80ef 	bne.w	8001806 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fb3b 	bl	8004ca8 <USB_ReadInterrupts>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80e5 	beq.w	8001804 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f003 fb32 	bl	8004ca8 <USB_ReadInterrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800164e:	d104      	bne.n	800165a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001658:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fb22 	bl	8004ca8 <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800166e:	d104      	bne.n	800167a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001678:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fb12 	bl	8004ca8 <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800168a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800168e:	d104      	bne.n	800169a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001698:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fb02 	bl	8004ca8 <USB_ReadInterrupts>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d103      	bne.n	80016b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2202      	movs	r2, #2
 80016b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 faf4 	bl	8004ca8 <USB_ReadInterrupts>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ca:	d115      	bne.n	80016f8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d108      	bne.n	80016f8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f007 fb62 	bl	8008db0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fbac 	bl	8004e50 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fad3 	bl	8004ca8 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d102      	bne.n	8001714 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f001 f962 	bl	80029d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fac5 	bl	8004ca8 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b08      	cmp	r3, #8
 8001726:	d106      	bne.n	8001736 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f007 fb25 	bl	8008d78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2208      	movs	r2, #8
 8001734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fab4 	bl	8004ca8 <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b10      	cmp	r3, #16
 8001748:	d101      	bne.n	800174e <HAL_HCD_IRQHandler+0x14a>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_HCD_IRQHandler+0x14c>
 800174e:	2300      	movs	r3, #0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d012      	beq.n	800177a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699a      	ldr	r2, [r3, #24]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0210 	bic.w	r2, r2, #16
 8001762:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f001 f865 	bl	8002834 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0210 	orr.w	r2, r2, #16
 8001778:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fa92 	bl	8004ca8 <USB_ReadInterrupts>
 8001784:	4603      	mov	r3, r0
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800178e:	d13a      	bne.n	8001806 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fe11 	bl	80053bc <USB_HC_ReadInterrupt>
 800179a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e025      	b.n	80017ee <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d018      	beq.n	80017e8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017cc:	d106      	bne.n	80017dc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f897 	bl	8001908 <HCD_HC_IN_IRQHandler>
 80017da:	e005      	b.n	80017e8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fc90 	bl	8002108 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d3d4      	bcc.n	80017a2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	e000      	b.n	8001806 <HAL_HCD_IRQHandler+0x202>
      return;
 8001804:	bf00      	nop
    }
  }
}
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_HCD_Start+0x16>
 800181e:	2302      	movs	r3, #2
 8001820:	e013      	b.n	800184a <HAL_HCD_Start+0x3e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f94b 	bl	8004aca <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fb6c 	bl	8004f18 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_HCD_Stop+0x16>
 8001864:	2302      	movs	r3, #2
 8001866:	e00d      	b.n	8001884 <HAL_HCD_Stop+0x32>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fece 	bl	8005616 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fb13 	bl	8004ec4 <USB_ResetPort>
 800189e:	4603      	mov	r3, r0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3360      	adds	r3, #96	; 0x60
 80018c2:	781b      	ldrb	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fb6b 	bl	8004fb8 <USB_GetCurrentFrame>
 80018e2:	4603      	mov	r3, r0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fb46 	bl	8004f8a <USB_GetHostSpeed>
 80018fe:	4603      	mov	r3, r0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b04      	cmp	r3, #4
 8001936:	d119      	bne.n	800196c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	015a      	lsls	r2, r3, #5
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001944:	461a      	mov	r2, r3
 8001946:	2304      	movs	r3, #4
 8001948:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4413      	add	r3, r2
 8001952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	0151      	lsls	r1, r2, #5
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	440a      	add	r2, r1
 8001960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	60d3      	str	r3, [r2, #12]
 800196a:	e101      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4413      	add	r3, r2
 8001974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001982:	d12b      	bne.n	80019dc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001990:	461a      	mov	r2, r3
 8001992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001996:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3361      	adds	r3, #97	; 0x61
 80019a6:	2207      	movs	r2, #7
 80019a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	0151      	lsls	r1, r2, #5
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	440a      	add	r2, r1
 80019c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fd02 	bl	80053de <USB_HC_Halt>
 80019da:	e0c9      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d109      	bne.n	8001a06 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	461a      	mov	r2, r3
 8001a00:	2320      	movs	r3, #32
 8001a02:	6093      	str	r3, [r2, #8]
 8001a04:	e0b4      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d133      	bne.n	8001a84 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	015a      	lsls	r2, r3, #5
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	0151      	lsls	r1, r2, #5
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	440a      	add	r2, r1
 8001a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3361      	adds	r3, #97	; 0x61
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2308      	movs	r3, #8
 8001a70:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 fcae 	bl	80053de <USB_HC_Halt>
 8001a82:	e075      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9a:	d134      	bne.n	8001b06 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	015a      	lsls	r2, r3, #5
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	0151      	lsls	r1, r2, #5
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	440a      	add	r2, r1
 8001ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3361      	adds	r3, #97	; 0x61
 8001aca:	2208      	movs	r2, #8
 8001acc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ada:	461a      	mov	r2, r3
 8001adc:	2310      	movs	r3, #16
 8001ade:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	015a      	lsls	r2, r3, #5
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aec:	461a      	mov	r2, r3
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fc6d 	bl	80053de <USB_HC_Halt>
 8001b04:	e034      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b18:	2b80      	cmp	r3, #128	; 0x80
 8001b1a:	d129      	bne.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	0151      	lsls	r1, r2, #5
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	440a      	add	r2, r1
 8001b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3361      	adds	r3, #97	; 0x61
 8001b4a:	2206      	movs	r2, #6
 8001b4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fc40 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b86:	d122      	bne.n	8001bce <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	015a      	lsls	r2, r3, #5
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	0151      	lsls	r1, r2, #5
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	440a      	add	r2, r1
 8001b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fc13 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001bcc:	e298      	b.n	8002100 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	f040 80fd 	bne.w	8001de0 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3361      	adds	r3, #97	; 0x61
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	335c      	adds	r3, #92	; 0x5c
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c16:	461a      	mov	r2, r3
 8001c18:	2301      	movs	r3, #1
 8001c1a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	333f      	adds	r3, #63	; 0x3f
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	333f      	adds	r3, #63	; 0x3f
 8001c3e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d121      	bne.n	8001c88 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	0151      	lsls	r1, r2, #5
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	440a      	add	r2, r1
 8001c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fbb5 	bl	80053de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	461a      	mov	r2, r3
 8001c82:	2310      	movs	r3, #16
 8001c84:	6093      	str	r3, [r2, #8]
 8001c86:	e066      	b.n	8001d56 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	333f      	adds	r3, #63	; 0x3f
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d127      	bne.n	8001cec <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	0151      	lsls	r1, r2, #5
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	440a      	add	r2, r1
 8001cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3360      	adds	r3, #96	; 0x60
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	b2d9      	uxtb	r1, r3
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	202c      	movs	r0, #44	; 0x2c
 8001cd8:	fb00 f303 	mul.w	r3, r0, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3360      	adds	r3, #96	; 0x60
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f007 f871 	bl	8008dcc <HAL_HCD_HC_NotifyURBChange_Callback>
 8001cea:	e034      	b.n	8001d56 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	333f      	adds	r3, #63	; 0x3f
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d12a      	bne.n	8001d56 <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3360      	adds	r3, #96	; 0x60
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3354      	adds	r3, #84	; 0x54
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	f083 0301 	eor.w	r3, r3, #1
 8001d26:	b2d8      	uxtb	r0, r3
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3354      	adds	r3, #84	; 0x54
 8001d36:	4602      	mov	r2, r0
 8001d38:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	b2d9      	uxtb	r1, r3
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	202c      	movs	r0, #44	; 0x2c
 8001d44:	fb00 f303 	mul.w	r3, r0, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3360      	adds	r3, #96	; 0x60
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f007 f83b 	bl	8008dcc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12b      	bne.n	8001db6 <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3348      	adds	r3, #72	; 0x48
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	202c      	movs	r0, #44	; 0x2c
 8001d74:	fb00 f202 	mul.w	r2, r0, r2
 8001d78:	440a      	add	r2, r1
 8001d7a:	3240      	adds	r2, #64	; 0x40
 8001d7c:	8812      	ldrh	r2, [r2, #0]
 8001d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 81ba 	beq.w	8002100 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	3354      	adds	r3, #84	; 0x54
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2d8      	uxtb	r0, r3
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3354      	adds	r3, #84	; 0x54
 8001db0:	4602      	mov	r2, r0
 8001db2:	701a      	strb	r2, [r3, #0]
}
 8001db4:	e1a4      	b.n	8002100 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3354      	adds	r3, #84	; 0x54
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	f083 0301 	eor.w	r3, r3, #1
 8001dca:	b2d8      	uxtb	r0, r3
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3354      	adds	r3, #84	; 0x54
 8001dda:	4602      	mov	r2, r0
 8001ddc:	701a      	strb	r2, [r3, #0]
}
 8001dde:	e18f      	b.n	8002100 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	f040 8106 	bne.w	8002004 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	0151      	lsls	r1, r2, #5
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	440a      	add	r2, r1
 8001e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3361      	adds	r3, #97	; 0x61
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d109      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	3360      	adds	r3, #96	; 0x60
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e0c9      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3361      	adds	r3, #97	; 0x61
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d109      	bne.n	8001e68 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3360      	adds	r3, #96	; 0x60
 8001e62:	2205      	movs	r2, #5
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e0b5      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3361      	adds	r3, #97	; 0x61
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b06      	cmp	r3, #6
 8001e7a:	d009      	beq.n	8001e90 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3361      	adds	r3, #97	; 0x61
 8001e8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d150      	bne.n	8001f32 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	335c      	adds	r3, #92	; 0x5c
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	fb00 f303 	mul.w	r3, r0, r3
 8001eac:	440b      	add	r3, r1
 8001eae:	335c      	adds	r3, #92	; 0x5c
 8001eb0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	335c      	adds	r3, #92	; 0x5c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d912      	bls.n	8001eec <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	335c      	adds	r3, #92	; 0x5c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3360      	adds	r3, #96	; 0x60
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001eea:	e073      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3360      	adds	r3, #96	; 0x60
 8001efa:	2202      	movs	r2, #2
 8001efc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f14:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f1c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f30:	e050      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3361      	adds	r3, #97	; 0x61
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d122      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3360      	adds	r3, #96	; 0x60
 8001f54:	2202      	movs	r2, #2
 8001f56:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f6e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f76:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e023      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	3361      	adds	r3, #97	; 0x61
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b07      	cmp	r3, #7
 8001f9e:	d119      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	335c      	adds	r3, #92	; 0x5c
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	202c      	movs	r0, #44	; 0x2c
 8001fb8:	fb00 f303 	mul.w	r3, r0, r3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	335c      	adds	r3, #92	; 0x5c
 8001fc0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3360      	adds	r3, #96	; 0x60
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	b2d9      	uxtb	r1, r3
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	202c      	movs	r0, #44	; 0x2c
 8001ff0:	fb00 f303 	mul.w	r3, r0, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3360      	adds	r3, #96	; 0x60
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f006 fee5 	bl	8008dcc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002002:	e07d      	b.n	8002100 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b10      	cmp	r3, #16
 8002018:	d172      	bne.n	8002100 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	333f      	adds	r3, #63	; 0x3f
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d121      	bne.n	8002072 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	335c      	adds	r3, #92	; 0x5c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	0151      	lsls	r1, r2, #5
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	440a      	add	r2, r1
 8002056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f003 f9b7 	bl	80053de <USB_HC_Halt>
 8002070:	e03d      	b.n	80020ee <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	333f      	adds	r3, #63	; 0x3f
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	333f      	adds	r3, #63	; 0x3f
 8002094:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002096:	2b02      	cmp	r3, #2
 8002098:	d129      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	335c      	adds	r3, #92	; 0x5c
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3361      	adds	r3, #97	; 0x61
 80020ba:	2203      	movs	r2, #3
 80020bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	0151      	lsls	r1, r2, #5
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	440a      	add	r2, r1
 80020d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 f978 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	461a      	mov	r2, r3
 80020fc:	2310      	movs	r3, #16
 80020fe:	6093      	str	r3, [r2, #8]
}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d119      	bne.n	800216c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	461a      	mov	r2, r3
 8002146:	2304      	movs	r3, #4
 8002148:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	0151      	lsls	r1, r2, #5
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	440a      	add	r2, r1
 8002160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800216a:	e35f      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	4413      	add	r3, r2
 8002174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b20      	cmp	r3, #32
 8002180:	d13e      	bne.n	8002200 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	461a      	mov	r2, r3
 8002190:	2320      	movs	r3, #32
 8002192:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	333d      	adds	r3, #61	; 0x3d
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f040 8341 	bne.w	800282c <HCD_HC_OUT_IRQHandler+0x724>
      hhcd->hc[ch_num].do_ping = 0U;
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	333d      	adds	r3, #61	; 0x3d
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	2202      	movs	r2, #2
 80021cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 f8f0 	bl	80053de <USB_HC_Halt>
}
 80021fe:	e315      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002216:	d122      	bne.n	800225e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	0151      	lsls	r1, r2, #5
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	440a      	add	r2, r1
 800222e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f003 f8cb 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800225a:	6093      	str	r3, [r2, #8]
}
 800225c:	e2e6      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d150      	bne.n	8002316 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	335c      	adds	r3, #92	; 0x5c
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d111      	bne.n	80022c0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	333d      	adds	r3, #61	; 0x3d
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	461a      	mov	r2, r3
 80022bc:	2340      	movs	r3, #64	; 0x40
 80022be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	0151      	lsls	r1, r2, #5
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	440a      	add	r2, r1
 80022d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 f877 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	461a      	mov	r2, r3
 80022fe:	2301      	movs	r3, #1
 8002300:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3361      	adds	r3, #97	; 0x61
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
}
 8002314:	e28a      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d13c      	bne.n	80023a6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3361      	adds	r3, #97	; 0x61
 800233a:	2204      	movs	r2, #4
 800233c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	333d      	adds	r3, #61	; 0x3d
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	335c      	adds	r3, #92	; 0x5c
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	440a      	add	r2, r1
 8002378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f003 f826 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	461a      	mov	r2, r3
 80023a0:	2340      	movs	r3, #64	; 0x40
 80023a2:	6093      	str	r3, [r2, #8]
}
 80023a4:	e242      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d12a      	bne.n	8002412 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	461a      	mov	r2, r3
 80023ca:	2308      	movs	r3, #8
 80023cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	0151      	lsls	r1, r2, #5
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	440a      	add	r2, r1
 80023e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 fff0 	bl	80053de <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	3361      	adds	r3, #97	; 0x61
 800240c:	2205      	movs	r2, #5
 800240e:	701a      	strb	r2, [r3, #0]
}
 8002410:	e20c      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b10      	cmp	r3, #16
 8002426:	d133      	bne.n	8002490 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	335c      	adds	r3, #92	; 0x5c
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3361      	adds	r3, #97	; 0x61
 8002448:	2203      	movs	r2, #3
 800244a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	0151      	lsls	r1, r2, #5
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	440a      	add	r2, r1
 8002462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f002 ffb1 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	461a      	mov	r2, r3
 800248a:	2310      	movs	r3, #16
 800248c:	6093      	str	r3, [r2, #8]
}
 800248e:	e1cd      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d12a      	bne.n	80024fc <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3361      	adds	r3, #97	; 0x61
 80024b4:	2206      	movs	r2, #6
 80024b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	0151      	lsls	r1, r2, #5
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	440a      	add	r2, r1
 80024ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 ff7b 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	6093      	str	r3, [r2, #8]
}
 80024fa:	e197      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002512:	d134      	bne.n	800257e <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	0151      	lsls	r1, r2, #5
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	440a      	add	r2, r1
 800252a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f002 ff4d 	bl	80053de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	461a      	mov	r2, r3
 8002552:	2310      	movs	r3, #16
 8002554:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	461a      	mov	r2, r3
 8002564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002568:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3361      	adds	r3, #97	; 0x61
 8002578:	2208      	movs	r2, #8
 800257a:	701a      	strb	r2, [r3, #0]
}
 800257c:	e156      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	f040 814b 	bne.w	800282c <HCD_HC_OUT_IRQHandler+0x724>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	0151      	lsls	r1, r2, #5
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	440a      	add	r2, r1
 80025ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b0:	f023 0302 	bic.w	r3, r3, #2
 80025b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3361      	adds	r3, #97	; 0x61
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d179      	bne.n	80026be <HCD_HC_OUT_IRQHandler+0x5b6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3360      	adds	r3, #96	; 0x60
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	333f      	adds	r3, #63	; 0x3f
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d00a      	beq.n	8002606 <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	333f      	adds	r3, #63	; 0x3f
 80025fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002600:	2b03      	cmp	r3, #3
 8002602:	f040 80fc 	bne.w	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
        if (hhcd->Init.dma_enable == 1U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d142      	bne.n	8002694 <HCD_HC_OUT_IRQHandler+0x58c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	334c      	adds	r3, #76	; 0x4c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80ed 	beq.w	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	334c      	adds	r3, #76	; 0x4c
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	202c      	movs	r0, #44	; 0x2c
 800263a:	fb00 f202 	mul.w	r2, r0, r2
 800263e:	440a      	add	r2, r1
 8002640:	3240      	adds	r2, #64	; 0x40
 8002642:	8812      	ldrh	r2, [r2, #0]
 8002644:	4413      	add	r3, r2
 8002646:	3b01      	subs	r3, #1
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	202c      	movs	r0, #44	; 0x2c
 800264e:	fb00 f202 	mul.w	r2, r0, r2
 8002652:	440a      	add	r2, r1
 8002654:	3240      	adds	r2, #64	; 0x40
 8002656:	8812      	ldrh	r2, [r2, #0]
 8002658:	fbb3 f3f2 	udiv	r3, r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80ca 	beq.w	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3355      	adds	r3, #85	; 0x55
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2d8      	uxtb	r0, r3
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3355      	adds	r3, #85	; 0x55
 800268e:	4602      	mov	r2, r0
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e0b4      	b.n	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	3355      	adds	r3, #85	; 0x55
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2d8      	uxtb	r0, r3
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	3355      	adds	r3, #85	; 0x55
 80026b8:	4602      	mov	r2, r0
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e09f      	b.n	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3361      	adds	r3, #97	; 0x61
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d109      	bne.n	80026e6 <HCD_HC_OUT_IRQHandler+0x5de>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3360      	adds	r3, #96	; 0x60
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e08b      	b.n	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3361      	adds	r3, #97	; 0x61
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d109      	bne.n	800270e <HCD_HC_OUT_IRQHandler+0x606>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3360      	adds	r3, #96	; 0x60
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e077      	b.n	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3361      	adds	r3, #97	; 0x61
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d109      	bne.n	8002736 <HCD_HC_OUT_IRQHandler+0x62e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3360      	adds	r3, #96	; 0x60
 8002730:	2205      	movs	r2, #5
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e063      	b.n	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3361      	adds	r3, #97	; 0x61
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b06      	cmp	r3, #6
 8002748:	d009      	beq.n	800275e <HCD_HC_OUT_IRQHandler+0x656>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3361      	adds	r3, #97	; 0x61
 8002758:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800275a:	2b08      	cmp	r3, #8
 800275c:	d14f      	bne.n	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	335c      	adds	r3, #92	; 0x5c
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	202c      	movs	r0, #44	; 0x2c
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	440b      	add	r3, r1
 800277c:	335c      	adds	r3, #92	; 0x5c
 800277e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	335c      	adds	r3, #92	; 0x5c
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d912      	bls.n	80027ba <HCD_HC_OUT_IRQHandler+0x6b2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	335c      	adds	r3, #92	; 0x5c
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3360      	adds	r3, #96	; 0x60
 80027b4:	2204      	movs	r2, #4
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e021      	b.n	80027fe <HCD_HC_OUT_IRQHandler+0x6f6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3360      	adds	r3, #96	; 0x60
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027e2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ea:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	2302      	movs	r3, #2
 800280e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	b2d9      	uxtb	r1, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	202c      	movs	r0, #44	; 0x2c
 800281a:	fb00 f303 	mul.w	r3, r0, r3
 800281e:	4413      	add	r3, r2
 8002820:	3360      	adds	r3, #96	; 0x60
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f006 fad0 	bl	8008dcc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800282c:	bf00      	nop
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	0c5b      	lsrs	r3, r3, #17
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002868:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d004      	beq.n	800287a <HCD_RXQLVL_IRQHandler+0x46>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b05      	cmp	r3, #5
 8002874:	f000 80a9 	beq.w	80029ca <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002878:	e0aa      	b.n	80029d0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a6 	beq.w	80029ce <HCD_RXQLVL_IRQHandler+0x19a>
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3344      	adds	r3, #68	; 0x44
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 809b 	beq.w	80029ce <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3350      	adds	r3, #80	; 0x50
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	441a      	add	r2, r3
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	202c      	movs	r0, #44	; 0x2c
 80028b2:	fb00 f303 	mul.w	r3, r0, r3
 80028b6:	440b      	add	r3, r1
 80028b8:	334c      	adds	r3, #76	; 0x4c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d87a      	bhi.n	80029b6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3344      	adds	r3, #68	; 0x44
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	b292      	uxth	r2, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f002 f9bc 	bl	8004c56 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3344      	adds	r3, #68	; 0x44
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	441a      	add	r2, r3
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	202c      	movs	r0, #44	; 0x2c
 80028f8:	fb00 f303 	mul.w	r3, r0, r3
 80028fc:	440b      	add	r3, r1
 80028fe:	3344      	adds	r3, #68	; 0x44
 8002900:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3350      	adds	r3, #80	; 0x50
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	441a      	add	r2, r3
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	202c      	movs	r0, #44	; 0x2c
 800291c:	fb00 f303 	mul.w	r3, r0, r3
 8002920:	440b      	add	r3, r1
 8002922:	3350      	adds	r3, #80	; 0x50
 8002924:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	0cdb      	lsrs	r3, r3, #19
 8002936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3340      	adds	r3, #64	; 0x40
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4293      	cmp	r3, r2
 8002952:	d13c      	bne.n	80029ce <HCD_RXQLVL_IRQHandler+0x19a>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d039      	beq.n	80029ce <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002970:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002978:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3354      	adds	r3, #84	; 0x54
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2d8      	uxtb	r0, r3
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3354      	adds	r3, #84	; 0x54
 80029b0:	4602      	mov	r2, r0
 80029b2:	701a      	strb	r2, [r3, #0]
      break;
 80029b4:	e00b      	b.n	80029ce <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3360      	adds	r3, #96	; 0x60
 80029c4:	2204      	movs	r2, #4
 80029c6:	701a      	strb	r2, [r3, #0]
      break;
 80029c8:	e001      	b.n	80029ce <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80029ce:	bf00      	nop
  }
}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d10b      	bne.n	8002a28 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f006 f9ba 	bl	8008d94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d132      	bne.n	8002a98 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d126      	bne.n	8002a92 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d113      	bne.n	8002a74 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a56:	d106      	bne.n	8002a66 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 f9f6 	bl	8004e50 <USB_InitFSLSPClkSel>
 8002a64:	e011      	b.n	8002a8a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f002 f9ef 	bl	8004e50 <USB_InitFSLSPClkSel>
 8002a72:	e00a      	b.n	8002a8a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d106      	bne.n	8002a8a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a82:	461a      	mov	r2, r3
 8002a84:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a88:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f006 f9ac 	bl	8008de8 <HAL_HCD_PortEnabled_Callback>
 8002a90:	e002      	b.n	8002a98 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f006 f9b6 	bl	8008e04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d103      	bne.n	8002aaa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6013      	str	r3, [r2, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40007000 	.word	0x40007000

08002ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0a:	d130      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d038      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2232      	movs	r2, #50	; 0x32
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b40:	e002      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	d110      	bne.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00f      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d007      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb6:	6053      	str	r3, [r2, #4]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd6:	6053      	str	r3, [r2, #4]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40007000 	.word	0x40007000

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f000 bc16 	b.w	8003428 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfc:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c06:	4b9e      	ldr	r3, [pc, #632]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80e4 	beq.w	8002de6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4c>
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	f040 808b 	bne.w	8002d42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f040 8087 	bne.w	8002d42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c34:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_OscConfig+0x64>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e3ed      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	4b8b      	ldr	r3, [pc, #556]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_RCC_OscConfig+0x7e>
 8002c5c:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c64:	e005      	b.n	8002c72 <HAL_RCC_OscConfig+0x8a>
 8002c66:	4b86      	ldr	r3, [pc, #536]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d223      	bcs.n	8002cbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fd80 	bl	8003780 <RCC_SetFlashLatencyFromMSIRange>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e3ce      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8a:	4b7d      	ldr	r3, [pc, #500]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7c      	ldr	r2, [pc, #496]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4977      	ldr	r1, [pc, #476]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca8:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	4972      	ldr	r1, [pc, #456]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e025      	b.n	8002d0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbe:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6f      	ldr	r2, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	496a      	ldr	r1, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cdc:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	4965      	ldr	r1, [pc, #404]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fd40 	bl	8003780 <RCC_SetFlashLatencyFromMSIRange>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e38e      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0a:	f000 fc75 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	495a      	ldr	r1, [pc, #360]	; (8002e84 <HAL_RCC_OscConfig+0x29c>)
 8002d1c:	5ccb      	ldrb	r3, [r1, r3]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_OscConfig+0x2a0>)
 8002d28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_OscConfig+0x2a4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd feac 	bl	8000a8c <HAL_InitTick>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d052      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	e372      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d032      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d4a:	4b4d      	ldr	r3, [pc, #308]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d56:	f7fd fee9 	bl	8000b2c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d5e:	f7fd fee5 	bl	8000b2c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e35b      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d70:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a3f      	ldr	r2, [pc, #252]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	493a      	ldr	r1, [pc, #232]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	4935      	ldr	r1, [pc, #212]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
 8002dae:	e01a      	b.n	8002de6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002db0:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dbc:	f7fd feb6 	bl	8000b2c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc4:	f7fd feb2 	bl	8000b2c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e328      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1dc>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d073      	beq.n	8002eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x21c>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d10e      	bne.n	8002e1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d063      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d15f      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e305      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e24:	d106      	bne.n	8002e34 <HAL_RCC_OscConfig+0x24c>
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e01d      	b.n	8002e70 <HAL_RCC_OscConfig+0x288>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x270>
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0x288>
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01b      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fd fe58 	bl	8000b2c <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e7e:	e010      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2ba>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	08009414 	.word	0x08009414
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fd fe4c 	bl	8000b2c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e2c2      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea2:	4baf      	ldr	r3, [pc, #700]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2a8>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fd fe3c 	bl	8000b2c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fd fe38 	bl	8000b2c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e2ae      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eca:	4ba5      	ldr	r3, [pc, #660]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2d0>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d060      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x310>
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d116      	bne.n	8002f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef8:	4b99      	ldr	r3, [pc, #612]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_OscConfig+0x328>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e28b      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b93      	ldr	r3, [pc, #588]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	4990      	ldr	r1, [pc, #576]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f24:	e040      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d023      	beq.n	8002f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2e:	4b8c      	ldr	r3, [pc, #560]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a8b      	ldr	r2, [pc, #556]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fdf7 	bl	8000b2c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fd fdf3 	bl	8000b2c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e269      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f54:	4b82      	ldr	r3, [pc, #520]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b7f      	ldr	r3, [pc, #508]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	497c      	ldr	r1, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e018      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a79      	ldr	r2, [pc, #484]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fd fdd3 	bl	8000b2c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fd fdcf 	bl	8000b2c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e245      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f9c:	4b70      	ldr	r3, [pc, #448]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03c      	beq.n	800302e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	4a67      	ldr	r2, [pc, #412]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fd fdae 	bl	8000b2c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fd fdaa 	bl	8000b2c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e220      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe6:	4b5e      	ldr	r3, [pc, #376]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x3ec>
 8002ff4:	e01b      	b.n	800302e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff6:	4b5a      	ldr	r3, [pc, #360]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffc:	4a58      	ldr	r2, [pc, #352]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fd fd91 	bl	8000b2c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300e:	f7fd fd8d 	bl	8000b2c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e203      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003020:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80a6 	beq.w	8003188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003040:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	4b44      	ldr	r3, [pc, #272]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	4a43      	ldr	r2, [pc, #268]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003056:	6593      	str	r3, [r2, #88]	; 0x58
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003068:	4b3e      	ldr	r3, [pc, #248]	; (8003164 <HAL_RCC_OscConfig+0x57c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d118      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_OscConfig+0x57c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3a      	ldr	r2, [pc, #232]	; (8003164 <HAL_RCC_OscConfig+0x57c>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003080:	f7fd fd54 	bl	8000b2c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fd fd50 	bl	8000b2c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1c6      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309a:	4b32      	ldr	r3, [pc, #200]	; (8003164 <HAL_RCC_OscConfig+0x57c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4d8>
 80030ae:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030be:	e024      	b.n	800310a <HAL_RCC_OscConfig+0x522>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d110      	bne.n	80030ea <HAL_RCC_OscConfig+0x502>
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	4a20      	ldr	r2, [pc, #128]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e8:	e00f      	b.n	800310a <HAL_RCC_OscConfig+0x522>
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030fa:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	4a17      	ldr	r2, [pc, #92]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003102:	f023 0304 	bic.w	r3, r3, #4
 8003106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fd fd0b 	bl	8000b2c <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fd fd07 	bl	8000b2c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e17b      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ed      	beq.n	800311a <HAL_RCC_OscConfig+0x532>
 800313e:	e01a      	b.n	8003176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fd fcf4 	bl	8000b2c <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003148:	f7fd fcf0 	bl	8000b2c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d906      	bls.n	8003168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e164      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003168:	4ba8      	ldr	r3, [pc, #672]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e8      	bne.n	8003148 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4ba3      	ldr	r3, [pc, #652]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4aa2      	ldr	r2, [pc, #648]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d03c      	beq.n	800320e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800319c:	4b9b      	ldr	r3, [pc, #620]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800319e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a2:	4a9a      	ldr	r2, [pc, #616]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd fcbe 	bl	8000b2c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b4:	f7fd fcba 	bl	8000b2c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e130      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031c6:	4b91      	ldr	r3, [pc, #580]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80031c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ef      	beq.n	80031b4 <HAL_RCC_OscConfig+0x5cc>
 80031d4:	e01b      	b.n	800320e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d6:	4b8d      	ldr	r3, [pc, #564]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80031d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031dc:	4a8b      	ldr	r2, [pc, #556]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fca1 	bl	8000b2c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ee:	f7fd fc9d 	bl	8000b2c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e113      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003200:	4b82      	ldr	r3, [pc, #520]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ef      	bne.n	80031ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8107 	beq.w	8003426 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 80cb 	bne.w	80033b8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003222:	4b7a      	ldr	r3, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	429a      	cmp	r2, r3
 8003234:	d12c      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	3b01      	subs	r3, #1
 8003242:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d123      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d11b      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d113      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d109      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d06d      	beq.n	800336c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d068      	beq.n	8003368 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003296:	4b5d      	ldr	r3, [pc, #372]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032a2:	4b5a      	ldr	r3, [pc, #360]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0ba      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032b2:	4b56      	ldr	r3, [pc, #344]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032be:	f7fd fc35 	bl	8000b2c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fd fc31 	bl	8000b2c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0a7      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d8:	4b4c      	ldr	r3, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e4:	4b49      	ldr	r3, [pc, #292]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_RCC_OscConfig+0x828>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032fe:	0212      	lsls	r2, r2, #8
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003306:	0852      	lsrs	r2, r2, #1
 8003308:	3a01      	subs	r2, #1
 800330a:	0552      	lsls	r2, r2, #21
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003312:	0852      	lsrs	r2, r2, #1
 8003314:	3a01      	subs	r2, #1
 8003316:	0652      	lsls	r2, r2, #25
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800331e:	06d2      	lsls	r2, r2, #27
 8003320:	430a      	orrs	r2, r1
 8003322:	493a      	ldr	r1, [pc, #232]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003324:	4313      	orrs	r3, r2
 8003326:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003328:	4b38      	ldr	r3, [pc, #224]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a37      	ldr	r2, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003334:	4b35      	ldr	r3, [pc, #212]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a34      	ldr	r2, [pc, #208]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003340:	f7fd fbf4 	bl	8000b2c <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7fd fbf0 	bl	8000b2c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e066      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003366:	e05e      	b.n	8003426 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e05d      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d156      	bne.n	8003426 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800337e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003382:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a20      	ldr	r2, [pc, #128]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800338a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003390:	f7fd fbcc 	bl	8000b2c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fd fbc8 	bl	8000b2c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e03e      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x7b0>
 80033b6:	e036      	b.n	8003426 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d031      	beq.n	8003422 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033dc:	f023 0303 	bic.w	r3, r3, #3
 80033e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fd fb9b 	bl	8000b2c <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f8:	e00c      	b.n	8003414 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fd fb97 	bl	8000b2c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d905      	bls.n	8003414 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e00d      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
 800340c:	40021000 	.word	0x40021000
 8003410:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_OscConfig+0x848>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ec      	bne.n	80033fa <HAL_RCC_OscConfig+0x812>
 8003420:	e001      	b.n	8003426 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000

08003434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0c8      	b.n	80035da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b66      	ldr	r3, [pc, #408]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d910      	bls.n	8003478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	4961      	ldr	r1, [pc, #388]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b5f      	ldr	r3, [pc, #380]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0b0      	b.n	80035da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d04c      	beq.n	800351e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d107      	bne.n	800349c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348c:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d121      	bne.n	80034dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e09e      	b.n	80035da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d115      	bne.n	80034dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e092      	b.n	80035da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034bc:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e086      	b.n	80035da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e07e      	b.n	80035da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034dc:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 0203 	bic.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	493f      	ldr	r1, [pc, #252]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ee:	f7fd fb1d 	bl	8000b2c <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f4:	e00a      	b.n	800350c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f6:	f7fd fb19 	bl	8000b2c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e066      	b.n	80035da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350c:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 020c 	and.w	r2, r3, #12
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	429a      	cmp	r2, r3
 800351c:	d1eb      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352a:	4b2f      	ldr	r3, [pc, #188]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	492c      	ldr	r1, [pc, #176]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d210      	bcs.n	800356c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 0207 	bic.w	r2, r3, #7
 8003552:	4924      	ldr	r1, [pc, #144]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e036      	b.n	80035da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4918      	ldr	r1, [pc, #96]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4910      	ldr	r1, [pc, #64]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035aa:	f000 f825 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035ae:	4602      	mov	r2, r0
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_RCC_ClockConfig+0x1b4>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	490c      	ldr	r1, [pc, #48]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	5ccb      	ldrb	r3, [r1, r3]
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fa5c 	bl	8000a8c <HAL_InitTick>
 80035d4:	4603      	mov	r3, r0
 80035d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80035d8:	7afb      	ldrb	r3, [r7, #11]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08009414 	.word	0x08009414
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	; 0x24
 80035fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003606:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003610:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x34>
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b0c      	cmp	r3, #12
 8003624:	d121      	bne.n	800366a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d11e      	bne.n	800366a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800362c:	4b34      	ldr	r3, [pc, #208]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003638:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e005      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003648:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003654:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10d      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003668:	e00a      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d102      	bne.n	8003676 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <HAL_RCC_GetSysClockFreq+0x110>)
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	e004      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d101      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_RCC_GetSysClockFreq+0x114>)
 800367e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d134      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d003      	beq.n	800369e <HAL_RCC_GetSysClockFreq+0xa6>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d003      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0xac>
 800369c:	e005      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <HAL_RCC_GetSysClockFreq+0x110>)
 80036a0:	617b      	str	r3, [r7, #20]
      break;
 80036a2:	e005      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_GetSysClockFreq+0x114>)
 80036a6:	617b      	str	r3, [r7, #20]
      break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	617b      	str	r3, [r7, #20]
      break;
 80036ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	3301      	adds	r3, #1
 80036bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	fb02 f203 	mul.w	r2, r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	0e5b      	lsrs	r3, r3, #25
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	3301      	adds	r3, #1
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036f0:	69bb      	ldr	r3, [r7, #24]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3724      	adds	r7, #36	; 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	0800942c 	.word	0x0800942c
 8003708:	00f42400 	.word	0x00f42400
 800370c:	007a1200 	.word	0x007a1200

08003710 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <HAL_RCC_GetHCLKFreq+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000000 	.word	0x20000000

08003728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800372c:	f7ff fff0 	bl	8003710 <HAL_RCC_GetHCLKFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4904      	ldr	r1, [pc, #16]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	08009424 	.word	0x08009424

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003758:	f7ff ffda 	bl	8003710 <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0adb      	lsrs	r3, r3, #11
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4904      	ldr	r1, [pc, #16]	; (800377c <HAL_RCC_GetPCLK2Freq+0x28>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	08009424 	.word	0x08009424

08003780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800378c:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003798:	f7ff f9a2 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 800379c:	6178      	str	r0, [r7, #20]
 800379e:	e014      	b.n	80037ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	4a24      	ldr	r2, [pc, #144]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037aa:	6593      	str	r3, [r2, #88]	; 0x58
 80037ac:	4b22      	ldr	r3, [pc, #136]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037b8:	f7ff f992 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 80037bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d0:	d10b      	bne.n	80037ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d919      	bls.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2ba0      	cmp	r3, #160	; 0xa0
 80037dc:	d902      	bls.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037de:	2302      	movs	r3, #2
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e013      	b.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037e4:	2301      	movs	r3, #1
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	e010      	b.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d902      	bls.n	80037f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037f0:	2303      	movs	r3, #3
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	e00a      	b.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d102      	bne.n	8003802 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037fc:	2302      	movs	r3, #2
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e004      	b.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b70      	cmp	r3, #112	; 0x70
 8003806:	d101      	bne.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003808:	2301      	movs	r3, #1
 800380a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 0207 	bic.w	r2, r3, #7
 8003814:	4909      	ldr	r1, [pc, #36]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	429a      	cmp	r2, r3
 8003828:	d001      	beq.n	800382e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	40022000 	.word	0x40022000

08003840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003848:	2300      	movs	r3, #0
 800384a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800384c:	2300      	movs	r3, #0
 800384e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003858:	2b00      	cmp	r3, #0
 800385a:	d041      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003860:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003864:	d02a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003866:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800386a:	d824      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800386c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003870:	d008      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003876:	d81e      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800387c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003880:	d010      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003882:	e018      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003884:	4b86      	ldr	r3, [pc, #536]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a85      	ldr	r2, [pc, #532]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003890:	e015      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fadd 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038a2:	e00c      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3320      	adds	r3, #32
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fbc6 	bl	800403c <RCCEx_PLLSAI2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	74fb      	strb	r3, [r7, #19]
      break;
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c4:	4b76      	ldr	r3, [pc, #472]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d2:	4973      	ldr	r1, [pc, #460]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038da:	e001      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d041      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038f4:	d02a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038fa:	d824      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003906:	d81e      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d010      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003912:	e018      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003914:	4b62      	ldr	r3, [pc, #392]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a61      	ldr	r2, [pc, #388]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003920:	e015      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fa95 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003932:	e00c      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3320      	adds	r3, #32
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fb7e 	bl	800403c <RCCEx_PLLSAI2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003944:	e003      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	74fb      	strb	r3, [r7, #19]
      break;
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800394c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003954:	4b52      	ldr	r3, [pc, #328]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003962:	494f      	ldr	r1, [pc, #316]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800396a:	e001      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a0 	beq.w	8003abe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003998:	4b41      	ldr	r3, [pc, #260]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	4a40      	ldr	r2, [pc, #256]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a2:	6593      	str	r3, [r2, #88]	; 0x58
 80039a4:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b0:	2301      	movs	r3, #1
 80039b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b4:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c0:	f7fd f8b4 	bl	8000b2c <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039c6:	e009      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c8:	f7fd f8b0 	bl	8000b2c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d902      	bls.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	74fb      	strb	r3, [r7, #19]
        break;
 80039da:	e005      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ef      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d15c      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01f      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d019      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a0c:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd f86f 	bl	8000b2c <HAL_GetTick>
 8003a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a50:	e00b      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd f86b 	bl	8000b2c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d902      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	74fb      	strb	r3, [r7, #19]
            break;
 8003a68:	e006      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ec      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	4904      	ldr	r1, [pc, #16]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a96:	e009      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
 8003a9c:	e006      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aac:	7c7b      	ldrb	r3, [r7, #17]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d105      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab2:	4ba6      	ldr	r3, [pc, #664]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	4aa5      	ldr	r2, [pc, #660]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aca:	4ba0      	ldr	r3, [pc, #640]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f023 0203 	bic.w	r2, r3, #3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	499c      	ldr	r1, [pc, #624]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aec:	4b97      	ldr	r3, [pc, #604]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 020c 	bic.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	4994      	ldr	r1, [pc, #592]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b0e:	4b8f      	ldr	r3, [pc, #572]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	498b      	ldr	r1, [pc, #556]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b30:	4b86      	ldr	r3, [pc, #536]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4983      	ldr	r1, [pc, #524]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b52:	4b7e      	ldr	r3, [pc, #504]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b60:	497a      	ldr	r1, [pc, #488]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b74:	4b75      	ldr	r3, [pc, #468]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	4972      	ldr	r1, [pc, #456]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b96:	4b6d      	ldr	r3, [pc, #436]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba4:	4969      	ldr	r1, [pc, #420]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bb8:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc6:	4961      	ldr	r1, [pc, #388]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bda:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	4958      	ldr	r1, [pc, #352]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	4950      	ldr	r1, [pc, #320]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c1e:	4b4b      	ldr	r3, [pc, #300]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	4947      	ldr	r1, [pc, #284]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c40:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c46:	f023 0203 	bic.w	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	493f      	ldr	r1, [pc, #252]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c62:	4b3a      	ldr	r3, [pc, #232]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4936      	ldr	r1, [pc, #216]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c80:	d106      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8c:	60d3      	str	r3, [r2, #12]
 8003c8e:	e011      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f8d9 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d028      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cc0:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	491f      	ldr	r1, [pc, #124]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cde:	d106      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cea:	60d3      	str	r3, [r2, #12]
 8003cec:	e011      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f8aa 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2c:	4907      	ldr	r1, [pc, #28]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3c:	d108      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3e:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a02      	ldr	r2, [pc, #8]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d48:	60d3      	str	r3, [r2, #12]
 8003d4a:	e013      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003d4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f879 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d02f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d80:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d8e:	4929      	ldr	r1, [pc, #164]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2102      	movs	r1, #2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f856 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d014      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	74bb      	strb	r3, [r7, #18]
 8003dba:	e011      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3320      	adds	r3, #32
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f935 	bl	800403c <RCCEx_PLLSAI2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfc:	490d      	ldr	r1, [pc, #52]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e20:	4904      	ldr	r1, [pc, #16]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000

08003e38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e42:	f043 0304 	orr.w	r3, r3, #4
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000

08003e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e66:	4b74      	ldr	r3, [pc, #464]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e72:	4b71      	ldr	r3, [pc, #452]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
       ||
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e8a:	4b6b      	ldr	r3, [pc, #428]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
       ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d047      	beq.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e044      	b.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d018      	beq.n	8003ede <RCCEx_PLLSAI1_Config+0x86>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d825      	bhi.n	8003efc <RCCEx_PLLSAI1_Config+0xa4>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <RCCEx_PLLSAI1_Config+0x62>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d009      	beq.n	8003ecc <RCCEx_PLLSAI1_Config+0x74>
 8003eb8:	e020      	b.n	8003efc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eca:	e01a      	b.n	8003f02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003edc:	e013      	b.n	8003f06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ede:	4b56      	ldr	r3, [pc, #344]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eea:	4b53      	ldr	r3, [pc, #332]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efa:	e006      	b.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      break;
 8003f00:	e004      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f12:	4b49      	ldr	r3, [pc, #292]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	430b      	orrs	r3, r1
 8003f28:	4943      	ldr	r1, [pc, #268]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d17c      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fc fdf4 	bl	8000b2c <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f48:	f7fc fdf0 	bl	8000b2c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f5c:	4b36      	ldr	r3, [pc, #216]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ef      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d15f      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d110      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f74:	4b30      	ldr	r3, [pc, #192]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	0211      	lsls	r1, r2, #8
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	06d2      	lsls	r2, r2, #27
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	492a      	ldr	r1, [pc, #168]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	610b      	str	r3, [r1, #16]
 8003f94:	e027      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d112      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f9c:	4b26      	ldr	r3, [pc, #152]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6892      	ldr	r2, [r2, #8]
 8003fac:	0211      	lsls	r1, r2, #8
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6912      	ldr	r2, [r2, #16]
 8003fb2:	0852      	lsrs	r2, r2, #1
 8003fb4:	3a01      	subs	r2, #1
 8003fb6:	0552      	lsls	r2, r2, #21
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	491f      	ldr	r1, [pc, #124]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	610b      	str	r3, [r1, #16]
 8003fc0:	e011      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6892      	ldr	r2, [r2, #8]
 8003fd2:	0211      	lsls	r1, r2, #8
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6952      	ldr	r2, [r2, #20]
 8003fd8:	0852      	lsrs	r2, r2, #1
 8003fda:	3a01      	subs	r2, #1
 8003fdc:	0652      	lsls	r2, r2, #25
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	4915      	ldr	r1, [pc, #84]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fe6:	4b14      	ldr	r3, [pc, #80]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a13      	ldr	r2, [pc, #76]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7fc fd9b 	bl	8000b2c <HAL_GetTick>
 8003ff6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ff8:	e009      	b.n	800400e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ffa:	f7fc fd97 	bl	8000b2c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d902      	bls.n	800400e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	73fb      	strb	r3, [r7, #15]
          break;
 800400c:	e005      	b.n	800401a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ef      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000

0800403c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800404a:	4b69      	ldr	r3, [pc, #420]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d018      	beq.n	8004088 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004056:	4b66      	ldr	r3, [pc, #408]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0203 	and.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d10d      	bne.n	8004082 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
       ||
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800406e:	4b60      	ldr	r3, [pc, #384]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
       ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d047      	beq.n	8004112 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
 8004086:	e044      	b.n	8004112 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d018      	beq.n	80040c2 <RCCEx_PLLSAI2_Config+0x86>
 8004090:	2b03      	cmp	r3, #3
 8004092:	d825      	bhi.n	80040e0 <RCCEx_PLLSAI2_Config+0xa4>
 8004094:	2b01      	cmp	r3, #1
 8004096:	d002      	beq.n	800409e <RCCEx_PLLSAI2_Config+0x62>
 8004098:	2b02      	cmp	r3, #2
 800409a:	d009      	beq.n	80040b0 <RCCEx_PLLSAI2_Config+0x74>
 800409c:	e020      	b.n	80040e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800409e:	4b54      	ldr	r3, [pc, #336]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11d      	bne.n	80040e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ae:	e01a      	b.n	80040e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040b0:	4b4f      	ldr	r3, [pc, #316]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c0:	e013      	b.n	80040ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040c2:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ce:	4b48      	ldr	r3, [pc, #288]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040de:	e006      	b.n	80040ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e004      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040e6:	bf00      	nop
 80040e8:	e002      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10d      	bne.n	8004112 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040f6:	4b3e      	ldr	r3, [pc, #248]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	430b      	orrs	r3, r1
 800410c:	4938      	ldr	r1, [pc, #224]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d166      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004118:	4b35      	ldr	r3, [pc, #212]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a34      	ldr	r2, [pc, #208]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800411e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004124:	f7fc fd02 	bl	8000b2c <HAL_GetTick>
 8004128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800412a:	e009      	b.n	8004140 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800412c:	f7fc fcfe 	bl	8000b2c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d902      	bls.n	8004140 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	73fb      	strb	r3, [r7, #15]
        break;
 800413e:	e005      	b.n	800414c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004140:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ef      	bne.n	800412c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d149      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d110      	bne.n	800417a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004160:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6892      	ldr	r2, [r2, #8]
 8004168:	0211      	lsls	r1, r2, #8
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	06d2      	lsls	r2, r2, #27
 8004170:	430a      	orrs	r2, r1
 8004172:	491f      	ldr	r1, [pc, #124]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004174:	4313      	orrs	r3, r2
 8004176:	614b      	str	r3, [r1, #20]
 8004178:	e011      	b.n	800419e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800417a:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004182:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6892      	ldr	r2, [r2, #8]
 800418a:	0211      	lsls	r1, r2, #8
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6912      	ldr	r2, [r2, #16]
 8004190:	0852      	lsrs	r2, r2, #1
 8004192:	3a01      	subs	r2, #1
 8004194:	0652      	lsls	r2, r2, #25
 8004196:	430a      	orrs	r2, r1
 8004198:	4915      	ldr	r1, [pc, #84]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800419e:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fc fcbf 	bl	8000b2c <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041b0:	e009      	b.n	80041c6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041b2:	f7fc fcbb 	bl	8000b2c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d902      	bls.n	80041c6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	73fb      	strb	r3, [r7, #15]
          break;
 80041c4:	e005      	b.n	80041d2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0ef      	beq.n	80041b2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	4903      	ldr	r1, [pc, #12]	; (80041f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000

080041f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e040      	b.n	8004288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc fb14 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	; 0x24
 8004220:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f82c 	bl	8004290 <UART_SetConfig>
 8004238:	4603      	mov	r3, r0
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e022      	b.n	8004288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 faaa 	bl	80047a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800425e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800426e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb31 	bl	80048e8 <UART_CheckIdleState>
 8004286:	4603      	mov	r3, r0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004290:	b5b0      	push	{r4, r5, r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4bad      	ldr	r3, [pc, #692]	; (8004570 <UART_SetConfig+0x2e0>)
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	69f9      	ldr	r1, [r7, #28]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4aa2      	ldr	r2, [pc, #648]	; (8004574 <UART_SetConfig+0x2e4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	430a      	orrs	r2, r1
 800430a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a99      	ldr	r2, [pc, #612]	; (8004578 <UART_SetConfig+0x2e8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d121      	bne.n	800435a <UART_SetConfig+0xca>
 8004316:	4b99      	ldr	r3, [pc, #612]	; (800457c <UART_SetConfig+0x2ec>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	2b03      	cmp	r3, #3
 8004322:	d817      	bhi.n	8004354 <UART_SetConfig+0xc4>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0x9c>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	0800433d 	.word	0x0800433d
 8004330:	08004349 	.word	0x08004349
 8004334:	08004343 	.word	0x08004343
 8004338:	0800434f 	.word	0x0800434f
 800433c:	2301      	movs	r3, #1
 800433e:	76fb      	strb	r3, [r7, #27]
 8004340:	e0e7      	b.n	8004512 <UART_SetConfig+0x282>
 8004342:	2302      	movs	r3, #2
 8004344:	76fb      	strb	r3, [r7, #27]
 8004346:	e0e4      	b.n	8004512 <UART_SetConfig+0x282>
 8004348:	2304      	movs	r3, #4
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e0e1      	b.n	8004512 <UART_SetConfig+0x282>
 800434e:	2308      	movs	r3, #8
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e0de      	b.n	8004512 <UART_SetConfig+0x282>
 8004354:	2310      	movs	r3, #16
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e0db      	b.n	8004512 <UART_SetConfig+0x282>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a88      	ldr	r2, [pc, #544]	; (8004580 <UART_SetConfig+0x2f0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d132      	bne.n	80043ca <UART_SetConfig+0x13a>
 8004364:	4b85      	ldr	r3, [pc, #532]	; (800457c <UART_SetConfig+0x2ec>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d828      	bhi.n	80043c4 <UART_SetConfig+0x134>
 8004372:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0xe8>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043c5 	.word	0x080043c5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043b9 	.word	0x080043b9
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080043c5 	.word	0x080043c5
 8004398:	080043b3 	.word	0x080043b3
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043c5 	.word	0x080043c5
 80043a8:	080043bf 	.word	0x080043bf
 80043ac:	2300      	movs	r3, #0
 80043ae:	76fb      	strb	r3, [r7, #27]
 80043b0:	e0af      	b.n	8004512 <UART_SetConfig+0x282>
 80043b2:	2302      	movs	r3, #2
 80043b4:	76fb      	strb	r3, [r7, #27]
 80043b6:	e0ac      	b.n	8004512 <UART_SetConfig+0x282>
 80043b8:	2304      	movs	r3, #4
 80043ba:	76fb      	strb	r3, [r7, #27]
 80043bc:	e0a9      	b.n	8004512 <UART_SetConfig+0x282>
 80043be:	2308      	movs	r3, #8
 80043c0:	76fb      	strb	r3, [r7, #27]
 80043c2:	e0a6      	b.n	8004512 <UART_SetConfig+0x282>
 80043c4:	2310      	movs	r3, #16
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	e0a3      	b.n	8004512 <UART_SetConfig+0x282>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6d      	ldr	r2, [pc, #436]	; (8004584 <UART_SetConfig+0x2f4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d120      	bne.n	8004416 <UART_SetConfig+0x186>
 80043d4:	4b69      	ldr	r3, [pc, #420]	; (800457c <UART_SetConfig+0x2ec>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043de:	2b30      	cmp	r3, #48	; 0x30
 80043e0:	d013      	beq.n	800440a <UART_SetConfig+0x17a>
 80043e2:	2b30      	cmp	r3, #48	; 0x30
 80043e4:	d814      	bhi.n	8004410 <UART_SetConfig+0x180>
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d009      	beq.n	80043fe <UART_SetConfig+0x16e>
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d810      	bhi.n	8004410 <UART_SetConfig+0x180>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <UART_SetConfig+0x168>
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d006      	beq.n	8004404 <UART_SetConfig+0x174>
 80043f6:	e00b      	b.n	8004410 <UART_SetConfig+0x180>
 80043f8:	2300      	movs	r3, #0
 80043fa:	76fb      	strb	r3, [r7, #27]
 80043fc:	e089      	b.n	8004512 <UART_SetConfig+0x282>
 80043fe:	2302      	movs	r3, #2
 8004400:	76fb      	strb	r3, [r7, #27]
 8004402:	e086      	b.n	8004512 <UART_SetConfig+0x282>
 8004404:	2304      	movs	r3, #4
 8004406:	76fb      	strb	r3, [r7, #27]
 8004408:	e083      	b.n	8004512 <UART_SetConfig+0x282>
 800440a:	2308      	movs	r3, #8
 800440c:	76fb      	strb	r3, [r7, #27]
 800440e:	e080      	b.n	8004512 <UART_SetConfig+0x282>
 8004410:	2310      	movs	r3, #16
 8004412:	76fb      	strb	r3, [r7, #27]
 8004414:	e07d      	b.n	8004512 <UART_SetConfig+0x282>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5b      	ldr	r2, [pc, #364]	; (8004588 <UART_SetConfig+0x2f8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d120      	bne.n	8004462 <UART_SetConfig+0x1d2>
 8004420:	4b56      	ldr	r3, [pc, #344]	; (800457c <UART_SetConfig+0x2ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800442a:	2bc0      	cmp	r3, #192	; 0xc0
 800442c:	d013      	beq.n	8004456 <UART_SetConfig+0x1c6>
 800442e:	2bc0      	cmp	r3, #192	; 0xc0
 8004430:	d814      	bhi.n	800445c <UART_SetConfig+0x1cc>
 8004432:	2b80      	cmp	r3, #128	; 0x80
 8004434:	d009      	beq.n	800444a <UART_SetConfig+0x1ba>
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d810      	bhi.n	800445c <UART_SetConfig+0x1cc>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <UART_SetConfig+0x1b4>
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d006      	beq.n	8004450 <UART_SetConfig+0x1c0>
 8004442:	e00b      	b.n	800445c <UART_SetConfig+0x1cc>
 8004444:	2300      	movs	r3, #0
 8004446:	76fb      	strb	r3, [r7, #27]
 8004448:	e063      	b.n	8004512 <UART_SetConfig+0x282>
 800444a:	2302      	movs	r3, #2
 800444c:	76fb      	strb	r3, [r7, #27]
 800444e:	e060      	b.n	8004512 <UART_SetConfig+0x282>
 8004450:	2304      	movs	r3, #4
 8004452:	76fb      	strb	r3, [r7, #27]
 8004454:	e05d      	b.n	8004512 <UART_SetConfig+0x282>
 8004456:	2308      	movs	r3, #8
 8004458:	76fb      	strb	r3, [r7, #27]
 800445a:	e05a      	b.n	8004512 <UART_SetConfig+0x282>
 800445c:	2310      	movs	r3, #16
 800445e:	76fb      	strb	r3, [r7, #27]
 8004460:	e057      	b.n	8004512 <UART_SetConfig+0x282>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a49      	ldr	r2, [pc, #292]	; (800458c <UART_SetConfig+0x2fc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d125      	bne.n	80044b8 <UART_SetConfig+0x228>
 800446c:	4b43      	ldr	r3, [pc, #268]	; (800457c <UART_SetConfig+0x2ec>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447a:	d017      	beq.n	80044ac <UART_SetConfig+0x21c>
 800447c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004480:	d817      	bhi.n	80044b2 <UART_SetConfig+0x222>
 8004482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004486:	d00b      	beq.n	80044a0 <UART_SetConfig+0x210>
 8004488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448c:	d811      	bhi.n	80044b2 <UART_SetConfig+0x222>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <UART_SetConfig+0x20a>
 8004492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004496:	d006      	beq.n	80044a6 <UART_SetConfig+0x216>
 8004498:	e00b      	b.n	80044b2 <UART_SetConfig+0x222>
 800449a:	2300      	movs	r3, #0
 800449c:	76fb      	strb	r3, [r7, #27]
 800449e:	e038      	b.n	8004512 <UART_SetConfig+0x282>
 80044a0:	2302      	movs	r3, #2
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e035      	b.n	8004512 <UART_SetConfig+0x282>
 80044a6:	2304      	movs	r3, #4
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e032      	b.n	8004512 <UART_SetConfig+0x282>
 80044ac:	2308      	movs	r3, #8
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	e02f      	b.n	8004512 <UART_SetConfig+0x282>
 80044b2:	2310      	movs	r3, #16
 80044b4:	76fb      	strb	r3, [r7, #27]
 80044b6:	e02c      	b.n	8004512 <UART_SetConfig+0x282>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2d      	ldr	r2, [pc, #180]	; (8004574 <UART_SetConfig+0x2e4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d125      	bne.n	800450e <UART_SetConfig+0x27e>
 80044c2:	4b2e      	ldr	r3, [pc, #184]	; (800457c <UART_SetConfig+0x2ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d0:	d017      	beq.n	8004502 <UART_SetConfig+0x272>
 80044d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d6:	d817      	bhi.n	8004508 <UART_SetConfig+0x278>
 80044d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044dc:	d00b      	beq.n	80044f6 <UART_SetConfig+0x266>
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e2:	d811      	bhi.n	8004508 <UART_SetConfig+0x278>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <UART_SetConfig+0x260>
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d006      	beq.n	80044fc <UART_SetConfig+0x26c>
 80044ee:	e00b      	b.n	8004508 <UART_SetConfig+0x278>
 80044f0:	2300      	movs	r3, #0
 80044f2:	76fb      	strb	r3, [r7, #27]
 80044f4:	e00d      	b.n	8004512 <UART_SetConfig+0x282>
 80044f6:	2302      	movs	r3, #2
 80044f8:	76fb      	strb	r3, [r7, #27]
 80044fa:	e00a      	b.n	8004512 <UART_SetConfig+0x282>
 80044fc:	2304      	movs	r3, #4
 80044fe:	76fb      	strb	r3, [r7, #27]
 8004500:	e007      	b.n	8004512 <UART_SetConfig+0x282>
 8004502:	2308      	movs	r3, #8
 8004504:	76fb      	strb	r3, [r7, #27]
 8004506:	e004      	b.n	8004512 <UART_SetConfig+0x282>
 8004508:	2310      	movs	r3, #16
 800450a:	76fb      	strb	r3, [r7, #27]
 800450c:	e001      	b.n	8004512 <UART_SetConfig+0x282>
 800450e:	2310      	movs	r3, #16
 8004510:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a17      	ldr	r2, [pc, #92]	; (8004574 <UART_SetConfig+0x2e4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	f040 8087 	bne.w	800462c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800451e:	7efb      	ldrb	r3, [r7, #27]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d837      	bhi.n	8004594 <UART_SetConfig+0x304>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x29c>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004551 	.word	0x08004551
 8004530:	08004595 	.word	0x08004595
 8004534:	08004559 	.word	0x08004559
 8004538:	08004595 	.word	0x08004595
 800453c:	0800455f 	.word	0x0800455f
 8004540:	08004595 	.word	0x08004595
 8004544:	08004595 	.word	0x08004595
 8004548:	08004595 	.word	0x08004595
 800454c:	08004567 	.word	0x08004567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7ff f8ea 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 8004554:	6178      	str	r0, [r7, #20]
        break;
 8004556:	e022      	b.n	800459e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <UART_SetConfig+0x300>)
 800455a:	617b      	str	r3, [r7, #20]
        break;
 800455c:	e01f      	b.n	800459e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455e:	f7ff f84b 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8004562:	6178      	str	r0, [r7, #20]
        break;
 8004564:	e01b      	b.n	800459e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456a:	617b      	str	r3, [r7, #20]
        break;
 800456c:	e017      	b.n	800459e <UART_SetConfig+0x30e>
 800456e:	bf00      	nop
 8004570:	efff69f3 	.word	0xefff69f3
 8004574:	40008000 	.word	0x40008000
 8004578:	40013800 	.word	0x40013800
 800457c:	40021000 	.word	0x40021000
 8004580:	40004400 	.word	0x40004400
 8004584:	40004800 	.word	0x40004800
 8004588:	40004c00 	.word	0x40004c00
 800458c:	40005000 	.word	0x40005000
 8004590:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	76bb      	strb	r3, [r7, #26]
        break;
 800459c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80f1 	beq.w	8004788 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d305      	bcc.n	80045c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d902      	bls.n	80045c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	76bb      	strb	r3, [r7, #26]
 80045c6:	e0df      	b.n	8004788 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	020b      	lsls	r3, r1, #8
 80045da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045de:	0202      	lsls	r2, r0, #8
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	6849      	ldr	r1, [r1, #4]
 80045e4:	0849      	lsrs	r1, r1, #1
 80045e6:	4608      	mov	r0, r1
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	1814      	adds	r4, r2, r0
 80045ee:	eb43 0501 	adc.w	r5, r3, r1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	4620      	mov	r0, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	f7fb fdf4 	bl	80001ec <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4613      	mov	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004612:	d308      	bcc.n	8004626 <UART_SetConfig+0x396>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800461a:	d204      	bcs.n	8004626 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e0b0      	b.n	8004788 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	76bb      	strb	r3, [r7, #26]
 800462a:	e0ad      	b.n	8004788 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004634:	d15c      	bne.n	80046f0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004636:	7efb      	ldrb	r3, [r7, #27]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d828      	bhi.n	800468e <UART_SetConfig+0x3fe>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0x3b4>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004669 	.word	0x08004669
 8004648:	08004671 	.word	0x08004671
 800464c:	08004679 	.word	0x08004679
 8004650:	0800468f 	.word	0x0800468f
 8004654:	0800467f 	.word	0x0800467f
 8004658:	0800468f 	.word	0x0800468f
 800465c:	0800468f 	.word	0x0800468f
 8004660:	0800468f 	.word	0x0800468f
 8004664:	08004687 	.word	0x08004687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004668:	f7ff f85e 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 800466c:	6178      	str	r0, [r7, #20]
        break;
 800466e:	e013      	b.n	8004698 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7ff f870 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8004674:	6178      	str	r0, [r7, #20]
        break;
 8004676:	e00f      	b.n	8004698 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004678:	4b49      	ldr	r3, [pc, #292]	; (80047a0 <UART_SetConfig+0x510>)
 800467a:	617b      	str	r3, [r7, #20]
        break;
 800467c:	e00c      	b.n	8004698 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467e:	f7fe ffbb 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8004682:	6178      	str	r0, [r7, #20]
        break;
 8004684:	e008      	b.n	8004698 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468a:	617b      	str	r3, [r7, #20]
        break;
 800468c:	e004      	b.n	8004698 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	76bb      	strb	r3, [r7, #26]
        break;
 8004696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d074      	beq.n	8004788 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	005a      	lsls	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b0f      	cmp	r3, #15
 80046ba:	d916      	bls.n	80046ea <UART_SetConfig+0x45a>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c2:	d212      	bcs.n	80046ea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f023 030f 	bic.w	r3, r3, #15
 80046cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	b29a      	uxth	r2, r3
 80046da:	89fb      	ldrh	r3, [r7, #14]
 80046dc:	4313      	orrs	r3, r2
 80046de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	89fa      	ldrh	r2, [r7, #14]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e04e      	b.n	8004788 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	76bb      	strb	r3, [r7, #26]
 80046ee:	e04b      	b.n	8004788 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046f0:	7efb      	ldrb	r3, [r7, #27]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d827      	bhi.n	8004746 <UART_SetConfig+0x4b6>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0x46c>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	08004747 	.word	0x08004747
 800470c:	08004737 	.word	0x08004737
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	0800473f 	.word	0x0800473f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7ff f802 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 8004724:	6178      	str	r0, [r7, #20]
        break;
 8004726:	e013      	b.n	8004750 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7ff f814 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 800472c:	6178      	str	r0, [r7, #20]
        break;
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <UART_SetConfig+0x510>)
 8004732:	617b      	str	r3, [r7, #20]
        break;
 8004734:	e00c      	b.n	8004750 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004736:	f7fe ff5f 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 800473a:	6178      	str	r0, [r7, #20]
        break;
 800473c:	e008      	b.n	8004750 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004742:	617b      	str	r3, [r7, #20]
        break;
 8004744:	e004      	b.n	8004750 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	76bb      	strb	r3, [r7, #26]
        break;
 800474e:	bf00      	nop
    }

    if (pclk != 0U)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	085a      	lsrs	r2, r3, #1
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	441a      	add	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	b29b      	uxth	r3, r3
 800476a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b0f      	cmp	r3, #15
 8004770:	d908      	bls.n	8004784 <UART_SetConfig+0x4f4>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d204      	bcs.n	8004784 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	e001      	b.n	8004788 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004794:	7ebb      	ldrb	r3, [r7, #26]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}
 800479e:	bf00      	nop
 80047a0:	00f42400 	.word	0x00f42400

080047a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01a      	beq.n	80048ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a2:	d10a      	bne.n	80048ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f8:	f7fc f918 	bl	8000b2c <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d10e      	bne.n	800492a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f82d 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e023      	b.n	8004972 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d10e      	bne.n	8004956 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f817 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e00d      	b.n	8004972 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	e05e      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d05a      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004994:	f7fc f8ca 	bl	8000b2c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d302      	bcc.n	80049aa <UART_WaitOnFlagUntilTimeout+0x30>
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d11b      	bne.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e043      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02c      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fe:	d124      	bne.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a08:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00f      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	bf0c      	ite	eq
 8004a5a:	2301      	moveq	r3, #1
 8004a5c:	2300      	movne	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d091      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a72:	b084      	sub	sp, #16
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	f107 001c 	add.w	r0, r7, #28
 8004a80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f92b 	bl	8004cec <USB_CoreReset>
 8004a96:	4603      	mov	r3, r0
 8004a98:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8004aac:	e005      	b.n	8004aba <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac6:	b004      	add	sp, #16
 8004ac8:	4770      	bx	lr

08004aca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 0201 	bic.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d106      	bne.n	8004b3a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	60da      	str	r2, [r3, #12]
 8004b38:	e00b      	b.n	8004b52 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	e001      	b.n	8004b52 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e003      	b.n	8004b5a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b52:	2032      	movs	r0, #50	; 0x32
 8004b54:	f7fb fff6 	bl	8000b44 <HAL_Delay>

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <USB_FlushTxFifo+0x48>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e006      	b.n	8004b9e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d0f0      	beq.n	8004b7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	00030d40 	.word	0x00030d40

08004bb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2210      	movs	r2, #16
 8004bc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <USB_FlushRxFifo+0x40>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e006      	b.n	8004be2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d0f0      	beq.n	8004bc2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	00030d40 	.word	0x00030d40

08004bf4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4611      	mov	r1, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	460b      	mov	r3, r1
 8004c04:	71fb      	strb	r3, [r7, #7]
 8004c06:	4613      	mov	r3, r2
 8004c08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004c12:	88bb      	ldrh	r3, [r7, #4]
 8004c14:	3303      	adds	r3, #3
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	e00f      	b.n	8004c40 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	031a      	lsls	r2, r3, #12
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	3304      	adds	r3, #4
 8004c38:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3eb      	bcc.n	8004c20 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3724      	adds	r7, #36	; 0x24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b089      	sub	sp, #36	; 0x24
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	4613      	mov	r3, r2
 8004c62:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	3303      	adds	r3, #3
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	e00b      	b.n	8004c92 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3ef      	bcc.n	8004c7a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3724      	adds	r7, #36	; 0x24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0301 	and.w	r3, r3, #1
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <USB_CoreReset+0x64>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e01b      	b.n	8004d42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	daf2      	bge.n	8004cf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <USB_CoreReset+0x64>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e006      	b.n	8004d42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d0f0      	beq.n	8004d22 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	00030d40 	.word	0x00030d40

08004d54 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d54:	b084      	sub	sp, #16
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	f107 001c 	add.w	r0, r7, #28
 8004d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d70:	461a      	mov	r2, r3
 8004d72:	2300      	movs	r3, #0
 8004d74:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004da2:	2110      	movs	r1, #16
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff fedd 	bl	8004b64 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ff00 	bl	8004bb0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e015      	b.n	8004de2 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d3e5      	bcc.n	8004db6 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004dea:	2101      	movs	r1, #1
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f893 	bl	8004f18 <USB_DriveVbus>

  HAL_Delay(200U);
 8004df2:	20c8      	movs	r0, #200	; 0xc8
 8004df4:	f7fb fea6 	bl	8000b44 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f04f 32ff 	mov.w	r2, #4294967295
 8004e04:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2280      	movs	r2, #128	; 0x80
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0d      	ldr	r2, [pc, #52]	; (8004e44 <USB_HostInit+0xf0>)
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <USB_HostInit+0xf4>)
 8004e16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f043 0210 	orr.w	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <USB_HostInit+0xf8>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e3e:	b004      	add	sp, #16
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	00600080 	.word	0x00600080
 8004e48:	004000e0 	.word	0x004000e0
 8004e4c:	a3200008 	.word	0xa3200008

08004e50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e9e:	6053      	str	r3, [r2, #4]
 8004ea0:	e009      	b.n	8004eb6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d106      	bne.n	8004eb6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004eb4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ee4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ef4:	2064      	movs	r0, #100	; 0x64
 8004ef6:	f7fb fe25 	bl	8000b44 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f06:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fb fe1b 	bl	8000b44 <HAL_Delay>

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <USB_DriveVbus+0x44>
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d106      	bne.n	8004f5c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f5a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f66:	d109      	bne.n	8004f7c <USB_DriveVbus+0x64>
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f7a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	0c5b      	lsrs	r3, r3, #17
 8004fa8:	f003 0303 	and.w	r3, r3, #3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	b29b      	uxth	r3, r3
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4603      	mov	r3, r0
 8004fec:	70fb      	strb	r3, [r7, #3]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70bb      	strb	r3, [r7, #2]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4413      	add	r3, r2
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	461a      	mov	r2, r3
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
 8005010:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005016:	2b03      	cmp	r3, #3
 8005018:	d867      	bhi.n	80050ea <USB_HC_Init+0x10e>
 800501a:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <USB_HC_Init+0x44>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005031 	.word	0x08005031
 8005024:	080050ad 	.word	0x080050ad
 8005028:	08005031 	.word	0x08005031
 800502c:	0800506f 	.word	0x0800506f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005042:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	da51      	bge.n	80050f0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	440a      	add	r2, r1
 8005062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800506c:	e040      	b.n	80050f0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	461a      	mov	r2, r3
 800507c:	f240 639d 	movw	r3, #1693	; 0x69d
 8005080:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005082:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da34      	bge.n	80050f4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80050aa:	e023      	b.n	80050f4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	461a      	mov	r2, r3
 80050ba:	f240 2325 	movw	r3, #549	; 0x225
 80050be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80050c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	da17      	bge.n	80050f8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80050e6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80050e8:	e006      	b.n	80050f8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	77fb      	strb	r3, [r7, #31]
      break;
 80050ee:	e004      	b.n	80050fa <USB_HC_Init+0x11e>
      break;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <USB_HC_Init+0x11e>
      break;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <USB_HC_Init+0x11e>
      break;
 80050f8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	2101      	movs	r1, #1
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	6939      	ldr	r1, [r7, #16]
 8005110:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005114:	4313      	orrs	r3, r2
 8005116:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005124:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005128:	2b00      	cmp	r3, #0
 800512a:	da03      	bge.n	8005134 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800512c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e001      	b.n	8005138 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff ff26 	bl	8004f8a <USB_GetHostSpeed>
 800513e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005140:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005144:	2b02      	cmp	r3, #2
 8005146:	d106      	bne.n	8005156 <USB_HC_Init+0x17a>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d003      	beq.n	8005156 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800514e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e001      	b.n	800515a <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800515a:	787b      	ldrb	r3, [r7, #1]
 800515c:	059b      	lsls	r3, r3, #22
 800515e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005162:	78bb      	ldrb	r3, [r7, #2]
 8005164:	02db      	lsls	r3, r3, #11
 8005166:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800516a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800516c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005170:	049b      	lsls	r3, r3, #18
 8005172:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005176:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005178:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800517a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800517e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	0159      	lsls	r1, r3, #5
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	440b      	add	r3, r1
 800518c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005190:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005196:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005198:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800519c:	2b03      	cmp	r3, #3
 800519e:	d10f      	bne.n	80051c0 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051be:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80051c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop

080051cc <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80051e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	8912      	ldrh	r2, [r2, #8]
 80051f6:	4413      	add	r3, r2
 80051f8:	3b01      	subs	r3, #1
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	8912      	ldrh	r2, [r2, #8]
 80051fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005202:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005204:	8bfa      	ldrh	r2, [r7, #30]
 8005206:	8a7b      	ldrh	r3, [r7, #18]
 8005208:	429a      	cmp	r2, r3
 800520a:	d90b      	bls.n	8005224 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800520c:	8a7b      	ldrh	r3, [r7, #18]
 800520e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005210:	8bfb      	ldrh	r3, [r7, #30]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	8912      	ldrh	r2, [r2, #8]
 8005216:	fb02 f203 	mul.w	r2, r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	e001      	b.n	8005224 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005220:	2301      	movs	r3, #1
 8005222:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800522c:	8bfb      	ldrh	r3, [r7, #30]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	8912      	ldrh	r2, [r2, #8]
 8005232:	fb02 f203 	mul.w	r2, r2, r3
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	e003      	b.n	8005244 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800524c:	8bfb      	ldrh	r3, [r7, #30]
 800524e:	04d9      	lsls	r1, r3, #19
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <USB_HC_StartXfer+0x1ec>)
 8005252:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005254:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	7a9b      	ldrb	r3, [r3, #10]
 800525a:	075b      	lsls	r3, r3, #29
 800525c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	4401      	add	r1, r0
 8005268:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800526c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800526e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	440a      	add	r2, r1
 800529e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052a6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	7c7b      	ldrb	r3, [r7, #17]
 80052b8:	075b      	lsls	r3, r3, #29
 80052ba:	6979      	ldr	r1, [r7, #20]
 80052bc:	0148      	lsls	r0, r1, #5
 80052be:	69b9      	ldr	r1, [r7, #24]
 80052c0:	4401      	add	r1, r0
 80052c2:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e0:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	78db      	ldrb	r3, [r3, #3]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	e003      	b.n	80052fc <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052fa:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005302:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005310:	461a      	mov	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	78db      	ldrb	r3, [r3, #3]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d147      	bne.n	80053ae <USB_HC_StartXfer+0x1e2>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d043      	beq.n	80053ae <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	79db      	ldrb	r3, [r3, #7]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d830      	bhi.n	8005390 <USB_HC_StartXfer+0x1c4>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <USB_HC_StartXfer+0x168>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005345 	.word	0x08005345
 8005338:	08005369 	.word	0x08005369
 800533c:	08005345 	.word	0x08005345
 8005340:	08005369 	.word	0x08005369
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	3303      	adds	r3, #3
 800534a:	089b      	lsrs	r3, r3, #2
 800534c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800534e:	89fa      	ldrh	r2, [r7, #14]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	b29b      	uxth	r3, r3
 8005356:	429a      	cmp	r2, r3
 8005358:	d91c      	bls.n	8005394 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	619a      	str	r2, [r3, #24]
        }
        break;
 8005366:	e015      	b.n	8005394 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	3303      	adds	r3, #3
 800536e:	089b      	lsrs	r3, r3, #2
 8005370:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005372:	89fa      	ldrh	r2, [r7, #14]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	b29b      	uxth	r3, r3
 800537e:	429a      	cmp	r2, r3
 8005380:	d90a      	bls.n	8005398 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	619a      	str	r2, [r3, #24]
        }
        break;
 800538e:	e003      	b.n	8005398 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005390:	bf00      	nop
 8005392:	e002      	b.n	800539a <USB_HC_StartXfer+0x1ce>
        break;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <USB_HC_StartXfer+0x1ce>
        break;
 8005398:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68d9      	ldr	r1, [r3, #12]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	785a      	ldrb	r2, [r3, #1]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fc23 	bl	8004bf4 <USB_WritePacket>
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	1ff80000 	.word	0x1ff80000

080053bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	b29b      	uxth	r3, r3
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80053de:	b480      	push	{r7}
 80053e0:	b089      	sub	sp, #36	; 0x24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	0c9b      	lsrs	r3, r3, #18
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	0fdb      	lsrs	r3, r3, #31
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b20      	cmp	r3, #32
 800542c:	d104      	bne.n	8005438 <USB_HC_Halt+0x5a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	e0e8      	b.n	800560a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <USB_HC_Halt+0x66>
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d173      	bne.n	800552c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	440a      	add	r2, r1
 800545a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005462:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 80cb 	bne.w	8005608 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d143      	bne.n	8005506 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	440a      	add	r2, r1
 8005494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800549c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054dc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	3301      	adds	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ea:	d81d      	bhi.n	8005528 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005502:	d0ec      	beq.n	80054de <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005504:	e080      	b.n	8005608 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	440a      	add	r2, r1
 800551c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005524:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005526:	e06f      	b.n	8005608 <USB_HC_Halt+0x22a>
            break;
 8005528:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800552a:	e06d      	b.n	8005608 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	440a      	add	r2, r1
 8005542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800554a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d143      	bne.n	80055e4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	440a      	add	r2, r1
 8005572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800557a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	440a      	add	r2, r1
 8005592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800559a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3301      	adds	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055c8:	d81d      	bhi.n	8005606 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e0:	d0ec      	beq.n	80055bc <USB_HC_Halt+0x1de>
 80055e2:	e011      	b.n	8005608 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	e000      	b.n	8005608 <USB_HC_Halt+0x22a>
          break;
 8005606:	bf00      	nop
    }
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3724      	adds	r7, #36	; 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fa60 	bl	8004aec <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800562c:	2110      	movs	r1, #16
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fa98 	bl	8004b64 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fabb 	bl	8004bb0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e01f      	b.n	8005680 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005656:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800565e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005666:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	461a      	mov	r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3301      	adds	r3, #1
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b0f      	cmp	r3, #15
 8005684:	d9dc      	bls.n	8005640 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	e034      	b.n	80056f6 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056a2:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056aa:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056b2:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c0:	461a      	mov	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	3301      	adds	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d2:	d80c      	bhi.n	80056ee <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ea:	d0ec      	beq.n	80056c6 <USB_StopHost+0xb0>
 80056ec:	e000      	b.n	80056f0 <USB_StopHost+0xda>
        break;
 80056ee:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	3301      	adds	r3, #1
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b0f      	cmp	r3, #15
 80056fa:	d9c7      	bls.n	800568c <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005702:	461a      	mov	r2, r3
 8005704:	f04f 33ff 	mov.w	r3, #4294967295
 8005708:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f04f 32ff 	mov.w	r2, #4294967295
 8005710:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff f9d9 	bl	8004aca <USB_EnableGlobalInt>

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005722:	b590      	push	{r4, r7, lr}
 8005724:	b08b      	sub	sp, #44	; 0x2c
 8005726:	af04      	add	r7, sp, #16
 8005728:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8005732:	2300      	movs	r3, #0
 8005734:	2201      	movs	r2, #1
 8005736:	2101      	movs	r1, #1
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 ffa0 	bl	800767e <USBH_FindInterface>
 800573e:	4603      	mov	r3, r0
 8005740:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8005742:	7c7b      	ldrb	r3, [r7, #17]
 8005744:	2bff      	cmp	r3, #255	; 0xff
 8005746:	d101      	bne.n	800574c <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005748:	2302      	movs	r3, #2
 800574a:	e1a5      	b.n	8005a98 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8005752:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8005756:	f003 fd6d 	bl	8009234 <malloc>
 800575a:	4603      	mov	r3, r0
 800575c:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 800576e:	2302      	movs	r3, #2
 8005770:	e192      	b.n	8005a98 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8005772:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8005776:	2100      	movs	r1, #0
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f003 fd6b 	bl	8009254 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fc0f 	bl	8005fa2 <USBH_AUDIO_FindAudioStreamingIN>
 8005784:	4603      	mov	r3, r0
 8005786:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fcc9 	bl	8006120 <USBH_AUDIO_FindAudioStreamingOUT>
 800578e:	4603      	mov	r3, r0
 8005790:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d104      	bne.n	80057a2 <USBH_AUDIO_InterfaceInit+0x80>
 8005798:	7abb      	ldrb	r3, [r7, #10]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d101      	bne.n	80057a2 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800579e:	2302      	movs	r3, #2
 80057a0:	e17a      	b.n	8005a98 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]
 80057a6:	e0c6      	b.n	8005936 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 80057a8:	7dfa      	ldrb	r2, [r7, #23]
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	440b      	add	r3, r1
 80057b6:	333e      	adds	r3, #62	; 0x3e
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d156      	bne.n	800586c <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 80057be:	7dfa      	ldrb	r2, [r7, #23]
 80057c0:	68f9      	ldr	r1, [r7, #12]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	440b      	add	r3, r1
 80057cc:	333a      	adds	r3, #58	; 0x3a
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	8aba      	ldrh	r2, [r7, #20]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d24a      	bcs.n	800586c <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 80057d6:	7dfa      	ldrb	r2, [r7, #23]
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	440b      	add	r3, r1
 80057e4:	333a      	adds	r3, #58	; 0x3a
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 80057ea:	7dfa      	ldrb	r2, [r7, #23]
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	440b      	add	r3, r1
 80057f8:	333d      	adds	r3, #61	; 0x3d
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8005802:	7dfa      	ldrb	r2, [r7, #23]
 8005804:	68f9      	ldr	r1, [r7, #12]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	440b      	add	r3, r1
 8005810:	333c      	adds	r3, #60	; 0x3c
 8005812:	781a      	ldrb	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800581a:	7dfa      	ldrb	r2, [r7, #23]
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	440b      	add	r3, r1
 8005828:	3338      	adds	r3, #56	; 0x38
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8005832:	7dfa      	ldrb	r2, [r7, #23]
 8005834:	68f9      	ldr	r1, [r7, #12]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	440b      	add	r3, r1
 8005840:	333a      	adds	r3, #58	; 0x3a
 8005842:	881a      	ldrh	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800584a:	7dfa      	ldrb	r2, [r7, #23]
 800584c:	68f9      	ldr	r1, [r7, #12]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	440b      	add	r3, r1
 8005858:	3340      	adds	r3, #64	; 0x40
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b2da      	uxtb	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 800586c:	7dfa      	ldrb	r2, [r7, #23]
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	440b      	add	r3, r1
 800587a:	330c      	adds	r3, #12
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d156      	bne.n	8005930 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8005882:	7dfa      	ldrb	r2, [r7, #23]
 8005884:	68f9      	ldr	r1, [r7, #12]
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	440b      	add	r3, r1
 8005890:	3308      	adds	r3, #8
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	8a7a      	ldrh	r2, [r7, #18]
 8005896:	429a      	cmp	r2, r3
 8005898:	d24a      	bcs.n	8005930 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 800589a:	7dfa      	ldrb	r2, [r7, #23]
 800589c:	68f9      	ldr	r1, [r7, #12]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	440b      	add	r3, r1
 80058a8:	3308      	adds	r3, #8
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 80058ae:	7dfa      	ldrb	r2, [r7, #23]
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	440b      	add	r3, r1
 80058bc:	330b      	adds	r3, #11
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 80058c6:	7dfa      	ldrb	r2, [r7, #23]
 80058c8:	68f9      	ldr	r1, [r7, #12]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	440b      	add	r3, r1
 80058d4:	330a      	adds	r3, #10
 80058d6:	781a      	ldrb	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 80058de:	7dfa      	ldrb	r2, [r7, #23]
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	440b      	add	r3, r1
 80058ec:	3306      	adds	r3, #6
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 80058f6:	7dfa      	ldrb	r2, [r7, #23]
 80058f8:	68f9      	ldr	r1, [r7, #12]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	440b      	add	r3, r1
 8005904:	3308      	adds	r3, #8
 8005906:	881a      	ldrh	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800590e:	7dfa      	ldrb	r2, [r7, #23]
 8005910:	68f9      	ldr	r1, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	440b      	add	r3, r1
 800591c:	3340      	adds	r3, #64	; 0x40
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	3301      	adds	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	2b04      	cmp	r3, #4
 800593a:	f67f af35 	bls.w	80057a8 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fcad 	bl	800629e <USBH_AUDIO_FindHIDControl>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fd25 	bl	80063a2 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800595e:	2b01      	cmp	r3, #1
 8005960:	d12e      	bne.n	80059c0 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 ff68 	bl	8006838 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f003 f8d5 	bl	8008b20 <USBH_AllocPipe>
 8005976:	4603      	mov	r3, r0
 8005978:	461a      	mov	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800599e:	9202      	str	r2, [sp, #8]
 80059a0:	2201      	movs	r2, #1
 80059a2:	9201      	str	r2, [sp, #4]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	4623      	mov	r3, r4
 80059a8:	4602      	mov	r2, r0
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f003 f889 	bl	8008ac2 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80059b6:	2200      	movs	r2, #0
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f003 fb8d 	bl	80090da <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d12e      	bne.n	8005a28 <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 feac 	bl	8006728 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f003 f8a1 	bl	8008b20 <USBH_AllocPipe>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8005a06:	9202      	str	r2, [sp, #8]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	9201      	str	r2, [sp, #4]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	4623      	mov	r3, r4
 8005a10:	4602      	mov	r2, r0
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f003 f855 	bl	8008ac2 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f003 fb59 	bl	80090da <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d12b      	bne.n	8005a8a <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f003 f870 	bl	8008b20 <USBH_AllocPipe>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8005a68:	9202      	str	r2, [sp, #8]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	9201      	str	r2, [sp, #4]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	4623      	mov	r3, r4
 8005a72:	4602      	mov	r2, r0
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f003 f824 	bl	8008ac2 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005a80:	2200      	movs	r2, #0
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f003 fb28 	bl	80090da <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd90      	pop	{r4, r7, pc}

08005aa0 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d011      	beq.n	8005ae0 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f003 f81b 	bl	8008b00 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f003 f846 	bl	8008b64 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d011      	beq.n	8005b0e <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f003 f804 	bl	8008b00 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f003 f82f 	bl	8008b64 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d011      	beq.n	8005b3c <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f002 ffed 	bl	8008b00 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f003 f818 	bl	8008b64 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f003 fb77 	bl	8009244 <free>
    phost->pActiveClass->pData = 0U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005b82:	2301      	movs	r3, #1
 8005b84:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	f200 80be 	bhi.w	8005d0e <USBH_AUDIO_ClassRequest+0x1a2>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <USBH_AUDIO_ClassRequest+0x2c>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	08005cf7 	.word	0x08005cf7
 8005ba0:	08005bb5 	.word	0x08005bb5
 8005ba4:	08005bf7 	.word	0x08005bf7
 8005ba8:	08005c6f 	.word	0x08005c6f
 8005bac:	08005cb3 	.word	0x08005cb3
 8005bb0:	08005c5b 	.word	0x08005c5b
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d117      	bne.n	8005bee <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f002 fb2a 	bl	8008222 <USBH_SetInterface>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005bde:	e098      	b.n	8005d12 <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	f040 8095 	bne.w	8005d12 <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 8005be8:	2302      	movs	r3, #2
 8005bea:	75fb      	strb	r3, [r7, #23]
    break;
 8005bec:	e091      	b.n	8005d12 <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	701a      	strb	r2, [r3, #0]
    break;
 8005bf4:	e08d      	b.n	8005d12 <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d125      	bne.n	8005c4c <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8005c06:	2200      	movs	r2, #0
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f002 fb09 	bl	8008222 <USBH_SetInterface>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d112      	bne.n	8005c40 <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2207      	movs	r2, #7
 8005c1e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2206      	movs	r2, #6
 8005c24:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005c3e:	e06a      	b.n	8005d16 <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d167      	bne.n	8005d16 <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 8005c46:	2302      	movs	r3, #2
 8005c48:	75fb      	strb	r3, [r7, #23]
    break;
 8005c4a:	e064      	b.n	8005d16 <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2207      	movs	r2, #7
 8005c50:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2206      	movs	r2, #6
 8005c56:	705a      	strb	r2, [r3, #1]
    break;
 8005c58:	e05d      	b.n	8005d16 <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f938 	bl	8005ed0 <USBH_AUDIO_HandleCSRequest>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d159      	bne.n	8005d1a <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2205      	movs	r2, #5
 8005c6a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005c6c:	e055      	b.n	8005d1a <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d118      	bne.n	8005caa <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8005c84:	461a      	mov	r2, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f002 facb 	bl	8008222 <USBH_SetInterface>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2206      	movs	r2, #6
 8005c9a:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005c9c:	e03f      	b.n	8005d1e <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d13c      	bne.n	8005d1e <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	75fb      	strb	r3, [r7, #23]
    break;
 8005ca8:	e039      	b.n	8005d1e <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2206      	movs	r2, #6
 8005cae:	701a      	strb	r2, [r3, #0]
    break;
 8005cb0:	e035      	b.n	8005d1e <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d118      	bne.n	8005cee <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f002 faa9 	bl	8008222 <USBH_SetInterface>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005ce0:	e01f      	b.n	8005d22 <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d11c      	bne.n	8005d22 <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	75fb      	strb	r3, [r7, #23]
    break;
 8005cec:	e019      	b.n	8005d22 <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	701a      	strb	r2, [r3, #0]
    break;
 8005cf4:	e015      	b.n	8005d22 <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8005d02:	2102      	movs	r1, #2
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
    status  = USBH_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005d0c:	e00a      	b.n	8005d24 <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 8005d0e:	bf00      	nop
 8005d10:	e008      	b.n	8005d24 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005d12:	bf00      	nop
 8005d14:	e006      	b.n	8005d24 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005d16:	bf00      	nop
 8005d18:	e004      	b.n	8005d24 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005d1a:	bf00      	nop
 8005d1c:	e002      	b.n	8005d24 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005d22:	bf00      	nop
  }
  return status;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop

08005d30 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	3b04      	subs	r3, #4
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	f200 80aa 	bhi.w	8005eb2 <USBH_AUDIO_CSRequest+0x182>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <USBH_AUDIO_CSRequest+0x34>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005dc1 	.word	0x08005dc1
 8005d68:	08005e07 	.word	0x08005e07
 8005d6c:	08005d79 	.word	0x08005d79
 8005d70:	08005e67 	.word	0x08005e67
 8005d74:	08005ead 	.word	0x08005ead
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	78bb      	ldrb	r3, [r7, #2]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	2302      	movs	r3, #2
 8005d84:	2106      	movs	r1, #6
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fe94 	bl	8006ab4 <USBH_AC_GetCur>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	f000 808f 	beq.w	8005eb6 <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005daa:	3302      	adds	r3, #2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4313      	orrs	r3, r2
 8005db4:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8005db6:	897a      	ldrh	r2, [r7, #10]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 8005dbe:	e07a      	b.n	8005eb6 <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	78bb      	ldrb	r3, [r7, #2]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2302      	movs	r3, #2
 8005dcc:	2106      	movs	r1, #6
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 f835 	bl	8006e3e <USBH_AC_GetMin>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d06d      	beq.n	8005eba <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2205      	movs	r2, #5
 8005de2:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005df0:	3302      	adds	r3, #2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8005dfc:	897a      	ldrh	r2, [r7, #10]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8005e04:	e059      	b.n	8005eba <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	2302      	movs	r3, #2
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	78bb      	ldrb	r3, [r7, #2]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	2302      	movs	r3, #2
 8005e12:	2106      	movs	r1, #6
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fee4 	bl	8006be2 <USBH_AC_GetMax>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d04c      	beq.n	8005ebe <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2207      	movs	r2, #7
 8005e28:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005e36:	3302      	adds	r3, #2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8005e42:	897a      	ldrh	r2, [r7, #10]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d231      	bcs.n	8005ebe <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8005e60:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8005e64:	e02b      	b.n	8005ebe <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	2302      	movs	r3, #2
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	78bb      	ldrb	r3, [r7, #2]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2302      	movs	r3, #2
 8005e72:	2106      	movs	r1, #6
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 ff4b 	bl	8006d10 <USBH_AC_GetRes>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d01e      	beq.n	8005ec2 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2208      	movs	r2, #8
 8005e88:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005e96:	3302      	adds	r3, #2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8005ea2:	89ba      	ldrh	r2, [r7, #12]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 8005eaa:	e00a      	b.n	8005ec2 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	e008      	b.n	8005ec4 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e006      	b.n	8005ec4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e004      	b.n	8005ec4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005ec2:	bf00      	nop
  }
  return status;
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop

08005ed0 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff ff19 	bl	8005d30 <USBH_AUDIO_CSRequest>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d01c      	beq.n	8005f42 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10c      	bne.n	8005f2c <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]
 8005f2a:	e007      	b.n	8005f3c <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2206      	movs	r2, #6
 8005f40:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d102      	bne.n	8005f72 <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 f8e7 	bl	8007140 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d102      	bne.n	8005f82 <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 f81d 	bl	8006fbc <USBH_AUDIO_InputStream>
  }

  return status;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005faa:	2302      	movs	r3, #2
 8005fac:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	e09e      	b.n	8006100 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	211a      	movs	r1, #26
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	4413      	add	r3, r2
 8005fce:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	f040 8090 	bne.w	80060fa <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	211a      	movs	r1, #26
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8005fea:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	f040 8084 	bne.w	80060fa <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	211a      	movs	r1, #26
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	b25b      	sxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	da77      	bge.n	80060fa <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	211a      	movs	r1, #26
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	4413      	add	r3, r2
 8006016:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800601a:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 800601c:	2b00      	cmp	r3, #0
 800601e:	d06c      	beq.n	80060fa <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	7bba      	ldrb	r2, [r7, #14]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	201a      	movs	r0, #26
 8006028:	fb00 f303 	mul.w	r3, r0, r3
 800602c:	440b      	add	r3, r1
 800602e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006032:	7818      	ldrb	r0, [r3, #0]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	440b      	add	r3, r1
 8006040:	3306      	adds	r3, #6
 8006042:	4602      	mov	r2, r0
 8006044:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	7bba      	ldrb	r2, [r7, #14]
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	201a      	movs	r0, #26
 800604e:	fb00 f303 	mul.w	r3, r0, r3
 8006052:	440b      	add	r3, r1
 8006054:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006058:	8818      	ldrh	r0, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	440b      	add	r3, r1
 8006066:	3308      	adds	r3, #8
 8006068:	4602      	mov	r2, r0
 800606a:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	7bba      	ldrb	r2, [r7, #14]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	201a      	movs	r0, #26
 8006074:	fb00 f303 	mul.w	r3, r0, r3
 8006078:	440b      	add	r3, r1
 800607a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800607e:	7818      	ldrb	r0, [r3, #0]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	440b      	add	r3, r1
 800608c:	330b      	adds	r3, #11
 800608e:	4602      	mov	r2, r0
 8006090:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	7bba      	ldrb	r2, [r7, #14]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	201a      	movs	r0, #26
 800609a:	fb00 f303 	mul.w	r3, r0, r3
 800609e:	440b      	add	r3, r1
 80060a0:	f203 3345 	addw	r3, r3, #837	; 0x345
 80060a4:	7818      	ldrb	r0, [r3, #0]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	440b      	add	r3, r1
 80060b2:	330a      	adds	r3, #10
 80060b4:	4602      	mov	r2, r0
 80060b6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	211a      	movs	r1, #26
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	f203 3352 	addw	r3, r3, #850	; 0x352
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	7bba      	ldrb	r2, [r7, #14]
 80060cc:	b298      	uxth	r0, r3
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	440b      	add	r3, r1
 80060da:	330e      	adds	r3, #14
 80060dc:	4602      	mov	r2, r0
 80060de:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 80060e0:	7bba      	ldrb	r2, [r7, #14]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	440b      	add	r3, r1
 80060ee:	330c      	adds	r3, #12
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80060f4:	7bbb      	ldrb	r3, [r7, #14]
 80060f6:	3301      	adds	r3, #1
 80060f8:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	3301      	adds	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	2b09      	cmp	r3, #9
 8006104:	f67f af5d 	bls.w	8005fc2 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006112:	7b7b      	ldrb	r3, [r7, #13]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006128:	2302      	movs	r3, #2
 800612a:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]
 800613e:	e09e      	b.n	800627e <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	211a      	movs	r1, #26
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	4413      	add	r3, r2
 800614c:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b01      	cmp	r3, #1
 8006154:	f040 8090 	bne.w	8006278 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	211a      	movs	r1, #26
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006168:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800616a:	2b02      	cmp	r3, #2
 800616c:	f040 8084 	bne.w	8006278 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	211a      	movs	r1, #26
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	4413      	add	r3, r2
 800617c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	b25b      	sxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	db77      	blt.n	8006278 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	211a      	movs	r1, #26
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	4413      	add	r3, r2
 8006194:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006198:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800619a:	2b00      	cmp	r3, #0
 800619c:	d06c      	beq.n	8006278 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	7bba      	ldrb	r2, [r7, #14]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	201a      	movs	r0, #26
 80061a6:	fb00 f303 	mul.w	r3, r0, r3
 80061aa:	440b      	add	r3, r1
 80061ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061b0:	7818      	ldrb	r0, [r3, #0]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	440b      	add	r3, r1
 80061be:	3338      	adds	r3, #56	; 0x38
 80061c0:	4602      	mov	r2, r0
 80061c2:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	7bba      	ldrb	r2, [r7, #14]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	201a      	movs	r0, #26
 80061cc:	fb00 f303 	mul.w	r3, r0, r3
 80061d0:	440b      	add	r3, r1
 80061d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061d6:	8818      	ldrh	r0, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	440b      	add	r3, r1
 80061e4:	333a      	adds	r3, #58	; 0x3a
 80061e6:	4602      	mov	r2, r0
 80061e8:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	7bba      	ldrb	r2, [r7, #14]
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	201a      	movs	r0, #26
 80061f2:	fb00 f303 	mul.w	r3, r0, r3
 80061f6:	440b      	add	r3, r1
 80061f8:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80061fc:	7818      	ldrb	r0, [r3, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	440b      	add	r3, r1
 800620a:	333d      	adds	r3, #61	; 0x3d
 800620c:	4602      	mov	r2, r0
 800620e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	7bba      	ldrb	r2, [r7, #14]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	201a      	movs	r0, #26
 8006218:	fb00 f303 	mul.w	r3, r0, r3
 800621c:	440b      	add	r3, r1
 800621e:	f203 3345 	addw	r3, r3, #837	; 0x345
 8006222:	7818      	ldrb	r0, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	440b      	add	r3, r1
 8006230:	333c      	adds	r3, #60	; 0x3c
 8006232:	4602      	mov	r2, r0
 8006234:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	211a      	movs	r1, #26
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	4413      	add	r3, r2
 8006242:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	7bba      	ldrb	r2, [r7, #14]
 800624a:	b298      	uxth	r0, r3
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	440b      	add	r3, r1
 8006258:	3340      	adds	r3, #64	; 0x40
 800625a:	4602      	mov	r2, r0
 800625c:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 800625e:	7bba      	ldrb	r2, [r7, #14]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	440b      	add	r3, r1
 800626c:	333e      	adds	r3, #62	; 0x3e
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	3301      	adds	r3, #1
 8006276:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	3301      	adds	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b09      	cmp	r3, #9
 8006282:	f67f af5d 	bls.w	8006140 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8006286:	7bbb      	ldrb	r3, [r7, #14]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006290:	7b7b      	ldrb	r3, [r7, #13]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 80062a6:	2302      	movs	r3, #2
 80062a8:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 80062b4:	23ff      	movs	r3, #255	; 0xff
 80062b6:	2201      	movs	r2, #1
 80062b8:	2101      	movs	r1, #1
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 f9df 	bl	800767e <USBH_FindInterface>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2bff      	cmp	r3, #255	; 0xff
 80062c8:	d002      	beq.n	80062d0 <USBH_AUDIO_FindHIDControl+0x32>
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b09      	cmp	r3, #9
 80062ce:	d901      	bls.n	80062d4 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 80062d0:	2302      	movs	r3, #2
 80062d2:	e062      	b.n	800639a <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	73fb      	strb	r3, [r7, #15]
 80062d8:	e05b      	b.n	8006392 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	211a      	movs	r1, #26
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 3347 	addw	r3, r3, #839	; 0x347
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d14d      	bne.n	800638c <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	211a      	movs	r1, #26
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006300:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006302:	2b00      	cmp	r3, #0
 8006304:	d042      	beq.n	800638c <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	211a      	movs	r1, #26
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	4413      	add	r3, r2
 8006312:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b25b      	sxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	da36      	bge.n	800638c <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	211a      	movs	r1, #26
 8006324:	fb01 f303 	mul.w	r3, r1, r3
 8006328:	4413      	add	r3, r2
 800632a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	211a      	movs	r1, #26
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	4413      	add	r3, r2
 8006342:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	211a      	movs	r1, #26
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	4413      	add	r3, r2
 800635a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	211a      	movs	r1, #26
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	4413      	add	r3, r2
 8006372:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006376:	781a      	ldrb	r2, [r3, #0]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73bb      	strb	r3, [r7, #14]
        break;
 800638a:	e005      	b.n	8006398 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	3301      	adds	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b09      	cmp	r3, #9
 8006396:	d9a0      	bls.n	80062da <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8006398:	7bbb      	ldrb	r3, [r7, #14]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b088      	sub	sp, #32
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	331c      	adds	r3, #28
 80063c4:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 80063c6:	2309      	movs	r3, #9
 80063c8:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 80063ea:	e03d      	b.n	8006468 <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80063ec:	f107 030c 	add.w	r3, r7, #12
 80063f0:	4619      	mov	r1, r3
 80063f2:	69b8      	ldr	r0, [r7, #24]
 80063f4:	f002 f901 	bl	80085fa <USBH_GetNextDesc>
 80063f8:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d002      	beq.n	8006408 <USBH_AUDIO_ParseCSDescriptors+0x66>
 8006402:	2b24      	cmp	r3, #36	; 0x24
 8006404:	d00f      	beq.n	8006426 <USBH_AUDIO_ParseCSDescriptors+0x84>
 8006406:	e02e      	b.n	8006466 <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	789b      	ldrb	r3, [r3, #2]
 800640c:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	78db      	ldrb	r3, [r3, #3]
 8006412:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8006414:	7bfa      	ldrb	r2, [r7, #15]
 8006416:	7dbb      	ldrb	r3, [r7, #22]
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 f975 	bl	800770a <USBH_FindInterfaceIndex>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
        break;
 8006424:	e020      	b.n	8006468 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800642c:	7dba      	ldrb	r2, [r7, #22]
 800642e:	429a      	cmp	r2, r3
 8006430:	d81a      	bhi.n	8006468 <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2bff      	cmp	r3, #255	; 0xff
 8006436:	d002      	beq.n	800643e <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b09      	cmp	r3, #9
 800643c:	d902      	bls.n	8006444 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 800643e:	2302      	movs	r3, #2
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e00f      	b.n	8006464 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	211a      	movs	r1, #26
 8006450:	fb01 f303 	mul.w	r3, r1, r3
 8006454:	4413      	add	r3, r2
 8006456:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	4619      	mov	r1, r3
 8006460:	f000 f80e 	bl	8006480 <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 8006464:	e000      	b.n	8006468 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 8006466:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 800646e:	89bb      	ldrh	r3, [r7, #12]
 8006470:	429a      	cmp	r2, r3
 8006472:	d8bb      	bhi.n	80063ec <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8006474:	7ffb      	ldrb	r3, [r7, #31]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3720      	adds	r7, #32
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	460b      	mov	r3, r1
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d163      	bne.n	800655c <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3302      	adds	r3, #2
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	3b01      	subs	r3, #1
 800649c:	2b05      	cmp	r3, #5
 800649e:	f200 8081 	bhi.w	80065a4 <ParseCSDescriptors+0x124>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <ParseCSDescriptors+0x28>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064c1 	.word	0x080064c1
 80064ac:	080064c9 	.word	0x080064c9
 80064b0:	080064e5 	.word	0x080064e5
 80064b4:	0800653f 	.word	0x0800653f
 80064b8:	08006521 	.word	0x08006521
 80064bc:	08006503 	.word	0x08006503
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
        break;
 80064c6:	e070      	b.n	80065aa <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	b291      	uxth	r1, r2
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]
        break;
 80064e2:	e062      	b.n	80065aa <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	b291      	uxth	r1, r2
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	3304      	adds	r3, #4
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	605a      	str	r2, [r3, #4]
        break;
 8006500:	e053      	b.n	80065aa <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	b291      	uxth	r1, r2
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	3308      	adds	r3, #8
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
        break;
 800651e:	e044      	b.n	80065aa <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	b291      	uxth	r1, r2
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	3310      	adds	r3, #16
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	605a      	str	r2, [r3, #4]
        break;
 800653c:	e035      	b.n	80065aa <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	b291      	uxth	r1, r2
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	330c      	adds	r3, #12
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	605a      	str	r2, [r3, #4]
        break;
 800655a:	e026      	b.n	80065aa <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d122      	bne.n	80065a8 <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3302      	adds	r3, #2
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d002      	beq.n	8006572 <ParseCSDescriptors+0xf2>
 800656c:	2b02      	cmp	r3, #2
 800656e:	d00a      	beq.n	8006586 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8006570:	e01b      	b.n	80065aa <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	330a      	adds	r3, #10
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4413      	add	r3, r2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	605a      	str	r2, [r3, #4]
          break;
 8006584:	e011      	b.n	80065aa <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	b291      	uxth	r1, r2
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	330a      	adds	r3, #10
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4413      	add	r3, r2
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	609a      	str	r2, [r3, #8]
          break;
 80065a2:	e002      	b.n	80065aa <ParseCSDescriptors+0x12a>
        break;
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <ParseCSDescriptors+0x12a>
      }
    }
 80065a8:	bf00      	nop
  }

  return USBH_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
 80065d2:	e01b      	b.n	800660c <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	3322      	adds	r3, #34	; 0x22
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	791b      	ldrb	r3, [r3, #4]
 80065e2:	78fa      	ldrb	r2, [r7, #3]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d10e      	bne.n	8006606 <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	3322      	adds	r3, #34	; 0x22
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	78db      	ldrb	r3, [r3, #3]
 80065f6:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	041a      	lsls	r2, r3, #16
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	4313      	orrs	r3, r2
 8006600:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006604:	e089      	b.n	800671a <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	3301      	adds	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	b29a      	uxth	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8006616:	429a      	cmp	r2, r3
 8006618:	d3dc      	bcc.n	80065d4 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	e026      	b.n	800666e <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	3326      	adds	r3, #38	; 0x26
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	795b      	ldrb	r3, [r3, #5]
 800662e:	78fa      	ldrb	r2, [r7, #3]
 8006630:	429a      	cmp	r2, r3
 8006632:	d009      	beq.n	8006648 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	3326      	adds	r3, #38	; 0x26
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	429a      	cmp	r2, r3
 8006646:	d10f      	bne.n	8006668 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	3326      	adds	r3, #38	; 0x26
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	78db      	ldrb	r3, [r3, #3]
 8006656:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	461a      	mov	r2, r3
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	4313      	orrs	r3, r2
 8006662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006666:	e058      	b.n	800671a <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	3301      	adds	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	b29a      	uxth	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8006678:	429a      	cmp	r2, r3
 800667a:	d3d1      	bcc.n	8006620 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]
 8006680:	e01c      	b.n	80066bc <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	332a      	adds	r3, #42	; 0x2a
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	795b      	ldrb	r3, [r3, #5]
 8006690:	78fa      	ldrb	r2, [r7, #3]
 8006692:	429a      	cmp	r2, r3
 8006694:	d10f      	bne.n	80066b6 <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	332a      	adds	r3, #42	; 0x2a
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	78db      	ldrb	r3, [r3, #3]
 80066a4:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	041b      	lsls	r3, r3, #16
 80066aa:	461a      	mov	r2, r3
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80066b4:	e031      	b.n	800671a <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	3301      	adds	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d3db      	bcc.n	8006682 <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
 80066ce:	e01c      	b.n	800670a <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	331e      	adds	r3, #30
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	79db      	ldrb	r3, [r3, #7]
 80066de:	78fa      	ldrb	r2, [r7, #3]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d10f      	bne.n	8006704 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	331e      	adds	r3, #30
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	78db      	ldrb	r3, [r3, #3]
 80066f2:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	461a      	mov	r2, r3
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006702:	e00a      	b.n	800671a <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	3301      	adds	r3, #1
 8006708:	73fb      	strb	r3, [r7, #15]
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	b29a      	uxth	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8006714:	429a      	cmp	r2, r3
 8006716:	d3db      	bcc.n	80066d0 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006730:	2300      	movs	r3, #0
 8006732:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006742:	2300      	movs	r3, #0
 8006744:	75bb      	strb	r3, [r7, #22]
 8006746:	e02c      	b.n	80067a2 <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8006748:	7dbb      	ldrb	r3, [r7, #22]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	331a      	adds	r3, #26
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	791b      	ldrb	r3, [r3, #4]
 8006756:	4619      	mov	r1, r3
 8006758:	7dbb      	ldrb	r3, [r7, #22]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	331a      	adds	r3, #26
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	795b      	ldrb	r3, [r3, #5]
 8006766:	b29b      	uxth	r3, r3
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	b29b      	uxth	r3, r3
 800676c:	430b      	orrs	r3, r1
 800676e:	f240 2201 	movw	r2, #513	; 0x201
 8006772:	4293      	cmp	r3, r2
 8006774:	d112      	bne.n	800679c <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8006776:	7dbb      	ldrb	r3, [r7, #22]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	331a      	adds	r3, #26
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	78db      	ldrb	r3, [r3, #3]
 8006784:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8006786:	7dbb      	ldrb	r3, [r7, #22]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	331a      	adds	r3, #26
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	79da      	ldrb	r2, [r3, #7]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 800679a:	e009      	b.n	80067b0 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800679c:	7dbb      	ldrb	r3, [r7, #22]
 800679e:	3301      	adds	r3, #1
 80067a0:	75bb      	strb	r3, [r7, #22]
 80067a2:	7dbb      	ldrb	r3, [r7, #22]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d3cb      	bcc.n	8006748 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff feff 	bl	80065b8 <USBH_AUDIO_FindLinkedUnit>
 80067ba:	60f8      	str	r0, [r7, #12]

    if (!value)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 80067c2:	2302      	movs	r3, #2
 80067c4:	e034      	b.n	8006830 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	0a1b      	lsrs	r3, r3, #8
 80067ce:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80067d6:	7abb      	ldrb	r3, [r7, #10]
 80067d8:	3b03      	subs	r3, #3
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d81e      	bhi.n	800681c <USBH_AUDIO_BuildMicrophonePath+0xf4>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006813 	.word	0x08006813
 80067e8:	080067ff 	.word	0x080067ff
 80067ec:	08006809 	.word	0x08006809
 80067f0:	080067f5 	.word	0x080067f5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	7afa      	ldrb	r2, [r7, #11]
 80067f8:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 80067fc:	e011      	b.n	8006822 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	7afa      	ldrb	r2, [r7, #11]
 8006802:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 8006806:	e00c      	b.n	8006822 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	7afa      	ldrb	r2, [r7, #11]
 800680c:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8006810:	e007      	b.n	8006822 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	7afa      	ldrb	r2, [r7, #11]
 8006816:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 800681a:	e002      	b.n	8006822 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 800681c:	2302      	movs	r3, #2
 800681e:	757b      	strb	r3, [r7, #21]
        break;
 8006820:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006822:	7abb      	ldrb	r3, [r7, #10]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d002      	beq.n	800682e <USBH_AUDIO_BuildMicrophonePath+0x106>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1c0      	bne.n	80067b0 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 800682e:	7d7b      	ldrb	r3, [r7, #21]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006840:	2300      	movs	r3, #0
 8006842:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006852:	2300      	movs	r3, #0
 8006854:	757b      	strb	r3, [r7, #21]
 8006856:	e02c      	b.n	80068b2 <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8006858:	7d7b      	ldrb	r3, [r7, #21]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	331a      	adds	r3, #26
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	791b      	ldrb	r3, [r3, #4]
 8006866:	4619      	mov	r1, r3
 8006868:	7d7b      	ldrb	r3, [r7, #21]
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	331a      	adds	r3, #26
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	795b      	ldrb	r3, [r3, #5]
 8006876:	b29b      	uxth	r3, r3
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	b29b      	uxth	r3, r3
 800687c:	430b      	orrs	r3, r1
 800687e:	f240 1201 	movw	r2, #257	; 0x101
 8006882:	4293      	cmp	r3, r2
 8006884:	d112      	bne.n	80068ac <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8006886:	7d7b      	ldrb	r3, [r7, #21]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	331a      	adds	r3, #26
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	78db      	ldrb	r3, [r3, #3]
 8006894:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8006896:	7d7b      	ldrb	r3, [r7, #21]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	331a      	adds	r3, #26
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	79da      	ldrb	r2, [r3, #7]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 80068aa:	e009      	b.n	80068c0 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80068ac:	7d7b      	ldrb	r3, [r7, #21]
 80068ae:	3301      	adds	r3, #1
 80068b0:	757b      	strb	r3, [r7, #21]
 80068b2:	7d7b      	ldrb	r3, [r7, #21]
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3cb      	bcc.n	8006858 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80068c0:	2300      	movs	r3, #0
 80068c2:	75bb      	strb	r3, [r7, #22]
 80068c4:	e011      	b.n	80068ea <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 80068c6:	7dbb      	ldrb	r3, [r7, #22]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	3317      	adds	r3, #23
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4413      	add	r3, r2
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	78db      	ldrb	r3, [r3, #3]
 80068d4:	7dfa      	ldrb	r2, [r7, #23]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d104      	bne.n	80068e4 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	7dba      	ldrb	r2, [r7, #22]
 80068de:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 80068e2:	e009      	b.n	80068f8 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80068e4:	7dbb      	ldrb	r3, [r7, #22]
 80068e6:	3301      	adds	r3, #1
 80068e8:	75bb      	strb	r3, [r7, #22]
 80068ea:	7dbb      	ldrb	r3, [r7, #22]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d3e6      	bcc.n	80068c6 <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fe5b 	bl	80065b8 <USBH_AUDIO_FindLinkedUnit>
 8006902:	60f8      	str	r0, [r7, #12]

    if (!value)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 800690a:	2302      	movs	r3, #2
 800690c:	e053      	b.n	80069b6 <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	0c1b      	lsrs	r3, r3, #16
 800691c:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 800691e:	7afb      	ldrb	r3, [r7, #11]
 8006920:	3b03      	subs	r3, #3
 8006922:	2b03      	cmp	r3, #3
 8006924:	d83c      	bhi.n	80069a0 <USBH_AUDIO_BuildHeadphonePath+0x168>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800695b 	.word	0x0800695b
 8006930:	08006947 	.word	0x08006947
 8006934:	08006951 	.word	0x08006951
 8006938:	0800693d 	.word	0x0800693d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	7dba      	ldrb	r2, [r7, #22]
 8006940:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8006944:	e030      	b.n	80069a8 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	7dba      	ldrb	r2, [r7, #22]
 800694a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 800694e:	e02b      	b.n	80069a8 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	7dba      	ldrb	r2, [r7, #22]
 8006954:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8006958:	e026      	b.n	80069a8 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	7dba      	ldrb	r2, [r7, #22]
 800695e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8006962:	7dbb      	ldrb	r3, [r7, #22]
 8006964:	2b03      	cmp	r3, #3
 8006966:	d818      	bhi.n	800699a <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8006968:	7dbb      	ldrb	r3, [r7, #22]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	331e      	adds	r3, #30
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	791b      	ldrb	r3, [r3, #4]
 8006976:	4619      	mov	r1, r3
 8006978:	7dbb      	ldrb	r3, [r7, #22]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	331e      	adds	r3, #30
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	b29b      	uxth	r3, r3
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	b29b      	uxth	r3, r3
 800698c:	430b      	orrs	r3, r1
 800698e:	f240 1203 	movw	r2, #259	; 0x103
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e00d      	b.n	80069b6 <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 800699a:	2302      	movs	r3, #2
 800699c:	753b      	strb	r3, [r7, #20]
        }
        break;
 800699e:	e002      	b.n	80069a6 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 80069a0:	2302      	movs	r3, #2
 80069a2:	753b      	strb	r3, [r7, #20]
        break;
 80069a4:	e000      	b.n	80069a8 <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 80069a6:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d002      	beq.n	80069b4 <USBH_AUDIO_BuildHeadphonePath+0x17c>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1a1      	bne.n	80068f8 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 80069b4:	7d3b      	ldrb	r3, [r7, #20]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop

080069c0 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	4608      	mov	r0, r1
 80069ca:	4611      	mov	r1, r2
 80069cc:	461a      	mov	r2, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	70fb      	strb	r3, [r7, #3]
 80069d2:	460b      	mov	r3, r1
 80069d4:	70bb      	strb	r3, [r7, #2]
 80069d6:	4613      	mov	r3, r2
 80069d8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	82fb      	strh	r3, [r7, #22]
 80069de:	2300      	movs	r3, #0
 80069e0:	82bb      	strh	r3, [r7, #20]
 80069e2:	2300      	movs	r3, #0
 80069e4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d002      	beq.n	8006a00 <USBH_AC_SetCur+0x40>
 80069fa:	2b06      	cmp	r3, #6
 80069fc:	d018      	beq.n	8006a30 <USBH_AC_SetCur+0x70>
 80069fe:	e035      	b.n	8006a6c <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	78db      	ldrb	r3, [r3, #3]
 8006a06:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006a08:	2300      	movs	r3, #0
 8006a0a:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	7abb      	ldrb	r3, [r7, #10]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a20:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	827b      	strh	r3, [r7, #18]
      break;
 8006a2e:	e020      	b.n	8006a72 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006a30:	78bb      	ldrb	r3, [r7, #2]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	3322      	adds	r3, #34	; 0x22
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	78db      	ldrb	r3, [r3, #3]
 8006a3e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006a40:	2300      	movs	r3, #0
 8006a42:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006a44:	7afb      	ldrb	r3, [r7, #11]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	7abb      	ldrb	r3, [r7, #10]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006a54:	787b      	ldrb	r3, [r7, #1]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4313      	orrs	r3, r2
 8006a64:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006a66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a68:	827b      	strh	r3, [r7, #18]
      break;
 8006a6a:	e002      	b.n	8006a72 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	747b      	strb	r3, [r7, #17]
      break;
 8006a70:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006a72:	7c7b      	ldrb	r3, [r7, #17]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8006a78:	7c7b      	ldrb	r3, [r7, #17]
 8006a7a:	e017      	b.n	8006aac <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2221      	movs	r2, #33	; 0x21
 8006a80:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8afa      	ldrh	r2, [r7, #22]
 8006a8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8aba      	ldrh	r2, [r7, #20]
 8006a92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8a7a      	ldrh	r2, [r7, #18]
 8006a98:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006aa0:	8a7a      	ldrh	r2, [r7, #18]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fdc3 	bl	8008630 <USBH_CtlReq>
 8006aaa:	4603      	mov	r3, r0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	4608      	mov	r0, r1
 8006abe:	4611      	mov	r1, r2
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	70fb      	strb	r3, [r7, #3]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70bb      	strb	r3, [r7, #2]
 8006aca:	4613      	mov	r3, r2
 8006acc:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	82fb      	strh	r3, [r7, #22]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	82bb      	strh	r3, [r7, #20]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	743b      	strb	r3, [r7, #16]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	2b06      	cmp	r3, #6
 8006af4:	d01e      	beq.n	8006b34 <USBH_AC_GetCur+0x80>
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	dc4f      	bgt.n	8006b9a <USBH_AC_GetCur+0xe6>
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d002      	beq.n	8006b04 <USBH_AC_GetCur+0x50>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d036      	beq.n	8006b70 <USBH_AC_GetCur+0xbc>
 8006b02:	e04a      	b.n	8006b9a <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	78db      	ldrb	r3, [r3, #3]
 8006b0a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006b10:	7c3b      	ldrb	r3, [r7, #16]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b24:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	827b      	strh	r3, [r7, #18]
      break;
 8006b32:	e035      	b.n	8006ba0 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006b34:	78bb      	ldrb	r3, [r7, #2]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	3322      	adds	r3, #34	; 0x22
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	78db      	ldrb	r3, [r3, #3]
 8006b42:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006b48:	7c3b      	ldrb	r3, [r7, #16]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4313      	orrs	r3, r2
 8006b56:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006b58:	787b      	ldrb	r3, [r7, #1]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b6c:	827b      	strh	r3, [r7, #18]
      break;
 8006b6e:	e017      	b.n	8006ba0 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b76:	78db      	ldrb	r3, [r3, #3]
 8006b78:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006b7e:	7c3b      	ldrb	r3, [r7, #16]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b92:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006b94:	2301      	movs	r3, #1
 8006b96:	827b      	strh	r3, [r7, #18]
      break;
 8006b98:	e002      	b.n	8006ba0 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	747b      	strb	r3, [r7, #17]
      break;
 8006b9e:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006ba0:	7c7b      	ldrb	r3, [r7, #17]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8006ba6:	7c7b      	ldrb	r3, [r7, #17]
 8006ba8:	e017      	b.n	8006bda <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	22a1      	movs	r2, #161	; 0xa1
 8006bae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2281      	movs	r2, #129	; 0x81
 8006bb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8afa      	ldrh	r2, [r7, #22]
 8006bba:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8aba      	ldrh	r2, [r7, #20]
 8006bc0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8a7a      	ldrh	r2, [r7, #18]
 8006bc6:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006bce:	8a7a      	ldrh	r2, [r7, #18]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fd2c 	bl	8008630 <USBH_CtlReq>
 8006bd8:	4603      	mov	r3, r0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	4608      	mov	r0, r1
 8006bec:	4611      	mov	r1, r2
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	70fb      	strb	r3, [r7, #3]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70bb      	strb	r3, [r7, #2]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	82fb      	strh	r3, [r7, #22]
 8006c00:	2300      	movs	r3, #0
 8006c02:	82bb      	strh	r3, [r7, #20]
 8006c04:	2300      	movs	r3, #0
 8006c06:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	743b      	strb	r3, [r7, #16]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	2b06      	cmp	r3, #6
 8006c22:	d01e      	beq.n	8006c62 <USBH_AC_GetMax+0x80>
 8006c24:	2b06      	cmp	r3, #6
 8006c26:	dc4f      	bgt.n	8006cc8 <USBH_AC_GetMax+0xe6>
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d002      	beq.n	8006c32 <USBH_AC_GetMax+0x50>
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d036      	beq.n	8006c9e <USBH_AC_GetMax+0xbc>
 8006c30:	e04a      	b.n	8006cc8 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c36:	78db      	ldrb	r3, [r3, #3]
 8006c38:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006c3e:	7c3b      	ldrb	r3, [r7, #16]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c52:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	827b      	strh	r3, [r7, #18]
      break;
 8006c60:	e035      	b.n	8006cce <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006c62:	78bb      	ldrb	r3, [r7, #2]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	3322      	adds	r3, #34	; 0x22
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	78db      	ldrb	r3, [r3, #3]
 8006c70:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006c76:	7c3b      	ldrb	r3, [r7, #16]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4313      	orrs	r3, r2
 8006c84:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006c86:	787b      	ldrb	r3, [r7, #1]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4313      	orrs	r3, r2
 8006c96:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c9a:	827b      	strh	r3, [r7, #18]
      break;
 8006c9c:	e017      	b.n	8006cce <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca4:	78db      	ldrb	r3, [r3, #3]
 8006ca6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006cac:	7c3b      	ldrb	r3, [r7, #16]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cc0:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	827b      	strh	r3, [r7, #18]
      break;
 8006cc6:	e002      	b.n	8006cce <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	747b      	strb	r3, [r7, #17]
      break;
 8006ccc:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006cce:	7c7b      	ldrb	r3, [r7, #17]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 8006cd4:	7c7b      	ldrb	r3, [r7, #17]
 8006cd6:	e017      	b.n	8006d08 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	22a1      	movs	r2, #161	; 0xa1
 8006cdc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2283      	movs	r2, #131	; 0x83
 8006ce2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8afa      	ldrh	r2, [r7, #22]
 8006ce8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	8aba      	ldrh	r2, [r7, #20]
 8006cee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8a7a      	ldrh	r2, [r7, #18]
 8006cf4:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006cfc:	8a7a      	ldrh	r2, [r7, #18]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fc95 	bl	8008630 <USBH_CtlReq>
 8006d06:	4603      	mov	r3, r0

}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	70fb      	strb	r3, [r7, #3]
 8006d22:	460b      	mov	r3, r1
 8006d24:	70bb      	strb	r3, [r7, #2]
 8006d26:	4613      	mov	r3, r2
 8006d28:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	82fb      	strh	r3, [r7, #22]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	82bb      	strh	r3, [r7, #20]
 8006d32:	2300      	movs	r3, #0
 8006d34:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	743b      	strb	r3, [r7, #16]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d01e      	beq.n	8006d90 <USBH_AC_GetRes+0x80>
 8006d52:	2b06      	cmp	r3, #6
 8006d54:	dc4f      	bgt.n	8006df6 <USBH_AC_GetRes+0xe6>
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d002      	beq.n	8006d60 <USBH_AC_GetRes+0x50>
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d036      	beq.n	8006dcc <USBH_AC_GetRes+0xbc>
 8006d5e:	e04a      	b.n	8006df6 <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006d6c:	7c3b      	ldrb	r3, [r7, #16]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d80:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	827b      	strh	r3, [r7, #18]
      break;
 8006d8e:	e035      	b.n	8006dfc <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006d90:	78bb      	ldrb	r3, [r7, #2]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	3322      	adds	r3, #34	; 0x22
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	78db      	ldrb	r3, [r3, #3]
 8006d9e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006da4:	7c3b      	ldrb	r3, [r7, #16]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006db4:	787b      	ldrb	r3, [r7, #1]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dc8:	827b      	strh	r3, [r7, #18]
      break;
 8006dca:	e017      	b.n	8006dfc <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd2:	78db      	ldrb	r3, [r3, #3]
 8006dd4:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006dda:	7c3b      	ldrb	r3, [r7, #16]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	021b      	lsls	r3, r3, #8
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	4313      	orrs	r3, r2
 8006de8:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dee:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006df0:	2301      	movs	r3, #1
 8006df2:	827b      	strh	r3, [r7, #18]
      break;
 8006df4:	e002      	b.n	8006dfc <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8006df6:	2302      	movs	r3, #2
 8006df8:	747b      	strb	r3, [r7, #17]
      break;
 8006dfa:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006dfc:	7c7b      	ldrb	r3, [r7, #17]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8006e02:	7c7b      	ldrb	r3, [r7, #17]
 8006e04:	e017      	b.n	8006e36 <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	22a1      	movs	r2, #161	; 0xa1
 8006e0a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2284      	movs	r2, #132	; 0x84
 8006e10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8afa      	ldrh	r2, [r7, #22]
 8006e16:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8aba      	ldrh	r2, [r7, #20]
 8006e1c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8a7a      	ldrh	r2, [r7, #18]
 8006e22:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006e2a:	8a7a      	ldrh	r2, [r7, #18]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 fbfe 	bl	8008630 <USBH_CtlReq>
 8006e34:	4603      	mov	r3, r0

}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	70fb      	strb	r3, [r7, #3]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70bb      	strb	r3, [r7, #2]
 8006e54:	4613      	mov	r3, r2
 8006e56:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	82fb      	strh	r3, [r7, #22]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	82bb      	strh	r3, [r7, #20]
 8006e60:	2300      	movs	r3, #0
 8006e62:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	743b      	strb	r3, [r7, #16]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	2b06      	cmp	r3, #6
 8006e7e:	d01e      	beq.n	8006ebe <USBH_AC_GetMin+0x80>
 8006e80:	2b06      	cmp	r3, #6
 8006e82:	dc4f      	bgt.n	8006f24 <USBH_AC_GetMin+0xe6>
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d002      	beq.n	8006e8e <USBH_AC_GetMin+0x50>
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d036      	beq.n	8006efa <USBH_AC_GetMin+0xbc>
 8006e8c:	e04a      	b.n	8006f24 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	78db      	ldrb	r3, [r3, #3]
 8006e94:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e9a:	7c3b      	ldrb	r3, [r7, #16]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eae:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	827b      	strh	r3, [r7, #18]
      break;
 8006ebc:	e035      	b.n	8006f2a <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006ebe:	78bb      	ldrb	r3, [r7, #2]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	3322      	adds	r3, #34	; 0x22
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	78db      	ldrb	r3, [r3, #3]
 8006ecc:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ed2:	7c3b      	ldrb	r3, [r7, #16]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006ee2:	787b      	ldrb	r3, [r7, #1]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef6:	827b      	strh	r3, [r7, #18]
      break;
 8006ef8:	e017      	b.n	8006f2a <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f00:	78db      	ldrb	r3, [r3, #3]
 8006f02:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f08:	7c3b      	ldrb	r3, [r7, #16]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4313      	orrs	r3, r2
 8006f16:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f1c:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	827b      	strh	r3, [r7, #18]
      break;
 8006f22:	e002      	b.n	8006f2a <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8006f24:	2302      	movs	r3, #2
 8006f26:	747b      	strb	r3, [r7, #17]
      break;
 8006f28:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006f2a:	7c7b      	ldrb	r3, [r7, #17]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8006f30:	7c7b      	ldrb	r3, [r7, #17]
 8006f32:	e017      	b.n	8006f64 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	22a1      	movs	r2, #161	; 0xa1
 8006f38:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2282      	movs	r2, #130	; 0x82
 8006f3e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8afa      	ldrh	r2, [r7, #22]
 8006f44:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	8aba      	ldrh	r2, [r7, #20]
 8006f4a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	8a7a      	ldrh	r2, [r7, #18]
 8006f50:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006f58:	8a7a      	ldrh	r2, [r7, #18]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 fb67 	bl	8008630 <USBH_CtlReq>
 8006f62:	4603      	mov	r3, r0

}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	460b      	mov	r3, r1
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8006f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f7e:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8006f84:	2303      	movs	r3, #3
 8006f86:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2222      	movs	r2, #34	; 0x22
 8006f8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8afa      	ldrh	r2, [r7, #22]
 8006f98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8aba      	ldrh	r2, [r7, #20]
 8006f9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8a7a      	ldrh	r2, [r7, #18]
 8006fa4:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8006fa6:	8a7b      	ldrh	r3, [r7, #18]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f001 fb3f 	bl	8008630 <USBH_CtlReq>
 8006fb2:	4603      	mov	r3, r0

}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]

  return status;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
	...

08006fd8 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	78db      	ldrb	r3, [r3, #3]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	f200 8090 	bhi.w	800711e <USBH_AUDIO_Control+0x146>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <USBH_AUDIO_Control+0x2c>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007019 	.word	0x08007019
 8007008:	0800706d 	.word	0x0800706d
 800700c:	0800711f 	.word	0x0800711f
 8007010:	080070eb 	.word	0x080070eb
 8007014:	08007105 	.word	0x08007105
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d17d      	bne.n	8007122 <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 800703e:	b2da      	uxtb	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 fd01 	bl	8008a4e <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2202      	movs	r2, #2
 8007068:	70da      	strb	r2, [r3, #3]
      }
      break;
 800706a:	e05a      	b.n	8007122 <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f002 f806 	bl	8009086 <USBH_LL_GetURBState>
 800707a:	4603      	mov	r3, r0
 800707c:	2b01      	cmp	r3, #1
 800707e:	d114      	bne.n	80070aa <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800708c:	3302      	adds	r3, #2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	b29b      	uxth	r3, r3
 8007094:	4313      	orrs	r3, r2
 8007096:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8007098:	89fb      	ldrh	r3, [r7, #14]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f97a 	bl	8007398 <USBH_AUDIO_SetControlAttribute>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d03d      	beq.n	8007126 <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 80070be:	4293      	cmp	r3, r2
 80070c0:	d333      	bcc.n	800712a <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fcb3 	bl	8008a4e <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 80070e8:	e01f      	b.n	800712a <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 80070ea:	2101      	movs	r1, #1
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f953 	bl	8007398 <USBH_AUDIO_SetControlAttribute>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d11a      	bne.n	800712e <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2201      	movs	r2, #1
 80070fc:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007102:	e014      	b.n	800712e <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8007104:	2102      	movs	r1, #2
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f946 	bl	8007398 <USBH_AUDIO_SetControlAttribute>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2201      	movs	r2, #1
 8007116:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800711c:	e009      	b.n	8007132 <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 800711e:	bf00      	nop
 8007120:	e008      	b.n	8007134 <USBH_AUDIO_Control+0x15c>
      break;
 8007122:	bf00      	nop
 8007124:	e006      	b.n	8007134 <USBH_AUDIO_Control+0x15c>
          break;
 8007126:	bf00      	nop
 8007128:	e004      	b.n	8007134 <USBH_AUDIO_Control+0x15c>
      break;
 800712a:	bf00      	nop
 800712c:	e002      	b.n	8007134 <USBH_AUDIO_Control+0x15c>
      break;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <USBH_AUDIO_Control+0x15c>
      break;
 8007132:	bf00      	nop
  }

  return status;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop

08007140 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007148:	2301      	movs	r3, #1
 800714a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	789b      	ldrb	r3, [r3, #2]
 800715a:	3b01      	subs	r3, #1
 800715c:	2b04      	cmp	r3, #4
 800715e:	d85c      	bhi.n	800721a <USBH_AUDIO_OutputStream+0xda>
 8007160:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <USBH_AUDIO_OutputStream+0x28>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	0800717d 	.word	0x0800717d
 800716c:	080071d9 	.word	0x080071d9
 8007170:	080071a3 	.word	0x080071a3
 8007174:	0800720f 	.word	0x0800720f
 8007178:	08007209 	.word	0x08007209
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	3317      	adds	r3, #23
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	4413      	add	r3, r2
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	79db      	ldrb	r3, [r3, #7]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2203      	movs	r2, #3
 8007196:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007198:	e044      	b.n	8007224 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2202      	movs	r2, #2
 800719e:	709a      	strb	r2, [r3, #2]
      break;
 80071a0:	e040      	b.n	8007224 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	3317      	adds	r3, #23
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	4413      	add	r3, r2
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	3308      	adds	r3, #8
 80071b4:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fed3 	bl	8006f6c <USBH_AUDIO_SetEndpointControls>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d126      	bne.n	800721e <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2205      	movs	r2, #5
 80071d4:	709a      	strb	r2, [r3, #2]
      }
      break;
 80071d6:	e022      	b.n	800721e <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80071de:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff febe 	bl	8006f6c <USBH_AUDIO_SetEndpointControls>
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d113      	bne.n	8007222 <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2205      	movs	r2, #5
 80071fe:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f96e 	bl	80074e2 <USBH_AUDIO_FrequencySet>
      }
      break;
 8007206:	e00c      	b.n	8007222 <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800720c:	e00a      	b.n	8007224 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f80e 	bl	8007230 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	75fb      	strb	r3, [r7, #23]
      break;
 8007218:	e004      	b.n	8007224 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 800721a:	bf00      	nop
 800721c:	e002      	b.n	8007224 <USBH_AUDIO_OutputStream+0xe4>
      break;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8007222:	bf00      	nop
  }

  return status;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop

08007230 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	791b      	ldrb	r3, [r3, #4]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d002      	beq.n	8007254 <USBH_AUDIO_Transmit+0x24>
 800724e:	2b02      	cmp	r3, #2
 8007250:	d033      	beq.n	80072ba <USBH_AUDIO_Transmit+0x8a>
 8007252:	e096      	b.n	8007382 <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 8092 	bne.w	8007388 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2202      	movs	r2, #2
 8007274:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8007282:	461a      	mov	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fbfe 	bl	8008a8c <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8007296:	461a      	mov	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80072a4:	461a      	mov	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072b8:	e066      	b.n	8007388 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fedf 	bl	8009086 <USBH_LL_GetURBState>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d15e      	bne.n	800738c <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d352      	bcc.n	800738c <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d102      	bne.n	8007302 <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fe6b 	bl	8006fd8 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800730e:	429a      	cmp	r2, r3
 8007310:	d82b      	bhi.n	800736a <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 fbb0 	bl	8008a8c <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007338:	441a      	add	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 800734c:	441a      	add	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007360:	441a      	add	r2, r3
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8007368:	e010      	b.n	800738c <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2205      	movs	r2, #5
 8007378:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f8bb 	bl	80074f6 <USBH_AUDIO_BufferEmptyCallback>
      break;
 8007380:	e004      	b.n	800738c <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 8007382:	2302      	movs	r3, #2
 8007384:	73fb      	strb	r3, [r7, #15]
      break;
 8007386:	e002      	b.n	800738e <USBH_AUDIO_Transmit+0x15e>
      break;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <USBH_AUDIO_Transmit+0x15e>
      break;
 800738c:	bf00      	nop
  }
  return status;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073a4:	2301      	movs	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d002      	beq.n	80073be <USBH_AUDIO_SetControlAttribute+0x26>
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d00b      	beq.n	80073d4 <USBH_AUDIO_SetControlAttribute+0x3c>
 80073bc:	e015      	b.n	80073ea <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80073ca:	441a      	add	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80073d2:	e00d      	b.n	80073f0 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80073e8:	e002      	b.n	80073f0 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	73fb      	strb	r3, [r7, #15]
      break;
 80073ee:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d905      	bls.n	800740c <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007418:	429a      	cmp	r2, r3
 800741a:	d205      	bcs.n	8007428 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 800743a:	b29b      	uxth	r3, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f827 	bl	8007490 <AUDIO_SetVolume>
 8007442:	4603      	mov	r3, r0
 8007444:	2b01      	cmp	r3, #1
 8007446:	d01e      	beq.n	8007486 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800744e:	2b01      	cmp	r3, #1
 8007450:	d10e      	bne.n	8007470 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e007      	b.n	8007480 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007476:	3b01      	subs	r3, #1
 8007478:	b2da      	uxtb	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2206      	movs	r2, #6
 8007484:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af02      	add	r7, sp, #8
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	4608      	mov	r0, r1
 800749a:	4611      	mov	r1, r2
 800749c:	461a      	mov	r2, r3
 800749e:	4603      	mov	r3, r0
 80074a0:	70fb      	strb	r3, [r7, #3]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70bb      	strb	r3, [r7, #2]
 80074a6:	4613      	mov	r3, r2
 80074a8:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80074aa:	2301      	movs	r3, #1
 80074ac:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	883a      	ldrh	r2, [r7, #0]
 80074bc:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	2302      	movs	r3, #2
 80074c4:	9301      	str	r3, [sp, #4]
 80074c6:	78bb      	ldrb	r3, [r7, #2]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	2302      	movs	r3, #2
 80074cc:	2106      	movs	r1, #6
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff fa76 	bl	80069c0 <USBH_AC_SetCur>
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	4613      	mov	r3, r2
 8007516:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800751e:	2302      	movs	r3, #2
 8007520:	e029      	b.n	8007576 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	79fa      	ldrb	r2, [r7, #7]
 8007526:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f81f 	bl	800757e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f001 fc56 	bl	8008e20 <USBH_LL_Init>

  return USBH_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800757e:	b480      	push	{r7}
 8007580:	b085      	sub	sp, #20
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	e00a      	b.n	80075a6 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b0e      	cmp	r3, #14
 80075aa:	d9f1      	bls.n	8007590 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e009      	b.n	80075c6 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075bc:	2200      	movs	r2, #0
 80075be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075cc:	d3f1      	bcc.n	80075b2 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2240      	movs	r2, #64	; 0x40
 80075f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d017      	beq.n	800766c <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10f      	bne.n	8007666 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800764c:	1c59      	adds	r1, r3, #1
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	f503 7389 	add.w	r3, r3, #274	; 0x112
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]
 8007664:	e004      	b.n	8007670 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007666:	2302      	movs	r3, #2
 8007668:	73fb      	strb	r3, [r7, #15]
 800766a:	e001      	b.n	8007670 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800767e:	b480      	push	{r7}
 8007680:	b087      	sub	sp, #28
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	4608      	mov	r0, r1
 8007688:	4611      	mov	r1, r2
 800768a:	461a      	mov	r2, r3
 800768c:	4603      	mov	r3, r0
 800768e:	70fb      	strb	r3, [r7, #3]
 8007690:	460b      	mov	r3, r1
 8007692:	70bb      	strb	r3, [r7, #2]
 8007694:	4613      	mov	r3, r2
 8007696:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800769c:	2300      	movs	r3, #0
 800769e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076a6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076a8:	e025      	b.n	80076f6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	221a      	movs	r2, #26
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
 80076b2:	3308      	adds	r3, #8
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	3302      	adds	r3, #2
 80076ba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	795b      	ldrb	r3, [r3, #5]
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d002      	beq.n	80076cc <USBH_FindInterface+0x4e>
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	2bff      	cmp	r3, #255	; 0xff
 80076ca:	d111      	bne.n	80076f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076d0:	78ba      	ldrb	r2, [r7, #2]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d002      	beq.n	80076dc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076d6:	78bb      	ldrb	r3, [r7, #2]
 80076d8:	2bff      	cmp	r3, #255	; 0xff
 80076da:	d109      	bne.n	80076f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076e0:	787a      	ldrb	r2, [r7, #1]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d002      	beq.n	80076ec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076e6:	787b      	ldrb	r3, [r7, #1]
 80076e8:	2bff      	cmp	r3, #255	; 0xff
 80076ea:	d101      	bne.n	80076f0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	e006      	b.n	80076fe <USBH_FindInterface+0x80>
    }
    if_ix++;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	3301      	adds	r3, #1
 80076f4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	2b09      	cmp	r3, #9
 80076fa:	d9d6      	bls.n	80076aa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80076fc:	23ff      	movs	r3, #255	; 0xff
}
 80076fe:	4618      	mov	r0, r3
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800770a:	b480      	push	{r7}
 800770c:	b087      	sub	sp, #28
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
 8007716:	4613      	mov	r3, r2
 8007718:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007728:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800772a:	e017      	b.n	800775c <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	221a      	movs	r2, #26
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	3308      	adds	r3, #8
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	3302      	adds	r3, #2
 800773c:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	789b      	ldrb	r3, [r3, #2]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	429a      	cmp	r2, r3
 8007746:	d106      	bne.n	8007756 <USBH_FindInterfaceIndex+0x4c>
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	78db      	ldrb	r3, [r3, #3]
 800774c:	78ba      	ldrb	r2, [r7, #2]
 800774e:	429a      	cmp	r2, r3
 8007750:	d101      	bne.n	8007756 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	e006      	b.n	8007764 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	3301      	adds	r3, #1
 800775a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	2b09      	cmp	r3, #9
 8007760:	d9e4      	bls.n	800772c <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 8007762:	23ff      	movs	r3, #255	; 0xff
}
 8007764:	4618      	mov	r0, r3
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 fb8d 	bl	8008e98 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800777e:	2101      	movs	r1, #1
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fc93 	bl	80090ac <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af04      	add	r7, sp, #16
 8007796:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007798:	2302      	movs	r3, #2
 800779a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d102      	bne.n	80077b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2203      	movs	r2, #3
 80077b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b0b      	cmp	r3, #11
 80077ba:	f200 81b5 	bhi.w	8007b28 <USBH_Process+0x398>
 80077be:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <USBH_Process+0x34>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	080077f5 	.word	0x080077f5
 80077c8:	08007827 	.word	0x08007827
 80077cc:	0800788f 	.word	0x0800788f
 80077d0:	08007ac3 	.word	0x08007ac3
 80077d4:	08007b29 	.word	0x08007b29
 80077d8:	08007933 	.word	0x08007933
 80077dc:	08007a69 	.word	0x08007a69
 80077e0:	08007969 	.word	0x08007969
 80077e4:	08007989 	.word	0x08007989
 80077e8:	080079a9 	.word	0x080079a9
 80077ec:	080079d7 	.word	0x080079d7
 80077f0:	08007aab 	.word	0x08007aab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8195 	beq.w	8007b2c <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007808:	20c8      	movs	r0, #200	; 0xc8
 800780a:	f001 fc96 	bl	800913a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 fb9f 	bl	8008f52 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007824:	e182      	b.n	8007b2c <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800782c:	2b01      	cmp	r3, #1
 800782e:	d107      	bne.n	8007840 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800783e:	e184      	b.n	8007b4a <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800784a:	d914      	bls.n	8007876 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007852:	3301      	adds	r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007862:	2b03      	cmp	r3, #3
 8007864:	d903      	bls.n	800786e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	220d      	movs	r2, #13
 800786a:	701a      	strb	r2, [r3, #0]
      break;
 800786c:	e16d      	b.n	8007b4a <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	701a      	strb	r2, [r3, #0]
      break;
 8007874:	e169      	b.n	8007b4a <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800787c:	f103 020a 	add.w	r2, r3, #10
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8007886:	200a      	movs	r0, #10
 8007888:	f001 fc57 	bl	800913a <USBH_Delay>
      break;
 800788c:	e15d      	b.n	8007b4a <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800789e:	2104      	movs	r1, #4
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80078a4:	2064      	movs	r0, #100	; 0x64
 80078a6:	f001 fc48 	bl	800913a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fb2a 	bl	8008f04 <USBH_LL_GetSpeed>
 80078b0:	4603      	mov	r3, r0
 80078b2:	461a      	mov	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2205      	movs	r2, #5
 80078be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80078c0:	2100      	movs	r1, #0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 f92c 	bl	8008b20 <USBH_AllocPipe>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80078d0:	2180      	movs	r1, #128	; 0x80
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 f924 	bl	8008b20 <USBH_AllocPipe>
 80078d8:	4603      	mov	r3, r0
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7919      	ldrb	r1, [r3, #4]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078f4:	b292      	uxth	r2, r2
 80078f6:	9202      	str	r2, [sp, #8]
 80078f8:	2200      	movs	r2, #0
 80078fa:	9201      	str	r2, [sp, #4]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4603      	mov	r3, r0
 8007900:	2280      	movs	r2, #128	; 0x80
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 f8dd 	bl	8008ac2 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7959      	ldrb	r1, [r3, #5]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800791c:	b292      	uxth	r2, r2
 800791e:	9202      	str	r2, [sp, #8]
 8007920:	2200      	movs	r2, #0
 8007922:	9201      	str	r2, [sp, #4]
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	4603      	mov	r3, r0
 8007928:	2200      	movs	r2, #0
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 f8c9 	bl	8008ac2 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007930:	e10b      	b.n	8007b4a <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f90e 	bl	8007b54 <USBH_HandleEnum>
 8007938:	4603      	mov	r3, r0
 800793a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	f040 80f5 	bne.w	8007b30 <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007954:	2b01      	cmp	r3, #1
 8007956:	d103      	bne.n	8007960 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2208      	movs	r2, #8
 800795c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800795e:	e0e7      	b.n	8007b30 <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2207      	movs	r2, #7
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e0e3      	b.n	8007b30 <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80e0 	beq.w	8007b34 <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800797a:	2101      	movs	r1, #1
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2208      	movs	r2, #8
 8007984:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007986:	e0d5      	b.n	8007b34 <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800798e:	b29b      	uxth	r3, r3
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fc22 	bl	80081dc <USBH_SetCfg>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 80cc 	bne.w	8007b38 <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2209      	movs	r2, #9
 80079a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079a6:	e0c7      	b.n	8007b38 <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80079ae:	f003 0320 	and.w	r3, r3, #32
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80079b6:	2101      	movs	r1, #1
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fc59 	bl	8008270 <USBH_SetFeature>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 80bb 	bne.w	8007b3c <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	220a      	movs	r2, #10
 80079ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079cc:	e0b6      	b.n	8007b3c <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	220a      	movs	r2, #10
 80079d2:	701a      	strb	r2, [r3, #0]
      break;
 80079d4:	e0b2      	b.n	8007b3c <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80af 	beq.w	8007b40 <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
 80079ee:	e018      	b.n	8007a22 <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80079f0:	7bfa      	ldrb	r2, [r7, #15]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	791a      	ldrb	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d109      	bne.n	8007a1c <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007a08:	7bfa      	ldrb	r2, [r7, #15]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007a10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8007a1a:	e005      	b.n	8007a28 <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0e3      	beq.n	80079f0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2206      	movs	r2, #6
 8007a48:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007a50:	2103      	movs	r1, #3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a56:	e073      	b.n	8007b40 <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	220d      	movs	r2, #13
 8007a5c:	701a      	strb	r2, [r3, #0]
      break;
 8007a5e:	e06f      	b.n	8007b40 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	220d      	movs	r2, #13
 8007a64:	701a      	strb	r2, [r3, #0]
      break;
 8007a66:	e06b      	b.n	8007b40 <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d017      	beq.n	8007aa2 <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	4798      	blx	r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d103      	bne.n	8007a92 <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	220b      	movs	r2, #11
 8007a8e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a90:	e058      	b.n	8007b44 <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d154      	bne.n	8007b44 <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	220d      	movs	r2, #13
 8007a9e:	701a      	strb	r2, [r3, #0]
      break;
 8007aa0:	e050      	b.n	8007b44 <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	220d      	movs	r2, #13
 8007aa6:	701a      	strb	r2, [r3, #0]
      break;
 8007aa8:	e04c      	b.n	8007b44 <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d049      	beq.n	8007b48 <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
      }
      break;
 8007ac0:	e042      	b.n	8007b48 <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fd57 	bl	800757e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007afe:	2105      	movs	r1, #5
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d107      	bne.n	8007b20 <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fe29 	bl	8007770 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b1e:	e014      	b.n	8007b4a <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 f9b9 	bl	8008e98 <USBH_LL_Start>
      break;
 8007b26:	e010      	b.n	8007b4a <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 8007b28:	bf00      	nop
 8007b2a:	e00e      	b.n	8007b4a <USBH_Process+0x3ba>
      break;
 8007b2c:	bf00      	nop
 8007b2e:	e00c      	b.n	8007b4a <USBH_Process+0x3ba>
      break;
 8007b30:	bf00      	nop
 8007b32:	e00a      	b.n	8007b4a <USBH_Process+0x3ba>
    break;
 8007b34:	bf00      	nop
 8007b36:	e008      	b.n	8007b4a <USBH_Process+0x3ba>
      break;
 8007b38:	bf00      	nop
 8007b3a:	e006      	b.n	8007b4a <USBH_Process+0x3ba>
      break;
 8007b3c:	bf00      	nop
 8007b3e:	e004      	b.n	8007b4a <USBH_Process+0x3ba>
      break;
 8007b40:	bf00      	nop
 8007b42:	e002      	b.n	8007b4a <USBH_Process+0x3ba>
      break;
 8007b44:	bf00      	nop
 8007b46:	e000      	b.n	8007b4a <USBH_Process+0x3ba>
      break;
 8007b48:	bf00      	nop
  }
  return USBH_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af04      	add	r7, sp, #16
 8007b5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	785b      	ldrb	r3, [r3, #1]
 8007b68:	2b07      	cmp	r3, #7
 8007b6a:	f200 81c1 	bhi.w	8007ef0 <USBH_HandleEnum+0x39c>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <USBH_HandleEnum+0x20>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007b95 	.word	0x08007b95
 8007b78:	08007c53 	.word	0x08007c53
 8007b7c:	08007cbd 	.word	0x08007cbd
 8007b80:	08007d4b 	.word	0x08007d4b
 8007b84:	08007db5 	.word	0x08007db5
 8007b88:	08007e25 	.word	0x08007e25
 8007b8c:	08007e6b 	.word	0x08007e6b
 8007b90:	08007eb1 	.word	0x08007eb1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b94:	2108      	movs	r1, #8
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa50 	bl	800803c <USBH_Get_DevDesc>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d130      	bne.n	8007c08 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7919      	ldrb	r1, [r3, #4]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007bca:	b292      	uxth	r2, r2
 8007bcc:	9202      	str	r2, [sp, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	9201      	str	r2, [sp, #4]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2280      	movs	r2, #128	; 0x80
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 ff72 	bl	8008ac2 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	7959      	ldrb	r1, [r3, #5]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bf2:	b292      	uxth	r2, r2
 8007bf4:	9202      	str	r2, [sp, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	9201      	str	r2, [sp, #4]
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2200      	movs	r2, #0
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 ff5e 	bl	8008ac2 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c06:	e175      	b.n	8007ef4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	f040 8172 	bne.w	8007ef4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c16:	3301      	adds	r3, #1
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d903      	bls.n	8007c32 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	220d      	movs	r2, #13
 8007c2e:	701a      	strb	r2, [r3, #0]
      break;
 8007c30:	e160      	b.n	8007ef4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	795b      	ldrb	r3, [r3, #5]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 ff93 	bl	8008b64 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	791b      	ldrb	r3, [r3, #4]
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 ff8d 	bl	8008b64 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
      break;
 8007c50:	e150      	b.n	8007ef4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007c52:	2112      	movs	r1, #18
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f9f1 	bl	800803c <USBH_Get_DevDesc>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c6a:	e145      	b.n	8007ef8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	f040 8142 	bne.w	8007ef8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d903      	bls.n	8007c96 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	220d      	movs	r2, #13
 8007c92:	701a      	strb	r2, [r3, #0]
      break;
 8007c94:	e130      	b.n	8007ef8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	795b      	ldrb	r3, [r3, #5]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 ff61 	bl	8008b64 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	791b      	ldrb	r3, [r3, #4]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 ff5b 	bl	8008b64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
      break;
 8007cba:	e11d      	b.n	8007ef8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa68 	bl	8008194 <USBH_SetAddress>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d132      	bne.n	8007d34 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007cce:	2002      	movs	r0, #2
 8007cd0:	f001 fa33 	bl	800913a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2203      	movs	r2, #3
 8007ce0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	7919      	ldrb	r1, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007cf6:	b292      	uxth	r2, r2
 8007cf8:	9202      	str	r2, [sp, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	9201      	str	r2, [sp, #4]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	4603      	mov	r3, r0
 8007d02:	2280      	movs	r2, #128	; 0x80
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fedc 	bl	8008ac2 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7959      	ldrb	r1, [r3, #5]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d1e:	b292      	uxth	r2, r2
 8007d20:	9202      	str	r2, [sp, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	9201      	str	r2, [sp, #4]
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fec8 	bl	8008ac2 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d32:	e0e3      	b.n	8007efc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	f040 80e0 	bne.w	8007efc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	220d      	movs	r2, #13
 8007d40:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	705a      	strb	r2, [r3, #1]
      break;
 8007d48:	e0d8      	b.n	8007efc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007d4a:	2109      	movs	r1, #9
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f99d 	bl	800808c <USBH_Get_CfgDesc>
 8007d52:	4603      	mov	r3, r0
 8007d54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d62:	e0cd      	b.n	8007f00 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d64:	7bbb      	ldrb	r3, [r7, #14]
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	f040 80ca 	bne.w	8007f00 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d72:	3301      	adds	r3, #1
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d903      	bls.n	8007d8e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	220d      	movs	r2, #13
 8007d8a:	701a      	strb	r2, [r3, #0]
      break;
 8007d8c:	e0b8      	b.n	8007f00 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	795b      	ldrb	r3, [r3, #5]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fee5 	bl	8008b64 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	791b      	ldrb	r3, [r3, #4]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fedf 	bl	8008b64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
      break;
 8007db2:	e0a5      	b.n	8007f00 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f965 	bl	800808c <USBH_Get_CfgDesc>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2205      	movs	r2, #5
 8007dd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007dd2:	e097      	b.n	8007f04 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	f040 8094 	bne.w	8007f04 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007de2:	3301      	adds	r3, #1
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d903      	bls.n	8007dfe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	220d      	movs	r2, #13
 8007dfa:	701a      	strb	r2, [r3, #0]
      break;
 8007dfc:	e082      	b.n	8007f04 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	795b      	ldrb	r3, [r3, #5]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fead 	bl	8008b64 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	791b      	ldrb	r3, [r3, #4]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fea7 	bl	8008b64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
      break;
 8007e22:	e06f      	b.n	8007f04 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d019      	beq.n	8007e62 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e3a:	23ff      	movs	r3, #255	; 0xff
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f949 	bl	80080d4 <USBH_Get_StringDesc>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2206      	movs	r2, #6
 8007e50:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e52:	e059      	b.n	8007f08 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d156      	bne.n	8007f08 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2206      	movs	r2, #6
 8007e5e:	705a      	strb	r2, [r3, #1]
      break;
 8007e60:	e052      	b.n	8007f08 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2206      	movs	r2, #6
 8007e66:	705a      	strb	r2, [r3, #1]
      break;
 8007e68:	e04e      	b.n	8007f08 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d019      	beq.n	8007ea8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e80:	23ff      	movs	r3, #255	; 0xff
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f926 	bl	80080d4 <USBH_Get_StringDesc>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d103      	bne.n	8007e9a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2207      	movs	r2, #7
 8007e96:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e98:	e038      	b.n	8007f0c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d135      	bne.n	8007f0c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2207      	movs	r2, #7
 8007ea4:	705a      	strb	r2, [r3, #1]
      break;
 8007ea6:	e031      	b.n	8007f0c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2207      	movs	r2, #7
 8007eac:	705a      	strb	r2, [r3, #1]
      break;
 8007eae:	e02d      	b.n	8007f0c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d017      	beq.n	8007eea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ec6:	23ff      	movs	r3, #255	; 0xff
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f903 	bl	80080d4 <USBH_Get_StringDesc>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007edc:	e018      	b.n	8007f10 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d115      	bne.n	8007f10 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee8:	e012      	b.n	8007f10 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
      break;
 8007eee:	e00f      	b.n	8007f10 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007ef0:	bf00      	nop
 8007ef2:	e00e      	b.n	8007f12 <USBH_HandleEnum+0x3be>
      break;
 8007ef4:	bf00      	nop
 8007ef6:	e00c      	b.n	8007f12 <USBH_HandleEnum+0x3be>
      break;
 8007ef8:	bf00      	nop
 8007efa:	e00a      	b.n	8007f12 <USBH_HandleEnum+0x3be>
      break;
 8007efc:	bf00      	nop
 8007efe:	e008      	b.n	8007f12 <USBH_HandleEnum+0x3be>
      break;
 8007f00:	bf00      	nop
 8007f02:	e006      	b.n	8007f12 <USBH_HandleEnum+0x3be>
      break;
 8007f04:	bf00      	nop
 8007f06:	e004      	b.n	8007f12 <USBH_HandleEnum+0x3be>
      break;
 8007f08:	bf00      	nop
 8007f0a:	e002      	b.n	8007f12 <USBH_HandleEnum+0x3be>
      break;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <USBH_HandleEnum+0x3be>
      break;
 8007f10:	bf00      	nop
  }
  return Status;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f804 	bl	8007f5e <USBH_HandleSof>
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b0b      	cmp	r3, #11
 8007f6e:	d10a      	bne.n	8007f86 <USBH_HandleSof+0x28>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
  }
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007f9e:	bf00      	nop
}
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007fba:	bf00      	nop
}
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 ff5a 	bl	8008ece <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	791b      	ldrb	r3, [r3, #4]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fd9f 	bl	8008b64 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	795b      	ldrb	r3, [r3, #5]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fd99 	bl	8008b64 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af02      	add	r7, sp, #8
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800804e:	78fb      	ldrb	r3, [r7, #3]
 8008050:	b29b      	uxth	r3, r3
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	4613      	mov	r3, r2
 8008056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800805a:	2100      	movs	r1, #0
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f864 	bl	800812a <USBH_GetDescriptor>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008078:	78fa      	ldrb	r2, [r7, #3]
 800807a:	b292      	uxth	r2, r2
 800807c:	4619      	mov	r1, r3
 800807e:	f000 f91b 	bl	80082b8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	331c      	adds	r3, #28
 800809c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800809e:	887b      	ldrh	r3, [r7, #2]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a8:	2100      	movs	r1, #0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f83d 	bl	800812a <USBH_GetDescriptor>
 80080b0:	4603      	mov	r3, r0
 80080b2:	72fb      	strb	r3, [r7, #11]
 80080b4:	7afb      	ldrb	r3, [r7, #11]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d107      	bne.n	80080ca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80080c0:	887a      	ldrh	r2, [r7, #2]
 80080c2:	68f9      	ldr	r1, [r7, #12]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f967 	bl	8008398 <USBH_ParseCfgDesc>
  }

  return status;
 80080ca:	7afb      	ldrb	r3, [r7, #11]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	461a      	mov	r2, r3
 80080e0:	460b      	mov	r3, r1
 80080e2:	72fb      	strb	r3, [r7, #11]
 80080e4:	4613      	mov	r3, r2
 80080e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80080e8:	7afb      	ldrb	r3, [r7, #11]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80080f0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80080f8:	893b      	ldrh	r3, [r7, #8]
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	460b      	mov	r3, r1
 80080fe:	2100      	movs	r1, #0
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f812 	bl	800812a <USBH_GetDescriptor>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d107      	bne.n	8008120 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008116:	893a      	ldrh	r2, [r7, #8]
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fa3a 	bl	8008594 <USBH_ParseStringDesc>
  }

  return status;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	72fb      	strb	r3, [r7, #11]
 8008138:	4613      	mov	r3, r2
 800813a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	789b      	ldrb	r3, [r3, #2]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d11c      	bne.n	800817e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008144:	7afb      	ldrb	r3, [r7, #11]
 8008146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800814a:	b2da      	uxtb	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2206      	movs	r2, #6
 8008154:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	893a      	ldrh	r2, [r7, #8]
 800815a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800815c:	893b      	ldrh	r3, [r7, #8]
 800815e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008166:	d104      	bne.n	8008172 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f240 4209 	movw	r2, #1033	; 0x409
 800816e:	829a      	strh	r2, [r3, #20]
 8008170:	e002      	b.n	8008178 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8b3a      	ldrh	r2, [r7, #24]
 800817c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800817e:	8b3b      	ldrh	r3, [r7, #24]
 8008180:	461a      	mov	r2, r3
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fa53 	bl	8008630 <USBH_CtlReq>
 800818a:	4603      	mov	r3, r0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	789b      	ldrb	r3, [r3, #2]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d10f      	bne.n	80081c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2205      	movs	r2, #5
 80081b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80081c8:	2200      	movs	r2, #0
 80081ca:	2100      	movs	r1, #0
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa2f 	bl	8008630 <USBH_CtlReq>
 80081d2:	4603      	mov	r3, r0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	789b      	ldrb	r3, [r3, #2]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d10e      	bne.n	800820e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2209      	movs	r2, #9
 80081fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	887a      	ldrh	r2, [r7, #2]
 8008200:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800820e:	2200      	movs	r2, #0
 8008210:	2100      	movs	r1, #0
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa0c 	bl	8008630 <USBH_CtlReq>
 8008218:	4603      	mov	r3, r0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
 800822e:	4613      	mov	r3, r2
 8008230:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	789b      	ldrb	r3, [r3, #2]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d110      	bne.n	800825c <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	220b      	movs	r2, #11
 8008244:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8008246:	78bb      	ldrb	r3, [r7, #2]
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f9e5 	bl	8008630 <USBH_CtlReq>
 8008266:	4603      	mov	r3, r0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	789b      	ldrb	r3, [r3, #2]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d10f      	bne.n	80082a4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2203      	movs	r2, #3
 800828e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	b29a      	uxth	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082a4:	2200      	movs	r2, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f9c1 	bl	8008630 <USBH_CtlReq>
 80082ae:	4603      	mov	r3, r0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	781a      	ldrb	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	785a      	ldrb	r2, [r3, #1]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	3302      	adds	r3, #2
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	3303      	adds	r3, #3
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	021b      	lsls	r3, r3, #8
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	4313      	orrs	r3, r2
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	791a      	ldrb	r2, [r3, #4]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	795a      	ldrb	r2, [r3, #5]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	799a      	ldrb	r2, [r3, #6]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	79da      	ldrb	r2, [r3, #7]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008312:	88fb      	ldrh	r3, [r7, #6]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d939      	bls.n	800838c <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3308      	adds	r3, #8
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	b29a      	uxth	r2, r3
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	3309      	adds	r3, #9
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	021b      	lsls	r3, r3, #8
 800832a:	b29b      	uxth	r3, r3
 800832c:	4313      	orrs	r3, r2
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	330a      	adds	r3, #10
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	b29a      	uxth	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	330b      	adds	r3, #11
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	021b      	lsls	r3, r3, #8
 8008346:	b29b      	uxth	r3, r3
 8008348:	4313      	orrs	r3, r2
 800834a:	b29a      	uxth	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	330c      	adds	r3, #12
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b29a      	uxth	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	330d      	adds	r3, #13
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	b29b      	uxth	r3, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	7b9a      	ldrb	r2, [r3, #14]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	7bda      	ldrb	r2, [r3, #15]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	7c1a      	ldrb	r2, [r3, #16]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	7c5a      	ldrb	r2, [r3, #17]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	745a      	strb	r2, [r3, #17]
  }
}
 800838c:	bf00      	nop
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08a      	sub	sp, #40	; 0x28
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	4613      	mov	r3, r2
 80083a4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	781a      	ldrb	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	785a      	ldrb	r2, [r3, #1]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	3302      	adds	r3, #2
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	3303      	adds	r3, #3
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4313      	orrs	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	791a      	ldrb	r2, [r3, #4]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	795a      	ldrb	r2, [r3, #5]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	799a      	ldrb	r2, [r3, #6]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	79da      	ldrb	r2, [r3, #7]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	7a1a      	ldrb	r2, [r3, #8]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	2b09      	cmp	r3, #9
 8008412:	d95f      	bls.n	80084d4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008414:	2309      	movs	r3, #9
 8008416:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800841c:	e051      	b.n	80084c2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800841e:	f107 0316 	add.w	r3, r7, #22
 8008422:	4619      	mov	r1, r3
 8008424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008426:	f000 f8e8 	bl	80085fa <USBH_GetNextDesc>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	2b04      	cmp	r3, #4
 8008432:	d146      	bne.n	80084c2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008438:	221a      	movs	r2, #26
 800843a:	fb02 f303 	mul.w	r3, r2, r3
 800843e:	3308      	adds	r3, #8
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	3302      	adds	r3, #2
 8008446:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800844a:	69f8      	ldr	r0, [r7, #28]
 800844c:	f000 f846 	bl	80084dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008456:	2300      	movs	r3, #0
 8008458:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800845a:	e022      	b.n	80084a2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800845c:	f107 0316 	add.w	r3, r7, #22
 8008460:	4619      	mov	r1, r3
 8008462:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008464:	f000 f8c9 	bl	80085fa <USBH_GetNextDesc>
 8008468:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	785b      	ldrb	r3, [r3, #1]
 800846e:	2b05      	cmp	r3, #5
 8008470:	d117      	bne.n	80084a2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008476:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800847a:	3201      	adds	r2, #1
 800847c:	00d2      	lsls	r2, r2, #3
 800847e:	211a      	movs	r1, #26
 8008480:	fb01 f303 	mul.w	r3, r1, r3
 8008484:	4413      	add	r3, r2
 8008486:	3308      	adds	r3, #8
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	3304      	adds	r3, #4
 800848e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008492:	69b8      	ldr	r0, [r7, #24]
 8008494:	f000 f851 	bl	800853a <USBH_ParseEPDesc>
            ep_ix++;
 8008498:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800849c:	3301      	adds	r3, #1
 800849e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	791b      	ldrb	r3, [r3, #4]
 80084a6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d204      	bcs.n	80084b8 <USBH_ParseCfgDesc+0x120>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	885a      	ldrh	r2, [r3, #2]
 80084b2:	8afb      	ldrh	r3, [r7, #22]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d8d1      	bhi.n	800845c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80084b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084bc:	3301      	adds	r3, #1
 80084be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084c6:	2b09      	cmp	r3, #9
 80084c8:	d804      	bhi.n	80084d4 <USBH_ParseCfgDesc+0x13c>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	885a      	ldrh	r2, [r3, #2]
 80084ce:	8afb      	ldrh	r3, [r7, #22]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d8a4      	bhi.n	800841e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80084d4:	bf00      	nop
 80084d6:	3728      	adds	r7, #40	; 0x28
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781a      	ldrb	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	785a      	ldrb	r2, [r3, #1]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	789a      	ldrb	r2, [r3, #2]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	78da      	ldrb	r2, [r3, #3]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	791a      	ldrb	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	795a      	ldrb	r2, [r3, #5]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	799a      	ldrb	r2, [r3, #6]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	79da      	ldrb	r2, [r3, #7]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	7a1a      	ldrb	r2, [r3, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	721a      	strb	r2, [r3, #8]
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781a      	ldrb	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	785a      	ldrb	r2, [r3, #1]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	789a      	ldrb	r2, [r3, #2]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	78da      	ldrb	r2, [r3, #3]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	3304      	adds	r3, #4
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	b29a      	uxth	r2, r3
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	3305      	adds	r3, #5
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	b29b      	uxth	r3, r3
 8008578:	4313      	orrs	r3, r2
 800857a:	b29a      	uxth	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	799a      	ldrb	r2, [r3, #6]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	719a      	strb	r2, [r3, #6]
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3301      	adds	r3, #1
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d120      	bne.n	80085ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	1e9a      	subs	r2, r3, #2
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	bf28      	it	cs
 80085b8:	4613      	movcs	r3, r2
 80085ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3302      	adds	r3, #2
 80085c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085c2:	2300      	movs	r3, #0
 80085c4:	82fb      	strh	r3, [r7, #22]
 80085c6:	e00b      	b.n	80085e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80085c8:	8afb      	ldrh	r3, [r7, #22]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	781a      	ldrb	r2, [r3, #0]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80085da:	8afb      	ldrh	r3, [r7, #22]
 80085dc:	3302      	adds	r3, #2
 80085de:	82fb      	strh	r3, [r7, #22]
 80085e0:	8afa      	ldrh	r2, [r7, #22]
 80085e2:	8abb      	ldrh	r3, [r7, #20]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d3ef      	bcc.n	80085c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2200      	movs	r2, #0
 80085ec:	701a      	strb	r2, [r3, #0]
  }
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	881a      	ldrh	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	4413      	add	r3, r2
 8008610:	b29a      	uxth	r2, r3
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4413      	add	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008622:	68fb      	ldr	r3, [r7, #12]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	4613      	mov	r3, r2
 800863c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800863e:	2301      	movs	r3, #1
 8008640:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	789b      	ldrb	r3, [r3, #2]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d002      	beq.n	8008650 <USBH_CtlReq+0x20>
 800864a:	2b02      	cmp	r3, #2
 800864c:	d00f      	beq.n	800866e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800864e:	e027      	b.n	80086a0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	88fa      	ldrh	r2, [r7, #6]
 800865a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2202      	movs	r2, #2
 8008666:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008668:	2301      	movs	r3, #1
 800866a:	75fb      	strb	r3, [r7, #23]
      break;
 800866c:	e018      	b.n	80086a0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 f81c 	bl	80086ac <USBH_HandleControl>
 8008674:	4603      	mov	r3, r0
 8008676:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <USBH_CtlReq+0x54>
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d106      	bne.n	8008692 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	761a      	strb	r2, [r3, #24]
      break;
 8008690:	e005      	b.n	800869e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d102      	bne.n	800869e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	709a      	strb	r2, [r3, #2]
      break;
 800869e:	bf00      	nop
  }
  return status;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	7e1b      	ldrb	r3, [r3, #24]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	2b0a      	cmp	r3, #10
 80086c4:	f200 8156 	bhi.w	8008974 <USBH_HandleControl+0x2c8>
 80086c8:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <USBH_HandleControl+0x24>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	080086fd 	.word	0x080086fd
 80086d4:	08008717 	.word	0x08008717
 80086d8:	08008781 	.word	0x08008781
 80086dc:	080087a7 	.word	0x080087a7
 80086e0:	080087df 	.word	0x080087df
 80086e4:	08008809 	.word	0x08008809
 80086e8:	0800885b 	.word	0x0800885b
 80086ec:	0800887d 	.word	0x0800887d
 80086f0:	080088b9 	.word	0x080088b9
 80086f4:	080088df 	.word	0x080088df
 80086f8:	0800891d 	.word	0x0800891d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f103 0110 	add.w	r1, r3, #16
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	795b      	ldrb	r3, [r3, #5]
 8008706:	461a      	mov	r2, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f943 	bl	8008994 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	761a      	strb	r2, [r3, #24]
      break;
 8008714:	e139      	b.n	800898a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	795b      	ldrb	r3, [r3, #5]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fcb2 	bl	8009086 <USBH_LL_GetURBState>
 8008722:	4603      	mov	r3, r0
 8008724:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d11e      	bne.n	800876a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7c1b      	ldrb	r3, [r3, #16]
 8008730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008734:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8adb      	ldrh	r3, [r3, #22]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800873e:	7b7b      	ldrb	r3, [r7, #13]
 8008740:	2b80      	cmp	r3, #128	; 0x80
 8008742:	d103      	bne.n	800874c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2203      	movs	r2, #3
 8008748:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800874a:	e115      	b.n	8008978 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2205      	movs	r2, #5
 8008750:	761a      	strb	r2, [r3, #24]
      break;
 8008752:	e111      	b.n	8008978 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008754:	7b7b      	ldrb	r3, [r7, #13]
 8008756:	2b80      	cmp	r3, #128	; 0x80
 8008758:	d103      	bne.n	8008762 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2209      	movs	r2, #9
 800875e:	761a      	strb	r2, [r3, #24]
      break;
 8008760:	e10a      	b.n	8008978 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2207      	movs	r2, #7
 8008766:	761a      	strb	r2, [r3, #24]
      break;
 8008768:	e106      	b.n	8008978 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b04      	cmp	r3, #4
 800876e:	d003      	beq.n	8008778 <USBH_HandleControl+0xcc>
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b02      	cmp	r3, #2
 8008774:	f040 8100 	bne.w	8008978 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	220b      	movs	r2, #11
 800877c:	761a      	strb	r2, [r3, #24]
      break;
 800877e:	e0fb      	b.n	8008978 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008786:	b29a      	uxth	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6899      	ldr	r1, [r3, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	899a      	ldrh	r2, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	791b      	ldrb	r3, [r3, #4]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f93a 	bl	8008a12 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2204      	movs	r2, #4
 80087a2:	761a      	strb	r2, [r3, #24]
      break;
 80087a4:	e0f1      	b.n	800898a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	791b      	ldrb	r3, [r3, #4]
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fc6a 	bl	8009086 <USBH_LL_GetURBState>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d102      	bne.n	80087c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2209      	movs	r2, #9
 80087c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b05      	cmp	r3, #5
 80087c6:	d102      	bne.n	80087ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80087c8:	2303      	movs	r3, #3
 80087ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087cc:	e0d6      	b.n	800897c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	f040 80d3 	bne.w	800897c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	220b      	movs	r2, #11
 80087da:	761a      	strb	r2, [r3, #24]
      break;
 80087dc:	e0ce      	b.n	800897c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6899      	ldr	r1, [r3, #8]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	899a      	ldrh	r2, [r3, #12]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	795b      	ldrb	r3, [r3, #5]
 80087ea:	2001      	movs	r0, #1
 80087ec:	9000      	str	r0, [sp, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8ea 	bl	80089c8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2206      	movs	r2, #6
 8008804:	761a      	strb	r2, [r3, #24]
      break;
 8008806:	e0c0      	b.n	800898a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	795b      	ldrb	r3, [r3, #5]
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fc39 	bl	8009086 <USBH_LL_GetURBState>
 8008814:	4603      	mov	r3, r0
 8008816:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d103      	bne.n	8008826 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2207      	movs	r2, #7
 8008822:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008824:	e0ac      	b.n	8008980 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b05      	cmp	r3, #5
 800882a:	d105      	bne.n	8008838 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	220c      	movs	r2, #12
 8008830:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008832:	2303      	movs	r3, #3
 8008834:	73fb      	strb	r3, [r7, #15]
      break;
 8008836:	e0a3      	b.n	8008980 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d103      	bne.n	8008846 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2205      	movs	r2, #5
 8008842:	761a      	strb	r2, [r3, #24]
      break;
 8008844:	e09c      	b.n	8008980 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b04      	cmp	r3, #4
 800884a:	f040 8099 	bne.w	8008980 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	220b      	movs	r2, #11
 8008852:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008854:	2302      	movs	r3, #2
 8008856:	73fb      	strb	r3, [r7, #15]
      break;
 8008858:	e092      	b.n	8008980 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	791b      	ldrb	r3, [r3, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f8d5 	bl	8008a12 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2208      	movs	r2, #8
 8008878:	761a      	strb	r2, [r3, #24]

      break;
 800887a:	e086      	b.n	800898a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	791b      	ldrb	r3, [r3, #4]
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fbff 	bl	8009086 <USBH_LL_GetURBState>
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d105      	bne.n	800889e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	220d      	movs	r2, #13
 8008896:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800889c:	e072      	b.n	8008984 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d103      	bne.n	80088ac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	220b      	movs	r2, #11
 80088a8:	761a      	strb	r2, [r3, #24]
      break;
 80088aa:	e06b      	b.n	8008984 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b05      	cmp	r3, #5
 80088b0:	d168      	bne.n	8008984 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80088b2:	2303      	movs	r3, #3
 80088b4:	73fb      	strb	r3, [r7, #15]
      break;
 80088b6:	e065      	b.n	8008984 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	795b      	ldrb	r3, [r3, #5]
 80088bc:	2201      	movs	r2, #1
 80088be:	9200      	str	r2, [sp, #0]
 80088c0:	2200      	movs	r2, #0
 80088c2:	2100      	movs	r1, #0
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f87f 	bl	80089c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	220a      	movs	r2, #10
 80088da:	761a      	strb	r2, [r3, #24]
      break;
 80088dc:	e055      	b.n	800898a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	795b      	ldrb	r3, [r3, #5]
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fbce 	bl	8009086 <USBH_LL_GetURBState>
 80088ea:	4603      	mov	r3, r0
 80088ec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d105      	bne.n	8008900 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	220d      	movs	r2, #13
 80088fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088fe:	e043      	b.n	8008988 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d103      	bne.n	800890e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2209      	movs	r2, #9
 800890a:	761a      	strb	r2, [r3, #24]
      break;
 800890c:	e03c      	b.n	8008988 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b04      	cmp	r3, #4
 8008912:	d139      	bne.n	8008988 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	220b      	movs	r2, #11
 8008918:	761a      	strb	r2, [r3, #24]
      break;
 800891a:	e035      	b.n	8008988 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7e5b      	ldrb	r3, [r3, #25]
 8008920:	3301      	adds	r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	765a      	strb	r2, [r3, #25]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7e5b      	ldrb	r3, [r3, #25]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d806      	bhi.n	800893e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800893c:	e025      	b.n	800898a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008944:	2106      	movs	r1, #6
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	795b      	ldrb	r3, [r3, #5]
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f904 	bl	8008b64 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	791b      	ldrb	r3, [r3, #4]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f8fe 	bl	8008b64 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800896e:	2302      	movs	r3, #2
 8008970:	73fb      	strb	r3, [r7, #15]
      break;
 8008972:	e00a      	b.n	800898a <USBH_HandleControl+0x2de>

    default:
      break;
 8008974:	bf00      	nop
 8008976:	e008      	b.n	800898a <USBH_HandleControl+0x2de>
      break;
 8008978:	bf00      	nop
 800897a:	e006      	b.n	800898a <USBH_HandleControl+0x2de>
      break;
 800897c:	bf00      	nop
 800897e:	e004      	b.n	800898a <USBH_HandleControl+0x2de>
      break;
 8008980:	bf00      	nop
 8008982:	e002      	b.n	800898a <USBH_HandleControl+0x2de>
      break;
 8008984:	bf00      	nop
 8008986:	e000      	b.n	800898a <USBH_HandleControl+0x2de>
      break;
 8008988:	bf00      	nop
  }

  return status;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af04      	add	r7, sp, #16
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089a2:	79f9      	ldrb	r1, [r7, #7]
 80089a4:	2300      	movs	r3, #0
 80089a6:	9303      	str	r3, [sp, #12]
 80089a8:	2308      	movs	r3, #8
 80089aa:	9302      	str	r3, [sp, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	2300      	movs	r3, #0
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	2300      	movs	r3, #0
 80089b6:	2200      	movs	r2, #0
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fb33 	bl	8009024 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af04      	add	r7, sp, #16
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4611      	mov	r1, r2
 80089d4:	461a      	mov	r2, r3
 80089d6:	460b      	mov	r3, r1
 80089d8:	80fb      	strh	r3, [r7, #6]
 80089da:	4613      	mov	r3, r2
 80089dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089ec:	7979      	ldrb	r1, [r7, #5]
 80089ee:	7e3b      	ldrb	r3, [r7, #24]
 80089f0:	9303      	str	r3, [sp, #12]
 80089f2:	88fb      	ldrh	r3, [r7, #6]
 80089f4:	9302      	str	r3, [sp, #8]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	2301      	movs	r3, #1
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	2300      	movs	r3, #0
 8008a00:	2200      	movs	r2, #0
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fb0e 	bl	8009024 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b088      	sub	sp, #32
 8008a16:	af04      	add	r7, sp, #16
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	461a      	mov	r2, r3
 8008a20:	460b      	mov	r3, r1
 8008a22:	80fb      	strh	r3, [r7, #6]
 8008a24:	4613      	mov	r3, r2
 8008a26:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a28:	7979      	ldrb	r1, [r7, #5]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9303      	str	r3, [sp, #12]
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	9302      	str	r3, [sp, #8]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	2301      	movs	r3, #1
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 faf0 	bl	8009024 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008a44:	2300      	movs	r3, #0

}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b088      	sub	sp, #32
 8008a52:	af04      	add	r7, sp, #16
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	71fb      	strb	r3, [r7, #7]
 8008a60:	4613      	mov	r3, r2
 8008a62:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	79b9      	ldrb	r1, [r7, #6]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	9203      	str	r2, [sp, #12]
 8008a6e:	9302      	str	r3, [sp, #8]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	2301      	movs	r3, #1
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2303      	movs	r3, #3
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 fad1 	bl	8009024 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af04      	add	r7, sp, #16
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	78f9      	ldrb	r1, [r7, #3]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	9203      	str	r2, [sp, #12]
 8008aa4:	9302      	str	r3, [sp, #8]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 fab6 	bl	8009024 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b086      	sub	sp, #24
 8008ac6:	af04      	add	r7, sp, #16
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	4608      	mov	r0, r1
 8008acc:	4611      	mov	r1, r2
 8008ace:	461a      	mov	r2, r3
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	70fb      	strb	r3, [r7, #3]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70bb      	strb	r3, [r7, #2]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008adc:	7878      	ldrb	r0, [r7, #1]
 8008ade:	78ba      	ldrb	r2, [r7, #2]
 8008ae0:	78f9      	ldrb	r1, [r7, #3]
 8008ae2:	8b3b      	ldrh	r3, [r7, #24]
 8008ae4:	9302      	str	r3, [sp, #8]
 8008ae6:	7d3b      	ldrb	r3, [r7, #20]
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	7c3b      	ldrb	r3, [r7, #16]
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	4603      	mov	r3, r0
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fa49 	bl	8008f88 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa68 	bl	8008fe6 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f839 	bl	8008ba4 <USBH_GetFreePipe>
 8008b32:	4603      	mov	r3, r0
 8008b34:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b36:	89fb      	ldrh	r3, [r7, #14]
 8008b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00b      	beq.n	8008b58 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008b40:	78fa      	ldrb	r2, [r7, #3]
 8008b42:	89fb      	ldrh	r3, [r7, #14]
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008b58:	89fb      	ldrh	r3, [r7, #14]
 8008b5a:	b2db      	uxtb	r3, r3
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	2b0a      	cmp	r3, #10
 8008b74:	d80f      	bhi.n	8008b96 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
 8008bb4:	e010      	b.n	8008bd8 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	e007      	b.n	8008be2 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	73fb      	strb	r3, [r7, #15]
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b0a      	cmp	r3, #10
 8008bdc:	d9eb      	bls.n	8008bb6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
	...

08008bf0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	490e      	ldr	r1, [pc, #56]	; (8008c30 <MX_USB_HOST_Init+0x40>)
 8008bf8:	480e      	ldr	r0, [pc, #56]	; (8008c34 <MX_USB_HOST_Init+0x44>)
 8008bfa:	f7fe fc86 	bl	800750a <USBH_Init>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008c04:	f7f7 fdf4 	bl	80007f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 8008c08:	490b      	ldr	r1, [pc, #44]	; (8008c38 <MX_USB_HOST_Init+0x48>)
 8008c0a:	480a      	ldr	r0, [pc, #40]	; (8008c34 <MX_USB_HOST_Init+0x44>)
 8008c0c:	f7fe fd0c 	bl	8007628 <USBH_RegisterClass>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c16:	f7f7 fdeb 	bl	80007f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c1a:	4806      	ldr	r0, [pc, #24]	; (8008c34 <MX_USB_HOST_Init+0x44>)
 8008c1c:	f7fe fda8 	bl	8007770 <USBH_Start>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c26:	f7f7 fde3 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c2a:	bf00      	nop
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	08008c51 	.word	0x08008c51
 8008c34:	20000144 	.word	0x20000144
 8008c38:	2000000c 	.word	0x2000000c

08008c3c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c40:	4802      	ldr	r0, [pc, #8]	; (8008c4c <MX_USB_HOST_Process+0x10>)
 8008c42:	f7fe fda5 	bl	8007790 <USBH_Process>
}
 8008c46:	bf00      	nop
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000144 	.word	0x20000144

08008c50 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d819      	bhi.n	8008c98 <USBH_UserProcess+0x48>
 8008c64:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <USBH_UserProcess+0x1c>)
 8008c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6a:	bf00      	nop
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	08008c89 	.word	0x08008c89
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008c91 	.word	0x08008c91
 8008c7c:	08008c81 	.word	0x08008c81
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c80:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <USBH_UserProcess+0x58>)
 8008c82:	2203      	movs	r2, #3
 8008c84:	701a      	strb	r2, [r3, #0]
  break;
 8008c86:	e008      	b.n	8008c9a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c88:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <USBH_UserProcess+0x58>)
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	701a      	strb	r2, [r3, #0]
  break;
 8008c8e:	e004      	b.n	8008c9a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008c90:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <USBH_UserProcess+0x58>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	701a      	strb	r2, [r3, #0]
  break;
 8008c96:	e000      	b.n	8008c9a <USBH_UserProcess+0x4a>

  default:
  break;
 8008c98:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	200000b0 	.word	0x200000b0

08008cac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08a      	sub	sp, #40	; 0x28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb4:	f107 0314 	add.w	r3, r7, #20
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	605a      	str	r2, [r3, #4]
 8008cbe:	609a      	str	r2, [r3, #8]
 8008cc0:	60da      	str	r2, [r3, #12]
 8008cc2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ccc:	d14e      	bne.n	8008d6c <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cce:	4b29      	ldr	r3, [pc, #164]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd2:	4a28      	ldr	r2, [pc, #160]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008cd4:	f043 0301 	orr.w	r3, r3, #1
 8008cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cda:	4b26      	ldr	r3, [pc, #152]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008ce6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cec:	2302      	movs	r3, #2
 8008cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cf8:	230a      	movs	r3, #10
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cfc:	f107 0314 	add.w	r3, r7, #20
 8008d00:	4619      	mov	r1, r3
 8008d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d06:	f7f8 f853 	bl	8000db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d0a:	4b1a      	ldr	r3, [pc, #104]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d0e:	4a19      	ldr	r2, [pc, #100]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d16:	4b17      	ldr	r3, [pc, #92]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d22:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d114      	bne.n	8008d58 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d2e:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d32:	4a10      	ldr	r2, [pc, #64]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d38:	6593      	str	r3, [r2, #88]	; 0x58
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d42:	60bb      	str	r3, [r7, #8]
 8008d44:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008d46:	f7f9 ff2f 	bl	8002ba8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d4a:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4e:	4a09      	ldr	r2, [pc, #36]	; (8008d74 <HAL_HCD_MspInit+0xc8>)
 8008d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d54:	6593      	str	r3, [r2, #88]	; 0x58
 8008d56:	e001      	b.n	8008d5c <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008d58:	f7f9 ff26 	bl	8002ba8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2100      	movs	r1, #0
 8008d60:	2043      	movs	r0, #67	; 0x43
 8008d62:	f7f7 ffee 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d66:	2043      	movs	r0, #67	; 0x43
 8008d68:	f7f8 f807 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	3728      	adds	r7, #40	; 0x28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40021000 	.word	0x40021000

08008d78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff f8d7 	bl	8007f3a <USBH_LL_IncTimer>
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff f90f 	bl	8007fc6 <USBH_LL_Connect>
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff f918 	bl	8007ff4 <USBH_LL_Disconnect>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff f8c9 	bl	8007f8e <USBH_LL_PortEnabled>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff f8c9 	bl	8007faa <USBH_LL_PortDisabled>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d12a      	bne.n	8008e88 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e32:	4a18      	ldr	r2, [pc, #96]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a15      	ldr	r2, [pc, #84]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e3e:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e42:	4b14      	ldr	r3, [pc, #80]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e48:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8008e4a:	4b12      	ldr	r3, [pc, #72]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e4c:	220c      	movs	r2, #12
 8008e4e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008e50:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e56:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008e5c:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e5e:	2202      	movs	r2, #2
 8008e60:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e62:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008e68:	480a      	ldr	r0, [pc, #40]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e6a:	f7f8 f965 	bl	8001138 <HAL_HCD_Init>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008e74:	f7f7 fcbc 	bl	80007f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008e78:	4806      	ldr	r0, [pc, #24]	; (8008e94 <USBH_LL_Init+0x74>)
 8008e7a:	f7f8 fd29 	bl	80018d0 <HAL_HCD_GetCurrentFrame>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff f84a 	bl	8007f1c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	200005ec 	.word	0x200005ec

08008e98 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7f8 fcac 	bl	800180c <HAL_HCD_Start>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f948 	bl	8009150 <USBH_Get_USB_Status>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7f8 fcb4 	bl	8001852 <HAL_HCD_Stop>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f92d 	bl	8009150 <USBH_Get_USB_Status>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f8 fce8 	bl	80018ec <HAL_HCD_GetCurrentSpeed>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d00c      	beq.n	8008f3c <USBH_LL_GetSpeed+0x38>
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d80d      	bhi.n	8008f42 <USBH_LL_GetSpeed+0x3e>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <USBH_LL_GetSpeed+0x2c>
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d003      	beq.n	8008f36 <USBH_LL_GetSpeed+0x32>
 8008f2e:	e008      	b.n	8008f42 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
    break;
 8008f34:	e008      	b.n	8008f48 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f36:	2301      	movs	r3, #1
 8008f38:	73fb      	strb	r3, [r7, #15]
    break;
 8008f3a:	e005      	b.n	8008f48 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f40:	e002      	b.n	8008f48 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008f42:	2301      	movs	r3, #1
 8008f44:	73fb      	strb	r3, [r7, #15]
    break;
 8008f46:	bf00      	nop
  }
  return  speed;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7f8 fc8f 	bl	800188c <HAL_HCD_ResetPort>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f8eb 	bl	8009150 <USBH_Get_USB_Status>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f88:	b590      	push	{r4, r7, lr}
 8008f8a:	b089      	sub	sp, #36	; 0x24
 8008f8c:	af04      	add	r7, sp, #16
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	4608      	mov	r0, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	461a      	mov	r2, r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	70fb      	strb	r3, [r7, #3]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	70bb      	strb	r3, [r7, #2]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8008fb0:	787c      	ldrb	r4, [r7, #1]
 8008fb2:	78ba      	ldrb	r2, [r7, #2]
 8008fb4:	78f9      	ldrb	r1, [r7, #3]
 8008fb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fb8:	9302      	str	r3, [sp, #8]
 8008fba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	4623      	mov	r3, r4
 8008fc8:	f7f8 f918 	bl	80011fc <HAL_HCD_HC_Init>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f8bc 	bl	8009150 <USBH_Get_USB_Status>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd90      	pop	{r4, r7, pc}

08008fe6 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	4611      	mov	r1, r2
 8009004:	4618      	mov	r0, r3
 8009006:	f7f8 f988 	bl	800131a <HAL_HCD_HC_Halt>
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 f89d 	bl	8009150 <USBH_Get_USB_Status>
 8009016:	4603      	mov	r3, r0
 8009018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901a:	7bbb      	ldrb	r3, [r7, #14]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b089      	sub	sp, #36	; 0x24
 8009028:	af04      	add	r7, sp, #16
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	4608      	mov	r0, r1
 800902e:	4611      	mov	r1, r2
 8009030:	461a      	mov	r2, r3
 8009032:	4603      	mov	r3, r0
 8009034:	70fb      	strb	r3, [r7, #3]
 8009036:	460b      	mov	r3, r1
 8009038:	70bb      	strb	r3, [r7, #2]
 800903a:	4613      	mov	r3, r2
 800903c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800904c:	787c      	ldrb	r4, [r7, #1]
 800904e:	78ba      	ldrb	r2, [r7, #2]
 8009050:	78f9      	ldrb	r1, [r7, #3]
 8009052:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009056:	9303      	str	r3, [sp, #12]
 8009058:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800905a:	9302      	str	r3, [sp, #8]
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	4623      	mov	r3, r4
 8009068:	f7f8 f97a 	bl	8001360 <HAL_HCD_HC_SubmitRequest>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f86c 	bl	8009150 <USBH_Get_USB_Status>
 8009078:	4603      	mov	r3, r0
 800907a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800907c:	7bbb      	ldrb	r3, [r7, #14]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	bd90      	pop	{r4, r7, pc}

08009086 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f7f8 fc03 	bl	80018a8 <HAL_HCD_HC_GetURBState>
 80090a2:	4603      	mov	r3, r0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d103      	bne.n	80090ca <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 f86f 	bl	80091a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80090ca:	20c8      	movs	r0, #200	; 0xc8
 80090cc:	f7f7 fd3a 	bl	8000b44 <HAL_Delay>
  return USBH_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
 80090e6:	4613      	mov	r3, r2
 80090e8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80090f0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	212c      	movs	r1, #44	; 0x2c
 80090f8:	fb01 f303 	mul.w	r3, r1, r3
 80090fc:	4413      	add	r3, r2
 80090fe:	333b      	adds	r3, #59	; 0x3b
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	212c      	movs	r1, #44	; 0x2c
 800910c:	fb01 f303 	mul.w	r3, r1, r3
 8009110:	4413      	add	r3, r2
 8009112:	3354      	adds	r3, #84	; 0x54
 8009114:	78ba      	ldrb	r2, [r7, #2]
 8009116:	701a      	strb	r2, [r3, #0]
 8009118:	e008      	b.n	800912c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	212c      	movs	r1, #44	; 0x2c
 8009120:	fb01 f303 	mul.w	r3, r1, r3
 8009124:	4413      	add	r3, r2
 8009126:	3355      	adds	r3, #85	; 0x55
 8009128:	78ba      	ldrb	r2, [r7, #2]
 800912a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7f7 fcfe 	bl	8000b44 <HAL_Delay>
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	2b03      	cmp	r3, #3
 8009162:	d817      	bhi.n	8009194 <USBH_Get_USB_Status+0x44>
 8009164:	a201      	add	r2, pc, #4	; (adr r2, 800916c <USBH_Get_USB_Status+0x1c>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	0800917d 	.word	0x0800917d
 8009170:	08009183 	.word	0x08009183
 8009174:	08009189 	.word	0x08009189
 8009178:	0800918f 	.word	0x0800918f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
    break;
 8009180:	e00b      	b.n	800919a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009182:	2302      	movs	r3, #2
 8009184:	73fb      	strb	r3, [r7, #15]
    break;
 8009186:	e008      	b.n	800919a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
    break;
 800918c:	e005      	b.n	800919a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800918e:	2302      	movs	r3, #2
 8009190:	73fb      	strb	r3, [r7, #15]
    break;
 8009192:	e002      	b.n	800919a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009194:	2302      	movs	r3, #2
 8009196:	73fb      	strb	r3, [r7, #15]
    break;
 8009198:	bf00      	nop
  }
  return usb_status;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	4603      	mov	r3, r0
 80091b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e001      	b.n	80091c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	461a      	mov	r2, r3
 80091ca:	2140      	movs	r1, #64	; 0x40
 80091cc:	4803      	ldr	r0, [pc, #12]	; (80091dc <MX_DriverVbusFS+0x34>)
 80091ce:	f7f7 ff81 	bl	80010d4 <HAL_GPIO_WritePin>
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	48001800 	.word	0x48001800

080091e0 <__errno>:
 80091e0:	4b01      	ldr	r3, [pc, #4]	; (80091e8 <__errno+0x8>)
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	2000002c 	.word	0x2000002c

080091ec <__libc_init_array>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4d0d      	ldr	r5, [pc, #52]	; (8009224 <__libc_init_array+0x38>)
 80091f0:	4c0d      	ldr	r4, [pc, #52]	; (8009228 <__libc_init_array+0x3c>)
 80091f2:	1b64      	subs	r4, r4, r5
 80091f4:	10a4      	asrs	r4, r4, #2
 80091f6:	2600      	movs	r6, #0
 80091f8:	42a6      	cmp	r6, r4
 80091fa:	d109      	bne.n	8009210 <__libc_init_array+0x24>
 80091fc:	4d0b      	ldr	r5, [pc, #44]	; (800922c <__libc_init_array+0x40>)
 80091fe:	4c0c      	ldr	r4, [pc, #48]	; (8009230 <__libc_init_array+0x44>)
 8009200:	f000 f8f8 	bl	80093f4 <_init>
 8009204:	1b64      	subs	r4, r4, r5
 8009206:	10a4      	asrs	r4, r4, #2
 8009208:	2600      	movs	r6, #0
 800920a:	42a6      	cmp	r6, r4
 800920c:	d105      	bne.n	800921a <__libc_init_array+0x2e>
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	f855 3b04 	ldr.w	r3, [r5], #4
 8009214:	4798      	blx	r3
 8009216:	3601      	adds	r6, #1
 8009218:	e7ee      	b.n	80091f8 <__libc_init_array+0xc>
 800921a:	f855 3b04 	ldr.w	r3, [r5], #4
 800921e:	4798      	blx	r3
 8009220:	3601      	adds	r6, #1
 8009222:	e7f2      	b.n	800920a <__libc_init_array+0x1e>
 8009224:	08009464 	.word	0x08009464
 8009228:	08009464 	.word	0x08009464
 800922c:	08009464 	.word	0x08009464
 8009230:	08009468 	.word	0x08009468

08009234 <malloc>:
 8009234:	4b02      	ldr	r3, [pc, #8]	; (8009240 <malloc+0xc>)
 8009236:	4601      	mov	r1, r0
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	f000 b863 	b.w	8009304 <_malloc_r>
 800923e:	bf00      	nop
 8009240:	2000002c 	.word	0x2000002c

08009244 <free>:
 8009244:	4b02      	ldr	r3, [pc, #8]	; (8009250 <free+0xc>)
 8009246:	4601      	mov	r1, r0
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f000 b80b 	b.w	8009264 <_free_r>
 800924e:	bf00      	nop
 8009250:	2000002c 	.word	0x2000002c

08009254 <memset>:
 8009254:	4402      	add	r2, r0
 8009256:	4603      	mov	r3, r0
 8009258:	4293      	cmp	r3, r2
 800925a:	d100      	bne.n	800925e <memset+0xa>
 800925c:	4770      	bx	lr
 800925e:	f803 1b01 	strb.w	r1, [r3], #1
 8009262:	e7f9      	b.n	8009258 <memset+0x4>

08009264 <_free_r>:
 8009264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009266:	2900      	cmp	r1, #0
 8009268:	d048      	beq.n	80092fc <_free_r+0x98>
 800926a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800926e:	9001      	str	r0, [sp, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f1a1 0404 	sub.w	r4, r1, #4
 8009276:	bfb8      	it	lt
 8009278:	18e4      	addlt	r4, r4, r3
 800927a:	f000 f8ad 	bl	80093d8 <__malloc_lock>
 800927e:	4a20      	ldr	r2, [pc, #128]	; (8009300 <_free_r+0x9c>)
 8009280:	9801      	ldr	r0, [sp, #4]
 8009282:	6813      	ldr	r3, [r2, #0]
 8009284:	4615      	mov	r5, r2
 8009286:	b933      	cbnz	r3, 8009296 <_free_r+0x32>
 8009288:	6063      	str	r3, [r4, #4]
 800928a:	6014      	str	r4, [r2, #0]
 800928c:	b003      	add	sp, #12
 800928e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009292:	f000 b8a7 	b.w	80093e4 <__malloc_unlock>
 8009296:	42a3      	cmp	r3, r4
 8009298:	d90b      	bls.n	80092b2 <_free_r+0x4e>
 800929a:	6821      	ldr	r1, [r4, #0]
 800929c:	1862      	adds	r2, r4, r1
 800929e:	4293      	cmp	r3, r2
 80092a0:	bf04      	itt	eq
 80092a2:	681a      	ldreq	r2, [r3, #0]
 80092a4:	685b      	ldreq	r3, [r3, #4]
 80092a6:	6063      	str	r3, [r4, #4]
 80092a8:	bf04      	itt	eq
 80092aa:	1852      	addeq	r2, r2, r1
 80092ac:	6022      	streq	r2, [r4, #0]
 80092ae:	602c      	str	r4, [r5, #0]
 80092b0:	e7ec      	b.n	800928c <_free_r+0x28>
 80092b2:	461a      	mov	r2, r3
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	b10b      	cbz	r3, 80092bc <_free_r+0x58>
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	d9fa      	bls.n	80092b2 <_free_r+0x4e>
 80092bc:	6811      	ldr	r1, [r2, #0]
 80092be:	1855      	adds	r5, r2, r1
 80092c0:	42a5      	cmp	r5, r4
 80092c2:	d10b      	bne.n	80092dc <_free_r+0x78>
 80092c4:	6824      	ldr	r4, [r4, #0]
 80092c6:	4421      	add	r1, r4
 80092c8:	1854      	adds	r4, r2, r1
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	6011      	str	r1, [r2, #0]
 80092ce:	d1dd      	bne.n	800928c <_free_r+0x28>
 80092d0:	681c      	ldr	r4, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	6053      	str	r3, [r2, #4]
 80092d6:	4421      	add	r1, r4
 80092d8:	6011      	str	r1, [r2, #0]
 80092da:	e7d7      	b.n	800928c <_free_r+0x28>
 80092dc:	d902      	bls.n	80092e4 <_free_r+0x80>
 80092de:	230c      	movs	r3, #12
 80092e0:	6003      	str	r3, [r0, #0]
 80092e2:	e7d3      	b.n	800928c <_free_r+0x28>
 80092e4:	6825      	ldr	r5, [r4, #0]
 80092e6:	1961      	adds	r1, r4, r5
 80092e8:	428b      	cmp	r3, r1
 80092ea:	bf04      	itt	eq
 80092ec:	6819      	ldreq	r1, [r3, #0]
 80092ee:	685b      	ldreq	r3, [r3, #4]
 80092f0:	6063      	str	r3, [r4, #4]
 80092f2:	bf04      	itt	eq
 80092f4:	1949      	addeq	r1, r1, r5
 80092f6:	6021      	streq	r1, [r4, #0]
 80092f8:	6054      	str	r4, [r2, #4]
 80092fa:	e7c7      	b.n	800928c <_free_r+0x28>
 80092fc:	b003      	add	sp, #12
 80092fe:	bd30      	pop	{r4, r5, pc}
 8009300:	200000b4 	.word	0x200000b4

08009304 <_malloc_r>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	1ccd      	adds	r5, r1, #3
 8009308:	f025 0503 	bic.w	r5, r5, #3
 800930c:	3508      	adds	r5, #8
 800930e:	2d0c      	cmp	r5, #12
 8009310:	bf38      	it	cc
 8009312:	250c      	movcc	r5, #12
 8009314:	2d00      	cmp	r5, #0
 8009316:	4606      	mov	r6, r0
 8009318:	db01      	blt.n	800931e <_malloc_r+0x1a>
 800931a:	42a9      	cmp	r1, r5
 800931c:	d903      	bls.n	8009326 <_malloc_r+0x22>
 800931e:	230c      	movs	r3, #12
 8009320:	6033      	str	r3, [r6, #0]
 8009322:	2000      	movs	r0, #0
 8009324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009326:	f000 f857 	bl	80093d8 <__malloc_lock>
 800932a:	4921      	ldr	r1, [pc, #132]	; (80093b0 <_malloc_r+0xac>)
 800932c:	680a      	ldr	r2, [r1, #0]
 800932e:	4614      	mov	r4, r2
 8009330:	b99c      	cbnz	r4, 800935a <_malloc_r+0x56>
 8009332:	4f20      	ldr	r7, [pc, #128]	; (80093b4 <_malloc_r+0xb0>)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	b923      	cbnz	r3, 8009342 <_malloc_r+0x3e>
 8009338:	4621      	mov	r1, r4
 800933a:	4630      	mov	r0, r6
 800933c:	f000 f83c 	bl	80093b8 <_sbrk_r>
 8009340:	6038      	str	r0, [r7, #0]
 8009342:	4629      	mov	r1, r5
 8009344:	4630      	mov	r0, r6
 8009346:	f000 f837 	bl	80093b8 <_sbrk_r>
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	d123      	bne.n	8009396 <_malloc_r+0x92>
 800934e:	230c      	movs	r3, #12
 8009350:	6033      	str	r3, [r6, #0]
 8009352:	4630      	mov	r0, r6
 8009354:	f000 f846 	bl	80093e4 <__malloc_unlock>
 8009358:	e7e3      	b.n	8009322 <_malloc_r+0x1e>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	1b5b      	subs	r3, r3, r5
 800935e:	d417      	bmi.n	8009390 <_malloc_r+0x8c>
 8009360:	2b0b      	cmp	r3, #11
 8009362:	d903      	bls.n	800936c <_malloc_r+0x68>
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	441c      	add	r4, r3
 8009368:	6025      	str	r5, [r4, #0]
 800936a:	e004      	b.n	8009376 <_malloc_r+0x72>
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	42a2      	cmp	r2, r4
 8009370:	bf0c      	ite	eq
 8009372:	600b      	streq	r3, [r1, #0]
 8009374:	6053      	strne	r3, [r2, #4]
 8009376:	4630      	mov	r0, r6
 8009378:	f000 f834 	bl	80093e4 <__malloc_unlock>
 800937c:	f104 000b 	add.w	r0, r4, #11
 8009380:	1d23      	adds	r3, r4, #4
 8009382:	f020 0007 	bic.w	r0, r0, #7
 8009386:	1ac2      	subs	r2, r0, r3
 8009388:	d0cc      	beq.n	8009324 <_malloc_r+0x20>
 800938a:	1a1b      	subs	r3, r3, r0
 800938c:	50a3      	str	r3, [r4, r2]
 800938e:	e7c9      	b.n	8009324 <_malloc_r+0x20>
 8009390:	4622      	mov	r2, r4
 8009392:	6864      	ldr	r4, [r4, #4]
 8009394:	e7cc      	b.n	8009330 <_malloc_r+0x2c>
 8009396:	1cc4      	adds	r4, r0, #3
 8009398:	f024 0403 	bic.w	r4, r4, #3
 800939c:	42a0      	cmp	r0, r4
 800939e:	d0e3      	beq.n	8009368 <_malloc_r+0x64>
 80093a0:	1a21      	subs	r1, r4, r0
 80093a2:	4630      	mov	r0, r6
 80093a4:	f000 f808 	bl	80093b8 <_sbrk_r>
 80093a8:	3001      	adds	r0, #1
 80093aa:	d1dd      	bne.n	8009368 <_malloc_r+0x64>
 80093ac:	e7cf      	b.n	800934e <_malloc_r+0x4a>
 80093ae:	bf00      	nop
 80093b0:	200000b4 	.word	0x200000b4
 80093b4:	200000b8 	.word	0x200000b8

080093b8 <_sbrk_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_sbrk_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f7 fab8 	bl	8000938 <_sbrk>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_sbrk_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_sbrk_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	200008f0 	.word	0x200008f0

080093d8 <__malloc_lock>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__malloc_lock+0x8>)
 80093da:	f000 b809 	b.w	80093f0 <__retarget_lock_acquire_recursive>
 80093de:	bf00      	nop
 80093e0:	200008f8 	.word	0x200008f8

080093e4 <__malloc_unlock>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__malloc_unlock+0x8>)
 80093e6:	f000 b804 	b.w	80093f2 <__retarget_lock_release_recursive>
 80093ea:	bf00      	nop
 80093ec:	200008f8 	.word	0x200008f8

080093f0 <__retarget_lock_acquire_recursive>:
 80093f0:	4770      	bx	lr

080093f2 <__retarget_lock_release_recursive>:
 80093f2:	4770      	bx	lr

080093f4 <_init>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr

08009400 <_fini>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	bf00      	nop
 8009404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009406:	bc08      	pop	{r3}
 8009408:	469e      	mov	lr, r3
 800940a:	4770      	bx	lr
