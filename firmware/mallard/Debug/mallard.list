
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009664  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009860  08009860  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009860  08009860  00019860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009868  08009868  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800986c  0800986c  0001986c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  20000090  08009900  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  08009900  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e717  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc7  00000000  00000000  0003e7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  000423a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00043680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf57  00000000  00000000  000447f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001640b  00000000  00000000  0007074f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103b29  00000000  00000000  00086b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f84  00000000  00000000  0018a6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080097f8 	.word	0x080097f8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	080097f8 	.word	0x080097f8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <blinky>:

// ************************************************* START FUNCTIONS HERE ***************************************

// Blinky!!
void blinky(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	e011      	b.n	8000514 <blinky+0x30>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <blinky+0x40>)
 80004f4:	f000 feac 	bl	8001250 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fbb9 	bl	8000c70 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <blinky+0x40>)
 8000504:	f000 fea4 	bl	8001250 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fbb1 	bl	8000c70 <HAL_Delay>
	for(int i = 0; i < 2; i ++)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3301      	adds	r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	ddea      	ble.n	80004f0 <blinky+0xc>
	}
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	48000400 	.word	0x48000400

08000528 <HAL_RTCEx_WakeUpTimerEventCallback>:

}

// Wakeup RTC Interupt
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8000530:	f000 f822 	bl	8000578 <SystemClock_Config>
	HAL_ResumeTick();
 8000534:	f000 fbc0 	bl	8000cb8 <HAL_ResumeTick>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fb1f 	bl	8000b86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f816 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f90e 	bl	800076c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000550:	f000 f8b6 	bl	80006c0 <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 8000554:	f008 fd4e 	bl	8008ff4 <MX_USB_HOST_Init>
  MX_RTC_Init();
 8000558:	f000 f8e0 	bl	800071c <MX_RTC_Init>


  // ************************************************* START BEFORE WHILE CODE HERE ***************************************

  // Bootup Blinkys
  blinky();
 800055c:	f7ff ffc2 	bl	80004e4 <blinky>
  HAL_Delay(3000);
 8000560:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000564:	f000 fb84 	bl	8000c70 <HAL_Delay>
  blinky();
 8000568:	f7ff ffbc 	bl	80004e4 <blinky>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800056c:	f008 fd68 	bl	8009040 <MX_USB_HOST_Process>

    // ************************************************* START WHILE CODE HERE ***************************************

    // Enter sleep for 30s, this is currently commented out because it makes programming the STM32 much more difficult
    // enterSleepMode();
    blinky();
 8000570:	f7ff ffb8 	bl	80004e4 <blinky>
    MX_USB_HOST_Process();
 8000574:	e7fa      	b.n	800056c <main+0x2c>
	...

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b0ba      	sub	sp, #232	; 0xe8
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000582:	2244      	movs	r2, #68	; 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f009 f866 	bl	8009658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	228c      	movs	r2, #140	; 0x8c
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f009 f858 	bl	8009658 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a8:	f002 fb54 	bl	8002c54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ac:	4b42      	ldr	r3, [pc, #264]	; (80006b8 <SystemClock_Config+0x140>)
 80005ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005b2:	4a41      	ldr	r2, [pc, #260]	; (80006b8 <SystemClock_Config+0x140>)
 80005b4:	f023 0318 	bic.w	r3, r3, #24
 80005b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80005bc:	231c      	movs	r3, #28
 80005be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80005da:	2390      	movs	r3, #144	; 0x90
 80005dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e6:	2301      	movs	r3, #1
 80005e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ec:	2305      	movs	r3, #5
 80005ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 71;
 80005f2:	2347      	movs	r3, #71	; 0x47
 80005f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000604:	2306      	movs	r3, #6
 8000606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fbb4 	bl	8002d7c <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800061a:	f000 f94b 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2303      	movs	r3, #3
 8000626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800062a:	2390      	movs	r3, #144	; 0x90
 800062c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f002 ffbf 	bl	80035c8 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000650:	f000 f930 	bl	80008b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0x144>)
 8000656:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000658:	2300      	movs	r3, #0
 800065a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800065c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000660:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000664:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000668:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800066a:	2301      	movs	r3, #1
 800066c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800066e:	2305      	movs	r3, #5
 8000670:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000672:	2314      	movs	r3, #20
 8000674:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000686:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f9a2 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000696:	f000 f90d 	bl	80008b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069e:	f002 faf7 	bl	8002c90 <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x134>
  {
    Error_Handler();
 80006a8:	f000 f904 	bl	80008b4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ac:	f003 fc8e 	bl	8003fcc <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b0:	bf00      	nop
 80006b2:	37e8      	adds	r7, #232	; 0xe8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	00022020 	.word	0x00022020

080006c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_LPUART1_UART_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_LPUART1_UART_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_LPUART1_UART_Init+0x50>)
 80006fe:	f003 ff7b 	bl	80045f8 <HAL_UART_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 f8d4 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000bc 	.word	0x200000bc
 8000714:	40008000 	.word	0x40008000
 8000718:	00033324 	.word	0x00033324

0800071c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_RTC_Init+0x48>)
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <MX_RTC_Init+0x4c>)
 8000724:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_RTC_Init+0x48>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_RTC_Init+0x48>)
 800072e:	227f      	movs	r2, #127	; 0x7f
 8000730:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_RTC_Init+0x48>)
 8000734:	22ff      	movs	r2, #255	; 0xff
 8000736:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_RTC_Init+0x48>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_RTC_Init+0x48>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_RTC_Init+0x48>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_RTC_Init+0x48>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_RTC_Init+0x48>)
 8000752:	f003 fe19 	bl	8004388 <HAL_RTC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800075c:	f000 f8aa 	bl	80008b4 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000140 	.word	0x20000140
 8000768:	40002800 	.word	0x40002800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b47      	ldr	r3, [pc, #284]	; (80008a0 <MX_GPIO_Init+0x134>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <MX_GPIO_Init+0x134>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <MX_GPIO_Init+0x134>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <MX_GPIO_Init+0x134>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a40      	ldr	r2, [pc, #256]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a34      	ldr	r2, [pc, #208]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007e2:	f002 fabb 	bl	8002d5c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a2d      	ldr	r2, [pc, #180]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_GPIO_Init+0x134>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000804:	4827      	ldr	r0, [pc, #156]	; (80008a4 <MX_GPIO_Init+0x138>)
 8000806:	f000 fd0b 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8000810:	4825      	ldr	r0, [pc, #148]	; (80008a8 <MX_GPIO_Init+0x13c>)
 8000812:	f000 fd05 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_GPIO_Init+0x140>)
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4821      	ldr	r0, [pc, #132]	; (80008b0 <MX_GPIO_Init+0x144>)
 800082c:	f000 fb66 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000830:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4816      	ldr	r0, [pc, #88]	; (80008a4 <MX_GPIO_Init+0x138>)
 800084a:	f000 fb57 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 800084e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_GPIO_Init+0x13c>)
 8000864:	f000 fb4a 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000868:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_GPIO_Init+0x13c>)
 8000882:	f000 fb3b 	bl	8000efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2028      	movs	r0, #40	; 0x28
 800088c:	f000 faff 	bl	8000e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000890:	2028      	movs	r0, #40	; 0x28
 8000892:	f000 fb18 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400
 80008a8:	48001800 	.word	0x48001800
 80008ac:	10110000 	.word	0x10110000
 80008b0:	48000800 	.word	0x48000800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x44>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_MspInit+0x44>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6613      	str	r3, [r2, #96]	; 0x60
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x44>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x44>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x44>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x44>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a18      	ldr	r2, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x80>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d12a      	bne.n	8000980 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_UART_MspInit+0x84>)
 800092c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800092e:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_UART_MspInit+0x84>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_UART_MspInit+0x84>)
 8000938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_UART_MspInit+0x84>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <HAL_UART_MspInit+0x84>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_UART_MspInit+0x84>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800095a:	f002 f9ff 	bl	8002d5c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800095e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000970:	2308      	movs	r3, #8
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_UART_MspInit+0x88>)
 800097c:	f000 fabe 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	; 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40008000 	.word	0x40008000
 800098c:	40021000 	.word	0x40021000
 8000990:	48001800 	.word	0x48001800

08000994 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <HAL_RTC_MspInit+0x3c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d10f      	bne.n	80009c6 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_RTC_MspInit+0x40>)
 80009a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009ac:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <HAL_RTC_MspInit+0x40>)
 80009ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2003      	movs	r0, #3
 80009bc:	f000 fa67 	bl	8000e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 fa80 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40002800 	.word	0x40002800
 80009d4:	40021000 	.word	0x40021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f904 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <RTC_WKUP_IRQHandler+0x10>)
 8000a32:	f003 fdbb 	bl	80045ac <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000140 	.word	0x20000140

08000a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a48:	f000 fc1c 	bl	8001284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <OTG_FS_IRQHandler+0x10>)
 8000a56:	f000 fe9f 	bl	8001798 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000610 	.word	0x20000610

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f008 fda6 	bl	80095e4 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20050000 	.word	0x20050000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	200000ac 	.word	0x200000ac
 8000acc:	20000928 	.word	0x20000928

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <SystemInit+0x5c>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <SystemInit+0x5c>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <SystemInit+0x60>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <SystemInit+0x60>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <SystemInit+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <SystemInit+0x60>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <SystemInit+0x60>)
 8000afc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <SystemInit+0x60>)
 8000b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <SystemInit+0x60>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <SystemInit+0x60>)
 8000b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SystemInit+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	40021000 	.word	0x40021000

08000b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b38:	f7ff ffca 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b3e:	e003      	b.n	8000b48 <LoopCopyDataInit>

08000b40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b46:	3104      	adds	r1, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b50:	d3f6      	bcc.n	8000b40 <CopyDataInit>
	ldr	r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b54:	e002      	b.n	8000b5c <LoopFillZerobss>

08000b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b58:	f842 3b04 	str.w	r3, [r2], #4

08000b5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <LoopForever+0x16>)
	cmp	r2, r3
 8000b5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b60:	d3f9      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f008 fd45 	bl	80095f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b66:	f7ff fceb 	bl	8000540 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000b70:	08009870 	.word	0x08009870
	ldr	r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b78:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000b7c:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000b80:	20000924 	.word	0x20000924

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>

08000b86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f971 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 f80e 	bl	8000bb8 <HAL_InitTick>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e001      	b.n	8000bac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba8:	f7ff fe8a 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_InitTick+0x6c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d023      	beq.n	8000c14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_InitTick+0x70>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f97d 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10f      	bne.n	8000c0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d809      	bhi.n	8000c08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f947 	bl	8000e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_InitTick+0x74>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e004      	b.n	8000c18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e001      	b.n	8000c18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000164 	.word	0x20000164

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000164 	.word	0x20000164

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_ResumeTick+0x1c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_ResumeTick+0x1c>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff29 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff3e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff8e 	bl	8000dcc <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff31 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa2 	bl	8000e34 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e166      	b.n	80011da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8158 	beq.w	80011d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d00b      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f38:	2b11      	cmp	r3, #17
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b12      	cmp	r3, #18
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0xea>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0203 	and.w	r2, r3, #3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80b2 	beq.w	80011d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <HAL_GPIO_Init+0x2fc>)
 8001072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001074:	4a60      	ldr	r2, [pc, #384]	; (80011f8 <HAL_GPIO_Init+0x2fc>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6613      	str	r3, [r2, #96]	; 0x60
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <HAL_GPIO_Init+0x2fc>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001088:	4a5c      	ldr	r2, [pc, #368]	; (80011fc <HAL_GPIO_Init+0x300>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010b2:	d02b      	beq.n	800110c <HAL_GPIO_Init+0x210>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_GPIO_Init+0x304>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d025      	beq.n	8001108 <HAL_GPIO_Init+0x20c>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a51      	ldr	r2, [pc, #324]	; (8001204 <HAL_GPIO_Init+0x308>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d01f      	beq.n	8001104 <HAL_GPIO_Init+0x208>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a50      	ldr	r2, [pc, #320]	; (8001208 <HAL_GPIO_Init+0x30c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d019      	beq.n	8001100 <HAL_GPIO_Init+0x204>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4f      	ldr	r2, [pc, #316]	; (800120c <HAL_GPIO_Init+0x310>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d013      	beq.n	80010fc <HAL_GPIO_Init+0x200>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <HAL_GPIO_Init+0x314>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d00d      	beq.n	80010f8 <HAL_GPIO_Init+0x1fc>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4d      	ldr	r2, [pc, #308]	; (8001214 <HAL_GPIO_Init+0x318>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d007      	beq.n	80010f4 <HAL_GPIO_Init+0x1f8>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a4c      	ldr	r2, [pc, #304]	; (8001218 <HAL_GPIO_Init+0x31c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d101      	bne.n	80010f0 <HAL_GPIO_Init+0x1f4>
 80010ec:	2307      	movs	r3, #7
 80010ee:	e00e      	b.n	800110e <HAL_GPIO_Init+0x212>
 80010f0:	2308      	movs	r3, #8
 80010f2:	e00c      	b.n	800110e <HAL_GPIO_Init+0x212>
 80010f4:	2306      	movs	r3, #6
 80010f6:	e00a      	b.n	800110e <HAL_GPIO_Init+0x212>
 80010f8:	2305      	movs	r3, #5
 80010fa:	e008      	b.n	800110e <HAL_GPIO_Init+0x212>
 80010fc:	2304      	movs	r3, #4
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x212>
 8001100:	2303      	movs	r3, #3
 8001102:	e004      	b.n	800110e <HAL_GPIO_Init+0x212>
 8001104:	2302      	movs	r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x212>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <HAL_GPIO_Init+0x212>
 800110c:	2300      	movs	r3, #0
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4093      	lsls	r3, r2
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800111e:	4937      	ldr	r1, [pc, #220]	; (80011fc <HAL_GPIO_Init+0x300>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_GPIO_Init+0x320>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001150:	4a32      	ldr	r2, [pc, #200]	; (800121c <HAL_GPIO_Init+0x320>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_GPIO_Init+0x320>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800117a:	4a28      	ldr	r2, [pc, #160]	; (800121c <HAL_GPIO_Init+0x320>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_GPIO_Init+0x320>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_GPIO_Init+0x320>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_GPIO_Init+0x320>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <HAL_GPIO_Init+0x320>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f47f ae91 	bne.w	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000
 8001200:	48000400 	.word	0x48000400
 8001204:	48000800 	.word	0x48000800
 8001208:	48000c00 	.word	0x48000c00
 800120c:	48001000 	.word	0x48001000
 8001210:	48001400 	.word	0x48001400
 8001214:	48001800 	.word	0x48001800
 8001218:	48001c00 	.word	0x48001c00
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800123c:	e002      	b.n	8001244 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43d9      	mvns	r1, r3
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	400b      	ands	r3, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f806 	bl	80012b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80012ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012cc:	b08f      	sub	sp, #60	; 0x3c
 80012ce:	af0a      	add	r7, sp, #40	; 0x28
 80012d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e054      	b.n	8001386 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f007 feda 	bl	80090b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2203      	movs	r2, #3
 8001300:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f003 fde8 	bl	8004ef0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	687e      	ldr	r6, [r7, #4]
 8001328:	466d      	mov	r5, sp
 800132a:	f106 0410 	add.w	r4, r6, #16
 800132e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001336:	e894 0003 	ldmia.w	r4, {r0, r1}
 800133a:	e885 0003 	stmia.w	r5, {r0, r1}
 800133e:	1d33      	adds	r3, r6, #4
 8001340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f003 fd97 	bl	8004e76 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fddf 	bl	8004f12 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	687e      	ldr	r6, [r7, #4]
 800135c:	466d      	mov	r5, sp
 800135e:	f106 0410 	add.w	r4, r6, #16
 8001362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800136e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001372:	1d33      	adds	r3, r6, #4
 8001374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f003 feee 	bl	8005158 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800138e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800138e:	b590      	push	{r4, r7, lr}
 8001390:	b089      	sub	sp, #36	; 0x24
 8001392:	af04      	add	r7, sp, #16
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	4608      	mov	r0, r1
 8001398:	4611      	mov	r1, r2
 800139a:	461a      	mov	r2, r3
 800139c:	4603      	mov	r3, r0
 800139e:	70fb      	strb	r3, [r7, #3]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70bb      	strb	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_HCD_HC_Init+0x28>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e076      	b.n	80014a4 <HAL_HCD_HC_Init+0x116>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	212c      	movs	r1, #44	; 0x2c
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	333d      	adds	r3, #61	; 0x3d
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	212c      	movs	r1, #44	; 0x2c
 80013d6:	fb01 f303 	mul.w	r3, r1, r3
 80013da:	4413      	add	r3, r2
 80013dc:	3338      	adds	r3, #56	; 0x38
 80013de:	787a      	ldrb	r2, [r7, #1]
 80013e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	212c      	movs	r1, #44	; 0x2c
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	3340      	adds	r3, #64	; 0x40
 80013f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013f2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	212c      	movs	r1, #44	; 0x2c
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	3339      	adds	r3, #57	; 0x39
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	212c      	movs	r1, #44	; 0x2c
 800140c:	fb01 f303 	mul.w	r3, r1, r3
 8001410:	4413      	add	r3, r2
 8001412:	333f      	adds	r3, #63	; 0x3f
 8001414:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001418:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	78ba      	ldrb	r2, [r7, #2]
 800141e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001422:	b2d0      	uxtb	r0, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	212c      	movs	r1, #44	; 0x2c
 8001428:	fb01 f303 	mul.w	r3, r1, r3
 800142c:	4413      	add	r3, r2
 800142e:	333a      	adds	r3, #58	; 0x3a
 8001430:	4602      	mov	r2, r0
 8001432:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001434:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da09      	bge.n	8001450 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	212c      	movs	r1, #44	; 0x2c
 8001442:	fb01 f303 	mul.w	r3, r1, r3
 8001446:	4413      	add	r3, r2
 8001448:	333b      	adds	r3, #59	; 0x3b
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e008      	b.n	8001462 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	212c      	movs	r1, #44	; 0x2c
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	4413      	add	r3, r2
 800145c:	333b      	adds	r3, #59	; 0x3b
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	212c      	movs	r1, #44	; 0x2c
 8001468:	fb01 f303 	mul.w	r3, r1, r3
 800146c:	4413      	add	r3, r2
 800146e:	333c      	adds	r3, #60	; 0x3c
 8001470:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001474:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	787c      	ldrb	r4, [r7, #1]
 800147c:	78ba      	ldrb	r2, [r7, #2]
 800147e:	78f9      	ldrb	r1, [r7, #3]
 8001480:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	4623      	mov	r3, r4
 8001492:	f003 ffa5 	bl	80053e0 <USB_HC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd90      	pop	{r4, r7, pc}

080014ac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_HCD_HC_Halt+0x1e>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e00f      	b.n	80014ea <HAL_HCD_HC_Halt+0x3e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 f981 	bl	80057e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	4608      	mov	r0, r1
 80014fe:	4611      	mov	r1, r2
 8001500:	461a      	mov	r2, r3
 8001502:	4603      	mov	r3, r0
 8001504:	70fb      	strb	r3, [r7, #3]
 8001506:	460b      	mov	r3, r1
 8001508:	70bb      	strb	r3, [r7, #2]
 800150a:	4613      	mov	r3, r2
 800150c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	212c      	movs	r1, #44	; 0x2c
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	333b      	adds	r3, #59	; 0x3b
 800151c:	78ba      	ldrb	r2, [r7, #2]
 800151e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	4413      	add	r3, r2
 800152c:	333f      	adds	r3, #63	; 0x3f
 800152e:	787a      	ldrb	r2, [r7, #1]
 8001530:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001532:	7c3b      	ldrb	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d112      	bne.n	800155e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	212c      	movs	r1, #44	; 0x2c
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	3342      	adds	r3, #66	; 0x42
 8001546:	2203      	movs	r2, #3
 8001548:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	212c      	movs	r1, #44	; 0x2c
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	333d      	adds	r3, #61	; 0x3d
 8001558:	7f3a      	ldrb	r2, [r7, #28]
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e008      	b.n	8001570 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	212c      	movs	r1, #44	; 0x2c
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	3342      	adds	r3, #66	; 0x42
 800156c:	2202      	movs	r2, #2
 800156e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b03      	cmp	r3, #3
 8001574:	f200 80c6 	bhi.w	8001704 <HAL_HCD_HC_SubmitRequest+0x210>
 8001578:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800157a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157e:	bf00      	nop
 8001580:	08001591 	.word	0x08001591
 8001584:	080016f1 	.word	0x080016f1
 8001588:	080015f5 	.word	0x080015f5
 800158c:	08001673 	.word	0x08001673
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001590:	7c3b      	ldrb	r3, [r7, #16]
 8001592:	2b01      	cmp	r3, #1
 8001594:	f040 80b8 	bne.w	8001708 <HAL_HCD_HC_SubmitRequest+0x214>
 8001598:	78bb      	ldrb	r3, [r7, #2]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 80b4 	bne.w	8001708 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80015a0:	8b3b      	ldrh	r3, [r7, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d108      	bne.n	80015b8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	3355      	adds	r3, #85	; 0x55
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	212c      	movs	r1, #44	; 0x2c
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	3355      	adds	r3, #85	; 0x55
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	212c      	movs	r1, #44	; 0x2c
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	3342      	adds	r3, #66	; 0x42
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80015de:	e093      	b.n	8001708 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	212c      	movs	r1, #44	; 0x2c
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	3342      	adds	r3, #66	; 0x42
 80015ee:	2202      	movs	r2, #2
 80015f0:	701a      	strb	r2, [r3, #0]
      break;
 80015f2:	e089      	b.n	8001708 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80015f4:	78bb      	ldrb	r3, [r7, #2]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d11d      	bne.n	8001636 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	212c      	movs	r1, #44	; 0x2c
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	3355      	adds	r3, #85	; 0x55
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	212c      	movs	r1, #44	; 0x2c
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	3342      	adds	r3, #66	; 0x42
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001620:	e073      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	212c      	movs	r1, #44	; 0x2c
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	3342      	adds	r3, #66	; 0x42
 8001630:	2202      	movs	r2, #2
 8001632:	701a      	strb	r2, [r3, #0]
      break;
 8001634:	e069      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4413      	add	r3, r2
 8001642:	3354      	adds	r3, #84	; 0x54
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	3342      	adds	r3, #66	; 0x42
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
      break;
 800165c:	e055      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	3342      	adds	r3, #66	; 0x42
 800166c:	2202      	movs	r2, #2
 800166e:	701a      	strb	r2, [r3, #0]
      break;
 8001670:	e04b      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001672:	78bb      	ldrb	r3, [r7, #2]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11d      	bne.n	80016b4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	212c      	movs	r1, #44	; 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	3355      	adds	r3, #85	; 0x55
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	212c      	movs	r1, #44	; 0x2c
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	3342      	adds	r3, #66	; 0x42
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800169e:	e034      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	212c      	movs	r1, #44	; 0x2c
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	3342      	adds	r3, #66	; 0x42
 80016ae:	2202      	movs	r2, #2
 80016b0:	701a      	strb	r2, [r3, #0]
      break;
 80016b2:	e02a      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	212c      	movs	r1, #44	; 0x2c
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	3354      	adds	r3, #84	; 0x54
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3342      	adds	r3, #66	; 0x42
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	e016      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	212c      	movs	r1, #44	; 0x2c
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	3342      	adds	r3, #66	; 0x42
 80016ea:	2202      	movs	r2, #2
 80016ec:	701a      	strb	r2, [r3, #0]
      break;
 80016ee:	e00c      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	212c      	movs	r1, #44	; 0x2c
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	3342      	adds	r3, #66	; 0x42
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
      break;
 8001702:	e002      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001704:	bf00      	nop
 8001706:	e000      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001708:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3344      	adds	r3, #68	; 0x44
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	8b3a      	ldrh	r2, [r7, #24]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	202c      	movs	r0, #44	; 0x2c
 8001724:	fb00 f303 	mul.w	r3, r0, r3
 8001728:	440b      	add	r3, r1
 800172a:	334c      	adds	r3, #76	; 0x4c
 800172c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	212c      	movs	r1, #44	; 0x2c
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	3360      	adds	r3, #96	; 0x60
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	212c      	movs	r1, #44	; 0x2c
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	3350      	adds	r3, #80	; 0x50
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	212c      	movs	r1, #44	; 0x2c
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	3339      	adds	r3, #57	; 0x39
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3361      	adds	r3, #97	; 0x61
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	222c      	movs	r2, #44	; 0x2c
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	3338      	adds	r3, #56	; 0x38
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f003 ff21 	bl	80055d0 <USB_HC_StartXfer>
 800178e:	4603      	mov	r3, r0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fc8f 	bl	80050d2 <USB_GetMode>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 80ef 	bne.w	800199a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fc73 	bl	80050ac <USB_ReadInterrupts>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80e5 	beq.w	8001998 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fc6a 	bl	80050ac <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017e2:	d104      	bne.n	80017ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 fc5a 	bl	80050ac <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001802:	d104      	bne.n	800180e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800180c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fc4a 	bl	80050ac <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800181e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001822:	d104      	bne.n	800182e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800182c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fc3a 	bl	80050ac <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b02      	cmp	r3, #2
 8001840:	d103      	bne.n	800184a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2202      	movs	r2, #2
 8001848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fc2c 	bl	80050ac <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800185a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800185e:	d115      	bne.n	800188c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001868:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f007 fc9a 	bl	80091b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2101      	movs	r1, #1
 8001886:	4618      	mov	r0, r3
 8001888:	f003 fce4 	bl	8005254 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fc0b 	bl	80050ac <USB_ReadInterrupts>
 8001896:	4603      	mov	r3, r0
 8001898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d102      	bne.n	80018a8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f001 f962 	bl	8002b6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fbfd 	bl	80050ac <USB_ReadInterrupts>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d106      	bne.n	80018ca <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f007 fc5d 	bl	800917c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2208      	movs	r2, #8
 80018c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fbec 	bl	80050ac <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d101      	bne.n	80018e2 <HAL_HCD_IRQHandler+0x14a>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_HCD_IRQHandler+0x14c>
 80018e2:	2300      	movs	r3, #0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0210 	bic.w	r2, r2, #16
 80018f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f001 f865 	bl	80029c8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0210 	orr.w	r2, r2, #16
 800190c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f003 fbca 	bl	80050ac <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001922:	d13a      	bne.n	800199a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 ff49 	bl	80057c0 <USB_HC_ReadInterrupt>
 800192e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e025      	b.n	8001982 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d018      	beq.n	800197c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800195c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001960:	d106      	bne.n	8001970 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f897 	bl	8001a9c <HCD_HC_IN_IRQHandler>
 800196e:	e005      	b.n	800197c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fc90 	bl	800229c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3d4      	bcc.n	8001936 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	e000      	b.n	800199a <HAL_HCD_IRQHandler+0x202>
      return;
 8001998:	bf00      	nop
    }
  }
}
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_HCD_Start+0x16>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e013      	b.n	80019de <HAL_HCD_Start+0x3e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fa83 	bl	8004ece <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fca4 	bl	800531c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_HCD_Stop+0x16>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e00d      	b.n	8001a18 <HAL_HCD_Stop+0x32>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 f806 	bl	8005a1a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 fc4b 	bl	80052c8 <USB_ResetPort>
 8001a32:	4603      	mov	r3, r0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3360      	adds	r3, #96	; 0x60
 8001a56:	781b      	ldrb	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fca3 	bl	80053bc <USB_GetCurrentFrame>
 8001a76:	4603      	mov	r3, r0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fc7e 	bl	800538e <USB_GetHostSpeed>
 8001a92:	4603      	mov	r3, r0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	015a      	lsls	r2, r3, #5
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d119      	bne.n	8001b00 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2304      	movs	r3, #4
 8001adc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	0151      	lsls	r1, r2, #5
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	440a      	add	r2, r1
 8001af4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	60d3      	str	r3, [r2, #12]
 8001afe:	e101      	b.n	8001d04 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b16:	d12b      	bne.n	8001b70 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b24:	461a      	mov	r2, r3
 8001b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3361      	adds	r3, #97	; 0x61
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	0151      	lsls	r1, r2, #5
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	440a      	add	r2, r1
 8001b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fe3a 	bl	80057e2 <USB_HC_Halt>
 8001b6e:	e0c9      	b.n	8001d04 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d109      	bne.n	8001b9a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b92:	461a      	mov	r2, r3
 8001b94:	2320      	movs	r3, #32
 8001b96:	6093      	str	r3, [r2, #8]
 8001b98:	e0b4      	b.n	8001d04 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d133      	bne.n	8001c18 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	0151      	lsls	r1, r2, #5
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	440a      	add	r2, r1
 8001bc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3361      	adds	r3, #97	; 0x61
 8001bde:	2205      	movs	r2, #5
 8001be0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c00:	461a      	mov	r2, r3
 8001c02:	2308      	movs	r3, #8
 8001c04:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fde6 	bl	80057e2 <USB_HC_Halt>
 8001c16:	e075      	b.n	8001d04 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2e:	d134      	bne.n	8001c9a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	0151      	lsls	r1, r2, #5
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	440a      	add	r2, r1
 8001c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	212c      	movs	r1, #44	; 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3361      	adds	r3, #97	; 0x61
 8001c5e:	2208      	movs	r2, #8
 8001c60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2310      	movs	r3, #16
 8001c72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	461a      	mov	r2, r3
 8001c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c86:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fda5 	bl	80057e2 <USB_HC_Halt>
 8001c98:	e034      	b.n	8001d04 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cac:	2b80      	cmp	r3, #128	; 0x80
 8001cae:	d129      	bne.n	8001d04 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	015a      	lsls	r2, r3, #5
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	0151      	lsls	r1, r2, #5
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	440a      	add	r2, r1
 8001cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3361      	adds	r3, #97	; 0x61
 8001cde:	2206      	movs	r2, #6
 8001ce0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fd78 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1a:	d122      	bne.n	8001d62 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	0151      	lsls	r1, r2, #5
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	440a      	add	r2, r1
 8001d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fd4b 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d5e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d60:	e298      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	f040 80fd 	bne.w	8001f74 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	3361      	adds	r3, #97	; 0x61
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	335c      	adds	r3, #92	; 0x5c
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	2301      	movs	r3, #1
 8001dae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	333f      	adds	r3, #63	; 0x3f
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	333f      	adds	r3, #63	; 0x3f
 8001dd2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d121      	bne.n	8001e1c <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	0151      	lsls	r1, r2, #5
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	440a      	add	r2, r1
 8001dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fced 	bl	80057e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	2310      	movs	r3, #16
 8001e18:	6093      	str	r3, [r2, #8]
 8001e1a:	e066      	b.n	8001eea <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	333f      	adds	r3, #63	; 0x3f
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d127      	bne.n	8001e80 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	0151      	lsls	r1, r2, #5
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	440a      	add	r2, r1
 8001e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e4e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3360      	adds	r3, #96	; 0x60
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	b2d9      	uxtb	r1, r3
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	202c      	movs	r0, #44	; 0x2c
 8001e6c:	fb00 f303 	mul.w	r3, r0, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	3360      	adds	r3, #96	; 0x60
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f007 f9a9 	bl	80091d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e7e:	e034      	b.n	8001eea <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	333f      	adds	r3, #63	; 0x3f
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d12a      	bne.n	8001eea <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3360      	adds	r3, #96	; 0x60
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3354      	adds	r3, #84	; 0x54
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2d8      	uxtb	r0, r3
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	212c      	movs	r1, #44	; 0x2c
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3354      	adds	r3, #84	; 0x54
 8001eca:	4602      	mov	r2, r0
 8001ecc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	b2d9      	uxtb	r1, r3
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	202c      	movs	r0, #44	; 0x2c
 8001ed8:	fb00 f303 	mul.w	r3, r0, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3360      	adds	r3, #96	; 0x60
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f007 f973 	bl	80091d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d12b      	bne.n	8001f4a <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3348      	adds	r3, #72	; 0x48
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	202c      	movs	r0, #44	; 0x2c
 8001f08:	fb00 f202 	mul.w	r2, r0, r2
 8001f0c:	440a      	add	r2, r1
 8001f0e:	3240      	adds	r2, #64	; 0x40
 8001f10:	8812      	ldrh	r2, [r2, #0]
 8001f12:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 81ba 	beq.w	8002294 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	212c      	movs	r1, #44	; 0x2c
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3354      	adds	r3, #84	; 0x54
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2d8      	uxtb	r0, r3
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	3354      	adds	r3, #84	; 0x54
 8001f44:	4602      	mov	r2, r0
 8001f46:	701a      	strb	r2, [r3, #0]
}
 8001f48:	e1a4      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3354      	adds	r3, #84	; 0x54
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2d8      	uxtb	r0, r3
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3354      	adds	r3, #84	; 0x54
 8001f6e:	4602      	mov	r2, r0
 8001f70:	701a      	strb	r2, [r3, #0]
}
 8001f72:	e18f      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	f040 8106 	bne.w	8002198 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	0151      	lsls	r1, r2, #5
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	440a      	add	r2, r1
 8001fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa6:	f023 0302 	bic.w	r3, r3, #2
 8001faa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3361      	adds	r3, #97	; 0x61
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d109      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3360      	adds	r3, #96	; 0x60
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e0c9      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3361      	adds	r3, #97	; 0x61
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d109      	bne.n	8001ffc <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3360      	adds	r3, #96	; 0x60
 8001ff6:	2205      	movs	r2, #5
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e0b5      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3361      	adds	r3, #97	; 0x61
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b06      	cmp	r3, #6
 800200e:	d009      	beq.n	8002024 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3361      	adds	r3, #97	; 0x61
 800201e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002020:	2b08      	cmp	r3, #8
 8002022:	d150      	bne.n	80020c6 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	335c      	adds	r3, #92	; 0x5c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	202c      	movs	r0, #44	; 0x2c
 800203c:	fb00 f303 	mul.w	r3, r0, r3
 8002040:	440b      	add	r3, r1
 8002042:	335c      	adds	r3, #92	; 0x5c
 8002044:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	335c      	adds	r3, #92	; 0x5c
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d912      	bls.n	8002080 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	335c      	adds	r3, #92	; 0x5c
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3360      	adds	r3, #96	; 0x60
 800207a:	2204      	movs	r2, #4
 800207c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800207e:	e073      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3360      	adds	r3, #96	; 0x60
 800208e:	2202      	movs	r2, #2
 8002090:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020a8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020b0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020c4:	e050      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3361      	adds	r3, #97	; 0x61
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d122      	bne.n	8002120 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3360      	adds	r3, #96	; 0x60
 80020e8:	2202      	movs	r2, #2
 80020ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002102:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800210a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e023      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3361      	adds	r3, #97	; 0x61
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b07      	cmp	r3, #7
 8002132:	d119      	bne.n	8002168 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	335c      	adds	r3, #92	; 0x5c
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	202c      	movs	r0, #44	; 0x2c
 800214c:	fb00 f303 	mul.w	r3, r0, r3
 8002150:	440b      	add	r3, r1
 8002152:	335c      	adds	r3, #92	; 0x5c
 8002154:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3360      	adds	r3, #96	; 0x60
 8002164:	2204      	movs	r2, #4
 8002166:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	461a      	mov	r2, r3
 8002176:	2302      	movs	r3, #2
 8002178:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	b2d9      	uxtb	r1, r3
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	202c      	movs	r0, #44	; 0x2c
 8002184:	fb00 f303 	mul.w	r3, r0, r3
 8002188:	4413      	add	r3, r2
 800218a:	3360      	adds	r3, #96	; 0x60
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f007 f81d 	bl	80091d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002196:	e07d      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d172      	bne.n	8002294 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	333f      	adds	r3, #63	; 0x3f
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d121      	bne.n	8002206 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	335c      	adds	r3, #92	; 0x5c
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	0151      	lsls	r1, r2, #5
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	440a      	add	r2, r1
 80021ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 faef 	bl	80057e2 <USB_HC_Halt>
 8002204:	e03d      	b.n	8002282 <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	333f      	adds	r3, #63	; 0x3f
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	333f      	adds	r3, #63	; 0x3f
 8002228:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800222a:	2b02      	cmp	r3, #2
 800222c:	d129      	bne.n	8002282 <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3361      	adds	r3, #97	; 0x61
 800224e:	2203      	movs	r2, #3
 8002250:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	0151      	lsls	r1, r2, #5
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	440a      	add	r2, r1
 8002268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fab0 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	2310      	movs	r3, #16
 8002292:	6093      	str	r3, [r2, #8]
}
 8002294:	bf00      	nop
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d119      	bne.n	8002300 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	461a      	mov	r2, r3
 80022da:	2304      	movs	r3, #4
 80022dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	0151      	lsls	r1, r2, #5
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	440a      	add	r2, r1
 80022f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80022fe:	e35f      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b20      	cmp	r3, #32
 8002314:	d13e      	bne.n	8002394 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	2320      	movs	r3, #32
 8002326:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	333d      	adds	r3, #61	; 0x3d
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	f040 8341 	bne.w	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
      hhcd->hc[ch_num].do_ping = 0U;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	333d      	adds	r3, #61	; 0x3d
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3360      	adds	r3, #96	; 0x60
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	440a      	add	r2, r1
 8002378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fa28 	bl	80057e2 <USB_HC_Halt>
}
 8002392:	e315      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023aa:	d122      	bne.n	80023f2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	0151      	lsls	r1, r2, #5
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	440a      	add	r2, r1
 80023c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fa03 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	461a      	mov	r2, r3
 80023ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ee:	6093      	str	r3, [r2, #8]
}
 80023f0:	e2e6      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d150      	bne.n	80024aa <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	335c      	adds	r3, #92	; 0x5c
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242c:	2b40      	cmp	r3, #64	; 0x40
 800242e:	d111      	bne.n	8002454 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	333d      	adds	r3, #61	; 0x3d
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	2340      	movs	r3, #64	; 0x40
 8002452:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	0151      	lsls	r1, r2, #5
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	440a      	add	r2, r1
 800246a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f003 f9af 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	461a      	mov	r2, r3
 8002492:	2301      	movs	r3, #1
 8002494:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3361      	adds	r3, #97	; 0x61
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
}
 80024a8:	e28a      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d13c      	bne.n	800253a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3361      	adds	r3, #97	; 0x61
 80024ce:	2204      	movs	r2, #4
 80024d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	333d      	adds	r3, #61	; 0x3d
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	335c      	adds	r3, #92	; 0x5c
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	0151      	lsls	r1, r2, #5
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	440a      	add	r2, r1
 800250c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f003 f95e 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	461a      	mov	r2, r3
 8002534:	2340      	movs	r3, #64	; 0x40
 8002536:	6093      	str	r3, [r2, #8]
}
 8002538:	e242      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b08      	cmp	r3, #8
 800254e:	d12a      	bne.n	80025a6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	461a      	mov	r2, r3
 800255e:	2308      	movs	r3, #8
 8002560:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	0151      	lsls	r1, r2, #5
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	440a      	add	r2, r1
 8002578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f003 f928 	bl	80057e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3361      	adds	r3, #97	; 0x61
 80025a0:	2205      	movs	r2, #5
 80025a2:	701a      	strb	r2, [r3, #0]
}
 80025a4:	e20c      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d133      	bne.n	8002624 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	335c      	adds	r3, #92	; 0x5c
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3361      	adds	r3, #97	; 0x61
 80025dc:	2203      	movs	r2, #3
 80025de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	0151      	lsls	r1, r2, #5
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	440a      	add	r2, r1
 80025f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f003 f8e9 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	461a      	mov	r2, r3
 800261e:	2310      	movs	r3, #16
 8002620:	6093      	str	r3, [r2, #8]
}
 8002622:	e1cd      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002636:	2b80      	cmp	r3, #128	; 0x80
 8002638:	d12a      	bne.n	8002690 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3361      	adds	r3, #97	; 0x61
 8002648:	2206      	movs	r2, #6
 800264a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	0151      	lsls	r1, r2, #5
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	440a      	add	r2, r1
 8002662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f003 f8b3 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	461a      	mov	r2, r3
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	6093      	str	r3, [r2, #8]
}
 800268e:	e197      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a6:	d134      	bne.n	8002712 <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	0151      	lsls	r1, r2, #5
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	440a      	add	r2, r1
 80026be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 f885 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	2310      	movs	r3, #16
 80026e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	3361      	adds	r3, #97	; 0x61
 800270c:	2208      	movs	r2, #8
 800270e:	701a      	strb	r2, [r3, #0]
}
 8002710:	e156      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b02      	cmp	r3, #2
 8002726:	f040 814b 	bne.w	80029c0 <HCD_HC_OUT_IRQHandler+0x724>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	0151      	lsls	r1, r2, #5
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	440a      	add	r2, r1
 8002740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002744:	f023 0302 	bic.w	r3, r3, #2
 8002748:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3361      	adds	r3, #97	; 0x61
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d179      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0x5b6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3360      	adds	r3, #96	; 0x60
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	333f      	adds	r3, #63	; 0x3f
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d00a      	beq.n	800279a <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	212c      	movs	r1, #44	; 0x2c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	333f      	adds	r3, #63	; 0x3f
 8002792:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002794:	2b03      	cmp	r3, #3
 8002796:	f040 80fc 	bne.w	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
        if (hhcd->Init.dma_enable == 1U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d142      	bne.n	8002828 <HCD_HC_OUT_IRQHandler+0x58c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	334c      	adds	r3, #76	; 0x4c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80ed 	beq.w	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	334c      	adds	r3, #76	; 0x4c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	202c      	movs	r0, #44	; 0x2c
 80027ce:	fb00 f202 	mul.w	r2, r0, r2
 80027d2:	440a      	add	r2, r1
 80027d4:	3240      	adds	r2, #64	; 0x40
 80027d6:	8812      	ldrh	r2, [r2, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	3b01      	subs	r3, #1
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	202c      	movs	r0, #44	; 0x2c
 80027e2:	fb00 f202 	mul.w	r2, r0, r2
 80027e6:	440a      	add	r2, r1
 80027e8:	3240      	adds	r2, #64	; 0x40
 80027ea:	8812      	ldrh	r2, [r2, #0]
 80027ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80ca 	beq.w	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3355      	adds	r3, #85	; 0x55
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2d8      	uxtb	r0, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3355      	adds	r3, #85	; 0x55
 8002822:	4602      	mov	r2, r0
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e0b4      	b.n	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3355      	adds	r3, #85	; 0x55
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2d8      	uxtb	r0, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3355      	adds	r3, #85	; 0x55
 800284c:	4602      	mov	r2, r0
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e09f      	b.n	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3361      	adds	r3, #97	; 0x61
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d109      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x5de>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3360      	adds	r3, #96	; 0x60
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e08b      	b.n	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3361      	adds	r3, #97	; 0x61
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b04      	cmp	r3, #4
 800288c:	d109      	bne.n	80028a2 <HCD_HC_OUT_IRQHandler+0x606>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	3360      	adds	r3, #96	; 0x60
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e077      	b.n	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3361      	adds	r3, #97	; 0x61
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d109      	bne.n	80028ca <HCD_HC_OUT_IRQHandler+0x62e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	3360      	adds	r3, #96	; 0x60
 80028c4:	2205      	movs	r2, #5
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e063      	b.n	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3361      	adds	r3, #97	; 0x61
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d009      	beq.n	80028f2 <HCD_HC_OUT_IRQHandler+0x656>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3361      	adds	r3, #97	; 0x61
 80028ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d14f      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	335c      	adds	r3, #92	; 0x5c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	202c      	movs	r0, #44	; 0x2c
 800290a:	fb00 f303 	mul.w	r3, r0, r3
 800290e:	440b      	add	r3, r1
 8002910:	335c      	adds	r3, #92	; 0x5c
 8002912:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	335c      	adds	r3, #92	; 0x5c
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d912      	bls.n	800294e <HCD_HC_OUT_IRQHandler+0x6b2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	335c      	adds	r3, #92	; 0x5c
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3360      	adds	r3, #96	; 0x60
 8002948:	2204      	movs	r2, #4
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e021      	b.n	8002992 <HCD_HC_OUT_IRQHandler+0x6f6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3360      	adds	r3, #96	; 0x60
 800295c:	2202      	movs	r2, #2
 800295e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002976:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800297e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	461a      	mov	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	2302      	movs	r3, #2
 80029a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	b2d9      	uxtb	r1, r3
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	202c      	movs	r0, #44	; 0x2c
 80029ae:	fb00 f303 	mul.w	r3, r0, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f006 fc08 	bl	80091d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	0c5b      	lsrs	r3, r3, #17
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d004      	beq.n	8002a0e <HCD_RXQLVL_IRQHandler+0x46>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	f000 80a9 	beq.w	8002b5e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a0c:	e0aa      	b.n	8002b64 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a6 	beq.w	8002b62 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3344      	adds	r3, #68	; 0x44
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 809b 	beq.w	8002b62 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3350      	adds	r3, #80	; 0x50
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	441a      	add	r2, r3
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	202c      	movs	r0, #44	; 0x2c
 8002a46:	fb00 f303 	mul.w	r3, r0, r3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334c      	adds	r3, #76	; 0x4c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d87a      	bhi.n	8002b4a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3344      	adds	r3, #68	; 0x44
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	b292      	uxth	r2, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f002 faf4 	bl	800505a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3344      	adds	r3, #68	; 0x44
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	441a      	add	r2, r3
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	202c      	movs	r0, #44	; 0x2c
 8002a8c:	fb00 f303 	mul.w	r3, r0, r3
 8002a90:	440b      	add	r3, r1
 8002a92:	3344      	adds	r3, #68	; 0x44
 8002a94:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3350      	adds	r3, #80	; 0x50
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	202c      	movs	r0, #44	; 0x2c
 8002ab0:	fb00 f303 	mul.w	r3, r0, r3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3350      	adds	r3, #80	; 0x50
 8002ab8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	0cdb      	lsrs	r3, r3, #19
 8002aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ace:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3340      	adds	r3, #64	; 0x40
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d13c      	bne.n	8002b62 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d039      	beq.n	8002b62 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b04:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b0c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3354      	adds	r3, #84	; 0x54
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	f083 0301 	eor.w	r3, r3, #1
 8002b34:	b2d8      	uxtb	r0, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3354      	adds	r3, #84	; 0x54
 8002b44:	4602      	mov	r2, r0
 8002b46:	701a      	strb	r2, [r3, #0]
      break;
 8002b48:	e00b      	b.n	8002b62 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	2204      	movs	r2, #4
 8002b5a:	701a      	strb	r2, [r3, #0]
      break;
 8002b5c:	e001      	b.n	8002b62 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b62:	bf00      	nop
  }
}
 8002b64:	bf00      	nop
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d10b      	bne.n	8002bbc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f006 faf2 	bl	8009198 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d132      	bne.n	8002c2c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d126      	bne.n	8002c26 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d113      	bne.n	8002c08 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002be6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bea:	d106      	bne.n	8002bfa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fb2e 	bl	8005254 <USB_InitFSLSPClkSel>
 8002bf8:	e011      	b.n	8002c1e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f002 fb27 	bl	8005254 <USB_InitFSLSPClkSel>
 8002c06:	e00a      	b.n	8002c1e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c16:	461a      	mov	r2, r3
 8002c18:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c1c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f006 fae4 	bl	80091ec <HAL_HCD_PortEnabled_Callback>
 8002c24:	e002      	b.n	8002c2c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f006 faee 	bl	8009208 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d103      	bne.n	8002c3e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f043 0320 	orr.w	r3, r3, #32
 8002c3c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6013      	str	r3, [r2, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40007000 	.word	0x40007000

08002c74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9e:	d130      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cac:	d038      	beq.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2232      	movs	r2, #50	; 0x32
 8002cc4:	fb02 f303 	mul.w	r3, r2, r3
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd4:	e002      	b.n	8002cdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce8:	d102      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f2      	bne.n	8002cd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfc:	d110      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e00f      	b.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0e:	d007      	beq.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d18:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40007000 	.word	0x40007000
 8002d34:	20000000 	.word	0x20000000
 8002d38:	431bde83 	.word	0x431bde83

08002d3c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d4a:	6053      	str	r3, [r2, #4]
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40007000 	.word	0x40007000

08002d5c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6a:	6053      	str	r3, [r2, #4]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40007000 	.word	0x40007000

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f000 bc16 	b.w	80035bc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d90:	4ba0      	ldr	r3, [pc, #640]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d9a:	4b9e      	ldr	r3, [pc, #632]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80e4 	beq.w	8002f7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4c>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	f040 808b 	bne.w	8002ed6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	f040 8087 	bne.w	8002ed6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc8:	4b92      	ldr	r3, [pc, #584]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_OscConfig+0x64>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e3ed      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1a      	ldr	r2, [r3, #32]
 8002de4:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_RCC_OscConfig+0x7e>
 8002df0:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df8:	e005      	b.n	8002e06 <HAL_RCC_OscConfig+0x8a>
 8002dfa:	4b86      	ldr	r3, [pc, #536]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d223      	bcs.n	8002e52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fd80 	bl	8003914 <RCC_SetFlashLatencyFromMSIRange>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e3ce      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1e:	4b7d      	ldr	r3, [pc, #500]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7c      	ldr	r2, [pc, #496]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e24:	f043 0308 	orr.w	r3, r3, #8
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b7a      	ldr	r3, [pc, #488]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4977      	ldr	r1, [pc, #476]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3c:	4b75      	ldr	r3, [pc, #468]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	4972      	ldr	r1, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
 8002e50:	e025      	b.n	8002e9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e52:	4b70      	ldr	r3, [pc, #448]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6f      	ldr	r2, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e58:	f043 0308 	orr.w	r3, r3, #8
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	496a      	ldr	r1, [pc, #424]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e70:	4b68      	ldr	r3, [pc, #416]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	4965      	ldr	r1, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fd40 	bl	8003914 <RCC_SetFlashLatencyFromMSIRange>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e38e      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e9e:	f000 fc75 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	495a      	ldr	r1, [pc, #360]	; (8003018 <HAL_RCC_OscConfig+0x29c>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eba:	4a58      	ldr	r2, [pc, #352]	; (800301c <HAL_RCC_OscConfig+0x2a0>)
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ebe:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x2a4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fe78 	bl	8000bb8 <HAL_InitTick>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d052      	beq.n	8002f78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	e372      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d032      	beq.n	8002f44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ede:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a4c      	ldr	r2, [pc, #304]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eea:	f7fd feb5 	bl	8000c58 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef2:	f7fd feb1 	bl	8000c58 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e35b      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f10:	4b40      	ldr	r3, [pc, #256]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3f      	ldr	r2, [pc, #252]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	493a      	ldr	r1, [pc, #232]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2e:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	4935      	ldr	r1, [pc, #212]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
 8002f42:	e01a      	b.n	8002f7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f44:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a32      	ldr	r2, [pc, #200]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f50:	f7fd fe82 	bl	8000c58 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f58:	f7fd fe7e 	bl	8000c58 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e328      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x1dc>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d073      	beq.n	800306e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_OscConfig+0x21c>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d10e      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d10b      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d063      	beq.n	800306c <HAL_RCC_OscConfig+0x2f0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d15f      	bne.n	800306c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e305      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x24c>
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e01d      	b.n	8003004 <HAL_RCC_OscConfig+0x288>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x270>
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0x288>
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a08      	ldr	r2, [pc, #32]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a05      	ldr	r2, [pc, #20]	; (8003014 <HAL_RCC_OscConfig+0x298>)
 8002ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fd fe24 	bl	8000c58 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	e010      	b.n	8003036 <HAL_RCC_OscConfig+0x2ba>
 8003014:	40021000 	.word	0x40021000
 8003018:	08009818 	.word	0x08009818
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003024:	f7fd fe18 	bl	8000c58 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e2c2      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003036:	4baf      	ldr	r3, [pc, #700]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x2a8>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fd fe08 	bl	8000c58 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fd fe04 	bl	8000c58 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e2ae      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305e:	4ba5      	ldr	r3, [pc, #660]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x2d0>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d060      	beq.n	800313c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d005      	beq.n	800308c <HAL_RCC_OscConfig+0x310>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d119      	bne.n	80030ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d116      	bne.n	80030ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308c:	4b99      	ldr	r3, [pc, #612]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_OscConfig+0x328>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e28b      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b93      	ldr	r3, [pc, #588]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	4990      	ldr	r1, [pc, #576]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b8:	e040      	b.n	800313c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d023      	beq.n	800310a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c2:	4b8c      	ldr	r3, [pc, #560]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a8b      	ldr	r2, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fd fdc3 	bl	8000c58 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fd fdbf 	bl	8000c58 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e269      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e8:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b7f      	ldr	r3, [pc, #508]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	497c      	ldr	r1, [pc, #496]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	e018      	b.n	800313c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b7a      	ldr	r3, [pc, #488]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a79      	ldr	r2, [pc, #484]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fd fd9f 	bl	8000c58 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311e:	f7fd fd9b 	bl	8000c58 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e245      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003130:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d03c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01c      	beq.n	800318a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003150:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003156:	4a67      	ldr	r2, [pc, #412]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fd fd7a 	bl	8000c58 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003168:	f7fd fd76 	bl	8000c58 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e220      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317a:	4b5e      	ldr	r3, [pc, #376]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800317c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ef      	beq.n	8003168 <HAL_RCC_OscConfig+0x3ec>
 8003188:	e01b      	b.n	80031c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318a:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800318c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fd fd5d 	bl	8000c58 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fd fd59 	bl	8000c58 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e203      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ef      	bne.n	80031a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80a6 	beq.w	800331c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031d4:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10d      	bne.n	80031fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6593      	str	r3, [r2, #88]	; 0x58
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <HAL_RCC_OscConfig+0x57c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d118      	bne.n	800323a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003208:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_RCC_OscConfig+0x57c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a3a      	ldr	r2, [pc, #232]	; (80032f8 <HAL_RCC_OscConfig+0x57c>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003214:	f7fd fd20 	bl	8000c58 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fd fd1c 	bl	8000c58 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1c6      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322e:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <HAL_RCC_OscConfig+0x57c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <HAL_RCC_OscConfig+0x4d8>
 8003242:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003252:	e024      	b.n	800329e <HAL_RCC_OscConfig+0x522>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b05      	cmp	r3, #5
 800325a:	d110      	bne.n	800327e <HAL_RCC_OscConfig+0x502>
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326c:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327c:	e00f      	b.n	800329e <HAL_RCC_OscConfig+0x522>
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fd fcd7 	bl	8000c58 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fd fcd3 	bl	8000c58 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e17b      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_OscConfig+0x578>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ed      	beq.n	80032ae <HAL_RCC_OscConfig+0x532>
 80032d2:	e01a      	b.n	800330a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fd fcc0 	bl	8000c58 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032da:	e00f      	b.n	80032fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fd fcbc 	bl	8000c58 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d906      	bls.n	80032fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e164      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032fc:	4ba8      	ldr	r3, [pc, #672]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e8      	bne.n	80032dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4ba3      	ldr	r3, [pc, #652]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	4aa2      	ldr	r2, [pc, #648]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d03c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01c      	beq.n	800336a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003330:	4b9b      	ldr	r3, [pc, #620]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003336:	4a9a      	ldr	r2, [pc, #616]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fd fc8a 	bl	8000c58 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003348:	f7fd fc86 	bl	8000c58 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e130      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800335a:	4b91      	ldr	r3, [pc, #580]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800335c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ef      	beq.n	8003348 <HAL_RCC_OscConfig+0x5cc>
 8003368:	e01b      	b.n	80033a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800336a:	4b8d      	ldr	r3, [pc, #564]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800336c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003370:	4a8b      	ldr	r2, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd fc6d 	bl	8000c58 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003382:	f7fd fc69 	bl	8000c58 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e113      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003394:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ef      	bne.n	8003382 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8107 	beq.w	80035ba <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	f040 80cb 	bne.w	800354c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033b6:	4b7a      	ldr	r3, [pc, #488]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d12c      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	3b01      	subs	r3, #1
 80033d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d123      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d11b      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d113      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d109      	bne.n	8003424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d06d      	beq.n	8003500 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d068      	beq.n	80034fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800342a:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003436:	4b5a      	ldr	r3, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0ba      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003446:	4b56      	ldr	r3, [pc, #344]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a55      	ldr	r2, [pc, #340]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800344c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003450:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003452:	f7fd fc01 	bl	8000c58 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345a:	f7fd fbfd 	bl	8000c58 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0a7      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f0      	bne.n	800345a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003478:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <HAL_RCC_OscConfig+0x828>)
 800347e:	4013      	ands	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003488:	3a01      	subs	r2, #1
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	4311      	orrs	r1, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003492:	0212      	lsls	r2, r2, #8
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800349a:	0852      	lsrs	r2, r2, #1
 800349c:	3a01      	subs	r2, #1
 800349e:	0552      	lsls	r2, r2, #21
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034a6:	0852      	lsrs	r2, r2, #1
 80034a8:	3a01      	subs	r2, #1
 80034aa:	0652      	lsls	r2, r2, #25
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034b2:	06d2      	lsls	r2, r2, #27
 80034b4:	430a      	orrs	r2, r1
 80034b6:	493a      	ldr	r1, [pc, #232]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034bc:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a37      	ldr	r2, [pc, #220]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 80034c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a34      	ldr	r2, [pc, #208]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034d4:	f7fd fbc0 	bl	8000c58 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fd fbbc 	bl	8000c58 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e066      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ee:	4b2c      	ldr	r3, [pc, #176]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034fa:	e05e      	b.n	80035ba <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e05d      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003500:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d156      	bne.n	80035ba <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800350c:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003516:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003518:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800351e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003522:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003524:	f7fd fb98 	bl	8000c58 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352c:	f7fd fb94 	bl	8000c58 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e03e      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x7b0>
 800354a:	e036      	b.n	80035ba <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b0c      	cmp	r3, #12
 8003550:	d031      	beq.n	80035b6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800355c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003570:	f023 0303 	bic.w	r3, r3, #3
 8003574:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_OscConfig+0x824>)
 800357c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003584:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fd fb67 	bl	8000c58 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	e00c      	b.n	80035a8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fd fb63 	bl	8000c58 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d905      	bls.n	80035a8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e00d      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
 80035a0:	40021000 	.word	0x40021000
 80035a4:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x848>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ec      	bne.n	800358e <HAL_RCC_OscConfig+0x812>
 80035b4:	e001      	b.n	80035ba <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0c8      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d910      	bls.n	800360c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 0207 	bic.w	r2, r3, #7
 80035f2:	4961      	ldr	r1, [pc, #388]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b0      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d04c      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d107      	bne.n	8003630 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003620:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d121      	bne.n	8003670 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e09e      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d107      	bne.n	8003648 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d115      	bne.n	8003670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e092      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d107      	bne.n	8003660 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003650:	4b4a      	ldr	r3, [pc, #296]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e086      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003660:	4b46      	ldr	r3, [pc, #280]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e07e      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003670:	4b42      	ldr	r3, [pc, #264]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 0203 	bic.w	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	493f      	ldr	r1, [pc, #252]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003682:	f7fd fae9 	bl	8000c58 <HAL_GetTick>
 8003686:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368a:	f7fd fae5 	bl	8000c58 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	; 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e066      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a0:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 020c 	and.w	r2, r3, #12
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d1eb      	bne.n	800368a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036be:	4b2f      	ldr	r3, [pc, #188]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	492c      	ldr	r1, [pc, #176]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	4924      	ldr	r1, [pc, #144]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e036      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4918      	ldr	r1, [pc, #96]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4910      	ldr	r1, [pc, #64]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800373e:	f000 f825 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490c      	ldr	r1, [pc, #48]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fa28 	bl	8000bb8 <HAL_InitTick>
 8003768:	4603      	mov	r3, r0
 800376a:	72fb      	strb	r3, [r7, #11]

  return status;
 800376c:	7afb      	ldrb	r3, [r7, #11]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40022000 	.word	0x40022000
 800377c:	40021000 	.word	0x40021000
 8003780:	08009818 	.word	0x08009818
 8003784:	20000000 	.word	0x20000000
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d121      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d11e      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037c0:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e005      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037e8:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d102      	bne.n	800380a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_GetSysClockFreq+0x110>)
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	e004      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d101      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003812:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d134      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0xa6>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d003      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0xac>
 8003830:	e005      	b.n	800383e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_RCC_GetSysClockFreq+0x110>)
 8003834:	617b      	str	r3, [r7, #20]
      break;
 8003836:	e005      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800383a:	617b      	str	r3, [r7, #20]
      break;
 800383c:	e002      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	617b      	str	r3, [r7, #20]
      break;
 8003842:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	3301      	adds	r3, #1
 8003850:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	fb02 f203 	mul.w	r2, r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	0e5b      	lsrs	r3, r3, #25
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	3301      	adds	r3, #1
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003884:	69bb      	ldr	r3, [r7, #24]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	08009830 	.word	0x08009830
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	007a1200 	.word	0x007a1200

080038a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000000 	.word	0x20000000

080038bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4904      	ldr	r1, [pc, #16]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08009828 	.word	0x08009828

080038e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038ec:	f7ff ffda 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0adb      	lsrs	r3, r3, #11
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4904      	ldr	r1, [pc, #16]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	08009828 	.word	0x08009828

08003914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800392c:	f7ff f9a2 	bl	8002c74 <HAL_PWREx_GetVoltageRange>
 8003930:	6178      	str	r0, [r7, #20]
 8003932:	e014      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	4a24      	ldr	r2, [pc, #144]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	; 0x58
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800394c:	f7ff f992 	bl	8002c74 <HAL_PWREx_GetVoltageRange>
 8003950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003964:	d10b      	bne.n	800397e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d919      	bls.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2ba0      	cmp	r3, #160	; 0xa0
 8003970:	d902      	bls.n	8003978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003972:	2302      	movs	r3, #2
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e013      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003978:	2301      	movs	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e010      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d902      	bls.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003984:	2303      	movs	r3, #3
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	e00a      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d102      	bne.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003990:	2302      	movs	r3, #2
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e004      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b70      	cmp	r3, #112	; 0x70
 800399a:	d101      	bne.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800399c:	2301      	movs	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 0207 	bic.w	r2, r3, #7
 80039a8:	4909      	ldr	r1, [pc, #36]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d001      	beq.n	80039c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40022000 	.word	0x40022000

080039d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039dc:	2300      	movs	r3, #0
 80039de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039e0:	2300      	movs	r3, #0
 80039e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d041      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039f8:	d02a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039fe:	d824      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a04:	d008      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a0a:	d81e      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a14:	d010      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a16:	e018      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a18:	4b86      	ldr	r3, [pc, #536]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a85      	ldr	r2, [pc, #532]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a24:	e015      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fadd 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a36:	e00c      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3320      	adds	r3, #32
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fbc6 	bl	80041d0 <RCCEx_PLLSAI2_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a48:	e003      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a4e:	e000      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a58:	4b76      	ldr	r3, [pc, #472]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a66:	4973      	ldr	r1, [pc, #460]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a6e:	e001      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d041      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a88:	d02a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a8e:	d824      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a94:	d008      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a9a:	d81e      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003aa6:	e018      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aa8:	4b62      	ldr	r3, [pc, #392]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a61      	ldr	r2, [pc, #388]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ab4:	e015      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fa95 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ac6:	e00c      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3320      	adds	r3, #32
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fb7e 	bl	80041d0 <RCCEx_PLLSAI2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ad8:	e003      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae2:	7cfb      	ldrb	r3, [r7, #19]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ae8:	4b52      	ldr	r3, [pc, #328]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af6:	494f      	ldr	r1, [pc, #316]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003afe:	e001      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a0 	beq.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b16:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2c:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6593      	str	r3, [r2, #88]	; 0x58
 8003b38:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b48:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a3a      	ldr	r2, [pc, #232]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b54:	f7fd f880 	bl	8000c58 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b5a:	e009      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fd f87c 	bl	8000c58 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b6e:	e005      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b70:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ef      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d15c      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b82:	4b2c      	ldr	r3, [pc, #176]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01f      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d019      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ba0:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd f83b 	bl	8000c58 <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be4:	e00b      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd f837 	bl	8000c58 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d902      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	74fb      	strb	r3, [r7, #19]
            break;
 8003bfc:	e006      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ec      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	4904      	ldr	r1, [pc, #16]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c2a:	e009      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c40:	7c7b      	ldrb	r3, [r7, #17]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c46:	4ba6      	ldr	r3, [pc, #664]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4aa5      	ldr	r2, [pc, #660]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c5e:	4ba0      	ldr	r3, [pc, #640]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f023 0203 	bic.w	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	499c      	ldr	r1, [pc, #624]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c80:	4b97      	ldr	r3, [pc, #604]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 020c 	bic.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	4994      	ldr	r1, [pc, #592]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ca2:	4b8f      	ldr	r3, [pc, #572]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	498b      	ldr	r1, [pc, #556]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cc4:	4b86      	ldr	r3, [pc, #536]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	4983      	ldr	r1, [pc, #524]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ce6:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	497a      	ldr	r1, [pc, #488]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d08:	4b75      	ldr	r3, [pc, #468]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	4972      	ldr	r1, [pc, #456]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d38:	4969      	ldr	r1, [pc, #420]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d5a:	4961      	ldr	r1, [pc, #388]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	4958      	ldr	r1, [pc, #352]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d90:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	4950      	ldr	r1, [pc, #320]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db2:	4b4b      	ldr	r3, [pc, #300]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	4947      	ldr	r1, [pc, #284]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dd4:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de2:	493f      	ldr	r1, [pc, #252]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d028      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4936      	ldr	r1, [pc, #216]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e14:	d106      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e16:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4a31      	ldr	r2, [pc, #196]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e20:	60d3      	str	r3, [r2, #12]
 8003e22:	e011      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f8d9 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d028      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e54:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	491f      	ldr	r1, [pc, #124]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e72:	d106      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e74:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7e:	60d3      	str	r3, [r2, #12]
 8003e80:	e011      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f8aa 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec0:	4907      	ldr	r1, [pc, #28]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed0:	d108      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed2:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4a02      	ldr	r2, [pc, #8]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003edc:	60d3      	str	r3, [r2, #12]
 8003ede:	e013      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003ee0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f879 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02f      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f14:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f22:	4929      	ldr	r1, [pc, #164]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f856 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d014      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	74bb      	strb	r3, [r7, #18]
 8003f4e:	e011      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3320      	adds	r3, #32
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f935 	bl	80041d0 <RCCEx_PLLSAI2_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f90:	490d      	ldr	r1, [pc, #52]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fa4:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000

08003fcc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003fd6:	f043 0304 	orr.w	r3, r3, #4
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000

08003fec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ffa:	4b74      	ldr	r3, [pc, #464]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d018      	beq.n	8004038 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004006:	4b71      	ldr	r3, [pc, #452]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0203 	and.w	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d10d      	bne.n	8004032 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
       ||
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800401e:	4b6b      	ldr	r3, [pc, #428]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
       ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d047      	beq.n	80040c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
 8004036:	e044      	b.n	80040c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d018      	beq.n	8004072 <RCCEx_PLLSAI1_Config+0x86>
 8004040:	2b03      	cmp	r3, #3
 8004042:	d825      	bhi.n	8004090 <RCCEx_PLLSAI1_Config+0xa4>
 8004044:	2b01      	cmp	r3, #1
 8004046:	d002      	beq.n	800404e <RCCEx_PLLSAI1_Config+0x62>
 8004048:	2b02      	cmp	r3, #2
 800404a:	d009      	beq.n	8004060 <RCCEx_PLLSAI1_Config+0x74>
 800404c:	e020      	b.n	8004090 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800404e:	4b5f      	ldr	r3, [pc, #380]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d11d      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800405e:	e01a      	b.n	8004096 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004060:	4b5a      	ldr	r3, [pc, #360]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d116      	bne.n	800409a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e013      	b.n	800409a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004072:	4b56      	ldr	r3, [pc, #344]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800407e:	4b53      	ldr	r3, [pc, #332]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800408e:	e006      	b.n	800409e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
      break;
 8004094:	e004      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800409e:	bf00      	nop
    }

    if(status == HAL_OK)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10d      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040a6:	4b49      	ldr	r3, [pc, #292]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6819      	ldr	r1, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	430b      	orrs	r3, r1
 80040bc:	4943      	ldr	r1, [pc, #268]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d17c      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040c8:	4b40      	ldr	r3, [pc, #256]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3f      	ldr	r2, [pc, #252]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d4:	f7fc fdc0 	bl	8000c58 <HAL_GetTick>
 80040d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040da:	e009      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040dc:	f7fc fdbc 	bl	8000c58 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d902      	bls.n	80040f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	73fb      	strb	r3, [r7, #15]
        break;
 80040ee:	e005      	b.n	80040fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040f0:	4b36      	ldr	r3, [pc, #216]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ef      	bne.n	80040dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d15f      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d110      	bne.n	800412a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004108:	4b30      	ldr	r3, [pc, #192]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004110:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6892      	ldr	r2, [r2, #8]
 8004118:	0211      	lsls	r1, r2, #8
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	06d2      	lsls	r2, r2, #27
 8004120:	430a      	orrs	r2, r1
 8004122:	492a      	ldr	r1, [pc, #168]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	610b      	str	r3, [r1, #16]
 8004128:	e027      	b.n	800417a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d112      	bne.n	8004156 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004130:	4b26      	ldr	r3, [pc, #152]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004138:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6892      	ldr	r2, [r2, #8]
 8004140:	0211      	lsls	r1, r2, #8
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6912      	ldr	r2, [r2, #16]
 8004146:	0852      	lsrs	r2, r2, #1
 8004148:	3a01      	subs	r2, #1
 800414a:	0552      	lsls	r2, r2, #21
 800414c:	430a      	orrs	r2, r1
 800414e:	491f      	ldr	r1, [pc, #124]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	610b      	str	r3, [r1, #16]
 8004154:	e011      	b.n	800417a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800415e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6892      	ldr	r2, [r2, #8]
 8004166:	0211      	lsls	r1, r2, #8
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6952      	ldr	r2, [r2, #20]
 800416c:	0852      	lsrs	r2, r2, #1
 800416e:	3a01      	subs	r2, #1
 8004170:	0652      	lsls	r2, r2, #25
 8004172:	430a      	orrs	r2, r1
 8004174:	4915      	ldr	r1, [pc, #84]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004184:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7fc fd67 	bl	8000c58 <HAL_GetTick>
 800418a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800418c:	e009      	b.n	80041a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800418e:	f7fc fd63 	bl	8000c58 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d902      	bls.n	80041a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	73fb      	strb	r3, [r7, #15]
          break;
 80041a0:	e005      	b.n	80041ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0ef      	beq.n	800418e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	4903      	ldr	r1, [pc, #12]	; (80041cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000

080041d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041de:	4b69      	ldr	r3, [pc, #420]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d018      	beq.n	800421c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041ea:	4b66      	ldr	r3, [pc, #408]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0203 	and.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d10d      	bne.n	8004216 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
       ||
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004202:	4b60      	ldr	r3, [pc, #384]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
       ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d047      	beq.n	80042a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	e044      	b.n	80042a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d018      	beq.n	8004256 <RCCEx_PLLSAI2_Config+0x86>
 8004224:	2b03      	cmp	r3, #3
 8004226:	d825      	bhi.n	8004274 <RCCEx_PLLSAI2_Config+0xa4>
 8004228:	2b01      	cmp	r3, #1
 800422a:	d002      	beq.n	8004232 <RCCEx_PLLSAI2_Config+0x62>
 800422c:	2b02      	cmp	r3, #2
 800422e:	d009      	beq.n	8004244 <RCCEx_PLLSAI2_Config+0x74>
 8004230:	e020      	b.n	8004274 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004232:	4b54      	ldr	r3, [pc, #336]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11d      	bne.n	800427a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004242:	e01a      	b.n	800427a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004244:	4b4f      	ldr	r3, [pc, #316]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d116      	bne.n	800427e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004254:	e013      	b.n	800427e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004256:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004262:	4b48      	ldr	r3, [pc, #288]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004272:	e006      	b.n	8004282 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      break;
 8004278:	e004      	b.n	8004284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800427a:	bf00      	nop
 800427c:	e002      	b.n	8004284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004282:	bf00      	nop
    }

    if(status == HAL_OK)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800428a:	4b3e      	ldr	r3, [pc, #248]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	3b01      	subs	r3, #1
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	430b      	orrs	r3, r1
 80042a0:	4938      	ldr	r1, [pc, #224]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d166      	bne.n	800437a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042ac:	4b35      	ldr	r3, [pc, #212]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a34      	ldr	r2, [pc, #208]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b8:	f7fc fcce 	bl	8000c58 <HAL_GetTick>
 80042bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042be:	e009      	b.n	80042d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042c0:	f7fc fcca 	bl	8000c58 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d902      	bls.n	80042d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	73fb      	strb	r3, [r7, #15]
        break;
 80042d2:	e005      	b.n	80042e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042d4:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ef      	bne.n	80042c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d149      	bne.n	800437a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d110      	bne.n	800430e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80042f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6892      	ldr	r2, [r2, #8]
 80042fc:	0211      	lsls	r1, r2, #8
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68d2      	ldr	r2, [r2, #12]
 8004302:	06d2      	lsls	r2, r2, #27
 8004304:	430a      	orrs	r2, r1
 8004306:	491f      	ldr	r1, [pc, #124]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004308:	4313      	orrs	r3, r2
 800430a:	614b      	str	r3, [r1, #20]
 800430c:	e011      	b.n	8004332 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004316:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6892      	ldr	r2, [r2, #8]
 800431e:	0211      	lsls	r1, r2, #8
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6912      	ldr	r2, [r2, #16]
 8004324:	0852      	lsrs	r2, r2, #1
 8004326:	3a01      	subs	r2, #1
 8004328:	0652      	lsls	r2, r2, #25
 800432a:	430a      	orrs	r2, r1
 800432c:	4915      	ldr	r1, [pc, #84]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a13      	ldr	r2, [pc, #76]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433e:	f7fc fc8b 	bl	8000c58 <HAL_GetTick>
 8004342:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004344:	e009      	b.n	800435a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004346:	f7fc fc87 	bl	8000c58 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d902      	bls.n	800435a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	73fb      	strb	r3, [r7, #15]
          break;
 8004358:	e005      	b.n	8004366 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ef      	beq.n	8004346 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000

08004388 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d06c      	beq.n	8004474 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc faf0 	bl	8000994 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	22ca      	movs	r2, #202	; 0xca
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2253      	movs	r2, #83	; 0x53
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f87c 	bl	80044ca <RTC_EnterInitMode>
 80043d2:	4603      	mov	r3, r0
 80043d4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d14b      	bne.n	8004474 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ee:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6899      	ldr	r1, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6919      	ldr	r1, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	041a      	lsls	r2, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f87f 	bl	8004530 <RTC_ExitInitMode>
 8004432:	4603      	mov	r3, r0
 8004434:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d11b      	bne.n	8004474 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0203 	bic.w	r2, r2, #3
 800444a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	22ff      	movs	r2, #255	; 0xff
 800446a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004494:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004496:	f7fc fbdf 	bl	8000c58 <HAL_GetTick>
 800449a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800449c:	e009      	b.n	80044b2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800449e:	f7fc fbdb 	bl	8000c58 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ac:	d901      	bls.n	80044b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e007      	b.n	80044c2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ee      	beq.n	800449e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d120      	bne.n	8004526 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80044ee:	f7fc fbb3 	bl	8000c58 <HAL_GetTick>
 80044f2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044f4:	e00d      	b.n	8004512 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044f6:	f7fc fbaf 	bl	8000c58 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004504:	d905      	bls.n	8004512 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <RTC_EnterInitMode+0x5c>
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d1e7      	bne.n	80044f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <RTC_ExitInitMode+0x78>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <RTC_ExitInitMode+0x78>)
 8004542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004546:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <RTC_ExitInitMode+0x78>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10c      	bne.n	800456e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff92 	bl	800447e <HAL_RTC_WaitForSynchro>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01e      	beq.n	800459e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2203      	movs	r2, #3
 8004564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	e017      	b.n	800459e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800456e:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <RTC_ExitInitMode+0x78>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4a0d      	ldr	r2, [pc, #52]	; (80045a8 <RTC_ExitInitMode+0x78>)
 8004574:	f023 0320 	bic.w	r3, r3, #32
 8004578:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ff7f 	bl	800447e <HAL_RTC_WaitForSynchro>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2203      	movs	r2, #3
 800458a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <RTC_ExitInitMode+0x78>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <RTC_ExitInitMode+0x78>)
 8004598:	f043 0320 	orr.w	r3, r3, #32
 800459c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40002800 	.word	0x40002800

080045ac <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80045b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045ba:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80045da:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fb ffa3 	bl	8000528 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40010400 	.word	0x40010400

080045f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e040      	b.n	800468c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc f974 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f82c 	bl	8004694 <UART_SetConfig>
 800463c:	4603      	mov	r3, r0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e022      	b.n	800468c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 faaa 	bl	8004ba8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fb31 	bl	8004cec <UART_CheckIdleState>
 800468a:	4603      	mov	r3, r0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004694:	b5b0      	push	{r4, r5, r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4bad      	ldr	r3, [pc, #692]	; (8004974 <UART_SetConfig+0x2e0>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	69f9      	ldr	r1, [r7, #28]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4aa2      	ldr	r2, [pc, #648]	; (8004978 <UART_SetConfig+0x2e4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	430a      	orrs	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a99      	ldr	r2, [pc, #612]	; (800497c <UART_SetConfig+0x2e8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d121      	bne.n	800475e <UART_SetConfig+0xca>
 800471a:	4b99      	ldr	r3, [pc, #612]	; (8004980 <UART_SetConfig+0x2ec>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b03      	cmp	r3, #3
 8004726:	d817      	bhi.n	8004758 <UART_SetConfig+0xc4>
 8004728:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0x9c>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004741 	.word	0x08004741
 8004734:	0800474d 	.word	0x0800474d
 8004738:	08004747 	.word	0x08004747
 800473c:	08004753 	.word	0x08004753
 8004740:	2301      	movs	r3, #1
 8004742:	76fb      	strb	r3, [r7, #27]
 8004744:	e0e7      	b.n	8004916 <UART_SetConfig+0x282>
 8004746:	2302      	movs	r3, #2
 8004748:	76fb      	strb	r3, [r7, #27]
 800474a:	e0e4      	b.n	8004916 <UART_SetConfig+0x282>
 800474c:	2304      	movs	r3, #4
 800474e:	76fb      	strb	r3, [r7, #27]
 8004750:	e0e1      	b.n	8004916 <UART_SetConfig+0x282>
 8004752:	2308      	movs	r3, #8
 8004754:	76fb      	strb	r3, [r7, #27]
 8004756:	e0de      	b.n	8004916 <UART_SetConfig+0x282>
 8004758:	2310      	movs	r3, #16
 800475a:	76fb      	strb	r3, [r7, #27]
 800475c:	e0db      	b.n	8004916 <UART_SetConfig+0x282>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a88      	ldr	r2, [pc, #544]	; (8004984 <UART_SetConfig+0x2f0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d132      	bne.n	80047ce <UART_SetConfig+0x13a>
 8004768:	4b85      	ldr	r3, [pc, #532]	; (8004980 <UART_SetConfig+0x2ec>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d828      	bhi.n	80047c8 <UART_SetConfig+0x134>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0xe8>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080047c9 	.word	0x080047c9
 8004784:	080047c9 	.word	0x080047c9
 8004788:	080047c9 	.word	0x080047c9
 800478c:	080047bd 	.word	0x080047bd
 8004790:	080047c9 	.word	0x080047c9
 8004794:	080047c9 	.word	0x080047c9
 8004798:	080047c9 	.word	0x080047c9
 800479c:	080047b7 	.word	0x080047b7
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047c9 	.word	0x080047c9
 80047ac:	080047c3 	.word	0x080047c3
 80047b0:	2300      	movs	r3, #0
 80047b2:	76fb      	strb	r3, [r7, #27]
 80047b4:	e0af      	b.n	8004916 <UART_SetConfig+0x282>
 80047b6:	2302      	movs	r3, #2
 80047b8:	76fb      	strb	r3, [r7, #27]
 80047ba:	e0ac      	b.n	8004916 <UART_SetConfig+0x282>
 80047bc:	2304      	movs	r3, #4
 80047be:	76fb      	strb	r3, [r7, #27]
 80047c0:	e0a9      	b.n	8004916 <UART_SetConfig+0x282>
 80047c2:	2308      	movs	r3, #8
 80047c4:	76fb      	strb	r3, [r7, #27]
 80047c6:	e0a6      	b.n	8004916 <UART_SetConfig+0x282>
 80047c8:	2310      	movs	r3, #16
 80047ca:	76fb      	strb	r3, [r7, #27]
 80047cc:	e0a3      	b.n	8004916 <UART_SetConfig+0x282>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6d      	ldr	r2, [pc, #436]	; (8004988 <UART_SetConfig+0x2f4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d120      	bne.n	800481a <UART_SetConfig+0x186>
 80047d8:	4b69      	ldr	r3, [pc, #420]	; (8004980 <UART_SetConfig+0x2ec>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d013      	beq.n	800480e <UART_SetConfig+0x17a>
 80047e6:	2b30      	cmp	r3, #48	; 0x30
 80047e8:	d814      	bhi.n	8004814 <UART_SetConfig+0x180>
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d009      	beq.n	8004802 <UART_SetConfig+0x16e>
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d810      	bhi.n	8004814 <UART_SetConfig+0x180>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <UART_SetConfig+0x168>
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d006      	beq.n	8004808 <UART_SetConfig+0x174>
 80047fa:	e00b      	b.n	8004814 <UART_SetConfig+0x180>
 80047fc:	2300      	movs	r3, #0
 80047fe:	76fb      	strb	r3, [r7, #27]
 8004800:	e089      	b.n	8004916 <UART_SetConfig+0x282>
 8004802:	2302      	movs	r3, #2
 8004804:	76fb      	strb	r3, [r7, #27]
 8004806:	e086      	b.n	8004916 <UART_SetConfig+0x282>
 8004808:	2304      	movs	r3, #4
 800480a:	76fb      	strb	r3, [r7, #27]
 800480c:	e083      	b.n	8004916 <UART_SetConfig+0x282>
 800480e:	2308      	movs	r3, #8
 8004810:	76fb      	strb	r3, [r7, #27]
 8004812:	e080      	b.n	8004916 <UART_SetConfig+0x282>
 8004814:	2310      	movs	r3, #16
 8004816:	76fb      	strb	r3, [r7, #27]
 8004818:	e07d      	b.n	8004916 <UART_SetConfig+0x282>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a5b      	ldr	r2, [pc, #364]	; (800498c <UART_SetConfig+0x2f8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d120      	bne.n	8004866 <UART_SetConfig+0x1d2>
 8004824:	4b56      	ldr	r3, [pc, #344]	; (8004980 <UART_SetConfig+0x2ec>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800482e:	2bc0      	cmp	r3, #192	; 0xc0
 8004830:	d013      	beq.n	800485a <UART_SetConfig+0x1c6>
 8004832:	2bc0      	cmp	r3, #192	; 0xc0
 8004834:	d814      	bhi.n	8004860 <UART_SetConfig+0x1cc>
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d009      	beq.n	800484e <UART_SetConfig+0x1ba>
 800483a:	2b80      	cmp	r3, #128	; 0x80
 800483c:	d810      	bhi.n	8004860 <UART_SetConfig+0x1cc>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <UART_SetConfig+0x1b4>
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d006      	beq.n	8004854 <UART_SetConfig+0x1c0>
 8004846:	e00b      	b.n	8004860 <UART_SetConfig+0x1cc>
 8004848:	2300      	movs	r3, #0
 800484a:	76fb      	strb	r3, [r7, #27]
 800484c:	e063      	b.n	8004916 <UART_SetConfig+0x282>
 800484e:	2302      	movs	r3, #2
 8004850:	76fb      	strb	r3, [r7, #27]
 8004852:	e060      	b.n	8004916 <UART_SetConfig+0x282>
 8004854:	2304      	movs	r3, #4
 8004856:	76fb      	strb	r3, [r7, #27]
 8004858:	e05d      	b.n	8004916 <UART_SetConfig+0x282>
 800485a:	2308      	movs	r3, #8
 800485c:	76fb      	strb	r3, [r7, #27]
 800485e:	e05a      	b.n	8004916 <UART_SetConfig+0x282>
 8004860:	2310      	movs	r3, #16
 8004862:	76fb      	strb	r3, [r7, #27]
 8004864:	e057      	b.n	8004916 <UART_SetConfig+0x282>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a49      	ldr	r2, [pc, #292]	; (8004990 <UART_SetConfig+0x2fc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d125      	bne.n	80048bc <UART_SetConfig+0x228>
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <UART_SetConfig+0x2ec>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487e:	d017      	beq.n	80048b0 <UART_SetConfig+0x21c>
 8004880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004884:	d817      	bhi.n	80048b6 <UART_SetConfig+0x222>
 8004886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488a:	d00b      	beq.n	80048a4 <UART_SetConfig+0x210>
 800488c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004890:	d811      	bhi.n	80048b6 <UART_SetConfig+0x222>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <UART_SetConfig+0x20a>
 8004896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489a:	d006      	beq.n	80048aa <UART_SetConfig+0x216>
 800489c:	e00b      	b.n	80048b6 <UART_SetConfig+0x222>
 800489e:	2300      	movs	r3, #0
 80048a0:	76fb      	strb	r3, [r7, #27]
 80048a2:	e038      	b.n	8004916 <UART_SetConfig+0x282>
 80048a4:	2302      	movs	r3, #2
 80048a6:	76fb      	strb	r3, [r7, #27]
 80048a8:	e035      	b.n	8004916 <UART_SetConfig+0x282>
 80048aa:	2304      	movs	r3, #4
 80048ac:	76fb      	strb	r3, [r7, #27]
 80048ae:	e032      	b.n	8004916 <UART_SetConfig+0x282>
 80048b0:	2308      	movs	r3, #8
 80048b2:	76fb      	strb	r3, [r7, #27]
 80048b4:	e02f      	b.n	8004916 <UART_SetConfig+0x282>
 80048b6:	2310      	movs	r3, #16
 80048b8:	76fb      	strb	r3, [r7, #27]
 80048ba:	e02c      	b.n	8004916 <UART_SetConfig+0x282>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a2d      	ldr	r2, [pc, #180]	; (8004978 <UART_SetConfig+0x2e4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d125      	bne.n	8004912 <UART_SetConfig+0x27e>
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <UART_SetConfig+0x2ec>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d4:	d017      	beq.n	8004906 <UART_SetConfig+0x272>
 80048d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048da:	d817      	bhi.n	800490c <UART_SetConfig+0x278>
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e0:	d00b      	beq.n	80048fa <UART_SetConfig+0x266>
 80048e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e6:	d811      	bhi.n	800490c <UART_SetConfig+0x278>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <UART_SetConfig+0x260>
 80048ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f0:	d006      	beq.n	8004900 <UART_SetConfig+0x26c>
 80048f2:	e00b      	b.n	800490c <UART_SetConfig+0x278>
 80048f4:	2300      	movs	r3, #0
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	e00d      	b.n	8004916 <UART_SetConfig+0x282>
 80048fa:	2302      	movs	r3, #2
 80048fc:	76fb      	strb	r3, [r7, #27]
 80048fe:	e00a      	b.n	8004916 <UART_SetConfig+0x282>
 8004900:	2304      	movs	r3, #4
 8004902:	76fb      	strb	r3, [r7, #27]
 8004904:	e007      	b.n	8004916 <UART_SetConfig+0x282>
 8004906:	2308      	movs	r3, #8
 8004908:	76fb      	strb	r3, [r7, #27]
 800490a:	e004      	b.n	8004916 <UART_SetConfig+0x282>
 800490c:	2310      	movs	r3, #16
 800490e:	76fb      	strb	r3, [r7, #27]
 8004910:	e001      	b.n	8004916 <UART_SetConfig+0x282>
 8004912:	2310      	movs	r3, #16
 8004914:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a17      	ldr	r2, [pc, #92]	; (8004978 <UART_SetConfig+0x2e4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	f040 8087 	bne.w	8004a30 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004922:	7efb      	ldrb	r3, [r7, #27]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d837      	bhi.n	8004998 <UART_SetConfig+0x304>
 8004928:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x29c>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004955 	.word	0x08004955
 8004934:	08004999 	.word	0x08004999
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004999 	.word	0x08004999
 8004940:	08004963 	.word	0x08004963
 8004944:	08004999 	.word	0x08004999
 8004948:	08004999 	.word	0x08004999
 800494c:	08004999 	.word	0x08004999
 8004950:	0800496b 	.word	0x0800496b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fe ffb2 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8004958:	6178      	str	r0, [r7, #20]
        break;
 800495a:	e022      	b.n	80049a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800495c:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <UART_SetConfig+0x300>)
 800495e:	617b      	str	r3, [r7, #20]
        break;
 8004960:	e01f      	b.n	80049a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7fe ff13 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8004966:	6178      	str	r0, [r7, #20]
        break;
 8004968:	e01b      	b.n	80049a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	617b      	str	r3, [r7, #20]
        break;
 8004970:	e017      	b.n	80049a2 <UART_SetConfig+0x30e>
 8004972:	bf00      	nop
 8004974:	efff69f3 	.word	0xefff69f3
 8004978:	40008000 	.word	0x40008000
 800497c:	40013800 	.word	0x40013800
 8004980:	40021000 	.word	0x40021000
 8004984:	40004400 	.word	0x40004400
 8004988:	40004800 	.word	0x40004800
 800498c:	40004c00 	.word	0x40004c00
 8004990:	40005000 	.word	0x40005000
 8004994:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	76bb      	strb	r3, [r7, #26]
        break;
 80049a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80f1 	beq.w	8004b8c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d305      	bcc.n	80049c6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d902      	bls.n	80049cc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	76bb      	strb	r3, [r7, #26]
 80049ca:	e0df      	b.n	8004b8c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	020b      	lsls	r3, r1, #8
 80049de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049e2:	0202      	lsls	r2, r0, #8
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	6849      	ldr	r1, [r1, #4]
 80049e8:	0849      	lsrs	r1, r1, #1
 80049ea:	4608      	mov	r0, r1
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	1814      	adds	r4, r2, r0
 80049f2:	eb43 0501 	adc.w	r5, r3, r1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	4620      	mov	r0, r4
 8004a02:	4629      	mov	r1, r5
 8004a04:	f7fb fbf2 	bl	80001ec <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a16:	d308      	bcc.n	8004a2a <UART_SetConfig+0x396>
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1e:	d204      	bcs.n	8004a2a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e0b0      	b.n	8004b8c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	76bb      	strb	r3, [r7, #26]
 8004a2e:	e0ad      	b.n	8004b8c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a38:	d15c      	bne.n	8004af4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d828      	bhi.n	8004a92 <UART_SetConfig+0x3fe>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x3b4>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004a93 	.word	0x08004a93
 8004a58:	08004a83 	.word	0x08004a83
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004a93 	.word	0x08004a93
 8004a64:	08004a93 	.word	0x08004a93
 8004a68:	08004a8b 	.word	0x08004a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7fe ff26 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8004a70:	6178      	str	r0, [r7, #20]
        break;
 8004a72:	e013      	b.n	8004a9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a74:	f7fe ff38 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 8004a78:	6178      	str	r0, [r7, #20]
        break;
 8004a7a:	e00f      	b.n	8004a9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a7c:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <UART_SetConfig+0x510>)
 8004a7e:	617b      	str	r3, [r7, #20]
        break;
 8004a80:	e00c      	b.n	8004a9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a82:	f7fe fe83 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8004a86:	6178      	str	r0, [r7, #20]
        break;
 8004a88:	e008      	b.n	8004a9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	617b      	str	r3, [r7, #20]
        break;
 8004a90:	e004      	b.n	8004a9c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	76bb      	strb	r3, [r7, #26]
        break;
 8004a9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d074      	beq.n	8004b8c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	005a      	lsls	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	441a      	add	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d916      	bls.n	8004aee <UART_SetConfig+0x45a>
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac6:	d212      	bcs.n	8004aee <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f023 030f 	bic.w	r3, r3, #15
 8004ad0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	89fb      	ldrh	r3, [r7, #14]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	89fa      	ldrh	r2, [r7, #14]
 8004aea:	60da      	str	r2, [r3, #12]
 8004aec:	e04e      	b.n	8004b8c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	76bb      	strb	r3, [r7, #26]
 8004af2:	e04b      	b.n	8004b8c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004af4:	7efb      	ldrb	r3, [r7, #27]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d827      	bhi.n	8004b4a <UART_SetConfig+0x4b6>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x46c>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	08004b4b 	.word	0x08004b4b
 8004b10:	08004b3b 	.word	0x08004b3b
 8004b14:	08004b4b 	.word	0x08004b4b
 8004b18:	08004b4b 	.word	0x08004b4b
 8004b1c:	08004b4b 	.word	0x08004b4b
 8004b20:	08004b43 	.word	0x08004b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe feca 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8004b28:	6178      	str	r0, [r7, #20]
        break;
 8004b2a:	e013      	b.n	8004b54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fe fedc 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 8004b30:	6178      	str	r0, [r7, #20]
        break;
 8004b32:	e00f      	b.n	8004b54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <UART_SetConfig+0x510>)
 8004b36:	617b      	str	r3, [r7, #20]
        break;
 8004b38:	e00c      	b.n	8004b54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fe fe27 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8004b3e:	6178      	str	r0, [r7, #20]
        break;
 8004b40:	e008      	b.n	8004b54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	617b      	str	r3, [r7, #20]
        break;
 8004b48:	e004      	b.n	8004b54 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	76bb      	strb	r3, [r7, #26]
        break;
 8004b52:	bf00      	nop
    }

    if (pclk != 0U)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d018      	beq.n	8004b8c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	085a      	lsrs	r2, r3, #1
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	441a      	add	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b0f      	cmp	r3, #15
 8004b74:	d908      	bls.n	8004b88 <UART_SetConfig+0x4f4>
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7c:	d204      	bcs.n	8004b88 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	e001      	b.n	8004b8c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b98:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	00f42400 	.word	0x00f42400

08004ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca6:	d10a      	bne.n	8004cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cfc:	f7fb ffac 	bl	8000c58 <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d10e      	bne.n	8004d2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f82d 	bl	8004d7e <UART_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e023      	b.n	8004d76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d10e      	bne.n	8004d5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f817 	bl	8004d7e <UART_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e00d      	b.n	8004d76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8e:	e05e      	b.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d05a      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d98:	f7fb ff5e 	bl	8000c58 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <UART_WaitOnFlagUntilTimeout+0x30>
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11b      	bne.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e043      	b.n	8004e6e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02c      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e02:	d124      	bne.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e0c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e1c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e00f      	b.n	8004e6e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d091      	beq.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e76:	b084      	sub	sp, #16
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	f107 001c 	add.w	r0, r7, #28
 8004e84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f92b 	bl	80050f0 <USB_CoreReset>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
 8004eb0:	e005      	b.n	8004ebe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eca:	b004      	add	sp, #16
 8004ecc:	4770      	bx	lr

08004ece <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 0201 	bic.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d106      	bne.n	8004f3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]
 8004f3c:	e00b      	b.n	8004f56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e001      	b.n	8004f56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e003      	b.n	8004f5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f56:	2032      	movs	r0, #50	; 0x32
 8004f58:	f7fb fe8a 	bl	8000c70 <HAL_Delay>

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	019b      	lsls	r3, r3, #6
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3301      	adds	r3, #1
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <USB_FlushTxFifo+0x48>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d901      	bls.n	8004f94 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e006      	b.n	8004fa2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d0f0      	beq.n	8004f82 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	00030d40 	.word	0x00030d40

08004fb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2210      	movs	r2, #16
 8004fc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <USB_FlushRxFifo+0x40>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e006      	b.n	8004fe6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d0f0      	beq.n	8004fc6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	00030d40 	.word	0x00030d40

08004ff8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	460b      	mov	r3, r1
 8005008:	71fb      	strb	r3, [r7, #7]
 800500a:	4613      	mov	r3, r2
 800500c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005016:	88bb      	ldrh	r3, [r7, #4]
 8005018:	3303      	adds	r3, #3
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e00f      	b.n	8005044 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	031a      	lsls	r2, r3, #12
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005030:	461a      	mov	r2, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	3304      	adds	r3, #4
 800503c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	3301      	adds	r3, #1
 8005042:	61bb      	str	r3, [r7, #24]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	429a      	cmp	r2, r3
 800504a:	d3eb      	bcc.n	8005024 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3724      	adds	r7, #36	; 0x24
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800505a:	b480      	push	{r7}
 800505c:	b089      	sub	sp, #36	; 0x24
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	4613      	mov	r3, r2
 8005066:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	3303      	adds	r3, #3
 8005074:	089b      	lsrs	r3, r3, #2
 8005076:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e00b      	b.n	8005096 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	601a      	str	r2, [r3, #0]
    pDest++;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3304      	adds	r3, #4
 800508e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	3301      	adds	r3, #1
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	429a      	cmp	r2, r3
 800509c:	d3ef      	bcc.n	800507e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800509e:	69fb      	ldr	r3, [r7, #28]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3724      	adds	r7, #36	; 0x24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f003 0301 	and.w	r3, r3, #1
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <USB_CoreReset+0x64>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e01b      	b.n	8005146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	daf2      	bge.n	80050fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f043 0201 	orr.w	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3301      	adds	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4a09      	ldr	r2, [pc, #36]	; (8005154 <USB_CoreReset+0x64>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d901      	bls.n	8005138 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e006      	b.n	8005146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d0f0      	beq.n	8005126 <USB_CoreReset+0x36>

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	00030d40 	.word	0x00030d40

08005158 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005158:	b084      	sub	sp, #16
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	f107 001c 	add.w	r0, r7, #28
 8005166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005174:	461a      	mov	r2, r3
 8005176:	2300      	movs	r3, #0
 8005178:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051a0:	f023 0304 	bic.w	r3, r3, #4
 80051a4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80051a6:	2110      	movs	r1, #16
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff fedd 	bl	8004f68 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ff00 	bl	8004fb4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e015      	b.n	80051e6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c6:	461a      	mov	r2, r3
 80051c8:	f04f 33ff 	mov.w	r3, #4294967295
 80051cc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051da:	461a      	mov	r2, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3301      	adds	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d3e5      	bcc.n	80051ba <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80051ee:	2101      	movs	r1, #1
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f893 	bl	800531c <USB_DriveVbus>

  HAL_Delay(200U);
 80051f6:	20c8      	movs	r0, #200	; 0xc8
 80051f8:	f7fb fd3a 	bl	8000c70 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f04f 32ff 	mov.w	r2, #4294967295
 8005208:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2280      	movs	r2, #128	; 0x80
 800520e:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <USB_HostInit+0xf0>)
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a0c      	ldr	r2, [pc, #48]	; (800524c <USB_HostInit+0xf4>)
 800521a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f043 0210 	orr.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	4b08      	ldr	r3, [pc, #32]	; (8005250 <USB_HostInit+0xf8>)
 8005230:	4313      	orrs	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005242:	b004      	add	sp, #16
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	00600080 	.word	0x00600080
 800524c:	004000e0 	.word	0x004000e0
 8005250:	a3200008 	.word	0xa3200008

08005254 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800528c:	4313      	orrs	r3, r2
 800528e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d107      	bne.n	80052a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800529c:	461a      	mov	r2, r3
 800529e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80052a2:	6053      	str	r3, [r2, #4]
 80052a4:	e009      	b.n	80052ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d106      	bne.n	80052ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b2:	461a      	mov	r2, r3
 80052b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80052b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80052f8:	2064      	movs	r0, #100	; 0x64
 80052fa:	f7fb fcb9 	bl	8000c70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800530c:	200a      	movs	r0, #10
 800530e:	f7fb fcaf 	bl	8000c70 <HAL_Delay>

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005340:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <USB_DriveVbus+0x44>
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d106      	bne.n	8005360 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800535a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800535e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d109      	bne.n	8005380 <USB_DriveVbus+0x64>
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800537a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800537e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	0c5b      	lsrs	r3, r3, #17
 80053ac:	f003 0303 	and.w	r3, r3, #3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	b29b      	uxth	r3, r3
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	70fb      	strb	r3, [r7, #3]
 80053f2:	460b      	mov	r3, r1
 80053f4:	70bb      	strb	r3, [r7, #2]
 80053f6:	4613      	mov	r3, r2
 80053f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	461a      	mov	r2, r3
 8005410:	f04f 33ff 	mov.w	r3, #4294967295
 8005414:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005416:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800541a:	2b03      	cmp	r3, #3
 800541c:	d867      	bhi.n	80054ee <USB_HC_Init+0x10e>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <USB_HC_Init+0x44>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	08005435 	.word	0x08005435
 8005428:	080054b1 	.word	0x080054b1
 800542c:	08005435 	.word	0x08005435
 8005430:	08005473 	.word	0x08005473
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	461a      	mov	r2, r3
 8005442:	f240 439d 	movw	r3, #1181	; 0x49d
 8005446:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005448:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800544c:	2b00      	cmp	r3, #0
 800544e:	da51      	bge.n	80054f4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	440a      	add	r2, r1
 8005466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800546a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005470:	e040      	b.n	80054f4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4413      	add	r3, r2
 800547a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547e:	461a      	mov	r2, r3
 8005480:	f240 639d 	movw	r3, #1693	; 0x69d
 8005484:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005486:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800548a:	2b00      	cmp	r3, #0
 800548c:	da34      	bge.n	80054f8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ac:	60d3      	str	r3, [r2, #12]
      }

      break;
 80054ae:	e023      	b.n	80054f8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054bc:	461a      	mov	r2, r3
 80054be:	f240 2325 	movw	r3, #549	; 0x225
 80054c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	da17      	bge.n	80054fc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80054ea:	60d3      	str	r3, [r2, #12]
      }
      break;
 80054ec:	e006      	b.n	80054fc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	77fb      	strb	r3, [r7, #31]
      break;
 80054f2:	e004      	b.n	80054fe <USB_HC_Init+0x11e>
      break;
 80054f4:	bf00      	nop
 80054f6:	e002      	b.n	80054fe <USB_HC_Init+0x11e>
      break;
 80054f8:	bf00      	nop
 80054fa:	e000      	b.n	80054fe <USB_HC_Init+0x11e>
      break;
 80054fc:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	2101      	movs	r1, #1
 800550e:	fa01 f303 	lsl.w	r3, r1, r3
 8005512:	6939      	ldr	r1, [r7, #16]
 8005514:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005518:	4313      	orrs	r3, r2
 800551a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005528:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800552c:	2b00      	cmp	r3, #0
 800552e:	da03      	bge.n	8005538 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005530:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e001      	b.n	800553c <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ff26 	bl	800538e <USB_GetHostSpeed>
 8005542:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005548:	2b02      	cmp	r3, #2
 800554a:	d106      	bne.n	800555a <USB_HC_Init+0x17a>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d003      	beq.n	800555a <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e001      	b.n	800555e <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800555e:	787b      	ldrb	r3, [r7, #1]
 8005560:	059b      	lsls	r3, r3, #22
 8005562:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005566:	78bb      	ldrb	r3, [r7, #2]
 8005568:	02db      	lsls	r3, r3, #11
 800556a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800556e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005570:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005574:	049b      	lsls	r3, r3, #18
 8005576:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800557a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800557c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800557e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005582:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	0159      	lsls	r1, r3, #5
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	440b      	add	r3, r1
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800559a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800559c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d10f      	bne.n	80055c4 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055c2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80055c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop

080055d0 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	785b      	ldrb	r3, [r3, #1]
 80055e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80055e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055e8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d018      	beq.n	8005624 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	8912      	ldrh	r2, [r2, #8]
 80055fa:	4413      	add	r3, r2
 80055fc:	3b01      	subs	r3, #1
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	8912      	ldrh	r2, [r2, #8]
 8005602:	fbb3 f3f2 	udiv	r3, r3, r2
 8005606:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005608:	8bfa      	ldrh	r2, [r7, #30]
 800560a:	8a7b      	ldrh	r3, [r7, #18]
 800560c:	429a      	cmp	r2, r3
 800560e:	d90b      	bls.n	8005628 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8005610:	8a7b      	ldrh	r3, [r7, #18]
 8005612:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005614:	8bfb      	ldrh	r3, [r7, #30]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	8912      	ldrh	r2, [r2, #8]
 800561a:	fb02 f203 	mul.w	r2, r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	611a      	str	r2, [r3, #16]
 8005622:	e001      	b.n	8005628 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005624:	2301      	movs	r3, #1
 8005626:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	78db      	ldrb	r3, [r3, #3]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005630:	8bfb      	ldrh	r3, [r7, #30]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	8912      	ldrh	r2, [r2, #8]
 8005636:	fb02 f203 	mul.w	r2, r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	611a      	str	r2, [r3, #16]
 800563e:	e003      	b.n	8005648 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005650:	8bfb      	ldrh	r3, [r7, #30]
 8005652:	04d9      	lsls	r1, r3, #19
 8005654:	4b59      	ldr	r3, [pc, #356]	; (80057bc <USB_HC_StartXfer+0x1ec>)
 8005656:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005658:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	7a9b      	ldrb	r3, [r3, #10]
 800565e:	075b      	lsls	r3, r3, #29
 8005660:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005664:	6979      	ldr	r1, [r7, #20]
 8005666:	0148      	lsls	r0, r1, #5
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	4401      	add	r1, r0
 800566c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005670:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005672:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	4413      	add	r3, r2
 8005694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056aa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	7c7b      	ldrb	r3, [r7, #17]
 80056bc:	075b      	lsls	r3, r3, #29
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	0148      	lsls	r0, r1, #5
 80056c2:	69b9      	ldr	r1, [r7, #24]
 80056c4:	4401      	add	r1, r0
 80056c6:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056e4:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	78db      	ldrb	r3, [r3, #3]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	e003      	b.n	8005700 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056fe:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005706:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	4413      	add	r3, r2
 8005710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005714:	461a      	mov	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	78db      	ldrb	r3, [r3, #3]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d147      	bne.n	80057b2 <USB_HC_StartXfer+0x1e2>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d043      	beq.n	80057b2 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	79db      	ldrb	r3, [r3, #7]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d830      	bhi.n	8005794 <USB_HC_StartXfer+0x1c4>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <USB_HC_StartXfer+0x168>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	08005749 	.word	0x08005749
 800573c:	0800576d 	.word	0x0800576d
 8005740:	08005749 	.word	0x08005749
 8005744:	0800576d 	.word	0x0800576d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	3303      	adds	r3, #3
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005752:	89fa      	ldrh	r2, [r7, #14]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	b29b      	uxth	r3, r3
 800575a:	429a      	cmp	r2, r3
 800575c:	d91c      	bls.n	8005798 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	619a      	str	r2, [r3, #24]
        }
        break;
 800576a:	e015      	b.n	8005798 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	3303      	adds	r3, #3
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005776:	89fa      	ldrh	r2, [r7, #14]
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	b29b      	uxth	r3, r3
 8005782:	429a      	cmp	r2, r3
 8005784:	d90a      	bls.n	800579c <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	619a      	str	r2, [r3, #24]
        }
        break;
 8005792:	e003      	b.n	800579c <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005794:	bf00      	nop
 8005796:	e002      	b.n	800579e <USB_HC_StartXfer+0x1ce>
        break;
 8005798:	bf00      	nop
 800579a:	e000      	b.n	800579e <USB_HC_StartXfer+0x1ce>
        break;
 800579c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68d9      	ldr	r1, [r3, #12]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	785a      	ldrb	r2, [r3, #1]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fc23 	bl	8004ff8 <USB_WritePacket>
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	1ff80000 	.word	0x1ff80000

080057c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	b29b      	uxth	r3, r3
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b089      	sub	sp, #36	; 0x24
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	0c9b      	lsrs	r3, r3, #18
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	0fdb      	lsrs	r3, r3, #31
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b20      	cmp	r3, #32
 8005830:	d104      	bne.n	800583c <USB_HC_Halt+0x5a>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	e0e8      	b.n	8005a0e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <USB_HC_Halt+0x66>
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d173      	bne.n	8005930 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	440a      	add	r2, r1
 800585e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005866:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	f040 80cb 	bne.w	8005a0c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d143      	bne.n	800590a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	440a      	add	r2, r1
 8005898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800589c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058e0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	3301      	adds	r3, #1
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ee:	d81d      	bhi.n	800592c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005906:	d0ec      	beq.n	80058e2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005908:	e080      	b.n	8005a0c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	440a      	add	r2, r1
 8005920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005928:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800592a:	e06f      	b.n	8005a0c <USB_HC_Halt+0x22a>
            break;
 800592c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800592e:	e06d      	b.n	8005a0c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	4413      	add	r3, r2
 8005938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	440a      	add	r2, r1
 8005946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800594e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d143      	bne.n	80059e8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	440a      	add	r2, r1
 8005976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800597e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	440a      	add	r2, r1
 8005996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800599e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059be:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059cc:	d81d      	bhi.n	8005a0a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e4:	d0ec      	beq.n	80059c0 <USB_HC_Halt+0x1de>
 80059e6:	e011      	b.n	8005a0c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e000      	b.n	8005a0c <USB_HC_Halt+0x22a>
          break;
 8005a0a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3724      	adds	r7, #36	; 0x24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b086      	sub	sp, #24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fa60 	bl	8004ef0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005a30:	2110      	movs	r1, #16
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fa98 	bl	8004f68 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fabb 	bl	8004fb4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e01f      	b.n	8005a84 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a5a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a62:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a6a:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a78:	461a      	mov	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	3301      	adds	r3, #1
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b0f      	cmp	r3, #15
 8005a88:	d9dc      	bls.n	8005a44 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	e034      	b.n	8005afa <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aa6:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aae:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ab6:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3301      	adds	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad6:	d80c      	bhi.n	8005af2 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aee:	d0ec      	beq.n	8005aca <USB_StopHost+0xb0>
 8005af0:	e000      	b.n	8005af4 <USB_StopHost+0xda>
        break;
 8005af2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	3301      	adds	r3, #1
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b0f      	cmp	r3, #15
 8005afe:	d9c7      	bls.n	8005a90 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b06:	461a      	mov	r2, r3
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff f9d9 	bl	8004ece <USB_EnableGlobalInt>

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005b26:	b590      	push	{r4, r7, lr}
 8005b28:	b08b      	sub	sp, #44	; 0x2c
 8005b2a:	af04      	add	r7, sp, #16
 8005b2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8005b36:	2300      	movs	r3, #0
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 ffa0 	bl	8007a82 <USBH_FindInterface>
 8005b42:	4603      	mov	r3, r0
 8005b44:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8005b46:	7c7b      	ldrb	r3, [r7, #17]
 8005b48:	2bff      	cmp	r3, #255	; 0xff
 8005b4a:	d101      	bne.n	8005b50 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e1a5      	b.n	8005e9c <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8005b56:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8005b5a:	f003 fd6d 	bl	8009638 <malloc>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 8005b72:	2302      	movs	r3, #2
 8005b74:	e192      	b.n	8005e9c <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8005b76:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f003 fd6b 	bl	8009658 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fc0f 	bl	80063a6 <USBH_AUDIO_FindAudioStreamingIN>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fcc9 	bl	8006524 <USBH_AUDIO_FindAudioStreamingOUT>
 8005b92:	4603      	mov	r3, r0
 8005b94:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d104      	bne.n	8005ba6 <USBH_AUDIO_InterfaceInit+0x80>
 8005b9c:	7abb      	ldrb	r3, [r7, #10]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d101      	bne.n	8005ba6 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e17a      	b.n	8005e9c <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]
 8005baa:	e0c6      	b.n	8005d3a <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8005bac:	7dfa      	ldrb	r2, [r7, #23]
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	440b      	add	r3, r1
 8005bba:	333e      	adds	r3, #62	; 0x3e
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d156      	bne.n	8005c70 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8005bc2:	7dfa      	ldrb	r2, [r7, #23]
 8005bc4:	68f9      	ldr	r1, [r7, #12]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	440b      	add	r3, r1
 8005bd0:	333a      	adds	r3, #58	; 0x3a
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	8aba      	ldrh	r2, [r7, #20]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d24a      	bcs.n	8005c70 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8005bda:	7dfa      	ldrb	r2, [r7, #23]
 8005bdc:	68f9      	ldr	r1, [r7, #12]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	440b      	add	r3, r1
 8005be8:	333a      	adds	r3, #58	; 0x3a
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8005bee:	7dfa      	ldrb	r2, [r7, #23]
 8005bf0:	68f9      	ldr	r1, [r7, #12]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	440b      	add	r3, r1
 8005bfc:	333d      	adds	r3, #61	; 0x3d
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8005c06:	7dfa      	ldrb	r2, [r7, #23]
 8005c08:	68f9      	ldr	r1, [r7, #12]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	440b      	add	r3, r1
 8005c14:	333c      	adds	r3, #60	; 0x3c
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8005c1e:	7dfa      	ldrb	r2, [r7, #23]
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3338      	adds	r3, #56	; 0x38
 8005c2e:	781a      	ldrb	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8005c36:	7dfa      	ldrb	r2, [r7, #23]
 8005c38:	68f9      	ldr	r1, [r7, #12]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	440b      	add	r3, r1
 8005c44:	333a      	adds	r3, #58	; 0x3a
 8005c46:	881a      	ldrh	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8005c4e:	7dfa      	ldrb	r2, [r7, #23]
 8005c50:	68f9      	ldr	r1, [r7, #12]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3340      	adds	r3, #64	; 0x40
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8005c70:	7dfa      	ldrb	r2, [r7, #23]
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	440b      	add	r3, r1
 8005c7e:	330c      	adds	r3, #12
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d156      	bne.n	8005d34 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8005c86:	7dfa      	ldrb	r2, [r7, #23]
 8005c88:	68f9      	ldr	r1, [r7, #12]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	440b      	add	r3, r1
 8005c94:	3308      	adds	r3, #8
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	8a7a      	ldrh	r2, [r7, #18]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d24a      	bcs.n	8005d34 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8005c9e:	7dfa      	ldrb	r2, [r7, #23]
 8005ca0:	68f9      	ldr	r1, [r7, #12]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	440b      	add	r3, r1
 8005cac:	3308      	adds	r3, #8
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8005cb2:	7dfa      	ldrb	r2, [r7, #23]
 8005cb4:	68f9      	ldr	r1, [r7, #12]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	440b      	add	r3, r1
 8005cc0:	330b      	adds	r3, #11
 8005cc2:	781a      	ldrb	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8005cca:	7dfa      	ldrb	r2, [r7, #23]
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	440b      	add	r3, r1
 8005cd8:	330a      	adds	r3, #10
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8005ce2:	7dfa      	ldrb	r2, [r7, #23]
 8005ce4:	68f9      	ldr	r1, [r7, #12]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	440b      	add	r3, r1
 8005cf0:	3306      	adds	r3, #6
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8005cfa:	7dfa      	ldrb	r2, [r7, #23]
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	440b      	add	r3, r1
 8005d08:	3308      	adds	r3, #8
 8005d0a:	881a      	ldrh	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8005d12:	7dfa      	ldrb	r2, [r7, #23]
 8005d14:	68f9      	ldr	r1, [r7, #12]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	440b      	add	r3, r1
 8005d20:	3340      	adds	r3, #64	; 0x40
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	3301      	adds	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	f67f af35 	bls.w	8005bac <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fcad 	bl	80066a2 <USBH_AUDIO_FindHIDControl>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fd25 	bl	80067a6 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d12e      	bne.n	8005dc4 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 ff68 	bl	8006c3c <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f003 f8d5 	bl	8008f24 <USBH_AllocPipe>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8005da2:	9202      	str	r2, [sp, #8]
 8005da4:	2201      	movs	r2, #1
 8005da6:	9201      	str	r2, [sp, #4]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	4623      	mov	r3, r4
 8005dac:	4602      	mov	r2, r0
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f003 f889 	bl	8008ec6 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f003 fb8d 	bl	80094de <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d12e      	bne.n	8005e2c <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 feac 	bl	8006b2c <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f003 f8a1 	bl	8008f24 <USBH_AllocPipe>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8005e0a:	9202      	str	r2, [sp, #8]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	4623      	mov	r3, r4
 8005e14:	4602      	mov	r2, r0
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f003 f855 	bl	8008ec6 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005e22:	2200      	movs	r2, #0
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f003 fb59 	bl	80094de <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d12b      	bne.n	8005e8e <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f003 f870 	bl	8008f24 <USBH_AllocPipe>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8005e6c:	9202      	str	r2, [sp, #8]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	9201      	str	r2, [sp, #4]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	4623      	mov	r3, r4
 8005e76:	4602      	mov	r2, r0
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f003 f824 	bl	8008ec6 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005e84:	2200      	movs	r2, #0
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f003 fb28 	bl	80094de <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd90      	pop	{r4, r7, pc}

08005ea4 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f003 f81b 	bl	8008f04 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f003 f846 	bl	8008f68 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d011      	beq.n	8005f12 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f003 f804 	bl	8008f04 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f003 f82f 	bl	8008f68 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d011      	beq.n	8005f40 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f002 ffed 	bl	8008f04 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f003 f818 	bl	8008f68 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f003 fb77 	bl	8009648 <free>
    phost->pActiveClass->pData = 0U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005f60:	2200      	movs	r2, #0
 8005f62:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	2b06      	cmp	r3, #6
 8005f92:	f200 80be 	bhi.w	8006112 <USBH_AUDIO_ClassRequest+0x1a2>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <USBH_AUDIO_ClassRequest+0x2c>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	080060fb 	.word	0x080060fb
 8005fa4:	08005fb9 	.word	0x08005fb9
 8005fa8:	08005ffb 	.word	0x08005ffb
 8005fac:	08006073 	.word	0x08006073
 8005fb0:	080060b7 	.word	0x080060b7
 8005fb4:	0800605f 	.word	0x0800605f
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d117      	bne.n	8005ff2 <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f002 fb2a 	bl	8008626 <USBH_SetInterface>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005fe2:	e098      	b.n	8006116 <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	f040 8095 	bne.w	8006116 <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 8005fec:	2302      	movs	r3, #2
 8005fee:	75fb      	strb	r3, [r7, #23]
    break;
 8005ff0:	e091      	b.n	8006116 <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	701a      	strb	r2, [r3, #0]
    break;
 8005ff8:	e08d      	b.n	8006116 <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006000:	2b01      	cmp	r3, #1
 8006002:	d125      	bne.n	8006050 <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800600a:	2200      	movs	r2, #0
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f002 fb09 	bl	8008626 <USBH_SetInterface>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d112      	bne.n	8006044 <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2207      	movs	r2, #7
 8006022:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2206      	movs	r2, #6
 8006028:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006042:	e06a      	b.n	800611a <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d167      	bne.n	800611a <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 800604a:	2302      	movs	r3, #2
 800604c:	75fb      	strb	r3, [r7, #23]
    break;
 800604e:	e064      	b.n	800611a <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2207      	movs	r2, #7
 8006054:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2206      	movs	r2, #6
 800605a:	705a      	strb	r2, [r3, #1]
    break;
 800605c:	e05d      	b.n	800611a <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f938 	bl	80062d4 <USBH_AUDIO_HandleCSRequest>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d159      	bne.n	800611e <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2205      	movs	r2, #5
 800606e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006070:	e055      	b.n	800611e <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8006078:	2b01      	cmp	r3, #1
 800607a:	d118      	bne.n	80060ae <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8006088:	461a      	mov	r2, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f002 facb 	bl	8008626 <USBH_SetInterface>
 8006090:	4603      	mov	r3, r0
 8006092:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2206      	movs	r2, #6
 800609e:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80060a0:	e03f      	b.n	8006122 <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d13c      	bne.n	8006122 <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 80060a8:	2302      	movs	r3, #2
 80060aa:	75fb      	strb	r3, [r7, #23]
    break;
 80060ac:	e039      	b.n	8006122 <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2206      	movs	r2, #6
 80060b2:	701a      	strb	r2, [r3, #0]
    break;
 80060b4:	e035      	b.n	8006122 <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d118      	bne.n	80060f2 <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80060cc:	461a      	mov	r2, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f002 faa9 	bl	8008626 <USBH_SetInterface>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d103      	bne.n	80060e6 <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2202      	movs	r2, #2
 80060e2:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80060e4:	e01f      	b.n	8006126 <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d11c      	bne.n	8006126 <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 80060ec:	2302      	movs	r3, #2
 80060ee:	75fb      	strb	r3, [r7, #23]
    break;
 80060f0:	e019      	b.n	8006126 <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2202      	movs	r2, #2
 80060f6:	701a      	strb	r2, [r3, #0]
    break;
 80060f8:	e015      	b.n	8006126 <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2201      	movs	r2, #1
 80060fe:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006106:	2102      	movs	r1, #2
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
    status  = USBH_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006110:	e00a      	b.n	8006128 <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 8006112:	bf00      	nop
 8006114:	e008      	b.n	8006128 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8006116:	bf00      	nop
 8006118:	e006      	b.n	8006128 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 800611a:	bf00      	nop
 800611c:	e004      	b.n	8006128 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8006126:	bf00      	nop
  }
  return status;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop

08006134 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	70fb      	strb	r3, [r7, #3]
 8006140:	4613      	mov	r3, r2
 8006142:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8006152:	2301      	movs	r3, #1
 8006154:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	3b04      	subs	r3, #4
 800615c:	2b04      	cmp	r3, #4
 800615e:	f200 80aa 	bhi.w	80062b6 <USBH_AUDIO_CSRequest+0x182>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <USBH_AUDIO_CSRequest+0x34>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	080061c5 	.word	0x080061c5
 800616c:	0800620b 	.word	0x0800620b
 8006170:	0800617d 	.word	0x0800617d
 8006174:	0800626b 	.word	0x0800626b
 8006178:	080062b1 	.word	0x080062b1
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	2302      	movs	r3, #2
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	78bb      	ldrb	r3, [r7, #2]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2302      	movs	r3, #2
 8006188:	2106      	movs	r1, #6
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fe94 	bl	8006eb8 <USBH_AC_GetCur>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b01      	cmp	r3, #1
 8006198:	f000 808f 	beq.w	80062ba <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	2204      	movs	r2, #4
 80061a0:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80061ae:	3302      	adds	r3, #2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	4313      	orrs	r3, r2
 80061b8:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 80061ba:	897a      	ldrh	r2, [r7, #10]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 80061c2:	e07a      	b.n	80062ba <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	2302      	movs	r3, #2
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	78bb      	ldrb	r3, [r7, #2]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	2302      	movs	r3, #2
 80061d0:	2106      	movs	r1, #6
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 f835 	bl	8007242 <USBH_AC_GetMin>
 80061d8:	4603      	mov	r3, r0
 80061da:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d06d      	beq.n	80062be <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2205      	movs	r2, #5
 80061e6:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80061f4:	3302      	adds	r3, #2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4313      	orrs	r3, r2
 80061fe:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8006200:	897a      	ldrh	r2, [r7, #10]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8006208:	e059      	b.n	80062be <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 800620a:	78fa      	ldrb	r2, [r7, #3]
 800620c:	2302      	movs	r3, #2
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	78bb      	ldrb	r3, [r7, #2]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2302      	movs	r3, #2
 8006216:	2106      	movs	r1, #6
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fee4 	bl	8006fe6 <USBH_AC_GetMax>
 800621e:	4603      	mov	r3, r0
 8006220:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d04c      	beq.n	80062c2 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2207      	movs	r2, #7
 800622c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800623a:	3302      	adds	r3, #2
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	b29b      	uxth	r3, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8006246:	897a      	ldrh	r2, [r7, #10]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800625a:	429a      	cmp	r2, r3
 800625c:	d231      	bcs.n	80062c2 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8006264:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8006268:	e02b      	b.n	80062c2 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	2302      	movs	r3, #2
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	78bb      	ldrb	r3, [r7, #2]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2302      	movs	r3, #2
 8006276:	2106      	movs	r1, #6
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 ff4b 	bl	8007114 <USBH_AC_GetRes>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d01e      	beq.n	80062c6 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2208      	movs	r2, #8
 800628c:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800629a:	3302      	adds	r3, #2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	4313      	orrs	r3, r2
 80062a4:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 80062a6:	89ba      	ldrh	r2, [r7, #12]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 80062ae:	e00a      	b.n	80062c6 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	75fb      	strb	r3, [r7, #23]
      break;
 80062b4:	e008      	b.n	80062c8 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 80062b6:	bf00      	nop
 80062b8:	e006      	b.n	80062c8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80062ba:	bf00      	nop
 80062bc:	e004      	b.n	80062c8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80062be:	bf00      	nop
 80062c0:	e002      	b.n	80062c8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80062c2:	bf00      	nop
 80062c4:	e000      	b.n	80062c8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80062c6:	bf00      	nop
  }
  return status;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop

080062d4 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80062fa:	461a      	mov	r2, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff19 	bl	8006134 <USBH_AUDIO_CSRequest>
 8006302:	4603      	mov	r3, r0
 8006304:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8006306:	7bbb      	ldrb	r3, [r7, #14]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d01c      	beq.n	8006346 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10c      	bne.n	8006330 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
 800632e:	e007      	b.n	8006340 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8006336:	3b01      	subs	r3, #1
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2206      	movs	r2, #6
 8006344:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8006346:	7bfb      	ldrb	r3, [r7, #15]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800636c:	2b01      	cmp	r3, #1
 800636e:	d102      	bne.n	8006376 <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 f8e7 	bl	8007544 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800637c:	2b01      	cmp	r3, #1
 800637e:	d102      	bne.n	8006386 <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f81d 	bl	80073c0 <USBH_AUDIO_InputStream>
  }

  return status;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 80063ae:	2302      	movs	r3, #2
 80063b0:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]
 80063c4:	e09e      	b.n	8006504 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	211a      	movs	r1, #26
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 3347 	addw	r3, r3, #839	; 0x347
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 8090 	bne.w	80064fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	211a      	movs	r1, #26
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80063ee:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	f040 8084 	bne.w	80064fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	211a      	movs	r1, #26
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	4413      	add	r3, r2
 8006402:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	b25b      	sxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	da77      	bge.n	80064fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	211a      	movs	r1, #26
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800641e:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8006420:	2b00      	cmp	r3, #0
 8006422:	d06c      	beq.n	80064fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	7bba      	ldrb	r2, [r7, #14]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	201a      	movs	r0, #26
 800642c:	fb00 f303 	mul.w	r3, r0, r3
 8006430:	440b      	add	r3, r1
 8006432:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006436:	7818      	ldrb	r0, [r3, #0]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	440b      	add	r3, r1
 8006444:	3306      	adds	r3, #6
 8006446:	4602      	mov	r2, r0
 8006448:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	7bba      	ldrb	r2, [r7, #14]
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	201a      	movs	r0, #26
 8006452:	fb00 f303 	mul.w	r3, r0, r3
 8006456:	440b      	add	r3, r1
 8006458:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800645c:	8818      	ldrh	r0, [r3, #0]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	440b      	add	r3, r1
 800646a:	3308      	adds	r3, #8
 800646c:	4602      	mov	r2, r0
 800646e:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	7bba      	ldrb	r2, [r7, #14]
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	201a      	movs	r0, #26
 8006478:	fb00 f303 	mul.w	r3, r0, r3
 800647c:	440b      	add	r3, r1
 800647e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006482:	7818      	ldrb	r0, [r3, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	440b      	add	r3, r1
 8006490:	330b      	adds	r3, #11
 8006492:	4602      	mov	r2, r0
 8006494:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	7bba      	ldrb	r2, [r7, #14]
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	201a      	movs	r0, #26
 800649e:	fb00 f303 	mul.w	r3, r0, r3
 80064a2:	440b      	add	r3, r1
 80064a4:	f203 3345 	addw	r3, r3, #837	; 0x345
 80064a8:	7818      	ldrb	r0, [r3, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	440b      	add	r3, r1
 80064b6:	330a      	adds	r3, #10
 80064b8:	4602      	mov	r2, r0
 80064ba:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	211a      	movs	r1, #26
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	f203 3352 	addw	r3, r3, #850	; 0x352
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	7bba      	ldrb	r2, [r7, #14]
 80064d0:	b298      	uxth	r0, r3
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	440b      	add	r3, r1
 80064de:	330e      	adds	r3, #14
 80064e0:	4602      	mov	r2, r0
 80064e2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 80064e4:	7bba      	ldrb	r2, [r7, #14]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	440b      	add	r3, r1
 80064f2:	330c      	adds	r3, #12
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	3301      	adds	r3, #1
 80064fc:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	3301      	adds	r3, #1
 8006502:	73fb      	strb	r3, [r7, #15]
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	2b09      	cmp	r3, #9
 8006508:	f67f af5d 	bls.w	80063c6 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006516:	7b7b      	ldrb	r3, [r7, #13]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 800652c:	2302      	movs	r3, #2
 800652e:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
 8006542:	e09e      	b.n	8006682 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	211a      	movs	r1, #26
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	4413      	add	r3, r2
 8006550:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b01      	cmp	r3, #1
 8006558:	f040 8090 	bne.w	800667c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	211a      	movs	r1, #26
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800656c:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800656e:	2b02      	cmp	r3, #2
 8006570:	f040 8084 	bne.w	800667c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	211a      	movs	r1, #26
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	b25b      	sxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	db77      	blt.n	800667c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	211a      	movs	r1, #26
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	4413      	add	r3, r2
 8006598:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800659c:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d06c      	beq.n	800667c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	7bba      	ldrb	r2, [r7, #14]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	201a      	movs	r0, #26
 80065aa:	fb00 f303 	mul.w	r3, r0, r3
 80065ae:	440b      	add	r3, r1
 80065b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065b4:	7818      	ldrb	r0, [r3, #0]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	440b      	add	r3, r1
 80065c2:	3338      	adds	r3, #56	; 0x38
 80065c4:	4602      	mov	r2, r0
 80065c6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	7bba      	ldrb	r2, [r7, #14]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	201a      	movs	r0, #26
 80065d0:	fb00 f303 	mul.w	r3, r0, r3
 80065d4:	440b      	add	r3, r1
 80065d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065da:	8818      	ldrh	r0, [r3, #0]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	440b      	add	r3, r1
 80065e8:	333a      	adds	r3, #58	; 0x3a
 80065ea:	4602      	mov	r2, r0
 80065ec:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	7bba      	ldrb	r2, [r7, #14]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	201a      	movs	r0, #26
 80065f6:	fb00 f303 	mul.w	r3, r0, r3
 80065fa:	440b      	add	r3, r1
 80065fc:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006600:	7818      	ldrb	r0, [r3, #0]
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	440b      	add	r3, r1
 800660e:	333d      	adds	r3, #61	; 0x3d
 8006610:	4602      	mov	r2, r0
 8006612:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	7bba      	ldrb	r2, [r7, #14]
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	201a      	movs	r0, #26
 800661c:	fb00 f303 	mul.w	r3, r0, r3
 8006620:	440b      	add	r3, r1
 8006622:	f203 3345 	addw	r3, r3, #837	; 0x345
 8006626:	7818      	ldrb	r0, [r3, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	440b      	add	r3, r1
 8006634:	333c      	adds	r3, #60	; 0x3c
 8006636:	4602      	mov	r2, r0
 8006638:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	211a      	movs	r1, #26
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	f203 3352 	addw	r3, r3, #850	; 0x352
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	7bba      	ldrb	r2, [r7, #14]
 800664e:	b298      	uxth	r0, r3
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	440b      	add	r3, r1
 800665c:	3340      	adds	r3, #64	; 0x40
 800665e:	4602      	mov	r2, r0
 8006660:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8006662:	7bba      	ldrb	r2, [r7, #14]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	440b      	add	r3, r1
 8006670:	333e      	adds	r3, #62	; 0x3e
 8006672:	2201      	movs	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	3301      	adds	r3, #1
 800667a:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	3301      	adds	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b09      	cmp	r3, #9
 8006686:	f67f af5d 	bls.w	8006544 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006694:	7b7b      	ldrb	r3, [r7, #13]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 80066aa:	2302      	movs	r3, #2
 80066ac:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 80066b8:	23ff      	movs	r3, #255	; 0xff
 80066ba:	2201      	movs	r2, #1
 80066bc:	2101      	movs	r1, #1
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 f9df 	bl	8007a82 <USBH_FindInterface>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	2bff      	cmp	r3, #255	; 0xff
 80066cc:	d002      	beq.n	80066d4 <USBH_AUDIO_FindHIDControl+0x32>
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	2b09      	cmp	r3, #9
 80066d2:	d901      	bls.n	80066d8 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 80066d4:	2302      	movs	r3, #2
 80066d6:	e062      	b.n	800679e <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	e05b      	b.n	8006796 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	211a      	movs	r1, #26
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 3347 	addw	r3, r3, #839	; 0x347
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d14d      	bne.n	8006790 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	211a      	movs	r1, #26
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006704:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006706:	2b00      	cmp	r3, #0
 8006708:	d042      	beq.n	8006790 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	211a      	movs	r1, #26
 8006710:	fb01 f303 	mul.w	r3, r1, r3
 8006714:	4413      	add	r3, r2
 8006716:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b25b      	sxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	da36      	bge.n	8006790 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	211a      	movs	r1, #26
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	4413      	add	r3, r2
 800672e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006732:	781a      	ldrb	r2, [r3, #0]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	211a      	movs	r1, #26
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	4413      	add	r3, r2
 8006746:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800674a:	881a      	ldrh	r2, [r3, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	211a      	movs	r1, #26
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	4413      	add	r3, r2
 800675e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	211a      	movs	r1, #26
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	4413      	add	r3, r2
 8006776:	f203 3352 	addw	r3, r3, #850	; 0x352
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73bb      	strb	r3, [r7, #14]
        break;
 800678e:	e005      	b.n	800679c <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	3301      	adds	r3, #1
 8006794:	73fb      	strb	r3, [r7, #15]
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b09      	cmp	r3, #9
 800679a:	d9a0      	bls.n	80066de <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 800679c:	7bbb      	ldrb	r3, [r7, #14]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b088      	sub	sp, #32
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	331c      	adds	r3, #28
 80067c8:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 80067ca:	2309      	movs	r3, #9
 80067cc:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 80067ee:	e03d      	b.n	800686c <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80067f0:	f107 030c 	add.w	r3, r7, #12
 80067f4:	4619      	mov	r1, r3
 80067f6:	69b8      	ldr	r0, [r7, #24]
 80067f8:	f002 f901 	bl	80089fe <USBH_GetNextDesc>
 80067fc:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b04      	cmp	r3, #4
 8006804:	d002      	beq.n	800680c <USBH_AUDIO_ParseCSDescriptors+0x66>
 8006806:	2b24      	cmp	r3, #36	; 0x24
 8006808:	d00f      	beq.n	800682a <USBH_AUDIO_ParseCSDescriptors+0x84>
 800680a:	e02e      	b.n	800686a <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	78db      	ldrb	r3, [r3, #3]
 8006816:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8006818:	7bfa      	ldrb	r2, [r7, #15]
 800681a:	7dbb      	ldrb	r3, [r7, #22]
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 f975 	bl	8007b0e <USBH_FindInterfaceIndex>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]
        break;
 8006828:	e020      	b.n	800686c <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006830:	7dba      	ldrb	r2, [r7, #22]
 8006832:	429a      	cmp	r2, r3
 8006834:	d81a      	bhi.n	800686c <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	2bff      	cmp	r3, #255	; 0xff
 800683a:	d002      	beq.n	8006842 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b09      	cmp	r3, #9
 8006840:	d902      	bls.n	8006848 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 8006842:	2302      	movs	r3, #2
 8006844:	77fb      	strb	r3, [r7, #31]
 8006846:	e00f      	b.n	8006868 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	211a      	movs	r1, #26
 8006854:	fb01 f303 	mul.w	r3, r1, r3
 8006858:	4413      	add	r3, r2
 800685a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	4619      	mov	r1, r3
 8006864:	f000 f80e 	bl	8006884 <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 8006868:	e000      	b.n	800686c <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 800686a:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 8006872:	89bb      	ldrh	r3, [r7, #12]
 8006874:	429a      	cmp	r2, r3
 8006876:	d8bb      	bhi.n	80067f0 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8006878:	7ffb      	ldrb	r3, [r7, #31]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	460b      	mov	r3, r1
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d163      	bne.n	8006960 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3302      	adds	r3, #2
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	3b01      	subs	r3, #1
 80068a0:	2b05      	cmp	r3, #5
 80068a2:	f200 8081 	bhi.w	80069a8 <ParseCSDescriptors+0x124>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <ParseCSDescriptors+0x28>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068c5 	.word	0x080068c5
 80068b0:	080068cd 	.word	0x080068cd
 80068b4:	080068e9 	.word	0x080068e9
 80068b8:	08006943 	.word	0x08006943
 80068bc:	08006925 	.word	0x08006925
 80068c0:	08006907 	.word	0x08006907
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	601a      	str	r2, [r3, #0]
        break;
 80068ca:	e070      	b.n	80069ae <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	b291      	uxth	r1, r2
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	605a      	str	r2, [r3, #4]
        break;
 80068e6:	e062      	b.n	80069ae <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	b291      	uxth	r1, r2
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	3304      	adds	r3, #4
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	605a      	str	r2, [r3, #4]
        break;
 8006904:	e053      	b.n	80069ae <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	b291      	uxth	r1, r2
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	3308      	adds	r3, #8
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]
        break;
 8006922:	e044      	b.n	80069ae <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	b291      	uxth	r1, r2
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	3310      	adds	r3, #16
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	605a      	str	r2, [r3, #4]
        break;
 8006940:	e035      	b.n	80069ae <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	b291      	uxth	r1, r2
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	330c      	adds	r3, #12
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	605a      	str	r2, [r3, #4]
        break;
 800695e:	e026      	b.n	80069ae <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d122      	bne.n	80069ac <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3302      	adds	r3, #2
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d002      	beq.n	8006976 <ParseCSDescriptors+0xf2>
 8006970:	2b02      	cmp	r3, #2
 8006972:	d00a      	beq.n	800698a <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8006974:	e01b      	b.n	80069ae <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	330a      	adds	r3, #10
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	605a      	str	r2, [r3, #4]
          break;
 8006988:	e011      	b.n	80069ae <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	b291      	uxth	r1, r2
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	330a      	adds	r3, #10
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	609a      	str	r2, [r3, #8]
          break;
 80069a6:	e002      	b.n	80069ae <ParseCSDescriptors+0x12a>
        break;
 80069a8:	bf00      	nop
 80069aa:	e000      	b.n	80069ae <ParseCSDescriptors+0x12a>
      }
    }
 80069ac:	bf00      	nop
  }

  return USBH_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]
 80069d6:	e01b      	b.n	8006a10 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	3322      	adds	r3, #34	; 0x22
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	791b      	ldrb	r3, [r3, #4]
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d10e      	bne.n	8006a0a <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	3322      	adds	r3, #34	; 0x22
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	78db      	ldrb	r3, [r3, #3]
 80069fa:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	041a      	lsls	r2, r3, #16
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a08:	e089      	b.n	8006b1e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d3dc      	bcc.n	80069d8 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
 8006a22:	e026      	b.n	8006a72 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	3326      	adds	r3, #38	; 0x26
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	795b      	ldrb	r3, [r3, #5]
 8006a32:	78fa      	ldrb	r2, [r7, #3]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d009      	beq.n	8006a4c <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	3326      	adds	r3, #38	; 0x26
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d10f      	bne.n	8006a6c <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	3326      	adds	r3, #38	; 0x26
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	461a      	mov	r2, r3
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a6a:	e058      	b.n	8006b1e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	73fb      	strb	r3, [r7, #15]
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d3d1      	bcc.n	8006a24 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006a80:	2300      	movs	r3, #0
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	e01c      	b.n	8006ac0 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	332a      	adds	r3, #42	; 0x2a
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	795b      	ldrb	r3, [r3, #5]
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d10f      	bne.n	8006aba <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	332a      	adds	r3, #42	; 0x2a
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	78db      	ldrb	r3, [r3, #3]
 8006aa8:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	461a      	mov	r2, r3
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8006ab8:	e031      	b.n	8006b1e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	3301      	adds	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d3db      	bcc.n	8006a86 <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
 8006ad2:	e01c      	b.n	8006b0e <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	331e      	adds	r3, #30
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	79db      	ldrb	r3, [r3, #7]
 8006ae2:	78fa      	ldrb	r2, [r7, #3]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d10f      	bne.n	8006b08 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	331e      	adds	r3, #30
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	78db      	ldrb	r3, [r3, #3]
 8006af6:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	461a      	mov	r2, r3
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b06:	e00a      	b.n	8006b1e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d3db      	bcc.n	8006ad4 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
	...

08006b2c <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006b34:	2300      	movs	r3, #0
 8006b36:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	75bb      	strb	r3, [r7, #22]
 8006b4a:	e02c      	b.n	8006ba6 <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8006b4c:	7dbb      	ldrb	r3, [r7, #22]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	331a      	adds	r3, #26
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	791b      	ldrb	r3, [r3, #4]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	7dbb      	ldrb	r3, [r7, #22]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	331a      	adds	r3, #26
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	795b      	ldrb	r3, [r3, #5]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	430b      	orrs	r3, r1
 8006b72:	f240 2201 	movw	r2, #513	; 0x201
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d112      	bne.n	8006ba0 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8006b7a:	7dbb      	ldrb	r3, [r7, #22]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	331a      	adds	r3, #26
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	78db      	ldrb	r3, [r3, #3]
 8006b88:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8006b8a:	7dbb      	ldrb	r3, [r7, #22]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	331a      	adds	r3, #26
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	79da      	ldrb	r2, [r3, #7]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8006b9e:	e009      	b.n	8006bb4 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006ba0:	7dbb      	ldrb	r3, [r7, #22]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	75bb      	strb	r3, [r7, #22]
 8006ba6:	7dbb      	ldrb	r3, [r7, #22]
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d3cb      	bcc.n	8006b4c <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff feff 	bl	80069bc <USBH_AUDIO_FindLinkedUnit>
 8006bbe:	60f8      	str	r0, [r7, #12]

    if (!value)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e034      	b.n	8006c34 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	0a1b      	lsrs	r3, r3, #8
 8006bd2:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8006bda:	7abb      	ldrb	r3, [r7, #10]
 8006bdc:	3b03      	subs	r3, #3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d81e      	bhi.n	8006c20 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c17 	.word	0x08006c17
 8006bec:	08006c03 	.word	0x08006c03
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	08006bf9 	.word	0x08006bf9
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	7afa      	ldrb	r2, [r7, #11]
 8006bfc:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8006c00:	e011      	b.n	8006c26 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	7afa      	ldrb	r2, [r7, #11]
 8006c06:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 8006c0a:	e00c      	b.n	8006c26 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	7afa      	ldrb	r2, [r7, #11]
 8006c10:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8006c14:	e007      	b.n	8006c26 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	7afa      	ldrb	r2, [r7, #11]
 8006c1a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 8006c1e:	e002      	b.n	8006c26 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 8006c20:	2302      	movs	r3, #2
 8006c22:	757b      	strb	r3, [r7, #21]
        break;
 8006c24:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006c26:	7abb      	ldrb	r3, [r7, #10]
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d002      	beq.n	8006c32 <USBH_AUDIO_BuildMicrophonePath+0x106>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1c0      	bne.n	8006bb4 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8006c32:	7d7b      	ldrb	r3, [r7, #21]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006c44:	2300      	movs	r3, #0
 8006c46:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006c56:	2300      	movs	r3, #0
 8006c58:	757b      	strb	r3, [r7, #21]
 8006c5a:	e02c      	b.n	8006cb6 <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8006c5c:	7d7b      	ldrb	r3, [r7, #21]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	331a      	adds	r3, #26
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	791b      	ldrb	r3, [r3, #4]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	7d7b      	ldrb	r3, [r7, #21]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	331a      	adds	r3, #26
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	795b      	ldrb	r3, [r3, #5]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	430b      	orrs	r3, r1
 8006c82:	f240 1201 	movw	r2, #257	; 0x101
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d112      	bne.n	8006cb0 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8006c8a:	7d7b      	ldrb	r3, [r7, #21]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	331a      	adds	r3, #26
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	78db      	ldrb	r3, [r3, #3]
 8006c98:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8006c9a:	7d7b      	ldrb	r3, [r7, #21]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	331a      	adds	r3, #26
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	79da      	ldrb	r2, [r3, #7]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8006cae:	e009      	b.n	8006cc4 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006cb0:	7d7b      	ldrb	r3, [r7, #21]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	757b      	strb	r3, [r7, #21]
 8006cb6:	7d7b      	ldrb	r3, [r7, #21]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d3cb      	bcc.n	8006c5c <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	75bb      	strb	r3, [r7, #22]
 8006cc8:	e011      	b.n	8006cee <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8006cca:	7dbb      	ldrb	r3, [r7, #22]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	3317      	adds	r3, #23
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	78db      	ldrb	r3, [r3, #3]
 8006cd8:	7dfa      	ldrb	r2, [r7, #23]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d104      	bne.n	8006ce8 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	7dba      	ldrb	r2, [r7, #22]
 8006ce2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 8006ce6:	e009      	b.n	8006cfc <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8006ce8:	7dbb      	ldrb	r3, [r7, #22]
 8006cea:	3301      	adds	r3, #1
 8006cec:	75bb      	strb	r3, [r7, #22]
 8006cee:	7dbb      	ldrb	r3, [r7, #22]
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d3e6      	bcc.n	8006cca <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fe5b 	bl	80069bc <USBH_AUDIO_FindLinkedUnit>
 8006d06:	60f8      	str	r0, [r7, #12]

    if (!value)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e053      	b.n	8006dba <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	0a1b      	lsrs	r3, r3, #8
 8006d1a:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	3b03      	subs	r3, #3
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d83c      	bhi.n	8006da4 <USBH_AUDIO_BuildHeadphonePath+0x168>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d5f 	.word	0x08006d5f
 8006d34:	08006d4b 	.word	0x08006d4b
 8006d38:	08006d55 	.word	0x08006d55
 8006d3c:	08006d41 	.word	0x08006d41
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	7dba      	ldrb	r2, [r7, #22]
 8006d44:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8006d48:	e030      	b.n	8006dac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	7dba      	ldrb	r2, [r7, #22]
 8006d4e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 8006d52:	e02b      	b.n	8006dac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	7dba      	ldrb	r2, [r7, #22]
 8006d58:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8006d5c:	e026      	b.n	8006dac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	7dba      	ldrb	r2, [r7, #22]
 8006d62:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8006d66:	7dbb      	ldrb	r3, [r7, #22]
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d818      	bhi.n	8006d9e <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8006d6c:	7dbb      	ldrb	r3, [r7, #22]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	331e      	adds	r3, #30
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	791b      	ldrb	r3, [r3, #4]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	7dbb      	ldrb	r3, [r7, #22]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	331e      	adds	r3, #30
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	795b      	ldrb	r3, [r3, #5]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	430b      	orrs	r3, r1
 8006d92:	f240 1203 	movw	r2, #259	; 0x103
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d007      	beq.n	8006daa <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e00d      	b.n	8006dba <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	753b      	strb	r3, [r7, #20]
        }
        break;
 8006da2:	e002      	b.n	8006daa <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 8006da4:	2302      	movs	r3, #2
 8006da6:	753b      	strb	r3, [r7, #20]
        break;
 8006da8:	e000      	b.n	8006dac <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 8006daa:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d002      	beq.n	8006db8 <USBH_AUDIO_BuildHeadphonePath+0x17c>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1a1      	bne.n	8006cfc <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 8006db8:	7d3b      	ldrb	r3, [r7, #20]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop

08006dc4 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	4608      	mov	r0, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	70fb      	strb	r3, [r7, #3]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	70bb      	strb	r3, [r7, #2]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	82fb      	strh	r3, [r7, #22]
 8006de2:	2300      	movs	r3, #0
 8006de4:	82bb      	strh	r3, [r7, #20]
 8006de6:	2300      	movs	r3, #0
 8006de8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d002      	beq.n	8006e04 <USBH_AC_SetCur+0x40>
 8006dfe:	2b06      	cmp	r3, #6
 8006e00:	d018      	beq.n	8006e34 <USBH_AC_SetCur+0x70>
 8006e02:	e035      	b.n	8006e70 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e08:	78db      	ldrb	r3, [r3, #3]
 8006e0a:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e10:	7afb      	ldrb	r3, [r7, #11]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	7abb      	ldrb	r3, [r7, #10]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e24:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	827b      	strh	r3, [r7, #18]
      break;
 8006e32:	e020      	b.n	8006e76 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006e34:	78bb      	ldrb	r3, [r7, #2]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	3322      	adds	r3, #34	; 0x22
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	78db      	ldrb	r3, [r3, #3]
 8006e42:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e44:	2300      	movs	r3, #0
 8006e46:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	7abb      	ldrb	r3, [r7, #10]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	4313      	orrs	r3, r2
 8006e56:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006e58:	787b      	ldrb	r3, [r7, #1]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	4313      	orrs	r3, r2
 8006e68:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e6c:	827b      	strh	r3, [r7, #18]
      break;
 8006e6e:	e002      	b.n	8006e76 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8006e70:	2302      	movs	r3, #2
 8006e72:	747b      	strb	r3, [r7, #17]
      break;
 8006e74:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006e76:	7c7b      	ldrb	r3, [r7, #17]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8006e7c:	7c7b      	ldrb	r3, [r7, #17]
 8006e7e:	e017      	b.n	8006eb0 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2221      	movs	r2, #33	; 0x21
 8006e84:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8afa      	ldrh	r2, [r7, #22]
 8006e90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8aba      	ldrh	r2, [r7, #20]
 8006e96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8a7a      	ldrh	r2, [r7, #18]
 8006e9c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006ea4:	8a7a      	ldrh	r2, [r7, #18]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fdc3 	bl	8008a34 <USBH_CtlReq>
 8006eae:	4603      	mov	r3, r0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	70fb      	strb	r3, [r7, #3]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70bb      	strb	r3, [r7, #2]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	82fb      	strh	r3, [r7, #22]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	82bb      	strh	r3, [r7, #20]
 8006eda:	2300      	movs	r3, #0
 8006edc:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	743b      	strb	r3, [r7, #16]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	2b06      	cmp	r3, #6
 8006ef8:	d01e      	beq.n	8006f38 <USBH_AC_GetCur+0x80>
 8006efa:	2b06      	cmp	r3, #6
 8006efc:	dc4f      	bgt.n	8006f9e <USBH_AC_GetCur+0xe6>
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d002      	beq.n	8006f08 <USBH_AC_GetCur+0x50>
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d036      	beq.n	8006f74 <USBH_AC_GetCur+0xbc>
 8006f06:	e04a      	b.n	8006f9e <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	78db      	ldrb	r3, [r3, #3]
 8006f0e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f14:	7c3b      	ldrb	r3, [r7, #16]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	4313      	orrs	r3, r2
 8006f22:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f28:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006f32:	2301      	movs	r3, #1
 8006f34:	827b      	strh	r3, [r7, #18]
      break;
 8006f36:	e035      	b.n	8006fa4 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006f38:	78bb      	ldrb	r3, [r7, #2]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	3322      	adds	r3, #34	; 0x22
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	78db      	ldrb	r3, [r3, #3]
 8006f46:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f4c:	7c3b      	ldrb	r3, [r7, #16]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006f5c:	787b      	ldrb	r3, [r7, #1]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f70:	827b      	strh	r3, [r7, #18]
      break;
 8006f72:	e017      	b.n	8006fa4 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f7a:	78db      	ldrb	r3, [r3, #3]
 8006f7c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f82:	7c3b      	ldrb	r3, [r7, #16]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	021b      	lsls	r3, r3, #8
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f96:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	827b      	strh	r3, [r7, #18]
      break;
 8006f9c:	e002      	b.n	8006fa4 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	747b      	strb	r3, [r7, #17]
      break;
 8006fa2:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006fa4:	7c7b      	ldrb	r3, [r7, #17]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8006faa:	7c7b      	ldrb	r3, [r7, #17]
 8006fac:	e017      	b.n	8006fde <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	22a1      	movs	r2, #161	; 0xa1
 8006fb2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2281      	movs	r2, #129	; 0x81
 8006fb8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8afa      	ldrh	r2, [r7, #22]
 8006fbe:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8aba      	ldrh	r2, [r7, #20]
 8006fc4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8a7a      	ldrh	r2, [r7, #18]
 8006fca:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006fd2:	8a7a      	ldrh	r2, [r7, #18]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fd2c 	bl	8008a34 <USBH_CtlReq>
 8006fdc:	4603      	mov	r3, r0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b086      	sub	sp, #24
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	4608      	mov	r0, r1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	70fb      	strb	r3, [r7, #3]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70bb      	strb	r3, [r7, #2]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	82fb      	strh	r3, [r7, #22]
 8007004:	2300      	movs	r3, #0
 8007006:	82bb      	strh	r3, [r7, #20]
 8007008:	2300      	movs	r3, #0
 800700a:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	743b      	strb	r3, [r7, #16]
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	2b06      	cmp	r3, #6
 8007026:	d01e      	beq.n	8007066 <USBH_AC_GetMax+0x80>
 8007028:	2b06      	cmp	r3, #6
 800702a:	dc4f      	bgt.n	80070cc <USBH_AC_GetMax+0xe6>
 800702c:	2b02      	cmp	r3, #2
 800702e:	d002      	beq.n	8007036 <USBH_AC_GetMax+0x50>
 8007030:	2b03      	cmp	r3, #3
 8007032:	d036      	beq.n	80070a2 <USBH_AC_GetMax+0xbc>
 8007034:	e04a      	b.n	80070cc <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	78db      	ldrb	r3, [r3, #3]
 800703c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007042:	7c3b      	ldrb	r3, [r7, #16]
 8007044:	b29b      	uxth	r3, r3
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	b29a      	uxth	r2, r3
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	b29b      	uxth	r3, r3
 800704e:	4313      	orrs	r3, r2
 8007050:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007056:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007060:	2301      	movs	r3, #1
 8007062:	827b      	strh	r3, [r7, #18]
      break;
 8007064:	e035      	b.n	80070d2 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007066:	78bb      	ldrb	r3, [r7, #2]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	3322      	adds	r3, #34	; 0x22
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	78db      	ldrb	r3, [r3, #3]
 8007074:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800707a:	7c3b      	ldrb	r3, [r7, #16]
 800707c:	b29b      	uxth	r3, r3
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	b29a      	uxth	r2, r3
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	b29b      	uxth	r3, r3
 8007086:	4313      	orrs	r3, r2
 8007088:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800708a:	787b      	ldrb	r3, [r7, #1]
 800708c:	b29b      	uxth	r3, r3
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	b29a      	uxth	r2, r3
 8007092:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007096:	b29b      	uxth	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800709c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800709e:	827b      	strh	r3, [r7, #18]
      break;
 80070a0:	e017      	b.n	80070d2 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a8:	78db      	ldrb	r3, [r3, #3]
 80070aa:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80070b0:	7c3b      	ldrb	r3, [r7, #16]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4313      	orrs	r3, r2
 80070be:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 80070c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070c4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80070c6:	2301      	movs	r3, #1
 80070c8:	827b      	strh	r3, [r7, #18]
      break;
 80070ca:	e002      	b.n	80070d2 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 80070cc:	2302      	movs	r3, #2
 80070ce:	747b      	strb	r3, [r7, #17]
      break;
 80070d0:	bf00      	nop
  }

  if (ret != USBH_OK)
 80070d2:	7c7b      	ldrb	r3, [r7, #17]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <USBH_AC_GetMax+0xf6>
  {
    return ret;
 80070d8:	7c7b      	ldrb	r3, [r7, #17]
 80070da:	e017      	b.n	800710c <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	22a1      	movs	r2, #161	; 0xa1
 80070e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2283      	movs	r2, #131	; 0x83
 80070e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8afa      	ldrh	r2, [r7, #22]
 80070ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	8aba      	ldrh	r2, [r7, #20]
 80070f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8a7a      	ldrh	r2, [r7, #18]
 80070f8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007100:	8a7a      	ldrh	r2, [r7, #18]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 fc95 	bl	8008a34 <USBH_CtlReq>
 800710a:	4603      	mov	r3, r0

}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	4608      	mov	r0, r1
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	4603      	mov	r3, r0
 8007124:	70fb      	strb	r3, [r7, #3]
 8007126:	460b      	mov	r3, r1
 8007128:	70bb      	strb	r3, [r7, #2]
 800712a:	4613      	mov	r3, r2
 800712c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	82fb      	strh	r3, [r7, #22]
 8007132:	2300      	movs	r3, #0
 8007134:	82bb      	strh	r3, [r7, #20]
 8007136:	2300      	movs	r3, #0
 8007138:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	743b      	strb	r3, [r7, #16]
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	2b06      	cmp	r3, #6
 8007154:	d01e      	beq.n	8007194 <USBH_AC_GetRes+0x80>
 8007156:	2b06      	cmp	r3, #6
 8007158:	dc4f      	bgt.n	80071fa <USBH_AC_GetRes+0xe6>
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USBH_AC_GetRes+0x50>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d036      	beq.n	80071d0 <USBH_AC_GetRes+0xbc>
 8007162:	e04a      	b.n	80071fa <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007168:	78db      	ldrb	r3, [r3, #3]
 800716a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007170:	7c3b      	ldrb	r3, [r7, #16]
 8007172:	b29b      	uxth	r3, r3
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	b29a      	uxth	r2, r3
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	b29b      	uxth	r3, r3
 800717c:	4313      	orrs	r3, r2
 800717e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8007180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007184:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2200      	movs	r2, #0
 800718a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 800718e:	2301      	movs	r3, #1
 8007190:	827b      	strh	r3, [r7, #18]
      break;
 8007192:	e035      	b.n	8007200 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007194:	78bb      	ldrb	r3, [r7, #2]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	3322      	adds	r3, #34	; 0x22
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	78db      	ldrb	r3, [r3, #3]
 80071a2:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80071a8:	7c3b      	ldrb	r3, [r7, #16]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	4313      	orrs	r3, r2
 80071b6:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80071b8:	787b      	ldrb	r3, [r7, #1]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80071ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071cc:	827b      	strh	r3, [r7, #18]
      break;
 80071ce:	e017      	b.n	8007200 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d6:	78db      	ldrb	r3, [r3, #3]
 80071d8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80071de:	7c3b      	ldrb	r3, [r7, #16]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4313      	orrs	r3, r2
 80071ec:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 80071ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071f2:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80071f4:	2301      	movs	r3, #1
 80071f6:	827b      	strh	r3, [r7, #18]
      break;
 80071f8:	e002      	b.n	8007200 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	747b      	strb	r3, [r7, #17]
      break;
 80071fe:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007200:	7c7b      	ldrb	r3, [r7, #17]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8007206:	7c7b      	ldrb	r3, [r7, #17]
 8007208:	e017      	b.n	800723a <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	22a1      	movs	r2, #161	; 0xa1
 800720e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2284      	movs	r2, #132	; 0x84
 8007214:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8afa      	ldrh	r2, [r7, #22]
 800721a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8aba      	ldrh	r2, [r7, #20]
 8007220:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	8a7a      	ldrh	r2, [r7, #18]
 8007226:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800722e:	8a7a      	ldrh	r2, [r7, #18]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fbfe 	bl	8008a34 <USBH_CtlReq>
 8007238:	4603      	mov	r3, r0

}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b086      	sub	sp, #24
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	4608      	mov	r0, r1
 800724c:	4611      	mov	r1, r2
 800724e:	461a      	mov	r2, r3
 8007250:	4603      	mov	r3, r0
 8007252:	70fb      	strb	r3, [r7, #3]
 8007254:	460b      	mov	r3, r1
 8007256:	70bb      	strb	r3, [r7, #2]
 8007258:	4613      	mov	r3, r2
 800725a:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	82fb      	strh	r3, [r7, #22]
 8007260:	2300      	movs	r3, #0
 8007262:	82bb      	strh	r3, [r7, #20]
 8007264:	2300      	movs	r3, #0
 8007266:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	743b      	strb	r3, [r7, #16]
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	2b06      	cmp	r3, #6
 8007282:	d01e      	beq.n	80072c2 <USBH_AC_GetMin+0x80>
 8007284:	2b06      	cmp	r3, #6
 8007286:	dc4f      	bgt.n	8007328 <USBH_AC_GetMin+0xe6>
 8007288:	2b02      	cmp	r3, #2
 800728a:	d002      	beq.n	8007292 <USBH_AC_GetMin+0x50>
 800728c:	2b03      	cmp	r3, #3
 800728e:	d036      	beq.n	80072fe <USBH_AC_GetMin+0xbc>
 8007290:	e04a      	b.n	8007328 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	78db      	ldrb	r3, [r3, #3]
 8007298:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800729e:	7c3b      	ldrb	r3, [r7, #16]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	4313      	orrs	r3, r2
 80072ac:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80072ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072b2:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80072bc:	2301      	movs	r3, #1
 80072be:	827b      	strh	r3, [r7, #18]
      break;
 80072c0:	e035      	b.n	800732e <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80072c2:	78bb      	ldrb	r3, [r7, #2]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	3322      	adds	r3, #34	; 0x22
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	78db      	ldrb	r3, [r3, #3]
 80072d0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80072d6:	7c3b      	ldrb	r3, [r7, #16]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	b29a      	uxth	r2, r3
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4313      	orrs	r3, r2
 80072e4:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80072e6:	787b      	ldrb	r3, [r7, #1]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	4313      	orrs	r3, r2
 80072f6:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80072f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072fa:	827b      	strh	r3, [r7, #18]
      break;
 80072fc:	e017      	b.n	800732e <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007304:	78db      	ldrb	r3, [r3, #3]
 8007306:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800730c:	7c3b      	ldrb	r3, [r7, #16]
 800730e:	b29b      	uxth	r3, r3
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	b29a      	uxth	r2, r3
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	b29b      	uxth	r3, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800731c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007320:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007322:	2301      	movs	r3, #1
 8007324:	827b      	strh	r3, [r7, #18]
      break;
 8007326:	e002      	b.n	800732e <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8007328:	2302      	movs	r3, #2
 800732a:	747b      	strb	r3, [r7, #17]
      break;
 800732c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800732e:	7c7b      	ldrb	r3, [r7, #17]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8007334:	7c7b      	ldrb	r3, [r7, #17]
 8007336:	e017      	b.n	8007368 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	22a1      	movs	r2, #161	; 0xa1
 800733c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2282      	movs	r2, #130	; 0x82
 8007342:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8afa      	ldrh	r2, [r7, #22]
 8007348:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	8aba      	ldrh	r2, [r7, #20]
 800734e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8a7a      	ldrh	r2, [r7, #18]
 8007354:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800735c:	8a7a      	ldrh	r2, [r7, #18]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fb67 	bl	8008a34 <USBH_CtlReq>
 8007366:	4603      	mov	r3, r0

}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	460b      	mov	r3, r1
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 800737e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007382:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8007384:	7afb      	ldrb	r3, [r7, #11]
 8007386:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8007388:	2303      	movs	r3, #3
 800738a:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2222      	movs	r2, #34	; 0x22
 8007390:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8afa      	ldrh	r2, [r7, #22]
 800739c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8aba      	ldrh	r2, [r7, #20]
 80073a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8a7a      	ldrh	r2, [r7, #18]
 80073a8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 80073aa:	8a7b      	ldrh	r3, [r7, #18]
 80073ac:	461a      	mov	r2, r3
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f001 fb3f 	bl	8008a34 <USBH_CtlReq>
 80073b6:	4603      	mov	r3, r0

}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]

  return status;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80073e4:	2301      	movs	r3, #1
 80073e6:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	78db      	ldrb	r3, [r3, #3]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	f200 8090 	bhi.w	8007522 <USBH_AUDIO_Control+0x146>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <USBH_AUDIO_Control+0x2c>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800741d 	.word	0x0800741d
 800740c:	08007471 	.word	0x08007471
 8007410:	08007523 	.word	0x08007523
 8007414:	080074ef 	.word	0x080074ef
 8007418:	08007509 	.word	0x08007509
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d17d      	bne.n	8007526 <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8007442:	b2da      	uxtb	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 fd01 	bl	8008e52 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2202      	movs	r2, #2
 800746c:	70da      	strb	r2, [r3, #3]
      }
      break;
 800746e:	e05a      	b.n	8007526 <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f002 f806 	bl	800948a <USBH_LL_GetURBState>
 800747e:	4603      	mov	r3, r0
 8007480:	2b01      	cmp	r3, #1
 8007482:	d114      	bne.n	80074ae <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007490:	3302      	adds	r3, #2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	b29b      	uxth	r3, r3
 8007498:	4313      	orrs	r3, r2
 800749a:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 800749c:	89fb      	ldrh	r3, [r7, #14]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f97a 	bl	800779c <USBH_AUDIO_SetControlAttribute>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d03d      	beq.n	800752a <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d333      	bcc.n	800752e <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fcb3 	bl	8008e52 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 80074ec:	e01f      	b.n	800752e <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 80074ee:	2101      	movs	r1, #1
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f953 	bl	800779c <USBH_AUDIO_SetControlAttribute>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d11a      	bne.n	8007532 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2201      	movs	r2, #1
 8007500:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007506:	e014      	b.n	8007532 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8007508:	2102      	movs	r1, #2
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f946 	bl	800779c <USBH_AUDIO_SetControlAttribute>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2201      	movs	r2, #1
 800751a:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007520:	e009      	b.n	8007536 <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8007522:	bf00      	nop
 8007524:	e008      	b.n	8007538 <USBH_AUDIO_Control+0x15c>
      break;
 8007526:	bf00      	nop
 8007528:	e006      	b.n	8007538 <USBH_AUDIO_Control+0x15c>
          break;
 800752a:	bf00      	nop
 800752c:	e004      	b.n	8007538 <USBH_AUDIO_Control+0x15c>
      break;
 800752e:	bf00      	nop
 8007530:	e002      	b.n	8007538 <USBH_AUDIO_Control+0x15c>
      break;
 8007532:	bf00      	nop
 8007534:	e000      	b.n	8007538 <USBH_AUDIO_Control+0x15c>
      break;
 8007536:	bf00      	nop
  }

  return status;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop

08007544 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	3b01      	subs	r3, #1
 8007560:	2b04      	cmp	r3, #4
 8007562:	d85c      	bhi.n	800761e <USBH_AUDIO_OutputStream+0xda>
 8007564:	a201      	add	r2, pc, #4	; (adr r2, 800756c <USBH_AUDIO_OutputStream+0x28>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	08007581 	.word	0x08007581
 8007570:	080075dd 	.word	0x080075dd
 8007574:	080075a7 	.word	0x080075a7
 8007578:	08007613 	.word	0x08007613
 800757c:	0800760d 	.word	0x0800760d
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	3317      	adds	r3, #23
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	79db      	ldrb	r3, [r3, #7]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2203      	movs	r2, #3
 800759a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800759c:	e044      	b.n	8007628 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2202      	movs	r2, #2
 80075a2:	709a      	strb	r2, [r3, #2]
      break;
 80075a4:	e040      	b.n	8007628 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	3317      	adds	r3, #23
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4413      	add	r3, r2
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	3308      	adds	r3, #8
 80075b8:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fed3 	bl	8007370 <USBH_AUDIO_SetEndpointControls>
 80075ca:	4603      	mov	r3, r0
 80075cc:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d126      	bne.n	8007622 <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2205      	movs	r2, #5
 80075d8:	709a      	strb	r2, [r3, #2]
      }
      break;
 80075da:	e022      	b.n	8007622 <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80075e2:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff febe 	bl	8007370 <USBH_AUDIO_SetEndpointControls>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d113      	bne.n	8007626 <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2205      	movs	r2, #5
 8007602:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f96e 	bl	80078e6 <USBH_AUDIO_FrequencySet>
      }
      break;
 800760a:	e00c      	b.n	8007626 <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007610:	e00a      	b.n	8007628 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f80e 	bl	8007634 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	75fb      	strb	r3, [r7, #23]
      break;
 800761c:	e004      	b.n	8007628 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 800761e:	bf00      	nop
 8007620:	e002      	b.n	8007628 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8007622:	bf00      	nop
 8007624:	e000      	b.n	8007628 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8007626:	bf00      	nop
  }

  return status;
 8007628:	7dfb      	ldrb	r3, [r7, #23]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop

08007634 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 800763c:	2301      	movs	r3, #1
 800763e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	791b      	ldrb	r3, [r3, #4]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d002      	beq.n	8007658 <USBH_AUDIO_Transmit+0x24>
 8007652:	2b02      	cmp	r3, #2
 8007654:	d033      	beq.n	80076be <USBH_AUDIO_Transmit+0x8a>
 8007656:	e096      	b.n	8007786 <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 8092 	bne.w	800778c <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2202      	movs	r2, #2
 8007678:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8007686:	461a      	mov	r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fbfe 	bl	8008e90 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800769a:	461a      	mov	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80076a8:	461a      	mov	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80076bc:	e066      	b.n	800778c <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fedf 	bl	800948a <USBH_LL_GetURBState>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d15e      	bne.n	8007790 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d352      	bcc.n	8007790 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d102      	bne.n	8007706 <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fe6b 	bl	80073dc <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007712:	429a      	cmp	r2, r3
 8007714:	d82b      	bhi.n	800776e <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 8007722:	461a      	mov	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 fbb0 	bl	8008e90 <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 800773c:	441a      	add	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007750:	441a      	add	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007764:	441a      	add	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 800776c:	e010      	b.n	8007790 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f04f 32ff 	mov.w	r2, #4294967295
 8007774:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2205      	movs	r2, #5
 800777c:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f8bb 	bl	80078fa <USBH_AUDIO_BufferEmptyCallback>
      break;
 8007784:	e004      	b.n	8007790 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 8007786:	2302      	movs	r3, #2
 8007788:	73fb      	strb	r3, [r7, #15]
      break;
 800778a:	e002      	b.n	8007792 <USBH_AUDIO_Transmit+0x15e>
      break;
 800778c:	bf00      	nop
 800778e:	e000      	b.n	8007792 <USBH_AUDIO_Transmit+0x15e>
      break;
 8007790:	bf00      	nop
  }
  return status;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 80077a8:	2301      	movs	r3, #1
 80077aa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d002      	beq.n	80077c2 <USBH_AUDIO_SetControlAttribute+0x26>
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d00b      	beq.n	80077d8 <USBH_AUDIO_SetControlAttribute+0x3c>
 80077c0:	e015      	b.n	80077ee <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80077ce:	441a      	add	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80077d6:	e00d      	b.n	80077f4 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80077e4:	1ad2      	subs	r2, r2, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80077ec:	e002      	b.n	80077f4 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 80077ee:	2302      	movs	r3, #2
 80077f0:	73fb      	strb	r3, [r7, #15]
      break;
 80077f2:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8007800:	429a      	cmp	r2, r3
 8007802:	d905      	bls.n	8007810 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800781c:	429a      	cmp	r2, r3
 800781e:	d205      	bcs.n	800782c <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 800783e:	b29b      	uxth	r3, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f827 	bl	8007894 <AUDIO_SetVolume>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d01e      	beq.n	800788a <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007852:	2b01      	cmp	r3, #1
 8007854:	d10e      	bne.n	8007874 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
 8007872:	e007      	b.n	8007884 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800787a:	3b01      	subs	r3, #1
 800787c:	b2da      	uxtb	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2206      	movs	r2, #6
 8007888:	705a      	strb	r2, [r3, #1]
  }


  return status;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af02      	add	r7, sp, #8
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	4608      	mov	r0, r1
 800789e:	4611      	mov	r1, r2
 80078a0:	461a      	mov	r2, r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	70fb      	strb	r3, [r7, #3]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70bb      	strb	r3, [r7, #2]
 80078aa:	4613      	mov	r3, r2
 80078ac:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80078ae:	2301      	movs	r3, #1
 80078b0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	883a      	ldrh	r2, [r7, #0]
 80078c0:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 80078c4:	78fa      	ldrb	r2, [r7, #3]
 80078c6:	2302      	movs	r3, #2
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	78bb      	ldrb	r3, [r7, #2]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	2302      	movs	r3, #2
 80078d0:	2106      	movs	r1, #6
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7ff fa76 	bl	8006dc4 <USBH_AC_SetCur>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	4613      	mov	r3, r2
 800791a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007922:	2302      	movs	r3, #2
 8007924:	e029      	b.n	800797a <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	79fa      	ldrb	r2, [r7, #7]
 800792a:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f81f 	bl	8007982 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f001 fc56 	bl	8009224 <USBH_LL_Init>

  return USBH_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e00a      	b.n	80079aa <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	2200      	movs	r2, #0
 80079a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3301      	adds	r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b0e      	cmp	r3, #14
 80079ae:	d9f1      	bls.n	8007994 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e009      	b.n	80079ca <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d0:	d3f1      	bcc.n	80079b6 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2240      	movs	r2, #64	; 0x40
 80079f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d017      	beq.n	8007a70 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10f      	bne.n	8007a6a <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007a50:	1c59      	adds	r1, r3, #1
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
 8007a68:	e004      	b.n	8007a74 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	e001      	b.n	8007a74 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a70:	2302      	movs	r3, #2
 8007a72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b087      	sub	sp, #28
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4603      	mov	r3, r0
 8007a92:	70fb      	strb	r3, [r7, #3]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70bb      	strb	r3, [r7, #2]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007aaa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007aac:	e025      	b.n	8007afa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	221a      	movs	r2, #26
 8007ab2:	fb02 f303 	mul.w	r3, r2, r3
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	3302      	adds	r3, #2
 8007abe:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	795b      	ldrb	r3, [r3, #5]
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d002      	beq.n	8007ad0 <USBH_FindInterface+0x4e>
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	2bff      	cmp	r3, #255	; 0xff
 8007ace:	d111      	bne.n	8007af4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ad4:	78ba      	ldrb	r2, [r7, #2]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d002      	beq.n	8007ae0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ada:	78bb      	ldrb	r3, [r7, #2]
 8007adc:	2bff      	cmp	r3, #255	; 0xff
 8007ade:	d109      	bne.n	8007af4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ae4:	787a      	ldrb	r2, [r7, #1]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d002      	beq.n	8007af0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007aea:	787b      	ldrb	r3, [r7, #1]
 8007aec:	2bff      	cmp	r3, #255	; 0xff
 8007aee:	d101      	bne.n	8007af4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	e006      	b.n	8007b02 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	3301      	adds	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	2b09      	cmp	r3, #9
 8007afe:	d9d6      	bls.n	8007aae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b00:	23ff      	movs	r3, #255	; 0xff
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b2e:	e017      	b.n	8007b60 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	221a      	movs	r2, #26
 8007b34:	fb02 f303 	mul.w	r3, r2, r3
 8007b38:	3308      	adds	r3, #8
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3302      	adds	r3, #2
 8007b40:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	789b      	ldrb	r3, [r3, #2]
 8007b46:	78fa      	ldrb	r2, [r7, #3]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d106      	bne.n	8007b5a <USBH_FindInterfaceIndex+0x4c>
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	78db      	ldrb	r3, [r3, #3]
 8007b50:	78ba      	ldrb	r2, [r7, #2]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d101      	bne.n	8007b5a <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	e006      	b.n	8007b68 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	2b09      	cmp	r3, #9
 8007b64:	d9e4      	bls.n	8007b30 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 8007b66:	23ff      	movs	r3, #255	; 0xff
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 fb8d 	bl	800929c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007b82:	2101      	movs	r1, #1
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 fc93 	bl	80094b0 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af04      	add	r7, sp, #16
 8007b9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d102      	bne.n	8007bb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b0b      	cmp	r3, #11
 8007bbe:	f200 81b5 	bhi.w	8007f2c <USBH_Process+0x398>
 8007bc2:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <USBH_Process+0x34>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007bf9 	.word	0x08007bf9
 8007bcc:	08007c2b 	.word	0x08007c2b
 8007bd0:	08007c93 	.word	0x08007c93
 8007bd4:	08007ec7 	.word	0x08007ec7
 8007bd8:	08007f2d 	.word	0x08007f2d
 8007bdc:	08007d37 	.word	0x08007d37
 8007be0:	08007e6d 	.word	0x08007e6d
 8007be4:	08007d6d 	.word	0x08007d6d
 8007be8:	08007d8d 	.word	0x08007d8d
 8007bec:	08007dad 	.word	0x08007dad
 8007bf0:	08007ddb 	.word	0x08007ddb
 8007bf4:	08007eaf 	.word	0x08007eaf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 8195 	beq.w	8007f30 <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007c0c:	20c8      	movs	r0, #200	; 0xc8
 8007c0e:	f001 fc96 	bl	800953e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fb9f 	bl	8009356 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c28:	e182      	b.n	8007f30 <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d107      	bne.n	8007c44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c42:	e184      	b.n	8007f4e <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c4e:	d914      	bls.n	8007c7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c56:	3301      	adds	r3, #1
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d903      	bls.n	8007c72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	220d      	movs	r2, #13
 8007c6e:	701a      	strb	r2, [r3, #0]
      break;
 8007c70:	e16d      	b.n	8007f4e <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
      break;
 8007c78:	e169      	b.n	8007f4e <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007c80:	f103 020a 	add.w	r2, r3, #10
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8007c8a:	200a      	movs	r0, #10
 8007c8c:	f001 fc57 	bl	800953e <USBH_Delay>
      break;
 8007c90:	e15d      	b.n	8007f4e <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007ca2:	2104      	movs	r1, #4
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007ca8:	2064      	movs	r0, #100	; 0x64
 8007caa:	f001 fc48 	bl	800953e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 fb2a 	bl	8009308 <USBH_LL_GetSpeed>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2205      	movs	r2, #5
 8007cc2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 f92c 	bl	8008f24 <USBH_AllocPipe>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	461a      	mov	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 f924 	bl	8008f24 <USBH_AllocPipe>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	7919      	ldrb	r1, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cf8:	b292      	uxth	r2, r2
 8007cfa:	9202      	str	r2, [sp, #8]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	9201      	str	r2, [sp, #4]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	4603      	mov	r3, r0
 8007d04:	2280      	movs	r2, #128	; 0x80
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 f8dd 	bl	8008ec6 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	7959      	ldrb	r1, [r3, #5]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d20:	b292      	uxth	r2, r2
 8007d22:	9202      	str	r2, [sp, #8]
 8007d24:	2200      	movs	r2, #0
 8007d26:	9201      	str	r2, [sp, #4]
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 f8c9 	bl	8008ec6 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d34:	e10b      	b.n	8007f4e <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f90e 	bl	8007f58 <USBH_HandleEnum>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f040 80f5 	bne.w	8007f34 <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d103      	bne.n	8007d64 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2208      	movs	r2, #8
 8007d60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d62:	e0e7      	b.n	8007f34 <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2207      	movs	r2, #7
 8007d68:	701a      	strb	r2, [r3, #0]
      break;
 8007d6a:	e0e3      	b.n	8007f34 <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 80e0 	beq.w	8007f38 <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2208      	movs	r2, #8
 8007d88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d8a:	e0d5      	b.n	8007f38 <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc22 	bl	80085e0 <USBH_SetCfg>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f040 80cc 	bne.w	8007f3c <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2209      	movs	r2, #9
 8007da8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007daa:	e0c7      	b.n	8007f3c <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007dba:	2101      	movs	r1, #1
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc59 	bl	8008674 <USBH_SetFeature>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 80bb 	bne.w	8007f40 <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	220a      	movs	r2, #10
 8007dce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007dd0:	e0b6      	b.n	8007f40 <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	220a      	movs	r2, #10
 8007dd6:	701a      	strb	r2, [r3, #0]
      break;
 8007dd8:	e0b2      	b.n	8007f40 <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80af 	beq.w	8007f44 <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
 8007df2:	e018      	b.n	8007e26 <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007df4:	7bfa      	ldrb	r2, [r7, #15]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e00:	791a      	ldrb	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d109      	bne.n	8007e20 <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e0c:	7bfa      	ldrb	r2, [r7, #15]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007e14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8007e1e:	e005      	b.n	8007e2c <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	3301      	adds	r3, #1
 8007e24:	73fb      	strb	r3, [r7, #15]
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0e3      	beq.n	8007df4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d016      	beq.n	8007e64 <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d109      	bne.n	8007e5c <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2206      	movs	r2, #6
 8007e4c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007e54:	2103      	movs	r1, #3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e5a:	e073      	b.n	8007f44 <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	220d      	movs	r2, #13
 8007e60:	701a      	strb	r2, [r3, #0]
      break;
 8007e62:	e06f      	b.n	8007f44 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	220d      	movs	r2, #13
 8007e68:	701a      	strb	r2, [r3, #0]
      break;
 8007e6a:	e06b      	b.n	8007f44 <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d017      	beq.n	8007ea6 <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d103      	bne.n	8007e96 <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	220b      	movs	r2, #11
 8007e92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e94:	e058      	b.n	8007f48 <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d154      	bne.n	8007f48 <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	220d      	movs	r2, #13
 8007ea2:	701a      	strb	r2, [r3, #0]
      break;
 8007ea4:	e050      	b.n	8007f48 <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	220d      	movs	r2, #13
 8007eaa:	701a      	strb	r2, [r3, #0]
      break;
 8007eac:	e04c      	b.n	8007f48 <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d049      	beq.n	8007f4c <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
      }
      break;
 8007ec4:	e042      	b.n	8007f4c <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff fd57 	bl	8007982 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007f02:	2105      	movs	r1, #5
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d107      	bne.n	8007f24 <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fe29 	bl	8007b74 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f22:	e014      	b.n	8007f4e <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 f9b9 	bl	800929c <USBH_LL_Start>
      break;
 8007f2a:	e010      	b.n	8007f4e <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 8007f2c:	bf00      	nop
 8007f2e:	e00e      	b.n	8007f4e <USBH_Process+0x3ba>
      break;
 8007f30:	bf00      	nop
 8007f32:	e00c      	b.n	8007f4e <USBH_Process+0x3ba>
      break;
 8007f34:	bf00      	nop
 8007f36:	e00a      	b.n	8007f4e <USBH_Process+0x3ba>
    break;
 8007f38:	bf00      	nop
 8007f3a:	e008      	b.n	8007f4e <USBH_Process+0x3ba>
      break;
 8007f3c:	bf00      	nop
 8007f3e:	e006      	b.n	8007f4e <USBH_Process+0x3ba>
      break;
 8007f40:	bf00      	nop
 8007f42:	e004      	b.n	8007f4e <USBH_Process+0x3ba>
      break;
 8007f44:	bf00      	nop
 8007f46:	e002      	b.n	8007f4e <USBH_Process+0x3ba>
      break;
 8007f48:	bf00      	nop
 8007f4a:	e000      	b.n	8007f4e <USBH_Process+0x3ba>
      break;
 8007f4c:	bf00      	nop
  }
  return USBH_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007f64:	2301      	movs	r3, #1
 8007f66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	f200 81c1 	bhi.w	80082f4 <USBH_HandleEnum+0x39c>
 8007f72:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <USBH_HandleEnum+0x20>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f99 	.word	0x08007f99
 8007f7c:	08008057 	.word	0x08008057
 8007f80:	080080c1 	.word	0x080080c1
 8007f84:	0800814f 	.word	0x0800814f
 8007f88:	080081b9 	.word	0x080081b9
 8007f8c:	08008229 	.word	0x08008229
 8007f90:	0800826f 	.word	0x0800826f
 8007f94:	080082b5 	.word	0x080082b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f98:	2108      	movs	r1, #8
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa50 	bl	8008440 <USBH_Get_DevDesc>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d130      	bne.n	800800c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	7919      	ldrb	r1, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007fce:	b292      	uxth	r2, r2
 8007fd0:	9202      	str	r2, [sp, #8]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	9201      	str	r2, [sp, #4]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2280      	movs	r2, #128	; 0x80
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 ff72 	bl	8008ec6 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7959      	ldrb	r1, [r3, #5]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	9202      	str	r2, [sp, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	9201      	str	r2, [sp, #4]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4603      	mov	r3, r0
 8008002:	2200      	movs	r2, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 ff5e 	bl	8008ec6 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800800a:	e175      	b.n	80082f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b03      	cmp	r3, #3
 8008010:	f040 8172 	bne.w	80082f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800801a:	3301      	adds	r3, #1
 800801c:	b2da      	uxtb	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800802a:	2b03      	cmp	r3, #3
 800802c:	d903      	bls.n	8008036 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	220d      	movs	r2, #13
 8008032:	701a      	strb	r2, [r3, #0]
      break;
 8008034:	e160      	b.n	80082f8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	795b      	ldrb	r3, [r3, #5]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 ff93 	bl	8008f68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	791b      	ldrb	r3, [r3, #4]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 ff8d 	bl	8008f68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	701a      	strb	r2, [r3, #0]
      break;
 8008054:	e150      	b.n	80082f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008056:	2112      	movs	r1, #18
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f9f1 	bl	8008440 <USBH_Get_DevDesc>
 800805e:	4603      	mov	r3, r0
 8008060:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800806e:	e145      	b.n	80082fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	2b03      	cmp	r3, #3
 8008074:	f040 8142 	bne.w	80082fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800807e:	3301      	adds	r3, #1
 8008080:	b2da      	uxtb	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800808e:	2b03      	cmp	r3, #3
 8008090:	d903      	bls.n	800809a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	220d      	movs	r2, #13
 8008096:	701a      	strb	r2, [r3, #0]
      break;
 8008098:	e130      	b.n	80082fc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	795b      	ldrb	r3, [r3, #5]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 ff61 	bl	8008f68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	791b      	ldrb	r3, [r3, #4]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 ff5b 	bl	8008f68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
      break;
 80080be:	e11d      	b.n	80082fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80080c0:	2101      	movs	r1, #1
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa68 	bl	8008598 <USBH_SetAddress>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d132      	bne.n	8008138 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80080d2:	2002      	movs	r0, #2
 80080d4:	f001 fa33 	bl	800953e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2203      	movs	r2, #3
 80080e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7919      	ldrb	r1, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080fa:	b292      	uxth	r2, r2
 80080fc:	9202      	str	r2, [sp, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	9201      	str	r2, [sp, #4]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	4603      	mov	r3, r0
 8008106:	2280      	movs	r2, #128	; 0x80
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fedc 	bl	8008ec6 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7959      	ldrb	r1, [r3, #5]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008122:	b292      	uxth	r2, r2
 8008124:	9202      	str	r2, [sp, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	9201      	str	r2, [sp, #4]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	4603      	mov	r3, r0
 800812e:	2200      	movs	r2, #0
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fec8 	bl	8008ec6 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008136:	e0e3      	b.n	8008300 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b03      	cmp	r3, #3
 800813c:	f040 80e0 	bne.w	8008300 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	220d      	movs	r2, #13
 8008144:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	705a      	strb	r2, [r3, #1]
      break;
 800814c:	e0d8      	b.n	8008300 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800814e:	2109      	movs	r1, #9
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f99d 	bl	8008490 <USBH_Get_CfgDesc>
 8008156:	4603      	mov	r3, r0
 8008158:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d103      	bne.n	8008168 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2204      	movs	r2, #4
 8008164:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008166:	e0cd      	b.n	8008304 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b03      	cmp	r3, #3
 800816c:	f040 80ca 	bne.w	8008304 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008176:	3301      	adds	r3, #1
 8008178:	b2da      	uxtb	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008186:	2b03      	cmp	r3, #3
 8008188:	d903      	bls.n	8008192 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	220d      	movs	r2, #13
 800818e:	701a      	strb	r2, [r3, #0]
      break;
 8008190:	e0b8      	b.n	8008304 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	795b      	ldrb	r3, [r3, #5]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fee5 	bl	8008f68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	791b      	ldrb	r3, [r3, #4]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fedf 	bl	8008f68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
      break;
 80081b6:	e0a5      	b.n	8008304 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f965 	bl	8008490 <USBH_Get_CfgDesc>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2205      	movs	r2, #5
 80081d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081d6:	e097      	b.n	8008308 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b03      	cmp	r3, #3
 80081dc:	f040 8094 	bne.w	8008308 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081e6:	3301      	adds	r3, #1
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d903      	bls.n	8008202 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	220d      	movs	r2, #13
 80081fe:	701a      	strb	r2, [r3, #0]
      break;
 8008200:	e082      	b.n	8008308 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	795b      	ldrb	r3, [r3, #5]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fead 	bl	8008f68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	791b      	ldrb	r3, [r3, #4]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fea7 	bl	8008f68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
      break;
 8008226:	e06f      	b.n	8008308 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800822e:	2b00      	cmp	r3, #0
 8008230:	d019      	beq.n	8008266 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800823e:	23ff      	movs	r3, #255	; 0xff
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f949 	bl	80084d8 <USBH_Get_StringDesc>
 8008246:	4603      	mov	r3, r0
 8008248:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2206      	movs	r2, #6
 8008254:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008256:	e059      	b.n	800830c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	2b03      	cmp	r3, #3
 800825c:	d156      	bne.n	800830c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2206      	movs	r2, #6
 8008262:	705a      	strb	r2, [r3, #1]
      break;
 8008264:	e052      	b.n	800830c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2206      	movs	r2, #6
 800826a:	705a      	strb	r2, [r3, #1]
      break;
 800826c:	e04e      	b.n	800830c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008274:	2b00      	cmp	r3, #0
 8008276:	d019      	beq.n	80082ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008284:	23ff      	movs	r3, #255	; 0xff
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f926 	bl	80084d8 <USBH_Get_StringDesc>
 800828c:	4603      	mov	r3, r0
 800828e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2207      	movs	r2, #7
 800829a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800829c:	e038      	b.n	8008310 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d135      	bne.n	8008310 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2207      	movs	r2, #7
 80082a8:	705a      	strb	r2, [r3, #1]
      break;
 80082aa:	e031      	b.n	8008310 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2207      	movs	r2, #7
 80082b0:	705a      	strb	r2, [r3, #1]
      break;
 80082b2:	e02d      	b.n	8008310 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d017      	beq.n	80082ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082ca:	23ff      	movs	r3, #255	; 0xff
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f903 	bl	80084d8 <USBH_Get_StringDesc>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80082e0:	e018      	b.n	8008314 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d115      	bne.n	8008314 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
      break;
 80082ec:	e012      	b.n	8008314 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
      break;
 80082f2:	e00f      	b.n	8008314 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80082f4:	bf00      	nop
 80082f6:	e00e      	b.n	8008316 <USBH_HandleEnum+0x3be>
      break;
 80082f8:	bf00      	nop
 80082fa:	e00c      	b.n	8008316 <USBH_HandleEnum+0x3be>
      break;
 80082fc:	bf00      	nop
 80082fe:	e00a      	b.n	8008316 <USBH_HandleEnum+0x3be>
      break;
 8008300:	bf00      	nop
 8008302:	e008      	b.n	8008316 <USBH_HandleEnum+0x3be>
      break;
 8008304:	bf00      	nop
 8008306:	e006      	b.n	8008316 <USBH_HandleEnum+0x3be>
      break;
 8008308:	bf00      	nop
 800830a:	e004      	b.n	8008316 <USBH_HandleEnum+0x3be>
      break;
 800830c:	bf00      	nop
 800830e:	e002      	b.n	8008316 <USBH_HandleEnum+0x3be>
      break;
 8008310:	bf00      	nop
 8008312:	e000      	b.n	8008316 <USBH_HandleEnum+0x3be>
      break;
 8008314:	bf00      	nop
  }
  return Status;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800834c:	1c5a      	adds	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f804 	bl	8008362 <USBH_HandleSof>
}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b0b      	cmp	r3, #11
 8008372:	d10a      	bne.n	800838a <USBH_HandleSof+0x28>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
  }
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80083a2:	bf00      	nop
}
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80083be:	bf00      	nop
}
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 ff5a 	bl	80092d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	791b      	ldrb	r3, [r3, #4]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fd9f 	bl	8008f68 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	795b      	ldrb	r3, [r3, #5]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fd99 	bl	8008f68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af02      	add	r7, sp, #8
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	b29b      	uxth	r3, r3
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800845e:	2100      	movs	r1, #0
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f864 	bl	800852e <USBH_GetDescriptor>
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800847c:	78fa      	ldrb	r2, [r7, #3]
 800847e:	b292      	uxth	r2, r2
 8008480:	4619      	mov	r1, r3
 8008482:	f000 f91b 	bl	80086bc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008486:	7bfb      	ldrb	r3, [r7, #15]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af02      	add	r7, sp, #8
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	331c      	adds	r3, #28
 80084a0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80084a2:	887b      	ldrh	r3, [r7, #2]
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084ac:	2100      	movs	r1, #0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f83d 	bl	800852e <USBH_GetDescriptor>
 80084b4:	4603      	mov	r3, r0
 80084b6:	72fb      	strb	r3, [r7, #11]
 80084b8:	7afb      	ldrb	r3, [r7, #11]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d107      	bne.n	80084ce <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80084c4:	887a      	ldrh	r2, [r7, #2]
 80084c6:	68f9      	ldr	r1, [r7, #12]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 f967 	bl	800879c <USBH_ParseCfgDesc>
  }

  return status;
 80084ce:	7afb      	ldrb	r3, [r7, #11]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	461a      	mov	r2, r3
 80084e4:	460b      	mov	r3, r1
 80084e6:	72fb      	strb	r3, [r7, #11]
 80084e8:	4613      	mov	r3, r2
 80084ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80084f4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80084fc:	893b      	ldrh	r3, [r7, #8]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	460b      	mov	r3, r1
 8008502:	2100      	movs	r1, #0
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 f812 	bl	800852e <USBH_GetDescriptor>
 800850a:	4603      	mov	r3, r0
 800850c:	75fb      	strb	r3, [r7, #23]
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d107      	bne.n	8008524 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800851a:	893a      	ldrh	r2, [r7, #8]
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fa3a 	bl	8008998 <USBH_ParseStringDesc>
  }

  return status;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	72fb      	strb	r3, [r7, #11]
 800853c:	4613      	mov	r3, r2
 800853e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	789b      	ldrb	r3, [r3, #2]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d11c      	bne.n	8008582 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800854e:	b2da      	uxtb	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2206      	movs	r2, #6
 8008558:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	893a      	ldrh	r2, [r7, #8]
 800855e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008560:	893b      	ldrh	r3, [r7, #8]
 8008562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800856a:	d104      	bne.n	8008576 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f240 4209 	movw	r2, #1033	; 0x409
 8008572:	829a      	strh	r2, [r3, #20]
 8008574:	e002      	b.n	800857c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8b3a      	ldrh	r2, [r7, #24]
 8008580:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008582:	8b3b      	ldrh	r3, [r7, #24]
 8008584:	461a      	mov	r2, r3
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fa53 	bl	8008a34 <USBH_CtlReq>
 800858e:	4603      	mov	r3, r0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	789b      	ldrb	r3, [r3, #2]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d10f      	bne.n	80085cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2205      	movs	r2, #5
 80085b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80085cc:	2200      	movs	r2, #0
 80085ce:	2100      	movs	r1, #0
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fa2f 	bl	8008a34 <USBH_CtlReq>
 80085d6:	4603      	mov	r3, r0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	789b      	ldrb	r3, [r3, #2]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d10e      	bne.n	8008612 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2209      	movs	r2, #9
 80085fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	887a      	ldrh	r2, [r7, #2]
 8008604:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008612:	2200      	movs	r2, #0
 8008614:	2100      	movs	r1, #0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fa0c 	bl	8008a34 <USBH_CtlReq>
 800861c:	4603      	mov	r3, r0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
 8008632:	4613      	mov	r3, r2
 8008634:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	789b      	ldrb	r3, [r3, #2]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d110      	bne.n	8008660 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	220b      	movs	r2, #11
 8008648:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800864a:	78bb      	ldrb	r3, [r7, #2]
 800864c:	b29a      	uxth	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	b29a      	uxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008660:	2200      	movs	r2, #0
 8008662:	2100      	movs	r1, #0
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f9e5 	bl	8008a34 <USBH_CtlReq>
 800866a:	4603      	mov	r3, r0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	789b      	ldrb	r3, [r3, #2]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d10f      	bne.n	80086a8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2203      	movs	r2, #3
 8008692:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f9c1 	bl	8008a34 <USBH_CtlReq>
 80086b2:	4603      	mov	r3, r0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	781a      	ldrb	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	785a      	ldrb	r2, [r3, #1]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	3302      	adds	r3, #2
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	3303      	adds	r3, #3
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	791a      	ldrb	r2, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	795a      	ldrb	r2, [r3, #5]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	799a      	ldrb	r2, [r3, #6]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	79da      	ldrb	r2, [r3, #7]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	2b08      	cmp	r3, #8
 800871a:	d939      	bls.n	8008790 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	3308      	adds	r3, #8
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	b29a      	uxth	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	3309      	adds	r3, #9
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	b29b      	uxth	r3, r3
 8008730:	4313      	orrs	r3, r2
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	330a      	adds	r3, #10
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b29a      	uxth	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	330b      	adds	r3, #11
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	b29b      	uxth	r3, r3
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	b29b      	uxth	r3, r3
 800874c:	4313      	orrs	r3, r2
 800874e:	b29a      	uxth	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	330c      	adds	r3, #12
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	b29a      	uxth	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	330d      	adds	r3, #13
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	021b      	lsls	r3, r3, #8
 8008766:	b29b      	uxth	r3, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	7b9a      	ldrb	r2, [r3, #14]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	7bda      	ldrb	r2, [r3, #15]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	7c1a      	ldrb	r2, [r3, #16]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	7c5a      	ldrb	r2, [r3, #17]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	745a      	strb	r2, [r3, #17]
  }
}
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	; 0x28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	781a      	ldrb	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	785a      	ldrb	r2, [r3, #1]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	3302      	adds	r3, #2
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	3303      	adds	r3, #3
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	4313      	orrs	r3, r2
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	791a      	ldrb	r2, [r3, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	795a      	ldrb	r2, [r3, #5]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	799a      	ldrb	r2, [r3, #6]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	79da      	ldrb	r2, [r3, #7]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	7a1a      	ldrb	r2, [r3, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008812:	88fb      	ldrh	r3, [r7, #6]
 8008814:	2b09      	cmp	r3, #9
 8008816:	d95f      	bls.n	80088d8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008818:	2309      	movs	r3, #9
 800881a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008820:	e051      	b.n	80088c6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008822:	f107 0316 	add.w	r3, r7, #22
 8008826:	4619      	mov	r1, r3
 8008828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800882a:	f000 f8e8 	bl	80089fe <USBH_GetNextDesc>
 800882e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	785b      	ldrb	r3, [r3, #1]
 8008834:	2b04      	cmp	r3, #4
 8008836:	d146      	bne.n	80088c6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800883c:	221a      	movs	r2, #26
 800883e:	fb02 f303 	mul.w	r3, r2, r3
 8008842:	3308      	adds	r3, #8
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	3302      	adds	r3, #2
 800884a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800884c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800884e:	69f8      	ldr	r0, [r7, #28]
 8008850:	f000 f846 	bl	80088e0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800885a:	2300      	movs	r3, #0
 800885c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800885e:	e022      	b.n	80088a6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008860:	f107 0316 	add.w	r3, r7, #22
 8008864:	4619      	mov	r1, r3
 8008866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008868:	f000 f8c9 	bl	80089fe <USBH_GetNextDesc>
 800886c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	2b05      	cmp	r3, #5
 8008874:	d117      	bne.n	80088a6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800887a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800887e:	3201      	adds	r2, #1
 8008880:	00d2      	lsls	r2, r2, #3
 8008882:	211a      	movs	r1, #26
 8008884:	fb01 f303 	mul.w	r3, r1, r3
 8008888:	4413      	add	r3, r2
 800888a:	3308      	adds	r3, #8
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	3304      	adds	r3, #4
 8008892:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008896:	69b8      	ldr	r0, [r7, #24]
 8008898:	f000 f851 	bl	800893e <USBH_ParseEPDesc>
            ep_ix++;
 800889c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80088a0:	3301      	adds	r3, #1
 80088a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	791b      	ldrb	r3, [r3, #4]
 80088aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d204      	bcs.n	80088bc <USBH_ParseCfgDesc+0x120>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	885a      	ldrh	r2, [r3, #2]
 80088b6:	8afb      	ldrh	r3, [r7, #22]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d8d1      	bhi.n	8008860 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80088bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088c0:	3301      	adds	r3, #1
 80088c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088ca:	2b09      	cmp	r3, #9
 80088cc:	d804      	bhi.n	80088d8 <USBH_ParseCfgDesc+0x13c>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	885a      	ldrh	r2, [r3, #2]
 80088d2:	8afb      	ldrh	r3, [r7, #22]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d8a4      	bhi.n	8008822 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80088d8:	bf00      	nop
 80088da:	3728      	adds	r7, #40	; 0x28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781a      	ldrb	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	785a      	ldrb	r2, [r3, #1]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	789a      	ldrb	r2, [r3, #2]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	78da      	ldrb	r2, [r3, #3]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	791a      	ldrb	r2, [r3, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	795a      	ldrb	r2, [r3, #5]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	799a      	ldrb	r2, [r3, #6]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	79da      	ldrb	r2, [r3, #7]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	7a1a      	ldrb	r2, [r3, #8]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	721a      	strb	r2, [r3, #8]
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	785a      	ldrb	r2, [r3, #1]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	789a      	ldrb	r2, [r3, #2]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	78da      	ldrb	r2, [r3, #3]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	3304      	adds	r3, #4
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	b29a      	uxth	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	3305      	adds	r3, #5
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	b29b      	uxth	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	799a      	ldrb	r2, [r3, #6]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	719a      	strb	r2, [r3, #6]
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d120      	bne.n	80089f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	1e9a      	subs	r2, r3, #2
 80089b6:	88fb      	ldrh	r3, [r7, #6]
 80089b8:	4293      	cmp	r3, r2
 80089ba:	bf28      	it	cs
 80089bc:	4613      	movcs	r3, r2
 80089be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3302      	adds	r3, #2
 80089c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80089c6:	2300      	movs	r3, #0
 80089c8:	82fb      	strh	r3, [r7, #22]
 80089ca:	e00b      	b.n	80089e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80089cc:	8afb      	ldrh	r3, [r7, #22]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	3301      	adds	r3, #1
 80089dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80089de:	8afb      	ldrh	r3, [r7, #22]
 80089e0:	3302      	adds	r3, #2
 80089e2:	82fb      	strh	r3, [r7, #22]
 80089e4:	8afa      	ldrh	r2, [r7, #22]
 80089e6:	8abb      	ldrh	r3, [r7, #20]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d3ef      	bcc.n	80089cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]
  }
}
 80089f2:	bf00      	nop
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	881a      	ldrh	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	4413      	add	r3, r2
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a26:	68fb      	ldr	r3, [r7, #12]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	789b      	ldrb	r3, [r3, #2]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d002      	beq.n	8008a54 <USBH_CtlReq+0x20>
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d00f      	beq.n	8008a72 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008a52:	e027      	b.n	8008aa4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	88fa      	ldrh	r2, [r7, #6]
 8008a5e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a70:	e018      	b.n	8008aa4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f81c 	bl	8008ab0 <USBH_HandleControl>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <USBH_CtlReq+0x54>
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d106      	bne.n	8008a96 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	761a      	strb	r2, [r3, #24]
      break;
 8008a94:	e005      	b.n	8008aa2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d102      	bne.n	8008aa2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	709a      	strb	r2, [r3, #2]
      break;
 8008aa2:	bf00      	nop
  }
  return status;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	7e1b      	ldrb	r3, [r3, #24]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	2b0a      	cmp	r3, #10
 8008ac8:	f200 8156 	bhi.w	8008d78 <USBH_HandleControl+0x2c8>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <USBH_HandleControl+0x24>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	08008b1b 	.word	0x08008b1b
 8008adc:	08008b85 	.word	0x08008b85
 8008ae0:	08008bab 	.word	0x08008bab
 8008ae4:	08008be3 	.word	0x08008be3
 8008ae8:	08008c0d 	.word	0x08008c0d
 8008aec:	08008c5f 	.word	0x08008c5f
 8008af0:	08008c81 	.word	0x08008c81
 8008af4:	08008cbd 	.word	0x08008cbd
 8008af8:	08008ce3 	.word	0x08008ce3
 8008afc:	08008d21 	.word	0x08008d21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f103 0110 	add.w	r1, r3, #16
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	795b      	ldrb	r3, [r3, #5]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f943 	bl	8008d98 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2202      	movs	r2, #2
 8008b16:	761a      	strb	r2, [r3, #24]
      break;
 8008b18:	e139      	b.n	8008d8e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	795b      	ldrb	r3, [r3, #5]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fcb2 	bl	800948a <USBH_LL_GetURBState>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d11e      	bne.n	8008b6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	7c1b      	ldrb	r3, [r3, #16]
 8008b34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	8adb      	ldrh	r3, [r3, #22]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008b42:	7b7b      	ldrb	r3, [r7, #13]
 8008b44:	2b80      	cmp	r3, #128	; 0x80
 8008b46:	d103      	bne.n	8008b50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b4e:	e115      	b.n	8008d7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2205      	movs	r2, #5
 8008b54:	761a      	strb	r2, [r3, #24]
      break;
 8008b56:	e111      	b.n	8008d7c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008b58:	7b7b      	ldrb	r3, [r7, #13]
 8008b5a:	2b80      	cmp	r3, #128	; 0x80
 8008b5c:	d103      	bne.n	8008b66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2209      	movs	r2, #9
 8008b62:	761a      	strb	r2, [r3, #24]
      break;
 8008b64:	e10a      	b.n	8008d7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2207      	movs	r2, #7
 8008b6a:	761a      	strb	r2, [r3, #24]
      break;
 8008b6c:	e106      	b.n	8008d7c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d003      	beq.n	8008b7c <USBH_HandleControl+0xcc>
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	f040 8100 	bne.w	8008d7c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	220b      	movs	r2, #11
 8008b80:	761a      	strb	r2, [r3, #24]
      break;
 8008b82:	e0fb      	b.n	8008d7c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6899      	ldr	r1, [r3, #8]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	899a      	ldrh	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	791b      	ldrb	r3, [r3, #4]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f93a 	bl	8008e16 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2204      	movs	r2, #4
 8008ba6:	761a      	strb	r2, [r3, #24]
      break;
 8008ba8:	e0f1      	b.n	8008d8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	791b      	ldrb	r3, [r3, #4]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fc6a 	bl	800948a <USBH_LL_GetURBState>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d102      	bne.n	8008bc6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2209      	movs	r2, #9
 8008bc4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	2b05      	cmp	r3, #5
 8008bca:	d102      	bne.n	8008bd2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008bd0:	e0d6      	b.n	8008d80 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	f040 80d3 	bne.w	8008d80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	220b      	movs	r2, #11
 8008bde:	761a      	strb	r2, [r3, #24]
      break;
 8008be0:	e0ce      	b.n	8008d80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6899      	ldr	r1, [r3, #8]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	899a      	ldrh	r2, [r3, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	795b      	ldrb	r3, [r3, #5]
 8008bee:	2001      	movs	r0, #1
 8008bf0:	9000      	str	r0, [sp, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f8ea 	bl	8008dcc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2206      	movs	r2, #6
 8008c08:	761a      	strb	r2, [r3, #24]
      break;
 8008c0a:	e0c0      	b.n	8008d8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	795b      	ldrb	r3, [r3, #5]
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fc39 	bl	800948a <USBH_LL_GetURBState>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d103      	bne.n	8008c2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2207      	movs	r2, #7
 8008c26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008c28:	e0ac      	b.n	8008d84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	2b05      	cmp	r3, #5
 8008c2e:	d105      	bne.n	8008c3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	220c      	movs	r2, #12
 8008c34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008c36:	2303      	movs	r3, #3
 8008c38:	73fb      	strb	r3, [r7, #15]
      break;
 8008c3a:	e0a3      	b.n	8008d84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d103      	bne.n	8008c4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2205      	movs	r2, #5
 8008c46:	761a      	strb	r2, [r3, #24]
      break;
 8008c48:	e09c      	b.n	8008d84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	f040 8099 	bne.w	8008d84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	220b      	movs	r2, #11
 8008c56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c5c:	e092      	b.n	8008d84 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	791b      	ldrb	r3, [r3, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f8d5 	bl	8008e16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	761a      	strb	r2, [r3, #24]

      break;
 8008c7e:	e086      	b.n	8008d8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	791b      	ldrb	r3, [r3, #4]
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fbff 	bl	800948a <USBH_LL_GetURBState>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d105      	bne.n	8008ca2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	220d      	movs	r2, #13
 8008c9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ca0:	e072      	b.n	8008d88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	d103      	bne.n	8008cb0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	220b      	movs	r2, #11
 8008cac:	761a      	strb	r2, [r3, #24]
      break;
 8008cae:	e06b      	b.n	8008d88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b05      	cmp	r3, #5
 8008cb4:	d168      	bne.n	8008d88 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cba:	e065      	b.n	8008d88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	795b      	ldrb	r3, [r3, #5]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	9200      	str	r2, [sp, #0]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f87f 	bl	8008dcc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	220a      	movs	r2, #10
 8008cde:	761a      	strb	r2, [r3, #24]
      break;
 8008ce0:	e055      	b.n	8008d8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	795b      	ldrb	r3, [r3, #5]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fbce 	bl	800948a <USBH_LL_GetURBState>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d105      	bne.n	8008d04 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	220d      	movs	r2, #13
 8008d00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d02:	e043      	b.n	8008d8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d103      	bne.n	8008d12 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2209      	movs	r2, #9
 8008d0e:	761a      	strb	r2, [r3, #24]
      break;
 8008d10:	e03c      	b.n	8008d8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d139      	bne.n	8008d8c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	220b      	movs	r2, #11
 8008d1c:	761a      	strb	r2, [r3, #24]
      break;
 8008d1e:	e035      	b.n	8008d8c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	7e5b      	ldrb	r3, [r3, #25]
 8008d24:	3301      	adds	r3, #1
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	765a      	strb	r2, [r3, #25]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	7e5b      	ldrb	r3, [r3, #25]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d806      	bhi.n	8008d42 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008d40:	e025      	b.n	8008d8e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008d48:	2106      	movs	r1, #6
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	795b      	ldrb	r3, [r3, #5]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f904 	bl	8008f68 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	791b      	ldrb	r3, [r3, #4]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f8fe 	bl	8008f68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008d72:	2302      	movs	r3, #2
 8008d74:	73fb      	strb	r3, [r7, #15]
      break;
 8008d76:	e00a      	b.n	8008d8e <USBH_HandleControl+0x2de>

    default:
      break;
 8008d78:	bf00      	nop
 8008d7a:	e008      	b.n	8008d8e <USBH_HandleControl+0x2de>
      break;
 8008d7c:	bf00      	nop
 8008d7e:	e006      	b.n	8008d8e <USBH_HandleControl+0x2de>
      break;
 8008d80:	bf00      	nop
 8008d82:	e004      	b.n	8008d8e <USBH_HandleControl+0x2de>
      break;
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <USBH_HandleControl+0x2de>
      break;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <USBH_HandleControl+0x2de>
      break;
 8008d8c:	bf00      	nop
  }

  return status;
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af04      	add	r7, sp, #16
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008da6:	79f9      	ldrb	r1, [r7, #7]
 8008da8:	2300      	movs	r3, #0
 8008daa:	9303      	str	r3, [sp, #12]
 8008dac:	2308      	movs	r3, #8
 8008dae:	9302      	str	r3, [sp, #8]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	2300      	movs	r3, #0
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	2300      	movs	r3, #0
 8008dba:	2200      	movs	r2, #0
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fb33 	bl	8009428 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af04      	add	r7, sp, #16
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	460b      	mov	r3, r1
 8008ddc:	80fb      	strh	r3, [r7, #6]
 8008dde:	4613      	mov	r3, r2
 8008de0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008df0:	7979      	ldrb	r1, [r7, #5]
 8008df2:	7e3b      	ldrb	r3, [r7, #24]
 8008df4:	9303      	str	r3, [sp, #12]
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	9302      	str	r3, [sp, #8]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	2300      	movs	r3, #0
 8008e04:	2200      	movs	r2, #0
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 fb0e 	bl	8009428 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b088      	sub	sp, #32
 8008e1a:	af04      	add	r7, sp, #16
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	4611      	mov	r1, r2
 8008e22:	461a      	mov	r2, r3
 8008e24:	460b      	mov	r3, r1
 8008e26:	80fb      	strh	r3, [r7, #6]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008e2c:	7979      	ldrb	r1, [r7, #5]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	88fb      	ldrh	r3, [r7, #6]
 8008e34:	9302      	str	r3, [sp, #8]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2201      	movs	r2, #1
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 faf0 	bl	8009428 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008e48:	2300      	movs	r3, #0

}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b088      	sub	sp, #32
 8008e56:	af04      	add	r7, sp, #16
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	461a      	mov	r2, r3
 8008e60:	460b      	mov	r3, r1
 8008e62:	71fb      	strb	r3, [r7, #7]
 8008e64:	4613      	mov	r3, r2
 8008e66:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	79b9      	ldrb	r1, [r7, #6]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	9203      	str	r2, [sp, #12]
 8008e72:	9302      	str	r3, [sp, #8]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	2201      	movs	r2, #1
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 fad1 	bl	8009428 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af04      	add	r7, sp, #16
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	78f9      	ldrb	r1, [r7, #3]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	9203      	str	r2, [sp, #12]
 8008ea8:	9302      	str	r3, [sp, #8]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	2301      	movs	r3, #1
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 fab6 	bl	8009428 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b086      	sub	sp, #24
 8008eca:	af04      	add	r7, sp, #16
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	4608      	mov	r0, r1
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	70fb      	strb	r3, [r7, #3]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70bb      	strb	r3, [r7, #2]
 8008edc:	4613      	mov	r3, r2
 8008ede:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008ee0:	7878      	ldrb	r0, [r7, #1]
 8008ee2:	78ba      	ldrb	r2, [r7, #2]
 8008ee4:	78f9      	ldrb	r1, [r7, #3]
 8008ee6:	8b3b      	ldrh	r3, [r7, #24]
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	7d3b      	ldrb	r3, [r7, #20]
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	7c3b      	ldrb	r3, [r7, #16]
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa49 	bl	800938c <USBH_LL_OpenPipe>

  return USBH_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa68 	bl	80093ea <USBH_LL_ClosePipe>

  return USBH_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f839 	bl	8008fa8 <USBH_GetFreePipe>
 8008f36:	4603      	mov	r3, r0
 8008f38:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008f3a:	89fb      	ldrh	r3, [r7, #14]
 8008f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d00b      	beq.n	8008f5c <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008f44:	78fa      	ldrb	r2, [r7, #3]
 8008f46:	89fb      	ldrh	r3, [r7, #14]
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	440b      	add	r3, r1
 8008f5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008f5c:	89fb      	ldrh	r3, [r7, #14]
 8008f5e:	b2db      	uxtb	r3, r3
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	2b0a      	cmp	r3, #10
 8008f78:	d80f      	bhi.n	8008f9a <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	440b      	add	r3, r1
 8008f98:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
 8008fb8:	e010      	b.n	8008fdc <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	e007      	b.n	8008fe6 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	2b0a      	cmp	r3, #10
 8008fe0:	d9eb      	bls.n	8008fba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	490e      	ldr	r1, [pc, #56]	; (8009034 <MX_USB_HOST_Init+0x40>)
 8008ffc:	480e      	ldr	r0, [pc, #56]	; (8009038 <MX_USB_HOST_Init+0x44>)
 8008ffe:	f7fe fc86 	bl	800790e <USBH_Init>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009008:	f7f7 fc54 	bl	80008b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800900c:	490b      	ldr	r1, [pc, #44]	; (800903c <MX_USB_HOST_Init+0x48>)
 800900e:	480a      	ldr	r0, [pc, #40]	; (8009038 <MX_USB_HOST_Init+0x44>)
 8009010:	f7fe fd0c 	bl	8007a2c <USBH_RegisterClass>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800901a:	f7f7 fc4b 	bl	80008b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800901e:	4806      	ldr	r0, [pc, #24]	; (8009038 <MX_USB_HOST_Init+0x44>)
 8009020:	f7fe fda8 	bl	8007b74 <USBH_Start>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800902a:	f7f7 fc43 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800902e:	bf00      	nop
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	08009055 	.word	0x08009055
 8009038:	20000168 	.word	0x20000168
 800903c:	2000000c 	.word	0x2000000c

08009040 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009044:	4802      	ldr	r0, [pc, #8]	; (8009050 <MX_USB_HOST_Process+0x10>)
 8009046:	f7fe fda5 	bl	8007b94 <USBH_Process>
}
 800904a:	bf00      	nop
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000168 	.word	0x20000168

08009054 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	3b01      	subs	r3, #1
 8009064:	2b04      	cmp	r3, #4
 8009066:	d819      	bhi.n	800909c <USBH_UserProcess+0x48>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <USBH_UserProcess+0x1c>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	0800909d 	.word	0x0800909d
 8009074:	0800908d 	.word	0x0800908d
 8009078:	0800909d 	.word	0x0800909d
 800907c:	08009095 	.word	0x08009095
 8009080:	08009085 	.word	0x08009085
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <USBH_UserProcess+0x58>)
 8009086:	2203      	movs	r2, #3
 8009088:	701a      	strb	r2, [r3, #0]
  break;
 800908a:	e008      	b.n	800909e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <USBH_UserProcess+0x58>)
 800908e:	2202      	movs	r2, #2
 8009090:	701a      	strb	r2, [r3, #0]
  break;
 8009092:	e004      	b.n	800909e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <USBH_UserProcess+0x58>)
 8009096:	2201      	movs	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]
  break;
 800909a:	e000      	b.n	800909e <USBH_UserProcess+0x4a>

  default:
  break;
 800909c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	200000b0 	.word	0x200000b0

080090b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	; 0x28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b8:	f107 0314 	add.w	r3, r7, #20
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	609a      	str	r2, [r3, #8]
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090d0:	d14e      	bne.n	8009170 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090d2:	4b29      	ldr	r3, [pc, #164]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 80090d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d6:	4a28      	ldr	r2, [pc, #160]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 80090d8:	f043 0301 	orr.w	r3, r3, #1
 80090dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090de:	4b26      	ldr	r3, [pc, #152]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 80090e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	613b      	str	r3, [r7, #16]
 80090e8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80090ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80090ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090f0:	2302      	movs	r3, #2
 80090f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090f8:	2303      	movs	r3, #3
 80090fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80090fc:	230a      	movs	r3, #10
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009100:	f107 0314 	add.w	r3, r7, #20
 8009104:	4619      	mov	r1, r3
 8009106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800910a:	f7f7 fef7 	bl	8000efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800910e:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 8009110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009112:	4a19      	ldr	r2, [pc, #100]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 8009114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800911a:	4b17      	ldr	r3, [pc, #92]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 800911c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009126:	4b14      	ldr	r3, [pc, #80]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 8009128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800912a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d114      	bne.n	800915c <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009132:	4b11      	ldr	r3, [pc, #68]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 8009134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009136:	4a10      	ldr	r2, [pc, #64]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 8009138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800913c:	6593      	str	r3, [r2, #88]	; 0x58
 800913e:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 8009140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009146:	60bb      	str	r3, [r7, #8]
 8009148:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800914a:	f7f9 fdf7 	bl	8002d3c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800914e:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 8009150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009152:	4a09      	ldr	r2, [pc, #36]	; (8009178 <HAL_HCD_MspInit+0xc8>)
 8009154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009158:	6593      	str	r3, [r2, #88]	; 0x58
 800915a:	e001      	b.n	8009160 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800915c:	f7f9 fdee 	bl	8002d3c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009160:	2200      	movs	r2, #0
 8009162:	2100      	movs	r1, #0
 8009164:	2043      	movs	r0, #67	; 0x43
 8009166:	f7f7 fe92 	bl	8000e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800916a:	2043      	movs	r0, #67	; 0x43
 800916c:	f7f7 feab 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009170:	bf00      	nop
 8009172:	3728      	adds	r7, #40	; 0x28
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	40021000 	.word	0x40021000

0800917c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff f8d7 	bl	800833e <USBH_LL_IncTimer>
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff f90f 	bl	80083ca <USBH_LL_Connect>
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff f918 	bl	80083f8 <USBH_LL_Disconnect>
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
 80091dc:	4613      	mov	r3, r2
 80091de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff f8c9 	bl	8008392 <USBH_LL_PortEnabled>
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff f8c9 	bl	80083ae <USBH_LL_PortDisabled>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8009232:	2b01      	cmp	r3, #1
 8009234:	d12a      	bne.n	800928c <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009236:	4a18      	ldr	r2, [pc, #96]	; (8009298 <USBH_LL_Init+0x74>)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a15      	ldr	r2, [pc, #84]	; (8009298 <USBH_LL_Init+0x74>)
 8009242:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <USBH_LL_Init+0x74>)
 8009248:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800924c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800924e:	4b12      	ldr	r3, [pc, #72]	; (8009298 <USBH_LL_Init+0x74>)
 8009250:	220c      	movs	r2, #12
 8009252:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009254:	4b10      	ldr	r3, [pc, #64]	; (8009298 <USBH_LL_Init+0x74>)
 8009256:	2201      	movs	r2, #1
 8009258:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800925a:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <USBH_LL_Init+0x74>)
 800925c:	2200      	movs	r2, #0
 800925e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009260:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <USBH_LL_Init+0x74>)
 8009262:	2202      	movs	r2, #2
 8009264:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009266:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <USBH_LL_Init+0x74>)
 8009268:	2200      	movs	r2, #0
 800926a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800926c:	480a      	ldr	r0, [pc, #40]	; (8009298 <USBH_LL_Init+0x74>)
 800926e:	f7f8 f82c 	bl	80012ca <HAL_HCD_Init>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009278:	f7f7 fb1c 	bl	80008b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800927c:	4806      	ldr	r0, [pc, #24]	; (8009298 <USBH_LL_Init+0x74>)
 800927e:	f7f8 fbf1 	bl	8001a64 <HAL_HCD_GetCurrentFrame>
 8009282:	4603      	mov	r3, r0
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff f84a 	bl	8008320 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000610 	.word	0x20000610

0800929c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f8 fb74 	bl	80019a0 <HAL_HCD_Start>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f948 	bl	8009554 <USBH_Get_USB_Status>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7f8 fb7c 	bl	80019e6 <HAL_HCD_Stop>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 f92d 	bl	8009554 <USBH_Get_USB_Status>
 80092fa:	4603      	mov	r3, r0
 80092fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009310:	2301      	movs	r3, #1
 8009312:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800931a:	4618      	mov	r0, r3
 800931c:	f7f8 fbb0 	bl	8001a80 <HAL_HCD_GetCurrentSpeed>
 8009320:	4603      	mov	r3, r0
 8009322:	2b02      	cmp	r3, #2
 8009324:	d00c      	beq.n	8009340 <USBH_LL_GetSpeed+0x38>
 8009326:	2b02      	cmp	r3, #2
 8009328:	d80d      	bhi.n	8009346 <USBH_LL_GetSpeed+0x3e>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <USBH_LL_GetSpeed+0x2c>
 800932e:	2b01      	cmp	r3, #1
 8009330:	d003      	beq.n	800933a <USBH_LL_GetSpeed+0x32>
 8009332:	e008      	b.n	8009346 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
    break;
 8009338:	e008      	b.n	800934c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800933a:	2301      	movs	r3, #1
 800933c:	73fb      	strb	r3, [r7, #15]
    break;
 800933e:	e005      	b.n	800934c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009340:	2302      	movs	r3, #2
 8009342:	73fb      	strb	r3, [r7, #15]
    break;
 8009344:	e002      	b.n	800934c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009346:	2301      	movs	r3, #1
 8009348:	73fb      	strb	r3, [r7, #15]
    break;
 800934a:	bf00      	nop
  }
  return  speed;
 800934c:	7bfb      	ldrb	r3, [r7, #15]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800936c:	4618      	mov	r0, r3
 800936e:	f7f8 fb57 	bl	8001a20 <HAL_HCD_ResetPort>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 f8eb 	bl	8009554 <USBH_Get_USB_Status>
 800937e:	4603      	mov	r3, r0
 8009380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009382:	7bbb      	ldrb	r3, [r7, #14]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800938c:	b590      	push	{r4, r7, lr}
 800938e:	b089      	sub	sp, #36	; 0x24
 8009390:	af04      	add	r7, sp, #16
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	4603      	mov	r3, r0
 800939c:	70fb      	strb	r3, [r7, #3]
 800939e:	460b      	mov	r3, r1
 80093a0:	70bb      	strb	r3, [r7, #2]
 80093a2:	4613      	mov	r3, r2
 80093a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 80093b4:	787c      	ldrb	r4, [r7, #1]
 80093b6:	78ba      	ldrb	r2, [r7, #2]
 80093b8:	78f9      	ldrb	r1, [r7, #3]
 80093ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093bc:	9302      	str	r3, [sp, #8]
 80093be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4623      	mov	r3, r4
 80093cc:	f7f7 ffdf 	bl	800138e <HAL_HCD_HC_Init>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f8bc 	bl	8009554 <USBH_Get_USB_Status>
 80093dc:	4603      	mov	r3, r0
 80093de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd90      	pop	{r4, r7, pc}

080093ea <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	4611      	mov	r1, r2
 8009408:	4618      	mov	r0, r3
 800940a:	f7f8 f84f 	bl	80014ac <HAL_HCD_HC_Halt>
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f89d 	bl	8009554 <USBH_Get_USB_Status>
 800941a:	4603      	mov	r3, r0
 800941c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800941e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009428:	b590      	push	{r4, r7, lr}
 800942a:	b089      	sub	sp, #36	; 0x24
 800942c:	af04      	add	r7, sp, #16
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	4608      	mov	r0, r1
 8009432:	4611      	mov	r1, r2
 8009434:	461a      	mov	r2, r3
 8009436:	4603      	mov	r3, r0
 8009438:	70fb      	strb	r3, [r7, #3]
 800943a:	460b      	mov	r3, r1
 800943c:	70bb      	strb	r3, [r7, #2]
 800943e:	4613      	mov	r3, r2
 8009440:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8009450:	787c      	ldrb	r4, [r7, #1]
 8009452:	78ba      	ldrb	r2, [r7, #2]
 8009454:	78f9      	ldrb	r1, [r7, #3]
 8009456:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	4623      	mov	r3, r4
 800946c:	f7f8 f842 	bl	80014f4 <HAL_HCD_HC_SubmitRequest>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f86c 	bl	8009554 <USBH_Get_USB_Status>
 800947c:	4603      	mov	r3, r0
 800947e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009480:	7bbb      	ldrb	r3, [r7, #14]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bd90      	pop	{r4, r7, pc}

0800948a <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800949c:	78fa      	ldrb	r2, [r7, #3]
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7f8 facb 	bl	8001a3c <HAL_HCD_HC_GetURBState>
 80094a6:	4603      	mov	r3, r0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	460b      	mov	r3, r1
 80094ba:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d103      	bne.n	80094ce <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f86f 	bl	80095ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80094ce:	20c8      	movs	r0, #200	; 0xc8
 80094d0:	f7f7 fbce 	bl	8000c70 <HAL_Delay>
  return USBH_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80094de:	b480      	push	{r7}
 80094e0:	b085      	sub	sp, #20
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	460b      	mov	r3, r1
 80094e8:	70fb      	strb	r3, [r7, #3]
 80094ea:	4613      	mov	r3, r2
 80094ec:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80094f4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	212c      	movs	r1, #44	; 0x2c
 80094fc:	fb01 f303 	mul.w	r3, r1, r3
 8009500:	4413      	add	r3, r2
 8009502:	333b      	adds	r3, #59	; 0x3b
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d009      	beq.n	800951e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	212c      	movs	r1, #44	; 0x2c
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	4413      	add	r3, r2
 8009516:	3354      	adds	r3, #84	; 0x54
 8009518:	78ba      	ldrb	r2, [r7, #2]
 800951a:	701a      	strb	r2, [r3, #0]
 800951c:	e008      	b.n	8009530 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	212c      	movs	r1, #44	; 0x2c
 8009524:	fb01 f303 	mul.w	r3, r1, r3
 8009528:	4413      	add	r3, r2
 800952a:	3355      	adds	r3, #85	; 0x55
 800952c:	78ba      	ldrb	r2, [r7, #2]
 800952e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7f7 fb92 	bl	8000c70 <HAL_Delay>
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009562:	79fb      	ldrb	r3, [r7, #7]
 8009564:	2b03      	cmp	r3, #3
 8009566:	d817      	bhi.n	8009598 <USBH_Get_USB_Status+0x44>
 8009568:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <USBH_Get_USB_Status+0x1c>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	08009581 	.word	0x08009581
 8009574:	08009587 	.word	0x08009587
 8009578:	0800958d 	.word	0x0800958d
 800957c:	08009593 	.word	0x08009593
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
    break;
 8009584:	e00b      	b.n	800959e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	73fb      	strb	r3, [r7, #15]
    break;
 800958a:	e008      	b.n	800959e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800958c:	2301      	movs	r3, #1
 800958e:	73fb      	strb	r3, [r7, #15]
    break;
 8009590:	e005      	b.n	800959e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009592:	2302      	movs	r3, #2
 8009594:	73fb      	strb	r3, [r7, #15]
    break;
 8009596:	e002      	b.n	800959e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009598:	2302      	movs	r3, #2
 800959a:	73fb      	strb	r3, [r7, #15]
    break;
 800959c:	bf00      	nop
  }
  return usb_status;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80095b6:	79fb      	ldrb	r3, [r7, #7]
 80095b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80095c0:	2301      	movs	r3, #1
 80095c2:	73fb      	strb	r3, [r7, #15]
 80095c4:	e001      	b.n	80095ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	461a      	mov	r2, r3
 80095ce:	2140      	movs	r1, #64	; 0x40
 80095d0:	4803      	ldr	r0, [pc, #12]	; (80095e0 <MX_DriverVbusFS+0x34>)
 80095d2:	f7f7 fe25 	bl	8001220 <HAL_GPIO_WritePin>
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	48001800 	.word	0x48001800

080095e4 <__errno>:
 80095e4:	4b01      	ldr	r3, [pc, #4]	; (80095ec <__errno+0x8>)
 80095e6:	6818      	ldr	r0, [r3, #0]
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	2000002c 	.word	0x2000002c

080095f0 <__libc_init_array>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	4d0d      	ldr	r5, [pc, #52]	; (8009628 <__libc_init_array+0x38>)
 80095f4:	4c0d      	ldr	r4, [pc, #52]	; (800962c <__libc_init_array+0x3c>)
 80095f6:	1b64      	subs	r4, r4, r5
 80095f8:	10a4      	asrs	r4, r4, #2
 80095fa:	2600      	movs	r6, #0
 80095fc:	42a6      	cmp	r6, r4
 80095fe:	d109      	bne.n	8009614 <__libc_init_array+0x24>
 8009600:	4d0b      	ldr	r5, [pc, #44]	; (8009630 <__libc_init_array+0x40>)
 8009602:	4c0c      	ldr	r4, [pc, #48]	; (8009634 <__libc_init_array+0x44>)
 8009604:	f000 f8f8 	bl	80097f8 <_init>
 8009608:	1b64      	subs	r4, r4, r5
 800960a:	10a4      	asrs	r4, r4, #2
 800960c:	2600      	movs	r6, #0
 800960e:	42a6      	cmp	r6, r4
 8009610:	d105      	bne.n	800961e <__libc_init_array+0x2e>
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	f855 3b04 	ldr.w	r3, [r5], #4
 8009618:	4798      	blx	r3
 800961a:	3601      	adds	r6, #1
 800961c:	e7ee      	b.n	80095fc <__libc_init_array+0xc>
 800961e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009622:	4798      	blx	r3
 8009624:	3601      	adds	r6, #1
 8009626:	e7f2      	b.n	800960e <__libc_init_array+0x1e>
 8009628:	08009868 	.word	0x08009868
 800962c:	08009868 	.word	0x08009868
 8009630:	08009868 	.word	0x08009868
 8009634:	0800986c 	.word	0x0800986c

08009638 <malloc>:
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <malloc+0xc>)
 800963a:	4601      	mov	r1, r0
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f000 b863 	b.w	8009708 <_malloc_r>
 8009642:	bf00      	nop
 8009644:	2000002c 	.word	0x2000002c

08009648 <free>:
 8009648:	4b02      	ldr	r3, [pc, #8]	; (8009654 <free+0xc>)
 800964a:	4601      	mov	r1, r0
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	f000 b80b 	b.w	8009668 <_free_r>
 8009652:	bf00      	nop
 8009654:	2000002c 	.word	0x2000002c

08009658 <memset>:
 8009658:	4402      	add	r2, r0
 800965a:	4603      	mov	r3, r0
 800965c:	4293      	cmp	r3, r2
 800965e:	d100      	bne.n	8009662 <memset+0xa>
 8009660:	4770      	bx	lr
 8009662:	f803 1b01 	strb.w	r1, [r3], #1
 8009666:	e7f9      	b.n	800965c <memset+0x4>

08009668 <_free_r>:
 8009668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800966a:	2900      	cmp	r1, #0
 800966c:	d048      	beq.n	8009700 <_free_r+0x98>
 800966e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009672:	9001      	str	r0, [sp, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f1a1 0404 	sub.w	r4, r1, #4
 800967a:	bfb8      	it	lt
 800967c:	18e4      	addlt	r4, r4, r3
 800967e:	f000 f8ad 	bl	80097dc <__malloc_lock>
 8009682:	4a20      	ldr	r2, [pc, #128]	; (8009704 <_free_r+0x9c>)
 8009684:	9801      	ldr	r0, [sp, #4]
 8009686:	6813      	ldr	r3, [r2, #0]
 8009688:	4615      	mov	r5, r2
 800968a:	b933      	cbnz	r3, 800969a <_free_r+0x32>
 800968c:	6063      	str	r3, [r4, #4]
 800968e:	6014      	str	r4, [r2, #0]
 8009690:	b003      	add	sp, #12
 8009692:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009696:	f000 b8a7 	b.w	80097e8 <__malloc_unlock>
 800969a:	42a3      	cmp	r3, r4
 800969c:	d90b      	bls.n	80096b6 <_free_r+0x4e>
 800969e:	6821      	ldr	r1, [r4, #0]
 80096a0:	1862      	adds	r2, r4, r1
 80096a2:	4293      	cmp	r3, r2
 80096a4:	bf04      	itt	eq
 80096a6:	681a      	ldreq	r2, [r3, #0]
 80096a8:	685b      	ldreq	r3, [r3, #4]
 80096aa:	6063      	str	r3, [r4, #4]
 80096ac:	bf04      	itt	eq
 80096ae:	1852      	addeq	r2, r2, r1
 80096b0:	6022      	streq	r2, [r4, #0]
 80096b2:	602c      	str	r4, [r5, #0]
 80096b4:	e7ec      	b.n	8009690 <_free_r+0x28>
 80096b6:	461a      	mov	r2, r3
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	b10b      	cbz	r3, 80096c0 <_free_r+0x58>
 80096bc:	42a3      	cmp	r3, r4
 80096be:	d9fa      	bls.n	80096b6 <_free_r+0x4e>
 80096c0:	6811      	ldr	r1, [r2, #0]
 80096c2:	1855      	adds	r5, r2, r1
 80096c4:	42a5      	cmp	r5, r4
 80096c6:	d10b      	bne.n	80096e0 <_free_r+0x78>
 80096c8:	6824      	ldr	r4, [r4, #0]
 80096ca:	4421      	add	r1, r4
 80096cc:	1854      	adds	r4, r2, r1
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	6011      	str	r1, [r2, #0]
 80096d2:	d1dd      	bne.n	8009690 <_free_r+0x28>
 80096d4:	681c      	ldr	r4, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	6053      	str	r3, [r2, #4]
 80096da:	4421      	add	r1, r4
 80096dc:	6011      	str	r1, [r2, #0]
 80096de:	e7d7      	b.n	8009690 <_free_r+0x28>
 80096e0:	d902      	bls.n	80096e8 <_free_r+0x80>
 80096e2:	230c      	movs	r3, #12
 80096e4:	6003      	str	r3, [r0, #0]
 80096e6:	e7d3      	b.n	8009690 <_free_r+0x28>
 80096e8:	6825      	ldr	r5, [r4, #0]
 80096ea:	1961      	adds	r1, r4, r5
 80096ec:	428b      	cmp	r3, r1
 80096ee:	bf04      	itt	eq
 80096f0:	6819      	ldreq	r1, [r3, #0]
 80096f2:	685b      	ldreq	r3, [r3, #4]
 80096f4:	6063      	str	r3, [r4, #4]
 80096f6:	bf04      	itt	eq
 80096f8:	1949      	addeq	r1, r1, r5
 80096fa:	6021      	streq	r1, [r4, #0]
 80096fc:	6054      	str	r4, [r2, #4]
 80096fe:	e7c7      	b.n	8009690 <_free_r+0x28>
 8009700:	b003      	add	sp, #12
 8009702:	bd30      	pop	{r4, r5, pc}
 8009704:	200000b4 	.word	0x200000b4

08009708 <_malloc_r>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	1ccd      	adds	r5, r1, #3
 800970c:	f025 0503 	bic.w	r5, r5, #3
 8009710:	3508      	adds	r5, #8
 8009712:	2d0c      	cmp	r5, #12
 8009714:	bf38      	it	cc
 8009716:	250c      	movcc	r5, #12
 8009718:	2d00      	cmp	r5, #0
 800971a:	4606      	mov	r6, r0
 800971c:	db01      	blt.n	8009722 <_malloc_r+0x1a>
 800971e:	42a9      	cmp	r1, r5
 8009720:	d903      	bls.n	800972a <_malloc_r+0x22>
 8009722:	230c      	movs	r3, #12
 8009724:	6033      	str	r3, [r6, #0]
 8009726:	2000      	movs	r0, #0
 8009728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972a:	f000 f857 	bl	80097dc <__malloc_lock>
 800972e:	4921      	ldr	r1, [pc, #132]	; (80097b4 <_malloc_r+0xac>)
 8009730:	680a      	ldr	r2, [r1, #0]
 8009732:	4614      	mov	r4, r2
 8009734:	b99c      	cbnz	r4, 800975e <_malloc_r+0x56>
 8009736:	4f20      	ldr	r7, [pc, #128]	; (80097b8 <_malloc_r+0xb0>)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	b923      	cbnz	r3, 8009746 <_malloc_r+0x3e>
 800973c:	4621      	mov	r1, r4
 800973e:	4630      	mov	r0, r6
 8009740:	f000 f83c 	bl	80097bc <_sbrk_r>
 8009744:	6038      	str	r0, [r7, #0]
 8009746:	4629      	mov	r1, r5
 8009748:	4630      	mov	r0, r6
 800974a:	f000 f837 	bl	80097bc <_sbrk_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d123      	bne.n	800979a <_malloc_r+0x92>
 8009752:	230c      	movs	r3, #12
 8009754:	6033      	str	r3, [r6, #0]
 8009756:	4630      	mov	r0, r6
 8009758:	f000 f846 	bl	80097e8 <__malloc_unlock>
 800975c:	e7e3      	b.n	8009726 <_malloc_r+0x1e>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	1b5b      	subs	r3, r3, r5
 8009762:	d417      	bmi.n	8009794 <_malloc_r+0x8c>
 8009764:	2b0b      	cmp	r3, #11
 8009766:	d903      	bls.n	8009770 <_malloc_r+0x68>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	441c      	add	r4, r3
 800976c:	6025      	str	r5, [r4, #0]
 800976e:	e004      	b.n	800977a <_malloc_r+0x72>
 8009770:	6863      	ldr	r3, [r4, #4]
 8009772:	42a2      	cmp	r2, r4
 8009774:	bf0c      	ite	eq
 8009776:	600b      	streq	r3, [r1, #0]
 8009778:	6053      	strne	r3, [r2, #4]
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f834 	bl	80097e8 <__malloc_unlock>
 8009780:	f104 000b 	add.w	r0, r4, #11
 8009784:	1d23      	adds	r3, r4, #4
 8009786:	f020 0007 	bic.w	r0, r0, #7
 800978a:	1ac2      	subs	r2, r0, r3
 800978c:	d0cc      	beq.n	8009728 <_malloc_r+0x20>
 800978e:	1a1b      	subs	r3, r3, r0
 8009790:	50a3      	str	r3, [r4, r2]
 8009792:	e7c9      	b.n	8009728 <_malloc_r+0x20>
 8009794:	4622      	mov	r2, r4
 8009796:	6864      	ldr	r4, [r4, #4]
 8009798:	e7cc      	b.n	8009734 <_malloc_r+0x2c>
 800979a:	1cc4      	adds	r4, r0, #3
 800979c:	f024 0403 	bic.w	r4, r4, #3
 80097a0:	42a0      	cmp	r0, r4
 80097a2:	d0e3      	beq.n	800976c <_malloc_r+0x64>
 80097a4:	1a21      	subs	r1, r4, r0
 80097a6:	4630      	mov	r0, r6
 80097a8:	f000 f808 	bl	80097bc <_sbrk_r>
 80097ac:	3001      	adds	r0, #1
 80097ae:	d1dd      	bne.n	800976c <_malloc_r+0x64>
 80097b0:	e7cf      	b.n	8009752 <_malloc_r+0x4a>
 80097b2:	bf00      	nop
 80097b4:	200000b4 	.word	0x200000b4
 80097b8:	200000b8 	.word	0x200000b8

080097bc <_sbrk_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4d06      	ldr	r5, [pc, #24]	; (80097d8 <_sbrk_r+0x1c>)
 80097c0:	2300      	movs	r3, #0
 80097c2:	4604      	mov	r4, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	f7f7 f94c 	bl	8000a64 <_sbrk>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d102      	bne.n	80097d6 <_sbrk_r+0x1a>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	b103      	cbz	r3, 80097d6 <_sbrk_r+0x1a>
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	20000914 	.word	0x20000914

080097dc <__malloc_lock>:
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__malloc_lock+0x8>)
 80097de:	f000 b809 	b.w	80097f4 <__retarget_lock_acquire_recursive>
 80097e2:	bf00      	nop
 80097e4:	2000091c 	.word	0x2000091c

080097e8 <__malloc_unlock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_unlock+0x8>)
 80097ea:	f000 b804 	b.w	80097f6 <__retarget_lock_release_recursive>
 80097ee:	bf00      	nop
 80097f0:	2000091c 	.word	0x2000091c

080097f4 <__retarget_lock_acquire_recursive>:
 80097f4:	4770      	bx	lr

080097f6 <__retarget_lock_release_recursive>:
 80097f6:	4770      	bx	lr

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
