
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119a8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  08011b68  08011b68  00021b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012710  08012710  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08012710  08012710  00022710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012718  08012718  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012718  08012718  00022718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801271c  0801271c  0002271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08012720  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e54  20000090  080127b0  00030090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002ee4  080127b0  00032ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003331f  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c52  00000000  00000000  000633df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00069038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  0006a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034855  00000000  00000000  0006bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002408a  00000000  00000000  000a0805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001241ac  00000000  00000000  000c488f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e8a3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a8  00000000  00000000  001e8a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000090 	.word	0x20000090
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011b50 	.word	0x08011b50

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000094 	.word	0x20000094
 80001fc:	08011b50 	.word	0x08011b50

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	; 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2uiz>:
 800089c:	004a      	lsls	r2, r1, #1
 800089e:	d211      	bcs.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008a4:	d211      	bcs.n	80008ca <__aeabi_d2uiz+0x2e>
 80008a6:	d50d      	bpl.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b0:	d40e      	bmi.n	80008d0 <__aeabi_d2uiz+0x34>
 80008b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008be:	fa23 f002 	lsr.w	r0, r3, r2
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ce:	d102      	bne.n	80008d6 <__aeabi_d2uiz+0x3a>
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	4770      	bx	lr
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	4770      	bx	lr

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96e 	b.w	8000bd0 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468c      	mov	ip, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8083 	bne.w	8000a22 <__udivmoddi4+0x116>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d947      	bls.n	80009b2 <__udivmoddi4+0xa6>
 8000922:	fab2 f282 	clz	r2, r2
 8000926:	b142      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000928:	f1c2 0020 	rsb	r0, r2, #32
 800092c:	fa24 f000 	lsr.w	r0, r4, r0
 8000930:	4091      	lsls	r1, r2
 8000932:	4097      	lsls	r7, r2
 8000934:	ea40 0c01 	orr.w	ip, r0, r1
 8000938:	4094      	lsls	r4, r2
 800093a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800093e:	0c23      	lsrs	r3, r4, #16
 8000940:	fbbc f6f8 	udiv	r6, ip, r8
 8000944:	fa1f fe87 	uxth.w	lr, r7
 8000948:	fb08 c116 	mls	r1, r8, r6, ip
 800094c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000950:	fb06 f10e 	mul.w	r1, r6, lr
 8000954:	4299      	cmp	r1, r3
 8000956:	d909      	bls.n	800096c <__udivmoddi4+0x60>
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	f106 30ff 	add.w	r0, r6, #4294967295
 800095e:	f080 8119 	bcs.w	8000b94 <__udivmoddi4+0x288>
 8000962:	4299      	cmp	r1, r3
 8000964:	f240 8116 	bls.w	8000b94 <__udivmoddi4+0x288>
 8000968:	3e02      	subs	r6, #2
 800096a:	443b      	add	r3, r7
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb3 f0f8 	udiv	r0, r3, r8
 8000974:	fb08 3310 	mls	r3, r8, r0, r3
 8000978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800097c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000980:	45a6      	cmp	lr, r4
 8000982:	d909      	bls.n	8000998 <__udivmoddi4+0x8c>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 33ff 	add.w	r3, r0, #4294967295
 800098a:	f080 8105 	bcs.w	8000b98 <__udivmoddi4+0x28c>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f240 8102 	bls.w	8000b98 <__udivmoddi4+0x28c>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800099c:	eba4 040e 	sub.w	r4, r4, lr
 80009a0:	2600      	movs	r6, #0
 80009a2:	b11d      	cbz	r5, 80009ac <__udivmoddi4+0xa0>
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	2300      	movs	r3, #0
 80009a8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	b902      	cbnz	r2, 80009b6 <__udivmoddi4+0xaa>
 80009b4:	deff      	udf	#255	; 0xff
 80009b6:	fab2 f282 	clz	r2, r2
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d150      	bne.n	8000a60 <__udivmoddi4+0x154>
 80009be:	1bcb      	subs	r3, r1, r7
 80009c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c4:	fa1f f887 	uxth.w	r8, r7
 80009c8:	2601      	movs	r6, #1
 80009ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ce:	0c21      	lsrs	r1, r4, #16
 80009d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d8:	fb08 f30c 	mul.w	r3, r8, ip
 80009dc:	428b      	cmp	r3, r1
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0xe4>
 80009e0:	1879      	adds	r1, r7, r1
 80009e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0xe2>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	f200 80e9 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 80009ee:	4684      	mov	ip, r0
 80009f0:	1ac9      	subs	r1, r1, r3
 80009f2:	b2a3      	uxth	r3, r4
 80009f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a00:	fb08 f800 	mul.w	r8, r8, r0
 8000a04:	45a0      	cmp	r8, r4
 8000a06:	d907      	bls.n	8000a18 <__udivmoddi4+0x10c>
 8000a08:	193c      	adds	r4, r7, r4
 8000a0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x10a>
 8000a10:	45a0      	cmp	r8, r4
 8000a12:	f200 80d9 	bhi.w	8000bc8 <__udivmoddi4+0x2bc>
 8000a16:	4618      	mov	r0, r3
 8000a18:	eba4 0408 	sub.w	r4, r4, r8
 8000a1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a20:	e7bf      	b.n	80009a2 <__udivmoddi4+0x96>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d909      	bls.n	8000a3a <__udivmoddi4+0x12e>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	f000 80b1 	beq.w	8000b8e <__udivmoddi4+0x282>
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a32:	4630      	mov	r0, r6
 8000a34:	4631      	mov	r1, r6
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	fab3 f683 	clz	r6, r3
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d14a      	bne.n	8000ad8 <__udivmoddi4+0x1cc>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d302      	bcc.n	8000a4c <__udivmoddi4+0x140>
 8000a46:	4282      	cmp	r2, r0
 8000a48:	f200 80b8 	bhi.w	8000bbc <__udivmoddi4+0x2b0>
 8000a4c:	1a84      	subs	r4, r0, r2
 8000a4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a52:	2001      	movs	r0, #1
 8000a54:	468c      	mov	ip, r1
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d0a8      	beq.n	80009ac <__udivmoddi4+0xa0>
 8000a5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a5e:	e7a5      	b.n	80009ac <__udivmoddi4+0xa0>
 8000a60:	f1c2 0320 	rsb	r3, r2, #32
 8000a64:	fa20 f603 	lsr.w	r6, r0, r3
 8000a68:	4097      	lsls	r7, r2
 8000a6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a72:	40d9      	lsrs	r1, r3
 8000a74:	4330      	orrs	r0, r6
 8000a76:	0c03      	lsrs	r3, r0, #16
 8000a78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a7c:	fa1f f887 	uxth.w	r8, r7
 8000a80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f108 	mul.w	r1, r6, r8
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x19c>
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a9a:	f080 808d 	bcs.w	8000bb8 <__udivmoddi4+0x2ac>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 808a 	bls.w	8000bb8 <__udivmoddi4+0x2ac>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	443b      	add	r3, r7
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b281      	uxth	r1, r0
 8000aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab8:	fb00 f308 	mul.w	r3, r0, r8
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x1c4>
 8000ac0:	1879      	adds	r1, r7, r1
 8000ac2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ac6:	d273      	bcs.n	8000bb0 <__udivmoddi4+0x2a4>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d971      	bls.n	8000bb0 <__udivmoddi4+0x2a4>
 8000acc:	3802      	subs	r0, #2
 8000ace:	4439      	add	r1, r7
 8000ad0:	1acb      	subs	r3, r1, r3
 8000ad2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ad6:	e778      	b.n	80009ca <__udivmoddi4+0xbe>
 8000ad8:	f1c6 0c20 	rsb	ip, r6, #32
 8000adc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ae0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ae4:	431c      	orrs	r4, r3
 8000ae6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aea:	fa01 f306 	lsl.w	r3, r1, r6
 8000aee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000af2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000af6:	431f      	orrs	r7, r3
 8000af8:	0c3b      	lsrs	r3, r7, #16
 8000afa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000afe:	fa1f f884 	uxth.w	r8, r4
 8000b02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b0e:	458a      	cmp	sl, r1
 8000b10:	fa02 f206 	lsl.w	r2, r2, r6
 8000b14:	fa00 f306 	lsl.w	r3, r0, r6
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x220>
 8000b1a:	1861      	adds	r1, r4, r1
 8000b1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b20:	d248      	bcs.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b22:	458a      	cmp	sl, r1
 8000b24:	d946      	bls.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b26:	f1a9 0902 	sub.w	r9, r9, #2
 8000b2a:	4421      	add	r1, r4
 8000b2c:	eba1 010a 	sub.w	r1, r1, sl
 8000b30:	b2bf      	uxth	r7, r7
 8000b32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b3e:	fb00 f808 	mul.w	r8, r0, r8
 8000b42:	45b8      	cmp	r8, r7
 8000b44:	d907      	bls.n	8000b56 <__udivmoddi4+0x24a>
 8000b46:	19e7      	adds	r7, r4, r7
 8000b48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4c:	d22e      	bcs.n	8000bac <__udivmoddi4+0x2a0>
 8000b4e:	45b8      	cmp	r8, r7
 8000b50:	d92c      	bls.n	8000bac <__udivmoddi4+0x2a0>
 8000b52:	3802      	subs	r0, #2
 8000b54:	4427      	add	r7, r4
 8000b56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b5a:	eba7 0708 	sub.w	r7, r7, r8
 8000b5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b62:	454f      	cmp	r7, r9
 8000b64:	46c6      	mov	lr, r8
 8000b66:	4649      	mov	r1, r9
 8000b68:	d31a      	bcc.n	8000ba0 <__udivmoddi4+0x294>
 8000b6a:	d017      	beq.n	8000b9c <__udivmoddi4+0x290>
 8000b6c:	b15d      	cbz	r5, 8000b86 <__udivmoddi4+0x27a>
 8000b6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b72:	eb67 0701 	sbc.w	r7, r7, r1
 8000b76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b7a:	40f2      	lsrs	r2, r6
 8000b7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b80:	40f7      	lsrs	r7, r6
 8000b82:	e9c5 2700 	strd	r2, r7, [r5]
 8000b86:	2600      	movs	r6, #0
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e70b      	b.n	80009ac <__udivmoddi4+0xa0>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e9      	b.n	800096c <__udivmoddi4+0x60>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6fd      	b.n	8000998 <__udivmoddi4+0x8c>
 8000b9c:	4543      	cmp	r3, r8
 8000b9e:	d2e5      	bcs.n	8000b6c <__udivmoddi4+0x260>
 8000ba0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ba4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7df      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bac:	4608      	mov	r0, r1
 8000bae:	e7d2      	b.n	8000b56 <__udivmoddi4+0x24a>
 8000bb0:	4660      	mov	r0, ip
 8000bb2:	e78d      	b.n	8000ad0 <__udivmoddi4+0x1c4>
 8000bb4:	4681      	mov	r9, r0
 8000bb6:	e7b9      	b.n	8000b2c <__udivmoddi4+0x220>
 8000bb8:	4666      	mov	r6, ip
 8000bba:	e775      	b.n	8000aa8 <__udivmoddi4+0x19c>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e74a      	b.n	8000a56 <__udivmoddi4+0x14a>
 8000bc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bc4:	4439      	add	r1, r7
 8000bc6:	e713      	b.n	80009f0 <__udivmoddi4+0xe4>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	e724      	b.n	8000a18 <__udivmoddi4+0x10c>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <Send_Usart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Usart (char *string)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	HAL_USART_Transmit(USART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fb19 	bl	8000214 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <Send_Usart+0x28>)
 8000bee:	f005 ff13 	bl	8006a18 <HAL_USART_Transmit>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200006f4 	.word	0x200006f4

08000c00 <Mount_USB>:



void Mount_USB (void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	490a      	ldr	r1, [pc, #40]	; (8000c30 <Mount_USB+0x30>)
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <Mount_USB+0x34>)
 8000c0a:	f00d fff5 	bl	800ebf8 <f_mount>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <Mount_USB+0x38>)
 8000c14:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Usart ("ERROR!!! in mounting USB ...\n\n");
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <Mount_USB+0x38>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <Mount_USB+0x26>
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <Mount_USB+0x3c>)
 8000c20:	f7ff ffd8 	bl	8000bd4 <Send_Usart>
	else Send_Usart("USB mounted successfully...\n");
}
 8000c24:	e002      	b.n	8000c2c <Mount_USB+0x2c>
	else Send_Usart("USB mounted successfully...\n");
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <Mount_USB+0x40>)
 8000c28:	f7ff ffd4 	bl	8000bd4 <Send_Usart>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000758 	.word	0x20000758
 8000c34:	200017b8 	.word	0x200017b8
 8000c38:	20000564 	.word	0x20000564
 8000c3c:	08011b68 	.word	0x08011b68
 8000c40:	08011b88 	.word	0x08011b88

08000c44 <Unmount_USB>:

void Unmount_USB (void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	490a      	ldr	r1, [pc, #40]	; (8000c74 <Unmount_USB+0x30>)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f00d ffd3 	bl	800ebf8 <f_mount>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <Unmount_USB+0x34>)
 8000c58:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Usart ("USB UNMOUNTED successfully...\n\n\n");
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <Unmount_USB+0x34>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d103      	bne.n	8000c6a <Unmount_USB+0x26>
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <Unmount_USB+0x38>)
 8000c64:	f7ff ffb6 	bl	8000bd4 <Send_Usart>
	else Send_Usart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000c68:	e002      	b.n	8000c70 <Unmount_USB+0x2c>
	else Send_Usart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <Unmount_USB+0x3c>)
 8000c6c:	f7ff ffb2 	bl	8000bd4 <Send_Usart>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000758 	.word	0x20000758
 8000c78:	20000564 	.word	0x20000564
 8000c7c:	08011ba8 	.word	0x08011ba8
 8000c80:	08011bcc 	.word	0x08011bcc

08000c84 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09a      	sub	sp, #104	; 0x68
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c8c:	2014      	movs	r0, #20
 8000c8e:	f00f fe1f 	bl	80108d0 <malloc>
 8000c92:	4603      	mov	r3, r0
 8000c94:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4944      	ldr	r1, [pc, #272]	; (8000dac <Scan_USB+0x128>)
 8000c9a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c9c:	f00f ff10 	bl	8010ac0 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00e fdb1 	bl	800f80e <f_opendir>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <Scan_USB+0x12c>)
 8000cb2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000cb4:	4b3e      	ldr	r3, [pc, #248]	; (8000db0 <Scan_USB+0x12c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d16e      	bne.n	8000d9a <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	493c      	ldr	r1, [pc, #240]	; (8000db4 <Scan_USB+0x130>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f00e fe72 	bl	800f9ac <f_readdir>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <Scan_USB+0x12c>)
 8000cce:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <Scan_USB+0x12c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d15b      	bne.n	8000d90 <Scan_USB+0x10c>
 8000cd8:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <Scan_USB+0x130>)
 8000cda:	7e9b      	ldrb	r3, [r3, #26]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d057      	beq.n	8000d90 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000ce0:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <Scan_USB+0x130>)
 8000ce2:	7b1b      	ldrb	r3, [r3, #12]
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d03a      	beq.n	8000d62 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000cec:	4932      	ldr	r1, [pc, #200]	; (8000db8 <Scan_USB+0x134>)
 8000cee:	4833      	ldr	r0, [pc, #204]	; (8000dbc <Scan_USB+0x138>)
 8000cf0:	f7ff fa86 	bl	8000200 <strcmp>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d045      	beq.n	8000d86 <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000cfa:	492f      	ldr	r1, [pc, #188]	; (8000db8 <Scan_USB+0x134>)
 8000cfc:	4830      	ldr	r0, [pc, #192]	; (8000dc0 <Scan_USB+0x13c>)
 8000cfe:	f7ff fa7f 	bl	8000200 <strcmp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d040      	beq.n	8000d8a <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8000d08:	201e      	movs	r0, #30
 8000d0a:	f00f fde1 	bl	80108d0 <malloc>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000d12:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <Scan_USB+0x134>)
 8000d14:	492b      	ldr	r1, [pc, #172]	; (8000dc4 <Scan_USB+0x140>)
 8000d16:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d18:	f00f fed2 	bl	8010ac0 <siprintf>
            	Send_Usart(buf);
 8000d1c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d1e:	f7ff ff59 	bl	8000bd4 <Send_Usart>
            	free(buf);
 8000d22:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d24:	f00f fddc 	bl	80108e0 <free>
                i = strlen(path);
 8000d28:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d2a:	f7ff fa73 	bl	8000214 <strlen>
 8000d2e:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d34:	4413      	add	r3, r2
 8000d36:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <Scan_USB+0x134>)
 8000d38:	4923      	ldr	r1, [pc, #140]	; (8000dc8 <Scan_USB+0x144>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00f fec0 	bl	8010ac0 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000d40:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d42:	f7ff ff9f 	bl	8000c84 <Scan_USB>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <Scan_USB+0x12c>)
 8000d4c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <Scan_USB+0x12c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d11b      	bne.n	8000d8e <Scan_USB+0x10a>
                path[i] = 0;
 8000d56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d5a:	4413      	add	r3, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e7ac      	b.n	8000cbc <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000d62:	201e      	movs	r0, #30
 8000d64:	f00f fdb4 	bl	80108d0 <malloc>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <Scan_USB+0x134>)
 8000d6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d70:	4916      	ldr	r1, [pc, #88]	; (8000dcc <Scan_USB+0x148>)
 8000d72:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d74:	f00f fea4 	bl	8010ac0 <siprintf>
               Send_Usart(buf);
 8000d78:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d7a:	f7ff ff2b 	bl	8000bd4 <Send_Usart>
               free(buf);
 8000d7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d80:	f00f fdae 	bl	80108e0 <free>
 8000d84:	e79a      	b.n	8000cbc <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000d86:	bf00      	nop
 8000d88:	e798      	b.n	8000cbc <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d8a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000d8c:	e796      	b.n	8000cbc <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000d8e:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00e fde3 	bl	800f960 <f_closedir>
    }
    free(path);
 8000d9a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d9c:	f00f fda0 	bl	80108e0 <free>
    return fresult;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <Scan_USB+0x12c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3768      	adds	r7, #104	; 0x68
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	08011bec 	.word	0x08011bec
 8000db0:	20000564 	.word	0x20000564
 8000db4:	20000568 	.word	0x20000568
 8000db8:	20000582 	.word	0x20000582
 8000dbc:	08011bf0 	.word	0x08011bf0
 8000dc0:	08011bfc 	.word	0x08011bfc
 8000dc4:	08011c18 	.word	0x08011c18
 8000dc8:	08011c24 	.word	0x08011c24
 8000dcc:	08011c28 	.word	0x08011c28

08000dd0 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000dda:	4955      	ldr	r1, [pc, #340]	; (8000f30 <Write_File+0x160>)
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f00e fe22 	bl	800fa26 <f_stat>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b53      	ldr	r3, [pc, #332]	; (8000f34 <Write_File+0x164>)
 8000de8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000dea:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <Write_File+0x164>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d012      	beq.n	8000e18 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f00f fd6c 	bl	80108d0 <malloc>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	494e      	ldr	r1, [pc, #312]	; (8000f38 <Write_File+0x168>)
 8000e00:	68b8      	ldr	r0, [r7, #8]
 8000e02:	f00f fe5d 	bl	8010ac0 <siprintf>
		Send_Usart (buf);
 8000e06:	68b8      	ldr	r0, [r7, #8]
 8000e08:	f7ff fee4 	bl	8000bd4 <Send_Usart>
	    free(buf);
 8000e0c:	68b8      	ldr	r0, [r7, #8]
 8000e0e:	f00f fd67 	bl	80108e0 <free>
	    return fresult;
 8000e12:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <Write_File+0x164>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	e087      	b.n	8000f28 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000e18:	2202      	movs	r2, #2
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	4847      	ldr	r0, [pc, #284]	; (8000f3c <Write_File+0x16c>)
 8000e1e:	f00d ff31 	bl	800ec84 <f_open>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <Write_File+0x164>)
 8000e28:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000e2a:	4b42      	ldr	r3, [pc, #264]	; (8000f34 <Write_File+0x164>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d015      	beq.n	8000e5e <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e32:	2064      	movs	r0, #100	; 0x64
 8000e34:	f00f fd4c 	bl	80108d0 <malloc>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <Write_File+0x164>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	493e      	ldr	r1, [pc, #248]	; (8000f40 <Write_File+0x170>)
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f00f fe3a 	bl	8010ac0 <siprintf>
	    	Send_Usart(buf);
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f7ff fec1 	bl	8000bd4 <Send_Usart>
	        free(buf);
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f00f fd44 	bl	80108e0 <free>
	        return fresult;
 8000e58:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <Write_File+0x164>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	e064      	b.n	8000f28 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e5e:	2064      	movs	r0, #100	; 0x64
 8000e60:	f00f fd36 	bl	80108d0 <malloc>
 8000e64:	4603      	mov	r3, r0
 8000e66:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4936      	ldr	r1, [pc, #216]	; (8000f44 <Write_File+0x174>)
 8000e6c:	69f8      	ldr	r0, [r7, #28]
 8000e6e:	f00f fe27 	bl	8010ac0 <siprintf>
	    	Send_Usart(buf);
 8000e72:	69f8      	ldr	r0, [r7, #28]
 8000e74:	f7ff feae 	bl	8000bd4 <Send_Usart>
	        free(buf);
 8000e78:	69f8      	ldr	r0, [r7, #28]
 8000e7a:	f00f fd31 	bl	80108e0 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000e7e:	6838      	ldr	r0, [r7, #0]
 8000e80:	f7ff f9c8 	bl	8000214 <strlen>
 8000e84:	4602      	mov	r2, r0
 8000e86:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <Write_File+0x178>)
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	482c      	ldr	r0, [pc, #176]	; (8000f3c <Write_File+0x16c>)
 8000e8c:	f00e f9ab 	bl	800f1e6 <f_write>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <Write_File+0x164>)
 8000e96:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <Write_File+0x164>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d012      	beq.n	8000ec6 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ea0:	2064      	movs	r0, #100	; 0x64
 8000ea2:	f00f fd15 	bl	80108d0 <malloc>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <Write_File+0x164>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4926      	ldr	r1, [pc, #152]	; (8000f4c <Write_File+0x17c>)
 8000eb4:	69b8      	ldr	r0, [r7, #24]
 8000eb6:	f00f fe03 	bl	8010ac0 <siprintf>
	    		Send_Usart(buf);
 8000eba:	69b8      	ldr	r0, [r7, #24]
 8000ebc:	f7ff fe8a 	bl	8000bd4 <Send_Usart>
	    		free(buf);
 8000ec0:	69b8      	ldr	r0, [r7, #24]
 8000ec2:	f00f fd0d 	bl	80108e0 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000ec6:	481d      	ldr	r0, [pc, #116]	; (8000f3c <Write_File+0x16c>)
 8000ec8:	f00e fc77 	bl	800f7ba <f_close>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <Write_File+0x164>)
 8000ed2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <Write_File+0x164>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d013      	beq.n	8000f04 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000edc:	2064      	movs	r0, #100	; 0x64
 8000ede:	f00f fcf7 	bl	80108d0 <malloc>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <Write_File+0x164>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4918      	ldr	r1, [pc, #96]	; (8000f50 <Write_File+0x180>)
 8000ef0:	6938      	ldr	r0, [r7, #16]
 8000ef2:	f00f fde5 	bl	8010ac0 <siprintf>
	    		Send_Usart(buf);
 8000ef6:	6938      	ldr	r0, [r7, #16]
 8000ef8:	f7ff fe6c 	bl	8000bd4 <Send_Usart>
	    		free(buf);
 8000efc:	6938      	ldr	r0, [r7, #16]
 8000efe:	f00f fcef 	bl	80108e0 <free>
 8000f02:	e00f      	b.n	8000f24 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f00f fce3 	bl	80108d0 <malloc>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4910      	ldr	r1, [pc, #64]	; (8000f54 <Write_File+0x184>)
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f00f fdd4 	bl	8010ac0 <siprintf>
	    		Send_Usart(buf);
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	f7ff fe5b 	bl	8000bd4 <Send_Usart>
	    		free(buf);
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f00f fcde 	bl	80108e0 <free>
	    	}
	    }
	    return fresult;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <Write_File+0x164>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000568 	.word	0x20000568
 8000f34:	20000564 	.word	0x20000564
 8000f38:	08011c3c 	.word	0x08011c3c
 8000f3c:	20000760 	.word	0x20000760
 8000f40:	08011c5c 	.word	0x08011c5c
 8000f44:	08011c84 	.word	0x08011c84
 8000f48:	20000560 	.word	0x20000560
 8000f4c:	08011cb0 	.word	0x08011cb0
 8000f50:	08011ce4 	.word	0x08011ce4
 8000f54:	08011d1c 	.word	0x08011d1c

08000f58 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000f60:	4943      	ldr	r1, [pc, #268]	; (8001070 <Create_File+0x118>)
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f00e fd5f 	bl	800fa26 <f_stat>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b41      	ldr	r3, [pc, #260]	; (8001074 <Create_File+0x11c>)
 8000f6e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000f70:	4b40      	ldr	r3, [pc, #256]	; (8001074 <Create_File+0x11c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d112      	bne.n	8000f9e <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000f78:	2064      	movs	r0, #100	; 0x64
 8000f7a:	f00f fca9 	bl	80108d0 <malloc>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	493c      	ldr	r1, [pc, #240]	; (8001078 <Create_File+0x120>)
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f00f fd9a 	bl	8010ac0 <siprintf>
		Send_Usart(buf);
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f7ff fe21 	bl	8000bd4 <Send_Usart>
		free(buf);
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f00f fca4 	bl	80108e0 <free>
	    return fresult;
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <Create_File+0x11c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	e063      	b.n	8001066 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000f9e:	220b      	movs	r2, #11
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4836      	ldr	r0, [pc, #216]	; (800107c <Create_File+0x124>)
 8000fa4:	f00d fe6e 	bl	800ec84 <f_open>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b31      	ldr	r3, [pc, #196]	; (8001074 <Create_File+0x11c>)
 8000fae:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000fb0:	4b30      	ldr	r3, [pc, #192]	; (8001074 <Create_File+0x11c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d015      	beq.n	8000fe4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000fb8:	2064      	movs	r0, #100	; 0x64
 8000fba:	f00f fc89 	bl	80108d0 <malloc>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <Create_File+0x11c>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	492d      	ldr	r1, [pc, #180]	; (8001080 <Create_File+0x128>)
 8000fcc:	6938      	ldr	r0, [r7, #16]
 8000fce:	f00f fd77 	bl	8010ac0 <siprintf>
			Send_Usart(buf);
 8000fd2:	6938      	ldr	r0, [r7, #16]
 8000fd4:	f7ff fdfe 	bl	8000bd4 <Send_Usart>
			free(buf);
 8000fd8:	6938      	ldr	r0, [r7, #16]
 8000fda:	f00f fc81 	bl	80108e0 <free>
		    return fresult;
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <Create_File+0x11c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	e040      	b.n	8001066 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f00f fc73 	bl	80108d0 <malloc>
 8000fea:	4603      	mov	r3, r0
 8000fec:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4924      	ldr	r1, [pc, #144]	; (8001084 <Create_File+0x12c>)
 8000ff2:	69f8      	ldr	r0, [r7, #28]
 8000ff4:	f00f fd64 	bl	8010ac0 <siprintf>
			Send_Usart(buf);
 8000ff8:	69f8      	ldr	r0, [r7, #28]
 8000ffa:	f7ff fdeb 	bl	8000bd4 <Send_Usart>
			free(buf);
 8000ffe:	69f8      	ldr	r0, [r7, #28]
 8001000:	f00f fc6e 	bl	80108e0 <free>
		}

		fresult = f_close(&USBHFile);
 8001004:	481d      	ldr	r0, [pc, #116]	; (800107c <Create_File+0x124>)
 8001006:	f00e fbd8 	bl	800f7ba <f_close>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <Create_File+0x11c>)
 8001010:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <Create_File+0x11c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d013      	beq.n	8001042 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f00f fc58 	bl	80108d0 <malloc>
 8001020:	4603      	mov	r3, r0
 8001022:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <Create_File+0x11c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4916      	ldr	r1, [pc, #88]	; (8001088 <Create_File+0x130>)
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f00f fd46 	bl	8010ac0 <siprintf>
			Send_Usart(buf);
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff fdcd 	bl	8000bd4 <Send_Usart>
			free(buf);
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f00f fc50 	bl	80108e0 <free>
 8001040:	e00f      	b.n	8001062 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f00f fc44 	bl	80108d0 <malloc>
 8001048:	4603      	mov	r3, r0
 800104a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	490f      	ldr	r1, [pc, #60]	; (800108c <Create_File+0x134>)
 8001050:	69b8      	ldr	r0, [r7, #24]
 8001052:	f00f fd35 	bl	8010ac0 <siprintf>
			Send_Usart(buf);
 8001056:	69b8      	ldr	r0, [r7, #24]
 8001058:	f7ff fdbc 	bl	8000bd4 <Send_Usart>
			free(buf);
 800105c:	69b8      	ldr	r0, [r7, #24]
 800105e:	f00f fc3f 	bl	80108e0 <free>
		}
	}
    return fresult;
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <Create_File+0x11c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000568 	.word	0x20000568
 8001074:	20000564 	.word	0x20000564
 8001078:	08011e10 	.word	0x08011e10
 800107c:	20000760 	.word	0x20000760
 8001080:	08011e48 	.word	0x08011e48
 8001084:	08011e70 	.word	0x08011e70
 8001088:	08011eb0 	.word	0x08011eb0
 800108c:	08011df0 	.word	0x08011df0

08001090 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 800109a:	495e      	ldr	r1, [pc, #376]	; (8001214 <Update_File+0x184>)
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f00e fcc2 	bl	800fa26 <f_stat>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b5c      	ldr	r3, [pc, #368]	; (8001218 <Update_File+0x188>)
 80010a8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80010aa:	4b5b      	ldr	r3, [pc, #364]	; (8001218 <Update_File+0x188>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d012      	beq.n	80010d8 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80010b2:	2064      	movs	r0, #100	; 0x64
 80010b4:	f00f fc0c 	bl	80108d0 <malloc>
 80010b8:	4603      	mov	r3, r0
 80010ba:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4957      	ldr	r1, [pc, #348]	; (800121c <Update_File+0x18c>)
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f00f fcfd 	bl	8010ac0 <siprintf>
		Send_Usart (buf);
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff fd84 	bl	8000bd4 <Send_Usart>
		free(buf);
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f00f fc07 	bl	80108e0 <free>
	    return fresult;
 80010d2:	4b51      	ldr	r3, [pc, #324]	; (8001218 <Update_File+0x188>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	e098      	b.n	800120a <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 80010d8:	2232      	movs	r2, #50	; 0x32
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4850      	ldr	r0, [pc, #320]	; (8001220 <Update_File+0x190>)
 80010de:	f00d fdd1 	bl	800ec84 <f_open>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <Update_File+0x188>)
 80010e8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010ea:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <Update_File+0x188>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d015      	beq.n	800111e <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80010f2:	2064      	movs	r0, #100	; 0x64
 80010f4:	f00f fbec 	bl	80108d0 <malloc>
 80010f8:	4603      	mov	r3, r0
 80010fa:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80010fc:	4b46      	ldr	r3, [pc, #280]	; (8001218 <Update_File+0x188>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4947      	ldr	r1, [pc, #284]	; (8001224 <Update_File+0x194>)
 8001106:	6938      	ldr	r0, [r7, #16]
 8001108:	f00f fcda 	bl	8010ac0 <siprintf>
	    	Send_Usart(buf);
 800110c:	6938      	ldr	r0, [r7, #16]
 800110e:	f7ff fd61 	bl	8000bd4 <Send_Usart>
	        free(buf);
 8001112:	6938      	ldr	r0, [r7, #16]
 8001114:	f00f fbe4 	bl	80108e0 <free>
	        return fresult;
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <Update_File+0x188>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	e075      	b.n	800120a <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 800111e:	2064      	movs	r0, #100	; 0x64
 8001120:	f00f fbd6 	bl	80108d0 <malloc>
 8001124:	4603      	mov	r3, r0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	493f      	ldr	r1, [pc, #252]	; (8001228 <Update_File+0x198>)
 800112c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800112e:	f00f fcc7 	bl	8010ac0 <siprintf>
    	Send_Usart(buf);
 8001132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001134:	f7ff fd4e 	bl	8000bd4 <Send_Usart>
        free(buf);
 8001138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800113a:	f00f fbd1 	bl	80108e0 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f7ff f868 	bl	8000214 <strlen>
 8001144:	4602      	mov	r2, r0
 8001146:	4b39      	ldr	r3, [pc, #228]	; (800122c <Update_File+0x19c>)
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	4835      	ldr	r0, [pc, #212]	; (8001220 <Update_File+0x190>)
 800114c:	f00e f84b 	bl	800f1e6 <f_write>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <Update_File+0x188>)
 8001156:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <Update_File+0x188>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f00f fbb5 	bl	80108d0 <malloc>
 8001166:	4603      	mov	r3, r0
 8001168:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <Update_File+0x188>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	492f      	ldr	r1, [pc, #188]	; (8001230 <Update_File+0x1a0>)
 8001174:	69f8      	ldr	r0, [r7, #28]
 8001176:	f00f fca3 	bl	8010ac0 <siprintf>
	    	Send_Usart(buf);
 800117a:	69f8      	ldr	r0, [r7, #28]
 800117c:	f7ff fd2a 	bl	8000bd4 <Send_Usart>
	    	free(buf);
 8001180:	69f8      	ldr	r0, [r7, #28]
 8001182:	f00f fbad 	bl	80108e0 <free>
 8001186:	e00f      	b.n	80011a8 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f00f fba1 	bl	80108d0 <malloc>
 800118e:	4603      	mov	r3, r0
 8001190:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4927      	ldr	r1, [pc, #156]	; (8001234 <Update_File+0x1a4>)
 8001196:	6a38      	ldr	r0, [r7, #32]
 8001198:	f00f fc92 	bl	8010ac0 <siprintf>
	    	Send_Usart(buf);
 800119c:	6a38      	ldr	r0, [r7, #32]
 800119e:	f7ff fd19 	bl	8000bd4 <Send_Usart>
	    	free(buf);
 80011a2:	6a38      	ldr	r0, [r7, #32]
 80011a4:	f00f fb9c 	bl	80108e0 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 80011a8:	481d      	ldr	r0, [pc, #116]	; (8001220 <Update_File+0x190>)
 80011aa:	f00e fb06 	bl	800f7ba <f_close>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <Update_File+0x188>)
 80011b4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <Update_File+0x188>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d013      	beq.n	80011e6 <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011be:	2064      	movs	r0, #100	; 0x64
 80011c0:	f00f fb86 	bl	80108d0 <malloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <Update_File+0x188>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4919      	ldr	r1, [pc, #100]	; (8001238 <Update_File+0x1a8>)
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f00f fc74 	bl	8010ac0 <siprintf>
	    	Send_Usart(buf);
 80011d8:	6978      	ldr	r0, [r7, #20]
 80011da:	f7ff fcfb 	bl	8000bd4 <Send_Usart>
	    	free(buf);
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f00f fb7e 	bl	80108e0 <free>
 80011e4:	e00f      	b.n	8001206 <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f00f fb72 	bl	80108d0 <malloc>
 80011ec:	4603      	mov	r3, r0
 80011ee:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4912      	ldr	r1, [pc, #72]	; (800123c <Update_File+0x1ac>)
 80011f4:	69b8      	ldr	r0, [r7, #24]
 80011f6:	f00f fc63 	bl	8010ac0 <siprintf>
	    	Send_Usart(buf);
 80011fa:	69b8      	ldr	r0, [r7, #24]
 80011fc:	f7ff fcea 	bl	8000bd4 <Send_Usart>
	    	free(buf);
 8001200:	69b8      	ldr	r0, [r7, #24]
 8001202:	f00f fb6d 	bl	80108e0 <free>
	     }
	}
    return fresult;
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <Update_File+0x188>)
 8001208:	781b      	ldrb	r3, [r3, #0]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000568 	.word	0x20000568
 8001218:	20000564 	.word	0x20000564
 800121c:	08011c3c 	.word	0x08011c3c
 8001220:	20000760 	.word	0x20000760
 8001224:	08011c5c 	.word	0x08011c5c
 8001228:	08011ed4 	.word	0x08011ed4
 800122c:	20000560 	.word	0x20000560
 8001230:	08011f04 	.word	0x08011f04
 8001234:	08011f2c 	.word	0x08011f2c
 8001238:	08011dc8 	.word	0x08011dc8
 800123c:	08011df0 	.word	0x08011df0

08001240 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f00e fd2c 	bl	800fca6 <f_mkdir>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <Create_Dir+0x74>)
 8001254:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <Create_Dir+0x74>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d110      	bne.n	8001280 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 800125e:	2064      	movs	r0, #100	; 0x64
 8001260:	f00f fb36 	bl	80108d0 <malloc>
 8001264:	4603      	mov	r3, r0
 8001266:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4913      	ldr	r1, [pc, #76]	; (80012b8 <Create_Dir+0x78>)
 800126c:	68b8      	ldr	r0, [r7, #8]
 800126e:	f00f fc27 	bl	8010ac0 <siprintf>
    	Send_Usart (buf);
 8001272:	68b8      	ldr	r0, [r7, #8]
 8001274:	f7ff fcae 	bl	8000bd4 <Send_Usart>
    	free(buf);
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f00f fb31 	bl	80108e0 <free>
 800127e:	e012      	b.n	80012a6 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001280:	2064      	movs	r0, #100	; 0x64
 8001282:	f00f fb25 	bl	80108d0 <malloc>
 8001286:	4603      	mov	r3, r0
 8001288:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <Create_Dir+0x74>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	490a      	ldr	r1, [pc, #40]	; (80012bc <Create_Dir+0x7c>)
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f00f fc13 	bl	8010ac0 <siprintf>
    	Send_Usart(buf);
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f7ff fc9a 	bl	8000bd4 <Send_Usart>
    	free(buf);
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f00f fb1d 	bl	80108e0 <free>
    }
    return fresult;
 80012a6:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <Create_Dir+0x74>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000564 	.word	0x20000564
 80012b8:	08011f90 	.word	0x08011f90
 80012bc:	08011fb8 	.word	0x08011fb8

080012c0 <Check_USB_Details>:

void Check_USB_Details (void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 80012c6:	4a30      	ldr	r2, [pc, #192]	; (8001388 <Check_USB_Details+0xc8>)
 80012c8:	4930      	ldr	r1, [pc, #192]	; (800138c <Check_USB_Details+0xcc>)
 80012ca:	4831      	ldr	r0, [pc, #196]	; (8001390 <Check_USB_Details+0xd0>)
 80012cc:	f00e fbe4 	bl	800fa98 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <Check_USB_Details+0xc8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	3b02      	subs	r3, #2
 80012d8:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <Check_USB_Details+0xc8>)
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	8952      	ldrh	r2, [r2, #10]
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fa60 	bl	80007a8 <__aeabi_ui2d>
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <Check_USB_Details+0xd4>)
 80012ee:	f7fe ffef 	bl	80002d0 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff facf 	bl	800089c <__aeabi_d2uiz>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <Check_USB_Details+0xd8>)
 8001302:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001304:	201e      	movs	r0, #30
 8001306:	f00f fae3 	bl	80108d0 <malloc>
 800130a:	4603      	mov	r3, r0
 800130c:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <Check_USB_Details+0xd8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4921      	ldr	r1, [pc, #132]	; (800139c <Check_USB_Details+0xdc>)
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f00f fbd2 	bl	8010ac0 <siprintf>
    Send_Usart(buf);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fc59 	bl	8000bd4 <Send_Usart>
    free(buf);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f00f fadc 	bl	80108e0 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <Check_USB_Details+0xc8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	895b      	ldrh	r3, [r3, #10]
 800132e:	461a      	mov	r2, r3
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <Check_USB_Details+0xcc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	fb03 f302 	mul.w	r3, r3, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fa35 	bl	80007a8 <__aeabi_ui2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <Check_USB_Details+0xd4>)
 8001344:	f7fe ffc4 	bl	80002d0 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff faa4 	bl	800089c <__aeabi_d2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <Check_USB_Details+0xe0>)
 8001358:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 800135a:	201e      	movs	r0, #30
 800135c:	f00f fab8 	bl	80108d0 <malloc>
 8001360:	4603      	mov	r3, r0
 8001362:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <Check_USB_Details+0xe0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <Check_USB_Details+0xe4>)
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f00f fba7 	bl	8010ac0 <siprintf>
    Send_Usart(buf);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fc2e 	bl	8000bd4 <Send_Usart>
    free(buf);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f00f fab1 	bl	80108e0 <free>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000558 	.word	0x20000558
 800138c:	20000550 	.word	0x20000550
 8001390:	08011fe4 	.word	0x08011fe4
 8001394:	3fe00000 	.word	0x3fe00000
 8001398:	20000688 	.word	0x20000688
 800139c:	08011fe8 	.word	0x08011fe8
 80013a0:	2000055c 	.word	0x2000055c
 80013a4:	08012000 	.word	0x08012000

080013a8 <blinky>:
/* USER CODE BEGIN 0 */
// ************************************************* START FUNCTIONS HERE ***************************************

// Blinky!!
void blinky(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e011      	b.n	80013d8 <blinky+0x30>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <blinky+0x40>)
 80013b8:	f002 f97a 	bl	80036b0 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80013bc:	2064      	movs	r0, #100	; 0x64
 80013be:	f000 fc87 	bl	8001cd0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80013c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <blinky+0x40>)
 80013c8:	f002 f972 	bl	80036b0 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80013cc:	2064      	movs	r0, #100	; 0x64
 80013ce:	f000 fc7f 	bl	8001cd0 <HAL_Delay>
	for(int i = 0; i < 2; i ++)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	ddea      	ble.n	80013b4 <blinky+0xc>
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	48000400 	.word	0x48000400

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f2:	f000 fbf8 	bl	8001be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f6:	f000 f82f 	bl	8001458 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013fa:	f000 f886 	bl	800150a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fe:	f000 f975 	bl	80016ec <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8001402:	f00e fec1 	bl	8010188 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8001406:	f000 f8af 	bl	8001568 <MX_ADC1_Init>
  MX_USART1_Init();
 800140a:	f000 f923 	bl	8001654 <MX_USART1_Init>
  MX_FATFS_Init();
 800140e:	f006 fed1 	bl	80081b4 <MX_FATFS_Init>
  // ************************************************* START BEFORE WHILE CODE HERE ***************************************

  // Bootup Blinkys
  // These are put in place to allow programming before the microcontroller enters its sleep loop, currently its set to wait 5 seconds before entering sleep mode

  printf("System Starting!");
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <main+0x64>)
 8001414:	f00f fb2c 	bl	8010a70 <iprintf>

  blinky();
 8001418:	f7ff ffc6 	bl	80013a8 <blinky>
  HAL_Delay(5000);
 800141c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001420:	f000 fc56 	bl	8001cd0 <HAL_Delay>
  blinky();
 8001424:	f7ff ffc0 	bl	80013a8 <blinky>
  //Assign ADC Variable
  uint16_t ADC_READING = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800142c:	f00e fed2 	bl	80101d4 <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */


    // ************************************************* START WHILE CODE HERE ***************************************
    //Start ADC Conversion
    HAL_ADC_Start(&hadc1);
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <main+0x68>)
 8001432:	f000 ffb9 	bl	80023a8 <HAL_ADC_Start>

    //Poll ADC 1 Periferal and Timeout 1ms
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001436:	f04f 31ff 	mov.w	r1, #4294967295
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <main+0x68>)
 800143c:	f001 f86e 	bl	800251c <HAL_ADC_PollForConversion>

    //Store ADC Value in ADC_Reading
    ADC_READING = HAL_ADC_GetValue(&hadc1);
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <main+0x68>)
 8001442:	f001 f943 	bl	80026cc <HAL_ADC_GetValue>
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]

    // Enter sleep mode using RTC wakeup functions
    // enterSleepMode(3); // Parameter depicts how long the sleep cycle is (currently its set to 3 seconds)
    blinky();
 800144a:	f7ff ffad 	bl	80013a8 <blinky>
    MX_USB_HOST_Process();
 800144e:	e7ed      	b.n	800142c <main+0x40>
 8001450:	08012018 	.word	0x08012018
 8001454:	2000068c 	.word	0x2000068c

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b098      	sub	sp, #96	; 0x60
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2248      	movs	r2, #72	; 0x48
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f00f fa50 	bl	801090c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800147a:	2000      	movs	r0, #0
 800147c:	f003 fcfc 	bl	8004e78 <HAL_PWREx_ControlVoltageScaling>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001486:	f000 f999 	bl	80017bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800148a:	2310      	movs	r3, #16
 800148c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800148e:	2301      	movs	r3, #1
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001496:	2360      	movs	r3, #96	; 0x60
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	2302      	movs	r3, #2
 800149c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800149e:	2301      	movs	r3, #1
 80014a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80014a6:	233c      	movs	r3, #60	; 0x3c
 80014a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fd90 	bl	8004fe0 <HAL_RCC_OscConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014c6:	f000 f979 	bl	80017bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ca:	230f      	movs	r3, #15
 80014cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ce:	2303      	movs	r3, #3
 80014d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2105      	movs	r1, #5
 80014e2:	4618      	mov	r0, r3
 80014e4:	f004 fa04 	bl	80058f0 <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ee:	f000 f965 	bl	80017bc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80014f8:	2000      	movs	r0, #0
 80014fa:	f004 fb25 	bl	8005b48 <HAL_RCC_MCOConfig>
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014fe:	f005 f849 	bl	8006594 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001502:	bf00      	nop
 8001504:	3760      	adds	r7, #96	; 0x60
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b0a6      	sub	sp, #152	; 0x98
 800150e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2298      	movs	r2, #152	; 0x98
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f00f f9f8 	bl	801090c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800151c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001520:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800152a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800152e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001530:	2301      	movs	r3, #1
 8001532:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001538:	2318      	movs	r3, #24
 800153a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001548:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800154c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fcb3 	bl	8005ebc <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800155c:	f000 f92e 	bl	80017bc <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3798      	adds	r7, #152	; 0x98
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <MX_ADC1_Init+0xe0>)
 800158c:	4a2f      	ldr	r2, [pc, #188]	; (800164c <MX_ADC1_Init+0xe4>)
 800158e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_ADC1_Init+0xe0>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <MX_ADC1_Init+0xe0>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_ADC1_Init+0xe0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015aa:	2204      	movs	r2, #4
 80015ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015bc:	2201      	movs	r2, #1
 80015be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ea:	4817      	ldr	r0, [pc, #92]	; (8001648 <MX_ADC1_Init+0xe0>)
 80015ec:	f000 fd8a 	bl	8002104 <HAL_ADC_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80015f6:	f000 f8e1 	bl	80017bc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <MX_ADC1_Init+0xe0>)
 8001606:	f001 fcf3 	bl	8002ff0 <HAL_ADCEx_MultiModeConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001610:	f000 f8d4 	bl	80017bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_ADC1_Init+0xe8>)
 8001616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001618:	2306      	movs	r3, #6
 800161a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001620:	237f      	movs	r3, #127	; 0x7f
 8001622:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001624:	2304      	movs	r3, #4
 8001626:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_ADC1_Init+0xe0>)
 8001632:	f001 f859 	bl	80026e8 <HAL_ADC_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800163c:	f000 f8be 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000068c 	.word	0x2000068c
 800164c:	50040000 	.word	0x50040000
 8001650:	43210000 	.word	0x43210000

08001654 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <MX_USART1_Init+0x90>)
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <MX_USART1_Init+0x94>)
 800165c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <MX_USART1_Init+0x90>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <MX_USART1_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_USART1_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_USART1_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_USART1_Init+0x90>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_USART1_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_USART1_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_USART1_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_USART1_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_USART1_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800169c:	4811      	ldr	r0, [pc, #68]	; (80016e4 <MX_USART1_Init+0x90>)
 800169e:	f005 f971 	bl	8006984 <HAL_USART_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80016a8:	f000 f888 	bl	80017bc <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ac:	2100      	movs	r1, #0
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_USART1_Init+0x90>)
 80016b0:	f005 fdf6 	bl	80072a0 <HAL_USARTEx_SetTxFifoThreshold>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80016ba:	f000 f87f 	bl	80017bc <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016be:	2100      	movs	r1, #0
 80016c0:	4808      	ldr	r0, [pc, #32]	; (80016e4 <MX_USART1_Init+0x90>)
 80016c2:	f005 fe2b 	bl	800731c <HAL_USARTEx_SetRxFifoThreshold>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80016cc:	f000 f876 	bl	80017bc <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_USART1_Init+0x90>)
 80016d2:	f005 fdac 	bl	800722e <HAL_USARTEx_DisableFifoMode>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 80016dc:	f000 f86e 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200006f4 	.word	0x200006f4
 80016e8:	40013800 	.word	0x40013800

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <MX_GPIO_Init+0xc8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a2b      	ldr	r2, [pc, #172]	; (80017b4 <MX_GPIO_Init+0xc8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <MX_GPIO_Init+0xc8>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <MX_GPIO_Init+0xc8>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <MX_GPIO_Init+0xc8>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_GPIO_Init+0xc8>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001732:	2200      	movs	r2, #0
 8001734:	21f8      	movs	r1, #248	; 0xf8
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f001 ffa1 	bl	8003680 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Charge_Enable_Pin|GPIO_PIN_12|GPIO_PIN_13
 800173e:	2200      	movs	r2, #0
 8001740:	f247 4101 	movw	r1, #29697	; 0x7401
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <MX_GPIO_Init+0xcc>)
 8001746:	f001 ff9b 	bl	8003680 <HAL_GPIO_WritePin>
                          |_5V_SHDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800174a:	23f8      	movs	r3, #248	; 0xf8
 800174c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001764:	f001 fdfa 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Charge_Enable_Pin PB12 PB13
                           _5V_SHDN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Charge_Enable_Pin|GPIO_PIN_12|GPIO_PIN_13
 8001768:	f247 4301 	movw	r3, #29697	; 0x7401
 800176c:	60fb      	str	r3, [r7, #12]
                          |_5V_SHDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4619      	mov	r1, r3
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_GPIO_Init+0xcc>)
 8001782:	f001 fdeb 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f001 fdd9 	bl	800335c <HAL_GPIO_Init>

}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48000400 	.word	0x48000400

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_MspInit+0x44>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_MspInit+0x44>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6613      	str	r3, [r2, #96]	; 0x60
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_MspInit+0x44>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_MspInit+0x44>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_MspInit+0x44>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_MspInit+0x44>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <HAL_ADC_MspInit+0xa4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d13c      	bne.n	80018ac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 8001838:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_ADC_MspInit+0xa8>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800187a:	2307      	movs	r3, #7
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800187e:	230b      	movs	r3, #11
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001890:	f001 fd64 	bl	800335c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001894:	2302      	movs	r3, #2
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001898:	230b      	movs	r3, #11
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_ADC_MspInit+0xac>)
 80018a8:	f001 fd58 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	50040000 	.word	0x50040000
 80018b8:	40021000 	.word	0x40021000
 80018bc:	48000400 	.word	0x48000400

080018c0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0b0      	sub	sp, #192	; 0xc0
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2298      	movs	r2, #152	; 0x98
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00f f813 	bl	801090c <memset>
  if(husart->Instance==USART1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <HAL_USART_MspInit+0xf4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d15d      	bne.n	80019ac <HAL_USART_MspInit+0xec>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018f4:	2300      	movs	r3, #0
 80018f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4618      	mov	r0, r3
 80018fe:	f004 fadd 	bl	8005ebc <HAL_RCCEx_PeriphCLKConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8001908:	f7ff ff58 	bl	80017bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6613      	str	r3, [r2, #96]	; 0x60
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 800191a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_USART_MspInit+0xf8>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB5     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001954:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800196e:	2307      	movs	r3, #7
 8001970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f001 fced 	bl	800335c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001982:	2320      	movs	r3, #32
 8001984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199a:	2307      	movs	r3, #7
 800199c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_USART_MspInit+0xfc>)
 80019a8:	f001 fcd8 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	37c0      	adds	r7, #192	; 0xc0
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40013800 	.word	0x40013800
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48000400 	.word	0x48000400

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f940 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <OTG_FS_IRQHandler+0x10>)
 8001a1a:	f002 f8c9 	bl	8003bb0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20002bd0 	.word	0x20002bd0

08001a28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00a      	b.n	8001a50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	4601      	mov	r1, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf0      	blt.n	8001a3a <_read+0x12>
	}

return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e009      	b.n	8001a88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf1      	blt.n	8001a74 <_write+0x12>
	}
	return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_close>:

int _close(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f00e fea2 	bl	801087c <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20050000 	.word	0x20050000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	200000ac 	.word	0x200000ac
 8001b6c:	20002ee8 	.word	0x20002ee8

08001b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b98:	f7ff ffea 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <LoopForever+0xe>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <LoopForever+0x16>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f00e fe61 	bl	8010888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc6:	f7ff fc11 	bl	80013ec <main>

08001bca <LoopForever>:

LoopForever:
    b LoopForever
 8001bca:	e7fe      	b.n	8001bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bcc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001bd8:	08012720 	.word	0x08012720
  ldr r2, =_sbss
 8001bdc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001be0:	20002ee4 	.word	0x20002ee4

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>

08001be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f001 fb71 	bl	80032d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f80e 	bl	8001c18 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	71fb      	strb	r3, [r7, #7]
 8001c06:	e001      	b.n	8001c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c08:	f7ff fdde 	bl	80017c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_InitTick+0x6c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d023      	beq.n	8001c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_InitTick+0x70>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_InitTick+0x6c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fb7d 	bl	8003342 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10f      	bne.n	8001c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d809      	bhi.n	8001c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f001 fb47 	bl	80032ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_InitTick+0x74>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e007      	b.n	8001c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e004      	b.n	8001c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e001      	b.n	8001c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000754 	.word	0x20000754

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000754 	.word	0x20000754

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ffee 	bl	8001cb8 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008

08001d18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	609a      	str	r2, [r3, #8]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3360      	adds	r3, #96	; 0x60
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <LL_ADC_SetOffset+0x44>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	03fff000 	.word	0x03fff000

08001dc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3360      	adds	r3, #96	; 0x60
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3360      	adds	r3, #96	; 0x60
 8001e04:	461a      	mov	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	615a      	str	r2, [r3, #20]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b087      	sub	sp, #28
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3330      	adds	r3, #48	; 0x30
 8001e86:	461a      	mov	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	4413      	add	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	211f      	movs	r1, #31
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	f003 011f 	and.w	r1, r3, #31
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b087      	sub	sp, #28
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3314      	adds	r3, #20
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	0e5b      	lsrs	r3, r3, #25
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	0d1b      	lsrs	r3, r3, #20
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	2107      	movs	r1, #7
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0d1b      	lsrs	r3, r3, #20
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	431a      	orrs	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f18:	bf00      	nop
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0318 	and.w	r3, r3, #24
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f48:	40d9      	lsrs	r1, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	431a      	orrs	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	0007ffff 	.word	0x0007ffff

08001f6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 031f 	and.w	r3, r3, #31
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6093      	str	r3, [r2, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002004:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800202c:	d101      	bne.n	8002032 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <LL_ADC_IsEnabled+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_IsEnabled+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800209e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a2:	f043 0204 	orr.w	r2, r3, #4
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d101      	bne.n	80020ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d101      	bne.n	80020f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e134      	b.n	8002388 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fb6f 	bl	8001810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff3f 	bl	8001fc8 <LL_ADC_IsDeepPowerDownEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff25 	bl	8001fa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff5a 	bl	8002018 <LL_ADC_IsInternalRegulatorEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff3e 	bl	8001ff0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002174:	4b86      	ldr	r3, [pc, #536]	; (8002390 <HAL_ADC_Init+0x28c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	4a86      	ldr	r2, [pc, #536]	; (8002394 <HAL_ADC_Init+0x290>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	3301      	adds	r3, #1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002188:	e002      	b.n	8002190 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff3c 	bl	8002018 <LL_ADC_IsInternalRegulatorEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff75 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 80021cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80cd 	bne.w	8002376 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80c9 	bne.w	8002376 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff35 	bl	8002068 <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d110      	bne.n	8002226 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002204:	4864      	ldr	r0, [pc, #400]	; (8002398 <HAL_ADC_Init+0x294>)
 8002206:	f7ff ff2f 	bl	8002068 <LL_ADC_IsEnabled>
 800220a:	4604      	mov	r4, r0
 800220c:	4863      	ldr	r0, [pc, #396]	; (800239c <HAL_ADC_Init+0x298>)
 800220e:	f7ff ff2b 	bl	8002068 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	4323      	orrs	r3, r4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4619      	mov	r1, r3
 8002220:	485f      	ldr	r0, [pc, #380]	; (80023a0 <HAL_ADC_Init+0x29c>)
 8002222:	f7ff fd79 	bl	8001d18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7e5b      	ldrb	r3, [r3, #25]
 800222a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002230:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002236:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800223c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002244:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	3b01      	subs	r3, #1
 800225a:	045b      	lsls	r3, r3, #17
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_ADC_Init+0x2a0>)
 8002286:	4013      	ands	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	69b9      	ldr	r1, [r7, #24]
 800228e:	430b      	orrs	r3, r1
 8002290:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff0d 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 800229c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff1a 	bl	80020dc <LL_ADC_INJ_IsConversionOngoing>
 80022a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d140      	bne.n	8002332 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d13d      	bne.n	8002332 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7e1b      	ldrb	r3, [r3, #24]
 80022be:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c0:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d8:	f023 0306 	bic.w	r3, r3, #6
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	69b9      	ldr	r1, [r7, #24]
 80022e2:	430b      	orrs	r3, r1
 80022e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d118      	bne.n	8002322 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022fa:	f023 0304 	bic.w	r3, r3, #4
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002312:	430a      	orrs	r2, r1
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	e007      	b.n	8002332 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10c      	bne.n	8002354 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	f023 010f 	bic.w	r1, r3, #15
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
 8002352:	e007      	b.n	8002364 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 020f 	bic.w	r2, r2, #15
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f023 0303 	bic.w	r3, r3, #3
 800236c:	f043 0201 	orr.w	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	659a      	str	r2, [r3, #88]	; 0x58
 8002374:	e007      	b.n	8002386 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002386:	7ffb      	ldrb	r3, [r7, #31]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3724      	adds	r7, #36	; 0x24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	20000000 	.word	0x20000000
 8002394:	053e2d63 	.word	0x053e2d63
 8002398:	50040000 	.word	0x50040000
 800239c:	50040100 	.word	0x50040100
 80023a0:	50040300 	.word	0x50040300
 80023a4:	fff0c007 	.word	0xfff0c007

080023a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b0:	4857      	ldr	r0, [pc, #348]	; (8002510 <HAL_ADC_Start+0x168>)
 80023b2:	f7ff fddb 	bl	8001f6c <LL_ADC_GetMultimode>
 80023b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fe7a 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 809c 	bne.w	8002502 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_Start+0x30>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e097      	b.n	8002508 <HAL_ADC_Start+0x160>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fd7d 	bl	8002ee0 <ADC_Enable>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 8083 	bne.w	80024f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a42      	ldr	r2, [pc, #264]	; (8002514 <HAL_ADC_Start+0x16c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d002      	beq.n	8002416 <HAL_ADC_Start+0x6e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	e000      	b.n	8002418 <HAL_ADC_Start+0x70>
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <HAL_ADC_Start+0x170>)
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	4293      	cmp	r3, r2
 800241e:	d002      	beq.n	8002426 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d106      	bne.n	800244e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f023 0206 	bic.w	r2, r3, #6
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c
 800244c:	e002      	b.n	8002454 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	221c      	movs	r2, #28
 800245a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <HAL_ADC_Start+0x16c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d002      	beq.n	8002474 <HAL_ADC_Start+0xcc>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e000      	b.n	8002476 <HAL_ADC_Start+0xce>
 8002474:	4b28      	ldr	r3, [pc, #160]	; (8002518 <HAL_ADC_Start+0x170>)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	4293      	cmp	r3, r2
 800247c:	d008      	beq.n	8002490 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d002      	beq.n	8002490 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b09      	cmp	r3, #9
 800248e:	d114      	bne.n	80024ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fdeb 	bl	800208e <LL_ADC_REG_StartConversion>
 80024b8:	e025      	b.n	8002506 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_ADC_Start+0x16c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d002      	beq.n	80024d6 <HAL_ADC_Start+0x12e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e000      	b.n	80024d8 <HAL_ADC_Start+0x130>
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_ADC_Start+0x170>)
 80024d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	; 0x58
 80024f6:	e006      	b.n	8002506 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002500:	e001      	b.n	8002506 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	50040300 	.word	0x50040300
 8002514:	50040100 	.word	0x50040100
 8002518:	50040000 	.word	0x50040000

0800251c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002526:	4866      	ldr	r0, [pc, #408]	; (80026c0 <HAL_ADC_PollForConversion+0x1a4>)
 8002528:	f7ff fd20 	bl	8001f6c <LL_ADC_GetMultimode>
 800252c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b08      	cmp	r3, #8
 8002534:	d102      	bne.n	800253c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002536:	2308      	movs	r3, #8
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e02a      	b.n	8002592 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d002      	beq.n	800254e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b09      	cmp	r3, #9
 800254c:	d111      	bne.n	8002572 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0a4      	b.n	80026b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800256c:	2304      	movs	r3, #4
 800256e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002570:	e00f      	b.n	8002592 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002572:	4853      	ldr	r0, [pc, #332]	; (80026c0 <HAL_ADC_PollForConversion+0x1a4>)
 8002574:	f7ff fd08 	bl	8001f88 <LL_ADC_GetMultiDMATransfer>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e093      	b.n	80026b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800258e:	2304      	movs	r3, #4
 8002590:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002592:	f7ff fb91 	bl	8001cb8 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002598:	e021      	b.n	80025de <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d01d      	beq.n	80025de <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025a2:	f7ff fb89 	bl	8001cb8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d302      	bcc.n	80025b8 <HAL_ADC_PollForConversion+0x9c>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d112      	bne.n	80025de <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e06b      	b.n	80026b6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0d6      	beq.n	800259a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fc27 	bl	8001e50 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01c      	beq.n	8002642 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7e5b      	ldrb	r3, [r3, #25]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d118      	bne.n	8002642 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b08      	cmp	r3, #8
 800261c:	d111      	bne.n	8002642 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <HAL_ADC_PollForConversion+0x1a8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d002      	beq.n	8002652 <HAL_ADC_PollForConversion+0x136>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e000      	b.n	8002654 <HAL_ADC_PollForConversion+0x138>
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_ADC_PollForConversion+0x1ac>)
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4293      	cmp	r3, r2
 800265a:	d008      	beq.n	800266e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d002      	beq.n	800266e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b09      	cmp	r3, #9
 800266c:	d104      	bne.n	8002678 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e00c      	b.n	8002692 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_ADC_PollForConversion+0x1a8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d002      	beq.n	8002688 <HAL_ADC_PollForConversion+0x16c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	e000      	b.n	800268a <HAL_ADC_PollForConversion+0x16e>
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_ADC_PollForConversion+0x1ac>)
 800268a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d104      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2208      	movs	r2, #8
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e008      	b.n	80026b4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	220c      	movs	r2, #12
 80026b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	50040300 	.word	0x50040300
 80026c4:	50040100 	.word	0x50040100
 80026c8:	50040000 	.word	0x50040000

080026cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0b6      	sub	sp, #216	; 0xd8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x22>
 8002706:	2302      	movs	r3, #2
 8002708:	e3d5      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x7ce>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fccd 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 83ba 	bne.w	8002e98 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d824      	bhi.n	8002776 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	3b02      	subs	r3, #2
 8002732:	2b03      	cmp	r3, #3
 8002734:	d81b      	bhi.n	800276e <HAL_ADC_ConfigChannel+0x86>
 8002736:	a201      	add	r2, pc, #4	; (adr r2, 800273c <HAL_ADC_ConfigChannel+0x54>)
 8002738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273c:	0800274d 	.word	0x0800274d
 8002740:	08002755 	.word	0x08002755
 8002744:	0800275d 	.word	0x0800275d
 8002748:	08002765 	.word	0x08002765
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	220c      	movs	r2, #12
 8002750:	605a      	str	r2, [r3, #4]
          break;
 8002752:	e011      	b.n	8002778 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2212      	movs	r2, #18
 8002758:	605a      	str	r2, [r3, #4]
          break;
 800275a:	e00d      	b.n	8002778 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2218      	movs	r2, #24
 8002760:	605a      	str	r2, [r3, #4]
          break;
 8002762:	e009      	b.n	8002778 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800276a:	605a      	str	r2, [r3, #4]
          break;
 800276c:	e004      	b.n	8002778 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2206      	movs	r2, #6
 8002772:	605a      	str	r2, [r3, #4]
          break;
 8002774:	e000      	b.n	8002778 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002776:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	f7ff fb76 	bl	8001e76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fc91 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 8002794:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fc9d 	bl	80020dc <LL_ADC_INJ_IsConversionOngoing>
 80027a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 81c1 	bne.w	8002b32 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 81bc 	bne.w	8002b32 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027c2:	d10f      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7ff fb7d 	bl	8001ece <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fb24 	bl	8001e2a <LL_ADC_SetSamplingTimeCommonConfig>
 80027e2:	e00e      	b.n	8002802 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	461a      	mov	r2, r3
 80027f2:	f7ff fb6c 	bl	8001ece <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fb14 	bl	8001e2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00a      	beq.n	800283a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6919      	ldr	r1, [r3, #16]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002834:	f7ff faa4 	bl	8001d80 <LL_ADC_SetOffset>
 8002838:	e17b      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fac1 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x17e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fab6 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	e01e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x1bc>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff faab 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002884:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800288c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e004      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1d4>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	e018      	b.n	80028ee <HAL_ADC_ConfigChannel+0x206>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e004      	b.n	80028ee <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80028e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d106      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fa7a 	bl	8001df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fa5e 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_ADC_ConfigChannel+0x244>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fa53 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	f003 021f 	and.w	r2, r3, #31
 800292a:	e01e      	b.n	800296a <HAL_ADC_ConfigChannel+0x282>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fa48 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800294a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800294e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002952:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e004      	b.n	8002968 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800295e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x29a>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	e018      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x2cc>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002996:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800299a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800299e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e004      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80029aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d106      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2200      	movs	r2, #0
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fa17 	bl	8001df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff f9fb 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x30a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2102      	movs	r1, #2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f9f0 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	e01e      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x348>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2102      	movs	r1, #2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f9e5 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e004      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x360>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	e016      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x38e>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	e004      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d106      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2102      	movs	r1, #2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f9b6 	bl	8001df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2103      	movs	r1, #3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f99a 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x3cc>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2103      	movs	r1, #3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff f98f 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	e017      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x3fc>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2103      	movs	r1, #3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f984 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ace:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x414>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	e011      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x438>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d106      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2103      	movs	r1, #3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f961 	bl	8001df4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fa96 	bl	8002068 <LL_ADC_IsEnabled>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 8140 	bne.w	8002dc4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f7ff f9e7 	bl	8001f24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a8f      	ldr	r2, [pc, #572]	; (8002d98 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	f040 8131 	bne.w	8002dc4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x4a2>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2b09      	cmp	r3, #9
 8002b80:	bf94      	ite	ls
 8002b82:	2301      	movls	r3, #1
 8002b84:	2300      	movhi	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	e019      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x4d6>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	bf94      	ite	ls
 8002bb8:	2301      	movls	r3, #1
 8002bba:	2300      	movhi	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d079      	beq.n	8002cb6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d107      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x4f6>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	069b      	lsls	r3, r3, #26
 8002bd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bdc:	e015      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x522>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e003      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	069b      	lsls	r3, r3, #26
 8002c06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x542>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	e017      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x572>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e003      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	ea42 0103 	orr.w	r1, r2, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x598>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	e018      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x5ca>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e003      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f003 021f 	and.w	r2, r3, #31
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	e081      	b.n	8002dba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x5ea>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	3301      	adds	r3, #1
 8002cca:	069b      	lsls	r3, r3, #26
 8002ccc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd0:	e015      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x616>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002cea:	2320      	movs	r3, #32
 8002cec:	e003      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	069b      	lsls	r3, r3, #26
 8002cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x636>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	e017      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x666>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e003      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	ea42 0103 	orr.w	r1, r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10d      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x692>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	0e9b      	lsrs	r3, r3, #26
 8002d64:	3301      	adds	r3, #1
 8002d66:	f003 021f 	and.w	r2, r3, #31
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b1e      	subs	r3, #30
 8002d72:	051b      	lsls	r3, r3, #20
 8002d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d78:	e01e      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x6d0>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	613b      	str	r3, [r7, #16]
  return result;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002d92:	2320      	movs	r3, #32
 8002d94:	e006      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x6bc>
 8002d96:	bf00      	nop
 8002d98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f003 021f 	and.w	r2, r3, #31
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	3b1e      	subs	r3, #30
 8002db2:	051b      	lsls	r3, r3, #20
 8002db4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db8:	430b      	orrs	r3, r1
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	6892      	ldr	r2, [r2, #8]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f7ff f885 	bl	8001ece <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d06c      	beq.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd0:	483c      	ldr	r0, [pc, #240]	; (8002ec4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dd2:	f7fe ffc7 	bl	8001d64 <LL_ADC_GetCommonPathInternalCh>
 8002dd6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a3a      	ldr	r2, [pc, #232]	; (8002ec8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d127      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d121      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a35      	ldr	r2, [pc, #212]	; (8002ecc <HAL_ADC_ConfigChannel+0x7e4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d157      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e02:	4619      	mov	r1, r3
 8002e04:	482f      	ldr	r0, [pc, #188]	; (8002ec4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e06:	f7fe ff9a 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e0a:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e24:	e002      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f9      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e32:	e03a      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <HAL_ADC_ConfigChannel+0x7f0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d113      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x77e>
 8002e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10d      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_ADC_ConfigChannel+0x7e4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d12a      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4819      	ldr	r0, [pc, #100]	; (8002ec4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e60:	f7fe ff6d 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e64:	e021      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_ADC_ConfigChannel+0x7f4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d11c      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <HAL_ADC_ConfigChannel+0x7e4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d111      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e92:	f7fe ff54 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
 8002e96:	e008      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002eb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	37d8      	adds	r7, #216	; 0xd8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	80080000 	.word	0x80080000
 8002ec4:	50040300 	.word	0x50040300
 8002ec8:	c7520000 	.word	0xc7520000
 8002ecc:	50040000 	.word	0x50040000
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	053e2d63 	.word	0x053e2d63
 8002ed8:	cb840000 	.word	0xcb840000
 8002edc:	80000001 	.word	0x80000001

08002ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff f8bb 	bl	8002068 <LL_ADC_IsEnabled>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d14d      	bne.n	8002f94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <ADC_Enable+0xc0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f043 0210 	orr.w	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e039      	b.n	8002f96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f88a 	bl	8002040 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fec4 	bl	8001cb8 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f32:	e028      	b.n	8002f86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f895 	bl	8002068 <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff f879 	bl	8002040 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f4e:	f7fe feb3 	bl	8001cb8 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d914      	bls.n	8002f86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d00d      	beq.n	8002f86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	f043 0210 	orr.w	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e007      	b.n	8002f96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d1cf      	bne.n	8002f34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	8000003f 	.word	0x8000003f

08002fa4 <LL_ADC_IsEnabled>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <LL_ADC_IsEnabled+0x18>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <LL_ADC_IsEnabled+0x1a>
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_ADC_REG_IsConversionOngoing>:
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d101      	bne.n	8002fe2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b0a1      	sub	sp, #132	; 0x84
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800300a:	2302      	movs	r3, #2
 800300c:	e089      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003016:	2300      	movs	r3, #0
 8003018:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800301a:	2300      	movs	r3, #0
 800301c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a42      	ldr	r2, [pc, #264]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d102      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003028:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e001      	b.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e068      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ffb9 	bl	8002fca <LL_ADC_REG_IsConversionOngoing>
 8003058:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ffb3 	bl	8002fca <LL_ADC_REG_IsConversionOngoing>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d14a      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800306a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306c:	2b00      	cmp	r3, #0
 800306e:	d147      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003072:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d027      	beq.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800307c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800308e:	035b      	lsls	r3, r3, #13
 8003090:	430b      	orrs	r3, r1
 8003092:	431a      	orrs	r2, r3
 8003094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003096:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003098:	4824      	ldr	r0, [pc, #144]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800309a:	f7ff ff83 	bl	8002fa4 <LL_ADC_IsEnabled>
 800309e:	4604      	mov	r4, r0
 80030a0:	4823      	ldr	r0, [pc, #140]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030a2:	f7ff ff7f 	bl	8002fa4 <LL_ADC_IsEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4323      	orrs	r3, r4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d132      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030b6:	f023 030f 	bic.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6811      	ldr	r1, [r2, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ca:	e023      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d8:	4814      	ldr	r0, [pc, #80]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80030da:	f7ff ff63 	bl	8002fa4 <LL_ADC_IsEnabled>
 80030de:	4604      	mov	r4, r0
 80030e0:	4813      	ldr	r0, [pc, #76]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030e2:	f7ff ff5f 	bl	8002fa4 <LL_ADC_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4323      	orrs	r3, r4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d112      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030f6:	f023 030f 	bic.w	r3, r3, #15
 80030fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030fe:	e009      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003112:	e000      	b.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003114:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800311e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003122:	4618      	mov	r0, r3
 8003124:	3784      	adds	r7, #132	; 0x84
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	50040000 	.word	0x50040000
 8003130:	50040100 	.word	0x50040100
 8003134:	50040300 	.word	0x50040300

08003138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003154:	4013      	ands	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	60d3      	str	r3, [r2, #12]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <__NVIC_GetPriorityGrouping+0x18>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	f003 0307 	and.w	r3, r3, #7
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0b      	blt.n	80031c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4907      	ldr	r1, [pc, #28]	; (80031d4 <__NVIC_EnableIRQ+0x38>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000e100 	.word	0xe000e100

080031d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	db0a      	blt.n	8003202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	490c      	ldr	r1, [pc, #48]	; (8003224 <__NVIC_SetPriority+0x4c>)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	440b      	add	r3, r1
 80031fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003200:	e00a      	b.n	8003218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4908      	ldr	r1, [pc, #32]	; (8003228 <__NVIC_SetPriority+0x50>)
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	3b04      	subs	r3, #4
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	440b      	add	r3, r1
 8003216:	761a      	strb	r2, [r3, #24]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000e100 	.word	0xe000e100
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f1c3 0307 	rsb	r3, r3, #7
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf28      	it	cs
 800324a:	2304      	movcs	r3, #4
 800324c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3304      	adds	r3, #4
 8003252:	2b06      	cmp	r3, #6
 8003254:	d902      	bls.n	800325c <NVIC_EncodePriority+0x30>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3b03      	subs	r3, #3
 800325a:	e000      	b.n	800325e <NVIC_EncodePriority+0x32>
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	f04f 32ff 	mov.w	r2, #4294967295
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	401a      	ands	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003274:	f04f 31ff 	mov.w	r1, #4294967295
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43d9      	mvns	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003284:	4313      	orrs	r3, r2
         );
}
 8003286:	4618      	mov	r0, r3
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d301      	bcc.n	80032aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00f      	b.n	80032ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <SysTick_Config+0x40>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b2:	210f      	movs	r1, #15
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	f7ff ff8e 	bl	80031d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SysTick_Config+0x40>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <SysTick_Config+0x40>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	e000e010 	.word	0xe000e010

080032d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff29 	bl	8003138 <__NVIC_SetPriorityGrouping>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003300:	f7ff ff3e 	bl	8003180 <__NVIC_GetPriorityGrouping>
 8003304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	6978      	ldr	r0, [r7, #20]
 800330c:	f7ff ff8e 	bl	800322c <NVIC_EncodePriority>
 8003310:	4602      	mov	r2, r0
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff5d 	bl	80031d8 <__NVIC_SetPriority>
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff31 	bl	800319c <__NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ffa2 	bl	8003294 <SysTick_Config>
 8003350:	4603      	mov	r3, r0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336a:	e166      	b.n	800363a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	2101      	movs	r1, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8158 	beq.w	8003634 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d005      	beq.n	800339c <HAL_GPIO_Init+0x40>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d130      	bne.n	80033fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033d2:	2201      	movs	r2, #1
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f003 0201 	and.w	r2, r3, #1
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b03      	cmp	r3, #3
 8003408:	d017      	beq.n	800343a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	2203      	movs	r2, #3
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d123      	bne.n	800348e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	08da      	lsrs	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3208      	adds	r2, #8
 800344e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	220f      	movs	r2, #15
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	08da      	lsrs	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3208      	adds	r2, #8
 8003488:	6939      	ldr	r1, [r7, #16]
 800348a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0203 	and.w	r2, r3, #3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80b2 	beq.w	8003634 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d0:	4b61      	ldr	r3, [pc, #388]	; (8003658 <HAL_GPIO_Init+0x2fc>)
 80034d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d4:	4a60      	ldr	r2, [pc, #384]	; (8003658 <HAL_GPIO_Init+0x2fc>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6613      	str	r3, [r2, #96]	; 0x60
 80034dc:	4b5e      	ldr	r3, [pc, #376]	; (8003658 <HAL_GPIO_Init+0x2fc>)
 80034de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034e8:	4a5c      	ldr	r2, [pc, #368]	; (800365c <HAL_GPIO_Init+0x300>)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	3302      	adds	r3, #2
 80034f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	220f      	movs	r2, #15
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003512:	d02b      	beq.n	800356c <HAL_GPIO_Init+0x210>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_GPIO_Init+0x304>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d025      	beq.n	8003568 <HAL_GPIO_Init+0x20c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a51      	ldr	r2, [pc, #324]	; (8003664 <HAL_GPIO_Init+0x308>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d01f      	beq.n	8003564 <HAL_GPIO_Init+0x208>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a50      	ldr	r2, [pc, #320]	; (8003668 <HAL_GPIO_Init+0x30c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d019      	beq.n	8003560 <HAL_GPIO_Init+0x204>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a4f      	ldr	r2, [pc, #316]	; (800366c <HAL_GPIO_Init+0x310>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <HAL_GPIO_Init+0x200>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a4e      	ldr	r2, [pc, #312]	; (8003670 <HAL_GPIO_Init+0x314>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00d      	beq.n	8003558 <HAL_GPIO_Init+0x1fc>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a4d      	ldr	r2, [pc, #308]	; (8003674 <HAL_GPIO_Init+0x318>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <HAL_GPIO_Init+0x1f8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a4c      	ldr	r2, [pc, #304]	; (8003678 <HAL_GPIO_Init+0x31c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_GPIO_Init+0x1f4>
 800354c:	2307      	movs	r3, #7
 800354e:	e00e      	b.n	800356e <HAL_GPIO_Init+0x212>
 8003550:	2308      	movs	r3, #8
 8003552:	e00c      	b.n	800356e <HAL_GPIO_Init+0x212>
 8003554:	2306      	movs	r3, #6
 8003556:	e00a      	b.n	800356e <HAL_GPIO_Init+0x212>
 8003558:	2305      	movs	r3, #5
 800355a:	e008      	b.n	800356e <HAL_GPIO_Init+0x212>
 800355c:	2304      	movs	r3, #4
 800355e:	e006      	b.n	800356e <HAL_GPIO_Init+0x212>
 8003560:	2303      	movs	r3, #3
 8003562:	e004      	b.n	800356e <HAL_GPIO_Init+0x212>
 8003564:	2302      	movs	r3, #2
 8003566:	e002      	b.n	800356e <HAL_GPIO_Init+0x212>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_GPIO_Init+0x212>
 800356c:	2300      	movs	r3, #0
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	f002 0203 	and.w	r2, r2, #3
 8003574:	0092      	lsls	r2, r2, #2
 8003576:	4093      	lsls	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800357e:	4937      	ldr	r1, [pc, #220]	; (800365c <HAL_GPIO_Init+0x300>)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	3302      	adds	r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800358c:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_GPIO_Init+0x320>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b0:	4a32      	ldr	r2, [pc, #200]	; (800367c <HAL_GPIO_Init+0x320>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_GPIO_Init+0x320>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035da:	4a28      	ldr	r2, [pc, #160]	; (800367c <HAL_GPIO_Init+0x320>)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <HAL_GPIO_Init+0x320>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003604:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_GPIO_Init+0x320>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_GPIO_Init+0x320>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <HAL_GPIO_Init+0x320>)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f47f ae91 	bne.w	800336c <HAL_GPIO_Init+0x10>
  }
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40021000 	.word	0x40021000
 800365c:	40010000 	.word	0x40010000
 8003660:	48000400 	.word	0x48000400
 8003664:	48000800 	.word	0x48000800
 8003668:	48000c00 	.word	0x48000c00
 800366c:	48001000 	.word	0x48001000
 8003670:	48001400 	.word	0x48001400
 8003674:	48001800 	.word	0x48001800
 8003678:	48001c00 	.word	0x48001c00
 800367c:	40010400 	.word	0x40010400

08003680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800369c:	e002      	b.n	80036a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036c2:	887a      	ldrh	r2, [r7, #2]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4013      	ands	r3, r2
 80036c8:	041a      	lsls	r2, r3, #16
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43d9      	mvns	r1, r3
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	400b      	ands	r3, r1
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	b08f      	sub	sp, #60	; 0x3c
 80036e8:	af0a      	add	r7, sp, #40	; 0x28
 80036ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e054      	b.n	80037a0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f00c fdd5 	bl	80102c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2203      	movs	r2, #3
 800371a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f003 feb6 	bl	80074a6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	687e      	ldr	r6, [r7, #4]
 8003742:	466d      	mov	r5, sp
 8003744:	f106 0410 	add.w	r4, r6, #16
 8003748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800374a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800374c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800374e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003754:	e885 0003 	stmia.w	r5, {r0, r1}
 8003758:	1d33      	adds	r3, r6, #4
 800375a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800375c:	6838      	ldr	r0, [r7, #0]
 800375e:	f003 fe65 	bl	800742c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f003 fead 	bl	80074c8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	687e      	ldr	r6, [r7, #4]
 8003776:	466d      	mov	r5, sp
 8003778:	f106 0410 	add.w	r4, r6, #16
 800377c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800377e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003784:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003788:	e885 0003 	stmia.w	r5, {r0, r1}
 800378c:	1d33      	adds	r3, r6, #4
 800378e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	f004 f82b 	bl	80077ec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af04      	add	r7, sp, #16
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	70fb      	strb	r3, [r7, #3]
 80037ba:	460b      	mov	r3, r1
 80037bc:	70bb      	strb	r3, [r7, #2]
 80037be:	4613      	mov	r3, r2
 80037c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_HCD_HC_Init+0x28>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e076      	b.n	80038be <HAL_HCD_HC_Init+0x116>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	333d      	adds	r3, #61	; 0x3d
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	3338      	adds	r3, #56	; 0x38
 80037f8:	787a      	ldrb	r2, [r7, #1]
 80037fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3340      	adds	r3, #64	; 0x40
 800380a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800380c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	3339      	adds	r3, #57	; 0x39
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	212c      	movs	r1, #44	; 0x2c
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	4413      	add	r3, r2
 800382c:	333f      	adds	r3, #63	; 0x3f
 800382e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	78ba      	ldrb	r2, [r7, #2]
 8003838:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800383c:	b2d0      	uxtb	r0, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	333a      	adds	r3, #58	; 0x3a
 800384a:	4602      	mov	r2, r0
 800384c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800384e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da09      	bge.n	800386a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	333b      	adds	r3, #59	; 0x3b
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e008      	b.n	800387c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	333b      	adds	r3, #59	; 0x3b
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	333c      	adds	r3, #60	; 0x3c
 800388a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800388e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	787c      	ldrb	r4, [r7, #1]
 8003896:	78ba      	ldrb	r2, [r7, #2]
 8003898:	78f9      	ldrb	r1, [r7, #3]
 800389a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800389c:	9302      	str	r3, [sp, #8]
 800389e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	4623      	mov	r3, r4
 80038ac:	f004 f8e6 	bl	8007a7c <USB_HC_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd90      	pop	{r4, r7, pc}

080038c6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_HCD_HC_Halt+0x1e>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e00f      	b.n	8003904 <HAL_HCD_HC_Halt+0x3e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 fad2 	bl	8007e9e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	461a      	mov	r2, r3
 800391a:	4603      	mov	r3, r0
 800391c:	70fb      	strb	r3, [r7, #3]
 800391e:	460b      	mov	r3, r1
 8003920:	70bb      	strb	r3, [r7, #2]
 8003922:	4613      	mov	r3, r2
 8003924:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	212c      	movs	r1, #44	; 0x2c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	333b      	adds	r3, #59	; 0x3b
 8003934:	78ba      	ldrb	r2, [r7, #2]
 8003936:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	333f      	adds	r3, #63	; 0x3f
 8003946:	787a      	ldrb	r2, [r7, #1]
 8003948:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800394a:	7c3b      	ldrb	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d112      	bne.n	8003976 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	212c      	movs	r1, #44	; 0x2c
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	3342      	adds	r3, #66	; 0x42
 800395e:	2203      	movs	r2, #3
 8003960:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	333d      	adds	r3, #61	; 0x3d
 8003970:	7f3a      	ldrb	r2, [r7, #28]
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e008      	b.n	8003988 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	3342      	adds	r3, #66	; 0x42
 8003984:	2202      	movs	r2, #2
 8003986:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003988:	787b      	ldrb	r3, [r7, #1]
 800398a:	2b03      	cmp	r3, #3
 800398c:	f200 80c6 	bhi.w	8003b1c <HAL_HCD_HC_SubmitRequest+0x210>
 8003990:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039a9 	.word	0x080039a9
 800399c:	08003b09 	.word	0x08003b09
 80039a0:	08003a0d 	.word	0x08003a0d
 80039a4:	08003a8b 	.word	0x08003a8b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80039a8:	7c3b      	ldrb	r3, [r7, #16]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	f040 80b8 	bne.w	8003b20 <HAL_HCD_HC_SubmitRequest+0x214>
 80039b0:	78bb      	ldrb	r3, [r7, #2]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 80b4 	bne.w	8003b20 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80039b8:	8b3b      	ldrh	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d108      	bne.n	80039d0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3355      	adds	r3, #85	; 0x55
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3355      	adds	r3, #85	; 0x55
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3342      	adds	r3, #66	; 0x42
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039f6:	e093      	b.n	8003b20 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	3342      	adds	r3, #66	; 0x42
 8003a06:	2202      	movs	r2, #2
 8003a08:	701a      	strb	r2, [r3, #0]
      break;
 8003a0a:	e089      	b.n	8003b20 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003a0c:	78bb      	ldrb	r3, [r7, #2]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11d      	bne.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3355      	adds	r3, #85	; 0x55
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3342      	adds	r3, #66	; 0x42
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003a38:	e073      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	3342      	adds	r3, #66	; 0x42
 8003a48:	2202      	movs	r2, #2
 8003a4a:	701a      	strb	r2, [r3, #0]
      break;
 8003a4c:	e069      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	212c      	movs	r1, #44	; 0x2c
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3354      	adds	r3, #84	; 0x54
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	212c      	movs	r1, #44	; 0x2c
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3342      	adds	r3, #66	; 0x42
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
      break;
 8003a74:	e055      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	212c      	movs	r1, #44	; 0x2c
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	3342      	adds	r3, #66	; 0x42
 8003a84:	2202      	movs	r2, #2
 8003a86:	701a      	strb	r2, [r3, #0]
      break;
 8003a88:	e04b      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003a8a:	78bb      	ldrb	r3, [r7, #2]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11d      	bne.n	8003acc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	212c      	movs	r1, #44	; 0x2c
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3355      	adds	r3, #85	; 0x55
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	212c      	movs	r1, #44	; 0x2c
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3342      	adds	r3, #66	; 0x42
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003ab6:	e034      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	212c      	movs	r1, #44	; 0x2c
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3342      	adds	r3, #66	; 0x42
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	701a      	strb	r2, [r3, #0]
      break;
 8003aca:	e02a      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	212c      	movs	r1, #44	; 0x2c
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3354      	adds	r3, #84	; 0x54
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3342      	adds	r3, #66	; 0x42
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
      break;
 8003af2:	e016      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	212c      	movs	r1, #44	; 0x2c
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3342      	adds	r3, #66	; 0x42
 8003b02:	2202      	movs	r2, #2
 8003b04:	701a      	strb	r2, [r3, #0]
      break;
 8003b06:	e00c      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	212c      	movs	r1, #44	; 0x2c
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3342      	adds	r3, #66	; 0x42
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
      break;
 8003b1a:	e002      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003b1c:	bf00      	nop
 8003b1e:	e000      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003b20:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3344      	adds	r3, #68	; 0x44
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	8b3a      	ldrh	r2, [r7, #24]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	202c      	movs	r0, #44	; 0x2c
 8003b3c:	fb00 f303 	mul.w	r3, r0, r3
 8003b40:	440b      	add	r3, r1
 8003b42:	334c      	adds	r3, #76	; 0x4c
 8003b44:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3360      	adds	r3, #96	; 0x60
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	212c      	movs	r1, #44	; 0x2c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3350      	adds	r3, #80	; 0x50
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3339      	adds	r3, #57	; 0x39
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3361      	adds	r3, #97	; 0x61
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	222c      	movs	r2, #44	; 0x2c
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	3338      	adds	r3, #56	; 0x38
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f004 f873 	bl	8007c8c <USB_HC_StartXfer>
 8003ba6:	4603      	mov	r3, r0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 fdcf 	bl	800776a <USB_GetMode>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	f040 80f6 	bne.w	8003dc0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f003 fdb3 	bl	8007744 <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80ec 	beq.w	8003dbe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 fdaa 	bl	8007744 <USB_ReadInterrupts>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bfa:	d104      	bne.n	8003c06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f003 fd9a 	bl	8007744 <USB_ReadInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1a:	d104      	bne.n	8003c26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 fd8a 	bl	8007744 <USB_ReadInterrupts>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c3a:	d104      	bne.n	8003c46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f003 fd7a 	bl	8007744 <USB_ReadInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d103      	bne.n	8003c62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 fd6c 	bl	8007744 <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c76:	d11c      	bne.n	8003cb2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003c92:	2110      	movs	r1, #16
 8003c94:	6938      	ldr	r0, [r7, #16]
 8003c96:	f003 fc63 	bl	8007560 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003c9a:	6938      	ldr	r0, [r7, #16]
 8003c9c:	f003 fc92 	bl	80075c4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 fe22 	bl	80078f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f00c fb89 	bl	80103c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 fd44 	bl	8007744 <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc6:	d102      	bne.n	8003cce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f001 f841 	bl	8004d50 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f003 fd36 	bl	8007744 <USB_ReadInterrupts>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d106      	bne.n	8003cf0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f00c fb52 	bl	801038c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2208      	movs	r2, #8
 8003cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f003 fd25 	bl	8007744 <USB_ReadInterrupts>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d101      	bne.n	8003d08 <HAL_HCD_IRQHandler+0x158>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_HCD_IRQHandler+0x15a>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0210 	bic.w	r2, r2, #16
 8003d1c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 ff44 	bl	8004bac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0210 	orr.w	r2, r2, #16
 8003d32:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f003 fd03 	bl	8007744 <USB_ReadInterrupts>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d48:	d13a      	bne.n	8003dc0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 f894 	bl	8007e7c <USB_HC_ReadInterrupt>
 8003d54:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e025      	b.n	8003da8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d018      	beq.n	8003da2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d86:	d106      	bne.n	8003d96 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8ab 	bl	8003eea <HCD_HC_IN_IRQHandler>
 8003d94:	e005      	b.n	8003da2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fc03 	bl	80045a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3301      	adds	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d3d4      	bcc.n	8003d5c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dba:	615a      	str	r2, [r3, #20]
 8003dbc:	e000      	b.n	8003dc0 <HAL_HCD_IRQHandler+0x210>
      return;
 8003dbe:	bf00      	nop
    }
  }
}
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_HCD_Start+0x16>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e013      	b.n	8003e04 <HAL_HCD_Start+0x3e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f003 fde4 	bl	80079b8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 fb45 	bl	8007484 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_HCD_Stop+0x16>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e00d      	b.n	8003e3e <HAL_HCD_Stop+0x32>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 f92f 	bl	8008092 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f003 fd86 	bl	8007964 <USB_ResetPort>
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3360      	adds	r3, #96	; 0x60
 8003e7c:	781b      	ldrb	r3, [r3, #0]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3350      	adds	r3, #80	; 0x50
 8003ea4:	681b      	ldr	r3, [r3, #0]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f003 fdca 	bl	8007a58 <USB_GetCurrentFrame>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f003 fda5 	bl	8007a2a <USB_GetHostSpeed>
 8003ee0:	4603      	mov	r3, r0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b086      	sub	sp, #24
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d11a      	bne.n	8003f50 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f26:	461a      	mov	r2, r3
 8003f28:	2304      	movs	r3, #4
 8003f2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	3361      	adds	r3, #97	; 0x61
 8003f3a:	2206      	movs	r2, #6
 8003f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f003 ffa8 	bl	8007e9e <USB_HC_Halt>
 8003f4e:	e0af      	b.n	80040b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	d11b      	bne.n	8003fa0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f74:	461a      	mov	r2, r3
 8003f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	3361      	adds	r3, #97	; 0x61
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f003 ff80 	bl	8007e9e <USB_HC_Halt>
 8003f9e:	e087      	b.n	80040b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d109      	bne.n	8003fca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	6093      	str	r3, [r2, #8]
 8003fc8:	e072      	b.n	80040b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d11a      	bne.n	8004016 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	461a      	mov	r2, r3
 8003fee:	2308      	movs	r3, #8
 8003ff0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3361      	adds	r3, #97	; 0x61
 8004000:	2205      	movs	r2, #5
 8004002:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f003 ff45 	bl	8007e9e <USB_HC_Halt>
 8004014:	e04c      	b.n	80040b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d11b      	bne.n	8004066 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403a:	461a      	mov	r2, r3
 800403c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004040:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3361      	adds	r3, #97	; 0x61
 8004050:	2208      	movs	r2, #8
 8004052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f003 ff1d 	bl	8007e9e <USB_HC_Halt>
 8004064:	e024      	b.n	80040b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d119      	bne.n	80040b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004088:	461a      	mov	r2, r3
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	212c      	movs	r1, #44	; 0x2c
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	4413      	add	r3, r2
 800409a:	3361      	adds	r3, #97	; 0x61
 800409c:	2206      	movs	r2, #6
 800409e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 fef7 	bl	8007e9e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c6:	d112      	bne.n	80040ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f003 fee3 	bl	8007e9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	461a      	mov	r2, r3
 80040e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80040ec:	e258      	b.n	80045a0 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 80ed 	bne.w	80042e0 <HCD_HC_IN_IRQHandler+0x3f6>
    hhcd->hc[ch_num].state = HC_XFRC;
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	212c      	movs	r1, #44	; 0x2c
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	3361      	adds	r3, #97	; 0x61
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	335c      	adds	r3, #92	; 0x5c
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4413      	add	r3, r2
 8004132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004136:	461a      	mov	r2, r3
 8004138:	2301      	movs	r3, #1
 800413a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	333f      	adds	r3, #63	; 0x3f
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	333f      	adds	r3, #63	; 0x3f
 800415e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004160:	2b02      	cmp	r3, #2
 8004162:	d111      	bne.n	8004188 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f003 fe95 	bl	8007e9e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004180:	461a      	mov	r2, r3
 8004182:	2310      	movs	r3, #16
 8004184:	6093      	str	r3, [r2, #8]
 8004186:	e066      	b.n	8004256 <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	333f      	adds	r3, #63	; 0x3f
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d127      	bne.n	80041ec <HCD_HC_IN_IRQHandler+0x302>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	3360      	adds	r3, #96	; 0x60
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	b2d9      	uxtb	r1, r3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	202c      	movs	r0, #44	; 0x2c
 80041d8:	fb00 f303 	mul.w	r3, r0, r3
 80041dc:	4413      	add	r3, r2
 80041de:	3360      	adds	r3, #96	; 0x60
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f00c f8fb 	bl	80103e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041ea:	e034      	b.n	8004256 <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	333f      	adds	r3, #63	; 0x3f
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d12a      	bne.n	8004256 <HCD_HC_IN_IRQHandler+0x36c>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	212c      	movs	r1, #44	; 0x2c
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	4413      	add	r3, r2
 800420c:	3360      	adds	r3, #96	; 0x60
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	3354      	adds	r3, #84	; 0x54
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	f083 0301 	eor.w	r3, r3, #1
 8004226:	b2d8      	uxtb	r0, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	212c      	movs	r1, #44	; 0x2c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3354      	adds	r3, #84	; 0x54
 8004236:	4602      	mov	r2, r0
 8004238:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	b2d9      	uxtb	r1, r3
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	202c      	movs	r0, #44	; 0x2c
 8004244:	fb00 f303 	mul.w	r3, r0, r3
 8004248:	4413      	add	r3, r2
 800424a:	3360      	adds	r3, #96	; 0x60
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f00c f8c5 	bl	80103e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d12b      	bne.n	80042b6 <HCD_HC_IN_IRQHandler+0x3cc>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	3348      	adds	r3, #72	; 0x48
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	202c      	movs	r0, #44	; 0x2c
 8004274:	fb00 f202 	mul.w	r2, r0, r2
 8004278:	440a      	add	r2, r1
 800427a:	3240      	adds	r2, #64	; 0x40
 800427c:	8812      	ldrh	r2, [r2, #0]
 800427e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 818a 	beq.w	80045a0 <HCD_HC_IN_IRQHandler+0x6b6>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	3354      	adds	r3, #84	; 0x54
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f083 0301 	eor.w	r3, r3, #1
 80042a0:	b2d8      	uxtb	r0, r3
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	3354      	adds	r3, #84	; 0x54
 80042b0:	4602      	mov	r2, r0
 80042b2:	701a      	strb	r2, [r3, #0]
}
 80042b4:	e174      	b.n	80045a0 <HCD_HC_IN_IRQHandler+0x6b6>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	3354      	adds	r3, #84	; 0x54
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f083 0301 	eor.w	r3, r3, #1
 80042ca:	b2d8      	uxtb	r0, r3
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	3354      	adds	r3, #84	; 0x54
 80042da:	4602      	mov	r2, r0
 80042dc:	701a      	strb	r2, [r3, #0]
}
 80042de:	e15f      	b.n	80045a0 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	f040 80f6 	bne.w	80044e4 <HCD_HC_IN_IRQHandler+0x5fa>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3361      	adds	r3, #97	; 0x61
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d109      	bne.n	8004320 <HCD_HC_IN_IRQHandler+0x436>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3360      	adds	r3, #96	; 0x60
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e0c9      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	4413      	add	r3, r2
 800432c:	3361      	adds	r3, #97	; 0x61
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b05      	cmp	r3, #5
 8004332:	d109      	bne.n	8004348 <HCD_HC_IN_IRQHandler+0x45e>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3360      	adds	r3, #96	; 0x60
 8004342:	2205      	movs	r2, #5
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e0b5      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0x5ca>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	212c      	movs	r1, #44	; 0x2c
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	3361      	adds	r3, #97	; 0x61
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b06      	cmp	r3, #6
 800435a:	d009      	beq.n	8004370 <HCD_HC_IN_IRQHandler+0x486>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3361      	adds	r3, #97	; 0x61
 800436a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800436c:	2b08      	cmp	r3, #8
 800436e:	d150      	bne.n	8004412 <HCD_HC_IN_IRQHandler+0x528>
      hhcd->hc[ch_num].ErrCnt++;
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	335c      	adds	r3, #92	; 0x5c
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	202c      	movs	r0, #44	; 0x2c
 8004388:	fb00 f303 	mul.w	r3, r0, r3
 800438c:	440b      	add	r3, r1
 800438e:	335c      	adds	r3, #92	; 0x5c
 8004390:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	335c      	adds	r3, #92	; 0x5c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d912      	bls.n	80043cc <HCD_HC_IN_IRQHandler+0x4e2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	335c      	adds	r3, #92	; 0x5c
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	3360      	adds	r3, #96	; 0x60
 80043c6:	2204      	movs	r2, #4
 80043c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043ca:	e073      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0x5ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3360      	adds	r3, #96	; 0x60
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043f4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043fc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	461a      	mov	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004410:	e050      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	3361      	adds	r3, #97	; 0x61
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d122      	bne.n	800446c <HCD_HC_IN_IRQHandler+0x582>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	3360      	adds	r3, #96	; 0x60
 8004434:	2202      	movs	r2, #2
 8004436:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800444e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004456:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004464:	461a      	mov	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e023      	b.n	80044b4 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3361      	adds	r3, #97	; 0x61
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b07      	cmp	r3, #7
 800447e:	d119      	bne.n	80044b4 <HCD_HC_IN_IRQHandler+0x5ca>
      hhcd->hc[ch_num].ErrCnt++;
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	212c      	movs	r1, #44	; 0x2c
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	4413      	add	r3, r2
 800448c:	335c      	adds	r3, #92	; 0x5c
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	202c      	movs	r0, #44	; 0x2c
 8004498:	fb00 f303 	mul.w	r3, r0, r3
 800449c:	440b      	add	r3, r1
 800449e:	335c      	adds	r3, #92	; 0x5c
 80044a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3360      	adds	r3, #96	; 0x60
 80044b0:	2204      	movs	r2, #4
 80044b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c0:	461a      	mov	r2, r3
 80044c2:	2302      	movs	r3, #2
 80044c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	b2d9      	uxtb	r1, r3
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	202c      	movs	r0, #44	; 0x2c
 80044d0:	fb00 f303 	mul.w	r3, r0, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	3360      	adds	r3, #96	; 0x60
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f00b ff7f 	bl	80103e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044e2:	e05d      	b.n	80045a0 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d152      	bne.n	80045a0 <HCD_HC_IN_IRQHandler+0x6b6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	333f      	adds	r3, #63	; 0x3f
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d111      	bne.n	8004532 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	335c      	adds	r3, #92	; 0x5c
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f003 fcb7 	bl	8007e9e <USB_HC_Halt>
 8004530:	e02d      	b.n	800458e <HCD_HC_IN_IRQHandler+0x6a4>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	212c      	movs	r1, #44	; 0x2c
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	4413      	add	r3, r2
 800453e:	333f      	adds	r3, #63	; 0x3f
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HCD_HC_IN_IRQHandler+0x670>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	212c      	movs	r1, #44	; 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	333f      	adds	r3, #63	; 0x3f
 8004554:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004556:	2b02      	cmp	r3, #2
 8004558:	d119      	bne.n	800458e <HCD_HC_IN_IRQHandler+0x6a4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	212c      	movs	r1, #44	; 0x2c
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	4413      	add	r3, r2
 8004566:	335c      	adds	r3, #92	; 0x5c
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3361      	adds	r3, #97	; 0x61
 800457a:	2203      	movs	r2, #3
 800457c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f003 fc88 	bl	8007e9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459a:	461a      	mov	r2, r3
 800459c:	2310      	movs	r3, #16
 800459e:	6093      	str	r3, [r2, #8]
}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d11a      	bne.n	800460e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	461a      	mov	r2, r3
 80045e6:	2304      	movs	r3, #4
 80045e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	212c      	movs	r1, #44	; 0x2c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	3361      	adds	r3, #97	; 0x61
 80045f8:	2206      	movs	r2, #6
 80045fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	4611      	mov	r1, r2
 8004606:	4618      	mov	r0, r3
 8004608:	f003 fc49 	bl	8007e9e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800460c:	e2ca      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d12e      	bne.n	8004682 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004630:	461a      	mov	r2, r3
 8004632:	2320      	movs	r3, #32
 8004634:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	212c      	movs	r1, #44	; 0x2c
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	4413      	add	r3, r2
 8004642:	333d      	adds	r3, #61	; 0x3d
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	f040 82ac 	bne.w	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	212c      	movs	r1, #44	; 0x2c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	333d      	adds	r3, #61	; 0x3d
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	3360      	adds	r3, #96	; 0x60
 800466c:	2202      	movs	r2, #2
 800466e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f003 fc0f 	bl	8007e9e <USB_HC_Halt>
}
 8004680:	e290      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004698:	d112      	bne.n	80046c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a6:	461a      	mov	r2, r3
 80046a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f003 fbf0 	bl	8007e9e <USB_HC_Halt>
}
 80046be:	e271      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d140      	bne.n	8004758 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	335c      	adds	r3, #92	; 0x5c
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d111      	bne.n	8004722 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	333d      	adds	r3, #61	; 0x3d
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	2340      	movs	r3, #64	; 0x40
 8004720:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	461a      	mov	r2, r3
 8004730:	2301      	movs	r3, #1
 8004732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	212c      	movs	r1, #44	; 0x2c
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	4413      	add	r3, r2
 8004740:	3361      	adds	r3, #97	; 0x61
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f003 fba4 	bl	8007e9e <USB_HC_Halt>
}
 8004756:	e225      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	d12c      	bne.n	80047c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	212c      	movs	r1, #44	; 0x2c
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	4413      	add	r3, r2
 800477a:	3361      	adds	r3, #97	; 0x61
 800477c:	2204      	movs	r2, #4
 800477e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	212c      	movs	r1, #44	; 0x2c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	333d      	adds	r3, #61	; 0x3d
 800478e:	2201      	movs	r2, #1
 8004790:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	335c      	adds	r3, #92	; 0x5c
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f003 fb75 	bl	8007e9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c0:	461a      	mov	r2, r3
 80047c2:	2340      	movs	r3, #64	; 0x40
 80047c4:	6093      	str	r3, [r2, #8]
}
 80047c6:	e1ed      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d11a      	bne.n	8004814 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ea:	461a      	mov	r2, r3
 80047ec:	2308      	movs	r3, #8
 80047ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	3361      	adds	r3, #97	; 0x61
 80047fe:	2205      	movs	r2, #5
 8004800:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f003 fb46 	bl	8007e9e <USB_HC_Halt>
}
 8004812:	e1c7      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	4413      	add	r3, r2
 800481c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b10      	cmp	r3, #16
 8004828:	d123      	bne.n	8004872 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	212c      	movs	r1, #44	; 0x2c
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	335c      	adds	r3, #92	; 0x5c
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	3361      	adds	r3, #97	; 0x61
 800484a:	2203      	movs	r2, #3
 800484c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f003 fb20 	bl	8007e9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4413      	add	r3, r2
 8004866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486a:	461a      	mov	r2, r3
 800486c:	2310      	movs	r3, #16
 800486e:	6093      	str	r3, [r2, #8]
}
 8004870:	e198      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d11a      	bne.n	80048be <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3361      	adds	r3, #97	; 0x61
 8004896:	2206      	movs	r2, #6
 8004898:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f003 fafa 	bl	8007e9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b6:	461a      	mov	r2, r3
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	6093      	str	r3, [r2, #8]
}
 80048bc:	e172      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d4:	d11b      	bne.n	800490e <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	3361      	adds	r3, #97	; 0x61
 80048e4:	2208      	movs	r2, #8
 80048e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f003 fad3 	bl	8007e9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	461a      	mov	r2, r3
 8004906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800490a:	6093      	str	r3, [r2, #8]
}
 800490c:	e14a      	b.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4413      	add	r3, r2
 8004916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	f040 813f 	bne.w	8004ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	212c      	movs	r1, #44	; 0x2c
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	4413      	add	r3, r2
 8004932:	3361      	adds	r3, #97	; 0x61
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d17d      	bne.n	8004a36 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	212c      	movs	r1, #44	; 0x2c
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	3360      	adds	r3, #96	; 0x60
 8004948:	2201      	movs	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	212c      	movs	r1, #44	; 0x2c
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	333f      	adds	r3, #63	; 0x3f
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d00a      	beq.n	8004976 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	333f      	adds	r3, #63	; 0x3f
 800496e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004970:	2b03      	cmp	r3, #3
 8004972:	f040 8100 	bne.w	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d113      	bne.n	80049a6 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	3355      	adds	r3, #85	; 0x55
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	f083 0301 	eor.w	r3, r3, #1
 8004992:	b2d8      	uxtb	r0, r3
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	212c      	movs	r1, #44	; 0x2c
 800499a:	fb01 f303 	mul.w	r3, r1, r3
 800499e:	4413      	add	r3, r2
 80049a0:	3355      	adds	r3, #85	; 0x55
 80049a2:	4602      	mov	r2, r0
 80049a4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	f040 80e3 	bne.w	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	334c      	adds	r3, #76	; 0x4c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80d8 	beq.w	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	334c      	adds	r3, #76	; 0x4c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	202c      	movs	r0, #44	; 0x2c
 80049dc:	fb00 f202 	mul.w	r2, r0, r2
 80049e0:	440a      	add	r2, r1
 80049e2:	3240      	adds	r2, #64	; 0x40
 80049e4:	8812      	ldrh	r2, [r2, #0]
 80049e6:	4413      	add	r3, r2
 80049e8:	3b01      	subs	r3, #1
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	202c      	movs	r0, #44	; 0x2c
 80049f0:	fb00 f202 	mul.w	r2, r0, r2
 80049f4:	440a      	add	r2, r1
 80049f6:	3240      	adds	r2, #64	; 0x40
 80049f8:	8812      	ldrh	r2, [r2, #0]
 80049fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80b5 	beq.w	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	3355      	adds	r3, #85	; 0x55
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f083 0301 	eor.w	r3, r3, #1
 8004a20:	b2d8      	uxtb	r0, r3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	212c      	movs	r1, #44	; 0x2c
 8004a28:	fb01 f303 	mul.w	r3, r1, r3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3355      	adds	r3, #85	; 0x55
 8004a30:	4602      	mov	r2, r0
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e09f      	b.n	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	3361      	adds	r3, #97	; 0x61
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d109      	bne.n	8004a5e <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	212c      	movs	r1, #44	; 0x2c
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	3360      	adds	r3, #96	; 0x60
 8004a58:	2202      	movs	r2, #2
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e08b      	b.n	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	212c      	movs	r1, #44	; 0x2c
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	3361      	adds	r3, #97	; 0x61
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d109      	bne.n	8004a86 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	212c      	movs	r1, #44	; 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3360      	adds	r3, #96	; 0x60
 8004a80:	2202      	movs	r2, #2
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	e077      	b.n	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	212c      	movs	r1, #44	; 0x2c
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	3361      	adds	r3, #97	; 0x61
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d109      	bne.n	8004aae <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3360      	adds	r3, #96	; 0x60
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e063      	b.n	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	3361      	adds	r3, #97	; 0x61
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d009      	beq.n	8004ad6 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	3361      	adds	r3, #97	; 0x61
 8004ad0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d14f      	bne.n	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	212c      	movs	r1, #44	; 0x2c
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	335c      	adds	r3, #92	; 0x5c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	202c      	movs	r0, #44	; 0x2c
 8004aee:	fb00 f303 	mul.w	r3, r0, r3
 8004af2:	440b      	add	r3, r1
 8004af4:	335c      	adds	r3, #92	; 0x5c
 8004af6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	212c      	movs	r1, #44	; 0x2c
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	335c      	adds	r3, #92	; 0x5c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d912      	bls.n	8004b32 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	335c      	adds	r3, #92	; 0x5c
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	3360      	adds	r3, #96	; 0x60
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	e021      	b.n	8004b76 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	212c      	movs	r1, #44	; 0x2c
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3360      	adds	r3, #96	; 0x60
 8004b40:	2202      	movs	r2, #2
 8004b42:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b5a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b62:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	461a      	mov	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b82:	461a      	mov	r2, r3
 8004b84:	2302      	movs	r3, #2
 8004b86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	b2d9      	uxtb	r1, r3
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	202c      	movs	r0, #44	; 0x2c
 8004b92:	fb00 f303 	mul.w	r3, r0, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	3360      	adds	r3, #96	; 0x60
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f00b fc1e 	bl	80103e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ba4:	bf00      	nop
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	0c5b      	lsrs	r3, r3, #17
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d004      	beq.n	8004bf2 <HCD_RXQLVL_IRQHandler+0x46>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	f000 80a9 	beq.w	8004d42 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bf0:	e0aa      	b.n	8004d48 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80a6 	beq.w	8004d46 <HCD_RXQLVL_IRQHandler+0x19a>
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3344      	adds	r3, #68	; 0x44
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 809b 	beq.w	8004d46 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	212c      	movs	r1, #44	; 0x2c
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3350      	adds	r3, #80	; 0x50
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	441a      	add	r2, r3
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	202c      	movs	r0, #44	; 0x2c
 8004c2a:	fb00 f303 	mul.w	r3, r0, r3
 8004c2e:	440b      	add	r3, r1
 8004c30:	334c      	adds	r3, #76	; 0x4c
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d87a      	bhi.n	8004d2e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	212c      	movs	r1, #44	; 0x2c
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	3344      	adds	r3, #68	; 0x44
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	b292      	uxth	r2, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	f002 fd1f 	bl	8007694 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3344      	adds	r3, #68	; 0x44
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	441a      	add	r2, r3
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	202c      	movs	r0, #44	; 0x2c
 8004c70:	fb00 f303 	mul.w	r3, r0, r3
 8004c74:	440b      	add	r3, r1
 8004c76:	3344      	adds	r3, #68	; 0x44
 8004c78:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	212c      	movs	r1, #44	; 0x2c
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	4413      	add	r3, r2
 8004c86:	3350      	adds	r3, #80	; 0x50
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	202c      	movs	r0, #44	; 0x2c
 8004c94:	fb00 f303 	mul.w	r3, r0, r3
 8004c98:	440b      	add	r3, r1
 8004c9a:	3350      	adds	r3, #80	; 0x50
 8004c9c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	0cdb      	lsrs	r3, r3, #19
 8004cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3340      	adds	r3, #64	; 0x40
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d13c      	bne.n	8004d46 <HCD_RXQLVL_IRQHandler+0x19a>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d039      	beq.n	8004d46 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ce8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cf0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	212c      	movs	r1, #44	; 0x2c
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	3354      	adds	r3, #84	; 0x54
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	f083 0301 	eor.w	r3, r3, #1
 8004d18:	b2d8      	uxtb	r0, r3
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	3354      	adds	r3, #84	; 0x54
 8004d28:	4602      	mov	r2, r0
 8004d2a:	701a      	strb	r2, [r3, #0]
      break;
 8004d2c:	e00b      	b.n	8004d46 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	3360      	adds	r3, #96	; 0x60
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	701a      	strb	r2, [r3, #0]
      break;
 8004d40:	e001      	b.n	8004d46 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004d46:	bf00      	nop
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3728      	adds	r7, #40	; 0x28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d7c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d10b      	bne.n	8004da0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f00b fb08 	bl	80103a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f043 0302 	orr.w	r3, r3, #2
 8004d9e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d132      	bne.n	8004e10 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f043 0308 	orr.w	r3, r3, #8
 8004db0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d126      	bne.n	8004e0a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d113      	bne.n	8004dec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dce:	d106      	bne.n	8004dde <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fd8a 	bl	80078f0 <USB_InitFSLSPClkSel>
 8004ddc:	e011      	b.n	8004e02 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2101      	movs	r1, #1
 8004de4:	4618      	mov	r0, r3
 8004de6:	f002 fd83 	bl	80078f0 <USB_InitFSLSPClkSel>
 8004dea:	e00a      	b.n	8004e02 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d106      	bne.n	8004e02 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004e00:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f00b fafa 	bl	80103fc <HAL_HCD_PortEnabled_Callback>
 8004e08:	e002      	b.n	8004e10 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f00b fb04 	bl	8010418 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d103      	bne.n	8004e22 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f043 0320 	orr.w	r3, r3, #32
 8004e20:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6013      	str	r3, [r2, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e3c:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	d102      	bne.n	8004e50 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4e:	e00b      	b.n	8004e68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004e50:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5e:	d102      	bne.n	8004e66 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e64:	e000      	b.n	8004e68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004e66:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40007000 	.word	0x40007000

08004e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d141      	bne.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e86:	4b4b      	ldr	r3, [pc, #300]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e92:	d131      	bne.n	8004ef8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e94:	4b47      	ldr	r3, [pc, #284]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e9a:	4a46      	ldr	r2, [pc, #280]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ea4:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004eac:	4a41      	ldr	r2, [pc, #260]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004eb4:	4b40      	ldr	r3, [pc, #256]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2232      	movs	r2, #50	; 0x32
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	4a3f      	ldr	r2, [pc, #252]	; (8004fbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	0c9b      	lsrs	r3, r3, #18
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eca:	e002      	b.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ed2:	4b38      	ldr	r3, [pc, #224]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ede:	d102      	bne.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f2      	bne.n	8004ecc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ee6:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d158      	bne.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e057      	b.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ef8:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004efe:	4a2d      	ldr	r2, [pc, #180]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f08:	e04d      	b.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f10:	d141      	bne.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f12:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d131      	bne.n	8004f84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f20:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f26:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f30:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f38:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f40:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2232      	movs	r2, #50	; 0x32
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	0c9b      	lsrs	r3, r3, #18
 8004f52:	3301      	adds	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f56:	e002      	b.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f5e:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6a:	d102      	bne.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f2      	bne.n	8004f58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7e:	d112      	bne.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e011      	b.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f94:	e007      	b.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f9e:	4a05      	ldr	r2, [pc, #20]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fa4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	20000000 	.word	0x20000000
 8004fbc:	431bde83 	.word	0x431bde83

08004fc0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fce:	6053      	str	r3, [r2, #4]
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40007000 	.word	0x40007000

08004fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	; 0x28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f000 bc76 	b.w	80058e0 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff4:	4ba1      	ldr	r3, [pc, #644]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 030c 	and.w	r3, r3, #12
 8004ffc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ffe:	4b9f      	ldr	r3, [pc, #636]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80e6 	beq.w	80051e2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <HAL_RCC_OscConfig+0x4c>
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b0c      	cmp	r3, #12
 8005020:	f040 808d 	bne.w	800513e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b01      	cmp	r3, #1
 8005028:	f040 8089 	bne.w	800513e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800502c:	4b93      	ldr	r3, [pc, #588]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d006      	beq.n	8005046 <HAL_RCC_OscConfig+0x66>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f000 bc4d 	b.w	80058e0 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504a:	4b8c      	ldr	r3, [pc, #560]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <HAL_RCC_OscConfig+0x80>
 8005056:	4b89      	ldr	r3, [pc, #548]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800505e:	e005      	b.n	800506c <HAL_RCC_OscConfig+0x8c>
 8005060:	4b86      	ldr	r3, [pc, #536]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800506c:	4293      	cmp	r3, r2
 800506e:	d224      	bcs.n	80050ba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fe5f 	bl	8005d38 <RCC_SetFlashLatencyFromMSIRange>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	f000 bc2d 	b.w	80058e0 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005086:	4b7d      	ldr	r3, [pc, #500]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7c      	ldr	r2, [pc, #496]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800508c:	f043 0308 	orr.w	r3, r3, #8
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b7a      	ldr	r3, [pc, #488]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	4977      	ldr	r1, [pc, #476]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050a4:	4b75      	ldr	r3, [pc, #468]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	4972      	ldr	r1, [pc, #456]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	604b      	str	r3, [r1, #4]
 80050b8:	e025      	b.n	8005106 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ba:	4b70      	ldr	r3, [pc, #448]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6f      	ldr	r2, [pc, #444]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050c0:	f043 0308 	orr.w	r3, r3, #8
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b6d      	ldr	r3, [pc, #436]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	496a      	ldr	r1, [pc, #424]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050d8:	4b68      	ldr	r3, [pc, #416]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	4965      	ldr	r1, [pc, #404]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fe1e 	bl	8005d38 <RCC_SetFlashLatencyFromMSIRange>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e3ec      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005106:	f000 fd53 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 800510a:	4602      	mov	r2, r0
 800510c:	4b5b      	ldr	r3, [pc, #364]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	495a      	ldr	r1, [pc, #360]	; (8005280 <HAL_RCC_OscConfig+0x2a0>)
 8005118:	5ccb      	ldrb	r3, [r1, r3]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	fa22 f303 	lsr.w	r3, r2, r3
 8005122:	4a58      	ldr	r2, [pc, #352]	; (8005284 <HAL_RCC_OscConfig+0x2a4>)
 8005124:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005126:	4b58      	ldr	r3, [pc, #352]	; (8005288 <HAL_RCC_OscConfig+0x2a8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc fd74 	bl	8001c18 <HAL_InitTick>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d052      	beq.n	80051e0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	e3d0      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d032      	beq.n	80051ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005146:	4b4d      	ldr	r3, [pc, #308]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4c      	ldr	r2, [pc, #304]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005152:	f7fc fdb1 	bl	8001cb8 <HAL_GetTick>
 8005156:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800515a:	f7fc fdad 	bl	8001cb8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e3b9      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800516c:	4b43      	ldr	r3, [pc, #268]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005178:	4b40      	ldr	r3, [pc, #256]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3f      	ldr	r2, [pc, #252]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800517e:	f043 0308 	orr.w	r3, r3, #8
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b3d      	ldr	r3, [pc, #244]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	493a      	ldr	r1, [pc, #232]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	4935      	ldr	r1, [pc, #212]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	604b      	str	r3, [r1, #4]
 80051aa:	e01a      	b.n	80051e2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051ac:	4b33      	ldr	r3, [pc, #204]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a32      	ldr	r2, [pc, #200]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051b2:	f023 0301 	bic.w	r3, r3, #1
 80051b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051b8:	f7fc fd7e 	bl	8001cb8 <HAL_GetTick>
 80051bc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051c0:	f7fc fd7a 	bl	8001cb8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e386      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x1e0>
 80051de:	e000      	b.n	80051e2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d073      	beq.n	80052d6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d005      	beq.n	8005200 <HAL_RCC_OscConfig+0x220>
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d10e      	bne.n	8005218 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d10b      	bne.n	8005218 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	4b1e      	ldr	r3, [pc, #120]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d063      	beq.n	80052d4 <HAL_RCC_OscConfig+0x2f4>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d15f      	bne.n	80052d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e363      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005220:	d106      	bne.n	8005230 <HAL_RCC_OscConfig+0x250>
 8005222:	4b16      	ldr	r3, [pc, #88]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e01d      	b.n	800526c <HAL_RCC_OscConfig+0x28c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005238:	d10c      	bne.n	8005254 <HAL_RCC_OscConfig+0x274>
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a0f      	ldr	r2, [pc, #60]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0c      	ldr	r2, [pc, #48]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e00b      	b.n	800526c <HAL_RCC_OscConfig+0x28c>
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800525a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a05      	ldr	r2, [pc, #20]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800526a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fc fd20 	bl	8001cb8 <HAL_GetTick>
 8005278:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800527a:	e010      	b.n	800529e <HAL_RCC_OscConfig+0x2be>
 800527c:	40021000 	.word	0x40021000
 8005280:	080121cc 	.word	0x080121cc
 8005284:	20000000 	.word	0x20000000
 8005288:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800528c:	f7fc fd14 	bl	8001cb8 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	; 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e320      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800529e:	4ba0      	ldr	r3, [pc, #640]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x2ac>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fc fd04 	bl	8001cb8 <HAL_GetTick>
 80052b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b4:	f7fc fd00 	bl	8001cb8 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	; 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e30c      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052c6:	4b96      	ldr	r3, [pc, #600]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x2d4>
 80052d2:	e000      	b.n	80052d6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d060      	beq.n	80053a4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_OscConfig+0x314>
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d119      	bne.n	8005322 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d116      	bne.n	8005322 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f4:	4b8a      	ldr	r3, [pc, #552]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_OscConfig+0x32c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e2e9      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530c:	4b84      	ldr	r3, [pc, #528]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	4981      	ldr	r1, [pc, #516]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005320:	e040      	b.n	80053a4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d023      	beq.n	8005372 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800532a:	4b7d      	ldr	r3, [pc, #500]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a7c      	ldr	r2, [pc, #496]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 8005330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fc fcbf 	bl	8001cb8 <HAL_GetTick>
 800533a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800533e:	f7fc fcbb 	bl	8001cb8 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e2c7      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005350:	4b73      	ldr	r3, [pc, #460]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b70      	ldr	r3, [pc, #448]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	496d      	ldr	r1, [pc, #436]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
 8005370:	e018      	b.n	80053a4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005372:	4b6b      	ldr	r3, [pc, #428]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a6a      	ldr	r2, [pc, #424]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 8005378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800537c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fc fc9b 	bl	8001cb8 <HAL_GetTick>
 8005382:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005386:	f7fc fc97 	bl	8001cb8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e2a3      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005398:	4b61      	ldr	r3, [pc, #388]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f0      	bne.n	8005386 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d07f      	beq.n	80054b0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05f      	beq.n	8005478 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80053b8:	4b59      	ldr	r3, [pc, #356]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053be:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d037      	beq.n	800543e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e27c      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80053f0:	4b4b      	ldr	r3, [pc, #300]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80053f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f6:	4a4a      	ldr	r2, [pc, #296]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005400:	f7fc fc5a 	bl	8001cb8 <HAL_GetTick>
 8005404:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005408:	f7fc fc56 	bl	8001cb8 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b11      	cmp	r3, #17
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e262      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800541a:	4b41      	ldr	r3, [pc, #260]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ef      	bne.n	8005408 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005428:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542e:	f023 0210 	bic.w	r2, r3, #16
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	493a      	ldr	r1, [pc, #232]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005444:	4a36      	ldr	r2, [pc, #216]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544e:	f7fc fc33 	bl	8001cb8 <HAL_GetTick>
 8005452:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005456:	f7fc fc2f 	bl	8001cb8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b11      	cmp	r3, #17
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e23b      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005468:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800546a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ef      	beq.n	8005456 <HAL_RCC_OscConfig+0x476>
 8005476:	e01b      	b.n	80054b0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005478:	4b29      	ldr	r3, [pc, #164]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547e:	4a28      	ldr	r2, [pc, #160]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fc fc16 	bl	8001cb8 <HAL_GetTick>
 800548c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005490:	f7fc fc12 	bl	8001cb8 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b11      	cmp	r3, #17
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e21e      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054a2:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80054a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1ef      	bne.n	8005490 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80c1 	beq.w	8005640 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054be:	2300      	movs	r3, #0
 80054c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054c4:	4b16      	ldr	r3, [pc, #88]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80054c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10e      	bne.n	80054ee <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	4a12      	ldr	r2, [pc, #72]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80054d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054da:	6593      	str	r3, [r2, #88]	; 0x58
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <HAL_RCC_OscConfig+0x540>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <HAL_RCC_OscConfig+0x544>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11c      	bne.n	8005534 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <HAL_RCC_OscConfig+0x544>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a09      	ldr	r2, [pc, #36]	; (8005524 <HAL_RCC_OscConfig+0x544>)
 8005500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005506:	f7fc fbd7 	bl	8001cb8 <HAL_GetTick>
 800550a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800550c:	e00c      	b.n	8005528 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550e:	f7fc fbd3 	bl	8001cb8 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d905      	bls.n	8005528 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e1df      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
 8005520:	40021000 	.word	0x40021000
 8005524:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005528:	4b99      	ldr	r3, [pc, #612]	; (8005790 <HAL_RCC_OscConfig+0x7b0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ec      	beq.n	800550e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d02c      	beq.n	800559a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005540:	4b94      	ldr	r3, [pc, #592]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	4990      	ldr	r1, [pc, #576]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d010      	beq.n	8005588 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005566:	4b8b      	ldr	r3, [pc, #556]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556c:	4a89      	ldr	r2, [pc, #548]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800556e:	f043 0304 	orr.w	r3, r3, #4
 8005572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005576:	4b87      	ldr	r3, [pc, #540]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	4a85      	ldr	r2, [pc, #532]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005586:	e018      	b.n	80055ba <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005588:	4b82      	ldr	r3, [pc, #520]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558e:	4a81      	ldr	r2, [pc, #516]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005598:	e00f      	b.n	80055ba <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800559a:	4b7e      	ldr	r3, [pc, #504]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a0:	4a7c      	ldr	r2, [pc, #496]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80055aa:	4b7a      	ldr	r3, [pc, #488]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b0:	4a78      	ldr	r2, [pc, #480]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 80055b2:	f023 0304 	bic.w	r3, r3, #4
 80055b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c2:	f7fc fb79 	bl	8001cb8 <HAL_GetTick>
 80055c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c8:	e00a      	b.n	80055e0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ca:	f7fc fb75 	bl	8001cb8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d8:	4293      	cmp	r3, r2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e17f      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e0:	4b6c      	ldr	r3, [pc, #432]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0ed      	beq.n	80055ca <HAL_RCC_OscConfig+0x5ea>
 80055ee:	e01d      	b.n	800562c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fc fb62 	bl	8001cb8 <HAL_GetTick>
 80055f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fc fb5e 	bl	8001cb8 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e168      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800560e:	4b61      	ldr	r3, [pc, #388]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1ed      	bne.n	80055f8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800561c:	4b5d      	ldr	r3, [pc, #372]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	4a5c      	ldr	r2, [pc, #368]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800562c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005634:	4b57      	ldr	r3, [pc, #348]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005638:	4a56      	ldr	r2, [pc, #344]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800563a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d03c      	beq.n	80056c6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01c      	beq.n	800568e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005654:	4b4f      	ldr	r3, [pc, #316]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800565a:	4a4e      	ldr	r2, [pc, #312]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fc fb28 	bl	8001cb8 <HAL_GetTick>
 8005668:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800566c:	f7fc fb24 	bl	8001cb8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e130      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800567e:	4b45      	ldr	r3, [pc, #276]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ef      	beq.n	800566c <HAL_RCC_OscConfig+0x68c>
 800568c:	e01b      	b.n	80056c6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005694:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fc fb0b 	bl	8001cb8 <HAL_GetTick>
 80056a2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a6:	f7fc fb07 	bl	8001cb8 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e113      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b8:	4b36      	ldr	r3, [pc, #216]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 80056ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1ef      	bne.n	80056a6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8107 	beq.w	80058de <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	f040 80cf 	bne.w	8005878 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0203 	and.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d12c      	bne.n	8005748 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	3b01      	subs	r3, #1
 80056fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d123      	bne.n	8005748 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d11b      	bne.n	8005748 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d113      	bne.n	8005748 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	3b01      	subs	r3, #1
 800572e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005730:	429a      	cmp	r2, r3
 8005732:	d109      	bne.n	8005748 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	3b01      	subs	r3, #1
 8005742:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d071      	beq.n	800582c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b0c      	cmp	r3, #12
 800574c:	d06c      	beq.n	8005828 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d105      	bne.n	8005766 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800575a:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e0ba      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <HAL_RCC_OscConfig+0x7b4>)
 8005770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005774:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005776:	f7fc fa9f 	bl	8001cb8 <HAL_GetTick>
 800577a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800577c:	e00c      	b.n	8005798 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577e:	f7fc fa9b 	bl	8001cb8 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d905      	bls.n	8005798 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e0a7      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
 8005790:	40007000 	.word	0x40007000
 8005794:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005798:	4b53      	ldr	r3, [pc, #332]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1ec      	bne.n	800577e <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a4:	4b50      	ldr	r3, [pc, #320]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	4b50      	ldr	r3, [pc, #320]	; (80058ec <HAL_RCC_OscConfig+0x90c>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057b4:	3a01      	subs	r2, #1
 80057b6:	0112      	lsls	r2, r2, #4
 80057b8:	4311      	orrs	r1, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057be:	0212      	lsls	r2, r2, #8
 80057c0:	4311      	orrs	r1, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057c6:	0852      	lsrs	r2, r2, #1
 80057c8:	3a01      	subs	r2, #1
 80057ca:	0552      	lsls	r2, r2, #21
 80057cc:	4311      	orrs	r1, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057d2:	0852      	lsrs	r2, r2, #1
 80057d4:	3a01      	subs	r2, #1
 80057d6:	0652      	lsls	r2, r2, #25
 80057d8:	4311      	orrs	r1, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057de:	06d2      	lsls	r2, r2, #27
 80057e0:	430a      	orrs	r2, r1
 80057e2:	4941      	ldr	r1, [pc, #260]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057e8:	4b3f      	ldr	r3, [pc, #252]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a3e      	ldr	r2, [pc, #248]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80057ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057f4:	4b3c      	ldr	r3, [pc, #240]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a3b      	ldr	r2, [pc, #236]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80057fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005800:	f7fc fa5a 	bl	8001cb8 <HAL_GetTick>
 8005804:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005808:	f7fc fa56 	bl	8001cb8 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e062      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800581a:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005826:	e05a      	b.n	80058de <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e059      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800582c:	4b2e      	ldr	r3, [pc, #184]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d152      	bne.n	80058de <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005838:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800583e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005842:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005844:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800584a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800584e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005850:	f7fc fa32 	bl	8001cb8 <HAL_GetTick>
 8005854:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005858:	f7fc fa2e 	bl	8001cb8 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e03a      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800586a:	4b1f      	ldr	r3, [pc, #124]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0x878>
 8005876:	e032      	b.n	80058de <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	2b0c      	cmp	r3, #12
 800587c:	d02d      	beq.n	80058da <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587e:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a19      	ldr	r2, [pc, #100]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 8005884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005888:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 800589c:	f023 0303 	bic.w	r3, r3, #3
 80058a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80058a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80058ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b2:	f7fc fa01 	bl	8001cb8 <HAL_GetTick>
 80058b6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ba:	f7fc f9fd 	bl	8001cb8 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e009      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <HAL_RCC_OscConfig+0x908>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f0      	bne.n	80058ba <HAL_RCC_OscConfig+0x8da>
 80058d8:	e001      	b.n	80058de <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3728      	adds	r7, #40	; 0x28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40021000 	.word	0x40021000
 80058ec:	019d800c 	.word	0x019d800c

080058f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e10f      	b.n	8005b28 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005908:	4b89      	ldr	r3, [pc, #548]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d910      	bls.n	8005938 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005916:	4b86      	ldr	r3, [pc, #536]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f023 020f 	bic.w	r2, r3, #15
 800591e:	4984      	ldr	r1, [pc, #528]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	4313      	orrs	r3, r2
 8005924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	4b82      	ldr	r3, [pc, #520]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d001      	beq.n	8005938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0f7      	b.n	8005b28 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8089 	beq.w	8005a58 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d133      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594e:	4b79      	ldr	r3, [pc, #484]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e0e4      	b.n	8005b28 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800595e:	f000 fa45 	bl	8005dec <RCC_GetSysClockFreqFromPLLSource>
 8005962:	4603      	mov	r3, r0
 8005964:	4a74      	ldr	r2, [pc, #464]	; (8005b38 <HAL_RCC_ClockConfig+0x248>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d955      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800596a:	4b72      	ldr	r3, [pc, #456]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005976:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597e:	4a6d      	ldr	r2, [pc, #436]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005984:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e044      	b.n	8005a16 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d03e      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x126>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d13a      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059a0:	4b64      	ldr	r3, [pc, #400]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a8:	4a62      	ldr	r2, [pc, #392]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059b0:	2380      	movs	r3, #128	; 0x80
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e02f      	b.n	8005a16 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d107      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059be:	4b5d      	ldr	r3, [pc, #372]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d115      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e0ac      	b.n	8005b28 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d107      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059d6:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0a0      	b.n	8005b28 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e6:	4b53      	ldr	r3, [pc, #332]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e098      	b.n	8005b28 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80059f6:	f000 f8db 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 80059fa:	4603      	mov	r3, r0
 80059fc:	4a4e      	ldr	r2, [pc, #312]	; (8005b38 <HAL_RCC_ClockConfig+0x248>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d909      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a02:	4b4c      	ldr	r3, [pc, #304]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a0a:	4a4a      	ldr	r2, [pc, #296]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a16:	4b47      	ldr	r3, [pc, #284]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f023 0203 	bic.w	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4944      	ldr	r1, [pc, #272]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a28:	f7fc f946 	bl	8001cb8 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a30:	f7fc f942 	bl	8001cb8 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e070      	b.n	8005b28 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 020c 	and.w	r2, r3, #12
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d1eb      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d009      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a64:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4930      	ldr	r1, [pc, #192]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d105      	bne.n	8005a8a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a7e:	4b2d      	ldr	r3, [pc, #180]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	4a2c      	ldr	r2, [pc, #176]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a88:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a8a:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d210      	bcs.n	8005aba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 020f 	bic.w	r2, r3, #15
 8005aa0:	4923      	ldr	r1, [pc, #140]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa8:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e036      	b.n	8005b28 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4918      	ldr	r1, [pc, #96]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4910      	ldr	r1, [pc, #64]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005af8:	f000 f85a 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8005afc:	4602      	mov	r2, r0
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	091b      	lsrs	r3, r3, #4
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	490c      	ldr	r1, [pc, #48]	; (8005b3c <HAL_RCC_ClockConfig+0x24c>)
 8005b0a:	5ccb      	ldrb	r3, [r1, r3]
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <HAL_RCC_ClockConfig+0x250>)
 8005b16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <HAL_RCC_ClockConfig+0x254>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fc f87b 	bl	8001c18 <HAL_InitTick>
 8005b22:	4603      	mov	r3, r0
 8005b24:	73fb      	strb	r3, [r7, #15]

  return status;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40022000 	.word	0x40022000
 8005b34:	40021000 	.word	0x40021000
 8005b38:	04c4b400 	.word	0x04c4b400
 8005b3c:	080121cc 	.word	0x080121cc
 8005b40:	20000000 	.word	0x20000000
 8005b44:	20000004 	.word	0x20000004

08005b48 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8005b54:	4b15      	ldr	r3, [pc, #84]	; (8005bac <HAL_RCC_MCOConfig+0x64>)
 8005b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b58:	4a14      	ldr	r2, [pc, #80]	; (8005bac <HAL_RCC_MCOConfig+0x64>)
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b60:	4b12      	ldr	r3, [pc, #72]	; (8005bac <HAL_RCC_MCOConfig+0x64>)
 8005b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8005b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b72:	2302      	movs	r3, #2
 8005b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b76:	2302      	movs	r3, #2
 8005b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b82:	f107 0314 	add.w	r3, r7, #20
 8005b86:	4619      	mov	r1, r3
 8005b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b8c:	f7fd fbe6 	bl	800335c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_RCC_MCOConfig+0x64>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	4903      	ldr	r1, [pc, #12]	; (8005bac <HAL_RCC_MCOConfig+0x64>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	608b      	str	r3, [r1, #8]
}
 8005ba4:	bf00      	nop
 8005ba6:	3728      	adds	r7, #40	; 0x28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000

08005bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bbe:	4b3e      	ldr	r3, [pc, #248]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bc8:	4b3b      	ldr	r3, [pc, #236]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	d121      	bne.n	8005c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d11e      	bne.n	8005c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005be4:	4b34      	ldr	r3, [pc, #208]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bf0:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	e005      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c00:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c0c:	4a2b      	ldr	r2, [pc, #172]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10d      	bne.n	8005c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c20:	e00a      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d102      	bne.n	8005c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c28:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	e004      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c34:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b0c      	cmp	r3, #12
 8005c3c:	d134      	bne.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d003      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0xac>
 8005c54:	e005      	b.n	8005c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c56:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c58:	617b      	str	r3, [r7, #20]
      break;
 8005c5a:	e005      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c5c:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c5e:	617b      	str	r3, [r7, #20]
      break;
 8005c60:	e002      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	617b      	str	r3, [r7, #20]
      break;
 8005c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c68:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	3301      	adds	r3, #1
 8005c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	fb02 f203 	mul.w	r2, r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	0e5b      	lsrs	r3, r3, #25
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	3301      	adds	r3, #1
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3724      	adds	r7, #36	; 0x24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	080121e4 	.word	0x080121e4
 8005cc0:	00f42400 	.word	0x00f42400
 8005cc4:	007a1200 	.word	0x007a1200

08005cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cce:	681b      	ldr	r3, [r3, #0]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	20000000 	.word	0x20000000

08005ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ce4:	f7ff fff0 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	4904      	ldr	r1, [pc, #16]	; (8005d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cf6:	5ccb      	ldrb	r3, [r1, r3]
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	080121dc 	.word	0x080121dc

08005d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d10:	f7ff ffda 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	0adb      	lsrs	r3, r3, #11
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	4904      	ldr	r1, [pc, #16]	; (8005d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40021000 	.word	0x40021000
 8005d34:	080121dc 	.word	0x080121dc

08005d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d44:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d50:	f7ff f872 	bl	8004e38 <HAL_PWREx_GetVoltageRange>
 8005d54:	6178      	str	r0, [r7, #20]
 8005d56:	e014      	b.n	8005d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d58:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6593      	str	r3, [r2, #88]	; 0x58
 8005d64:	4b1f      	ldr	r3, [pc, #124]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d70:	f7ff f862 	bl	8004e38 <HAL_PWREx_GetVoltageRange>
 8005d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d76:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d88:	d10b      	bne.n	8005da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b80      	cmp	r3, #128	; 0x80
 8005d8e:	d913      	bls.n	8005db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2ba0      	cmp	r3, #160	; 0xa0
 8005d94:	d902      	bls.n	8005d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d96:	2302      	movs	r3, #2
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	e00d      	b.n	8005db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	e00a      	b.n	8005db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b7f      	cmp	r3, #127	; 0x7f
 8005da6:	d902      	bls.n	8005dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005da8:	2302      	movs	r3, #2
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	e004      	b.n	8005db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b70      	cmp	r3, #112	; 0x70
 8005db2:	d101      	bne.n	8005db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005db4:	2301      	movs	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005db8:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f023 020f 	bic.w	r2, r3, #15
 8005dc0:	4909      	ldr	r1, [pc, #36]	; (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005dc8:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d001      	beq.n	8005dda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40021000 	.word	0x40021000
 8005de8:	40022000 	.word	0x40022000

08005dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005df6:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d118      	bne.n	8005e34 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e02:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d107      	bne.n	8005e1e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e14:	0a1b      	lsrs	r3, r3, #8
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e005      	b.n	8005e2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	091b      	lsrs	r3, r3, #4
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e2a:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e32:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d003      	beq.n	8005e4c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d003      	beq.n	8005e52 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005e4a:	e005      	b.n	8005e58 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005e4e:	613b      	str	r3, [r7, #16]
    break;
 8005e50:	e005      	b.n	8005e5e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005e52:	4b19      	ldr	r3, [pc, #100]	; (8005eb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e54:	613b      	str	r3, [r7, #16]
    break;
 8005e56:	e002      	b.n	8005e5e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	613b      	str	r3, [r7, #16]
    break;
 8005e5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	091b      	lsrs	r3, r3, #4
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	0a1b      	lsrs	r3, r3, #8
 8005e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	fb02 f203 	mul.w	r2, r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	0e5b      	lsrs	r3, r3, #25
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	3301      	adds	r3, #1
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005e9e:	683b      	ldr	r3, [r7, #0]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	080121e4 	.word	0x080121e4
 8005eb4:	00f42400 	.word	0x00f42400
 8005eb8:	007a1200 	.word	0x007a1200

08005ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ec8:	2300      	movs	r3, #0
 8005eca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d040      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d02a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ee0:	2b80      	cmp	r3, #128	; 0x80
 8005ee2:	d825      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ee4:	2b60      	cmp	r3, #96	; 0x60
 8005ee6:	d026      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ee8:	2b60      	cmp	r3, #96	; 0x60
 8005eea:	d821      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d006      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d81d      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d010      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005efc:	e018      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005efe:	4b89      	ldr	r3, [pc, #548]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	4a88      	ldr	r2, [pc, #544]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f08:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f0a:	e015      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	2100      	movs	r1, #0
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fb4e 	bl	80065b4 <RCCEx_PLLSAI1_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f1c:	e00c      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3320      	adds	r3, #32
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fc39 	bl	800679c <RCCEx_PLLSAI2_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f2e:	e003      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	74fb      	strb	r3, [r7, #19]
      break;
 8005f34:	e000      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f38:	7cfb      	ldrb	r3, [r7, #19]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f3e:	4b79      	ldr	r3, [pc, #484]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f44:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4c:	4975      	ldr	r1, [pc, #468]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005f54:	e001      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	7cfb      	ldrb	r3, [r7, #19]
 8005f58:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d047      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6e:	d030      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f74:	d82a      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7a:	d02a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f80:	d824      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f86:	d008      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8c:	d81e      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f96:	d010      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005f98:	e018      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f9a:	4b62      	ldr	r3, [pc, #392]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4a61      	ldr	r2, [pc, #388]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fa6:	e015      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fb00 	bl	80065b4 <RCCEx_PLLSAI1_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fb8:	e00c      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3320      	adds	r3, #32
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fbeb 	bl	800679c <RCCEx_PLLSAI2_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fca:	e003      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	74fb      	strb	r3, [r7, #19]
      break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fda:	4b52      	ldr	r3, [pc, #328]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	494e      	ldr	r1, [pc, #312]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005ff0:	e001      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	7cfb      	ldrb	r3, [r7, #19]
 8005ff4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 809f 	beq.w	8006142 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006004:	2300      	movs	r3, #0
 8006006:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006008:	4b46      	ldr	r3, [pc, #280]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800600a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006018:	2300      	movs	r3, #0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00d      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800601e:	4b41      	ldr	r3, [pc, #260]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	4a40      	ldr	r2, [pc, #256]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006028:	6593      	str	r3, [r2, #88]	; 0x58
 800602a:	4b3e      	ldr	r3, [pc, #248]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006036:	2301      	movs	r3, #1
 8006038:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800603a:	4b3b      	ldr	r3, [pc, #236]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a3a      	ldr	r2, [pc, #232]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006046:	f7fb fe37 	bl	8001cb8 <HAL_GetTick>
 800604a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800604c:	e009      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604e:	f7fb fe33 	bl	8001cb8 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d902      	bls.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	74fb      	strb	r3, [r7, #19]
        break;
 8006060:	e005      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006062:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ef      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800606e:	7cfb      	ldrb	r3, [r7, #19]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d15b      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006074:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01f      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	429a      	cmp	r2, r3
 8006090:	d019      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006092:	4b24      	ldr	r3, [pc, #144]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800609e:	4b21      	ldr	r3, [pc, #132]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ae:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b4:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060be:	4a19      	ldr	r2, [pc, #100]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d016      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fb fdf2 	bl	8001cb8 <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060d6:	e00b      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d8:	f7fb fdee 	bl	8001cb8 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d902      	bls.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	74fb      	strb	r3, [r7, #19]
            break;
 80060ee:	e006      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f0:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0ec      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80060fe:	7cfb      	ldrb	r3, [r7, #19]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10c      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006104:	4b07      	ldr	r3, [pc, #28]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006114:	4903      	ldr	r1, [pc, #12]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800611c:	e008      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800611e:	7cfb      	ldrb	r3, [r7, #19]
 8006120:	74bb      	strb	r3, [r7, #18]
 8006122:	e005      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006124:	40021000 	.word	0x40021000
 8006128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006130:	7c7b      	ldrb	r3, [r7, #17]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d105      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006136:	4ba0      	ldr	r3, [pc, #640]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	4a9f      	ldr	r2, [pc, #636]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006140:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800614e:	4b9a      	ldr	r3, [pc, #616]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	f023 0203 	bic.w	r2, r3, #3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615c:	4996      	ldr	r1, [pc, #600]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006170:	4b91      	ldr	r3, [pc, #580]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006176:	f023 020c 	bic.w	r2, r3, #12
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	498e      	ldr	r1, [pc, #568]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006192:	4b89      	ldr	r3, [pc, #548]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a0:	4985      	ldr	r1, [pc, #532]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061b4:	4b80      	ldr	r3, [pc, #512]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c2:	497d      	ldr	r1, [pc, #500]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061d6:	4b78      	ldr	r3, [pc, #480]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e4:	4974      	ldr	r1, [pc, #464]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061f8:	4b6f      	ldr	r3, [pc, #444]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006206:	496c      	ldr	r1, [pc, #432]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800621a:	4b67      	ldr	r3, [pc, #412]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006228:	4963      	ldr	r1, [pc, #396]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800623c:	4b5e      	ldr	r3, [pc, #376]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006242:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624a:	495b      	ldr	r1, [pc, #364]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800625e:	4b56      	ldr	r3, [pc, #344]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626c:	4952      	ldr	r1, [pc, #328]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006280:	4b4d      	ldr	r3, [pc, #308]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006286:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628e:	494a      	ldr	r1, [pc, #296]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062a2:	4b45      	ldr	r3, [pc, #276]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b0:	4941      	ldr	r1, [pc, #260]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062c4:	4b3c      	ldr	r3, [pc, #240]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ca:	f023 0203 	bic.w	r2, r3, #3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d2:	4939      	ldr	r1, [pc, #228]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d028      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062e6:	4b34      	ldr	r3, [pc, #208]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f4:	4930      	ldr	r1, [pc, #192]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006304:	d106      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006306:	4b2c      	ldr	r3, [pc, #176]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	4a2b      	ldr	r2, [pc, #172]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800630c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006310:	60d3      	str	r3, [r2, #12]
 8006312:	e011      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800631c:	d10c      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	2101      	movs	r1, #1
 8006324:	4618      	mov	r0, r3
 8006326:	f000 f945 	bl	80065b4 <RCCEx_PLLSAI1_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800632e:	7cfb      	ldrb	r3, [r7, #19]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006334:	7cfb      	ldrb	r3, [r7, #19]
 8006336:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d04d      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800634c:	d108      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800634e:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006350:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800635a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800635e:	e012      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006360:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006366:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800637e:	490e      	ldr	r1, [pc, #56]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800638a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800638e:	d106      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006390:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4a08      	ldr	r2, [pc, #32]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800639a:	60d3      	str	r3, [r2, #12]
 800639c:	e020      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a6:	d109      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063a8:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4a02      	ldr	r2, [pc, #8]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b2:	60d3      	str	r3, [r2, #12]
 80063b4:	e014      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80063b6:	bf00      	nop
 80063b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	2101      	movs	r1, #1
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f8f1 	bl	80065b4 <RCCEx_PLLSAI1_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063d6:	7cfb      	ldrb	r3, [r7, #19]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d028      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063ec:	4b68      	ldr	r3, [pc, #416]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fa:	4965      	ldr	r1, [pc, #404]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800640a:	d106      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800640c:	4b60      	ldr	r3, [pc, #384]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	4a5f      	ldr	r2, [pc, #380]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006416:	60d3      	str	r3, [r2, #12]
 8006418:	e011      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006422:	d10c      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	2101      	movs	r1, #1
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f8c2 	bl	80065b4 <RCCEx_PLLSAI1_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006434:	7cfb      	ldrb	r3, [r7, #19]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800643a:	7cfb      	ldrb	r3, [r7, #19]
 800643c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01e      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800644a:	4b51      	ldr	r3, [pc, #324]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006450:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	494d      	ldr	r1, [pc, #308]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800646c:	d10c      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3304      	adds	r3, #4
 8006472:	2102      	movs	r1, #2
 8006474:	4618      	mov	r0, r3
 8006476:	f000 f89d 	bl	80065b4 <RCCEx_PLLSAI1_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800647e:	7cfb      	ldrb	r3, [r7, #19]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006484:	7cfb      	ldrb	r3, [r7, #19]
 8006486:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006494:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800649a:	f023 0204 	bic.w	r2, r3, #4
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a4:	493a      	ldr	r1, [pc, #232]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064b8:	4b35      	ldr	r3, [pc, #212]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80064ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064be:	f023 0218 	bic.w	r2, r3, #24
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c8:	4931      	ldr	r1, [pc, #196]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d035      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064dc:	4b2c      	ldr	r3, [pc, #176]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2b      	ldr	r2, [pc, #172]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80064e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e8:	f7fb fbe6 	bl	8001cb8 <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064ee:	e009      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064f0:	f7fb fbe2 	bl	8001cb8 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d902      	bls.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	74fb      	strb	r3, [r7, #19]
        break;
 8006502:	e005      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006504:	4b22      	ldr	r3, [pc, #136]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1ef      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d113      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006516:	4b1e      	ldr	r3, [pc, #120]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800651c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006526:	491a      	ldr	r1, [pc, #104]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3320      	adds	r3, #32
 8006532:	2102      	movs	r1, #2
 8006534:	4618      	mov	r0, r3
 8006536:	f000 f931 	bl	800679c <RCCEx_PLLSAI2_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006544:	7cfb      	ldrb	r3, [r7, #19]
 8006546:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d017      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800655a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	490a      	ldr	r1, [pc, #40]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006576:	d105      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	4a04      	ldr	r2, [pc, #16]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800657e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006582:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006584:	7cbb      	ldrb	r3, [r7, #18]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40021000 	.word	0x40021000

08006594 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800659e:	f043 0304 	orr.w	r3, r3, #4
 80065a2:	6013      	str	r3, [r2, #0]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000

080065b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065c2:	4b72      	ldr	r3, [pc, #456]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00e      	beq.n	80065ec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065ce:	4b6f      	ldr	r3, [pc, #444]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 0203 	and.w	r2, r3, #3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d103      	bne.n	80065e6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
       ||
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d142      	bne.n	800666c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
 80065ea:	e03f      	b.n	800666c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d018      	beq.n	8006626 <RCCEx_PLLSAI1_Config+0x72>
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d825      	bhi.n	8006644 <RCCEx_PLLSAI1_Config+0x90>
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d002      	beq.n	8006602 <RCCEx_PLLSAI1_Config+0x4e>
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d009      	beq.n	8006614 <RCCEx_PLLSAI1_Config+0x60>
 8006600:	e020      	b.n	8006644 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006602:	4b62      	ldr	r3, [pc, #392]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d11d      	bne.n	800664a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006612:	e01a      	b.n	800664a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006614:	4b5d      	ldr	r3, [pc, #372]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661c:	2b00      	cmp	r3, #0
 800661e:	d116      	bne.n	800664e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006624:	e013      	b.n	800664e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006626:	4b59      	ldr	r3, [pc, #356]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10f      	bne.n	8006652 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006632:	4b56      	ldr	r3, [pc, #344]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006642:	e006      	b.n	8006652 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	73fb      	strb	r3, [r7, #15]
      break;
 8006648:	e004      	b.n	8006654 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800664a:	bf00      	nop
 800664c:	e002      	b.n	8006654 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800664e:	bf00      	nop
 8006650:	e000      	b.n	8006654 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006652:	bf00      	nop
    }

    if(status == HAL_OK)
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d108      	bne.n	800666c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800665a:	4b4c      	ldr	r3, [pc, #304]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f023 0203 	bic.w	r2, r3, #3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4949      	ldr	r1, [pc, #292]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006668:	4313      	orrs	r3, r2
 800666a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f040 8086 	bne.w	8006780 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006674:	4b45      	ldr	r3, [pc, #276]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a44      	ldr	r2, [pc, #272]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 800667a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800667e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006680:	f7fb fb1a 	bl	8001cb8 <HAL_GetTick>
 8006684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006686:	e009      	b.n	800669c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006688:	f7fb fb16 	bl	8001cb8 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d902      	bls.n	800669c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	73fb      	strb	r3, [r7, #15]
        break;
 800669a:	e005      	b.n	80066a8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800669c:	4b3b      	ldr	r3, [pc, #236]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1ef      	bne.n	8006688 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d168      	bne.n	8006780 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d113      	bne.n	80066dc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066b4:	4b35      	ldr	r3, [pc, #212]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	4b35      	ldr	r3, [pc, #212]	; (8006790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6892      	ldr	r2, [r2, #8]
 80066c0:	0211      	lsls	r1, r2, #8
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	68d2      	ldr	r2, [r2, #12]
 80066c6:	06d2      	lsls	r2, r2, #27
 80066c8:	4311      	orrs	r1, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6852      	ldr	r2, [r2, #4]
 80066ce:	3a01      	subs	r2, #1
 80066d0:	0112      	lsls	r2, r2, #4
 80066d2:	430a      	orrs	r2, r1
 80066d4:	492d      	ldr	r1, [pc, #180]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	610b      	str	r3, [r1, #16]
 80066da:	e02d      	b.n	8006738 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d115      	bne.n	800670e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066e2:	4b2a      	ldr	r3, [pc, #168]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 80066e4:	691a      	ldr	r2, [r3, #16]
 80066e6:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6892      	ldr	r2, [r2, #8]
 80066ee:	0211      	lsls	r1, r2, #8
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6912      	ldr	r2, [r2, #16]
 80066f4:	0852      	lsrs	r2, r2, #1
 80066f6:	3a01      	subs	r2, #1
 80066f8:	0552      	lsls	r2, r2, #21
 80066fa:	4311      	orrs	r1, r2
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6852      	ldr	r2, [r2, #4]
 8006700:	3a01      	subs	r2, #1
 8006702:	0112      	lsls	r2, r2, #4
 8006704:	430a      	orrs	r2, r1
 8006706:	4921      	ldr	r1, [pc, #132]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006708:	4313      	orrs	r3, r2
 800670a:	610b      	str	r3, [r1, #16]
 800670c:	e014      	b.n	8006738 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800670e:	4b1f      	ldr	r3, [pc, #124]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	4b21      	ldr	r3, [pc, #132]	; (8006798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6892      	ldr	r2, [r2, #8]
 800671a:	0211      	lsls	r1, r2, #8
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6952      	ldr	r2, [r2, #20]
 8006720:	0852      	lsrs	r2, r2, #1
 8006722:	3a01      	subs	r2, #1
 8006724:	0652      	lsls	r2, r2, #25
 8006726:	4311      	orrs	r1, r2
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6852      	ldr	r2, [r2, #4]
 800672c:	3a01      	subs	r2, #1
 800672e:	0112      	lsls	r2, r2, #4
 8006730:	430a      	orrs	r2, r1
 8006732:	4916      	ldr	r1, [pc, #88]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006734:	4313      	orrs	r3, r2
 8006736:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006738:	4b14      	ldr	r3, [pc, #80]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a13      	ldr	r2, [pc, #76]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 800673e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006742:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006744:	f7fb fab8 	bl	8001cb8 <HAL_GetTick>
 8006748:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800674a:	e009      	b.n	8006760 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800674c:	f7fb fab4 	bl	8001cb8 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d902      	bls.n	8006760 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	73fb      	strb	r3, [r7, #15]
          break;
 800675e:	e005      	b.n	800676c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0ef      	beq.n	800674c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006774:	691a      	ldr	r2, [r3, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	4904      	ldr	r1, [pc, #16]	; (800678c <RCCEx_PLLSAI1_Config+0x1d8>)
 800677c:	4313      	orrs	r3, r2
 800677e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40021000 	.word	0x40021000
 8006790:	07ff800f 	.word	0x07ff800f
 8006794:	ff9f800f 	.word	0xff9f800f
 8006798:	f9ff800f 	.word	0xf9ff800f

0800679c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067aa:	4b72      	ldr	r3, [pc, #456]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00e      	beq.n	80067d4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80067b6:	4b6f      	ldr	r3, [pc, #444]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f003 0203 	and.w	r2, r3, #3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d103      	bne.n	80067ce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
       ||
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d142      	bne.n	8006854 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]
 80067d2:	e03f      	b.n	8006854 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d018      	beq.n	800680e <RCCEx_PLLSAI2_Config+0x72>
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d825      	bhi.n	800682c <RCCEx_PLLSAI2_Config+0x90>
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d002      	beq.n	80067ea <RCCEx_PLLSAI2_Config+0x4e>
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d009      	beq.n	80067fc <RCCEx_PLLSAI2_Config+0x60>
 80067e8:	e020      	b.n	800682c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067ea:	4b62      	ldr	r3, [pc, #392]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d11d      	bne.n	8006832 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067fa:	e01a      	b.n	8006832 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067fc:	4b5d      	ldr	r3, [pc, #372]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006804:	2b00      	cmp	r3, #0
 8006806:	d116      	bne.n	8006836 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800680c:	e013      	b.n	8006836 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800680e:	4b59      	ldr	r3, [pc, #356]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800681a:	4b56      	ldr	r3, [pc, #344]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800682a:	e006      	b.n	800683a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
      break;
 8006830:	e004      	b.n	800683c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800683a:	bf00      	nop
    }

    if(status == HAL_OK)
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d108      	bne.n	8006854 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006842:	4b4c      	ldr	r3, [pc, #304]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f023 0203 	bic.w	r2, r3, #3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4949      	ldr	r1, [pc, #292]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006850:	4313      	orrs	r3, r2
 8006852:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f040 8086 	bne.w	8006968 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800685c:	4b45      	ldr	r3, [pc, #276]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a44      	ldr	r2, [pc, #272]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006868:	f7fb fa26 	bl	8001cb8 <HAL_GetTick>
 800686c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800686e:	e009      	b.n	8006884 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006870:	f7fb fa22 	bl	8001cb8 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d902      	bls.n	8006884 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	73fb      	strb	r3, [r7, #15]
        break;
 8006882:	e005      	b.n	8006890 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006884:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1ef      	bne.n	8006870 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d168      	bne.n	8006968 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d113      	bne.n	80068c4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800689c:	4b35      	ldr	r3, [pc, #212]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	4b35      	ldr	r3, [pc, #212]	; (8006978 <RCCEx_PLLSAI2_Config+0x1dc>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6892      	ldr	r2, [r2, #8]
 80068a8:	0211      	lsls	r1, r2, #8
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	68d2      	ldr	r2, [r2, #12]
 80068ae:	06d2      	lsls	r2, r2, #27
 80068b0:	4311      	orrs	r1, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6852      	ldr	r2, [r2, #4]
 80068b6:	3a01      	subs	r2, #1
 80068b8:	0112      	lsls	r2, r2, #4
 80068ba:	430a      	orrs	r2, r1
 80068bc:	492d      	ldr	r1, [pc, #180]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	614b      	str	r3, [r1, #20]
 80068c2:	e02d      	b.n	8006920 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d115      	bne.n	80068f6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068ca:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068cc:	695a      	ldr	r2, [r3, #20]
 80068ce:	4b2b      	ldr	r3, [pc, #172]	; (800697c <RCCEx_PLLSAI2_Config+0x1e0>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6892      	ldr	r2, [r2, #8]
 80068d6:	0211      	lsls	r1, r2, #8
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6912      	ldr	r2, [r2, #16]
 80068dc:	0852      	lsrs	r2, r2, #1
 80068de:	3a01      	subs	r2, #1
 80068e0:	0552      	lsls	r2, r2, #21
 80068e2:	4311      	orrs	r1, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6852      	ldr	r2, [r2, #4]
 80068e8:	3a01      	subs	r2, #1
 80068ea:	0112      	lsls	r2, r2, #4
 80068ec:	430a      	orrs	r2, r1
 80068ee:	4921      	ldr	r1, [pc, #132]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	614b      	str	r3, [r1, #20]
 80068f4:	e014      	b.n	8006920 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068f6:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	4b21      	ldr	r3, [pc, #132]	; (8006980 <RCCEx_PLLSAI2_Config+0x1e4>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6892      	ldr	r2, [r2, #8]
 8006902:	0211      	lsls	r1, r2, #8
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6952      	ldr	r2, [r2, #20]
 8006908:	0852      	lsrs	r2, r2, #1
 800690a:	3a01      	subs	r2, #1
 800690c:	0652      	lsls	r2, r2, #25
 800690e:	4311      	orrs	r1, r2
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6852      	ldr	r2, [r2, #4]
 8006914:	3a01      	subs	r2, #1
 8006916:	0112      	lsls	r2, r2, #4
 8006918:	430a      	orrs	r2, r1
 800691a:	4916      	ldr	r1, [pc, #88]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 800691c:	4313      	orrs	r3, r2
 800691e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006920:	4b14      	ldr	r3, [pc, #80]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692c:	f7fb f9c4 	bl	8001cb8 <HAL_GetTick>
 8006930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006932:	e009      	b.n	8006948 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006934:	f7fb f9c0 	bl	8001cb8 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d902      	bls.n	8006948 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	73fb      	strb	r3, [r7, #15]
          break;
 8006946:	e005      	b.n	8006954 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0ef      	beq.n	8006934 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	4904      	ldr	r1, [pc, #16]	; (8006974 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006964:	4313      	orrs	r3, r2
 8006966:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40021000 	.word	0x40021000
 8006978:	07ff800f 	.word	0x07ff800f
 800697c:	ff9f800f 	.word	0xff9f800f
 8006980:	f9ff800f 	.word	0xf9ff800f

08006984 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e03c      	b.n	8006a10 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fa ff88 	bl	80018c0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0201 	bic.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f905 	bl	8006bd8 <USART_SetConfig>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e01b      	b.n	8006a10 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069e6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069f6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fbcd 	bl	80071a8 <USART_CheckIdleState>
 8006a0e:	4603      	mov	r3, r0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	; 0x28
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f040 8095 	bne.w	8006b60 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <HAL_USART_Transmit+0x2a>
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e08d      	b.n	8006b62 <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_USART_Transmit+0x3c>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e086      	b.n	8006b62 <HAL_USART_Transmit+0x14a>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2212      	movs	r2, #18
 8006a66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a6a:	f7fb f925 	bl	8001cb8 <HAL_GetTick>
 8006a6e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	88fa      	ldrh	r2, [r7, #6]
 8006a74:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	88fa      	ldrh	r2, [r7, #6]
 8006a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a84:	d108      	bne.n	8006a98 <HAL_USART_Transmit+0x80>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	e003      	b.n	8006aa0 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8006aa0:	e02a      	b.n	8006af8 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f85c 	bl	8006b6a <USART_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e052      	b.n	8006b62 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e007      	b.n	8006aea <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1cf      	bne.n	8006aa2 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2140      	movs	r1, #64	; 0x40
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f82c 	bl	8006b6a <USART_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e022      	b.n	8006b62 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2240      	movs	r2, #64	; 0x40
 8006b22:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0208 	orr.w	r2, r2, #8
 8006b3a:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0210 	orr.w	r2, r2, #16
 8006b4a:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e000      	b.n	8006b62 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	4613      	mov	r3, r2
 8006b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006b7a:	e018      	b.n	8006bae <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d014      	beq.n	8006bae <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b84:	f7fb f898 	bl	8001cb8 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d302      	bcc.n	8006b9a <USART_WaitOnFlagUntilTimeout+0x30>
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e00f      	b.n	8006bce <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	bf0c      	ite	eq
 8006bbe:	2301      	moveq	r3, #1
 8006bc0:	2300      	movne	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d0d7      	beq.n	8006b7c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b96      	ldr	r3, [pc, #600]	; (8006e60 <USART_SetConfig+0x288>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8006c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c16:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c46:	f023 0309 	bic.w	r3, r3, #9
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6053      	str	r3, [r2, #4]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	f023 010f 	bic.w	r1, r3, #15
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a7d      	ldr	r2, [pc, #500]	; (8006e64 <USART_SetConfig+0x28c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d120      	bne.n	8006cb6 <USART_SetConfig+0xde>
 8006c74:	4b7c      	ldr	r3, [pc, #496]	; (8006e68 <USART_SetConfig+0x290>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d816      	bhi.n	8006cb0 <USART_SetConfig+0xd8>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <USART_SetConfig+0xb0>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006c99 	.word	0x08006c99
 8006c8c:	08006ca5 	.word	0x08006ca5
 8006c90:	08006c9f 	.word	0x08006c9f
 8006c94:	08006cab 	.word	0x08006cab
 8006c98:	2301      	movs	r3, #1
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e06b      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	77fb      	strb	r3, [r7, #31]
 8006ca2:	e068      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	e065      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006caa:	2308      	movs	r3, #8
 8006cac:	77fb      	strb	r3, [r7, #31]
 8006cae:	e062      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e05f      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6c      	ldr	r2, [pc, #432]	; (8006e6c <USART_SetConfig+0x294>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d132      	bne.n	8006d26 <USART_SetConfig+0x14e>
 8006cc0:	4b69      	ldr	r3, [pc, #420]	; (8006e68 <USART_SetConfig+0x290>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc6:	f003 030c 	and.w	r3, r3, #12
 8006cca:	2b0c      	cmp	r3, #12
 8006ccc:	d828      	bhi.n	8006d20 <USART_SetConfig+0x148>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <USART_SetConfig+0xfc>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006d09 	.word	0x08006d09
 8006cd8:	08006d21 	.word	0x08006d21
 8006cdc:	08006d21 	.word	0x08006d21
 8006ce0:	08006d21 	.word	0x08006d21
 8006ce4:	08006d15 	.word	0x08006d15
 8006ce8:	08006d21 	.word	0x08006d21
 8006cec:	08006d21 	.word	0x08006d21
 8006cf0:	08006d21 	.word	0x08006d21
 8006cf4:	08006d0f 	.word	0x08006d0f
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d21 	.word	0x08006d21
 8006d04:	08006d1b 	.word	0x08006d1b
 8006d08:	2300      	movs	r3, #0
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e033      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e030      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d14:	2304      	movs	r3, #4
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e02d      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e02a      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d20:	2310      	movs	r3, #16
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e027      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a51      	ldr	r2, [pc, #324]	; (8006e70 <USART_SetConfig+0x298>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d120      	bne.n	8006d72 <USART_SetConfig+0x19a>
 8006d30:	4b4d      	ldr	r3, [pc, #308]	; (8006e68 <USART_SetConfig+0x290>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d3a:	2b30      	cmp	r3, #48	; 0x30
 8006d3c:	d013      	beq.n	8006d66 <USART_SetConfig+0x18e>
 8006d3e:	2b30      	cmp	r3, #48	; 0x30
 8006d40:	d814      	bhi.n	8006d6c <USART_SetConfig+0x194>
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d009      	beq.n	8006d5a <USART_SetConfig+0x182>
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d810      	bhi.n	8006d6c <USART_SetConfig+0x194>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <USART_SetConfig+0x17c>
 8006d4e:	2b10      	cmp	r3, #16
 8006d50:	d006      	beq.n	8006d60 <USART_SetConfig+0x188>
 8006d52:	e00b      	b.n	8006d6c <USART_SetConfig+0x194>
 8006d54:	2300      	movs	r3, #0
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	e00d      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	77fb      	strb	r3, [r7, #31]
 8006d5e:	e00a      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d60:	2304      	movs	r3, #4
 8006d62:	77fb      	strb	r3, [r7, #31]
 8006d64:	e007      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d66:	2308      	movs	r3, #8
 8006d68:	77fb      	strb	r3, [r7, #31]
 8006d6a:	e004      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	77fb      	strb	r3, [r7, #31]
 8006d70:	e001      	b.n	8006d76 <USART_SetConfig+0x19e>
 8006d72:	2310      	movs	r3, #16
 8006d74:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8006d76:	7ffb      	ldrb	r3, [r7, #31]
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	f200 81e2 	bhi.w	8007142 <USART_SetConfig+0x56a>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <USART_SetConfig+0x1ac>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006da9 	.word	0x08006da9
 8006d88:	08006e75 	.word	0x08006e75
 8006d8c:	08006f2b 	.word	0x08006f2b
 8006d90:	08007143 	.word	0x08007143
 8006d94:	08006fdb 	.word	0x08006fdb
 8006d98:	08007143 	.word	0x08007143
 8006d9c:	08007143 	.word	0x08007143
 8006da0:	08007143 	.word	0x08007143
 8006da4:	08007091 	.word	0x08007091
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fe ff9a 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 8006dac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d044      	beq.n	8006e40 <USART_SetConfig+0x268>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d03e      	beq.n	8006e3c <USART_SetConfig+0x264>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d038      	beq.n	8006e38 <USART_SetConfig+0x260>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d032      	beq.n	8006e34 <USART_SetConfig+0x25c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d02c      	beq.n	8006e30 <USART_SetConfig+0x258>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d026      	beq.n	8006e2c <USART_SetConfig+0x254>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	2b06      	cmp	r3, #6
 8006de4:	d020      	beq.n	8006e28 <USART_SetConfig+0x250>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b07      	cmp	r3, #7
 8006dec:	d01a      	beq.n	8006e24 <USART_SetConfig+0x24c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d014      	beq.n	8006e20 <USART_SetConfig+0x248>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	2b09      	cmp	r3, #9
 8006dfc:	d00e      	beq.n	8006e1c <USART_SetConfig+0x244>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b0a      	cmp	r3, #10
 8006e04:	d008      	beq.n	8006e18 <USART_SetConfig+0x240>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b0b      	cmp	r3, #11
 8006e0c:	d102      	bne.n	8006e14 <USART_SetConfig+0x23c>
 8006e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e12:	e016      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e014      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	e012      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e1c:	2340      	movs	r3, #64	; 0x40
 8006e1e:	e010      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e20:	2320      	movs	r3, #32
 8006e22:	e00e      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e24:	2310      	movs	r3, #16
 8006e26:	e00c      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e28:	230c      	movs	r3, #12
 8006e2a:	e00a      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e2c:	230a      	movs	r3, #10
 8006e2e:	e008      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e30:	2308      	movs	r3, #8
 8006e32:	e006      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e34:	2306      	movs	r3, #6
 8006e36:	e004      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	e002      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e000      	b.n	8006e42 <USART_SetConfig+0x26a>
 8006e40:	2301      	movs	r3, #1
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	005a      	lsls	r2, r3, #1
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	441a      	add	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5a:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8006e5c:	e174      	b.n	8007148 <USART_SetConfig+0x570>
 8006e5e:	bf00      	nop
 8006e60:	cfff69f3 	.word	0xcfff69f3
 8006e64:	40013800 	.word	0x40013800
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40004400 	.word	0x40004400
 8006e70:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e74:	f7fe ff4a 	bl	8005d0c <HAL_RCC_GetPCLK2Freq>
 8006e78:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d044      	beq.n	8006f0c <USART_SetConfig+0x334>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d03e      	beq.n	8006f08 <USART_SetConfig+0x330>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d038      	beq.n	8006f04 <USART_SetConfig+0x32c>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d032      	beq.n	8006f00 <USART_SetConfig+0x328>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d02c      	beq.n	8006efc <USART_SetConfig+0x324>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d026      	beq.n	8006ef8 <USART_SetConfig+0x320>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2b06      	cmp	r3, #6
 8006eb0:	d020      	beq.n	8006ef4 <USART_SetConfig+0x31c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	d01a      	beq.n	8006ef0 <USART_SetConfig+0x318>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	d014      	beq.n	8006eec <USART_SetConfig+0x314>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	d00e      	beq.n	8006ee8 <USART_SetConfig+0x310>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b0a      	cmp	r3, #10
 8006ed0:	d008      	beq.n	8006ee4 <USART_SetConfig+0x30c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	2b0b      	cmp	r3, #11
 8006ed8:	d102      	bne.n	8006ee0 <USART_SetConfig+0x308>
 8006eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ede:	e016      	b.n	8006f0e <USART_SetConfig+0x336>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e014      	b.n	8006f0e <USART_SetConfig+0x336>
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	e012      	b.n	8006f0e <USART_SetConfig+0x336>
 8006ee8:	2340      	movs	r3, #64	; 0x40
 8006eea:	e010      	b.n	8006f0e <USART_SetConfig+0x336>
 8006eec:	2320      	movs	r3, #32
 8006eee:	e00e      	b.n	8006f0e <USART_SetConfig+0x336>
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	e00c      	b.n	8006f0e <USART_SetConfig+0x336>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	e00a      	b.n	8006f0e <USART_SetConfig+0x336>
 8006ef8:	230a      	movs	r3, #10
 8006efa:	e008      	b.n	8006f0e <USART_SetConfig+0x336>
 8006efc:	2308      	movs	r3, #8
 8006efe:	e006      	b.n	8006f0e <USART_SetConfig+0x336>
 8006f00:	2306      	movs	r3, #6
 8006f02:	e004      	b.n	8006f0e <USART_SetConfig+0x336>
 8006f04:	2304      	movs	r3, #4
 8006f06:	e002      	b.n	8006f0e <USART_SetConfig+0x336>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e000      	b.n	8006f0e <USART_SetConfig+0x336>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	005a      	lsls	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	441a      	add	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8006f28:	e10e      	b.n	8007148 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d044      	beq.n	8006fbc <USART_SetConfig+0x3e4>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d03e      	beq.n	8006fb8 <USART_SetConfig+0x3e0>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d038      	beq.n	8006fb4 <USART_SetConfig+0x3dc>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d032      	beq.n	8006fb0 <USART_SetConfig+0x3d8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d02c      	beq.n	8006fac <USART_SetConfig+0x3d4>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	2b05      	cmp	r3, #5
 8006f58:	d026      	beq.n	8006fa8 <USART_SetConfig+0x3d0>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b06      	cmp	r3, #6
 8006f60:	d020      	beq.n	8006fa4 <USART_SetConfig+0x3cc>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b07      	cmp	r3, #7
 8006f68:	d01a      	beq.n	8006fa0 <USART_SetConfig+0x3c8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d014      	beq.n	8006f9c <USART_SetConfig+0x3c4>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	2b09      	cmp	r3, #9
 8006f78:	d00e      	beq.n	8006f98 <USART_SetConfig+0x3c0>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2b0a      	cmp	r3, #10
 8006f80:	d008      	beq.n	8006f94 <USART_SetConfig+0x3bc>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2b0b      	cmp	r3, #11
 8006f88:	d102      	bne.n	8006f90 <USART_SetConfig+0x3b8>
 8006f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f8e:	e016      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e014      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	e012      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006f98:	2340      	movs	r3, #64	; 0x40
 8006f9a:	e010      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	e00e      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	e00c      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006fa4:	230c      	movs	r3, #12
 8006fa6:	e00a      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006fa8:	230a      	movs	r3, #10
 8006faa:	e008      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006fac:	2308      	movs	r3, #8
 8006fae:	e006      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006fb0:	2306      	movs	r3, #6
 8006fb2:	e004      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	e002      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e000      	b.n	8006fbe <USART_SetConfig+0x3e6>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	4a79      	ldr	r2, [pc, #484]	; (80071a4 <USART_SetConfig+0x5cc>)
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	005a      	lsls	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	441a      	add	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd6:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8006fd8:	e0b6      	b.n	8007148 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8006fda:	f7fe fde9 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8006fde:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d044      	beq.n	8007072 <USART_SetConfig+0x49a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d03e      	beq.n	800706e <USART_SetConfig+0x496>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d038      	beq.n	800706a <USART_SetConfig+0x492>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d032      	beq.n	8007066 <USART_SetConfig+0x48e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	2b04      	cmp	r3, #4
 8007006:	d02c      	beq.n	8007062 <USART_SetConfig+0x48a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	2b05      	cmp	r3, #5
 800700e:	d026      	beq.n	800705e <USART_SetConfig+0x486>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	2b06      	cmp	r3, #6
 8007016:	d020      	beq.n	800705a <USART_SetConfig+0x482>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	2b07      	cmp	r3, #7
 800701e:	d01a      	beq.n	8007056 <USART_SetConfig+0x47e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	2b08      	cmp	r3, #8
 8007026:	d014      	beq.n	8007052 <USART_SetConfig+0x47a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	2b09      	cmp	r3, #9
 800702e:	d00e      	beq.n	800704e <USART_SetConfig+0x476>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	2b0a      	cmp	r3, #10
 8007036:	d008      	beq.n	800704a <USART_SetConfig+0x472>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	2b0b      	cmp	r3, #11
 800703e:	d102      	bne.n	8007046 <USART_SetConfig+0x46e>
 8007040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007044:	e016      	b.n	8007074 <USART_SetConfig+0x49c>
 8007046:	2301      	movs	r3, #1
 8007048:	e014      	b.n	8007074 <USART_SetConfig+0x49c>
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	e012      	b.n	8007074 <USART_SetConfig+0x49c>
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	e010      	b.n	8007074 <USART_SetConfig+0x49c>
 8007052:	2320      	movs	r3, #32
 8007054:	e00e      	b.n	8007074 <USART_SetConfig+0x49c>
 8007056:	2310      	movs	r3, #16
 8007058:	e00c      	b.n	8007074 <USART_SetConfig+0x49c>
 800705a:	230c      	movs	r3, #12
 800705c:	e00a      	b.n	8007074 <USART_SetConfig+0x49c>
 800705e:	230a      	movs	r3, #10
 8007060:	e008      	b.n	8007074 <USART_SetConfig+0x49c>
 8007062:	2308      	movs	r3, #8
 8007064:	e006      	b.n	8007074 <USART_SetConfig+0x49c>
 8007066:	2306      	movs	r3, #6
 8007068:	e004      	b.n	8007074 <USART_SetConfig+0x49c>
 800706a:	2304      	movs	r3, #4
 800706c:	e002      	b.n	8007074 <USART_SetConfig+0x49c>
 800706e:	2302      	movs	r3, #2
 8007070:	e000      	b.n	8007074 <USART_SetConfig+0x49c>
 8007072:	2301      	movs	r3, #1
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	fbb2 f3f3 	udiv	r3, r2, r3
 800707a:	005a      	lsls	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	441a      	add	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 800708e:	e05b      	b.n	8007148 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	d044      	beq.n	8007122 <USART_SetConfig+0x54a>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	2b01      	cmp	r3, #1
 800709e:	d03e      	beq.n	800711e <USART_SetConfig+0x546>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d038      	beq.n	800711a <USART_SetConfig+0x542>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d032      	beq.n	8007116 <USART_SetConfig+0x53e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d02c      	beq.n	8007112 <USART_SetConfig+0x53a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	2b05      	cmp	r3, #5
 80070be:	d026      	beq.n	800710e <USART_SetConfig+0x536>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	2b06      	cmp	r3, #6
 80070c6:	d020      	beq.n	800710a <USART_SetConfig+0x532>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	2b07      	cmp	r3, #7
 80070ce:	d01a      	beq.n	8007106 <USART_SetConfig+0x52e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d014      	beq.n	8007102 <USART_SetConfig+0x52a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	2b09      	cmp	r3, #9
 80070de:	d00e      	beq.n	80070fe <USART_SetConfig+0x526>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2b0a      	cmp	r3, #10
 80070e6:	d008      	beq.n	80070fa <USART_SetConfig+0x522>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b0b      	cmp	r3, #11
 80070ee:	d102      	bne.n	80070f6 <USART_SetConfig+0x51e>
 80070f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070f4:	e016      	b.n	8007124 <USART_SetConfig+0x54c>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e014      	b.n	8007124 <USART_SetConfig+0x54c>
 80070fa:	2380      	movs	r3, #128	; 0x80
 80070fc:	e012      	b.n	8007124 <USART_SetConfig+0x54c>
 80070fe:	2340      	movs	r3, #64	; 0x40
 8007100:	e010      	b.n	8007124 <USART_SetConfig+0x54c>
 8007102:	2320      	movs	r3, #32
 8007104:	e00e      	b.n	8007124 <USART_SetConfig+0x54c>
 8007106:	2310      	movs	r3, #16
 8007108:	e00c      	b.n	8007124 <USART_SetConfig+0x54c>
 800710a:	230c      	movs	r3, #12
 800710c:	e00a      	b.n	8007124 <USART_SetConfig+0x54c>
 800710e:	230a      	movs	r3, #10
 8007110:	e008      	b.n	8007124 <USART_SetConfig+0x54c>
 8007112:	2308      	movs	r3, #8
 8007114:	e006      	b.n	8007124 <USART_SetConfig+0x54c>
 8007116:	2306      	movs	r3, #6
 8007118:	e004      	b.n	8007124 <USART_SetConfig+0x54c>
 800711a:	2304      	movs	r3, #4
 800711c:	e002      	b.n	8007124 <USART_SetConfig+0x54c>
 800711e:	2302      	movs	r3, #2
 8007120:	e000      	b.n	8007124 <USART_SetConfig+0x54c>
 8007122:	2301      	movs	r3, #1
 8007124:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007128:	fbb2 f3f3 	udiv	r3, r2, r3
 800712c:	005a      	lsls	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	441a      	add	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	fbb2 f3f3 	udiv	r3, r2, r3
 800713e:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8007140:	e002      	b.n	8007148 <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	77bb      	strb	r3, [r7, #30]
      break;
 8007146:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2b0f      	cmp	r3, #15
 800714c:	d916      	bls.n	800717c <USART_SetConfig+0x5a4>
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007154:	d212      	bcs.n	800717c <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f023 030f 	bic.w	r3, r3, #15
 800715e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	b29b      	uxth	r3, r3
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	b29a      	uxth	r2, r3
 800716c:	89fb      	ldrh	r3, [r7, #14]
 800716e:	4313      	orrs	r3, r2
 8007170:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	89fa      	ldrh	r2, [r7, #14]
 8007178:	60da      	str	r2, [r3, #12]
 800717a:	e001      	b.n	8007180 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	77bb      	strb	r3, [r7, #30]
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8007198:	7fbb      	ldrb	r3, [r7, #30]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3720      	adds	r7, #32
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	00f42400 	.word	0x00f42400

080071a8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b6:	f7fa fd7f 	bl	8001cb8 <HAL_GetTick>
 80071ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d10e      	bne.n	80071e8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80071ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff fcc6 	bl	8006b6a <USART_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e01e      	b.n	8007226 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d10e      	bne.n	8007214 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80071f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff fcb0 	bl	8006b6a <USART_WaitOnFlagUntilTimeout>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e008      	b.n	8007226 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_USARTEx_DisableFifoMode+0x16>
 8007240:	2302      	movs	r3, #2
 8007242:	e027      	b.n	8007294 <HAL_USARTEx_DisableFifoMode+0x66>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0201 	bic.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007272:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e02d      	b.n	8007314 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f84f 	bl	8007398 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8007330:	2302      	movs	r3, #2
 8007332:	e02d      	b.n	8007390 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0201 	bic.w	r2, r2, #1
 800735a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f811 	bl	8007398 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d106      	bne.n	80073b6 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073b4:	e02f      	b.n	8007416 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073b6:	2308      	movs	r3, #8
 80073b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073ba:	2308      	movs	r3, #8
 80073bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80073c4:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80073d4:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	7b3a      	ldrb	r2, [r7, #12]
 80073e2:	4910      	ldr	r1, [pc, #64]	; (8007424 <USARTEx_SetNbDataToProcess+0x8c>)
 80073e4:	5c8a      	ldrb	r2, [r1, r2]
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 80073ea:	7b3a      	ldrb	r2, [r7, #12]
 80073ec:	490e      	ldr	r1, [pc, #56]	; (8007428 <USARTEx_SetNbDataToProcess+0x90>)
 80073ee:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	7b7a      	ldrb	r2, [r7, #13]
 80073fe:	4909      	ldr	r1, [pc, #36]	; (8007424 <USARTEx_SetNbDataToProcess+0x8c>)
 8007400:	5c8a      	ldrb	r2, [r1, r2]
 8007402:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8007406:	7b7a      	ldrb	r2, [r7, #13]
 8007408:	4907      	ldr	r1, [pc, #28]	; (8007428 <USARTEx_SetNbDataToProcess+0x90>)
 800740a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800740c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007410:	b29a      	uxth	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	08012214 	.word	0x08012214
 8007428:	0801221c 	.word	0x0801221c

0800742c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800742c:	b084      	sub	sp, #16
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	f107 001c 	add.w	r0, r7, #28
 800743a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f99c 	bl	8007788 <USB_CoreReset>
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
 8007466:	e005      	b.n	8007474 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007480:	b004      	add	sp, #16
 8007482:	4770      	bx	lr

08007484 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f043 0201 	orr.w	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f023 0201 	bic.w	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d115      	bne.n	8007516 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074f6:	2001      	movs	r0, #1
 80074f8:	f7fa fbea 	bl	8001cd0 <HAL_Delay>
      ms++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f931 	bl	800776a <USB_GetMode>
 8007508:	4603      	mov	r3, r0
 800750a:	2b01      	cmp	r3, #1
 800750c:	d01e      	beq.n	800754c <USB_SetCurrentMode+0x84>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b31      	cmp	r3, #49	; 0x31
 8007512:	d9f0      	bls.n	80074f6 <USB_SetCurrentMode+0x2e>
 8007514:	e01a      	b.n	800754c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d115      	bne.n	8007548 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007528:	2001      	movs	r0, #1
 800752a:	f7fa fbd1 	bl	8001cd0 <HAL_Delay>
      ms++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f918 	bl	800776a <USB_GetMode>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USB_SetCurrentMode+0x84>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b31      	cmp	r3, #49	; 0x31
 8007544:	d9f0      	bls.n	8007528 <USB_SetCurrentMode+0x60>
 8007546:	e001      	b.n	800754c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e005      	b.n	8007558 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b32      	cmp	r3, #50	; 0x32
 8007550:	d101      	bne.n	8007556 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <USB_FlushTxFifo+0x60>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d901      	bls.n	800757e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e01a      	b.n	80075b4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	daf3      	bge.n	800756e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	019b      	lsls	r3, r3, #6
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	4a08      	ldr	r2, [pc, #32]	; (80075c0 <USB_FlushTxFifo+0x60>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d901      	bls.n	80075a6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e006      	b.n	80075b4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d0f1      	beq.n	8007596 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	00030d40 	.word	0x00030d40

080075c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	4a11      	ldr	r2, [pc, #68]	; (800761c <USB_FlushRxFifo+0x58>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d901      	bls.n	80075e0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e017      	b.n	8007610 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	daf3      	bge.n	80075d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2210      	movs	r2, #16
 80075f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	4a08      	ldr	r2, [pc, #32]	; (800761c <USB_FlushRxFifo+0x58>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e006      	b.n	8007610 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0310 	and.w	r3, r3, #16
 800760a:	2b10      	cmp	r3, #16
 800760c:	d0f1      	beq.n	80075f2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	00030d40 	.word	0x00030d40

08007620 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007620:	b480      	push	{r7}
 8007622:	b089      	sub	sp, #36	; 0x24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	4611      	mov	r1, r2
 800762c:	461a      	mov	r2, r3
 800762e:	460b      	mov	r3, r1
 8007630:	71fb      	strb	r3, [r7, #7]
 8007632:	4613      	mov	r3, r2
 8007634:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800763e:	88bb      	ldrh	r3, [r7, #4]
 8007640:	3303      	adds	r3, #3
 8007642:	089b      	lsrs	r3, r3, #2
 8007644:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e018      	b.n	800767e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	031a      	lsls	r2, r3, #12
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007658:	461a      	mov	r2, r3
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3301      	adds	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	3301      	adds	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	3301      	adds	r3, #1
 8007676:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	3301      	adds	r3, #1
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	429a      	cmp	r2, r3
 8007684:	d3e2      	bcc.n	800764c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3724      	adds	r7, #36	; 0x24
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007694:	b480      	push	{r7}
 8007696:	b08b      	sub	sp, #44	; 0x2c
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	089b      	lsrs	r3, r3, #2
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076ba:	2300      	movs	r3, #0
 80076bc:	623b      	str	r3, [r7, #32]
 80076be:	e014      	b.n	80076ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	3301      	adds	r3, #1
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	3301      	adds	r3, #1
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	3301      	adds	r3, #1
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	3301      	adds	r3, #1
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	3301      	adds	r3, #1
 80076e8:	623b      	str	r3, [r7, #32]
 80076ea:	6a3a      	ldr	r2, [r7, #32]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d3e6      	bcc.n	80076c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076f2:	8bfb      	ldrh	r3, [r7, #30]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01e      	beq.n	8007736 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007702:	461a      	mov	r2, r3
 8007704:	f107 0310 	add.w	r3, r7, #16
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	fa22 f303 	lsr.w	r3, r2, r3
 8007718:	b2da      	uxtb	r2, r3
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	701a      	strb	r2, [r3, #0]
      i++;
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	3301      	adds	r3, #1
 8007722:	623b      	str	r3, [r7, #32]
      pDest++;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	3301      	adds	r3, #1
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800772a:	8bfb      	ldrh	r3, [r7, #30]
 800772c:	3b01      	subs	r3, #1
 800772e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007730:	8bfb      	ldrh	r3, [r7, #30]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1ea      	bne.n	800770c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007738:	4618      	mov	r0, r3
 800773a:	372c      	adds	r7, #44	; 0x2c
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4013      	ands	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800775c:	68fb      	ldr	r3, [r7, #12]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0301 	and.w	r3, r3, #1
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	4a13      	ldr	r2, [pc, #76]	; (80077e8 <USB_CoreReset+0x60>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e01a      	b.n	80077da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	daf3      	bge.n	8007794 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f043 0201 	orr.w	r2, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <USB_CoreReset+0x60>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d901      	bls.n	80077cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e006      	b.n	80077da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d0f1      	beq.n	80077bc <USB_CoreReset+0x34>

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	00030d40 	.word	0x00030d40

080077ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ec:	b084      	sub	sp, #16
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800780c:	461a      	mov	r2, r3
 800780e:	2300      	movs	r3, #0
 8007810:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007838:	f023 0304 	bic.w	r3, r3, #4
 800783c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800783e:	2110      	movs	r1, #16
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fe8d 	bl	8007560 <USB_FlushTxFifo>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff feb7 	bl	80075c4 <USB_FlushRxFifo>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007860:	2300      	movs	r3, #0
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	e015      	b.n	8007892 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007872:	461a      	mov	r2, r3
 8007874:	f04f 33ff 	mov.w	r3, #4294967295
 8007878:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007886:	461a      	mov	r2, r3
 8007888:	2300      	movs	r3, #0
 800788a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	3301      	adds	r3, #1
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	429a      	cmp	r2, r3
 8007898:	d3e5      	bcc.n	8007866 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2280      	movs	r2, #128	; 0x80
 80078ac:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a0c      	ldr	r2, [pc, #48]	; (80078e4 <USB_HostInit+0xf8>)
 80078b2:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a0c      	ldr	r2, [pc, #48]	; (80078e8 <USB_HostInit+0xfc>)
 80078b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f043 0210 	orr.w	r2, r3, #16
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	4b07      	ldr	r3, [pc, #28]	; (80078ec <USB_HostInit+0x100>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078e0:	b004      	add	sp, #16
 80078e2:	4770      	bx	lr
 80078e4:	00600080 	.word	0x00600080
 80078e8:	004000e0 	.word	0x004000e0
 80078ec:	a3200008 	.word	0xa3200008

080078f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	68f9      	ldr	r1, [r7, #12]
 8007924:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007928:	4313      	orrs	r3, r2
 800792a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d107      	bne.n	8007942 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007938:	461a      	mov	r2, r3
 800793a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800793e:	6053      	str	r3, [r2, #4]
 8007940:	e009      	b.n	8007956 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d106      	bne.n	8007956 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794e:	461a      	mov	r2, r3
 8007950:	f241 7370 	movw	r3, #6000	; 0x1770
 8007954:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007984:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800798e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007992:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007994:	2064      	movs	r0, #100	; 0x64
 8007996:	f7fa f99b 	bl	8001cd0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80079a8:	200a      	movs	r0, #10
 80079aa:	f7fa f991 	bl	8001cd0 <HAL_Delay>

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80079dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d109      	bne.n	80079fc <USB_DriveVbus+0x44>
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d106      	bne.n	80079fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a06:	d109      	bne.n	8007a1c <USB_DriveVbus+0x64>
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	0c5b      	lsrs	r3, r3, #17
 8007a48:	f003 0303 	and.w	r3, r3, #3
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	b29b      	uxth	r3, r3
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	70fb      	strb	r3, [r7, #3]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70bb      	strb	r3, [r7, #2]
 8007a92:	4613      	mov	r3, r2
 8007a94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007ab2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d867      	bhi.n	8007b8a <USB_HC_Init+0x10e>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USB_HC_Init+0x44>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad1 	.word	0x08007ad1
 8007ac4:	08007b4d 	.word	0x08007b4d
 8007ac8:	08007ad1 	.word	0x08007ad1
 8007acc:	08007b0f 	.word	0x08007b0f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007adc:	461a      	mov	r2, r3
 8007ade:	f240 439d 	movw	r3, #1181	; 0x49d
 8007ae2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007ae4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	da51      	bge.n	8007b90 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0a:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b0c:	e040      	b.n	8007b90 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b0e:	78fb      	ldrb	r3, [r7, #3]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f240 639d 	movw	r3, #1693	; 0x69d
 8007b20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da34      	bge.n	8007b94 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	78fa      	ldrb	r2, [r7, #3]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b48:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b4a:	e023      	b.n	8007b94 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f240 2325 	movw	r3, #549	; 0x225
 8007b5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	da17      	bge.n	8007b98 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	78fa      	ldrb	r2, [r7, #3]
 8007b78:	0151      	lsls	r1, r2, #5
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b82:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007b86:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b88:	e006      	b.n	8007b98 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	77fb      	strb	r3, [r7, #31]
      break;
 8007b8e:	e004      	b.n	8007b9a <USB_HC_Init+0x11e>
      break;
 8007b90:	bf00      	nop
 8007b92:	e002      	b.n	8007b9a <USB_HC_Init+0x11e>
      break;
 8007b94:	bf00      	nop
 8007b96:	e000      	b.n	8007b9a <USB_HC_Init+0x11e>
      break;
 8007b98:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bb4:	f043 0302 	orr.w	r3, r3, #2
 8007bb8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	f003 030f 	and.w	r3, r3, #15
 8007bc8:	2101      	movs	r1, #1
 8007bca:	fa01 f303 	lsl.w	r3, r1, r3
 8007bce:	6939      	ldr	r1, [r7, #16]
 8007bd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007be4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da03      	bge.n	8007bf4 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	e001      	b.n	8007bf8 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ff16 	bl	8007a2a <USB_GetHostSpeed>
 8007bfe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007c00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d106      	bne.n	8007c16 <USB_HC_Init+0x19a>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d003      	beq.n	8007c16 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e001      	b.n	8007c1a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c1a:	787b      	ldrb	r3, [r7, #1]
 8007c1c:	059b      	lsls	r3, r3, #22
 8007c1e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c22:	78bb      	ldrb	r3, [r7, #2]
 8007c24:	02db      	lsls	r3, r3, #11
 8007c26:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c2a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c30:	049b      	lsls	r3, r3, #18
 8007c32:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c3e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	0159      	lsls	r1, r3, #5
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	440b      	add	r3, r1
 8007c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c50:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c56:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007c58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d10f      	bne.n	8007c80 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c7e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop

08007c8c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ca4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d018      	beq.n	8007ce0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	8912      	ldrh	r2, [r2, #8]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	8912      	ldrh	r2, [r2, #8]
 8007cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cc2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007cc4:	8bfa      	ldrh	r2, [r7, #30]
 8007cc6:	8a7b      	ldrh	r3, [r7, #18]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d90b      	bls.n	8007ce4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007ccc:	8a7b      	ldrh	r3, [r7, #18]
 8007cce:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007cd0:	8bfb      	ldrh	r3, [r7, #30]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	8912      	ldrh	r2, [r2, #8]
 8007cd6:	fb02 f203 	mul.w	r2, r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	611a      	str	r2, [r3, #16]
 8007cde:	e001      	b.n	8007ce4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	78db      	ldrb	r3, [r3, #3]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007cec:	8bfb      	ldrh	r3, [r7, #30]
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	8912      	ldrh	r2, [r2, #8]
 8007cf2:	fb02 f203 	mul.w	r2, r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	611a      	str	r2, [r3, #16]
 8007cfa:	e003      	b.n	8007d04 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	695a      	ldr	r2, [r3, #20]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d0c:	8bfb      	ldrh	r3, [r7, #30]
 8007d0e:	04d9      	lsls	r1, r3, #19
 8007d10:	4b59      	ldr	r3, [pc, #356]	; (8007e78 <USB_HC_StartXfer+0x1ec>)
 8007d12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	7a9b      	ldrb	r3, [r3, #10]
 8007d1a:	075b      	lsls	r3, r3, #29
 8007d1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d20:	6979      	ldr	r1, [r7, #20]
 8007d22:	0148      	lsls	r0, r1, #5
 8007d24:	69b9      	ldr	r1, [r7, #24]
 8007d26:	4401      	add	r1, r0
 8007d28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d2e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d66:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	7c7b      	ldrb	r3, [r7, #17]
 8007d78:	075b      	lsls	r3, r3, #29
 8007d7a:	6979      	ldr	r1, [r7, #20]
 8007d7c:	0148      	lsls	r0, r1, #5
 8007d7e:	69b9      	ldr	r1, [r7, #24]
 8007d80:	4401      	add	r1, r0
 8007d82:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007d86:	4313      	orrs	r3, r2
 8007d88:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007da0:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	78db      	ldrb	r3, [r3, #3]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	e003      	b.n	8007dbc <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dba:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dc2:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	78db      	ldrb	r3, [r3, #3]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d147      	bne.n	8007e6e <USB_HC_StartXfer+0x1e2>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d043      	beq.n	8007e6e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	79db      	ldrb	r3, [r3, #7]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d830      	bhi.n	8007e50 <USB_HC_StartXfer+0x1c4>
 8007dee:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <USB_HC_StartXfer+0x168>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e29 	.word	0x08007e29
 8007dfc:	08007e05 	.word	0x08007e05
 8007e00:	08007e29 	.word	0x08007e29
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	3303      	adds	r3, #3
 8007e0a:	089b      	lsrs	r3, r3, #2
 8007e0c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e0e:	89fa      	ldrh	r2, [r7, #14]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d91c      	bls.n	8007e54 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	f043 0220 	orr.w	r2, r3, #32
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e26:	e015      	b.n	8007e54 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	3303      	adds	r3, #3
 8007e2e:	089b      	lsrs	r3, r3, #2
 8007e30:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007e32:	89fa      	ldrh	r2, [r7, #14]
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d90a      	bls.n	8007e58 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e4e:	e003      	b.n	8007e58 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8007e50:	bf00      	nop
 8007e52:	e002      	b.n	8007e5a <USB_HC_StartXfer+0x1ce>
        break;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <USB_HC_StartXfer+0x1ce>
        break;
 8007e58:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68d9      	ldr	r1, [r3, #12]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	785a      	ldrb	r2, [r3, #1]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff fbd9 	bl	8007620 <USB_WritePacket>
  }

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	1ff80000 	.word	0x1ff80000

08007e7c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	b29b      	uxth	r3, r3
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b089      	sub	sp, #36	; 0x24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	0c9b      	lsrs	r3, r3, #18
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	0fdb      	lsrs	r3, r3, #31
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d104      	bne.n	8007ef8 <USB_HC_Halt+0x5a>
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e0c6      	b.n	8008086 <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <USB_HC_Halt+0x66>
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d162      	bne.n	8007fca <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f22:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 80a9 	bne.w	8008084 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d132      	bne.n	8007fa4 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f5c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f7c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f88:	d81d      	bhi.n	8007fc6 <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fa0:	d0ed      	beq.n	8007f7e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fa2:	e06f      	b.n	8008084 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	0151      	lsls	r1, r2, #5
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	440a      	add	r2, r1
 8007fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fc2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fc4:	e05e      	b.n	8008084 <USB_HC_Halt+0x1e6>
            break;
 8007fc6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fc8:	e05c      	b.n	8008084 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	0151      	lsls	r1, r2, #5
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	440a      	add	r2, r1
 8007fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fe8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d132      	bne.n	8008060 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	0151      	lsls	r1, r2, #5
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	440a      	add	r2, r1
 8008010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008018:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	69fa      	ldr	r2, [r7, #28]
 800802e:	440a      	add	r2, r1
 8008030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008038:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008044:	d81d      	bhi.n	8008082 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800805c:	d0ed      	beq.n	800803a <USB_HC_Halt+0x19c>
 800805e:	e011      	b.n	8008084 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	4413      	add	r3, r2
 8008068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	0151      	lsls	r1, r2, #5
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	440a      	add	r2, r1
 8008076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800807a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	e000      	b.n	8008084 <USB_HC_Halt+0x1e6>
          break;
 8008082:	bf00      	nop
    }
  }

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3724      	adds	r7, #36	; 0x24
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b088      	sub	sp, #32
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff f9fd 	bl	80074a6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080ac:	2110      	movs	r1, #16
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fa56 	bl	8007560 <USB_FlushTxFifo>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fa80 	bl	80075c4 <USB_FlushRxFifo>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80080ce:	2300      	movs	r3, #0
 80080d0:	61bb      	str	r3, [r7, #24]
 80080d2:	e01f      	b.n	8008114 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080ea:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080f2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080fa:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	4413      	add	r3, r2
 8008104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008108:	461a      	mov	r2, r3
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	3301      	adds	r3, #1
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	2b0f      	cmp	r3, #15
 8008118:	d9dc      	bls.n	80080d4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800811a:	2300      	movs	r3, #0
 800811c:	61bb      	str	r3, [r7, #24]
 800811e:	e033      	b.n	8008188 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	4413      	add	r3, r2
 8008128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008136:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800813e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008146:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	4413      	add	r3, r2
 8008150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008154:	461a      	mov	r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008164:	d80c      	bhi.n	8008180 <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800817c:	d0ed      	beq.n	800815a <USB_StopHost+0xc8>
 800817e:	e000      	b.n	8008182 <USB_StopHost+0xf0>
        break;
 8008180:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	3301      	adds	r3, #1
 8008186:	61bb      	str	r3, [r7, #24]
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b0f      	cmp	r3, #15
 800818c:	d9c8      	bls.n	8008120 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008194:	461a      	mov	r2, r3
 8008196:	f04f 33ff 	mov.w	r3, #4294967295
 800819a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff f96d 	bl	8007484 <USB_EnableGlobalInt>

  return ret;
 80081aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80081b8:	4904      	ldr	r1, [pc, #16]	; (80081cc <MX_FATFS_Init+0x18>)
 80081ba:	4805      	ldr	r0, [pc, #20]	; (80081d0 <MX_FATFS_Init+0x1c>)
 80081bc:	f007 ff0e 	bl	800ffdc <FATFS_LinkDriver>
 80081c0:	4603      	mov	r3, r0
 80081c2:	461a      	mov	r2, r3
 80081c4:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <MX_FATFS_Init+0x20>)
 80081c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000758 	.word	0x20000758
 80081d0:	08012224 	.word	0x08012224
 80081d4:	200027f4 	.word	0x200027f4

080081d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80081dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80081de:	4618      	mov	r0, r3
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	4619      	mov	r1, r3
 8008212:	4808      	ldr	r0, [pc, #32]	; (8008234 <USBH_status+0x34>)
 8008214:	f000 fe1a 	bl	8008e4c <USBH_MSC_UnitIsReady>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <USBH_status+0x24>
  {
    res = RES_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
 8008222:	e001      	b.n	8008228 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008228:	7bfb      	ldrb	r3, [r7, #15]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	200027f8 	.word	0x200027f8

08008238 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b094      	sub	sp, #80	; 0x50
 800823c:	af02      	add	r7, sp, #8
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800824e:	7bf9      	ldrb	r1, [r7, #15]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4813      	ldr	r0, [pc, #76]	; (80082a8 <USBH_read+0x70>)
 800825a:	f000 fe41 	bl	8008ee0 <USBH_MSC_Read>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <USBH_read+0x34>
  {
    res = RES_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800826a:	e017      	b.n	800829c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800826c:	f107 0210 	add.w	r2, r7, #16
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	4619      	mov	r1, r3
 8008274:	480c      	ldr	r0, [pc, #48]	; (80082a8 <USBH_read+0x70>)
 8008276:	f000 fe0f 	bl	8008e98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800827a:	7f7b      	ldrb	r3, [r7, #29]
 800827c:	2b3a      	cmp	r3, #58	; 0x3a
 800827e:	d005      	beq.n	800828c <USBH_read+0x54>
 8008280:	2b3a      	cmp	r3, #58	; 0x3a
 8008282:	dc07      	bgt.n	8008294 <USBH_read+0x5c>
 8008284:	2b04      	cmp	r3, #4
 8008286:	d001      	beq.n	800828c <USBH_read+0x54>
 8008288:	2b28      	cmp	r3, #40	; 0x28
 800828a:	d103      	bne.n	8008294 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800828c:	2303      	movs	r3, #3
 800828e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008292:	e003      	b.n	800829c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800829a:	bf00      	nop
    }
  }

  return res;
 800829c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3748      	adds	r7, #72	; 0x48
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	200027f8 	.word	0x200027f8

080082ac <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b094      	sub	sp, #80	; 0x50
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80082c2:	7bf9      	ldrb	r1, [r7, #15]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4817      	ldr	r0, [pc, #92]	; (800832c <USBH_write+0x80>)
 80082ce:	f000 fe70 	bl	8008fb2 <USBH_MSC_Write>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <USBH_write+0x34>
  {
    res = RES_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80082de:	e01f      	b.n	8008320 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80082e0:	f107 0210 	add.w	r2, r7, #16
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	4619      	mov	r1, r3
 80082e8:	4810      	ldr	r0, [pc, #64]	; (800832c <USBH_write+0x80>)
 80082ea:	f000 fdd5 	bl	8008e98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80082ee:	7f7b      	ldrb	r3, [r7, #29]
 80082f0:	2b3a      	cmp	r3, #58	; 0x3a
 80082f2:	d00d      	beq.n	8008310 <USBH_write+0x64>
 80082f4:	2b3a      	cmp	r3, #58	; 0x3a
 80082f6:	dc0f      	bgt.n	8008318 <USBH_write+0x6c>
 80082f8:	2b28      	cmp	r3, #40	; 0x28
 80082fa:	d009      	beq.n	8008310 <USBH_write+0x64>
 80082fc:	2b28      	cmp	r3, #40	; 0x28
 80082fe:	dc0b      	bgt.n	8008318 <USBH_write+0x6c>
 8008300:	2b04      	cmp	r3, #4
 8008302:	d005      	beq.n	8008310 <USBH_write+0x64>
 8008304:	2b27      	cmp	r3, #39	; 0x27
 8008306:	d107      	bne.n	8008318 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008308:	2302      	movs	r3, #2
 800830a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800830e:	e007      	b.n	8008320 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008310:	2303      	movs	r3, #3
 8008312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008316:	e003      	b.n	8008320 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800831e:	bf00      	nop
    }
  }

  return res;
 8008320:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008324:	4618      	mov	r0, r3
 8008326:	3748      	adds	r7, #72	; 0x48
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	200027f8 	.word	0x200027f8

08008330 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b090      	sub	sp, #64	; 0x40
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	603a      	str	r2, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
 800833c:	460b      	mov	r3, r1
 800833e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008346:	79bb      	ldrb	r3, [r7, #6]
 8008348:	2b03      	cmp	r3, #3
 800834a:	d852      	bhi.n	80083f2 <USBH_ioctl+0xc2>
 800834c:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <USBH_ioctl+0x24>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008365 	.word	0x08008365
 8008358:	0800836d 	.word	0x0800836d
 800835c:	08008397 	.word	0x08008397
 8008360:	080083c3 	.word	0x080083c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800836a:	e045      	b.n	80083f8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800836c:	f107 0208 	add.w	r2, r7, #8
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	4619      	mov	r1, r3
 8008374:	4823      	ldr	r0, [pc, #140]	; (8008404 <USBH_ioctl+0xd4>)
 8008376:	f000 fd8f 	bl	8008e98 <USBH_MSC_GetLUNInfo>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d106      	bne.n	800838e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800838c:	e034      	b.n	80083f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008394:	e030      	b.n	80083f8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008396:	f107 0208 	add.w	r2, r7, #8
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	4619      	mov	r1, r3
 800839e:	4819      	ldr	r0, [pc, #100]	; (8008404 <USBH_ioctl+0xd4>)
 80083a0:	f000 fd7a 	bl	8008e98 <USBH_MSC_GetLUNInfo>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d107      	bne.n	80083ba <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80083aa:	8a3b      	ldrh	r3, [r7, #16]
 80083ac:	461a      	mov	r2, r3
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80083b8:	e01e      	b.n	80083f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80083c0:	e01a      	b.n	80083f8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80083c2:	f107 0208 	add.w	r2, r7, #8
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	4619      	mov	r1, r3
 80083ca:	480e      	ldr	r0, [pc, #56]	; (8008404 <USBH_ioctl+0xd4>)
 80083cc:	f000 fd64 	bl	8008e98 <USBH_MSC_GetLUNInfo>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d109      	bne.n	80083ea <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80083d6:	8a3b      	ldrh	r3, [r7, #16]
 80083d8:	0a5b      	lsrs	r3, r3, #9
 80083da:	b29b      	uxth	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80083e8:	e006      	b.n	80083f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80083f0:	e002      	b.n	80083f8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80083f2:	2304      	movs	r3, #4
 80083f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80083f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3740      	adds	r7, #64	; 0x40
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	200027f8 	.word	0x200027f8

08008408 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008408:	b590      	push	{r4, r7, lr}
 800840a:	b089      	sub	sp, #36	; 0x24
 800840c:	af04      	add	r7, sp, #16
 800840e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008416:	7919      	ldrb	r1, [r3, #4]
 8008418:	2350      	movs	r3, #80	; 0x50
 800841a:	2206      	movs	r2, #6
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 fc53 	bl	8009cc8 <USBH_FindInterface>
 8008422:	4603      	mov	r3, r0
 8008424:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	2bff      	cmp	r3, #255	; 0xff
 800842a:	d002      	beq.n	8008432 <USBH_MSC_InterfaceInit+0x2a>
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d901      	bls.n	8008436 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008432:	2302      	movs	r3, #2
 8008434:	e0ef      	b.n	8008616 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fc28 	bl	8009c90 <USBH_SelectInterface>
 8008440:	4603      	mov	r3, r0
 8008442:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800844a:	2302      	movs	r3, #2
 800844c:	e0e3      	b.n	8008616 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008454:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008458:	f008 fa3a 	bl	80108d0 <malloc>
 800845c:	4603      	mov	r3, r0
 800845e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008470:	2302      	movs	r3, #2
 8008472:	e0d0      	b.n	8008616 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008478:	2100      	movs	r1, #0
 800847a:	68b8      	ldr	r0, [r7, #8]
 800847c:	f008 fa46 	bl	801090c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	211a      	movs	r1, #26
 8008486:	fb01 f303 	mul.w	r3, r1, r3
 800848a:	4413      	add	r3, r2
 800848c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	b25b      	sxtb	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	da16      	bge.n	80084c6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	211a      	movs	r1, #26
 800849e:	fb01 f303 	mul.w	r3, r1, r3
 80084a2:	4413      	add	r3, r2
 80084a4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084a8:	781a      	ldrb	r2, [r3, #0]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	211a      	movs	r1, #26
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084be:	881a      	ldrh	r2, [r3, #0]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	815a      	strh	r2, [r3, #10]
 80084c4:	e015      	b.n	80084f2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	211a      	movs	r1, #26
 80084cc:	fb01 f303 	mul.w	r3, r1, r3
 80084d0:	4413      	add	r3, r2
 80084d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	211a      	movs	r1, #26
 80084e2:	fb01 f303 	mul.w	r3, r1, r3
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084ec:	881a      	ldrh	r2, [r3, #0]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	211a      	movs	r1, #26
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	4413      	add	r3, r2
 80084fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b25b      	sxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	da16      	bge.n	8008538 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	211a      	movs	r1, #26
 8008510:	fb01 f303 	mul.w	r3, r1, r3
 8008514:	4413      	add	r3, r2
 8008516:	f203 3356 	addw	r3, r3, #854	; 0x356
 800851a:	781a      	ldrb	r2, [r3, #0]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	211a      	movs	r1, #26
 8008526:	fb01 f303 	mul.w	r3, r1, r3
 800852a:	4413      	add	r3, r2
 800852c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008530:	881a      	ldrh	r2, [r3, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	815a      	strh	r2, [r3, #10]
 8008536:	e015      	b.n	8008564 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	211a      	movs	r1, #26
 800853e:	fb01 f303 	mul.w	r3, r1, r3
 8008542:	4413      	add	r3, r2
 8008544:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008548:	781a      	ldrb	r2, [r3, #0]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	211a      	movs	r1, #26
 8008554:	fb01 f303 	mul.w	r3, r1, r3
 8008558:	4413      	add	r3, r2
 800855a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800855e:	881a      	ldrh	r2, [r3, #0]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2200      	movs	r2, #0
 800856e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	799b      	ldrb	r3, [r3, #6]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f002 fdc4 	bl	800b10a <USBH_AllocPipe>
 8008582:	4603      	mov	r3, r0
 8008584:	461a      	mov	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	79db      	ldrb	r3, [r3, #7]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f002 fdba 	bl	800b10a <USBH_AllocPipe>
 8008596:	4603      	mov	r3, r0
 8008598:	461a      	mov	r2, r3
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fdac 	bl	80090fc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	7959      	ldrb	r1, [r3, #5]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	7998      	ldrb	r0, [r3, #6]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	8912      	ldrh	r2, [r2, #8]
 80085bc:	9202      	str	r2, [sp, #8]
 80085be:	2202      	movs	r2, #2
 80085c0:	9201      	str	r2, [sp, #4]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	4623      	mov	r3, r4
 80085c6:	4602      	mov	r2, r0
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f002 fd6f 	bl	800b0ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	7919      	ldrb	r1, [r3, #4]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	79d8      	ldrb	r0, [r3, #7]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	8952      	ldrh	r2, [r2, #10]
 80085e6:	9202      	str	r2, [sp, #8]
 80085e8:	2202      	movs	r2, #2
 80085ea:	9201      	str	r2, [sp, #4]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	4623      	mov	r3, r4
 80085f0:	4602      	mov	r2, r0
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f002 fd5a 	bl	800b0ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	791b      	ldrb	r3, [r3, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f008 f889 	bl	8010718 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	795b      	ldrb	r3, [r3, #5]
 800860a:	2200      	movs	r2, #0
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f008 f882 	bl	8010718 <USBH_LL_SetToggle>

  return USBH_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	bd90      	pop	{r4, r7, pc}

0800861e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	795b      	ldrb	r3, [r3, #5]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00e      	beq.n	8008656 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	795b      	ldrb	r3, [r3, #5]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f002 fd53 	bl	800b0ea <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	795b      	ldrb	r3, [r3, #5]
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f002 fd7e 	bl	800b14c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	791b      	ldrb	r3, [r3, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00e      	beq.n	800867c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	791b      	ldrb	r3, [r3, #4]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f002 fd40 	bl	800b0ea <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f002 fd6b 	bl	800b14c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00b      	beq.n	80086a0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	4618      	mov	r0, r3
 8008692:	f008 f925 	bl	80108e0 <free>
    phost->pActiveClass->pData = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800869c:	2200      	movs	r2, #0
 800869e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	7b9b      	ldrb	r3, [r3, #14]
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d041      	beq.n	800874c <USBH_MSC_ClassRequest+0xa2>
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	dc4b      	bgt.n	8008764 <USBH_MSC_ClassRequest+0xba>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <USBH_MSC_ClassRequest+0x2a>
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d147      	bne.n	8008764 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fcf0 	bl	80090be <USBH_MSC_BOT_REQ_GetMaxLUN>
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d104      	bne.n	80086f2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2200      	movs	r2, #0
 80086ec:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d137      	bne.n	8008768 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d804      	bhi.n	800870a <USBH_MSC_ClassRequest+0x60>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	b2da      	uxtb	r2, r3
 8008708:	e000      	b.n	800870c <USBH_MSC_ClassRequest+0x62>
 800870a:	2202      	movs	r2, #2
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008710:	2300      	movs	r3, #0
 8008712:	73bb      	strb	r3, [r7, #14]
 8008714:	e014      	b.n	8008740 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	2134      	movs	r1, #52	; 0x34
 800871c:	fb01 f303 	mul.w	r3, r1, r3
 8008720:	4413      	add	r3, r2
 8008722:	3392      	adds	r3, #146	; 0x92
 8008724:	2202      	movs	r2, #2
 8008726:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	2134      	movs	r1, #52	; 0x34
 800872e:	fb01 f303 	mul.w	r3, r1, r3
 8008732:	4413      	add	r3, r2
 8008734:	33c1      	adds	r3, #193	; 0xc1
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	3301      	adds	r3, #1
 800873e:	73bb      	strb	r3, [r7, #14]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	7bba      	ldrb	r2, [r7, #14]
 8008746:	429a      	cmp	r2, r3
 8008748:	d3e5      	bcc.n	8008716 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800874a:	e00d      	b.n	8008768 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800874c:	2100      	movs	r1, #0
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f002 f87b 	bl	800a84a <USBH_ClrFeature>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d108      	bne.n	800876c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	7bda      	ldrb	r2, [r3, #15]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008762:	e003      	b.n	800876c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <USBH_MSC_ClassRequest+0xc4>
      break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <USBH_MSC_ClassRequest+0xc4>
      break;
 800876c:	bf00      	nop
  }

  return status;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800878a:	2301      	movs	r3, #1
 800878c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800878e:	2301      	movs	r3, #1
 8008790:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008792:	2301      	movs	r3, #1
 8008794:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	7b1b      	ldrb	r3, [r3, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <USBH_MSC_Process+0x2e>
 800879e:	2b01      	cmp	r3, #1
 80087a0:	f000 8271 	beq.w	8008c86 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80087a4:	e272      	b.n	8008c8c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	429a      	cmp	r2, r3
 80087b4:	f080 824f 	bcs.w	8008c56 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087be:	4619      	mov	r1, r3
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	2334      	movs	r3, #52	; 0x34
 80087c4:	fb03 f301 	mul.w	r3, r3, r1
 80087c8:	4413      	add	r3, r2
 80087ca:	3391      	adds	r3, #145	; 0x91
 80087cc:	2201      	movs	r2, #1
 80087ce:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087d6:	4619      	mov	r1, r3
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	2334      	movs	r3, #52	; 0x34
 80087dc:	fb03 f301 	mul.w	r3, r3, r1
 80087e0:	4413      	add	r3, r2
 80087e2:	3390      	adds	r3, #144	; 0x90
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	f200 8243 	bhi.w	8008c72 <USBH_MSC_Process+0x4fa>
 80087ec:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <USBH_MSC_Process+0x7c>)
 80087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f2:	bf00      	nop
 80087f4:	08008819 	.word	0x08008819
 80087f8:	08008c73 	.word	0x08008c73
 80087fc:	080088e1 	.word	0x080088e1
 8008800:	08008a65 	.word	0x08008a65
 8008804:	0800883f 	.word	0x0800883f
 8008808:	08008b31 	.word	0x08008b31
 800880c:	08008c73 	.word	0x08008c73
 8008810:	08008c73 	.word	0x08008c73
 8008814:	08008c45 	.word	0x08008c45
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800881e:	4619      	mov	r1, r3
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	2334      	movs	r3, #52	; 0x34
 8008824:	fb03 f301 	mul.w	r3, r3, r1
 8008828:	4413      	add	r3, r2
 800882a:	3390      	adds	r3, #144	; 0x90
 800882c:	2204      	movs	r2, #4
 800882e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800883c:	e222      	b.n	8008c84 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008844:	b2d9      	uxtb	r1, r3
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800884c:	461a      	mov	r2, r3
 800884e:	2334      	movs	r3, #52	; 0x34
 8008850:	fb03 f302 	mul.w	r3, r3, r2
 8008854:	3398      	adds	r3, #152	; 0x98
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4413      	add	r3, r2
 800885a:	3307      	adds	r3, #7
 800885c:	461a      	mov	r2, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 ff6a 	bl	8009738 <USBH_MSC_SCSI_Inquiry>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008874:	4619      	mov	r1, r3
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	2334      	movs	r3, #52	; 0x34
 800887a:	fb03 f301 	mul.w	r3, r3, r1
 800887e:	4413      	add	r3, r2
 8008880:	3390      	adds	r3, #144	; 0x90
 8008882:	2202      	movs	r2, #2
 8008884:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d10c      	bne.n	80088a6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008892:	4619      	mov	r1, r3
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	2334      	movs	r3, #52	; 0x34
 8008898:	fb03 f301 	mul.w	r3, r3, r1
 800889c:	4413      	add	r3, r2
 800889e:	3390      	adds	r3, #144	; 0x90
 80088a0:	2205      	movs	r2, #5
 80088a2:	701a      	strb	r2, [r3, #0]
            break;
 80088a4:	e1e7      	b.n	8008c76 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	f040 81e4 	bne.w	8008c76 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088b4:	4619      	mov	r1, r3
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	2334      	movs	r3, #52	; 0x34
 80088ba:	fb03 f301 	mul.w	r3, r3, r1
 80088be:	4413      	add	r3, r2
 80088c0:	3390      	adds	r3, #144	; 0x90
 80088c2:	2201      	movs	r2, #1
 80088c4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088cc:	4619      	mov	r1, r3
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	2334      	movs	r3, #52	; 0x34
 80088d2:	fb03 f301 	mul.w	r3, r3, r1
 80088d6:	4413      	add	r3, r2
 80088d8:	3391      	adds	r3, #145	; 0x91
 80088da:	2202      	movs	r2, #2
 80088dc:	701a      	strb	r2, [r3, #0]
            break;
 80088de:	e1ca      	b.n	8008c76 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fe66 	bl	80095bc <USBH_MSC_SCSI_TestUnitReady>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d149      	bne.n	800898e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008900:	4619      	mov	r1, r3
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	2334      	movs	r3, #52	; 0x34
 8008906:	fb03 f301 	mul.w	r3, r3, r1
 800890a:	4413      	add	r3, r2
 800890c:	3392      	adds	r3, #146	; 0x92
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00c      	beq.n	800892e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800891a:	4619      	mov	r1, r3
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	2334      	movs	r3, #52	; 0x34
 8008920:	fb03 f301 	mul.w	r3, r3, r1
 8008924:	4413      	add	r3, r2
 8008926:	33c1      	adds	r3, #193	; 0xc1
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e00b      	b.n	8008946 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008934:	4619      	mov	r1, r3
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	2334      	movs	r3, #52	; 0x34
 800893a:	fb03 f301 	mul.w	r3, r3, r1
 800893e:	4413      	add	r3, r2
 8008940:	33c1      	adds	r3, #193	; 0xc1
 8008942:	2200      	movs	r2, #0
 8008944:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800894c:	4619      	mov	r1, r3
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	2334      	movs	r3, #52	; 0x34
 8008952:	fb03 f301 	mul.w	r3, r3, r1
 8008956:	4413      	add	r3, r2
 8008958:	3390      	adds	r3, #144	; 0x90
 800895a:	2203      	movs	r2, #3
 800895c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008964:	4619      	mov	r1, r3
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	2334      	movs	r3, #52	; 0x34
 800896a:	fb03 f301 	mul.w	r3, r3, r1
 800896e:	4413      	add	r3, r2
 8008970:	3391      	adds	r3, #145	; 0x91
 8008972:	2200      	movs	r2, #0
 8008974:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800897c:	4619      	mov	r1, r3
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	2334      	movs	r3, #52	; 0x34
 8008982:	fb03 f301 	mul.w	r3, r3, r1
 8008986:	4413      	add	r3, r2
 8008988:	3392      	adds	r3, #146	; 0x92
 800898a:	2200      	movs	r2, #0
 800898c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	2b02      	cmp	r3, #2
 8008992:	d14a      	bne.n	8008a2a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800899a:	4619      	mov	r1, r3
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	2334      	movs	r3, #52	; 0x34
 80089a0:	fb03 f301 	mul.w	r3, r3, r1
 80089a4:	4413      	add	r3, r2
 80089a6:	3392      	adds	r3, #146	; 0x92
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d00c      	beq.n	80089c8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089b4:	4619      	mov	r1, r3
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	2334      	movs	r3, #52	; 0x34
 80089ba:	fb03 f301 	mul.w	r3, r3, r1
 80089be:	4413      	add	r3, r2
 80089c0:	33c1      	adds	r3, #193	; 0xc1
 80089c2:	2201      	movs	r2, #1
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	e00b      	b.n	80089e0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089ce:	4619      	mov	r1, r3
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	2334      	movs	r3, #52	; 0x34
 80089d4:	fb03 f301 	mul.w	r3, r3, r1
 80089d8:	4413      	add	r3, r2
 80089da:	33c1      	adds	r3, #193	; 0xc1
 80089dc:	2200      	movs	r2, #0
 80089de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089e6:	4619      	mov	r1, r3
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	2334      	movs	r3, #52	; 0x34
 80089ec:	fb03 f301 	mul.w	r3, r3, r1
 80089f0:	4413      	add	r3, r2
 80089f2:	3390      	adds	r3, #144	; 0x90
 80089f4:	2205      	movs	r2, #5
 80089f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089fe:	4619      	mov	r1, r3
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	2334      	movs	r3, #52	; 0x34
 8008a04:	fb03 f301 	mul.w	r3, r3, r1
 8008a08:	4413      	add	r3, r2
 8008a0a:	3391      	adds	r3, #145	; 0x91
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a16:	4619      	mov	r1, r3
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	2334      	movs	r3, #52	; 0x34
 8008a1c:	fb03 f301 	mul.w	r3, r3, r1
 8008a20:	4413      	add	r3, r2
 8008a22:	3392      	adds	r3, #146	; 0x92
 8008a24:	2202      	movs	r2, #2
 8008a26:	701a      	strb	r2, [r3, #0]
            break;
 8008a28:	e127      	b.n	8008c7a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	f040 8124 	bne.w	8008c7a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a38:	4619      	mov	r1, r3
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	2334      	movs	r3, #52	; 0x34
 8008a3e:	fb03 f301 	mul.w	r3, r3, r1
 8008a42:	4413      	add	r3, r2
 8008a44:	3390      	adds	r3, #144	; 0x90
 8008a46:	2201      	movs	r2, #1
 8008a48:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a50:	4619      	mov	r1, r3
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	2334      	movs	r3, #52	; 0x34
 8008a56:	fb03 f301 	mul.w	r3, r3, r1
 8008a5a:	4413      	add	r3, r2
 8008a5c:	3391      	adds	r3, #145	; 0x91
 8008a5e:	2202      	movs	r2, #2
 8008a60:	701a      	strb	r2, [r3, #0]
            break;
 8008a62:	e10a      	b.n	8008c7a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a6a:	b2d9      	uxtb	r1, r3
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a72:	461a      	mov	r2, r3
 8008a74:	2334      	movs	r3, #52	; 0x34
 8008a76:	fb03 f302 	mul.w	r3, r3, r2
 8008a7a:	3390      	adds	r3, #144	; 0x90
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4413      	add	r3, r2
 8008a80:	3304      	adds	r3, #4
 8008a82:	461a      	mov	r2, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fddc 	bl	8009642 <USBH_MSC_SCSI_ReadCapacity>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d120      	bne.n	8008ad6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	2334      	movs	r3, #52	; 0x34
 8008aa0:	fb03 f301 	mul.w	r3, r3, r1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	3390      	adds	r3, #144	; 0x90
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	2334      	movs	r3, #52	; 0x34
 8008ab8:	fb03 f301 	mul.w	r3, r3, r1
 8008abc:	4413      	add	r3, r2
 8008abe:	3391      	adds	r3, #145	; 0x91
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aca:	3301      	adds	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008ad4:	e0d3      	b.n	8008c7e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d10c      	bne.n	8008af6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	2334      	movs	r3, #52	; 0x34
 8008ae8:	fb03 f301 	mul.w	r3, r3, r1
 8008aec:	4413      	add	r3, r2
 8008aee:	3390      	adds	r3, #144	; 0x90
 8008af0:	2205      	movs	r2, #5
 8008af2:	701a      	strb	r2, [r3, #0]
            break;
 8008af4:	e0c3      	b.n	8008c7e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	f040 80c0 	bne.w	8008c7e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b04:	4619      	mov	r1, r3
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	2334      	movs	r3, #52	; 0x34
 8008b0a:	fb03 f301 	mul.w	r3, r3, r1
 8008b0e:	4413      	add	r3, r2
 8008b10:	3390      	adds	r3, #144	; 0x90
 8008b12:	2201      	movs	r2, #1
 8008b14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	2334      	movs	r3, #52	; 0x34
 8008b22:	fb03 f301 	mul.w	r3, r3, r1
 8008b26:	4413      	add	r3, r2
 8008b28:	3391      	adds	r3, #145	; 0x91
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	701a      	strb	r2, [r3, #0]
            break;
 8008b2e:	e0a6      	b.n	8008c7e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b36:	b2d9      	uxtb	r1, r3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b3e:	461a      	mov	r2, r3
 8008b40:	2334      	movs	r3, #52	; 0x34
 8008b42:	fb03 f302 	mul.w	r3, r3, r2
 8008b46:	3398      	adds	r3, #152	; 0x98
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	461a      	mov	r2, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fe96 	bl	8009882 <USBH_MSC_SCSI_RequestSense>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d145      	bne.n	8008bec <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b66:	4619      	mov	r1, r3
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	2334      	movs	r3, #52	; 0x34
 8008b6c:	fb03 f301 	mul.w	r3, r3, r1
 8008b70:	4413      	add	r3, r2
 8008b72:	339c      	adds	r3, #156	; 0x9c
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b06      	cmp	r3, #6
 8008b78:	d00c      	beq.n	8008b94 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b80:	4619      	mov	r1, r3
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	2334      	movs	r3, #52	; 0x34
 8008b86:	fb03 f301 	mul.w	r3, r3, r1
 8008b8a:	4413      	add	r3, r2
 8008b8c:	339c      	adds	r3, #156	; 0x9c
 8008b8e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d117      	bne.n	8008bc4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	f242 720f 	movw	r2, #9999	; 0x270f
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d80c      	bhi.n	8008bc4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	2334      	movs	r3, #52	; 0x34
 8008bb6:	fb03 f301 	mul.w	r3, r3, r1
 8008bba:	4413      	add	r3, r2
 8008bbc:	3390      	adds	r3, #144	; 0x90
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	701a      	strb	r2, [r3, #0]
                  break;
 8008bc2:	e05f      	b.n	8008c84 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bca:	4619      	mov	r1, r3
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	2334      	movs	r3, #52	; 0x34
 8008bd0:	fb03 f301 	mul.w	r3, r3, r1
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3390      	adds	r3, #144	; 0x90
 8008bd8:	2201      	movs	r2, #1
 8008bda:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008be2:	3301      	adds	r3, #1
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d10c      	bne.n	8008c0c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	2334      	movs	r3, #52	; 0x34
 8008bfe:	fb03 f301 	mul.w	r3, r3, r1
 8008c02:	4413      	add	r3, r2
 8008c04:	3390      	adds	r3, #144	; 0x90
 8008c06:	2208      	movs	r2, #8
 8008c08:	701a      	strb	r2, [r3, #0]
            break;
 8008c0a:	e03a      	b.n	8008c82 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d137      	bne.n	8008c82 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c18:	4619      	mov	r1, r3
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	2334      	movs	r3, #52	; 0x34
 8008c1e:	fb03 f301 	mul.w	r3, r3, r1
 8008c22:	4413      	add	r3, r2
 8008c24:	3390      	adds	r3, #144	; 0x90
 8008c26:	2201      	movs	r2, #1
 8008c28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c30:	4619      	mov	r1, r3
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	2334      	movs	r3, #52	; 0x34
 8008c36:	fb03 f301 	mul.w	r3, r3, r1
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3391      	adds	r3, #145	; 0x91
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
            break;
 8008c42:	e01e      	b.n	8008c82 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008c54:	e016      	b.n	8008c84 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	2201      	movs	r2, #1
 8008c62:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c6a:	2102      	movs	r1, #2
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
      break;
 8008c70:	e00c      	b.n	8008c8c <USBH_MSC_Process+0x514>
            break;
 8008c72:	bf00      	nop
 8008c74:	e00a      	b.n	8008c8c <USBH_MSC_Process+0x514>
            break;
 8008c76:	bf00      	nop
 8008c78:	e008      	b.n	8008c8c <USBH_MSC_Process+0x514>
            break;
 8008c7a:	bf00      	nop
 8008c7c:	e006      	b.n	8008c8c <USBH_MSC_Process+0x514>
            break;
 8008c7e:	bf00      	nop
 8008c80:	e004      	b.n	8008c8c <USBH_MSC_Process+0x514>
            break;
 8008c82:	bf00      	nop
      break;
 8008c84:	e002      	b.n	8008c8c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	75fb      	strb	r3, [r7, #23]
      break;
 8008c8a:	bf00      	nop
  }
  return error;
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop

08008c98 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b088      	sub	sp, #32
 8008cb2:	af02      	add	r7, sp, #8
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	2134      	movs	r1, #52	; 0x34
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	4413      	add	r3, r2
 8008cd8:	3390      	adds	r3, #144	; 0x90
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b07      	cmp	r3, #7
 8008cde:	d03c      	beq.n	8008d5a <USBH_MSC_RdWrProcess+0xac>
 8008ce0:	2b07      	cmp	r3, #7
 8008ce2:	f300 80a7 	bgt.w	8008e34 <USBH_MSC_RdWrProcess+0x186>
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	d06c      	beq.n	8008dc4 <USBH_MSC_RdWrProcess+0x116>
 8008cea:	2b06      	cmp	r3, #6
 8008cec:	f040 80a2 	bne.w	8008e34 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008cf0:	78f9      	ldrb	r1, [r7, #3]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fea5 	bl	8009a4a <USBH_MSC_SCSI_Read>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10b      	bne.n	8008d22 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	2134      	movs	r1, #52	; 0x34
 8008d10:	fb01 f303 	mul.w	r3, r1, r3
 8008d14:	4413      	add	r3, r2
 8008d16:	3390      	adds	r3, #144	; 0x90
 8008d18:	2201      	movs	r2, #1
 8008d1a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d20:	e08a      	b.n	8008e38 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d109      	bne.n	8008d3c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	2134      	movs	r1, #52	; 0x34
 8008d2e:	fb01 f303 	mul.w	r3, r1, r3
 8008d32:	4413      	add	r3, r2
 8008d34:	3390      	adds	r3, #144	; 0x90
 8008d36:	2205      	movs	r2, #5
 8008d38:	701a      	strb	r2, [r3, #0]
      break;
 8008d3a:	e07d      	b.n	8008e38 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d17a      	bne.n	8008e38 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	2134      	movs	r1, #52	; 0x34
 8008d48:	fb01 f303 	mul.w	r3, r1, r3
 8008d4c:	4413      	add	r3, r2
 8008d4e:	3390      	adds	r3, #144	; 0x90
 8008d50:	2208      	movs	r2, #8
 8008d52:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008d54:	2302      	movs	r3, #2
 8008d56:	75fb      	strb	r3, [r7, #23]
      break;
 8008d58:	e06e      	b.n	8008e38 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008d5a:	78f9      	ldrb	r1, [r7, #3]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	2200      	movs	r2, #0
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fe05 	bl	8009974 <USBH_MSC_SCSI_Write>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10b      	bne.n	8008d8c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	2134      	movs	r1, #52	; 0x34
 8008d7a:	fb01 f303 	mul.w	r3, r1, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	3390      	adds	r3, #144	; 0x90
 8008d82:	2201      	movs	r2, #1
 8008d84:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d8a:	e057      	b.n	8008e3c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d109      	bne.n	8008da6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	2134      	movs	r1, #52	; 0x34
 8008d98:	fb01 f303 	mul.w	r3, r1, r3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	3390      	adds	r3, #144	; 0x90
 8008da0:	2205      	movs	r2, #5
 8008da2:	701a      	strb	r2, [r3, #0]
      break;
 8008da4:	e04a      	b.n	8008e3c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d147      	bne.n	8008e3c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	2134      	movs	r1, #52	; 0x34
 8008db2:	fb01 f303 	mul.w	r3, r1, r3
 8008db6:	4413      	add	r3, r2
 8008db8:	3390      	adds	r3, #144	; 0x90
 8008dba:	2208      	movs	r2, #8
 8008dbc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc2:	e03b      	b.n	8008e3c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	2234      	movs	r2, #52	; 0x34
 8008dc8:	fb02 f303 	mul.w	r3, r2, r3
 8008dcc:	3398      	adds	r3, #152	; 0x98
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	1d1a      	adds	r2, r3, #4
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fd52 	bl	8009882 <USBH_MSC_SCSI_RequestSense>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d113      	bne.n	8008e10 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	2134      	movs	r1, #52	; 0x34
 8008dee:	fb01 f303 	mul.w	r3, r1, r3
 8008df2:	4413      	add	r3, r2
 8008df4:	3390      	adds	r3, #144	; 0x90
 8008df6:	2201      	movs	r2, #1
 8008df8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	2134      	movs	r1, #52	; 0x34
 8008e00:	fb01 f303 	mul.w	r3, r1, r3
 8008e04:	4413      	add	r3, r2
 8008e06:	3391      	adds	r3, #145	; 0x91
 8008e08:	2202      	movs	r2, #2
 8008e0a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d014      	beq.n	8008e40 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d111      	bne.n	8008e40 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	2134      	movs	r1, #52	; 0x34
 8008e22:	fb01 f303 	mul.w	r3, r1, r3
 8008e26:	4413      	add	r3, r2
 8008e28:	3390      	adds	r3, #144	; 0x90
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008e2e:	2302      	movs	r3, #2
 8008e30:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e32:	e005      	b.n	8008e40 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008e34:	bf00      	nop
 8008e36:	e004      	b.n	8008e42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e38:	bf00      	nop
 8008e3a:	e002      	b.n	8008e42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e3c:	bf00      	nop
 8008e3e:	e000      	b.n	8008e42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e40:	bf00      	nop

  }
  return error;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b0b      	cmp	r3, #11
 8008e6a:	d10c      	bne.n	8008e86 <USBH_MSC_UnitIsReady+0x3a>
 8008e6c:	78fb      	ldrb	r3, [r7, #3]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	2134      	movs	r1, #52	; 0x34
 8008e72:	fb01 f303 	mul.w	r3, r1, r3
 8008e76:	4413      	add	r3, r2
 8008e78:	3391      	adds	r3, #145	; 0x91
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d102      	bne.n	8008e86 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]
 8008e84:	e001      	b.n	8008e8a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b0b      	cmp	r3, #11
 8008eb8:	d10d      	bne.n	8008ed6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	2234      	movs	r2, #52	; 0x34
 8008ebe:	fb02 f303 	mul.w	r3, r2, r3
 8008ec2:	3390      	adds	r3, #144	; 0x90
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	2234      	movs	r2, #52	; 0x34
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f007 fd0f 	bl	80108f0 <memcpy>
    return USBH_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e000      	b.n	8008ed8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008ed6:	2302      	movs	r3, #2
  }
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	607a      	str	r2, [r7, #4]
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	460b      	mov	r3, r1
 8008eee:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00e      	beq.n	8008f24 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008f0c:	2b0b      	cmp	r3, #11
 8008f0e:	d109      	bne.n	8008f24 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	2134      	movs	r1, #52	; 0x34
 8008f16:	fb01 f303 	mul.w	r3, r1, r3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	3390      	adds	r3, #144	; 0x90
 8008f1e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d001      	beq.n	8008f28 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008f24:	2302      	movs	r3, #2
 8008f26:	e040      	b.n	8008faa <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2206      	movs	r2, #6
 8008f2c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008f2e:	7afb      	ldrb	r3, [r7, #11]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	2134      	movs	r1, #52	; 0x34
 8008f34:	fb01 f303 	mul.w	r3, r1, r3
 8008f38:	4413      	add	r3, r2
 8008f3a:	3390      	adds	r3, #144	; 0x90
 8008f3c:	2206      	movs	r2, #6
 8008f3e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008f4a:	7af9      	ldrb	r1, [r7, #11]
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 fd78 	bl	8009a4a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f60:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008f62:	e016      	b.n	8008f92 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad2      	subs	r2, r2, r3
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	f242 7110 	movw	r1, #10000	; 0x2710
 8008f74:	fb01 f303 	mul.w	r3, r1, r3
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d805      	bhi.n	8008f88 <USBH_MSC_Read+0xa8>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e00b      	b.n	8008faa <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008f92:	7afb      	ldrb	r3, [r7, #11]
 8008f94:	4619      	mov	r1, r3
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fe89 	bl	8008cae <USBH_MSC_RdWrProcess>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d0e0      	beq.n	8008f64 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b088      	sub	sp, #32
 8008fb6:	af02      	add	r7, sp, #8
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00e      	beq.n	8008ff6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008fde:	2b0b      	cmp	r3, #11
 8008fe0:	d109      	bne.n	8008ff6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008fe2:	7afb      	ldrb	r3, [r7, #11]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	2134      	movs	r1, #52	; 0x34
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	4413      	add	r3, r2
 8008fee:	3390      	adds	r3, #144	; 0x90
 8008ff0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d001      	beq.n	8008ffa <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e040      	b.n	800907c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2207      	movs	r2, #7
 8008ffe:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	2134      	movs	r1, #52	; 0x34
 8009006:	fb01 f303 	mul.w	r3, r1, r3
 800900a:	4413      	add	r3, r2
 800900c:	3390      	adds	r3, #144	; 0x90
 800900e:	2207      	movs	r2, #7
 8009010:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009012:	7afb      	ldrb	r3, [r7, #11]
 8009014:	b29a      	uxth	r2, r3
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800901c:	7af9      	ldrb	r1, [r7, #11]
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 fca4 	bl	8009974 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009032:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009034:	e016      	b.n	8009064 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f242 7110 	movw	r1, #10000	; 0x2710
 8009046:	fb01 f303 	mul.w	r3, r1, r3
 800904a:	429a      	cmp	r2, r3
 800904c:	d805      	bhi.n	800905a <USBH_MSC_Write+0xa8>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d104      	bne.n	8009064 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2201      	movs	r2, #1
 800905e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009060:	2302      	movs	r3, #2
 8009062:	e00b      	b.n	800907c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	4619      	mov	r1, r3
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f7ff fe20 	bl	8008cae <USBH_MSC_RdWrProcess>
 800906e:	4603      	mov	r3, r0
 8009070:	2b01      	cmp	r3, #1
 8009072:	d0e0      	beq.n	8009036 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2201      	movs	r2, #1
 8009078:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2221      	movs	r2, #33	; 0x21
 8009090:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	22ff      	movs	r2, #255	; 0xff
 8009096:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2100      	movs	r1, #0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 fdab 	bl	800ac0a <USBH_CtlReq>
 80090b4:	4603      	mov	r3, r0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	22a1      	movs	r2, #161	; 0xa1
 80090cc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	22fe      	movs	r2, #254	; 0xfe
 80090d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80090e6:	2201      	movs	r2, #1
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 fd8d 	bl	800ac0a <USBH_CtlReq>
 80090f0:	4603      	mov	r3, r0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4a09      	ldr	r2, [pc, #36]	; (8009138 <USBH_MSC_BOT_Init+0x3c>)
 8009112:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4a09      	ldr	r2, [pc, #36]	; (800913c <USBH_MSC_BOT_Init+0x40>)
 8009118:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	43425355 	.word	0x43425355
 800913c:	20304050 	.word	0x20304050

08009140 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af02      	add	r7, sp, #8
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800914c:	2301      	movs	r3, #1
 800914e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009150:	2301      	movs	r3, #1
 8009152:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009154:	2301      	movs	r3, #1
 8009156:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009158:	2300      	movs	r3, #0
 800915a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009170:	3b01      	subs	r3, #1
 8009172:	2b0a      	cmp	r3, #10
 8009174:	f200 819e 	bhi.w	80094b4 <USBH_MSC_BOT_Process+0x374>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <USBH_MSC_BOT_Process+0x40>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	080091ad 	.word	0x080091ad
 8009184:	080091d5 	.word	0x080091d5
 8009188:	0800923f 	.word	0x0800923f
 800918c:	0800925d 	.word	0x0800925d
 8009190:	080092e1 	.word	0x080092e1
 8009194:	08009303 	.word	0x08009303
 8009198:	0800939b 	.word	0x0800939b
 800919c:	080093b7 	.word	0x080093b7
 80091a0:	08009409 	.word	0x08009409
 80091a4:	08009439 	.word	0x08009439
 80091a8:	0800949b 	.word	0x0800949b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	795b      	ldrb	r3, [r3, #5]
 80091c6:	2201      	movs	r2, #1
 80091c8:	9200      	str	r2, [sp, #0]
 80091ca:	221f      	movs	r2, #31
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 ff2a 	bl	800b026 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80091d2:	e17e      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	795b      	ldrb	r3, [r3, #5]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f007 fa72 	bl	80106c4 <USBH_LL_GetURBState>
 80091e0:	4603      	mov	r3, r0
 80091e2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80091e4:	7d3b      	ldrb	r3, [r7, #20]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d118      	bne.n	800921c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00f      	beq.n	8009212 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80091f8:	b25b      	sxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da04      	bge.n	8009208 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	2203      	movs	r2, #3
 8009202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009206:	e157      	b.n	80094b8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	2205      	movs	r2, #5
 800920c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009210:	e152      	b.n	80094b8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2207      	movs	r2, #7
 8009216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800921a:	e14d      	b.n	80094b8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800921c:	7d3b      	ldrb	r3, [r7, #20]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d104      	bne.n	800922c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800922a:	e145      	b.n	80094b8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800922c:	7d3b      	ldrb	r3, [r7, #20]
 800922e:	2b05      	cmp	r3, #5
 8009230:	f040 8142 	bne.w	80094b8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	220a      	movs	r2, #10
 8009238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800923c:	e13c      	b.n	80094b8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	895a      	ldrh	r2, [r3, #10]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	791b      	ldrb	r3, [r3, #4]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 ff0f 	bl	800b070 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2204      	movs	r2, #4
 8009256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800925a:	e13a      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	791b      	ldrb	r3, [r3, #4]
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f007 fa2e 	bl	80106c4 <USBH_LL_GetURBState>
 8009268:	4603      	mov	r3, r0
 800926a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800926c:	7d3b      	ldrb	r3, [r7, #20]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d12d      	bne.n	80092ce <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	8952      	ldrh	r2, [r2, #10]
 800927a:	4293      	cmp	r3, r2
 800927c:	d910      	bls.n	80092a0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	8952      	ldrh	r2, [r2, #10]
 8009288:	441a      	add	r2, r3
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	8952      	ldrh	r2, [r2, #10]
 8009298:	1a9a      	subs	r2, r3, r2
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	65da      	str	r2, [r3, #92]	; 0x5c
 800929e:	e002      	b.n	80092a6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2200      	movs	r2, #0
 80092a4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	895a      	ldrh	r2, [r3, #10]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	791b      	ldrb	r3, [r3, #4]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 fed7 	bl	800b070 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80092c2:	e0fb      	b.n	80094bc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2207      	movs	r2, #7
 80092c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092cc:	e0f6      	b.n	80094bc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80092ce:	7d3b      	ldrb	r3, [r7, #20]
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	f040 80f3 	bne.w	80094bc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2209      	movs	r2, #9
 80092da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092de:	e0ed      	b.n	80094bc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	891a      	ldrh	r2, [r3, #8]
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	795b      	ldrb	r3, [r3, #5]
 80092ee:	2001      	movs	r0, #1
 80092f0:	9000      	str	r0, [sp, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 fe97 	bl	800b026 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2206      	movs	r2, #6
 80092fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009300:	e0e7      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	795b      	ldrb	r3, [r3, #5]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f007 f9db 	bl	80106c4 <USBH_LL_GetURBState>
 800930e:	4603      	mov	r3, r0
 8009310:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009312:	7d3b      	ldrb	r3, [r7, #20]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d12f      	bne.n	8009378 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	8912      	ldrh	r2, [r2, #8]
 8009320:	4293      	cmp	r3, r2
 8009322:	d910      	bls.n	8009346 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	8912      	ldrh	r2, [r2, #8]
 800932e:	441a      	add	r2, r3
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	8912      	ldrh	r2, [r2, #8]
 800933e:	1a9a      	subs	r2, r3, r2
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	65da      	str	r2, [r3, #92]	; 0x5c
 8009344:	e002      	b.n	800934c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2200      	movs	r2, #0
 800934a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00c      	beq.n	800936e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	891a      	ldrh	r2, [r3, #8]
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	795b      	ldrb	r3, [r3, #5]
 8009362:	2001      	movs	r0, #1
 8009364:	9000      	str	r0, [sp, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 fe5d 	bl	800b026 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800936c:	e0a8      	b.n	80094c0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2207      	movs	r2, #7
 8009372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009376:	e0a3      	b.n	80094c0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009378:	7d3b      	ldrb	r3, [r7, #20]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d104      	bne.n	8009388 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2205      	movs	r2, #5
 8009382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009386:	e09b      	b.n	80094c0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009388:	7d3b      	ldrb	r3, [r7, #20]
 800938a:	2b05      	cmp	r3, #5
 800938c:	f040 8098 	bne.w	80094c0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	220a      	movs	r2, #10
 8009394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009398:	e092      	b.n	80094c0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	791b      	ldrb	r3, [r3, #4]
 80093a4:	220d      	movs	r2, #13
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 fe62 	bl	800b070 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	2208      	movs	r2, #8
 80093b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093b4:	e08d      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	791b      	ldrb	r3, [r3, #4]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f007 f981 	bl	80106c4 <USBH_LL_GetURBState>
 80093c2:	4603      	mov	r3, r0
 80093c4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80093c6:	7d3b      	ldrb	r3, [r7, #20]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d115      	bne.n	80093f8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f8a9 	bl	8009534 <USBH_MSC_DecodeCSW>
 80093e2:	4603      	mov	r3, r0
 80093e4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80093e6:	7d7b      	ldrb	r3, [r7, #21]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d102      	bne.n	80093f2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80093f0:	e068      	b.n	80094c4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80093f2:	2302      	movs	r3, #2
 80093f4:	75fb      	strb	r3, [r7, #23]
      break;
 80093f6:	e065      	b.n	80094c4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80093f8:	7d3b      	ldrb	r3, [r7, #20]
 80093fa:	2b05      	cmp	r3, #5
 80093fc:	d162      	bne.n	80094c4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2209      	movs	r2, #9
 8009402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009406:	e05d      	b.n	80094c4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009408:	78fb      	ldrb	r3, [r7, #3]
 800940a:	2200      	movs	r2, #0
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f864 	bl	80094dc <USBH_MSC_BOT_Abort>
 8009414:	4603      	mov	r3, r0
 8009416:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009418:	7dbb      	ldrb	r3, [r7, #22]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2207      	movs	r2, #7
 8009422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009426:	e04f      	b.n	80094c8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009428:	7dbb      	ldrb	r3, [r7, #22]
 800942a:	2b04      	cmp	r3, #4
 800942c:	d14c      	bne.n	80094c8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	220b      	movs	r2, #11
 8009432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009436:	e047      	b.n	80094c8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	2201      	movs	r2, #1
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f84c 	bl	80094dc <USBH_MSC_BOT_Abort>
 8009444:	4603      	mov	r3, r0
 8009446:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009448:	7dbb      	ldrb	r3, [r7, #22]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d11d      	bne.n	800948a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	795b      	ldrb	r3, [r3, #5]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f007 f98f 	bl	8010778 <USBH_LL_GetToggle>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	7959      	ldrb	r1, [r3, #5]
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	f1c3 0301 	rsb	r3, r3, #1
 8009468:	b2db      	uxtb	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f007 f953 	bl	8010718 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	791b      	ldrb	r3, [r3, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f007 f94c 	bl	8010718 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2209      	movs	r2, #9
 8009484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009488:	e020      	b.n	80094cc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800948a:	7dbb      	ldrb	r3, [r7, #22]
 800948c:	2b04      	cmp	r3, #4
 800948e:	d11d      	bne.n	80094cc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	220b      	movs	r2, #11
 8009494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009498:	e018      	b.n	80094cc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff fdf2 	bl	8009084 <USBH_MSC_BOT_REQ_Reset>
 80094a0:	4603      	mov	r3, r0
 80094a2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d112      	bne.n	80094d0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80094b2:	e00d      	b.n	80094d0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80094b4:	bf00      	nop
 80094b6:	e00c      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80094b8:	bf00      	nop
 80094ba:	e00a      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80094bc:	bf00      	nop
 80094be:	e008      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80094c0:	bf00      	nop
 80094c2:	e006      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80094c4:	bf00      	nop
 80094c6:	e004      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80094c8:	bf00      	nop
 80094ca:	e002      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80094cc:	bf00      	nop
 80094ce:	e000      	b.n	80094d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80094d0:	bf00      	nop
  }
  return status;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
 80094e8:	4613      	mov	r3, r2
 80094ea:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80094ec:	2302      	movs	r3, #2
 80094ee:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80094fa:	78bb      	ldrb	r3, [r7, #2]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <USBH_MSC_BOT_Abort+0x2a>
 8009500:	2b01      	cmp	r3, #1
 8009502:	d009      	beq.n	8009518 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009504:	e011      	b.n	800952a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	79db      	ldrb	r3, [r3, #7]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 f99c 	bl	800a84a <USBH_ClrFeature>
 8009512:	4603      	mov	r3, r0
 8009514:	73fb      	strb	r3, [r7, #15]
      break;
 8009516:	e008      	b.n	800952a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	799b      	ldrb	r3, [r3, #6]
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 f993 	bl	800a84a <USBH_ClrFeature>
 8009524:	4603      	mov	r3, r0
 8009526:	73fb      	strb	r3, [r7, #15]
      break;
 8009528:	bf00      	nop
  }
  return status;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009546:	2301      	movs	r3, #1
 8009548:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	791b      	ldrb	r3, [r3, #4]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f007 f825 	bl	80105a0 <USBH_LL_GetLastXferSize>
 8009556:	4603      	mov	r3, r0
 8009558:	2b0d      	cmp	r3, #13
 800955a:	d002      	beq.n	8009562 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800955c:	2302      	movs	r3, #2
 800955e:	73fb      	strb	r3, [r7, #15]
 8009560:	e024      	b.n	80095ac <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009566:	4a14      	ldr	r2, [pc, #80]	; (80095b8 <USBH_MSC_DecodeCSW+0x84>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d11d      	bne.n	80095a8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009574:	429a      	cmp	r2, r3
 8009576:	d119      	bne.n	80095ac <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800957e:	2b00      	cmp	r3, #0
 8009580:	d102      	bne.n	8009588 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
 8009586:	e011      	b.n	80095ac <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800958e:	2b01      	cmp	r3, #1
 8009590:	d102      	bne.n	8009598 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009592:	2301      	movs	r3, #1
 8009594:	73fb      	strb	r3, [r7, #15]
 8009596:	e009      	b.n	80095ac <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d104      	bne.n	80095ac <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80095a2:	2302      	movs	r3, #2
 80095a4:	73fb      	strb	r3, [r7, #15]
 80095a6:	e001      	b.n	80095ac <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80095a8:	2302      	movs	r3, #2
 80095aa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	53425355 	.word	0x53425355

080095bc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80095c8:	2302      	movs	r3, #2
 80095ca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d002      	beq.n	80095e6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d021      	beq.n	8009628 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80095e4:	e028      	b.n	8009638 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	2200      	movs	r2, #0
 80095ea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	220a      	movs	r2, #10
 80095f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	3363      	adds	r3, #99	; 0x63
 8009600:	2210      	movs	r2, #16
 8009602:	2100      	movs	r1, #0
 8009604:	4618      	mov	r0, r3
 8009606:	f007 f981 	bl	801090c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009622:	2301      	movs	r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]
      break;
 8009626:	e007      	b.n	8009638 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff fd87 	bl	8009140 <USBH_MSC_BOT_Process>
 8009632:	4603      	mov	r3, r0
 8009634:	73fb      	strb	r3, [r7, #15]
      break;
 8009636:	bf00      	nop
  }

  return error;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b086      	sub	sp, #24
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	460b      	mov	r3, r1
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009650:	2301      	movs	r3, #1
 8009652:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009664:	2b01      	cmp	r3, #1
 8009666:	d002      	beq.n	800966e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009668:	2b02      	cmp	r3, #2
 800966a:	d027      	beq.n	80096bc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800966c:	e05f      	b.n	800972e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2208      	movs	r2, #8
 8009672:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	2280      	movs	r2, #128	; 0x80
 8009678:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	220a      	movs	r2, #10
 8009680:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	3363      	adds	r3, #99	; 0x63
 8009688:	2210      	movs	r2, #16
 800968a:	2100      	movs	r1, #0
 800968c:	4618      	mov	r0, r3
 800968e:	f007 f93d 	bl	801090c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2225      	movs	r2, #37	; 0x25
 8009696:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2202      	movs	r2, #2
 80096a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f103 0210 	add.w	r2, r3, #16
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80096b6:	2301      	movs	r3, #1
 80096b8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ba:	e038      	b.n	800972e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80096bc:	7afb      	ldrb	r3, [r7, #11]
 80096be:	4619      	mov	r1, r3
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f7ff fd3d 	bl	8009140 <USBH_MSC_BOT_Process>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d12d      	bne.n	800972c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d6:	3303      	adds	r3, #3
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e2:	3302      	adds	r3, #2
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	021b      	lsls	r3, r3, #8
 80096e8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096f0:	3301      	adds	r3, #1
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80096f6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	061b      	lsls	r3, r3, #24
 8009702:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970e:	3307      	adds	r3, #7
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	b29a      	uxth	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800971a:	3306      	adds	r3, #6
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	b29b      	uxth	r3, r3
 8009724:	4313      	orrs	r3, r2
 8009726:	b29a      	uxth	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	809a      	strh	r2, [r3, #4]
      break;
 800972c:	bf00      	nop
  }

  return error;
 800972e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	460b      	mov	r3, r1
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009746:	2302      	movs	r3, #2
 8009748:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800975a:	2b01      	cmp	r3, #1
 800975c:	d002      	beq.n	8009764 <USBH_MSC_SCSI_Inquiry+0x2c>
 800975e:	2b02      	cmp	r3, #2
 8009760:	d03d      	beq.n	80097de <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009762:	e089      	b.n	8009878 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2224      	movs	r2, #36	; 0x24
 8009768:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2280      	movs	r2, #128	; 0x80
 800976e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	220a      	movs	r2, #10
 8009776:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	3363      	adds	r3, #99	; 0x63
 800977e:	220a      	movs	r2, #10
 8009780:	2100      	movs	r1, #0
 8009782:	4618      	mov	r0, r3
 8009784:	f007 f8c2 	bl	801090c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	2212      	movs	r2, #18
 800978c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009790:	7afb      	ldrb	r3, [r7, #11]
 8009792:	015b      	lsls	r3, r3, #5
 8009794:	b2da      	uxtb	r2, r3
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2224      	movs	r2, #36	; 0x24
 80097b0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f103 0210 	add.w	r2, r3, #16
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80097d8:	2301      	movs	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]
      break;
 80097dc:	e04c      	b.n	8009878 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	4619      	mov	r1, r3
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f7ff fcac 	bl	8009140 <USBH_MSC_BOT_Process>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d141      	bne.n	8009876 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80097f2:	2222      	movs	r2, #34	; 0x22
 80097f4:	2100      	movs	r1, #0
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f007 f888 	bl	801090c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	f003 031f 	and.w	r3, r3, #31
 8009808:	b2da      	uxtb	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	b2da      	uxtb	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009824:	3301      	adds	r3, #1
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	b25b      	sxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	da03      	bge.n	8009836 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	709a      	strb	r2, [r3, #2]
 8009834:	e002      	b.n	800983c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	1cd8      	adds	r0, r3, #3
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009846:	3308      	adds	r3, #8
 8009848:	2208      	movs	r2, #8
 800984a:	4619      	mov	r1, r3
 800984c:	f007 f850 	bl	80108f0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f103 000c 	add.w	r0, r3, #12
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800985c:	3310      	adds	r3, #16
 800985e:	2210      	movs	r2, #16
 8009860:	4619      	mov	r1, r3
 8009862:	f007 f845 	bl	80108f0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	331d      	adds	r3, #29
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009870:	3220      	adds	r2, #32
 8009872:	6812      	ldr	r2, [r2, #0]
 8009874:	601a      	str	r2, [r3, #0]
      break;
 8009876:	bf00      	nop
  }

  return error;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	460b      	mov	r3, r1
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009890:	2302      	movs	r3, #2
 8009892:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d002      	beq.n	80098ae <USBH_MSC_SCSI_RequestSense+0x2c>
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d03d      	beq.n	8009928 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80098ac:	e05d      	b.n	800996a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	220e      	movs	r2, #14
 80098b2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	2280      	movs	r2, #128	; 0x80
 80098b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	220a      	movs	r2, #10
 80098c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	3363      	adds	r3, #99	; 0x63
 80098c8:	2210      	movs	r2, #16
 80098ca:	2100      	movs	r1, #0
 80098cc:	4618      	mov	r0, r3
 80098ce:	f007 f81d 	bl	801090c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2203      	movs	r2, #3
 80098d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80098da:	7afb      	ldrb	r3, [r7, #11]
 80098dc:	015b      	lsls	r3, r3, #5
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	220e      	movs	r2, #14
 80098fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2202      	movs	r2, #2
 8009912:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f103 0210 	add.w	r2, r3, #16
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009922:	2301      	movs	r3, #1
 8009924:	75fb      	strb	r3, [r7, #23]
      break;
 8009926:	e020      	b.n	800996a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	4619      	mov	r1, r3
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f7ff fc07 	bl	8009140 <USBH_MSC_BOT_Process>
 8009932:	4603      	mov	r3, r0
 8009934:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d115      	bne.n	8009968 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009942:	3302      	adds	r3, #2
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	f003 030f 	and.w	r3, r3, #15
 800994a:	b2da      	uxtb	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009956:	7b1a      	ldrb	r2, [r3, #12]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009962:	7b5a      	ldrb	r2, [r3, #13]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	709a      	strb	r2, [r3, #2]
      break;
 8009968:	bf00      	nop
  }

  return error;
 800996a:	7dfb      	ldrb	r3, [r7, #23]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	607a      	str	r2, [r7, #4]
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	460b      	mov	r3, r1
 8009982:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009984:	2302      	movs	r3, #2
 8009986:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009998:	2b01      	cmp	r3, #1
 800999a:	d002      	beq.n	80099a2 <USBH_MSC_SCSI_Write+0x2e>
 800999c:	2b02      	cmp	r3, #2
 800999e:	d047      	beq.n	8009a30 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80099a0:	e04e      	b.n	8009a40 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80099a8:	461a      	mov	r2, r3
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	fb03 f202 	mul.w	r2, r3, r2
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	220a      	movs	r2, #10
 80099c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	3363      	adds	r3, #99	; 0x63
 80099c8:	2210      	movs	r2, #16
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f006 ff9d 	bl	801090c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	222a      	movs	r2, #42	; 0x2a
 80099d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80099da:	79fa      	ldrb	r2, [r7, #7]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80099e2:	79ba      	ldrb	r2, [r7, #6]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80099ea:	797a      	ldrb	r2, [r7, #5]
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80099f2:	1d3b      	adds	r3, r7, #4
 80099f4:	781a      	ldrb	r2, [r3, #0]
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80099fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009a06:	f107 0320 	add.w	r3, r7, #32
 8009a0a:	781a      	ldrb	r2, [r3, #0]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a2e:	e007      	b.n	8009a40 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	4619      	mov	r1, r3
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7ff fb83 	bl	8009140 <USBH_MSC_BOT_Process>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a3e:	bf00      	nop
  }

  return error;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b086      	sub	sp, #24
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
 8009a56:	460b      	mov	r3, r1
 8009a58:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d002      	beq.n	8009a78 <USBH_MSC_SCSI_Read+0x2e>
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d047      	beq.n	8009b06 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009a76:	e04e      	b.n	8009b16 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009a7e:	461a      	mov	r2, r3
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	fb03 f202 	mul.w	r2, r3, r2
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2280      	movs	r2, #128	; 0x80
 8009a8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	220a      	movs	r2, #10
 8009a96:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	3363      	adds	r3, #99	; 0x63
 8009a9e:	2210      	movs	r2, #16
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f006 ff32 	bl	801090c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2228      	movs	r2, #40	; 0x28
 8009aac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009ab0:	79fa      	ldrb	r2, [r7, #7]
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009ab8:	79ba      	ldrb	r2, [r7, #6]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009ac0:	797a      	ldrb	r2, [r7, #5]
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009ac8:	1d3b      	adds	r3, r7, #4
 8009aca:	781a      	ldrb	r2, [r3, #0]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ad2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009adc:	f107 0320 	add.w	r3, r7, #32
 8009ae0:	781a      	ldrb	r2, [r3, #0]
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b00:	2301      	movs	r3, #1
 8009b02:	75fb      	strb	r3, [r7, #23]
      break;
 8009b04:	e007      	b.n	8009b16 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f7ff fb18 	bl	8009140 <USBH_MSC_BOT_Process>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]
      break;
 8009b14:	bf00      	nop
  }

  return error;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b34:	2302      	movs	r3, #2
 8009b36:	e029      	b.n	8009b8c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	79fa      	ldrb	r2, [r7, #7]
 8009b3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 f81f 	bl	8009b94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f006 fc55 	bl	8010434 <USBH_LL_Init>

  return USBH_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e009      	b.n	8009bba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	33e0      	adds	r3, #224	; 0xe0
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b0e      	cmp	r3, #14
 8009bbe:	d9f2      	bls.n	8009ba6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	e009      	b.n	8009bda <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009be0:	d3f1      	bcc.n	8009bc6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2240      	movs	r2, #64	; 0x40
 8009c06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d016      	beq.n	8009c7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10e      	bne.n	8009c78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c60:	1c59      	adds	r1, r3, #1
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	33de      	adds	r3, #222	; 0xde
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	73fb      	strb	r3, [r7, #15]
 8009c76:	e004      	b.n	8009c82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	73fb      	strb	r3, [r7, #15]
 8009c7c:	e001      	b.n	8009c82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009c7e:	2302      	movs	r3, #2
 8009c80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009ca6:	78fa      	ldrb	r2, [r7, #3]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d204      	bcs.n	8009cb6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	78fa      	ldrb	r2, [r7, #3]
 8009cb0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009cb4:	e001      	b.n	8009cba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	70fb      	strb	r3, [r7, #3]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70bb      	strb	r3, [r7, #2]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009cf0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009cf2:	e025      	b.n	8009d40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	221a      	movs	r2, #26
 8009cf8:	fb02 f303 	mul.w	r3, r2, r3
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	3302      	adds	r3, #2
 8009d04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	795b      	ldrb	r3, [r3, #5]
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d002      	beq.n	8009d16 <USBH_FindInterface+0x4e>
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	2bff      	cmp	r3, #255	; 0xff
 8009d14:	d111      	bne.n	8009d3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d1a:	78ba      	ldrb	r2, [r7, #2]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d002      	beq.n	8009d26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d20:	78bb      	ldrb	r3, [r7, #2]
 8009d22:	2bff      	cmp	r3, #255	; 0xff
 8009d24:	d109      	bne.n	8009d3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d2a:	787a      	ldrb	r2, [r7, #1]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d002      	beq.n	8009d36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d30:	787b      	ldrb	r3, [r7, #1]
 8009d32:	2bff      	cmp	r3, #255	; 0xff
 8009d34:	d101      	bne.n	8009d3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	e006      	b.n	8009d48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d9d6      	bls.n	8009cf4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d46:	23ff      	movs	r3, #255	; 0xff
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f006 fba7 	bl	80104b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009d62:	2101      	movs	r1, #1
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f006 fcc0 	bl	80106ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af04      	add	r7, sp, #16
 8009d7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d102      	bne.n	8009d96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2203      	movs	r2, #3
 8009d94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b0b      	cmp	r3, #11
 8009d9e:	f200 81b3 	bhi.w	800a108 <USBH_Process+0x394>
 8009da2:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <USBH_Process+0x34>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009dd9 	.word	0x08009dd9
 8009dac:	08009e0b 	.word	0x08009e0b
 8009db0:	08009e73 	.word	0x08009e73
 8009db4:	0800a0a3 	.word	0x0800a0a3
 8009db8:	0800a109 	.word	0x0800a109
 8009dbc:	08009f17 	.word	0x08009f17
 8009dc0:	0800a049 	.word	0x0800a049
 8009dc4:	08009f4d 	.word	0x08009f4d
 8009dc8:	08009f6d 	.word	0x08009f6d
 8009dcc:	08009f8d 	.word	0x08009f8d
 8009dd0:	08009fbb 	.word	0x08009fbb
 8009dd4:	0800a08b 	.word	0x0800a08b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 8193 	beq.w	800a10c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009dec:	20c8      	movs	r0, #200	; 0xc8
 8009dee:	f006 fcf3 	bl	80107d8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f006 fbb9 	bl	801056a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009e08:	e180      	b.n	800a10c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d107      	bne.n	8009e24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e22:	e182      	b.n	800a12a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e2e:	d914      	bls.n	8009e5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e36:	3301      	adds	r3, #1
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d903      	bls.n	8009e52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	220d      	movs	r2, #13
 8009e4e:	701a      	strb	r2, [r3, #0]
      break;
 8009e50:	e16b      	b.n	800a12a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	701a      	strb	r2, [r3, #0]
      break;
 8009e58:	e167      	b.n	800a12a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e60:	f103 020a 	add.w	r2, r3, #10
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009e6a:	200a      	movs	r0, #10
 8009e6c:	f006 fcb4 	bl	80107d8 <USBH_Delay>
      break;
 8009e70:	e15b      	b.n	800a12a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e82:	2104      	movs	r1, #4
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009e88:	2064      	movs	r0, #100	; 0x64
 8009e8a:	f006 fca5 	bl	80107d8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f006 fb44 	bl	801051c <USBH_LL_GetSpeed>
 8009e94:	4603      	mov	r3, r0
 8009e96:	461a      	mov	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 f92f 	bl	800b10a <USBH_AllocPipe>
 8009eac:	4603      	mov	r3, r0
 8009eae:	461a      	mov	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009eb4:	2180      	movs	r1, #128	; 0x80
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 f927 	bl	800b10a <USBH_AllocPipe>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	7919      	ldrb	r1, [r3, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ed8:	b292      	uxth	r2, r2
 8009eda:	9202      	str	r2, [sp, #8]
 8009edc:	2200      	movs	r2, #0
 8009ede:	9201      	str	r2, [sp, #4]
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2280      	movs	r2, #128	; 0x80
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f001 f8e0 	bl	800b0ac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	7959      	ldrb	r1, [r3, #5]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f00:	b292      	uxth	r2, r2
 8009f02:	9202      	str	r2, [sp, #8]
 8009f04:	2200      	movs	r2, #0
 8009f06:	9201      	str	r2, [sp, #4]
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 f8cc 	bl	800b0ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f14:	e109      	b.n	800a12a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f90c 	bl	800a134 <USBH_HandleEnum>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f040 80f3 	bne.w	800a110 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d103      	bne.n	8009f44 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2208      	movs	r2, #8
 8009f40:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009f42:	e0e5      	b.n	800a110 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2207      	movs	r2, #7
 8009f48:	701a      	strb	r2, [r3, #0]
      break;
 8009f4a:	e0e1      	b.n	800a110 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 80de 	beq.w	800a114 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f5e:	2101      	movs	r1, #1
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2208      	movs	r2, #8
 8009f68:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009f6a:	e0d3      	b.n	800a114 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fc20 	bl	800a7bc <USBH_SetCfg>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f040 80ca 	bne.w	800a118 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2209      	movs	r2, #9
 8009f88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f8a:	e0c5      	b.n	800a118 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00b      	beq.n	8009fb2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fc30 	bl	800a802 <USBH_SetFeature>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f040 80b9 	bne.w	800a11c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	220a      	movs	r2, #10
 8009fae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009fb0:	e0b4      	b.n	800a11c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	220a      	movs	r2, #10
 8009fb6:	701a      	strb	r2, [r3, #0]
      break;
 8009fb8:	e0b0      	b.n	800a11c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 80ad 	beq.w	800a120 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]
 8009fd2:	e016      	b.n	800a002 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009fd4:	7bfa      	ldrb	r2, [r7, #15]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	32de      	adds	r2, #222	; 0xde
 8009fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fde:	791a      	ldrb	r2, [r3, #4]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d108      	bne.n	8009ffc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009fea:	7bfa      	ldrb	r2, [r7, #15]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	32de      	adds	r2, #222	; 0xde
 8009ff0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009ffa:	e005      	b.n	800a008 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	3301      	adds	r3, #1
 800a000:	73fb      	strb	r3, [r7, #15]
 800a002:	7bfb      	ldrb	r3, [r7, #15]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d0e5      	beq.n	8009fd4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d016      	beq.n	800a040 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	4798      	blx	r3
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d109      	bne.n	800a038 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2206      	movs	r2, #6
 800a028:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a030:	2103      	movs	r1, #3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a036:	e073      	b.n	800a120 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	220d      	movs	r2, #13
 800a03c:	701a      	strb	r2, [r3, #0]
      break;
 800a03e:	e06f      	b.n	800a120 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	220d      	movs	r2, #13
 800a044:	701a      	strb	r2, [r3, #0]
      break;
 800a046:	e06b      	b.n	800a120 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d017      	beq.n	800a082 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	4798      	blx	r3
 800a05e:	4603      	mov	r3, r0
 800a060:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a062:	7bbb      	ldrb	r3, [r7, #14]
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d103      	bne.n	800a072 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	220b      	movs	r2, #11
 800a06e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a070:	e058      	b.n	800a124 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b02      	cmp	r3, #2
 800a078:	d154      	bne.n	800a124 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	220d      	movs	r2, #13
 800a07e:	701a      	strb	r2, [r3, #0]
      break;
 800a080:	e050      	b.n	800a124 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	220d      	movs	r2, #13
 800a086:	701a      	strb	r2, [r3, #0]
      break;
 800a088:	e04c      	b.n	800a124 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d049      	beq.n	800a128 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	4798      	blx	r3
      }
      break;
 800a0a0:	e042      	b.n	800a128 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff fd72 	bl	8009b94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d005      	beq.n	800a0e4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0de:	2105      	movs	r1, #5
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d107      	bne.n	800a100 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff fe2b 	bl	8009d54 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a0fe:	e014      	b.n	800a12a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f006 f9d5 	bl	80104b0 <USBH_LL_Start>
      break;
 800a106:	e010      	b.n	800a12a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a108:	bf00      	nop
 800a10a:	e00e      	b.n	800a12a <USBH_Process+0x3b6>
      break;
 800a10c:	bf00      	nop
 800a10e:	e00c      	b.n	800a12a <USBH_Process+0x3b6>
      break;
 800a110:	bf00      	nop
 800a112:	e00a      	b.n	800a12a <USBH_Process+0x3b6>
    break;
 800a114:	bf00      	nop
 800a116:	e008      	b.n	800a12a <USBH_Process+0x3b6>
      break;
 800a118:	bf00      	nop
 800a11a:	e006      	b.n	800a12a <USBH_Process+0x3b6>
      break;
 800a11c:	bf00      	nop
 800a11e:	e004      	b.n	800a12a <USBH_Process+0x3b6>
      break;
 800a120:	bf00      	nop
 800a122:	e002      	b.n	800a12a <USBH_Process+0x3b6>
      break;
 800a124:	bf00      	nop
 800a126:	e000      	b.n	800a12a <USBH_Process+0x3b6>
      break;
 800a128:	bf00      	nop
  }
  return USBH_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af04      	add	r7, sp, #16
 800a13a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a13c:	2301      	movs	r3, #1
 800a13e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a140:	2301      	movs	r3, #1
 800a142:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	785b      	ldrb	r3, [r3, #1]
 800a148:	2b07      	cmp	r3, #7
 800a14a:	f200 81c1 	bhi.w	800a4d0 <USBH_HandleEnum+0x39c>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <USBH_HandleEnum+0x20>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a175 	.word	0x0800a175
 800a158:	0800a233 	.word	0x0800a233
 800a15c:	0800a29d 	.word	0x0800a29d
 800a160:	0800a32b 	.word	0x0800a32b
 800a164:	0800a395 	.word	0x0800a395
 800a168:	0800a405 	.word	0x0800a405
 800a16c:	0800a44b 	.word	0x0800a44b
 800a170:	0800a491 	.word	0x0800a491
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a174:	2108      	movs	r1, #8
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa50 	bl	800a61c <USBH_Get_DevDesc>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d130      	bne.n	800a1e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	7919      	ldrb	r1, [r3, #4]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1aa:	b292      	uxth	r2, r2
 800a1ac:	9202      	str	r2, [sp, #8]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	9201      	str	r2, [sp, #4]
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2280      	movs	r2, #128	; 0x80
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 ff77 	bl	800b0ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	7959      	ldrb	r1, [r3, #5]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1d2:	b292      	uxth	r2, r2
 800a1d4:	9202      	str	r2, [sp, #8]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	9201      	str	r2, [sp, #4]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 ff63 	bl	800b0ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a1e6:	e175      	b.n	800a4d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	f040 8172 	bne.w	800a4d4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a206:	2b03      	cmp	r3, #3
 800a208:	d903      	bls.n	800a212 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	220d      	movs	r2, #13
 800a20e:	701a      	strb	r2, [r3, #0]
      break;
 800a210:	e160      	b.n	800a4d4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	795b      	ldrb	r3, [r3, #5]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 ff97 	bl	800b14c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	791b      	ldrb	r3, [r3, #4]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 ff91 	bl	800b14c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	701a      	strb	r2, [r3, #0]
      break;
 800a230:	e150      	b.n	800a4d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a232:	2112      	movs	r1, #18
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f9f1 	bl	800a61c <USBH_Get_DevDesc>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d103      	bne.n	800a24c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a24a:	e145      	b.n	800a4d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	2b03      	cmp	r3, #3
 800a250:	f040 8142 	bne.w	800a4d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a25a:	3301      	adds	r3, #1
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d903      	bls.n	800a276 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	220d      	movs	r2, #13
 800a272:	701a      	strb	r2, [r3, #0]
      break;
 800a274:	e130      	b.n	800a4d8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	795b      	ldrb	r3, [r3, #5]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 ff65 	bl	800b14c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	791b      	ldrb	r3, [r3, #4]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 ff5f 	bl	800b14c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
      break;
 800a29a:	e11d      	b.n	800a4d8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a29c:	2101      	movs	r1, #1
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fa68 	bl	800a774 <USBH_SetAddress>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d132      	bne.n	800a314 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a2ae:	2002      	movs	r0, #2
 800a2b0:	f006 fa92 	bl	80107d8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2203      	movs	r2, #3
 800a2c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	7919      	ldrb	r1, [r3, #4]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2d6:	b292      	uxth	r2, r2
 800a2d8:	9202      	str	r2, [sp, #8]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	9201      	str	r2, [sp, #4]
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2280      	movs	r2, #128	; 0x80
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fee1 	bl	800b0ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	7959      	ldrb	r1, [r3, #5]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2fe:	b292      	uxth	r2, r2
 800a300:	9202      	str	r2, [sp, #8]
 800a302:	2200      	movs	r2, #0
 800a304:	9201      	str	r2, [sp, #4]
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4603      	mov	r3, r0
 800a30a:	2200      	movs	r2, #0
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fecd 	bl	800b0ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a312:	e0e3      	b.n	800a4dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	2b03      	cmp	r3, #3
 800a318:	f040 80e0 	bne.w	800a4dc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	220d      	movs	r2, #13
 800a320:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	705a      	strb	r2, [r3, #1]
      break;
 800a328:	e0d8      	b.n	800a4dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a32a:	2109      	movs	r1, #9
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f99d 	bl	800a66c <USBH_Get_CfgDesc>
 800a332:	4603      	mov	r3, r0
 800a334:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a336:	7bbb      	ldrb	r3, [r7, #14]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d103      	bne.n	800a344 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2204      	movs	r2, #4
 800a340:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a342:	e0cd      	b.n	800a4e0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	2b03      	cmp	r3, #3
 800a348:	f040 80ca 	bne.w	800a4e0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a352:	3301      	adds	r3, #1
 800a354:	b2da      	uxtb	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a362:	2b03      	cmp	r3, #3
 800a364:	d903      	bls.n	800a36e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	220d      	movs	r2, #13
 800a36a:	701a      	strb	r2, [r3, #0]
      break;
 800a36c:	e0b8      	b.n	800a4e0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	795b      	ldrb	r3, [r3, #5]
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fee9 	bl	800b14c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	791b      	ldrb	r3, [r3, #4]
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fee3 	bl	800b14c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	701a      	strb	r2, [r3, #0]
      break;
 800a392:	e0a5      	b.n	800a4e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f965 	bl	800a66c <USBH_Get_CfgDesc>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d103      	bne.n	800a3b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2205      	movs	r2, #5
 800a3b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3b2:	e097      	b.n	800a4e4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	f040 8094 	bne.w	800a4e4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d903      	bls.n	800a3de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	220d      	movs	r2, #13
 800a3da:	701a      	strb	r2, [r3, #0]
      break;
 800a3dc:	e082      	b.n	800a4e4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	795b      	ldrb	r3, [r3, #5]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 feb1 	bl	800b14c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	791b      	ldrb	r3, [r3, #4]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 feab 	bl	800b14c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	701a      	strb	r2, [r3, #0]
      break;
 800a402:	e06f      	b.n	800a4e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d019      	beq.n	800a442 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a41a:	23ff      	movs	r3, #255	; 0xff
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f949 	bl	800a6b4 <USBH_Get_StringDesc>
 800a422:	4603      	mov	r3, r0
 800a424:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d103      	bne.n	800a434 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2206      	movs	r2, #6
 800a430:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a432:	e059      	b.n	800a4e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	2b03      	cmp	r3, #3
 800a438:	d156      	bne.n	800a4e8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2206      	movs	r2, #6
 800a43e:	705a      	strb	r2, [r3, #1]
      break;
 800a440:	e052      	b.n	800a4e8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2206      	movs	r2, #6
 800a446:	705a      	strb	r2, [r3, #1]
      break;
 800a448:	e04e      	b.n	800a4e8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a450:	2b00      	cmp	r3, #0
 800a452:	d019      	beq.n	800a488 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a460:	23ff      	movs	r3, #255	; 0xff
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f926 	bl	800a6b4 <USBH_Get_StringDesc>
 800a468:	4603      	mov	r3, r0
 800a46a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d103      	bne.n	800a47a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2207      	movs	r2, #7
 800a476:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a478:	e038      	b.n	800a4ec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a47a:	7bbb      	ldrb	r3, [r7, #14]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d135      	bne.n	800a4ec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2207      	movs	r2, #7
 800a484:	705a      	strb	r2, [r3, #1]
      break;
 800a486:	e031      	b.n	800a4ec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2207      	movs	r2, #7
 800a48c:	705a      	strb	r2, [r3, #1]
      break;
 800a48e:	e02d      	b.n	800a4ec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a496:	2b00      	cmp	r3, #0
 800a498:	d017      	beq.n	800a4ca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4a6:	23ff      	movs	r3, #255	; 0xff
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f903 	bl	800a6b4 <USBH_Get_StringDesc>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d102      	bne.n	800a4be <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a4bc:	e018      	b.n	800a4f0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d115      	bne.n	800a4f0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c8:	e012      	b.n	800a4f0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ce:	e00f      	b.n	800a4f0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a4d0:	bf00      	nop
 800a4d2:	e00e      	b.n	800a4f2 <USBH_HandleEnum+0x3be>
      break;
 800a4d4:	bf00      	nop
 800a4d6:	e00c      	b.n	800a4f2 <USBH_HandleEnum+0x3be>
      break;
 800a4d8:	bf00      	nop
 800a4da:	e00a      	b.n	800a4f2 <USBH_HandleEnum+0x3be>
      break;
 800a4dc:	bf00      	nop
 800a4de:	e008      	b.n	800a4f2 <USBH_HandleEnum+0x3be>
      break;
 800a4e0:	bf00      	nop
 800a4e2:	e006      	b.n	800a4f2 <USBH_HandleEnum+0x3be>
      break;
 800a4e4:	bf00      	nop
 800a4e6:	e004      	b.n	800a4f2 <USBH_HandleEnum+0x3be>
      break;
 800a4e8:	bf00      	nop
 800a4ea:	e002      	b.n	800a4f2 <USBH_HandleEnum+0x3be>
      break;
 800a4ec:	bf00      	nop
 800a4ee:	e000      	b.n	800a4f2 <USBH_HandleEnum+0x3be>
      break;
 800a4f0:	bf00      	nop
  }
  return Status;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a528:	1c5a      	adds	r2, r3, #1
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f804 	bl	800a53e <USBH_HandleSof>
}
 800a536:	bf00      	nop
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b0b      	cmp	r3, #11
 800a54e:	d10a      	bne.n	800a566 <USBH_HandleSof+0x28>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
  }
}
 800a566:	bf00      	nop
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a57e:	bf00      	nop
}
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a59a:	bf00      	nop
}
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f005 ff76 	bl	80104e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	791b      	ldrb	r3, [r3, #4]
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fda3 	bl	800b14c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	795b      	ldrb	r3, [r3, #5]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fd9d 	bl	800b14c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af02      	add	r7, sp, #8
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a62e:	78fb      	ldrb	r3, [r7, #3]
 800a630:	b29b      	uxth	r3, r3
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a63a:	2100      	movs	r1, #0
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f864 	bl	800a70a <USBH_GetDescriptor>
 800a642:	4603      	mov	r3, r0
 800a644:	73fb      	strb	r3, [r7, #15]
 800a646:	7bfb      	ldrb	r3, [r7, #15]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a658:	78fa      	ldrb	r2, [r7, #3]
 800a65a:	b292      	uxth	r2, r2
 800a65c:	4619      	mov	r1, r3
 800a65e:	f000 f918 	bl	800a892 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af02      	add	r7, sp, #8
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	331c      	adds	r3, #28
 800a67c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a67e:	887b      	ldrh	r3, [r7, #2]
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a688:	2100      	movs	r1, #0
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f83d 	bl	800a70a <USBH_GetDescriptor>
 800a690:	4603      	mov	r3, r0
 800a692:	72fb      	strb	r3, [r7, #11]
 800a694:	7afb      	ldrb	r3, [r7, #11]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d107      	bne.n	800a6aa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a6a0:	887a      	ldrh	r2, [r7, #2]
 800a6a2:	68f9      	ldr	r1, [r7, #12]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 f964 	bl	800a972 <USBH_ParseCfgDesc>
  }

  return status;
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af02      	add	r7, sp, #8
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	607a      	str	r2, [r7, #4]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	72fb      	strb	r3, [r7, #11]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a6c8:	7afb      	ldrb	r3, [r7, #11]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a6d0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a6d8:	893b      	ldrh	r3, [r7, #8]
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	2100      	movs	r1, #0
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 f812 	bl	800a70a <USBH_GetDescriptor>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d107      	bne.n	800a700 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a6f6:	893a      	ldrh	r2, [r7, #8]
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fa37 	bl	800ab6e <USBH_ParseStringDesc>
  }

  return status;
 800a700:	7dfb      	ldrb	r3, [r7, #23]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	72fb      	strb	r3, [r7, #11]
 800a718:	4613      	mov	r3, r2
 800a71a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	789b      	ldrb	r3, [r3, #2]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d11c      	bne.n	800a75e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a724:	7afb      	ldrb	r3, [r7, #11]
 800a726:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2206      	movs	r2, #6
 800a734:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	893a      	ldrh	r2, [r7, #8]
 800a73a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a73c:	893b      	ldrh	r3, [r7, #8]
 800a73e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a746:	d104      	bne.n	800a752 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f240 4209 	movw	r2, #1033	; 0x409
 800a74e:	829a      	strh	r2, [r3, #20]
 800a750:	e002      	b.n	800a758 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	8b3a      	ldrh	r2, [r7, #24]
 800a75c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a75e:	8b3b      	ldrh	r3, [r7, #24]
 800a760:	461a      	mov	r2, r3
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 fa50 	bl	800ac0a <USBH_CtlReq>
 800a76a:	4603      	mov	r3, r0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	789b      	ldrb	r3, [r3, #2]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d10f      	bne.n	800a7a8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2205      	movs	r2, #5
 800a792:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	b29a      	uxth	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fa2c 	bl	800ac0a <USBH_CtlReq>
 800a7b2:	4603      	mov	r3, r0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	789b      	ldrb	r3, [r3, #2]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d10e      	bne.n	800a7ee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2209      	movs	r2, #9
 800a7da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	887a      	ldrh	r2, [r7, #2]
 800a7e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa09 	bl	800ac0a <USBH_CtlReq>
 800a7f8:	4603      	mov	r3, r0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	460b      	mov	r3, r1
 800a80c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	789b      	ldrb	r3, [r3, #2]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d10f      	bne.n	800a836 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2203      	movs	r2, #3
 800a820:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	b29a      	uxth	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a836:	2200      	movs	r2, #0
 800a838:	2100      	movs	r1, #0
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f9e5 	bl	800ac0a <USBH_CtlReq>
 800a840:	4603      	mov	r3, r0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	789b      	ldrb	r3, [r3, #2]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d10f      	bne.n	800a87e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2202      	movs	r2, #2
 800a862:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	b29a      	uxth	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a87e:	2200      	movs	r2, #0
 800a880:	2100      	movs	r1, #0
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f9c1 	bl	800ac0a <USBH_CtlReq>
 800a888:	4603      	mov	r3, r0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a892:	b480      	push	{r7}
 800a894:	b085      	sub	sp, #20
 800a896:	af00      	add	r7, sp, #0
 800a898:	60f8      	str	r0, [r7, #12]
 800a89a:	60b9      	str	r1, [r7, #8]
 800a89c:	4613      	mov	r3, r2
 800a89e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	785a      	ldrb	r2, [r3, #1]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	3302      	adds	r3, #2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	3303      	adds	r3, #3
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	021b      	lsls	r3, r3, #8
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	791a      	ldrb	r2, [r3, #4]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	795a      	ldrb	r2, [r3, #5]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	799a      	ldrb	r2, [r3, #6]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	79da      	ldrb	r2, [r3, #7]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a8ec:	88fb      	ldrh	r3, [r7, #6]
 800a8ee:	2b08      	cmp	r3, #8
 800a8f0:	d939      	bls.n	800a966 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	3309      	adds	r3, #9
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	b29b      	uxth	r3, r3
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	b29b      	uxth	r3, r3
 800a906:	4313      	orrs	r3, r2
 800a908:	b29a      	uxth	r2, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	330a      	adds	r3, #10
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	b29a      	uxth	r2, r3
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	330b      	adds	r3, #11
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	b29b      	uxth	r3, r3
 800a922:	4313      	orrs	r3, r2
 800a924:	b29a      	uxth	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	330c      	adds	r3, #12
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	b29a      	uxth	r2, r3
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	330d      	adds	r3, #13
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	b29b      	uxth	r3, r3
 800a93a:	021b      	lsls	r3, r3, #8
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4313      	orrs	r3, r2
 800a940:	b29a      	uxth	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	7b9a      	ldrb	r2, [r3, #14]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	7bda      	ldrb	r2, [r3, #15]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	7c1a      	ldrb	r2, [r3, #16]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	7c5a      	ldrb	r2, [r3, #17]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	745a      	strb	r2, [r3, #17]
  }
}
 800a966:	bf00      	nop
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b08a      	sub	sp, #40	; 0x28
 800a976:	af00      	add	r7, sp, #0
 800a978:	60f8      	str	r0, [r7, #12]
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	4613      	mov	r3, r2
 800a97e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a98a:	2300      	movs	r3, #0
 800a98c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	781a      	ldrb	r2, [r3, #0]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	785a      	ldrb	r2, [r3, #1]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	3302      	adds	r3, #2
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	3303      	adds	r3, #3
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	021b      	lsls	r3, r3, #8
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	791a      	ldrb	r2, [r3, #4]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	795a      	ldrb	r2, [r3, #5]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	799a      	ldrb	r2, [r3, #6]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	79da      	ldrb	r2, [r3, #7]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	7a1a      	ldrb	r2, [r3, #8]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a9e8:	88fb      	ldrh	r3, [r7, #6]
 800a9ea:	2b09      	cmp	r3, #9
 800a9ec:	d95f      	bls.n	800aaae <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a9ee:	2309      	movs	r3, #9
 800a9f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a9f6:	e051      	b.n	800aa9c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a9f8:	f107 0316 	add.w	r3, r7, #22
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa00:	f000 f8e8 	bl	800abd4 <USBH_GetNextDesc>
 800aa04:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	785b      	ldrb	r3, [r3, #1]
 800aa0a:	2b04      	cmp	r3, #4
 800aa0c:	d146      	bne.n	800aa9c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aa0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa12:	221a      	movs	r2, #26
 800aa14:	fb02 f303 	mul.w	r3, r2, r3
 800aa18:	3308      	adds	r3, #8
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	3302      	adds	r3, #2
 800aa20:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aa22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa24:	69f8      	ldr	r0, [r7, #28]
 800aa26:	f000 f846 	bl	800aab6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa34:	e022      	b.n	800aa7c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa36:	f107 0316 	add.w	r3, r7, #22
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa3e:	f000 f8c9 	bl	800abd4 <USBH_GetNextDesc>
 800aa42:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	2b05      	cmp	r3, #5
 800aa4a:	d117      	bne.n	800aa7c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aa4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa50:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aa54:	3201      	adds	r2, #1
 800aa56:	00d2      	lsls	r2, r2, #3
 800aa58:	211a      	movs	r1, #26
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	4413      	add	r3, r2
 800aa60:	3308      	adds	r3, #8
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	3304      	adds	r3, #4
 800aa68:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800aa6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa6c:	69b8      	ldr	r0, [r7, #24]
 800aa6e:	f000 f851 	bl	800ab14 <USBH_ParseEPDesc>
            ep_ix++;
 800aa72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aa76:	3301      	adds	r3, #1
 800aa78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	791b      	ldrb	r3, [r3, #4]
 800aa80:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d204      	bcs.n	800aa92 <USBH_ParseCfgDesc+0x120>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	885a      	ldrh	r2, [r3, #2]
 800aa8c:	8afb      	ldrh	r3, [r7, #22]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d8d1      	bhi.n	800aa36 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800aa92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa96:	3301      	adds	r3, #1
 800aa98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d804      	bhi.n	800aaae <USBH_ParseCfgDesc+0x13c>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	885a      	ldrh	r2, [r3, #2]
 800aaa8:	8afb      	ldrh	r3, [r7, #22]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d8a4      	bhi.n	800a9f8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800aaae:	bf00      	nop
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781a      	ldrb	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	785a      	ldrb	r2, [r3, #1]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	789a      	ldrb	r2, [r3, #2]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	78da      	ldrb	r2, [r3, #3]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	791a      	ldrb	r2, [r3, #4]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	795a      	ldrb	r2, [r3, #5]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	799a      	ldrb	r2, [r3, #6]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	79da      	ldrb	r2, [r3, #7]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	7a1a      	ldrb	r2, [r3, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	721a      	strb	r2, [r3, #8]
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781a      	ldrb	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	785a      	ldrb	r2, [r3, #1]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	789a      	ldrb	r2, [r3, #2]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	78da      	ldrb	r2, [r3, #3]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	3304      	adds	r3, #4
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	3305      	adds	r3, #5
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	021b      	lsls	r3, r3, #8
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	4313      	orrs	r3, r2
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	799a      	ldrb	r2, [r3, #6]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	719a      	strb	r2, [r3, #6]
}
 800ab62:	bf00      	nop
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b087      	sub	sp, #28
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d120      	bne.n	800abc8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	1e9a      	subs	r2, r3, #2
 800ab8c:	88fb      	ldrh	r3, [r7, #6]
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	bf28      	it	cs
 800ab92:	4613      	movcs	r3, r2
 800ab94:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3302      	adds	r3, #2
 800ab9a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	82fb      	strh	r3, [r7, #22]
 800aba0:	e00b      	b.n	800abba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aba2:	8afb      	ldrh	r3, [r7, #22]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	4413      	add	r3, r2
 800aba8:	781a      	ldrb	r2, [r3, #0]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	701a      	strb	r2, [r3, #0]
      pdest++;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	3301      	adds	r3, #1
 800abb2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800abb4:	8afb      	ldrh	r3, [r7, #22]
 800abb6:	3302      	adds	r3, #2
 800abb8:	82fb      	strh	r3, [r7, #22]
 800abba:	8afa      	ldrh	r2, [r7, #22]
 800abbc:	8abb      	ldrh	r3, [r7, #20]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d3ef      	bcc.n	800aba2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2200      	movs	r2, #0
 800abc6:	701a      	strb	r2, [r3, #0]
  }
}
 800abc8:	bf00      	nop
 800abca:	371c      	adds	r7, #28
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	881a      	ldrh	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	4413      	add	r3, r2
 800abea:	b29a      	uxth	r2, r3
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4413      	add	r3, r2
 800abfa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abfc:	68fb      	ldr	r3, [r7, #12]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b086      	sub	sp, #24
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	4613      	mov	r3, r2
 800ac16:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	789b      	ldrb	r3, [r3, #2]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d002      	beq.n	800ac2a <USBH_CtlReq+0x20>
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d00f      	beq.n	800ac48 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ac28:	e027      	b.n	800ac7a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	88fa      	ldrh	r2, [r7, #6]
 800ac34:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2202      	movs	r2, #2
 800ac40:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac42:	2301      	movs	r3, #1
 800ac44:	75fb      	strb	r3, [r7, #23]
      break;
 800ac46:	e018      	b.n	800ac7a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f81b 	bl	800ac84 <USBH_HandleControl>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac52:	7dfb      	ldrb	r3, [r7, #23]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <USBH_CtlReq+0x54>
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d106      	bne.n	800ac6c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2201      	movs	r2, #1
 800ac62:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	761a      	strb	r2, [r3, #24]
      break;
 800ac6a:	e005      	b.n	800ac78 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac6c:	7dfb      	ldrb	r3, [r7, #23]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d102      	bne.n	800ac78 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2201      	movs	r2, #1
 800ac76:	709a      	strb	r2, [r3, #2]
      break;
 800ac78:	bf00      	nop
  }
  return status;
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af02      	add	r7, sp, #8
 800ac8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	7e1b      	ldrb	r3, [r3, #24]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	2b0a      	cmp	r3, #10
 800ac9c:	f200 8156 	bhi.w	800af4c <USBH_HandleControl+0x2c8>
 800aca0:	a201      	add	r2, pc, #4	; (adr r2, 800aca8 <USBH_HandleControl+0x24>)
 800aca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca6:	bf00      	nop
 800aca8:	0800acd5 	.word	0x0800acd5
 800acac:	0800acef 	.word	0x0800acef
 800acb0:	0800ad59 	.word	0x0800ad59
 800acb4:	0800ad7f 	.word	0x0800ad7f
 800acb8:	0800adb7 	.word	0x0800adb7
 800acbc:	0800ade1 	.word	0x0800ade1
 800acc0:	0800ae33 	.word	0x0800ae33
 800acc4:	0800ae55 	.word	0x0800ae55
 800acc8:	0800ae91 	.word	0x0800ae91
 800accc:	0800aeb7 	.word	0x0800aeb7
 800acd0:	0800aef5 	.word	0x0800aef5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f103 0110 	add.w	r1, r3, #16
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	795b      	ldrb	r3, [r3, #5]
 800acde:	461a      	mov	r2, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f943 	bl	800af6c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2202      	movs	r2, #2
 800acea:	761a      	strb	r2, [r3, #24]
      break;
 800acec:	e139      	b.n	800af62 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	795b      	ldrb	r3, [r3, #5]
 800acf2:	4619      	mov	r1, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f005 fce5 	bl	80106c4 <USBH_LL_GetURBState>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d11e      	bne.n	800ad42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	7c1b      	ldrb	r3, [r3, #16]
 800ad08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	8adb      	ldrh	r3, [r3, #22]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad16:	7b7b      	ldrb	r3, [r7, #13]
 800ad18:	2b80      	cmp	r3, #128	; 0x80
 800ad1a:	d103      	bne.n	800ad24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2203      	movs	r2, #3
 800ad20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad22:	e115      	b.n	800af50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2205      	movs	r2, #5
 800ad28:	761a      	strb	r2, [r3, #24]
      break;
 800ad2a:	e111      	b.n	800af50 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ad2c:	7b7b      	ldrb	r3, [r7, #13]
 800ad2e:	2b80      	cmp	r3, #128	; 0x80
 800ad30:	d103      	bne.n	800ad3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2209      	movs	r2, #9
 800ad36:	761a      	strb	r2, [r3, #24]
      break;
 800ad38:	e10a      	b.n	800af50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2207      	movs	r2, #7
 800ad3e:	761a      	strb	r2, [r3, #24]
      break;
 800ad40:	e106      	b.n	800af50 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad42:	7bbb      	ldrb	r3, [r7, #14]
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d003      	beq.n	800ad50 <USBH_HandleControl+0xcc>
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	f040 8100 	bne.w	800af50 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	220b      	movs	r2, #11
 800ad54:	761a      	strb	r2, [r3, #24]
      break;
 800ad56:	e0fb      	b.n	800af50 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6899      	ldr	r1, [r3, #8]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	899a      	ldrh	r2, [r3, #12]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	791b      	ldrb	r3, [r3, #4]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f93a 	bl	800afea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2204      	movs	r2, #4
 800ad7a:	761a      	strb	r2, [r3, #24]
      break;
 800ad7c:	e0f1      	b.n	800af62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	791b      	ldrb	r3, [r3, #4]
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f005 fc9d 	bl	80106c4 <USBH_LL_GetURBState>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d102      	bne.n	800ad9a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2209      	movs	r2, #9
 800ad98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
 800ad9c:	2b05      	cmp	r3, #5
 800ad9e:	d102      	bne.n	800ada6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ada0:	2303      	movs	r3, #3
 800ada2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ada4:	e0d6      	b.n	800af54 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	f040 80d3 	bne.w	800af54 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	220b      	movs	r2, #11
 800adb2:	761a      	strb	r2, [r3, #24]
      break;
 800adb4:	e0ce      	b.n	800af54 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6899      	ldr	r1, [r3, #8]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	899a      	ldrh	r2, [r3, #12]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	795b      	ldrb	r3, [r3, #5]
 800adc2:	2001      	movs	r0, #1
 800adc4:	9000      	str	r0, [sp, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f8ea 	bl	800afa0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2206      	movs	r2, #6
 800addc:	761a      	strb	r2, [r3, #24]
      break;
 800adde:	e0c0      	b.n	800af62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	795b      	ldrb	r3, [r3, #5]
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f005 fc6c 	bl	80106c4 <USBH_LL_GetURBState>
 800adec:	4603      	mov	r3, r0
 800adee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d103      	bne.n	800adfe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2207      	movs	r2, #7
 800adfa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800adfc:	e0ac      	b.n	800af58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	2b05      	cmp	r3, #5
 800ae02:	d105      	bne.n	800ae10 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	220c      	movs	r2, #12
 800ae08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae0e:	e0a3      	b.n	800af58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae10:	7bbb      	ldrb	r3, [r7, #14]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d103      	bne.n	800ae1e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2205      	movs	r2, #5
 800ae1a:	761a      	strb	r2, [r3, #24]
      break;
 800ae1c:	e09c      	b.n	800af58 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	2b04      	cmp	r3, #4
 800ae22:	f040 8099 	bne.w	800af58 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	220b      	movs	r2, #11
 800ae2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae30:	e092      	b.n	800af58 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	791b      	ldrb	r3, [r3, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	2100      	movs	r1, #0
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f8d5 	bl	800afea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2208      	movs	r2, #8
 800ae50:	761a      	strb	r2, [r3, #24]

      break;
 800ae52:	e086      	b.n	800af62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	791b      	ldrb	r3, [r3, #4]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f005 fc32 	bl	80106c4 <USBH_LL_GetURBState>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d105      	bne.n	800ae76 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	220d      	movs	r2, #13
 800ae6e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae74:	e072      	b.n	800af5c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
 800ae78:	2b04      	cmp	r3, #4
 800ae7a:	d103      	bne.n	800ae84 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	220b      	movs	r2, #11
 800ae80:	761a      	strb	r2, [r3, #24]
      break;
 800ae82:	e06b      	b.n	800af5c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	2b05      	cmp	r3, #5
 800ae88:	d168      	bne.n	800af5c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae8e:	e065      	b.n	800af5c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	795b      	ldrb	r3, [r3, #5]
 800ae94:	2201      	movs	r2, #1
 800ae96:	9200      	str	r2, [sp, #0]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f87f 	bl	800afa0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	220a      	movs	r2, #10
 800aeb2:	761a      	strb	r2, [r3, #24]
      break;
 800aeb4:	e055      	b.n	800af62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	795b      	ldrb	r3, [r3, #5]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f005 fc01 	bl	80106c4 <USBH_LL_GetURBState>
 800aec2:	4603      	mov	r3, r0
 800aec4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d105      	bne.n	800aed8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	220d      	movs	r2, #13
 800aed4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aed6:	e043      	b.n	800af60 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aed8:	7bbb      	ldrb	r3, [r7, #14]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d103      	bne.n	800aee6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2209      	movs	r2, #9
 800aee2:	761a      	strb	r2, [r3, #24]
      break;
 800aee4:	e03c      	b.n	800af60 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d139      	bne.n	800af60 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	220b      	movs	r2, #11
 800aef0:	761a      	strb	r2, [r3, #24]
      break;
 800aef2:	e035      	b.n	800af60 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7e5b      	ldrb	r3, [r3, #25]
 800aef8:	3301      	adds	r3, #1
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	765a      	strb	r2, [r3, #25]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	7e5b      	ldrb	r3, [r3, #25]
 800af04:	2b02      	cmp	r3, #2
 800af06:	d806      	bhi.n	800af16 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af14:	e025      	b.n	800af62 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af1c:	2106      	movs	r1, #6
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	795b      	ldrb	r3, [r3, #5]
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f90c 	bl	800b14c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	791b      	ldrb	r3, [r3, #4]
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f906 	bl	800b14c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af46:	2302      	movs	r3, #2
 800af48:	73fb      	strb	r3, [r7, #15]
      break;
 800af4a:	e00a      	b.n	800af62 <USBH_HandleControl+0x2de>

    default:
      break;
 800af4c:	bf00      	nop
 800af4e:	e008      	b.n	800af62 <USBH_HandleControl+0x2de>
      break;
 800af50:	bf00      	nop
 800af52:	e006      	b.n	800af62 <USBH_HandleControl+0x2de>
      break;
 800af54:	bf00      	nop
 800af56:	e004      	b.n	800af62 <USBH_HandleControl+0x2de>
      break;
 800af58:	bf00      	nop
 800af5a:	e002      	b.n	800af62 <USBH_HandleControl+0x2de>
      break;
 800af5c:	bf00      	nop
 800af5e:	e000      	b.n	800af62 <USBH_HandleControl+0x2de>
      break;
 800af60:	bf00      	nop
  }

  return status;
 800af62:	7bfb      	ldrb	r3, [r7, #15]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af04      	add	r7, sp, #16
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	4613      	mov	r3, r2
 800af78:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800af7a:	79f9      	ldrb	r1, [r7, #7]
 800af7c:	2300      	movs	r3, #0
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	2308      	movs	r3, #8
 800af82:	9302      	str	r3, [sp, #8]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	2300      	movs	r3, #0
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	2300      	movs	r3, #0
 800af8e:	2200      	movs	r2, #0
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f005 fb66 	bl	8010662 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b088      	sub	sp, #32
 800afa4:	af04      	add	r7, sp, #16
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	4611      	mov	r1, r2
 800afac:	461a      	mov	r2, r3
 800afae:	460b      	mov	r3, r1
 800afb0:	80fb      	strh	r3, [r7, #6]
 800afb2:	4613      	mov	r3, r2
 800afb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800afc4:	7979      	ldrb	r1, [r7, #5]
 800afc6:	7e3b      	ldrb	r3, [r7, #24]
 800afc8:	9303      	str	r3, [sp, #12]
 800afca:	88fb      	ldrh	r3, [r7, #6]
 800afcc:	9302      	str	r3, [sp, #8]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	9301      	str	r3, [sp, #4]
 800afd2:	2301      	movs	r3, #1
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	2300      	movs	r3, #0
 800afd8:	2200      	movs	r2, #0
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f005 fb41 	bl	8010662 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b088      	sub	sp, #32
 800afee:	af04      	add	r7, sp, #16
 800aff0:	60f8      	str	r0, [r7, #12]
 800aff2:	60b9      	str	r1, [r7, #8]
 800aff4:	4611      	mov	r1, r2
 800aff6:	461a      	mov	r2, r3
 800aff8:	460b      	mov	r3, r1
 800affa:	80fb      	strh	r3, [r7, #6]
 800affc:	4613      	mov	r3, r2
 800affe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b000:	7979      	ldrb	r1, [r7, #5]
 800b002:	2300      	movs	r3, #0
 800b004:	9303      	str	r3, [sp, #12]
 800b006:	88fb      	ldrh	r3, [r7, #6]
 800b008:	9302      	str	r3, [sp, #8]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	2301      	movs	r3, #1
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	2300      	movs	r3, #0
 800b014:	2201      	movs	r2, #1
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f005 fb23 	bl	8010662 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b01c:	2300      	movs	r3, #0

}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b088      	sub	sp, #32
 800b02a:	af04      	add	r7, sp, #16
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	4611      	mov	r1, r2
 800b032:	461a      	mov	r2, r3
 800b034:	460b      	mov	r3, r1
 800b036:	80fb      	strh	r3, [r7, #6]
 800b038:	4613      	mov	r3, r2
 800b03a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b046:	2300      	movs	r3, #0
 800b048:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b04a:	7979      	ldrb	r1, [r7, #5]
 800b04c:	7e3b      	ldrb	r3, [r7, #24]
 800b04e:	9303      	str	r3, [sp, #12]
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	9302      	str	r3, [sp, #8]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	2301      	movs	r3, #1
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	2302      	movs	r3, #2
 800b05e:	2200      	movs	r2, #0
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f005 fafe 	bl	8010662 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b088      	sub	sp, #32
 800b074:	af04      	add	r7, sp, #16
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	4611      	mov	r1, r2
 800b07c:	461a      	mov	r2, r3
 800b07e:	460b      	mov	r3, r1
 800b080:	80fb      	strh	r3, [r7, #6]
 800b082:	4613      	mov	r3, r2
 800b084:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b086:	7979      	ldrb	r1, [r7, #5]
 800b088:	2300      	movs	r3, #0
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	88fb      	ldrh	r3, [r7, #6]
 800b08e:	9302      	str	r3, [sp, #8]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	2301      	movs	r3, #1
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	2302      	movs	r3, #2
 800b09a:	2201      	movs	r2, #1
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f005 fae0 	bl	8010662 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af04      	add	r7, sp, #16
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	70fb      	strb	r3, [r7, #3]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	70bb      	strb	r3, [r7, #2]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b0c6:	7878      	ldrb	r0, [r7, #1]
 800b0c8:	78ba      	ldrb	r2, [r7, #2]
 800b0ca:	78f9      	ldrb	r1, [r7, #3]
 800b0cc:	8b3b      	ldrh	r3, [r7, #24]
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	7d3b      	ldrb	r3, [r7, #20]
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	7c3b      	ldrb	r3, [r7, #16]
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	4603      	mov	r3, r0
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f005 fa73 	bl	80105c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b0f6:	78fb      	ldrb	r3, [r7, #3]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f005 fa92 	bl	8010624 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	460b      	mov	r3, r1
 800b114:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f836 	bl	800b188 <USBH_GetFreePipe>
 800b11c:	4603      	mov	r3, r0
 800b11e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b120:	89fb      	ldrh	r3, [r7, #14]
 800b122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b126:	4293      	cmp	r3, r2
 800b128:	d00a      	beq.n	800b140 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b12a:	78fa      	ldrb	r2, [r7, #3]
 800b12c:	89fb      	ldrh	r3, [r7, #14]
 800b12e:	f003 030f 	and.w	r3, r3, #15
 800b132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b136:	6879      	ldr	r1, [r7, #4]
 800b138:	33e0      	adds	r3, #224	; 0xe0
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	440b      	add	r3, r1
 800b13e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b140:	89fb      	ldrh	r3, [r7, #14]
 800b142:	b2db      	uxtb	r3, r3
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b158:	78fb      	ldrb	r3, [r7, #3]
 800b15a:	2b0a      	cmp	r3, #10
 800b15c:	d80d      	bhi.n	800b17a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b15e:	78fb      	ldrb	r3, [r7, #3]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	33e0      	adds	r3, #224	; 0xe0
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	685a      	ldr	r2, [r3, #4]
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	33e0      	adds	r3, #224	; 0xe0
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	440b      	add	r3, r1
 800b178:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b194:	2300      	movs	r3, #0
 800b196:	73fb      	strb	r3, [r7, #15]
 800b198:	e00f      	b.n	800b1ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	33e0      	adds	r3, #224	; 0xe0
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d102      	bne.n	800b1b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	e007      	b.n	800b1c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	73fb      	strb	r3, [r7, #15]
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
 800b1bc:	2b0a      	cmp	r3, #10
 800b1be:	d9ec      	bls.n	800b19a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b1c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b1da:	79fb      	ldrb	r3, [r7, #7]
 800b1dc:	4a08      	ldr	r2, [pc, #32]	; (800b200 <disk_status+0x30>)
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	79fa      	ldrb	r2, [r7, #7]
 800b1e8:	4905      	ldr	r1, [pc, #20]	; (800b200 <disk_status+0x30>)
 800b1ea:	440a      	add	r2, r1
 800b1ec:	7a12      	ldrb	r2, [r2, #8]
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	4798      	blx	r3
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	20000538 	.word	0x20000538

0800b204 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	4603      	mov	r3, r0
 800b20c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	4a0d      	ldr	r2, [pc, #52]	; (800b24c <disk_initialize+0x48>)
 800b216:	5cd3      	ldrb	r3, [r2, r3]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d111      	bne.n	800b240 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b21c:	79fb      	ldrb	r3, [r7, #7]
 800b21e:	4a0b      	ldr	r2, [pc, #44]	; (800b24c <disk_initialize+0x48>)
 800b220:	2101      	movs	r1, #1
 800b222:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	4a09      	ldr	r2, [pc, #36]	; (800b24c <disk_initialize+0x48>)
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	79fa      	ldrb	r2, [r7, #7]
 800b232:	4906      	ldr	r1, [pc, #24]	; (800b24c <disk_initialize+0x48>)
 800b234:	440a      	add	r2, r1
 800b236:	7a12      	ldrb	r2, [r2, #8]
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	4603      	mov	r3, r0
 800b23e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b240:	7bfb      	ldrb	r3, [r7, #15]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20000538 	.word	0x20000538

0800b250 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b250:	b590      	push	{r4, r7, lr}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	607a      	str	r2, [r7, #4]
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <disk_read+0x3c>)
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	689c      	ldr	r4, [r3, #8]
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
 800b26e:	4a07      	ldr	r2, [pc, #28]	; (800b28c <disk_read+0x3c>)
 800b270:	4413      	add	r3, r2
 800b272:	7a18      	ldrb	r0, [r3, #8]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	68b9      	ldr	r1, [r7, #8]
 800b27a:	47a0      	blx	r4
 800b27c:	4603      	mov	r3, r0
 800b27e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b280:	7dfb      	ldrb	r3, [r7, #23]
}
 800b282:	4618      	mov	r0, r3
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	bd90      	pop	{r4, r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000538 	.word	0x20000538

0800b290 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b290:	b590      	push	{r4, r7, lr}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	60b9      	str	r1, [r7, #8]
 800b298:	607a      	str	r2, [r7, #4]
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <disk_write+0x3c>)
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	68dc      	ldr	r4, [r3, #12]
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	4a07      	ldr	r2, [pc, #28]	; (800b2cc <disk_write+0x3c>)
 800b2b0:	4413      	add	r3, r2
 800b2b2:	7a18      	ldrb	r0, [r3, #8]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	68b9      	ldr	r1, [r7, #8]
 800b2ba:	47a0      	blx	r4
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75fb      	strb	r3, [r7, #23]
  return res;
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	371c      	adds	r7, #28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd90      	pop	{r4, r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20000538 	.word	0x20000538

0800b2d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	603a      	str	r2, [r7, #0]
 800b2da:	71fb      	strb	r3, [r7, #7]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	4a09      	ldr	r2, [pc, #36]	; (800b308 <disk_ioctl+0x38>)
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	79fa      	ldrb	r2, [r7, #7]
 800b2ee:	4906      	ldr	r1, [pc, #24]	; (800b308 <disk_ioctl+0x38>)
 800b2f0:	440a      	add	r2, r1
 800b2f2:	7a10      	ldrb	r0, [r2, #8]
 800b2f4:	79b9      	ldrb	r1, [r7, #6]
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	4798      	blx	r3
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	20000538 	.word	0x20000538

0800b30c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3301      	adds	r3, #1
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b31c:	89fb      	ldrh	r3, [r7, #14]
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	b21a      	sxth	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	b21b      	sxth	r3, r3
 800b328:	4313      	orrs	r3, r2
 800b32a:	b21b      	sxth	r3, r3
 800b32c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b32e:	89fb      	ldrh	r3, [r7, #14]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	3303      	adds	r3, #3
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	021b      	lsls	r3, r3, #8
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	3202      	adds	r2, #2
 800b354:	7812      	ldrb	r2, [r2, #0]
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	021b      	lsls	r3, r3, #8
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	3201      	adds	r2, #1
 800b362:	7812      	ldrb	r2, [r2, #0]
 800b364:	4313      	orrs	r3, r2
 800b366:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	021b      	lsls	r3, r3, #8
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	7812      	ldrb	r2, [r2, #0]
 800b370:	4313      	orrs	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]
	return rv;
 800b374:	68fb      	ldr	r3, [r7, #12]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800b382:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b386:	b08d      	sub	sp, #52	; 0x34
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	3307      	adds	r3, #7
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	b2da      	uxtb	r2, r3
 800b394:	f04f 0300 	mov.w	r3, #0
 800b398:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 800b39c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3a0:	f04f 0000 	mov.w	r0, #0
 800b3a4:	f04f 0100 	mov.w	r1, #0
 800b3a8:	0219      	lsls	r1, r3, #8
 800b3aa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b3ae:	0210      	lsls	r0, r2, #8
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	3306      	adds	r3, #6
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	f04f 0300 	mov.w	r3, #0
 800b3bc:	ea40 0402 	orr.w	r4, r0, r2
 800b3c0:	ea41 0503 	orr.w	r5, r1, r3
 800b3c4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 800b3c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3cc:	f04f 0000 	mov.w	r0, #0
 800b3d0:	f04f 0100 	mov.w	r1, #0
 800b3d4:	0219      	lsls	r1, r3, #8
 800b3d6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b3da:	0210      	lsls	r0, r2, #8
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3de:	3305      	adds	r3, #5
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	f04f 0300 	mov.w	r3, #0
 800b3e8:	ea40 0802 	orr.w	r8, r0, r2
 800b3ec:	ea41 0903 	orr.w	r9, r1, r3
 800b3f0:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 800b3f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3f8:	f04f 0000 	mov.w	r0, #0
 800b3fc:	f04f 0100 	mov.w	r1, #0
 800b400:	0219      	lsls	r1, r3, #8
 800b402:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b406:	0210      	lsls	r0, r2, #8
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	3304      	adds	r3, #4
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	f04f 0300 	mov.w	r3, #0
 800b414:	ea40 0402 	orr.w	r4, r0, r2
 800b418:	61bc      	str	r4, [r7, #24]
 800b41a:	430b      	orrs	r3, r1
 800b41c:	61fb      	str	r3, [r7, #28]
 800b41e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b422:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 800b426:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b42a:	f04f 0200 	mov.w	r2, #0
 800b42e:	f04f 0300 	mov.w	r3, #0
 800b432:	020b      	lsls	r3, r1, #8
 800b434:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b438:	0202      	lsls	r2, r0, #8
 800b43a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b43c:	3103      	adds	r1, #3
 800b43e:	7809      	ldrb	r1, [r1, #0]
 800b440:	b2c8      	uxtb	r0, r1
 800b442:	f04f 0100 	mov.w	r1, #0
 800b446:	ea42 0400 	orr.w	r4, r2, r0
 800b44a:	613c      	str	r4, [r7, #16]
 800b44c:	430b      	orrs	r3, r1
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b454:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 800b458:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b45c:	f04f 0200 	mov.w	r2, #0
 800b460:	f04f 0300 	mov.w	r3, #0
 800b464:	020b      	lsls	r3, r1, #8
 800b466:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b46a:	0202      	lsls	r2, r0, #8
 800b46c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b46e:	3102      	adds	r1, #2
 800b470:	7809      	ldrb	r1, [r1, #0]
 800b472:	b2c8      	uxtb	r0, r1
 800b474:	f04f 0100 	mov.w	r1, #0
 800b478:	ea42 0400 	orr.w	r4, r2, r0
 800b47c:	60bc      	str	r4, [r7, #8]
 800b47e:	430b      	orrs	r3, r1
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b486:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 800b48a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b48e:	f04f 0200 	mov.w	r2, #0
 800b492:	f04f 0300 	mov.w	r3, #0
 800b496:	020b      	lsls	r3, r1, #8
 800b498:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b49c:	0202      	lsls	r2, r0, #8
 800b49e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4a0:	3101      	adds	r1, #1
 800b4a2:	7809      	ldrb	r1, [r1, #0]
 800b4a4:	b2c8      	uxtb	r0, r1
 800b4a6:	f04f 0100 	mov.w	r1, #0
 800b4aa:	ea42 0400 	orr.w	r4, r2, r0
 800b4ae:	603c      	str	r4, [r7, #0]
 800b4b0:	430b      	orrs	r3, r1
 800b4b2:	607b      	str	r3, [r7, #4]
 800b4b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b4b8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 800b4bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b4c0:	f04f 0200 	mov.w	r2, #0
 800b4c4:	f04f 0300 	mov.w	r3, #0
 800b4c8:	020b      	lsls	r3, r1, #8
 800b4ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b4ce:	0202      	lsls	r2, r0, #8
 800b4d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4d2:	7809      	ldrb	r1, [r1, #0]
 800b4d4:	b2c8      	uxtb	r0, r1
 800b4d6:	f04f 0100 	mov.w	r1, #0
 800b4da:	ea42 0a00 	orr.w	sl, r2, r0
 800b4de:	ea43 0b01 	orr.w	fp, r3, r1
 800b4e2:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 800b4e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	3734      	adds	r7, #52	; 0x34
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b4f6:	4770      	bx	lr

0800b4f8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	607a      	str	r2, [r7, #4]
 800b50a:	887a      	ldrh	r2, [r7, #2]
 800b50c:	b2d2      	uxtb	r2, r2
 800b50e:	701a      	strb	r2, [r3, #0]
 800b510:	887b      	ldrh	r3, [r7, #2]
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	887a      	ldrh	r2, [r7, #2]
 800b51e:	b2d2      	uxtb	r2, r2
 800b520:	701a      	strb	r2, [r3, #0]
}
 800b522:	bf00      	nop
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	607a      	str	r2, [r7, #4]
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	b2d2      	uxtb	r2, r2
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	0a1b      	lsrs	r3, r3, #8
 800b548:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	0a1b      	lsrs	r3, r3, #8
 800b55a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	607a      	str	r2, [r7, #4]
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	b2d2      	uxtb	r2, r2
 800b566:	701a      	strb	r2, [r3, #0]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	0a1b      	lsrs	r3, r3, #8
 800b56c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]
}
 800b57a:	bf00      	nop
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800b586:	b480      	push	{r7}
 800b588:	b085      	sub	sp, #20
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	60fa      	str	r2, [r7, #12]
 800b598:	783a      	ldrb	r2, [r7, #0]
 800b59a:	701a      	strb	r2, [r3, #0]
 800b59c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5a0:	f04f 0200 	mov.w	r2, #0
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	0a02      	lsrs	r2, r0, #8
 800b5aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b5ae:	0a0b      	lsrs	r3, r1, #8
 800b5b0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	60fa      	str	r2, [r7, #12]
 800b5ba:	783a      	ldrb	r2, [r7, #0]
 800b5bc:	701a      	strb	r2, [r3, #0]
 800b5be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5c2:	f04f 0200 	mov.w	r2, #0
 800b5c6:	f04f 0300 	mov.w	r3, #0
 800b5ca:	0a02      	lsrs	r2, r0, #8
 800b5cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b5d0:	0a0b      	lsrs	r3, r1, #8
 800b5d2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	1c5a      	adds	r2, r3, #1
 800b5da:	60fa      	str	r2, [r7, #12]
 800b5dc:	783a      	ldrb	r2, [r7, #0]
 800b5de:	701a      	strb	r2, [r3, #0]
 800b5e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5e4:	f04f 0200 	mov.w	r2, #0
 800b5e8:	f04f 0300 	mov.w	r3, #0
 800b5ec:	0a02      	lsrs	r2, r0, #8
 800b5ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b5f2:	0a0b      	lsrs	r3, r1, #8
 800b5f4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	60fa      	str	r2, [r7, #12]
 800b5fe:	783a      	ldrb	r2, [r7, #0]
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b606:	f04f 0200 	mov.w	r2, #0
 800b60a:	f04f 0300 	mov.w	r3, #0
 800b60e:	0a02      	lsrs	r2, r0, #8
 800b610:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b614:	0a0b      	lsrs	r3, r1, #8
 800b616:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	60fa      	str	r2, [r7, #12]
 800b620:	783a      	ldrb	r2, [r7, #0]
 800b622:	701a      	strb	r2, [r3, #0]
 800b624:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b628:	f04f 0200 	mov.w	r2, #0
 800b62c:	f04f 0300 	mov.w	r3, #0
 800b630:	0a02      	lsrs	r2, r0, #8
 800b632:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b636:	0a0b      	lsrs	r3, r1, #8
 800b638:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	60fa      	str	r2, [r7, #12]
 800b642:	783a      	ldrb	r2, [r7, #0]
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	f04f 0300 	mov.w	r3, #0
 800b652:	0a02      	lsrs	r2, r0, #8
 800b654:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b658:	0a0b      	lsrs	r3, r1, #8
 800b65a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	60fa      	str	r2, [r7, #12]
 800b664:	783a      	ldrb	r2, [r7, #0]
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b66c:	f04f 0200 	mov.w	r2, #0
 800b670:	f04f 0300 	mov.w	r3, #0
 800b674:	0a02      	lsrs	r2, r0, #8
 800b676:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b67a:	0a0b      	lsrs	r3, r1, #8
 800b67c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	60fa      	str	r2, [r7, #12]
 800b686:	783a      	ldrb	r2, [r7, #0]
 800b688:	701a      	strb	r2, [r3, #0]
}
 800b68a:	bf00      	nop
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b696:	b480      	push	{r7}
 800b698:	b087      	sub	sp, #28
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	60b9      	str	r1, [r7, #8]
 800b6a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00d      	beq.n	800b6cc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	1c53      	adds	r3, r2, #1
 800b6b4:	613b      	str	r3, [r7, #16]
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	1c59      	adds	r1, r3, #1
 800b6ba:	6179      	str	r1, [r7, #20]
 800b6bc:	7812      	ldrb	r2, [r2, #0]
 800b6be:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	607b      	str	r3, [r7, #4]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1f1      	bne.n	800b6b0 <mem_cpy+0x1a>
	}
}
 800b6cc:	bf00      	nop
 800b6ce:	371c      	adds	r7, #28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	617a      	str	r2, [r7, #20]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	607b      	str	r3, [r7, #4]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1f3      	bne.n	800b6e8 <mem_set+0x10>
}
 800b700:	bf00      	nop
 800b702:	bf00      	nop
 800b704:	371c      	adds	r7, #28
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b70e:	b480      	push	{r7}
 800b710:	b089      	sub	sp, #36	; 0x24
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	61fa      	str	r2, [r7, #28]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	4619      	mov	r1, r3
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	61ba      	str	r2, [r7, #24]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	1acb      	subs	r3, r1, r3
 800b73a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	3b01      	subs	r3, #1
 800b740:	607b      	str	r3, [r7, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <mem_cmp+0x40>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0eb      	beq.n	800b726 <mem_cmp+0x18>

	return r;
 800b74e:	697b      	ldr	r3, [r7, #20]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3724      	adds	r7, #36	; 0x24
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b766:	e002      	b.n	800b76e <chk_chr+0x12>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3301      	adds	r3, #1
 800b76c:	607b      	str	r3, [r7, #4]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d005      	beq.n	800b782 <chk_chr+0x26>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	4293      	cmp	r3, r2
 800b780:	d1f2      	bne.n	800b768 <chk_chr+0xc>
	return *str;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	781b      	ldrb	r3, [r3, #0]
}
 800b786:	4618      	mov	r0, r3
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
	...

0800b794 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b79e:	2300      	movs	r3, #0
 800b7a0:	60bb      	str	r3, [r7, #8]
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	e029      	b.n	800b7fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b7a8:	4a27      	ldr	r2, [pc, #156]	; (800b848 <chk_lock+0xb4>)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	011b      	lsls	r3, r3, #4
 800b7ae:	4413      	add	r3, r2
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d01d      	beq.n	800b7f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b7b6:	4a24      	ldr	r2, [pc, #144]	; (800b848 <chk_lock+0xb4>)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	011b      	lsls	r3, r3, #4
 800b7bc:	4413      	add	r3, r2
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d116      	bne.n	800b7f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b7c8:	4a1f      	ldr	r2, [pc, #124]	; (800b848 <chk_lock+0xb4>)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	011b      	lsls	r3, r3, #4
 800b7ce:	4413      	add	r3, r2
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d10c      	bne.n	800b7f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b7dc:	4a1a      	ldr	r2, [pc, #104]	; (800b848 <chk_lock+0xb4>)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	011b      	lsls	r3, r3, #4
 800b7e2:	4413      	add	r3, r2
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d102      	bne.n	800b7f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b7f0:	e007      	b.n	800b802 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d9d2      	bls.n	800b7a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2b02      	cmp	r3, #2
 800b806:	d109      	bne.n	800b81c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d102      	bne.n	800b814 <chk_lock+0x80>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d101      	bne.n	800b818 <chk_lock+0x84>
 800b814:	2300      	movs	r3, #0
 800b816:	e010      	b.n	800b83a <chk_lock+0xa6>
 800b818:	2312      	movs	r3, #18
 800b81a:	e00e      	b.n	800b83a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d108      	bne.n	800b834 <chk_lock+0xa0>
 800b822:	4a09      	ldr	r2, [pc, #36]	; (800b848 <chk_lock+0xb4>)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	4413      	add	r3, r2
 800b82a:	330c      	adds	r3, #12
 800b82c:	881b      	ldrh	r3, [r3, #0]
 800b82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b832:	d101      	bne.n	800b838 <chk_lock+0xa4>
 800b834:	2310      	movs	r3, #16
 800b836:	e000      	b.n	800b83a <chk_lock+0xa6>
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	200000b8 	.word	0x200000b8

0800b84c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b852:	2300      	movs	r3, #0
 800b854:	607b      	str	r3, [r7, #4]
 800b856:	e002      	b.n	800b85e <enq_lock+0x12>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3301      	adds	r3, #1
 800b85c:	607b      	str	r3, [r7, #4]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d806      	bhi.n	800b872 <enq_lock+0x26>
 800b864:	4a09      	ldr	r2, [pc, #36]	; (800b88c <enq_lock+0x40>)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	011b      	lsls	r3, r3, #4
 800b86a:	4413      	add	r3, r2
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1f2      	bne.n	800b858 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b02      	cmp	r3, #2
 800b876:	bf14      	ite	ne
 800b878:	2301      	movne	r3, #1
 800b87a:	2300      	moveq	r3, #0
 800b87c:	b2db      	uxtb	r3, r3
}
 800b87e:	4618      	mov	r0, r3
 800b880:	370c      	adds	r7, #12
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	200000b8 	.word	0x200000b8

0800b890 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	e01f      	b.n	800b8e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b8a0:	4a41      	ldr	r2, [pc, #260]	; (800b9a8 <inc_lock+0x118>)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	4413      	add	r3, r2
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d113      	bne.n	800b8da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b8b2:	4a3d      	ldr	r2, [pc, #244]	; (800b9a8 <inc_lock+0x118>)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	011b      	lsls	r3, r3, #4
 800b8b8:	4413      	add	r3, r2
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d109      	bne.n	800b8da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b8c6:	4a38      	ldr	r2, [pc, #224]	; (800b9a8 <inc_lock+0x118>)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	011b      	lsls	r3, r3, #4
 800b8cc:	4413      	add	r3, r2
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d006      	beq.n	800b8e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	60fb      	str	r3, [r7, #12]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d9dc      	bls.n	800b8a0 <inc_lock+0x10>
 800b8e6:	e000      	b.n	800b8ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b8e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d132      	bne.n	800b956 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	e002      	b.n	800b8fc <inc_lock+0x6c>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d806      	bhi.n	800b910 <inc_lock+0x80>
 800b902:	4a29      	ldr	r2, [pc, #164]	; (800b9a8 <inc_lock+0x118>)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	4413      	add	r3, r2
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1f2      	bne.n	800b8f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b02      	cmp	r3, #2
 800b914:	d101      	bne.n	800b91a <inc_lock+0x8a>
 800b916:	2300      	movs	r3, #0
 800b918:	e040      	b.n	800b99c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	4922      	ldr	r1, [pc, #136]	; (800b9a8 <inc_lock+0x118>)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	011b      	lsls	r3, r3, #4
 800b924:	440b      	add	r3, r1
 800b926:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	491e      	ldr	r1, [pc, #120]	; (800b9a8 <inc_lock+0x118>)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	011b      	lsls	r3, r3, #4
 800b932:	440b      	add	r3, r1
 800b934:	3304      	adds	r3, #4
 800b936:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b93c:	491a      	ldr	r1, [pc, #104]	; (800b9a8 <inc_lock+0x118>)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	011b      	lsls	r3, r3, #4
 800b942:	440b      	add	r3, r1
 800b944:	3308      	adds	r3, #8
 800b946:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b948:	4a17      	ldr	r2, [pc, #92]	; (800b9a8 <inc_lock+0x118>)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	011b      	lsls	r3, r3, #4
 800b94e:	4413      	add	r3, r2
 800b950:	330c      	adds	r3, #12
 800b952:	2200      	movs	r2, #0
 800b954:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d009      	beq.n	800b970 <inc_lock+0xe0>
 800b95c:	4a12      	ldr	r2, [pc, #72]	; (800b9a8 <inc_lock+0x118>)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	011b      	lsls	r3, r3, #4
 800b962:	4413      	add	r3, r2
 800b964:	330c      	adds	r3, #12
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <inc_lock+0xe0>
 800b96c:	2300      	movs	r3, #0
 800b96e:	e015      	b.n	800b99c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d108      	bne.n	800b988 <inc_lock+0xf8>
 800b976:	4a0c      	ldr	r2, [pc, #48]	; (800b9a8 <inc_lock+0x118>)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	011b      	lsls	r3, r3, #4
 800b97c:	4413      	add	r3, r2
 800b97e:	330c      	adds	r3, #12
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	3301      	adds	r3, #1
 800b984:	b29a      	uxth	r2, r3
 800b986:	e001      	b.n	800b98c <inc_lock+0xfc>
 800b988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b98c:	4906      	ldr	r1, [pc, #24]	; (800b9a8 <inc_lock+0x118>)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	011b      	lsls	r3, r3, #4
 800b992:	440b      	add	r3, r1
 800b994:	330c      	adds	r3, #12
 800b996:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3301      	adds	r3, #1
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3714      	adds	r7, #20
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	200000b8 	.word	0x200000b8

0800b9ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	607b      	str	r3, [r7, #4]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d825      	bhi.n	800ba0c <dec_lock+0x60>
		n = Files[i].ctr;
 800b9c0:	4a17      	ldr	r2, [pc, #92]	; (800ba20 <dec_lock+0x74>)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	011b      	lsls	r3, r3, #4
 800b9c6:	4413      	add	r3, r2
 800b9c8:	330c      	adds	r3, #12
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b9ce:	89fb      	ldrh	r3, [r7, #14]
 800b9d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9d4:	d101      	bne.n	800b9da <dec_lock+0x2e>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b9da:	89fb      	ldrh	r3, [r7, #14]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <dec_lock+0x3a>
 800b9e0:	89fb      	ldrh	r3, [r7, #14]
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b9e6:	4a0e      	ldr	r2, [pc, #56]	; (800ba20 <dec_lock+0x74>)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	4413      	add	r3, r2
 800b9ee:	330c      	adds	r3, #12
 800b9f0:	89fa      	ldrh	r2, [r7, #14]
 800b9f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b9f4:	89fb      	ldrh	r3, [r7, #14]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d105      	bne.n	800ba06 <dec_lock+0x5a>
 800b9fa:	4a09      	ldr	r2, [pc, #36]	; (800ba20 <dec_lock+0x74>)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	4413      	add	r3, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	737b      	strb	r3, [r7, #13]
 800ba0a:	e001      	b.n	800ba10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ba10:	7b7b      	ldrb	r3, [r7, #13]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	200000b8 	.word	0x200000b8

0800ba24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	60fb      	str	r3, [r7, #12]
 800ba30:	e010      	b.n	800ba54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ba32:	4a0d      	ldr	r2, [pc, #52]	; (800ba68 <clear_lock+0x44>)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	011b      	lsls	r3, r3, #4
 800ba38:	4413      	add	r3, r2
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d105      	bne.n	800ba4e <clear_lock+0x2a>
 800ba42:	4a09      	ldr	r2, [pc, #36]	; (800ba68 <clear_lock+0x44>)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	011b      	lsls	r3, r3, #4
 800ba48:	4413      	add	r3, r2
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3301      	adds	r3, #1
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d9eb      	bls.n	800ba32 <clear_lock+0xe>
	}
}
 800ba5a:	bf00      	nop
 800ba5c:	bf00      	nop
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	200000b8 	.word	0x200000b8

0800ba6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ba74:	2300      	movs	r3, #0
 800ba76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	78db      	ldrb	r3, [r3, #3]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d034      	beq.n	800baea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	7858      	ldrb	r0, [r3, #1]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba90:	2301      	movs	r3, #1
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	f7ff fbfc 	bl	800b290 <disk_write>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	73fb      	strb	r3, [r7, #15]
 800baa2:	e022      	b.n	800baea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	1ad2      	subs	r2, r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d217      	bcs.n	800baea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	789b      	ldrb	r3, [r3, #2]
 800babe:	613b      	str	r3, [r7, #16]
 800bac0:	e010      	b.n	800bae4 <sync_window+0x78>
					wsect += fs->fsize;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	4413      	add	r3, r2
 800baca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	7858      	ldrb	r0, [r3, #1]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bad6:	2301      	movs	r3, #1
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	f7ff fbd9 	bl	800b290 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	3b01      	subs	r3, #1
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d8eb      	bhi.n	800bac2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800baea:	7bfb      	ldrb	r3, [r7, #15]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d01b      	beq.n	800bb44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7ff ffad 	bl	800ba6c <sync_window>
 800bb12:	4603      	mov	r3, r0
 800bb14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d113      	bne.n	800bb44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	7858      	ldrb	r0, [r3, #1]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bb26:	2301      	movs	r3, #1
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	f7ff fb91 	bl	800b250 <disk_read>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bb34:	f04f 33ff 	mov.w	r3, #4294967295
 800bb38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff ff87 	bl	800ba6c <sync_window>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bb62:	7bfb      	ldrb	r3, [r7, #15]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d159      	bne.n	800bc1c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d149      	bne.n	800bc04 <sync_fs+0xb4>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	791b      	ldrb	r3, [r3, #4]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d145      	bne.n	800bc04 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	899b      	ldrh	r3, [r3, #12]
 800bb82:	461a      	mov	r2, r3
 800bb84:	2100      	movs	r1, #0
 800bb86:	f7ff fda7 	bl	800b6d8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	333c      	adds	r3, #60	; 0x3c
 800bb8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb92:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff fcae 	bl	800b4f8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	333c      	adds	r3, #60	; 0x3c
 800bba0:	4921      	ldr	r1, [pc, #132]	; (800bc28 <sync_fs+0xd8>)
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fcc3 	bl	800b52e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	333c      	adds	r3, #60	; 0x3c
 800bbac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bbb0:	491e      	ldr	r1, [pc, #120]	; (800bc2c <sync_fs+0xdc>)
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff fcbb 	bl	800b52e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	333c      	adds	r3, #60	; 0x3c
 800bbbc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	f7ff fcb1 	bl	800b52e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	333c      	adds	r3, #60	; 0x3c
 800bbd0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4610      	mov	r0, r2
 800bbdc:	f7ff fca7 	bl	800b52e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe4:	1c5a      	adds	r2, r3, #1
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	7858      	ldrb	r0, [r3, #1]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	f7ff fb49 	bl	800b290 <disk_write>
			fs->fsi_flag = 0;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	785b      	ldrb	r3, [r3, #1]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff fb5f 	bl	800b2d0 <disk_ioctl>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <sync_fs+0xcc>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	41615252 	.word	0x41615252
 800bc2c:	61417272 	.word	0x61417272

0800bc30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	3b02      	subs	r3, #2
 800bc3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a1b      	ldr	r3, [r3, #32]
 800bc44:	3b02      	subs	r3, #2
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d301      	bcc.n	800bc50 <clust2sect+0x20>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	e008      	b.n	800bc62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	895b      	ldrh	r3, [r3, #10]
 800bc54:	461a      	mov	r2, r3
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	fb03 f202 	mul.w	r2, r3, r2
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	4413      	add	r3, r2
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
	...

0800bc70 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bc70:	b5b0      	push	{r4, r5, r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d904      	bls.n	800bc90 <get_fat+0x20>
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d302      	bcc.n	800bc96 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bc90:	2301      	movs	r3, #1
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	e139      	b.n	800bf0a <get_fat+0x29a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bc96:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9a:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	f200 8125 	bhi.w	800bef2 <get_fat+0x282>
 800bca8:	a201      	add	r2, pc, #4	; (adr r2, 800bcb0 <get_fat+0x40>)
 800bcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcae:	bf00      	nop
 800bcb0:	0800bcc1 	.word	0x0800bcc1
 800bcb4:	0800bd6f 	.word	0x0800bd6f
 800bcb8:	0800bdbb 	.word	0x0800bdbb
 800bcbc:	0800be0b 	.word	0x0800be0b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	085b      	lsrs	r3, r3, #1
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	4413      	add	r3, r2
 800bccc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	899b      	ldrh	r3, [r3, #12]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcde:	4413      	add	r3, r2
 800bce0:	4619      	mov	r1, r3
 800bce2:	69b8      	ldr	r0, [r7, #24]
 800bce4:	f7ff ff06 	bl	800baf4 <move_window>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f040 8104 	bne.w	800bef8 <get_fat+0x288>
			wc = fs->win[bc++ % SS(fs)];
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	60fa      	str	r2, [r7, #12]
 800bcf6:	69ba      	ldr	r2, [r7, #24]
 800bcf8:	8992      	ldrh	r2, [r2, #12]
 800bcfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcfe:	fb02 f201 	mul.w	r2, r2, r1
 800bd02:	1a9b      	subs	r3, r3, r2
 800bd04:	69ba      	ldr	r2, [r7, #24]
 800bd06:	4413      	add	r3, r2
 800bd08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	899b      	ldrh	r3, [r3, #12]
 800bd16:	4619      	mov	r1, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd1e:	4413      	add	r3, r2
 800bd20:	4619      	mov	r1, r3
 800bd22:	69b8      	ldr	r0, [r7, #24]
 800bd24:	f7ff fee6 	bl	800baf4 <move_window>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 80e6 	bne.w	800befc <get_fat+0x28c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	899b      	ldrh	r3, [r3, #12]
 800bd34:	461a      	mov	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd3c:	fb02 f201 	mul.w	r2, r2, r1
 800bd40:	1a9b      	subs	r3, r3, r2
 800bd42:	69ba      	ldr	r2, [r7, #24]
 800bd44:	4413      	add	r3, r2
 800bd46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd4a:	021b      	lsls	r3, r3, #8
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <get_fat+0xf4>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	091b      	lsrs	r3, r3, #4
 800bd62:	e002      	b.n	800bd6a <get_fat+0xfa>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd6a:	61fb      	str	r3, [r7, #28]
			break;
 800bd6c:	e0cd      	b.n	800bf0a <get_fat+0x29a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	899b      	ldrh	r3, [r3, #12]
 800bd76:	085b      	lsrs	r3, r3, #1
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd82:	4413      	add	r3, r2
 800bd84:	4619      	mov	r1, r3
 800bd86:	69b8      	ldr	r0, [r7, #24]
 800bd88:	f7ff feb4 	bl	800baf4 <move_window>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f040 80b6 	bne.w	800bf00 <get_fat+0x290>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	69ba      	ldr	r2, [r7, #24]
 800bda0:	8992      	ldrh	r2, [r2, #12]
 800bda2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bda6:	fb02 f200 	mul.w	r2, r2, r0
 800bdaa:	1a9b      	subs	r3, r3, r2
 800bdac:	440b      	add	r3, r1
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff faac 	bl	800b30c <ld_word>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	61fb      	str	r3, [r7, #28]
			break;
 800bdb8:	e0a7      	b.n	800bf0a <get_fat+0x29a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	899b      	ldrh	r3, [r3, #12]
 800bdc2:	089b      	lsrs	r3, r3, #2
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdce:	4413      	add	r3, r2
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	69b8      	ldr	r0, [r7, #24]
 800bdd4:	f7ff fe8e 	bl	800baf4 <move_window>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f040 8092 	bne.w	800bf04 <get_fat+0x294>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	8992      	ldrh	r2, [r2, #12]
 800bdee:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdf2:	fb02 f200 	mul.w	r2, r2, r0
 800bdf6:	1a9b      	subs	r3, r3, r2
 800bdf8:	440b      	add	r3, r1
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff fa9e 	bl	800b33c <ld_dword>
 800be00:	4603      	mov	r3, r0
 800be02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800be06:	61fb      	str	r3, [r7, #28]
			break;
 800be08:	e07f      	b.n	800bf0a <get_fat+0x29a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be10:	4313      	orrs	r3, r2
 800be12:	d06e      	beq.n	800bef2 <get_fat+0x282>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	683a      	ldr	r2, [r7, #0]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be24:	f112 34ff 	adds.w	r4, r2, #4294967295
 800be28:	f143 35ff 	adc.w	r5, r3, #4294967295
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	899b      	ldrh	r3, [r3, #12]
 800be30:	b29a      	uxth	r2, r3
 800be32:	f04f 0300 	mov.w	r3, #0
 800be36:	4620      	mov	r0, r4
 800be38:	4629      	mov	r1, r5
 800be3a:	f7f4 fd4f 	bl	80008dc <__aeabi_uldivmod>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	895b      	ldrh	r3, [r3, #10]
 800be46:	fbb2 f3f3 	udiv	r3, r2, r3
 800be4a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	79db      	ldrb	r3, [r3, #7]
 800be50:	2b02      	cmp	r3, #2
 800be52:	d10e      	bne.n	800be72 <get_fat+0x202>
					if (cofs <= clen) {
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d80a      	bhi.n	800be72 <get_fat+0x202>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	429a      	cmp	r2, r3
 800be62:	d002      	beq.n	800be6a <get_fat+0x1fa>
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	3301      	adds	r3, #1
 800be68:	e001      	b.n	800be6e <get_fat+0x1fe>
 800be6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be6e:	61fb      	str	r3, [r7, #28]
						break;
 800be70:	e04b      	b.n	800bf0a <get_fat+0x29a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	79db      	ldrb	r3, [r3, #7]
 800be76:	2b03      	cmp	r3, #3
 800be78:	d108      	bne.n	800be8c <get_fat+0x21c>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	429a      	cmp	r2, r3
 800be82:	d203      	bcs.n	800be8c <get_fat+0x21c>
					val = clst + 1; 	/* Generate the value */
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	3301      	adds	r3, #1
 800be88:	61fb      	str	r3, [r7, #28]
					break;
 800be8a:	e03e      	b.n	800bf0a <get_fat+0x29a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	79db      	ldrb	r3, [r3, #7]
 800be90:	2b02      	cmp	r3, #2
 800be92:	d02e      	beq.n	800bef2 <get_fat+0x282>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	69db      	ldr	r3, [r3, #28]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <get_fat+0x234>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800be9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bea0:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800bea2:	e032      	b.n	800bf0a <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	899b      	ldrh	r3, [r3, #12]
 800beac:	089b      	lsrs	r3, r3, #2
 800beae:	b29b      	uxth	r3, r3
 800beb0:	4619      	mov	r1, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	fbb3 f3f1 	udiv	r3, r3, r1
 800beb8:	4413      	add	r3, r2
 800beba:	4619      	mov	r1, r3
 800bebc:	69b8      	ldr	r0, [r7, #24]
 800bebe:	f7ff fe19 	bl	800baf4 <move_window>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d11f      	bne.n	800bf08 <get_fat+0x298>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	8992      	ldrh	r2, [r2, #12]
 800bed6:	fbb3 f0f2 	udiv	r0, r3, r2
 800beda:	fb02 f200 	mul.w	r2, r2, r0
 800bede:	1a9b      	subs	r3, r3, r2
 800bee0:	440b      	add	r3, r1
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7ff fa2a 	bl	800b33c <ld_dword>
 800bee8:	4603      	mov	r3, r0
 800beea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800beee:	61fb      	str	r3, [r7, #28]
					break;
 800bef0:	e00b      	b.n	800bf0a <get_fat+0x29a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bef2:	2301      	movs	r3, #1
 800bef4:	61fb      	str	r3, [r7, #28]
 800bef6:	e008      	b.n	800bf0a <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bef8:	bf00      	nop
 800befa:	e006      	b.n	800bf0a <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800befc:	bf00      	nop
 800befe:	e004      	b.n	800bf0a <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf00:	bf00      	nop
 800bf02:	e002      	b.n	800bf0a <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf04:	bf00      	nop
 800bf06:	e000      	b.n	800bf0a <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf08:	bf00      	nop
		}
	}

	return val;
 800bf0a:	69fb      	ldr	r3, [r7, #28]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3720      	adds	r7, #32
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bdb0      	pop	{r4, r5, r7, pc}

0800bf14 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf14:	b590      	push	{r4, r7, lr}
 800bf16:	b089      	sub	sp, #36	; 0x24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf20:	2302      	movs	r3, #2
 800bf22:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	f240 8106 	bls.w	800c138 <put_fat+0x224>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	f080 8100 	bcs.w	800c138 <put_fat+0x224>
		switch (fs->fs_type) {
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b04      	cmp	r3, #4
 800bf3e:	f300 8104 	bgt.w	800c14a <put_fat+0x236>
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	f280 80b3 	bge.w	800c0ae <put_fat+0x19a>
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d003      	beq.n	800bf54 <put_fat+0x40>
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	f000 8083 	beq.w	800c058 <put_fat+0x144>
 800bf52:	e0fa      	b.n	800c14a <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	61bb      	str	r3, [r7, #24]
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	085b      	lsrs	r3, r3, #1
 800bf5c:	69ba      	ldr	r2, [r7, #24]
 800bf5e:	4413      	add	r3, r2
 800bf60:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	899b      	ldrh	r3, [r3, #12]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf72:	4413      	add	r3, r2
 800bf74:	4619      	mov	r1, r3
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7ff fdbc 	bl	800baf4 <move_window>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf80:	7ffb      	ldrb	r3, [r7, #31]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f040 80da 	bne.w	800c13c <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	1c5a      	adds	r2, r3, #1
 800bf92:	61ba      	str	r2, [r7, #24]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	8992      	ldrh	r2, [r2, #12]
 800bf98:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf9c:	fb02 f200 	mul.w	r2, r2, r0
 800bfa0:	1a9b      	subs	r3, r3, r2
 800bfa2:	440b      	add	r3, r1
 800bfa4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00d      	beq.n	800bfcc <put_fat+0xb8>
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	b25b      	sxtb	r3, r3
 800bfb6:	f003 030f 	and.w	r3, r3, #15
 800bfba:	b25a      	sxtb	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	b25b      	sxtb	r3, r3
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	e001      	b.n	800bfd0 <put_fat+0xbc>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	899b      	ldrh	r3, [r3, #12]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfea:	4413      	add	r3, r2
 800bfec:	4619      	mov	r1, r3
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f7ff fd80 	bl	800baf4 <move_window>
 800bff4:	4603      	mov	r3, r0
 800bff6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bff8:	7ffb      	ldrb	r3, [r7, #31]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f040 80a0 	bne.w	800c140 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	899b      	ldrh	r3, [r3, #12]
 800c00a:	461a      	mov	r2, r3
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c012:	fb02 f200 	mul.w	r2, r2, r0
 800c016:	1a9b      	subs	r3, r3, r2
 800c018:	440b      	add	r3, r1
 800c01a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <put_fat+0x11a>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	091b      	lsrs	r3, r3, #4
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	e00e      	b.n	800c04c <put_fat+0x138>
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	b25b      	sxtb	r3, r3
 800c034:	f023 030f 	bic.w	r3, r3, #15
 800c038:	b25a      	sxtb	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	0a1b      	lsrs	r3, r3, #8
 800c03e:	b25b      	sxtb	r3, r3
 800c040:	f003 030f 	and.w	r3, r3, #15
 800c044:	b25b      	sxtb	r3, r3
 800c046:	4313      	orrs	r3, r2
 800c048:	b25b      	sxtb	r3, r3
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2201      	movs	r2, #1
 800c054:	70da      	strb	r2, [r3, #3]
			break;
 800c056:	e078      	b.n	800c14a <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	899b      	ldrh	r3, [r3, #12]
 800c060:	085b      	lsrs	r3, r3, #1
 800c062:	b29b      	uxth	r3, r3
 800c064:	4619      	mov	r1, r3
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	fbb3 f3f1 	udiv	r3, r3, r1
 800c06c:	4413      	add	r3, r2
 800c06e:	4619      	mov	r1, r3
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f7ff fd3f 	bl	800baf4 <move_window>
 800c076:	4603      	mov	r3, r0
 800c078:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c07a:	7ffb      	ldrb	r3, [r7, #31]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d161      	bne.n	800c144 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	8992      	ldrh	r2, [r2, #12]
 800c08e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c092:	fb02 f200 	mul.w	r2, r2, r0
 800c096:	1a9b      	subs	r3, r3, r2
 800c098:	440b      	add	r3, r1
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	b292      	uxth	r2, r2
 800c09e:	4611      	mov	r1, r2
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff fa29 	bl	800b4f8 <st_word>
			fs->wflag = 1;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	70da      	strb	r2, [r3, #3]
			break;
 800c0ac:	e04d      	b.n	800c14a <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	899b      	ldrh	r3, [r3, #12]
 800c0b6:	089b      	lsrs	r3, r3, #2
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0c2:	4413      	add	r3, r2
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7ff fd14 	bl	800baf4 <move_window>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0d0:	7ffb      	ldrb	r3, [r7, #31]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d138      	bne.n	800c148 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	2b04      	cmp	r3, #4
 800c0dc:	d017      	beq.n	800c10e <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	8992      	ldrh	r2, [r2, #12]
 800c0f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0f6:	fb02 f200 	mul.w	r2, r2, r0
 800c0fa:	1a9b      	subs	r3, r3, r2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff f91c 	bl	800b33c <ld_dword>
 800c104:	4603      	mov	r3, r0
 800c106:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c10a:	4323      	orrs	r3, r4
 800c10c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	8992      	ldrh	r2, [r2, #12]
 800c11c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c120:	fb02 f200 	mul.w	r2, r2, r0
 800c124:	1a9b      	subs	r3, r3, r2
 800c126:	440b      	add	r3, r1
 800c128:	6879      	ldr	r1, [r7, #4]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff f9ff 	bl	800b52e <st_dword>
			fs->wflag = 1;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	70da      	strb	r2, [r3, #3]
			break;
 800c136:	e008      	b.n	800c14a <put_fat+0x236>
		}
	}
 800c138:	bf00      	nop
 800c13a:	e006      	b.n	800c14a <put_fat+0x236>
			if (res != FR_OK) break;
 800c13c:	bf00      	nop
 800c13e:	e004      	b.n	800c14a <put_fat+0x236>
			if (res != FR_OK) break;
 800c140:	bf00      	nop
 800c142:	e002      	b.n	800c14a <put_fat+0x236>
			if (res != FR_OK) break;
 800c144:	bf00      	nop
 800c146:	e000      	b.n	800c14a <put_fat+0x236>
			if (res != FR_OK) break;
 800c148:	bf00      	nop
	return res;
 800c14a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3724      	adds	r7, #36	; 0x24
 800c150:	46bd      	mov	sp, r7
 800c152:	bd90      	pop	{r4, r7, pc}

0800c154 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b08a      	sub	sp, #40	; 0x28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	3b02      	subs	r3, #2
 800c164:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	3b02      	subs	r3, #2
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d301      	bcc.n	800c176 <find_bitmap+0x22>
 800c172:	2300      	movs	r3, #0
 800c174:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	61fb      	str	r3, [r7, #28]
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	61bb      	str	r3, [r7, #24]
 800c17e:	2300      	movs	r3, #0
 800c180:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	08db      	lsrs	r3, r3, #3
 800c18a:	68f9      	ldr	r1, [r7, #12]
 800c18c:	8989      	ldrh	r1, [r1, #12]
 800c18e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c192:	4413      	add	r3, r2
 800c194:	4619      	mov	r1, r3
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff fcac 	bl	800baf4 <move_window>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d002      	beq.n	800c1a8 <find_bitmap+0x54>
 800c1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a6:	e058      	b.n	800c25a <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	08db      	lsrs	r3, r3, #3
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	8992      	ldrh	r2, [r2, #12]
 800c1b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1b4:	fb02 f201 	mul.w	r2, r2, r1
 800c1b8:	1a9b      	subs	r3, r3, r2
 800c1ba:	623b      	str	r3, [r7, #32]
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	f003 0307 	and.w	r3, r3, #7
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	333c      	adds	r3, #60	; 0x3c
 800c1d4:	781a      	ldrb	r2, [r3, #0]
 800c1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1da:	4013      	ands	r3, r2
 800c1dc:	74fb      	strb	r3, [r7, #19]
 800c1de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	61fb      	str	r3, [r7, #28]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6a1b      	ldr	r3, [r3, #32]
 800c1f2:	3b02      	subs	r3, #2
 800c1f4:	69fa      	ldr	r2, [r7, #28]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d307      	bcc.n	800c20a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	61fb      	str	r3, [r7, #28]
 800c1fe:	2300      	movs	r3, #0
 800c200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	899b      	ldrh	r3, [r3, #12]
 800c208:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800c20a:	7cfb      	ldrb	r3, [r7, #19]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d109      	bne.n	800c224 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	3301      	adds	r3, #1
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d106      	bne.n	800c22c <find_bitmap+0xd8>
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	3302      	adds	r3, #2
 800c222:	e01a      	b.n	800c25a <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	61bb      	str	r3, [r7, #24]
 800c228:	2300      	movs	r3, #0
 800c22a:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800c22c:	69fa      	ldr	r2, [r7, #28]
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	429a      	cmp	r2, r3
 800c232:	d101      	bne.n	800c238 <find_bitmap+0xe4>
 800c234:	2300      	movs	r3, #0
 800c236:	e010      	b.n	800c25a <find_bitmap+0x106>
			} while (bm);
 800c238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1c5      	bne.n	800c1cc <find_bitmap+0x78>
			bm = 1;
 800c240:	2301      	movs	r3, #1
 800c242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	3301      	adds	r3, #1
 800c24a:	623b      	str	r3, [r7, #32]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	899b      	ldrh	r3, [r3, #12]
 800c250:	461a      	mov	r2, r3
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	4293      	cmp	r3, r2
 800c256:	d3b9      	bcc.n	800c1cc <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800c258:	e793      	b.n	800c182 <find_bitmap+0x2e>
	}
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3728      	adds	r7, #40	; 0x28
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b088      	sub	sp, #32
 800c266:	af00      	add	r7, sp, #0
 800c268:	60f8      	str	r0, [r7, #12]
 800c26a:	60b9      	str	r1, [r7, #8]
 800c26c:	607a      	str	r2, [r7, #4]
 800c26e:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	3b02      	subs	r3, #2
 800c274:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	08db      	lsrs	r3, r3, #3
 800c27e:	68f9      	ldr	r1, [r7, #12]
 800c280:	8989      	ldrh	r1, [r1, #12]
 800c282:	fbb3 f3f1 	udiv	r3, r3, r1
 800c286:	4413      	add	r3, r2
 800c288:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	08db      	lsrs	r3, r3, #3
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	8992      	ldrh	r2, [r2, #12]
 800c292:	fbb3 f1f2 	udiv	r1, r3, r2
 800c296:	fb02 f201 	mul.w	r2, r2, r1
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	f003 0307 	and.w	r3, r3, #7
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2aa:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	1c5a      	adds	r2, r3, #1
 800c2b0:	617a      	str	r2, [r7, #20]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f7ff fc1d 	bl	800baf4 <move_window>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <change_bitmap+0x62>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e03f      	b.n	800c344 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	333c      	adds	r3, #60	; 0x3c
 800c2cc:	781a      	ldrb	r2, [r3, #0]
 800c2ce:	7ffb      	ldrb	r3, [r7, #31]
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	bf14      	ite	ne
 800c2d8:	2301      	movne	r3, #1
 800c2da:	2300      	moveq	r3, #0
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	461a      	mov	r2, r3
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d101      	bne.n	800c2ea <change_bitmap+0x88>
 800c2e6:	2302      	movs	r3, #2
 800c2e8:	e02c      	b.n	800c344 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	333c      	adds	r3, #60	; 0x3c
 800c2f2:	781a      	ldrb	r2, [r3, #0]
 800c2f4:	7ffb      	ldrb	r3, [r7, #31]
 800c2f6:	4053      	eors	r3, r2
 800c2f8:	b2d9      	uxtb	r1, r3
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	4413      	add	r3, r2
 800c300:	333c      	adds	r3, #60	; 0x3c
 800c302:	460a      	mov	r2, r1
 800c304:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2201      	movs	r2, #1
 800c30a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	3b01      	subs	r3, #1
 800c310:	607b      	str	r3, [r7, #4]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <change_bitmap+0xba>
 800c318:	2300      	movs	r3, #0
 800c31a:	e013      	b.n	800c344 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800c31c:	7ffb      	ldrb	r3, [r7, #31]
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	77fb      	strb	r3, [r7, #31]
 800c322:	7ffb      	ldrb	r3, [r7, #31]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1cd      	bne.n	800c2c4 <change_bitmap+0x62>
			bm = 1;
 800c328:	2301      	movs	r3, #1
 800c32a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	3301      	adds	r3, #1
 800c330:	61bb      	str	r3, [r7, #24]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	899b      	ldrh	r3, [r3, #12]
 800c336:	461a      	mov	r2, r3
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d3c2      	bcc.n	800c2c4 <change_bitmap+0x62>
		i = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c342:	e7b3      	b.n	800c2ac <change_bitmap+0x4a>
	}
}
 800c344:	4618      	mov	r0, r3
 800c346:	3720      	adds	r7, #32
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	79db      	ldrb	r3, [r3, #7]
 800c358:	2b03      	cmp	r3, #3
 800c35a:	d121      	bne.n	800c3a0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	617b      	str	r3, [r7, #20]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	613b      	str	r3, [r7, #16]
 800c368:	e014      	b.n	800c394 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6818      	ldr	r0, [r3, #0]
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	3301      	adds	r3, #1
 800c372:	461a      	mov	r2, r3
 800c374:	6979      	ldr	r1, [r7, #20]
 800c376:	f7ff fdcd 	bl	800bf14 <put_fat>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <fill_first_frag+0x3c>
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	e00c      	b.n	800c3a2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	3301      	adds	r3, #1
 800c38c:	617b      	str	r3, [r7, #20]
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	3b01      	subs	r3, #1
 800c392:	613b      	str	r3, [r7, #16]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e7      	bne.n	800c36a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b086      	sub	sp, #24
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800c3b6:	e020      	b.n	800c3fa <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6818      	ldr	r0, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	69db      	ldr	r3, [r3, #28]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	1c59      	adds	r1, r3, #1
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d905      	bls.n	800c3da <fill_last_frag+0x30>
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	3302      	adds	r3, #2
 800c3d8:	e000      	b.n	800c3dc <fill_last_frag+0x32>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	f7ff fd99 	bl	800bf14 <put_fat>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <fill_last_frag+0x46>
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	e009      	b.n	800c404 <fill_last_frag+0x5a>
		obj->n_frag--;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	69db      	ldr	r3, [r3, #28]
 800c3f4:	1e5a      	subs	r2, r3, #1
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1da      	bne.n	800c3b8 <fill_last_frag+0xe>
	}
	return FR_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08a      	sub	sp, #40	; 0x28
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	627b      	str	r3, [r7, #36]	; 0x24
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d904      	bls.n	800c43a <remove_chain+0x2e>
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	6a1b      	ldr	r3, [r3, #32]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	429a      	cmp	r2, r3
 800c438:	d301      	bcc.n	800c43e <remove_chain+0x32>
 800c43a:	2302      	movs	r3, #2
 800c43c:	e096      	b.n	800c56c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d014      	beq.n	800c46e <remove_chain+0x62>
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b04      	cmp	r3, #4
 800c44a:	d103      	bne.n	800c454 <remove_chain+0x48>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	79db      	ldrb	r3, [r3, #7]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d00c      	beq.n	800c46e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c454:	f04f 32ff 	mov.w	r2, #4294967295
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	69b8      	ldr	r0, [r7, #24]
 800c45c:	f7ff fd5a 	bl	800bf14 <put_fat>
 800c460:	4603      	mov	r3, r0
 800c462:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c464:	7ffb      	ldrb	r3, [r7, #31]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d001      	beq.n	800c46e <remove_chain+0x62>
 800c46a:	7ffb      	ldrb	r3, [r7, #31]
 800c46c:	e07e      	b.n	800c56c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c46e:	68b9      	ldr	r1, [r7, #8]
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f7ff fbfd 	bl	800bc70 <get_fat>
 800c476:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d055      	beq.n	800c52a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d101      	bne.n	800c488 <remove_chain+0x7c>
 800c484:	2302      	movs	r3, #2
 800c486:	e071      	b.n	800c56c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48e:	d101      	bne.n	800c494 <remove_chain+0x88>
 800c490:	2301      	movs	r3, #1
 800c492:	e06b      	b.n	800c56c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	2b04      	cmp	r3, #4
 800c49a:	d00b      	beq.n	800c4b4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c49c:	2200      	movs	r2, #0
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	69b8      	ldr	r0, [r7, #24]
 800c4a2:	f7ff fd37 	bl	800bf14 <put_fat>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c4aa:	7ffb      	ldrb	r3, [r7, #31]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <remove_chain+0xa8>
 800c4b0:	7ffb      	ldrb	r3, [r7, #31]
 800c4b2:	e05b      	b.n	800c56c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	69da      	ldr	r2, [r3, #28]
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	3b02      	subs	r3, #2
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d20b      	bcs.n	800c4da <remove_chain+0xce>
			fs->free_clst++;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	791b      	ldrb	r3, [r3, #4]
 800c4d0:	f043 0301 	orr.w	r3, r3, #1
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800c4da:	6a3b      	ldr	r3, [r7, #32]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d102      	bne.n	800c4ea <remove_chain+0xde>
			ecl = nxt;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	623b      	str	r3, [r7, #32]
 800c4e8:	e017      	b.n	800c51a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d10f      	bne.n	800c512 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800c4f2:	6a3a      	ldr	r2, [r7, #32]
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4fe:	69b8      	ldr	r0, [r7, #24]
 800c500:	f7ff feaf 	bl	800c262 <change_bitmap>
 800c504:	4603      	mov	r3, r0
 800c506:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800c508:	7ffb      	ldrb	r3, [r7, #31]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <remove_chain+0x106>
 800c50e:	7ffb      	ldrb	r3, [r7, #31]
 800c510:	e02c      	b.n	800c56c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	623b      	str	r3, [r7, #32]
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	429a      	cmp	r2, r3
 800c526:	d3a2      	bcc.n	800c46e <remove_chain+0x62>
 800c528:	e000      	b.n	800c52c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800c52a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d11a      	bne.n	800c56a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d103      	bne.n	800c542 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	71da      	strb	r2, [r3, #7]
 800c540:	e013      	b.n	800c56a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	79db      	ldrb	r3, [r3, #7]
 800c546:	2b03      	cmp	r3, #3
 800c548:	d10f      	bne.n	800c56a <remove_chain+0x15e>
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	429a      	cmp	r2, r3
 800c552:	d30a      	bcc.n	800c56a <remove_chain+0x15e>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	4413      	add	r3, r2
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d802      	bhi.n	800c56a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2202      	movs	r2, #2
 800c568:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3728      	adds	r7, #40	; 0x28
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b088      	sub	sp, #32
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10d      	bne.n	800c5a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	699b      	ldr	r3, [r3, #24]
 800c58e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d004      	beq.n	800c5a0 <create_chain+0x2c>
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d31b      	bcc.n	800c5d8 <create_chain+0x64>
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	61bb      	str	r3, [r7, #24]
 800c5a4:	e018      	b.n	800c5d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7ff fb61 	bl	800bc70 <get_fat>
 800c5ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d801      	bhi.n	800c5ba <create_chain+0x46>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e0d9      	b.n	800c76e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c0:	d101      	bne.n	800c5c6 <create_chain+0x52>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	e0d3      	b.n	800c76e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d201      	bcs.n	800c5d4 <create_chain+0x60>
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	e0cc      	b.n	800c76e <create_chain+0x1fa>
		scl = clst;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	d164      	bne.n	800c6aa <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	69b9      	ldr	r1, [r7, #24]
 800c5e4:	6938      	ldr	r0, [r7, #16]
 800c5e6:	f7ff fdb5 	bl	800c154 <find_bitmap>
 800c5ea:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <create_chain+0x86>
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f8:	d101      	bne.n	800c5fe <create_chain+0x8a>
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	e0b7      	b.n	800c76e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800c5fe:	2301      	movs	r3, #1
 800c600:	2201      	movs	r2, #1
 800c602:	69f9      	ldr	r1, [r7, #28]
 800c604:	6938      	ldr	r0, [r7, #16]
 800c606:	f7ff fe2c 	bl	800c262 <change_bitmap>
 800c60a:	4603      	mov	r3, r0
 800c60c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800c60e:	7dfb      	ldrb	r3, [r7, #23]
 800c610:	2b02      	cmp	r3, #2
 800c612:	d101      	bne.n	800c618 <create_chain+0xa4>
 800c614:	2301      	movs	r3, #1
 800c616:	e0aa      	b.n	800c76e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800c618:	7dfb      	ldrb	r3, [r7, #23]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d102      	bne.n	800c624 <create_chain+0xb0>
 800c61e:	f04f 33ff 	mov.w	r3, #4294967295
 800c622:	e0a4      	b.n	800c76e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d103      	bne.n	800c632 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2202      	movs	r2, #2
 800c62e:	71da      	strb	r2, [r3, #7]
 800c630:	e011      	b.n	800c656 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	79db      	ldrb	r3, [r3, #7]
 800c636:	2b02      	cmp	r3, #2
 800c638:	d10d      	bne.n	800c656 <create_chain+0xe2>
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	3301      	adds	r3, #1
 800c63e:	69fa      	ldr	r2, [r7, #28]
 800c640:	429a      	cmp	r2, r3
 800c642:	d008      	beq.n	800c656 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	69ba      	ldr	r2, [r7, #24]
 800c64a:	1ad2      	subs	r2, r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2203      	movs	r2, #3
 800c654:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	79db      	ldrb	r3, [r3, #7]
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d064      	beq.n	800c728 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	3301      	adds	r3, #1
 800c662:	69fa      	ldr	r2, [r7, #28]
 800c664:	429a      	cmp	r2, r3
 800c666:	d10b      	bne.n	800c680 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	69db      	ldr	r3, [r3, #28]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d003      	beq.n	800c678 <create_chain+0x104>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	69db      	ldr	r3, [r3, #28]
 800c674:	3301      	adds	r3, #1
 800c676:	e000      	b.n	800c67a <create_chain+0x106>
 800c678:	2302      	movs	r3, #2
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	61d3      	str	r3, [r2, #28]
 800c67e:	e053      	b.n	800c728 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	69db      	ldr	r3, [r3, #28]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d102      	bne.n	800c68e <create_chain+0x11a>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800c68e:	69fa      	ldr	r2, [r7, #28]
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff fe89 	bl	800c3aa <fill_last_frag>
 800c698:	4603      	mov	r3, r0
 800c69a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800c69c:	7dfb      	ldrb	r3, [r7, #23]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d142      	bne.n	800c728 <create_chain+0x1b4>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	61da      	str	r2, [r3, #28]
 800c6a8:	e03e      	b.n	800c728 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	6a1b      	ldr	r3, [r3, #32]
 800c6b8:	69fa      	ldr	r2, [r7, #28]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d307      	bcc.n	800c6ce <create_chain+0x15a>
				ncl = 2;
 800c6be:	2302      	movs	r3, #2
 800c6c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c6c2:	69fa      	ldr	r2, [r7, #28]
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d901      	bls.n	800c6ce <create_chain+0x15a>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	e04f      	b.n	800c76e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c6ce:	69f9      	ldr	r1, [r7, #28]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7ff facd 	bl	800bc70 <get_fat>
 800c6d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00e      	beq.n	800c6fc <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d003      	beq.n	800c6ec <create_chain+0x178>
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ea:	d101      	bne.n	800c6f0 <create_chain+0x17c>
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	e03e      	b.n	800c76e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800c6f0:	69fa      	ldr	r2, [r7, #28]
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d1da      	bne.n	800c6ae <create_chain+0x13a>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	e038      	b.n	800c76e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800c6fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c702:	69f9      	ldr	r1, [r7, #28]
 800c704:	6938      	ldr	r0, [r7, #16]
 800c706:	f7ff fc05 	bl	800bf14 <put_fat>
 800c70a:	4603      	mov	r3, r0
 800c70c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c70e:	7dfb      	ldrb	r3, [r7, #23]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d109      	bne.n	800c728 <create_chain+0x1b4>
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d006      	beq.n	800c728 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c71a:	69fa      	ldr	r2, [r7, #28]
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6938      	ldr	r0, [r7, #16]
 800c720:	f7ff fbf8 	bl	800bf14 <put_fat>
 800c724:	4603      	mov	r3, r0
 800c726:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c728:	7dfb      	ldrb	r3, [r7, #23]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d116      	bne.n	800c75c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	69fa      	ldr	r2, [r7, #28]
 800c732:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	69da      	ldr	r2, [r3, #28]
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6a1b      	ldr	r3, [r3, #32]
 800c73c:	3b02      	subs	r3, #2
 800c73e:	429a      	cmp	r2, r3
 800c740:	d804      	bhi.n	800c74c <create_chain+0x1d8>
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	1e5a      	subs	r2, r3, #1
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	791b      	ldrb	r3, [r3, #4]
 800c750:	f043 0301 	orr.w	r3, r3, #1
 800c754:	b2da      	uxtb	r2, r3
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	711a      	strb	r2, [r3, #4]
 800c75a:	e007      	b.n	800c76c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d102      	bne.n	800c768 <create_chain+0x1f4>
 800c762:	f04f 33ff 	mov.w	r3, #4294967295
 800c766:	e000      	b.n	800c76a <create_chain+0x1f6>
 800c768:	2301      	movs	r3, #1
 800c76a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c76c:	69fb      	ldr	r3, [r7, #28]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3720      	adds	r7, #32
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b088      	sub	sp, #32
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c78c:	3304      	adds	r3, #4
 800c78e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	899b      	ldrh	r3, [r3, #12]
 800c794:	b29a      	uxth	r2, r3
 800c796:	f04f 0300 	mov.w	r3, #0
 800c79a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c79e:	f7f4 f89d 	bl	80008dc <__aeabi_uldivmod>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	895b      	ldrh	r3, [r3, #10]
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	f04f 0300 	mov.w	r3, #0
 800c7b4:	f7f4 f892 	bl	80008dc <__aeabi_uldivmod>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4613      	mov	r3, r2
 800c7be:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	1d1a      	adds	r2, r3, #4
 800c7c4:	61ba      	str	r2, [r7, #24]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <clmt_clust+0x5e>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	e010      	b.n	800c7f6 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d307      	bcc.n	800c7ec <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800c7dc:	69fa      	ldr	r2, [r7, #28]
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	61fb      	str	r3, [r7, #28]
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	3304      	adds	r3, #4
 800c7e8:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c7ea:	e7e9      	b.n	800c7c0 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800c7ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	4413      	add	r3, r2
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3720      	adds	r7, #32
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b086      	sub	sp, #24
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	2b04      	cmp	r3, #4
 800c814:	d102      	bne.n	800c81c <dir_sdi+0x1e>
 800c816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c81a:	e001      	b.n	800c820 <dir_sdi+0x22>
 800c81c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	429a      	cmp	r2, r3
 800c824:	d904      	bls.n	800c830 <dir_sdi+0x32>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	f003 031f 	and.w	r3, r3, #31
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <dir_sdi+0x36>
		return FR_INT_ERR;
 800c830:	2302      	movs	r3, #2
 800c832:	e074      	b.n	800c91e <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d109      	bne.n	800c85a <dir_sdi+0x5c>
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d905      	bls.n	800c85a <dir_sdi+0x5c>
		clst = fs->dirbase;
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c852:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10c      	bne.n	800c87a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	095b      	lsrs	r3, r3, #5
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	8912      	ldrh	r2, [r2, #8]
 800c868:	4293      	cmp	r3, r2
 800c86a:	d301      	bcc.n	800c870 <dir_sdi+0x72>
 800c86c:	2302      	movs	r3, #2
 800c86e:	e056      	b.n	800c91e <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	639a      	str	r2, [r3, #56]	; 0x38
 800c878:	e02d      	b.n	800c8d6 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	895b      	ldrh	r3, [r3, #10]
 800c87e:	461a      	mov	r2, r3
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	899b      	ldrh	r3, [r3, #12]
 800c884:	fb03 f302 	mul.w	r3, r3, r2
 800c888:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c88a:	e019      	b.n	800c8c0 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6979      	ldr	r1, [r7, #20]
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff f9ed 	bl	800bc70 <get_fat>
 800c896:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c89e:	d101      	bne.n	800c8a4 <dir_sdi+0xa6>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e03c      	b.n	800c91e <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d904      	bls.n	800c8b4 <dir_sdi+0xb6>
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d301      	bcc.n	800c8b8 <dir_sdi+0xba>
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	e032      	b.n	800c91e <dir_sdi+0x120>
			ofs -= csz;
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c8c0:	683a      	ldr	r2, [r7, #0]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d2e1      	bcs.n	800c88c <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800c8c8:	6979      	ldr	r1, [r7, #20]
 800c8ca:	6938      	ldr	r0, [r7, #16]
 800c8cc:	f7ff f9b0 	bl	800bc30 <clust2sect>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	697a      	ldr	r2, [r7, #20]
 800c8da:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <dir_sdi+0xea>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e01a      	b.n	800c91e <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	899b      	ldrh	r3, [r3, #12]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8f8:	441a      	add	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	899b      	ldrh	r3, [r3, #12]
 800c908:	461a      	mov	r2, r3
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c910:	fb02 f200 	mul.w	r2, r2, r0
 800c914:	1a9b      	subs	r3, r3, r2
 800c916:	18ca      	adds	r2, r1, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b086      	sub	sp, #24
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c93a:	3320      	adds	r3, #32
 800c93c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00b      	beq.n	800c95e <dir_next+0x38>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	d102      	bne.n	800c954 <dir_next+0x2e>
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	e001      	b.n	800c958 <dir_next+0x32>
 800c954:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d801      	bhi.n	800c962 <dir_next+0x3c>
 800c95e:	2304      	movs	r3, #4
 800c960:	e0c3      	b.n	800caea <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	899b      	ldrh	r3, [r3, #12]
 800c966:	461a      	mov	r2, r3
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c96e:	fb02 f201 	mul.w	r2, r2, r1
 800c972:	1a9b      	subs	r3, r3, r2
 800c974:	2b00      	cmp	r3, #0
 800c976:	f040 80a5 	bne.w	800cac4 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d10b      	bne.n	800c9a4 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	095b      	lsrs	r3, r3, #5
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	8912      	ldrh	r2, [r2, #8]
 800c994:	4293      	cmp	r3, r2
 800c996:	f0c0 8095 	bcc.w	800cac4 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	639a      	str	r2, [r3, #56]	; 0x38
 800c9a0:	2304      	movs	r3, #4
 800c9a2:	e0a2      	b.n	800caea <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	899b      	ldrh	r3, [r3, #12]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	8952      	ldrh	r2, [r2, #10]
 800c9b4:	3a01      	subs	r2, #1
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f040 8083 	bne.w	800cac4 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	f7ff f952 	bl	800bc70 <get_fat>
 800c9cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d801      	bhi.n	800c9d8 <dir_next+0xb2>
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	e088      	b.n	800caea <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9de:	d101      	bne.n	800c9e4 <dir_next+0xbe>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e082      	b.n	800caea <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6a1b      	ldr	r3, [r3, #32]
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d360      	bcc.n	800cab0 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d104      	bne.n	800c9fe <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	639a      	str	r2, [r3, #56]	; 0x38
 800c9fa:	2304      	movs	r3, #4
 800c9fc:	e075      	b.n	800caea <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca04:	4619      	mov	r1, r3
 800ca06:	4610      	mov	r0, r2
 800ca08:	f7ff fdb4 	bl	800c574 <create_chain>
 800ca0c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d101      	bne.n	800ca18 <dir_next+0xf2>
 800ca14:	2307      	movs	r3, #7
 800ca16:	e068      	b.n	800caea <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d101      	bne.n	800ca22 <dir_next+0xfc>
 800ca1e:	2302      	movs	r3, #2
 800ca20:	e063      	b.n	800caea <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca28:	d101      	bne.n	800ca2e <dir_next+0x108>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e05d      	b.n	800caea <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	79db      	ldrb	r3, [r3, #7]
 800ca32:	f043 0304 	orr.w	r3, r3, #4
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f7ff f815 	bl	800ba6c <sync_window>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <dir_next+0x126>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e04e      	b.n	800caea <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	899b      	ldrh	r3, [r3, #12]
 800ca56:	461a      	mov	r2, r3
 800ca58:	2100      	movs	r1, #0
 800ca5a:	f7fe fe3d 	bl	800b6d8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ca5e:	2300      	movs	r3, #0
 800ca60:	613b      	str	r3, [r7, #16]
 800ca62:	6979      	ldr	r1, [r7, #20]
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff f8e3 	bl	800bc30 <clust2sect>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	639a      	str	r2, [r3, #56]	; 0x38
 800ca70:	e012      	b.n	800ca98 <dir_next+0x172>
						fs->wflag = 1;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2201      	movs	r2, #1
 800ca76:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f7fe fff7 	bl	800ba6c <sync_window>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <dir_next+0x162>
 800ca84:	2301      	movs	r3, #1
 800ca86:	e030      	b.n	800caea <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	613b      	str	r3, [r7, #16]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	639a      	str	r2, [r3, #56]	; 0x38
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	895b      	ldrh	r3, [r3, #10]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d3e6      	bcc.n	800ca72 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	1ad2      	subs	r2, r2, r3
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800cab6:	6979      	ldr	r1, [r7, #20]
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f7ff f8b9 	bl	800bc30 <clust2sect>
 800cabe:	4602      	mov	r2, r0
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	899b      	ldrh	r3, [r3, #12]
 800cad4:	461a      	mov	r2, r3
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	fbb3 f0f2 	udiv	r0, r3, r2
 800cadc:	fb02 f200 	mul.w	r2, r2, r0
 800cae0:	1a9b      	subs	r3, r3, r2
 800cae2:	18ca      	adds	r2, r1, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3718      	adds	r7, #24
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b086      	sub	sp, #24
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cb02:	2100      	movs	r1, #0
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7ff fe7a 	bl	800c7fe <dir_sdi>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d140      	bne.n	800cb96 <dir_alloc+0xa4>
		n = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f7fe ffe8 	bl	800baf4 <move_window>
 800cb24:	4603      	mov	r3, r0
 800cb26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb28:	7dfb      	ldrb	r3, [r7, #23]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d132      	bne.n	800cb94 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	2b04      	cmp	r3, #4
 800cb34:	d108      	bne.n	800cb48 <dir_alloc+0x56>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	b25b      	sxtb	r3, r3
 800cb3e:	43db      	mvns	r3, r3
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	09db      	lsrs	r3, r3, #7
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	e00f      	b.n	800cb68 <dir_alloc+0x76>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2be5      	cmp	r3, #229	; 0xe5
 800cb50:	d004      	beq.n	800cb5c <dir_alloc+0x6a>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d101      	bne.n	800cb60 <dir_alloc+0x6e>
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e000      	b.n	800cb62 <dir_alloc+0x70>
 800cb60:	2300      	movs	r3, #0
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	613b      	str	r3, [r7, #16]
 800cb72:	693a      	ldr	r2, [r7, #16]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d102      	bne.n	800cb80 <dir_alloc+0x8e>
 800cb7a:	e00c      	b.n	800cb96 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cb80:	2101      	movs	r1, #1
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff fecf 	bl	800c926 <dir_next>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cb8c:	7dfb      	ldrb	r3, [r7, #23]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0c2      	beq.n	800cb18 <dir_alloc+0x26>
 800cb92:	e000      	b.n	800cb96 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800cb94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	2b04      	cmp	r3, #4
 800cb9a:	d101      	bne.n	800cba0 <dir_alloc+0xae>
 800cb9c:	2307      	movs	r3, #7
 800cb9e:	75fb      	strb	r3, [r7, #23]
	return res;
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b084      	sub	sp, #16
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	331a      	adds	r3, #26
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fe fba7 	bl	800b30c <ld_word>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	d109      	bne.n	800cbde <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	3314      	adds	r3, #20
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe fb9c 	bl	800b30c <ld_word>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	041b      	lsls	r3, r3, #16
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cbde:	68fb      	ldr	r3, [r7, #12]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	331a      	adds	r3, #26
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	b292      	uxth	r2, r2
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fc7a 	bl	800b4f8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d109      	bne.n	800cc20 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	f103 0214 	add.w	r2, r3, #20
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	0c1b      	lsrs	r3, r3, #16
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	f7fe fc6c 	bl	800b4f8 <st_word>
	}
}
 800cc20:	bf00      	nop
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cc28:	b590      	push	{r4, r7, lr}
 800cc2a:	b087      	sub	sp, #28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	331a      	adds	r3, #26
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fb68 	bl	800b30c <ld_word>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <cmp_lfn+0x1e>
 800cc42:	2300      	movs	r3, #0
 800cc44:	e059      	b.n	800ccfa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc4e:	1e5a      	subs	r2, r3, #1
 800cc50:	4613      	mov	r3, r2
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	4413      	add	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4413      	add	r3, r2
 800cc5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	81fb      	strh	r3, [r7, #14]
 800cc60:	2300      	movs	r3, #0
 800cc62:	613b      	str	r3, [r7, #16]
 800cc64:	e033      	b.n	800ccce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cc66:	4a27      	ldr	r2, [pc, #156]	; (800cd04 <cmp_lfn+0xdc>)
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	4413      	add	r3, r2
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fe fb49 	bl	800b30c <ld_word>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cc7e:	89fb      	ldrh	r3, [r7, #14]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d01a      	beq.n	800ccba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	2bfe      	cmp	r3, #254	; 0xfe
 800cc88:	d812      	bhi.n	800ccb0 <cmp_lfn+0x88>
 800cc8a:	89bb      	ldrh	r3, [r7, #12]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f003 f9f1 	bl	8010074 <ff_wtoupper>
 800cc92:	4603      	mov	r3, r0
 800cc94:	461c      	mov	r4, r3
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	1c5a      	adds	r2, r3, #1
 800cc9a:	617a      	str	r2, [r7, #20]
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	4413      	add	r3, r2
 800cca2:	881b      	ldrh	r3, [r3, #0]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f003 f9e5 	bl	8010074 <ff_wtoupper>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	429c      	cmp	r4, r3
 800ccae:	d001      	beq.n	800ccb4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	e022      	b.n	800ccfa <cmp_lfn+0xd2>
			}
			wc = uc;
 800ccb4:	89bb      	ldrh	r3, [r7, #12]
 800ccb6:	81fb      	strh	r3, [r7, #14]
 800ccb8:	e006      	b.n	800ccc8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ccba:	89bb      	ldrh	r3, [r7, #12]
 800ccbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d001      	beq.n	800ccc8 <cmp_lfn+0xa0>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	e018      	b.n	800ccfa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	3301      	adds	r3, #1
 800cccc:	613b      	str	r3, [r7, #16]
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	2b0c      	cmp	r3, #12
 800ccd2:	d9c8      	bls.n	800cc66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00b      	beq.n	800ccf8 <cmp_lfn+0xd0>
 800cce0:	89fb      	ldrh	r3, [r7, #14]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d008      	beq.n	800ccf8 <cmp_lfn+0xd0>
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	4413      	add	r3, r2
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <cmp_lfn+0xd0>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e000      	b.n	800ccfa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ccf8:	2301      	movs	r3, #1
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	371c      	adds	r7, #28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd90      	pop	{r4, r7, pc}
 800cd02:	bf00      	nop
 800cd04:	080122b8 	.word	0x080122b8

0800cd08 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	331a      	adds	r3, #26
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe faf8 	bl	800b30c <ld_word>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <pick_lfn+0x1e>
 800cd22:	2300      	movs	r3, #0
 800cd24:	e04d      	b.n	800cdc2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd2e:	1e5a      	subs	r2, r3, #1
 800cd30:	4613      	mov	r3, r2
 800cd32:	005b      	lsls	r3, r3, #1
 800cd34:	4413      	add	r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	4413      	add	r3, r2
 800cd3a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	81fb      	strh	r3, [r7, #14]
 800cd40:	2300      	movs	r3, #0
 800cd42:	613b      	str	r3, [r7, #16]
 800cd44:	e028      	b.n	800cd98 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cd46:	4a21      	ldr	r2, [pc, #132]	; (800cdcc <pick_lfn+0xc4>)
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	4413      	add	r3, r2
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7fe fad9 	bl	800b30c <ld_word>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cd5e:	89fb      	ldrh	r3, [r7, #14]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00f      	beq.n	800cd84 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2bfe      	cmp	r3, #254	; 0xfe
 800cd68:	d901      	bls.n	800cd6e <pick_lfn+0x66>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e029      	b.n	800cdc2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cd6e:	89bb      	ldrh	r3, [r7, #12]
 800cd70:	81fb      	strh	r3, [r7, #14]
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	1c5a      	adds	r2, r3, #1
 800cd76:	617a      	str	r2, [r7, #20]
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	89fa      	ldrh	r2, [r7, #14]
 800cd80:	801a      	strh	r2, [r3, #0]
 800cd82:	e006      	b.n	800cd92 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cd84:	89bb      	ldrh	r3, [r7, #12]
 800cd86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d001      	beq.n	800cd92 <pick_lfn+0x8a>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e017      	b.n	800cdc2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	3301      	adds	r3, #1
 800cd96:	613b      	str	r3, [r7, #16]
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	2b0c      	cmp	r3, #12
 800cd9c:	d9d3      	bls.n	800cd46 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00a      	beq.n	800cdc0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2bfe      	cmp	r3, #254	; 0xfe
 800cdae:	d901      	bls.n	800cdb4 <pick_lfn+0xac>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	e006      	b.n	800cdc2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	005b      	lsls	r3, r3, #1
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	4413      	add	r3, r2
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cdc0:	2301      	movs	r3, #1
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	080122b8 	.word	0x080122b8

0800cdd0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b088      	sub	sp, #32
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	4611      	mov	r1, r2
 800cddc:	461a      	mov	r2, r3
 800cdde:	460b      	mov	r3, r1
 800cde0:	71fb      	strb	r3, [r7, #7]
 800cde2:	4613      	mov	r3, r2
 800cde4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	330d      	adds	r3, #13
 800cdea:	79ba      	ldrb	r2, [r7, #6]
 800cdec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	330b      	adds	r3, #11
 800cdf2:	220f      	movs	r2, #15
 800cdf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	330c      	adds	r3, #12
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	331a      	adds	r3, #26
 800ce02:	2100      	movs	r1, #0
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fb77 	bl	800b4f8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ce0a:	79fb      	ldrb	r3, [r7, #7]
 800ce0c:	1e5a      	subs	r2, r3, #1
 800ce0e:	4613      	mov	r3, r2
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	4413      	add	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4413      	add	r3, r2
 800ce18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	82fb      	strh	r3, [r7, #22]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce22:	8afb      	ldrh	r3, [r7, #22]
 800ce24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d007      	beq.n	800ce3c <put_lfn+0x6c>
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	1c5a      	adds	r2, r3, #1
 800ce30:	61fa      	str	r2, [r7, #28]
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4413      	add	r3, r2
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ce3c:	4a17      	ldr	r2, [pc, #92]	; (800ce9c <put_lfn+0xcc>)
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	4413      	add	r3, r2
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	461a      	mov	r2, r3
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	4413      	add	r3, r2
 800ce4a:	8afa      	ldrh	r2, [r7, #22]
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe fb52 	bl	800b4f8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ce54:	8afb      	ldrh	r3, [r7, #22]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d102      	bne.n	800ce60 <put_lfn+0x90>
 800ce5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	3301      	adds	r3, #1
 800ce64:	61bb      	str	r3, [r7, #24]
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2b0c      	cmp	r3, #12
 800ce6a:	d9da      	bls.n	800ce22 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ce6c:	8afb      	ldrh	r3, [r7, #22]
 800ce6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d006      	beq.n	800ce84 <put_lfn+0xb4>
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d103      	bne.n	800ce8c <put_lfn+0xbc>
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	79fa      	ldrb	r2, [r7, #7]
 800ce90:	701a      	strb	r2, [r3, #0]
}
 800ce92:	bf00      	nop
 800ce94:	3720      	adds	r7, #32
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	080122b8 	.word	0x080122b8

0800cea0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08c      	sub	sp, #48	; 0x30
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ceae:	220b      	movs	r2, #11
 800ceb0:	68b9      	ldr	r1, [r7, #8]
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f7fe fbef 	bl	800b696 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	2b05      	cmp	r3, #5
 800cebc:	d92b      	bls.n	800cf16 <gen_numname+0x76>
		sr = seq;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cec2:	e022      	b.n	800cf0a <gen_numname+0x6a>
			wc = *lfn++;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	1c9a      	adds	r2, r3, #2
 800cec8:	607a      	str	r2, [r7, #4]
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cece:	2300      	movs	r3, #0
 800ced0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ced2:	e017      	b.n	800cf04 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	005a      	lsls	r2, r3, #1
 800ced8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	4413      	add	r3, r2
 800cee0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cee4:	085b      	lsrs	r3, r3, #1
 800cee6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d005      	beq.n	800cefe <gen_numname+0x5e>
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cef8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cefc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	3301      	adds	r3, #1
 800cf02:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf06:	2b0f      	cmp	r3, #15
 800cf08:	d9e4      	bls.n	800ced4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1d8      	bne.n	800cec4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cf16:	2307      	movs	r3, #7
 800cf18:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	f003 030f 	and.w	r3, r3, #15
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	3330      	adds	r3, #48	; 0x30
 800cf26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cf2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf2e:	2b39      	cmp	r3, #57	; 0x39
 800cf30:	d904      	bls.n	800cf3c <gen_numname+0x9c>
 800cf32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf36:	3307      	adds	r3, #7
 800cf38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3e:	1e5a      	subs	r2, r3, #1
 800cf40:	62ba      	str	r2, [r7, #40]	; 0x28
 800cf42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cf46:	4413      	add	r3, r2
 800cf48:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cf4c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	091b      	lsrs	r3, r3, #4
 800cf54:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1de      	bne.n	800cf1a <gen_numname+0x7a>
	ns[i] = '~';
 800cf5c:	f107 0214 	add.w	r2, r7, #20
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	4413      	add	r3, r2
 800cf64:	227e      	movs	r2, #126	; 0x7e
 800cf66:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cf68:	2300      	movs	r3, #0
 800cf6a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf6c:	e002      	b.n	800cf74 <gen_numname+0xd4>
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	3301      	adds	r3, #1
 800cf72:	627b      	str	r3, [r7, #36]	; 0x24
 800cf74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d205      	bcs.n	800cf88 <gen_numname+0xe8>
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf80:	4413      	add	r3, r2
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b20      	cmp	r3, #32
 800cf86:	d1f2      	bne.n	800cf6e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	2b07      	cmp	r3, #7
 800cf8c:	d808      	bhi.n	800cfa0 <gen_numname+0x100>
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	1c5a      	adds	r2, r3, #1
 800cf92:	62ba      	str	r2, [r7, #40]	; 0x28
 800cf94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cf98:	4413      	add	r3, r2
 800cf9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cf9e:	e000      	b.n	800cfa2 <gen_numname+0x102>
 800cfa0:	2120      	movs	r1, #32
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	627a      	str	r2, [r7, #36]	; 0x24
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	4413      	add	r3, r2
 800cfac:	460a      	mov	r2, r1
 800cfae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	2b07      	cmp	r3, #7
 800cfb4:	d9e8      	bls.n	800cf88 <gen_numname+0xe8>
}
 800cfb6:	bf00      	nop
 800cfb8:	bf00      	nop
 800cfba:	3730      	adds	r7, #48	; 0x30
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cfcc:	230b      	movs	r3, #11
 800cfce:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	0852      	lsrs	r2, r2, #1
 800cfd6:	01db      	lsls	r3, r3, #7
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	1c59      	adds	r1, r3, #1
 800cfe0:	6079      	str	r1, [r7, #4]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	3b01      	subs	r3, #1
 800cfec:	60bb      	str	r3, [r7, #8]
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1ed      	bne.n	800cfd0 <sum_sfn+0x10>
	return sum;
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800d002:	b480      	push	{r7}
 800d004:	b087      	sub	sp, #28
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	3301      	adds	r3, #1
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	3301      	adds	r3, #1
 800d012:	015b      	lsls	r3, r3, #5
 800d014:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800d016:	2300      	movs	r3, #0
 800d018:	827b      	strh	r3, [r7, #18]
 800d01a:	2300      	movs	r3, #0
 800d01c:	617b      	str	r3, [r7, #20]
 800d01e:	e018      	b.n	800d052 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	2b02      	cmp	r3, #2
 800d024:	d103      	bne.n	800d02e <xdir_sum+0x2c>
			i++;
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	3301      	adds	r3, #1
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	e00e      	b.n	800d04c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d02e:	8a7b      	ldrh	r3, [r7, #18]
 800d030:	03db      	lsls	r3, r3, #15
 800d032:	b29a      	uxth	r2, r3
 800d034:	8a7b      	ldrh	r3, [r7, #18]
 800d036:	085b      	lsrs	r3, r3, #1
 800d038:	b29b      	uxth	r3, r3
 800d03a:	4413      	add	r3, r2
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	440b      	add	r3, r1
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	b29b      	uxth	r3, r3
 800d048:	4413      	add	r3, r2
 800d04a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	3301      	adds	r3, #1
 800d050:	617b      	str	r3, [r7, #20]
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	429a      	cmp	r2, r3
 800d058:	d3e2      	bcc.n	800d020 <xdir_sum+0x1e>
		}
	}
	return sum;
 800d05a:	8a7b      	ldrh	r3, [r7, #18]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	371c      	adds	r7, #28
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800d070:	2300      	movs	r3, #0
 800d072:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800d074:	e01f      	b.n	800d0b6 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800d076:	89bb      	ldrh	r3, [r7, #12]
 800d078:	4618      	mov	r0, r3
 800d07a:	f002 fffb 	bl	8010074 <ff_wtoupper>
 800d07e:	4603      	mov	r3, r0
 800d080:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d082:	89fb      	ldrh	r3, [r7, #14]
 800d084:	03db      	lsls	r3, r3, #15
 800d086:	b29a      	uxth	r2, r3
 800d088:	89fb      	ldrh	r3, [r7, #14]
 800d08a:	085b      	lsrs	r3, r3, #1
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	4413      	add	r3, r2
 800d090:	b29a      	uxth	r2, r3
 800d092:	89bb      	ldrh	r3, [r7, #12]
 800d094:	b2db      	uxtb	r3, r3
 800d096:	b29b      	uxth	r3, r3
 800d098:	4413      	add	r3, r2
 800d09a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d09c:	89fb      	ldrh	r3, [r7, #14]
 800d09e:	03db      	lsls	r3, r3, #15
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	89fb      	ldrh	r3, [r7, #14]
 800d0a4:	085b      	lsrs	r3, r3, #1
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	4413      	add	r3, r2
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	89bb      	ldrh	r3, [r7, #12]
 800d0ae:	0a1b      	lsrs	r3, r3, #8
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	4413      	add	r3, r2
 800d0b4:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	1c9a      	adds	r2, r3, #2
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	81bb      	strh	r3, [r7, #12]
 800d0c0:	89bb      	ldrh	r3, [r7, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1d7      	bne.n	800d076 <xname_sum+0xe>
	}
	return sum;
 800d0c6:	89fb      	ldrh	r3, [r7, #14]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800d0de:	2340      	movs	r3, #64	; 0x40
 800d0e0:	613b      	str	r3, [r7, #16]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	60fb      	str	r3, [r7, #12]
 800d0e6:	e02c      	b.n	800d142 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	f003 031f 	and.w	r3, r3, #31
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <get_xdir_info+0x28>
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	3302      	adds	r3, #2
 800d0f6:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fe f904 	bl	800b30c <ld_word>
 800d104:	4603      	mov	r3, r0
 800d106:	2100      	movs	r1, #0
 800d108:	4618      	mov	r0, r3
 800d10a:	f002 ff77 	bl	800fffc <ff_convert>
 800d10e:	4603      	mov	r3, r0
 800d110:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800d112:	897b      	ldrh	r3, [r7, #10]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <get_xdir_info+0x4e>
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	2bfe      	cmp	r3, #254	; 0xfe
 800d11c:	d902      	bls.n	800d124 <get_xdir_info+0x54>
 800d11e:	2300      	movs	r3, #0
 800d120:	617b      	str	r3, [r7, #20]
 800d122:	e015      	b.n	800d150 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	617a      	str	r2, [r7, #20]
 800d12a:	897a      	ldrh	r2, [r7, #10]
 800d12c:	b2d1      	uxtb	r1, r2
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	4413      	add	r3, r2
 800d132:	460a      	mov	r2, r1
 800d134:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	3302      	adds	r3, #2
 800d13a:	613b      	str	r3, [r7, #16]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3301      	adds	r3, #1
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	3323      	adds	r3, #35	; 0x23
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	461a      	mov	r2, r3
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d3cb      	bcc.n	800d0e8 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <get_xdir_info+0x94>
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	617a      	str	r2, [r7, #20]
 800d15c:	683a      	ldr	r2, [r7, #0]
 800d15e:	4413      	add	r3, r2
 800d160:	223f      	movs	r2, #63	; 0x3f
 800d162:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	4413      	add	r3, r2
 800d16a:	331a      	adds	r3, #26
 800d16c:	2200      	movs	r2, #0
 800d16e:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2200      	movs	r2, #0
 800d174:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	791a      	ldrb	r2, [r3, #4]
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	7b1b      	ldrb	r3, [r3, #12]
 800d182:	f003 0310 	and.w	r3, r3, #16
 800d186:	2b00      	cmp	r3, #0
 800d188:	d107      	bne.n	800d19a <get_xdir_info+0xca>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	3338      	adds	r3, #56	; 0x38
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe f8f7 	bl	800b382 <ld_qword>
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	e003      	b.n	800d1a2 <get_xdir_info+0xd2>
 800d19a:	f04f 0200 	mov.w	r2, #0
 800d19e:	f04f 0300 	mov.w	r3, #0
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	330c      	adds	r3, #12
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7fe f8ad 	bl	800b30c <ld_word>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	330e      	adds	r3, #14
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe f8a4 	bl	800b30c <ld_word>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	811a      	strh	r2, [r3, #8]
}
 800d1cc:	bf00      	nop
 800d1ce:	3718      	adds	r7, #24
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800d1d4:	b590      	push	{r4, r7, lr}
 800d1d6:	b087      	sub	sp, #28
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	695b      	ldr	r3, [r3, #20]
 800d1e2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	f7fe fc80 	bl	800baf4 <move_window>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <load_xdir+0x2e>
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
 800d200:	e09f      	b.n	800d342 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	2b85      	cmp	r3, #133	; 0x85
 800d20a:	d001      	beq.n	800d210 <load_xdir+0x3c>
 800d20c:	2302      	movs	r3, #2
 800d20e:	e098      	b.n	800d342 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d214:	2220      	movs	r2, #32
 800d216:	4619      	mov	r1, r3
 800d218:	6938      	ldr	r0, [r7, #16]
 800d21a:	f7fe fa3c 	bl	800b696 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	3301      	adds	r3, #1
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	3301      	adds	r3, #1
 800d226:	015b      	lsls	r3, r3, #5
 800d228:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b5f      	cmp	r3, #95	; 0x5f
 800d22e:	d903      	bls.n	800d238 <load_xdir+0x64>
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800d236:	d901      	bls.n	800d23c <load_xdir+0x68>
 800d238:	2302      	movs	r3, #2
 800d23a:	e082      	b.n	800d342 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800d23c:	2100      	movs	r1, #0
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff fb71 	bl	800c926 <dir_next>
 800d244:	4603      	mov	r3, r0
 800d246:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d001      	beq.n	800d252 <load_xdir+0x7e>
 800d24e:	7bfb      	ldrb	r3, [r7, #15]
 800d250:	e077      	b.n	800d342 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25a:	4619      	mov	r1, r3
 800d25c:	4610      	mov	r0, r2
 800d25e:	f7fe fc49 	bl	800baf4 <move_window>
 800d262:	4603      	mov	r3, r0
 800d264:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d266:	7bfb      	ldrb	r3, [r7, #15]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <load_xdir+0x9c>
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	e068      	b.n	800d342 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2bc0      	cmp	r3, #192	; 0xc0
 800d278:	d001      	beq.n	800d27e <load_xdir+0xaa>
 800d27a:	2302      	movs	r3, #2
 800d27c:	e061      	b.n	800d342 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	f103 0020 	add.w	r0, r3, #32
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d288:	2220      	movs	r2, #32
 800d28a:	4619      	mov	r1, r3
 800d28c:	f7fe fa03 	bl	800b696 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	3323      	adds	r3, #35	; 0x23
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	332c      	adds	r3, #44	; 0x2c
 800d298:	4a2c      	ldr	r2, [pc, #176]	; (800d34c <load_xdir+0x178>)
 800d29a:	fba2 2303 	umull	r2, r3, r2, r3
 800d29e:	08db      	lsrs	r3, r3, #3
 800d2a0:	015b      	lsls	r3, r3, #5
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d201      	bcs.n	800d2ac <load_xdir+0xd8>
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	e04a      	b.n	800d342 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800d2ac:	2340      	movs	r3, #64	; 0x40
 800d2ae:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7ff fb37 	bl	800c926 <dir_next>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <load_xdir+0xf2>
 800d2c2:	7bfb      	ldrb	r3, [r7, #15]
 800d2c4:	e03d      	b.n	800d342 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	f7fe fc0f 	bl	800baf4 <move_window>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <load_xdir+0x110>
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	e02e      	b.n	800d342 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2bc1      	cmp	r3, #193	; 0xc1
 800d2ec:	d001      	beq.n	800d2f2 <load_xdir+0x11e>
 800d2ee:	2302      	movs	r3, #2
 800d2f0:	e027      	b.n	800d342 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800d2f8:	d208      	bcs.n	800d30c <load_xdir+0x138>
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	18d0      	adds	r0, r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d304:	2220      	movs	r2, #32
 800d306:	4619      	mov	r1, r3
 800d308:	f7fe f9c5 	bl	800b696 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	3320      	adds	r3, #32
 800d310:	617b      	str	r3, [r7, #20]
 800d312:	697a      	ldr	r2, [r7, #20]
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	429a      	cmp	r2, r3
 800d318:	d3ca      	bcc.n	800d2b0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800d320:	d80e      	bhi.n	800d340 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800d322:	6938      	ldr	r0, [r7, #16]
 800d324:	f7ff fe6d 	bl	800d002 <xdir_sum>
 800d328:	4603      	mov	r3, r0
 800d32a:	461c      	mov	r4, r3
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	3302      	adds	r3, #2
 800d330:	4618      	mov	r0, r3
 800d332:	f7fd ffeb 	bl	800b30c <ld_word>
 800d336:	4603      	mov	r3, r0
 800d338:	429c      	cmp	r4, r3
 800d33a:	d001      	beq.n	800d340 <load_xdir+0x16c>
 800d33c:	2302      	movs	r3, #2
 800d33e:	e000      	b.n	800d342 <load_xdir+0x16e>
	}
	return FR_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	371c      	adds	r7, #28
 800d346:	46bd      	mov	sp, r7
 800d348:	bd90      	pop	{r4, r7, pc}
 800d34a:	bf00      	nop
 800d34c:	88888889 	.word	0x88888889

0800d350 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800d350:	b5b0      	push	{r4, r5, r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	6808      	ldr	r0, [r1, #0]
 800d35e:	6879      	ldr	r1, [r7, #4]
 800d360:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6a08      	ldr	r0, [r1, #32]
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800d36e:	b2c8      	uxtb	r0, r1
 800d370:	6879      	ldr	r1, [r7, #4]
 800d372:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d374:	6839      	ldr	r1, [r7, #0]
 800d376:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800d378:	4608      	mov	r0, r1
 800d37a:	f04f 0100 	mov.w	r1, #0
 800d37e:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800d382:	f04f 0500 	mov.w	r5, #0
 800d386:	ea00 0204 	and.w	r2, r0, r4
 800d38a:	ea01 0305 	and.w	r3, r1, r5
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7ff fa2b 	bl	800c7fe <dir_sdi>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d104      	bne.n	800d3bc <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7ff ff0e 	bl	800d1d4 <load_xdir>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bdb0      	pop	{r4, r5, r7, pc}

0800d3c6 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800d3c6:	b590      	push	{r4, r7, lr}
 800d3c8:	b087      	sub	sp, #28
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	1c9c      	adds	r4, r3, #2
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f7ff fe11 	bl	800d002 <xdir_sum>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f7fe f887 	bl	800b4f8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff f9ff 	bl	800c7fe <dir_sdi>
 800d400:	4603      	mov	r3, r0
 800d402:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800d404:	e026      	b.n	800d454 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40e:	4619      	mov	r1, r3
 800d410:	4610      	mov	r0, r2
 800d412:	f7fe fb6f 	bl	800baf4 <move_window>
 800d416:	4603      	mov	r3, r0
 800d418:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d11d      	bne.n	800d45c <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d424:	2220      	movs	r2, #32
 800d426:	68f9      	ldr	r1, [r7, #12]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fe f934 	bl	800b696 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2201      	movs	r2, #1
 800d434:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	3b01      	subs	r3, #1
 800d43a:	613b      	str	r3, [r7, #16]
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d00e      	beq.n	800d460 <store_xdir+0x9a>
		dirb += SZDIRE;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3320      	adds	r3, #32
 800d446:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800d448:	2100      	movs	r1, #0
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7ff fa6b 	bl	800c926 <dir_next>
 800d450:	4603      	mov	r3, r0
 800d452:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800d454:	7dfb      	ldrb	r3, [r7, #23]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0d5      	beq.n	800d406 <store_xdir+0x40>
 800d45a:	e002      	b.n	800d462 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800d45c:	bf00      	nop
 800d45e:	e000      	b.n	800d462 <store_xdir+0x9c>
		if (--nent == 0) break;
 800d460:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <store_xdir+0xa8>
 800d468:	7dfb      	ldrb	r3, [r7, #23]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d101      	bne.n	800d472 <store_xdir+0xac>
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
 800d470:	e000      	b.n	800d474 <store_xdir+0xae>
 800d472:	2302      	movs	r3, #2
}
 800d474:	4618      	mov	r0, r3
 800d476:	371c      	adds	r7, #28
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd90      	pop	{r4, r7, pc}

0800d47c <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800d47c:	b590      	push	{r4, r7, lr}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800d486:	2240      	movs	r2, #64	; 0x40
 800d488:	2100      	movs	r1, #0
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7fe f924 	bl	800b6d8 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2285      	movs	r2, #133	; 0x85
 800d494:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	3320      	adds	r3, #32
 800d49a:	22c0      	movs	r2, #192	; 0xc0
 800d49c:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	72bb      	strb	r3, [r7, #10]
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	72fb      	strb	r3, [r7, #11]
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	813b      	strh	r3, [r7, #8]
 800d4aa:	2340      	movs	r3, #64	; 0x40
 800d4ac:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	1c5a      	adds	r2, r3, #1
 800d4b2:	60fa      	str	r2, [r7, #12]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	22c1      	movs	r2, #193	; 0xc1
 800d4ba:	701a      	strb	r2, [r3, #0]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	1c5a      	adds	r2, r3, #1
 800d4c0:	60fa      	str	r2, [r7, #12]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800d4ca:	893b      	ldrh	r3, [r7, #8]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00b      	beq.n	800d4e8 <create_xdir+0x6c>
 800d4d0:	7abb      	ldrb	r3, [r7, #10]
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	813b      	strh	r3, [r7, #8]
 800d4dc:	893b      	ldrh	r3, [r7, #8]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d002      	beq.n	800d4e8 <create_xdir+0x6c>
 800d4e2:	7abb      	ldrb	r3, [r7, #10]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	893a      	ldrh	r2, [r7, #8]
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe f800 	bl	800b4f8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	3302      	adds	r3, #2
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f003 031f 	and.w	r3, r3, #31
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1e0      	bne.n	800d4ca <create_xdir+0x4e>
		nb++;
 800d508:	7afb      	ldrb	r3, [r7, #11]
 800d50a:	3301      	adds	r3, #1
 800d50c:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800d50e:	7abb      	ldrb	r3, [r7, #10]
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	4413      	add	r3, r2
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1c8      	bne.n	800d4ae <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	3323      	adds	r3, #35	; 0x23
 800d520:	7aba      	ldrb	r2, [r7, #10]
 800d522:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3301      	adds	r3, #1
 800d528:	7afa      	ldrb	r2, [r7, #11]
 800d52a:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800d532:	6838      	ldr	r0, [r7, #0]
 800d534:	f7ff fd98 	bl	800d068 <xname_sum>
 800d538:	4603      	mov	r3, r0
 800d53a:	4619      	mov	r1, r3
 800d53c:	4620      	mov	r0, r4
 800d53e:	f7fd ffdb 	bl	800b4f8 <st_word>
}
 800d542:	bf00      	nop
 800d544:	3714      	adds	r7, #20
 800d546:	46bd      	mov	sp, r7
 800d548:	bd90      	pop	{r4, r7, pc}

0800d54a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b086      	sub	sp, #24
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d554:	2304      	movs	r3, #4
 800d556:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d55e:	23ff      	movs	r3, #255	; 0xff
 800d560:	757b      	strb	r3, [r7, #21]
 800d562:	23ff      	movs	r3, #255	; 0xff
 800d564:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d566:	e09f      	b.n	800d6a8 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56c:	4619      	mov	r1, r3
 800d56e:	6938      	ldr	r0, [r7, #16]
 800d570:	f7fe fac0 	bl	800baf4 <move_window>
 800d574:	4603      	mov	r3, r0
 800d576:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d578:	7dfb      	ldrb	r3, [r7, #23]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f040 809a 	bne.w	800d6b4 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d588:	7dbb      	ldrb	r3, [r7, #22]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d102      	bne.n	800d594 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d58e:	2304      	movs	r3, #4
 800d590:	75fb      	strb	r3, [r7, #23]
 800d592:	e096      	b.n	800d6c2 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	2b04      	cmp	r3, #4
 800d59a:	d118      	bne.n	800d5ce <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800d59c:	7dbb      	ldrb	r3, [r7, #22]
 800d59e:	2b85      	cmp	r3, #133	; 0x85
 800d5a0:	d179      	bne.n	800d696 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff fe12 	bl	800d1d4 <load_xdir>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800d5b4:	7dfb      	ldrb	r3, [r7, #23]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d17e      	bne.n	800d6b8 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	719a      	strb	r2, [r3, #6]
					}
					break;
 800d5cc:	e074      	b.n	800d6b8 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d2:	330b      	adds	r3, #11
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5da:	73fb      	strb	r3, [r7, #15]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	7bfa      	ldrb	r2, [r7, #15]
 800d5e0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d5e2:	7dbb      	ldrb	r3, [r7, #22]
 800d5e4:	2be5      	cmp	r3, #229	; 0xe5
 800d5e6:	d00e      	beq.n	800d606 <dir_read+0xbc>
 800d5e8:	7dbb      	ldrb	r3, [r7, #22]
 800d5ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d5ec:	d00b      	beq.n	800d606 <dir_read+0xbc>
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	f023 0320 	bic.w	r3, r3, #32
 800d5f4:	2b08      	cmp	r3, #8
 800d5f6:	bf0c      	ite	eq
 800d5f8:	2301      	moveq	r3, #1
 800d5fa:	2300      	movne	r3, #0
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	461a      	mov	r2, r3
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	4293      	cmp	r3, r2
 800d604:	d002      	beq.n	800d60c <dir_read+0xc2>
				ord = 0xFF;
 800d606:	23ff      	movs	r3, #255	; 0xff
 800d608:	757b      	strb	r3, [r7, #21]
 800d60a:	e044      	b.n	800d696 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	2b0f      	cmp	r3, #15
 800d610:	d12f      	bne.n	800d672 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d612:	7dbb      	ldrb	r3, [r7, #22]
 800d614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00d      	beq.n	800d638 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d620:	7b5b      	ldrb	r3, [r3, #13]
 800d622:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d624:	7dbb      	ldrb	r3, [r7, #22]
 800d626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d62a:	75bb      	strb	r3, [r7, #22]
 800d62c:	7dbb      	ldrb	r3, [r7, #22]
 800d62e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d638:	7dba      	ldrb	r2, [r7, #22]
 800d63a:	7d7b      	ldrb	r3, [r7, #21]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d115      	bne.n	800d66c <dir_read+0x122>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d644:	330d      	adds	r3, #13
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	7d3a      	ldrb	r2, [r7, #20]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d10e      	bne.n	800d66c <dir_read+0x122>
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	691a      	ldr	r2, [r3, #16]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d656:	4619      	mov	r1, r3
 800d658:	4610      	mov	r0, r2
 800d65a:	f7ff fb55 	bl	800cd08 <pick_lfn>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d003      	beq.n	800d66c <dir_read+0x122>
 800d664:	7d7b      	ldrb	r3, [r7, #21]
 800d666:	3b01      	subs	r3, #1
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	e000      	b.n	800d66e <dir_read+0x124>
 800d66c:	23ff      	movs	r3, #255	; 0xff
 800d66e:	757b      	strb	r3, [r7, #21]
 800d670:	e011      	b.n	800d696 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d672:	7d7b      	ldrb	r3, [r7, #21]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d109      	bne.n	800d68c <dir_read+0x142>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7ff fc9f 	bl	800cfc0 <sum_sfn>
 800d682:	4603      	mov	r3, r0
 800d684:	461a      	mov	r2, r3
 800d686:	7d3b      	ldrb	r3, [r7, #20]
 800d688:	4293      	cmp	r3, r2
 800d68a:	d017      	beq.n	800d6bc <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f04f 32ff 	mov.w	r2, #4294967295
 800d692:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800d694:	e012      	b.n	800d6bc <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d696:	2100      	movs	r1, #0
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff f944 	bl	800c926 <dir_next>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10b      	bne.n	800d6c0 <dir_read+0x176>
	while (dp->sect) {
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f47f af5b 	bne.w	800d568 <dir_read+0x1e>
 800d6b2:	e006      	b.n	800d6c2 <dir_read+0x178>
		if (res != FR_OK) break;
 800d6b4:	bf00      	nop
 800d6b6:	e004      	b.n	800d6c2 <dir_read+0x178>
					break;
 800d6b8:	bf00      	nop
 800d6ba:	e002      	b.n	800d6c2 <dir_read+0x178>
					break;
 800d6bc:	bf00      	nop
 800d6be:	e000      	b.n	800d6c2 <dir_read+0x178>
		if (res != FR_OK) break;
 800d6c0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <dir_read+0x184>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d6d8:	b590      	push	{r4, r7, lr}
 800d6da:	b089      	sub	sp, #36	; 0x24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff f888 	bl	800c7fe <dir_sdi>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800d6f2:	7ffb      	ldrb	r3, [r7, #31]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d001      	beq.n	800d6fc <dir_find+0x24>
 800d6f8:	7ffb      	ldrb	r3, [r7, #31]
 800d6fa:	e112      	b.n	800d922 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b04      	cmp	r3, #4
 800d702:	d164      	bne.n	800d7ce <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fcad 	bl	800d068 <xname_sum>
 800d70e:	4603      	mov	r3, r0
 800d710:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d712:	e04f      	b.n	800d7b4 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	3324      	adds	r3, #36	; 0x24
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fd fdf6 	bl	800b30c <ld_word>
 800d720:	4603      	mov	r3, r0
 800d722:	461a      	mov	r2, r3
 800d724:	893b      	ldrh	r3, [r7, #8]
 800d726:	4293      	cmp	r3, r2
 800d728:	d000      	beq.n	800d72c <dir_find+0x54>
 800d72a:	e043      	b.n	800d7b4 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	695b      	ldr	r3, [r3, #20]
 800d730:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d734:	76fb      	strb	r3, [r7, #27]
 800d736:	2340      	movs	r3, #64	; 0x40
 800d738:	617b      	str	r3, [r7, #20]
 800d73a:	2300      	movs	r3, #0
 800d73c:	613b      	str	r3, [r7, #16]
 800d73e:	e029      	b.n	800d794 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	f003 031f 	and.w	r3, r3, #31
 800d746:	2b00      	cmp	r3, #0
 800d748:	d102      	bne.n	800d750 <dir_find+0x78>
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	3302      	adds	r3, #2
 800d74e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	695a      	ldr	r2, [r3, #20]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	4413      	add	r3, r2
 800d758:	4618      	mov	r0, r3
 800d75a:	f7fd fdd7 	bl	800b30c <ld_word>
 800d75e:	4603      	mov	r3, r0
 800d760:	4618      	mov	r0, r3
 800d762:	f002 fc87 	bl	8010074 <ff_wtoupper>
 800d766:	4603      	mov	r3, r0
 800d768:	461c      	mov	r4, r3
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	691a      	ldr	r2, [r3, #16]
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	4413      	add	r3, r2
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	4618      	mov	r0, r3
 800d778:	f002 fc7c 	bl	8010074 <ff_wtoupper>
 800d77c:	4603      	mov	r3, r0
 800d77e:	429c      	cmp	r4, r3
 800d780:	d10c      	bne.n	800d79c <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d782:	7efb      	ldrb	r3, [r7, #27]
 800d784:	3b01      	subs	r3, #1
 800d786:	76fb      	strb	r3, [r7, #27]
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	3302      	adds	r3, #2
 800d78c:	617b      	str	r3, [r7, #20]
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	3301      	adds	r3, #1
 800d792:	613b      	str	r3, [r7, #16]
 800d794:	7efb      	ldrb	r3, [r7, #27]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1d2      	bne.n	800d740 <dir_find+0x68>
 800d79a:	e000      	b.n	800d79e <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d79c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d79e:	7efb      	ldrb	r3, [r7, #27]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d107      	bne.n	800d7b4 <dir_find+0xdc>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	691a      	ldr	r2, [r3, #16]
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	4413      	add	r3, r2
 800d7ae:	881b      	ldrh	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d009      	beq.n	800d7c8 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff fec7 	bl	800d54a <dir_read>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	77fb      	strb	r3, [r7, #31]
 800d7c0:	7ffb      	ldrb	r3, [r7, #31]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d0a6      	beq.n	800d714 <dir_find+0x3c>
 800d7c6:	e000      	b.n	800d7ca <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d7c8:	bf00      	nop
		}
		return res;
 800d7ca:	7ffb      	ldrb	r3, [r7, #31]
 800d7cc:	e0a9      	b.n	800d922 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d7ce:	23ff      	movs	r3, #255	; 0xff
 800d7d0:	773b      	strb	r3, [r7, #28]
 800d7d2:	7f3b      	ldrb	r3, [r7, #28]
 800d7d4:	777b      	strb	r3, [r7, #29]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7dc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f7fe f985 	bl	800baf4 <move_window>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800d7ee:	7ffb      	ldrb	r3, [r7, #31]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f040 8090 	bne.w	800d916 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d7fe:	7fbb      	ldrb	r3, [r7, #30]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d102      	bne.n	800d80a <dir_find+0x132>
 800d804:	2304      	movs	r3, #4
 800d806:	77fb      	strb	r3, [r7, #31]
 800d808:	e08a      	b.n	800d920 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d80e:	330b      	adds	r3, #11
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d816:	72fb      	strb	r3, [r7, #11]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	7afa      	ldrb	r2, [r7, #11]
 800d81c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d81e:	7fbb      	ldrb	r3, [r7, #30]
 800d820:	2be5      	cmp	r3, #229	; 0xe5
 800d822:	d007      	beq.n	800d834 <dir_find+0x15c>
 800d824:	7afb      	ldrb	r3, [r7, #11]
 800d826:	f003 0308 	and.w	r3, r3, #8
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d009      	beq.n	800d842 <dir_find+0x16a>
 800d82e:	7afb      	ldrb	r3, [r7, #11]
 800d830:	2b0f      	cmp	r3, #15
 800d832:	d006      	beq.n	800d842 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d834:	23ff      	movs	r3, #255	; 0xff
 800d836:	777b      	strb	r3, [r7, #29]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f04f 32ff 	mov.w	r2, #4294967295
 800d83e:	64da      	str	r2, [r3, #76]	; 0x4c
 800d840:	e05e      	b.n	800d900 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d842:	7afb      	ldrb	r3, [r7, #11]
 800d844:	2b0f      	cmp	r3, #15
 800d846:	d136      	bne.n	800d8b6 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d852:	2b00      	cmp	r3, #0
 800d854:	d154      	bne.n	800d900 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d856:	7fbb      	ldrb	r3, [r7, #30]
 800d858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00d      	beq.n	800d87c <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d864:	7b5b      	ldrb	r3, [r3, #13]
 800d866:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d868:	7fbb      	ldrb	r3, [r7, #30]
 800d86a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d86e:	77bb      	strb	r3, [r7, #30]
 800d870:	7fbb      	ldrb	r3, [r7, #30]
 800d872:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d87c:	7fba      	ldrb	r2, [r7, #30]
 800d87e:	7f7b      	ldrb	r3, [r7, #29]
 800d880:	429a      	cmp	r2, r3
 800d882:	d115      	bne.n	800d8b0 <dir_find+0x1d8>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d888:	330d      	adds	r3, #13
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	7f3a      	ldrb	r2, [r7, #28]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d10e      	bne.n	800d8b0 <dir_find+0x1d8>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	691a      	ldr	r2, [r3, #16]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d89a:	4619      	mov	r1, r3
 800d89c:	4610      	mov	r0, r2
 800d89e:	f7ff f9c3 	bl	800cc28 <cmp_lfn>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <dir_find+0x1d8>
 800d8a8:	7f7b      	ldrb	r3, [r7, #29]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	e000      	b.n	800d8b2 <dir_find+0x1da>
 800d8b0:	23ff      	movs	r3, #255	; 0xff
 800d8b2:	777b      	strb	r3, [r7, #29]
 800d8b4:	e024      	b.n	800d900 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d8b6:	7f7b      	ldrb	r3, [r7, #29]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d109      	bne.n	800d8d0 <dir_find+0x1f8>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7ff fb7d 	bl	800cfc0 <sum_sfn>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	7f3b      	ldrb	r3, [r7, #28]
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d024      	beq.n	800d91a <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10a      	bne.n	800d8f4 <dir_find+0x21c>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	3340      	adds	r3, #64	; 0x40
 800d8e6:	220b      	movs	r2, #11
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f7fd ff10 	bl	800b70e <mem_cmp>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d014      	beq.n	800d91e <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d8f4:	23ff      	movs	r3, #255	; 0xff
 800d8f6:	777b      	strb	r3, [r7, #29]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fe:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d900:	2100      	movs	r1, #0
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff f80f 	bl	800c926 <dir_next>
 800d908:	4603      	mov	r3, r0
 800d90a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800d90c:	7ffb      	ldrb	r3, [r7, #31]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f43f af65 	beq.w	800d7de <dir_find+0x106>
 800d914:	e004      	b.n	800d920 <dir_find+0x248>
		if (res != FR_OK) break;
 800d916:	bf00      	nop
 800d918:	e002      	b.n	800d920 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d91a:	bf00      	nop
 800d91c:	e000      	b.n	800d920 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d91e:	bf00      	nop

	return res;
 800d920:	7ffb      	ldrb	r3, [r7, #31]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3724      	adds	r7, #36	; 0x24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd90      	pop	{r4, r7, pc}
	...

0800d92c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d92c:	b5b0      	push	{r4, r5, r7, lr}
 800d92e:	b0a0      	sub	sp, #128	; 0x80
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d940:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <dir_register+0x20>
 800d948:	2306      	movs	r3, #6
 800d94a:	e18c      	b.n	800dc66 <dir_register+0x33a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d94c:	2300      	movs	r3, #0
 800d94e:	677b      	str	r3, [r7, #116]	; 0x74
 800d950:	e002      	b.n	800d958 <dir_register+0x2c>
 800d952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d954:	3301      	adds	r3, #1
 800d956:	677b      	str	r3, [r7, #116]	; 0x74
 800d958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d95a:	691a      	ldr	r2, [r3, #16]
 800d95c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d95e:	005b      	lsls	r3, r3, #1
 800d960:	4413      	add	r3, r2
 800d962:	881b      	ldrh	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1f4      	bne.n	800d952 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	f040 80a2 	bne.w	800dab6 <dir_register+0x18a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d974:	330e      	adds	r3, #14
 800d976:	4abe      	ldr	r2, [pc, #760]	; (800dc70 <dir_register+0x344>)
 800d978:	fba2 2303 	umull	r2, r3, r2, r3
 800d97c:	08db      	lsrs	r3, r3, #3
 800d97e:	3302      	adds	r3, #2
 800d980:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800d982:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff f8b4 	bl	800caf2 <dir_alloc>
 800d98a:	4603      	mov	r3, r0
 800d98c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800d990:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <dir_register+0x72>
 800d998:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d99c:	e163      	b.n	800dc66 <dir_register+0x33a>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	015b      	lsls	r3, r3, #5
 800d9a8:	1ad2      	subs	r2, r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d075      	beq.n	800daa2 <dir_register+0x176>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	79db      	ldrb	r3, [r3, #7]
 800d9ba:	f003 0304 	and.w	r3, r3, #4
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d06f      	beq.n	800daa2 <dir_register+0x176>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ca:	895b      	ldrh	r3, [r3, #10]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d0:	899b      	ldrh	r3, [r3, #12]
 800d9d2:	fb03 f302 	mul.w	r3, r3, r2
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	f04f 0300 	mov.w	r3, #0
 800d9dc:	1884      	adds	r4, r0, r2
 800d9de:	eb41 0503 	adc.w	r5, r1, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fe fcae 	bl	800c34c <fill_first_frag>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d9f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d002      	beq.n	800da04 <dir_register+0xd8>
 800d9fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da02:	e130      	b.n	800dc66 <dir_register+0x33a>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da0a:	f04f 32ff 	mov.w	r2, #4294967295
 800da0e:	4619      	mov	r1, r3
 800da10:	f7fe fccb 	bl	800c3aa <fill_last_frag>
 800da14:	4603      	mov	r3, r0
 800da16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800da1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <dir_register+0xfc>
 800da22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da26:	e11e      	b.n	800dc66 <dir_register+0x33a>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	f107 0308 	add.w	r3, r7, #8
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fc8d 	bl	800d350 <load_obj_dir>
 800da36:	4603      	mov	r3, r0
 800da38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800da3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <dir_register+0x11e>
 800da44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da48:	e10d      	b.n	800dc66 <dir_register+0x33a>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800da4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da4c:	695b      	ldr	r3, [r3, #20]
 800da4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da58:	4608      	mov	r0, r1
 800da5a:	f7fd fd94 	bl	800b586 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800da5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da60:	695b      	ldr	r3, [r3, #20]
 800da62:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da6c:	4608      	mov	r0, r1
 800da6e:	f7fd fd8a 	bl	800b586 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	79da      	ldrb	r2, [r3, #7]
 800da76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da78:	695b      	ldr	r3, [r3, #20]
 800da7a:	3321      	adds	r3, #33	; 0x21
 800da7c:	f042 0201 	orr.w	r2, r2, #1
 800da80:	b2d2      	uxtb	r2, r2
 800da82:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800da84:	f107 0308 	add.w	r3, r7, #8
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff fc9c 	bl	800d3c6 <store_xdir>
 800da8e:	4603      	mov	r3, r0
 800da90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800da94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <dir_register+0x176>
 800da9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800daa0:	e0e1      	b.n	800dc66 <dir_register+0x33a>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800daa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa4:	695a      	ldr	r2, [r3, #20]
 800daa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa8:	691b      	ldr	r3, [r3, #16]
 800daaa:	4619      	mov	r1, r3
 800daac:	4610      	mov	r0, r2
 800daae:	f7ff fce5 	bl	800d47c <create_xdir>
		return FR_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e0d7      	b.n	800dc66 <dir_register+0x33a>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dabc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dac0:	220c      	movs	r2, #12
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fd fde7 	bl	800b696 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dac8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dacc:	f003 0301 	and.w	r3, r3, #1
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d033      	beq.n	800db3c <dir_register+0x210>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2240      	movs	r2, #64	; 0x40
 800dad8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800dadc:	2301      	movs	r3, #1
 800dade:	67bb      	str	r3, [r7, #120]	; 0x78
 800dae0:	e016      	b.n	800db10 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800dae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daea:	691a      	ldr	r2, [r3, #16]
 800daec:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800daf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daf2:	f7ff f9d5 	bl	800cea0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff fdee 	bl	800d6d8 <dir_find>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800db02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db06:	2b00      	cmp	r3, #0
 800db08:	d106      	bne.n	800db18 <dir_register+0x1ec>
		for (n = 1; n < 100; n++) {
 800db0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db0c:	3301      	adds	r3, #1
 800db0e:	67bb      	str	r3, [r7, #120]	; 0x78
 800db10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db12:	2b63      	cmp	r3, #99	; 0x63
 800db14:	d9e5      	bls.n	800dae2 <dir_register+0x1b6>
 800db16:	e000      	b.n	800db1a <dir_register+0x1ee>
			if (res != FR_OK) break;
 800db18:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800db1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db1c:	2b64      	cmp	r3, #100	; 0x64
 800db1e:	d101      	bne.n	800db24 <dir_register+0x1f8>
 800db20:	2307      	movs	r3, #7
 800db22:	e0a0      	b.n	800dc66 <dir_register+0x33a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800db24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d002      	beq.n	800db32 <dir_register+0x206>
 800db2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db30:	e099      	b.n	800dc66 <dir_register+0x33a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800db32:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800db3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db40:	f003 0302 	and.w	r3, r3, #2
 800db44:	2b00      	cmp	r3, #0
 800db46:	d007      	beq.n	800db58 <dir_register+0x22c>
 800db48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db4a:	330c      	adds	r3, #12
 800db4c:	4a49      	ldr	r2, [pc, #292]	; (800dc74 <dir_register+0x348>)
 800db4e:	fba2 2303 	umull	r2, r3, r2, r3
 800db52:	089b      	lsrs	r3, r3, #2
 800db54:	3301      	adds	r3, #1
 800db56:	e000      	b.n	800db5a <dir_register+0x22e>
 800db58:	2301      	movs	r3, #1
 800db5a:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800db5c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7fe ffc7 	bl	800caf2 <dir_alloc>
 800db64:	4603      	mov	r3, r0
 800db66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800db6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d14a      	bne.n	800dc08 <dir_register+0x2dc>
 800db72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db74:	3b01      	subs	r3, #1
 800db76:	673b      	str	r3, [r7, #112]	; 0x70
 800db78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d044      	beq.n	800dc08 <dir_register+0x2dc>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db84:	015b      	lsls	r3, r3, #5
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7fe fe37 	bl	800c7fe <dir_sdi>
 800db90:	4603      	mov	r3, r0
 800db92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800db96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d134      	bne.n	800dc08 <dir_register+0x2dc>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	3340      	adds	r3, #64	; 0x40
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7ff fa0c 	bl	800cfc0 <sum_sfn>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dbb6:	f7fd ff9d 	bl	800baf4 <move_window>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800dbc0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d11e      	bne.n	800dc06 <dir_register+0x2da>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800dbc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbca:	6918      	ldr	r0, [r3, #16]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800dbd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800dbd8:	f7ff f8fa 	bl	800cdd0 <put_lfn>
				fs->wflag = 1;
 800dbdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbde:	2201      	movs	r2, #1
 800dbe0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f7fe fe9e 	bl	800c926 <dir_next>
 800dbea:	4603      	mov	r3, r0
 800dbec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800dbf0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d107      	bne.n	800dc08 <dir_register+0x2dc>
 800dbf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	673b      	str	r3, [r7, #112]	; 0x70
 800dbfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1d4      	bne.n	800dbae <dir_register+0x282>
 800dc04:	e000      	b.n	800dc08 <dir_register+0x2dc>
				if (res != FR_OK) break;
 800dc06:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d128      	bne.n	800dc62 <dir_register+0x336>
		res = move_window(fs, dp->sect);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc14:	4619      	mov	r1, r3
 800dc16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dc18:	f7fd ff6c 	bl	800baf4 <move_window>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800dc22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d11b      	bne.n	800dc62 <dir_register+0x336>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc2e:	2220      	movs	r2, #32
 800dc30:	2100      	movs	r1, #0
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fd fd50 	bl	800b6d8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3340      	adds	r3, #64	; 0x40
 800dc40:	220b      	movs	r2, #11
 800dc42:	4619      	mov	r1, r3
 800dc44:	f7fd fd27 	bl	800b696 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc52:	330c      	adds	r3, #12
 800dc54:	f002 0218 	and.w	r2, r2, #24
 800dc58:	b2d2      	uxtb	r2, r2
 800dc5a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dc5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc5e:	2201      	movs	r2, #1
 800dc60:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dc62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3780      	adds	r7, #128	; 0x80
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	88888889 	.word	0x88888889
 800dc74:	4ec4ec4f 	.word	0x4ec4ec4f

0800dc78 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 80d8 	beq.w	800de48 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	2b04      	cmp	r3, #4
 800dc9e:	d106      	bne.n	800dcae <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	695b      	ldr	r3, [r3, #20]
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7ff fa12 	bl	800d0d0 <get_xdir_info>
		return;
 800dcac:	e0cd      	b.n	800de4a <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb6:	d032      	beq.n	800dd1e <get_fileinfo+0xa6>
			i = j = 0;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	61bb      	str	r3, [r7, #24]
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800dcc0:	e01b      	b.n	800dcfa <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800dcc2:	89fb      	ldrh	r3, [r7, #14]
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f002 f998 	bl	800fffc <ff_convert>
 800dccc:	4603      	mov	r3, r0
 800dcce:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800dcd0:	89fb      	ldrh	r3, [r7, #14]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <get_fileinfo+0x64>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	61fb      	str	r3, [r7, #28]
 800dcda:	e01a      	b.n	800dd12 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	2bfe      	cmp	r3, #254	; 0xfe
 800dce0:	d902      	bls.n	800dce8 <get_fileinfo+0x70>
 800dce2:	2300      	movs	r3, #0
 800dce4:	61fb      	str	r3, [r7, #28]
 800dce6:	e014      	b.n	800dd12 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	1c5a      	adds	r2, r3, #1
 800dcec:	61fa      	str	r2, [r7, #28]
 800dcee:	89fa      	ldrh	r2, [r7, #14]
 800dcf0:	b2d1      	uxtb	r1, r2
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	460a      	mov	r2, r1
 800dcf8:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	691a      	ldr	r2, [r3, #16]
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	1c59      	adds	r1, r3, #1
 800dd02:	61b9      	str	r1, [r7, #24]
 800dd04:	005b      	lsls	r3, r3, #1
 800dd06:	4413      	add	r3, r2
 800dd08:	881b      	ldrh	r3, [r3, #0]
 800dd0a:	81fb      	strh	r3, [r7, #14]
 800dd0c:	89fb      	ldrh	r3, [r7, #14]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1d7      	bne.n	800dcc2 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800dd12:	683a      	ldr	r2, [r7, #0]
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	4413      	add	r3, r2
 800dd18:	331a      	adds	r3, #26
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	61bb      	str	r3, [r7, #24]
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800dd26:	683a      	ldr	r2, [r7, #0]
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	331a      	adds	r3, #26
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800dd32:	e04c      	b.n	800ddce <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	1c59      	adds	r1, r3, #1
 800dd3c:	61f9      	str	r1, [r7, #28]
 800dd3e:	4413      	add	r3, r2
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
 800dd46:	2b20      	cmp	r3, #32
 800dd48:	d100      	bne.n	800dd4c <get_fileinfo+0xd4>
 800dd4a:	e040      	b.n	800ddce <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800dd4c:	7dfb      	ldrb	r3, [r7, #23]
 800dd4e:	2b05      	cmp	r3, #5
 800dd50:	d101      	bne.n	800dd56 <get_fileinfo+0xde>
 800dd52:	23e5      	movs	r3, #229	; 0xe5
 800dd54:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	2b09      	cmp	r3, #9
 800dd5a:	d10f      	bne.n	800dd7c <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800dd5c:	89bb      	ldrh	r3, [r7, #12]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d105      	bne.n	800dd6e <get_fileinfo+0xf6>
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	4413      	add	r3, r2
 800dd68:	331a      	adds	r3, #26
 800dd6a:	222e      	movs	r2, #46	; 0x2e
 800dd6c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	61ba      	str	r2, [r7, #24]
 800dd74:	683a      	ldr	r2, [r7, #0]
 800dd76:	4413      	add	r3, r2
 800dd78:	222e      	movs	r2, #46	; 0x2e
 800dd7a:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800dd7c:	683a      	ldr	r2, [r7, #0]
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	4413      	add	r3, r2
 800dd82:	330d      	adds	r3, #13
 800dd84:	7dfa      	ldrb	r2, [r7, #23]
 800dd86:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800dd88:	89bb      	ldrh	r3, [r7, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d11c      	bne.n	800ddc8 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800dd8e:	7dfb      	ldrb	r3, [r7, #23]
 800dd90:	2b40      	cmp	r3, #64	; 0x40
 800dd92:	d913      	bls.n	800ddbc <get_fileinfo+0x144>
 800dd94:	7dfb      	ldrb	r3, [r7, #23]
 800dd96:	2b5a      	cmp	r3, #90	; 0x5a
 800dd98:	d810      	bhi.n	800ddbc <get_fileinfo+0x144>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9e:	330c      	adds	r3, #12
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	461a      	mov	r2, r3
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	2b08      	cmp	r3, #8
 800dda8:	d901      	bls.n	800ddae <get_fileinfo+0x136>
 800ddaa:	2310      	movs	r3, #16
 800ddac:	e000      	b.n	800ddb0 <get_fileinfo+0x138>
 800ddae:	2308      	movs	r3, #8
 800ddb0:	4013      	ands	r3, r2
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	3320      	adds	r3, #32
 800ddba:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ddbc:	683a      	ldr	r2, [r7, #0]
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	331a      	adds	r3, #26
 800ddc4:	7dfa      	ldrb	r2, [r7, #23]
 800ddc6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	2b0a      	cmp	r3, #10
 800ddd2:	d9af      	bls.n	800dd34 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800ddd4:	89bb      	ldrh	r3, [r7, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10d      	bne.n	800ddf6 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	4413      	add	r3, r2
 800dde0:	331a      	adds	r3, #26
 800dde2:	2200      	movs	r2, #0
 800dde4:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddea:	330c      	adds	r3, #12
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <get_fileinfo+0x17e>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	330d      	adds	r3, #13
 800ddfe:	2200      	movs	r2, #0
 800de00:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de06:	7ada      	ldrb	r2, [r3, #11]
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de10:	331c      	adds	r3, #28
 800de12:	4618      	mov	r0, r3
 800de14:	f7fd fa92 	bl	800b33c <ld_dword>
 800de18:	4603      	mov	r3, r0
 800de1a:	461a      	mov	r2, r3
 800de1c:	f04f 0300 	mov.w	r3, #0
 800de20:	6839      	ldr	r1, [r7, #0]
 800de22:	e9c1 2300 	strd	r2, r3, [r1]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de2a:	3316      	adds	r3, #22
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fd fa85 	bl	800b33c <ld_dword>
 800de32:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	b29a      	uxth	r2, r3
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	815a      	strh	r2, [r3, #10]
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	0c1b      	lsrs	r3, r3, #16
 800de40:	b29a      	uxth	r2, r3
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	811a      	strh	r2, [r3, #8]
 800de46:	e000      	b.n	800de4a <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800de48:	bf00      	nop
}
 800de4a:	3720      	adds	r7, #32
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b08a      	sub	sp, #40	; 0x28
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	613b      	str	r3, [r7, #16]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	60fb      	str	r3, [r7, #12]
 800de68:	2300      	movs	r3, #0
 800de6a:	617b      	str	r3, [r7, #20]
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	1c5a      	adds	r2, r3, #1
 800de74:	61ba      	str	r2, [r7, #24]
 800de76:	693a      	ldr	r2, [r7, #16]
 800de78:	4413      	add	r3, r2
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800de7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de80:	2b1f      	cmp	r3, #31
 800de82:	d940      	bls.n	800df06 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800de84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de86:	2b2f      	cmp	r3, #47	; 0x2f
 800de88:	d006      	beq.n	800de98 <create_name+0x48>
 800de8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de8c:	2b5c      	cmp	r3, #92	; 0x5c
 800de8e:	d110      	bne.n	800deb2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de90:	e002      	b.n	800de98 <create_name+0x48>
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	3301      	adds	r3, #1
 800de96:	61bb      	str	r3, [r7, #24]
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	4413      	add	r3, r2
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	2b2f      	cmp	r3, #47	; 0x2f
 800dea2:	d0f6      	beq.n	800de92 <create_name+0x42>
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	4413      	add	r3, r2
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	2b5c      	cmp	r3, #92	; 0x5c
 800deae:	d0f0      	beq.n	800de92 <create_name+0x42>
			break;
 800deb0:	e02a      	b.n	800df08 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2bfe      	cmp	r3, #254	; 0xfe
 800deb6:	d901      	bls.n	800debc <create_name+0x6c>
 800deb8:	2306      	movs	r3, #6
 800deba:	e177      	b.n	800e1ac <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800debc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dec4:	2101      	movs	r1, #1
 800dec6:	4618      	mov	r0, r3
 800dec8:	f002 f898 	bl	800fffc <ff_convert>
 800decc:	4603      	mov	r3, r0
 800dece:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ded0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d101      	bne.n	800deda <create_name+0x8a>
 800ded6:	2306      	movs	r3, #6
 800ded8:	e168      	b.n	800e1ac <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800deda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dedc:	2b7f      	cmp	r3, #127	; 0x7f
 800dede:	d809      	bhi.n	800def4 <create_name+0xa4>
 800dee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dee2:	4619      	mov	r1, r3
 800dee4:	48b3      	ldr	r0, [pc, #716]	; (800e1b4 <create_name+0x364>)
 800dee6:	f7fd fc39 	bl	800b75c <chk_chr>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <create_name+0xa4>
 800def0:	2306      	movs	r3, #6
 800def2:	e15b      	b.n	800e1ac <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	1c5a      	adds	r2, r3, #1
 800def8:	617a      	str	r2, [r7, #20]
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	4413      	add	r3, r2
 800df00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df02:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800df04:	e7b4      	b.n	800de70 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800df06:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	441a      	add	r2, r3
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df14:	2b1f      	cmp	r3, #31
 800df16:	d801      	bhi.n	800df1c <create_name+0xcc>
 800df18:	2304      	movs	r3, #4
 800df1a:	e000      	b.n	800df1e <create_name+0xce>
 800df1c:	2300      	movs	r3, #0
 800df1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df22:	e011      	b.n	800df48 <create_name+0xf8>
		w = lfn[di - 1];
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df2a:	3b01      	subs	r3, #1
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	4413      	add	r3, r2
 800df32:	881b      	ldrh	r3, [r3, #0]
 800df34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800df36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df38:	2b20      	cmp	r3, #32
 800df3a:	d002      	beq.n	800df42 <create_name+0xf2>
 800df3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df3e:	2b2e      	cmp	r3, #46	; 0x2e
 800df40:	d106      	bne.n	800df50 <create_name+0x100>
		di--;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	3b01      	subs	r3, #1
 800df46:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1ea      	bne.n	800df24 <create_name+0xd4>
 800df4e:	e000      	b.n	800df52 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800df50:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	4413      	add	r3, r2
 800df5a:	2200      	movs	r2, #0
 800df5c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d101      	bne.n	800df68 <create_name+0x118>
 800df64:	2306      	movs	r3, #6
 800df66:	e121      	b.n	800e1ac <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3340      	adds	r3, #64	; 0x40
 800df6c:	220b      	movs	r2, #11
 800df6e:	2120      	movs	r1, #32
 800df70:	4618      	mov	r0, r3
 800df72:	f7fd fbb1 	bl	800b6d8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800df76:	2300      	movs	r3, #0
 800df78:	61bb      	str	r3, [r7, #24]
 800df7a:	e002      	b.n	800df82 <create_name+0x132>
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	3301      	adds	r3, #1
 800df80:	61bb      	str	r3, [r7, #24]
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	4413      	add	r3, r2
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	2b20      	cmp	r3, #32
 800df8e:	d0f5      	beq.n	800df7c <create_name+0x12c>
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	4413      	add	r3, r2
 800df98:	881b      	ldrh	r3, [r3, #0]
 800df9a:	2b2e      	cmp	r3, #46	; 0x2e
 800df9c:	d0ee      	beq.n	800df7c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d009      	beq.n	800dfb8 <create_name+0x168>
 800dfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa8:	f043 0303 	orr.w	r3, r3, #3
 800dfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dfb0:	e002      	b.n	800dfb8 <create_name+0x168>
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	617b      	str	r3, [r7, #20]
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d009      	beq.n	800dfd2 <create_name+0x182>
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dfc4:	3b01      	subs	r3, #1
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	4413      	add	r3, r2
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	2b2e      	cmp	r3, #46	; 0x2e
 800dfd0:	d1ef      	bne.n	800dfb2 <create_name+0x162>

	i = b = 0; ni = 8;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dfd8:	2300      	movs	r3, #0
 800dfda:	623b      	str	r3, [r7, #32]
 800dfdc:	2308      	movs	r3, #8
 800dfde:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	61ba      	str	r2, [r7, #24]
 800dfe6:	005b      	lsls	r3, r3, #1
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	4413      	add	r3, r2
 800dfec:	881b      	ldrh	r3, [r3, #0]
 800dfee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	f000 8090 	beq.w	800e118 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dffa:	2b20      	cmp	r3, #32
 800dffc:	d006      	beq.n	800e00c <create_name+0x1bc>
 800dffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e000:	2b2e      	cmp	r3, #46	; 0x2e
 800e002:	d10a      	bne.n	800e01a <create_name+0x1ca>
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d006      	beq.n	800e01a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e010:	f043 0303 	orr.w	r3, r3, #3
 800e014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e018:	e07d      	b.n	800e116 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e01a:	6a3a      	ldr	r2, [r7, #32]
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d203      	bcs.n	800e02a <create_name+0x1da>
 800e022:	69ba      	ldr	r2, [r7, #24]
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	429a      	cmp	r2, r3
 800e028:	d123      	bne.n	800e072 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	2b0b      	cmp	r3, #11
 800e02e:	d106      	bne.n	800e03e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e034:	f043 0303 	orr.w	r3, r3, #3
 800e038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e03c:	e06f      	b.n	800e11e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e03e:	69ba      	ldr	r2, [r7, #24]
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	429a      	cmp	r2, r3
 800e044:	d005      	beq.n	800e052 <create_name+0x202>
 800e046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e04a:	f043 0303 	orr.w	r3, r3, #3
 800e04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e052:	69ba      	ldr	r2, [r7, #24]
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	429a      	cmp	r2, r3
 800e058:	d860      	bhi.n	800e11c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	61bb      	str	r3, [r7, #24]
 800e05e:	2308      	movs	r3, #8
 800e060:	623b      	str	r3, [r7, #32]
 800e062:	230b      	movs	r3, #11
 800e064:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e070:	e051      	b.n	800e116 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e074:	2b7f      	cmp	r3, #127	; 0x7f
 800e076:	d914      	bls.n	800e0a2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e07a:	2100      	movs	r1, #0
 800e07c:	4618      	mov	r0, r3
 800e07e:	f001 ffbd 	bl	800fffc <ff_convert>
 800e082:	4603      	mov	r3, r0
 800e084:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d004      	beq.n	800e096 <create_name+0x246>
 800e08c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e08e:	3b80      	subs	r3, #128	; 0x80
 800e090:	4a49      	ldr	r2, [pc, #292]	; (800e1b8 <create_name+0x368>)
 800e092:	5cd3      	ldrb	r3, [r2, r3]
 800e094:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e09a:	f043 0302 	orr.w	r3, r3, #2
 800e09e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e0a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d007      	beq.n	800e0b8 <create_name+0x268>
 800e0a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4843      	ldr	r0, [pc, #268]	; (800e1bc <create_name+0x36c>)
 800e0ae:	f7fd fb55 	bl	800b75c <chk_chr>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d008      	beq.n	800e0ca <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e0b8:	235f      	movs	r3, #95	; 0x5f
 800e0ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0c0:	f043 0303 	orr.w	r3, r3, #3
 800e0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0c8:	e01b      	b.n	800e102 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e0ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0cc:	2b40      	cmp	r3, #64	; 0x40
 800e0ce:	d909      	bls.n	800e0e4 <create_name+0x294>
 800e0d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0d2:	2b5a      	cmp	r3, #90	; 0x5a
 800e0d4:	d806      	bhi.n	800e0e4 <create_name+0x294>
					b |= 2;
 800e0d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0da:	f043 0302 	orr.w	r3, r3, #2
 800e0de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e0e2:	e00e      	b.n	800e102 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0e6:	2b60      	cmp	r3, #96	; 0x60
 800e0e8:	d90b      	bls.n	800e102 <create_name+0x2b2>
 800e0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ec:	2b7a      	cmp	r3, #122	; 0x7a
 800e0ee:	d808      	bhi.n	800e102 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e0f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0f4:	f043 0301 	orr.w	r3, r3, #1
 800e0f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e0fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0fe:	3b20      	subs	r3, #32
 800e100:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e102:	6a3b      	ldr	r3, [r7, #32]
 800e104:	1c5a      	adds	r2, r3, #1
 800e106:	623a      	str	r2, [r7, #32]
 800e108:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e10a:	b2d1      	uxtb	r1, r2
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	4413      	add	r3, r2
 800e110:	460a      	mov	r2, r1
 800e112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800e116:	e763      	b.n	800dfe0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e118:	bf00      	nop
 800e11a:	e000      	b.n	800e11e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800e11c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e124:	2be5      	cmp	r3, #229	; 0xe5
 800e126:	d103      	bne.n	800e130 <create_name+0x2e0>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2205      	movs	r2, #5
 800e12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	2b08      	cmp	r3, #8
 800e134:	d104      	bne.n	800e140 <create_name+0x2f0>
 800e136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e144:	f003 030c 	and.w	r3, r3, #12
 800e148:	2b0c      	cmp	r3, #12
 800e14a:	d005      	beq.n	800e158 <create_name+0x308>
 800e14c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e150:	f003 0303 	and.w	r3, r3, #3
 800e154:	2b03      	cmp	r3, #3
 800e156:	d105      	bne.n	800e164 <create_name+0x314>
 800e158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e15c:	f043 0302 	orr.w	r3, r3, #2
 800e160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e168:	f003 0302 	and.w	r3, r3, #2
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d117      	bne.n	800e1a0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e174:	f003 0303 	and.w	r3, r3, #3
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d105      	bne.n	800e188 <create_name+0x338>
 800e17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e180:	f043 0310 	orr.w	r3, r3, #16
 800e184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e18c:	f003 030c 	and.w	r3, r3, #12
 800e190:	2b04      	cmp	r3, #4
 800e192:	d105      	bne.n	800e1a0 <create_name+0x350>
 800e194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e198:	f043 0308 	orr.w	r3, r3, #8
 800e19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e1a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800e1aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3728      	adds	r7, #40	; 0x28
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	08012030 	.word	0x08012030
 800e1b8:	08012238 	.word	0x08012238
 800e1bc:	0801203c 	.word	0x0801203c

0800e1c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e1d4:	e002      	b.n	800e1dc <follow_path+0x1c>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	603b      	str	r3, [r7, #0]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2b2f      	cmp	r3, #47	; 0x2f
 800e1e2:	d0f8      	beq.n	800e1d6 <follow_path+0x16>
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	2b5c      	cmp	r3, #92	; 0x5c
 800e1ea:	d0f4      	beq.n	800e1d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b1f      	cmp	r3, #31
 800e1fe:	d80a      	bhi.n	800e216 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2280      	movs	r2, #128	; 0x80
 800e204:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800e208:	2100      	movs	r1, #0
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7fe faf7 	bl	800c7fe <dir_sdi>
 800e210:	4603      	mov	r3, r0
 800e212:	75fb      	strb	r3, [r7, #23]
 800e214:	e07d      	b.n	800e312 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e216:	463b      	mov	r3, r7
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff fe18 	bl	800de50 <create_name>
 800e220:	4603      	mov	r3, r0
 800e222:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e224:	7dfb      	ldrb	r3, [r7, #23]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d16e      	bne.n	800e308 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff fa54 	bl	800d6d8 <dir_find>
 800e230:	4603      	mov	r3, r0
 800e232:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e23a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00a      	beq.n	800e258 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e242:	7dfb      	ldrb	r3, [r7, #23]
 800e244:	2b04      	cmp	r3, #4
 800e246:	d161      	bne.n	800e30c <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e248:	7afb      	ldrb	r3, [r7, #11]
 800e24a:	f003 0304 	and.w	r3, r3, #4
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d15c      	bne.n	800e30c <follow_path+0x14c>
 800e252:	2305      	movs	r3, #5
 800e254:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e256:	e059      	b.n	800e30c <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e258:	7afb      	ldrb	r3, [r7, #11]
 800e25a:	f003 0304 	and.w	r3, r3, #4
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d156      	bne.n	800e310 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	799b      	ldrb	r3, [r3, #6]
 800e266:	f003 0310 	and.w	r3, r3, #16
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d102      	bne.n	800e274 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800e26e:	2305      	movs	r3, #5
 800e270:	75fb      	strb	r3, [r7, #23]
 800e272:	e04e      	b.n	800e312 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	2b04      	cmp	r3, #4
 800e27a:	d130      	bne.n	800e2de <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	689a      	ldr	r2, [r3, #8]
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e28a:	4613      	mov	r3, r2
 800e28c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	79d2      	ldrb	r2, [r2, #7]
 800e294:	431a      	orrs	r2, r3
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	695b      	ldr	r3, [r3, #20]
 800e2a6:	3334      	adds	r3, #52	; 0x34
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fd f847 	bl	800b33c <ld_dword>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	695b      	ldr	r3, [r3, #20]
 800e2b8:	3321      	adds	r3, #33	; 0x21
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	f003 0302 	and.w	r3, r3, #2
 800e2c0:	b2da      	uxtb	r2, r3
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	3338      	adds	r3, #56	; 0x38
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7fd f858 	bl	800b382 <ld_qword>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	6939      	ldr	r1, [r7, #16]
 800e2d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e2dc:	e79b      	b.n	800e216 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	8992      	ldrh	r2, [r2, #12]
 800e2ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800e2f0:	fb02 f200 	mul.w	r2, r2, r0
 800e2f4:	1a9b      	subs	r3, r3, r2
 800e2f6:	440b      	add	r3, r1
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f7fe fc55 	bl	800cbaa <ld_clust>
 800e300:	4602      	mov	r2, r0
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e306:	e786      	b.n	800e216 <follow_path+0x56>
			if (res != FR_OK) break;
 800e308:	bf00      	nop
 800e30a:	e002      	b.n	800e312 <follow_path+0x152>
				break;
 800e30c:	bf00      	nop
 800e30e:	e000      	b.n	800e312 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e310:	bf00      	nop
			}
		}
	}

	return res;
 800e312:	7dfb      	ldrb	r3, [r7, #23]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3718      	adds	r7, #24
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b087      	sub	sp, #28
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e324:	f04f 33ff 	mov.w	r3, #4294967295
 800e328:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d031      	beq.n	800e396 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	617b      	str	r3, [r7, #20]
 800e338:	e002      	b.n	800e340 <get_ldnumber+0x24>
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	3301      	adds	r3, #1
 800e33e:	617b      	str	r3, [r7, #20]
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	2b1f      	cmp	r3, #31
 800e346:	d903      	bls.n	800e350 <get_ldnumber+0x34>
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	2b3a      	cmp	r3, #58	; 0x3a
 800e34e:	d1f4      	bne.n	800e33a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	2b3a      	cmp	r3, #58	; 0x3a
 800e356:	d11c      	bne.n	800e392 <get_ldnumber+0x76>
			tp = *path;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	60fa      	str	r2, [r7, #12]
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	3b30      	subs	r3, #48	; 0x30
 800e368:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2b09      	cmp	r3, #9
 800e36e:	d80e      	bhi.n	800e38e <get_ldnumber+0x72>
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	429a      	cmp	r2, r3
 800e376:	d10a      	bne.n	800e38e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d107      	bne.n	800e38e <get_ldnumber+0x72>
					vol = (int)i;
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	3301      	adds	r3, #1
 800e386:	617b      	str	r3, [r7, #20]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	e002      	b.n	800e398 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e392:	2300      	movs	r3, #0
 800e394:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e396:	693b      	ldr	r3, [r7, #16]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	371c      	adds	r7, #28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	70da      	strb	r2, [r3, #3]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ba:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7fd fb98 	bl	800baf4 <move_window>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <check_fs+0x2a>
 800e3ca:	2304      	movs	r3, #4
 800e3cc:	e044      	b.n	800e458 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	333c      	adds	r3, #60	; 0x3c
 800e3d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fc ff98 	bl	800b30c <ld_word>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	461a      	mov	r2, r3
 800e3e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d001      	beq.n	800e3ec <check_fs+0x48>
 800e3e8:	2303      	movs	r3, #3
 800e3ea:	e035      	b.n	800e458 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3f2:	2be9      	cmp	r3, #233	; 0xe9
 800e3f4:	d009      	beq.n	800e40a <check_fs+0x66>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3fc:	2beb      	cmp	r3, #235	; 0xeb
 800e3fe:	d11e      	bne.n	800e43e <check_fs+0x9a>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e406:	2b90      	cmp	r3, #144	; 0x90
 800e408:	d119      	bne.n	800e43e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	333c      	adds	r3, #60	; 0x3c
 800e40e:	3336      	adds	r3, #54	; 0x36
 800e410:	4618      	mov	r0, r3
 800e412:	f7fc ff93 	bl	800b33c <ld_dword>
 800e416:	4603      	mov	r3, r0
 800e418:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e41c:	4a10      	ldr	r2, [pc, #64]	; (800e460 <check_fs+0xbc>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d101      	bne.n	800e426 <check_fs+0x82>
 800e422:	2300      	movs	r3, #0
 800e424:	e018      	b.n	800e458 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	333c      	adds	r3, #60	; 0x3c
 800e42a:	3352      	adds	r3, #82	; 0x52
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fc ff85 	bl	800b33c <ld_dword>
 800e432:	4603      	mov	r3, r0
 800e434:	4a0b      	ldr	r2, [pc, #44]	; (800e464 <check_fs+0xc0>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d101      	bne.n	800e43e <check_fs+0x9a>
 800e43a:	2300      	movs	r3, #0
 800e43c:	e00c      	b.n	800e458 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	333c      	adds	r3, #60	; 0x3c
 800e442:	220b      	movs	r2, #11
 800e444:	4908      	ldr	r1, [pc, #32]	; (800e468 <check_fs+0xc4>)
 800e446:	4618      	mov	r0, r3
 800e448:	f7fd f961 	bl	800b70e <mem_cmp>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <check_fs+0xb2>
 800e452:	2301      	movs	r3, #1
 800e454:	e000      	b.n	800e458 <check_fs+0xb4>
#endif
	return 2;
 800e456:	2302      	movs	r3, #2
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	00544146 	.word	0x00544146
 800e464:	33544146 	.word	0x33544146
 800e468:	08012044 	.word	0x08012044

0800e46c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e46c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e470:	b098      	sub	sp, #96	; 0x60
 800e472:	af00      	add	r7, sp, #0
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	4613      	mov	r3, r2
 800e47a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	2200      	movs	r2, #0
 800e480:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f7ff ff4a 	bl	800e31c <get_ldnumber>
 800e488:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800e48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	da01      	bge.n	800e494 <find_volume+0x28>
 800e490:	230b      	movs	r3, #11
 800e492:	e36b      	b.n	800eb6c <find_volume+0x700>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e494:	4aa9      	ldr	r2, [pc, #676]	; (800e73c <find_volume+0x2d0>)
 800e496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e49c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <find_volume+0x3c>
 800e4a4:	230c      	movs	r3, #12
 800e4a6:	e361      	b.n	800eb6c <find_volume+0x700>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4ac:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
 800e4b0:	f023 0301 	bic.w	r3, r3, #1
 800e4b4:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d01a      	beq.n	800e4f4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800e4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4c0:	785b      	ldrb	r3, [r3, #1]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fc fe84 	bl	800b1d0 <disk_status>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e4ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d10c      	bne.n	800e4f4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e4da:	79fb      	ldrb	r3, [r7, #7]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d007      	beq.n	800e4f0 <find_volume+0x84>
 800e4e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e4e4:	f003 0304 	and.w	r3, r3, #4
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800e4ec:	230a      	movs	r3, #10
 800e4ee:	e33d      	b.n	800eb6c <find_volume+0x700>
			}
			return FR_OK;				/* The file system object is valid */
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	e33b      	b.n	800eb6c <find_volume+0x700>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e4f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e500:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e504:	785b      	ldrb	r3, [r3, #1]
 800e506:	4618      	mov	r0, r3
 800e508:	f7fc fe7c 	bl	800b204 <disk_initialize>
 800e50c:	4603      	mov	r3, r0
 800e50e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e512:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e516:	f003 0301 	and.w	r3, r3, #1
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d001      	beq.n	800e522 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e51e:	2303      	movs	r3, #3
 800e520:	e324      	b.n	800eb6c <find_volume+0x700>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e522:	79fb      	ldrb	r3, [r7, #7]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d007      	beq.n	800e538 <find_volume+0xcc>
 800e528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e52c:	f003 0304 	and.w	r3, r3, #4
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800e534:	230a      	movs	r3, #10
 800e536:	e319      	b.n	800eb6c <find_volume+0x700>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53a:	7858      	ldrb	r0, [r3, #1]
 800e53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53e:	330c      	adds	r3, #12
 800e540:	461a      	mov	r2, r3
 800e542:	2102      	movs	r1, #2
 800e544:	f7fc fec4 	bl	800b2d0 <disk_ioctl>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d001      	beq.n	800e552 <find_volume+0xe6>
 800e54e:	2301      	movs	r3, #1
 800e550:	e30c      	b.n	800eb6c <find_volume+0x700>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e554:	899b      	ldrh	r3, [r3, #12]
 800e556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e55a:	d80d      	bhi.n	800e578 <find_volume+0x10c>
 800e55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e55e:	899b      	ldrh	r3, [r3, #12]
 800e560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e564:	d308      	bcc.n	800e578 <find_volume+0x10c>
 800e566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e568:	899b      	ldrh	r3, [r3, #12]
 800e56a:	461a      	mov	r2, r3
 800e56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e56e:	899b      	ldrh	r3, [r3, #12]
 800e570:	3b01      	subs	r3, #1
 800e572:	4013      	ands	r3, r2
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <find_volume+0x110>
 800e578:	2301      	movs	r3, #1
 800e57a:	e2f7      	b.n	800eb6c <find_volume+0x700>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e580:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e582:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e584:	f7ff ff0e 	bl	800e3a4 <check_fs>
 800e588:	4603      	mov	r3, r0
 800e58a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e58e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e592:	2b02      	cmp	r3, #2
 800e594:	d14b      	bne.n	800e62e <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e596:	2300      	movs	r3, #0
 800e598:	64bb      	str	r3, [r7, #72]	; 0x48
 800e59a:	e01f      	b.n	800e5dc <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e59e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e5a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5a4:	011b      	lsls	r3, r3, #4
 800e5a6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e5aa:	4413      	add	r3, r2
 800e5ac:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	3304      	adds	r3, #4
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d006      	beq.n	800e5c6 <find_volume+0x15a>
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ba:	3308      	adds	r3, #8
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fc febd 	bl	800b33c <ld_dword>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	e000      	b.n	800e5c8 <find_volume+0x15c>
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800e5d0:	440b      	add	r3, r1
 800e5d2:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5d8:	3301      	adds	r3, #1
 800e5da:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5de:	2b03      	cmp	r3, #3
 800e5e0:	d9dc      	bls.n	800e59c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800e5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <find_volume+0x186>
 800e5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e5f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e600:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e604:	2b00      	cmp	r3, #0
 800e606:	d005      	beq.n	800e614 <find_volume+0x1a8>
 800e608:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e60a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e60c:	f7ff feca 	bl	800e3a4 <check_fs>
 800e610:	4603      	mov	r3, r0
 800e612:	e000      	b.n	800e616 <find_volume+0x1aa>
 800e614:	2303      	movs	r3, #3
 800e616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e61a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d905      	bls.n	800e62e <find_volume+0x1c2>
 800e622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e624:	3301      	adds	r3, #1
 800e626:	64bb      	str	r3, [r7, #72]	; 0x48
 800e628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	d9e1      	bls.n	800e5f2 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e62e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e632:	2b04      	cmp	r3, #4
 800e634:	d101      	bne.n	800e63a <find_volume+0x1ce>
 800e636:	2301      	movs	r3, #1
 800e638:	e298      	b.n	800eb6c <find_volume+0x700>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e63a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d901      	bls.n	800e646 <find_volume+0x1da>
 800e642:	230d      	movs	r3, #13
 800e644:	e292      	b.n	800eb6c <find_volume+0x700>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800e646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	f040 80fe 	bne.w	800e84c <find_volume+0x3e0>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800e650:	230b      	movs	r3, #11
 800e652:	64bb      	str	r3, [r7, #72]	; 0x48
 800e654:	e002      	b.n	800e65c <find_volume+0x1f0>
 800e656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e658:	3301      	adds	r3, #1
 800e65a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e65c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e65e:	2b3f      	cmp	r3, #63	; 0x3f
 800e660:	d806      	bhi.n	800e670 <find_volume+0x204>
 800e662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e666:	4413      	add	r3, r2
 800e668:	333c      	adds	r3, #60	; 0x3c
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d0f2      	beq.n	800e656 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800e670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e672:	2b3f      	cmp	r3, #63	; 0x3f
 800e674:	d801      	bhi.n	800e67a <find_volume+0x20e>
 800e676:	230d      	movs	r3, #13
 800e678:	e278      	b.n	800eb6c <find_volume+0x700>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800e67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e67c:	333c      	adds	r3, #60	; 0x3c
 800e67e:	3368      	adds	r3, #104	; 0x68
 800e680:	4618      	mov	r0, r3
 800e682:	f7fc fe43 	bl	800b30c <ld_word>
 800e686:	4603      	mov	r3, r0
 800e688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e68c:	d001      	beq.n	800e692 <find_volume+0x226>
 800e68e:	230d      	movs	r3, #13
 800e690:	e26c      	b.n	800eb6c <find_volume+0x700>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800e692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e694:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800e698:	461a      	mov	r2, r3
 800e69a:	2301      	movs	r3, #1
 800e69c:	4093      	lsls	r3, r2
 800e69e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6a0:	8992      	ldrh	r2, [r2, #12]
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d001      	beq.n	800e6aa <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800e6a6:	230d      	movs	r3, #13
 800e6a8:	e260      	b.n	800eb6c <find_volume+0x700>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800e6aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ac:	333c      	adds	r3, #60	; 0x3c
 800e6ae:	3348      	adds	r3, #72	; 0x48
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7fc fe66 	bl	800b382 <ld_qword>
 800e6b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	f04f 0300 	mov.w	r3, #0
 800e6be:	eb10 0802 	adds.w	r8, r0, r2
 800e6c2:	eb41 0903 	adc.w	r9, r1, r3
 800e6c6:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800e6ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	bf08      	it	eq
 800e6d2:	2a00      	cmpeq	r2, #0
 800e6d4:	d301      	bcc.n	800e6da <find_volume+0x26e>
 800e6d6:	230d      	movs	r3, #13
 800e6d8:	e248      	b.n	800eb6c <find_volume+0x700>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800e6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6dc:	333c      	adds	r3, #60	; 0x3c
 800e6de:	3354      	adds	r3, #84	; 0x54
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fc fe2b 	bl	800b33c <ld_dword>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ea:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800e6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ee:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800e6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6f4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800e6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6f8:	789b      	ldrb	r3, [r3, #2]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d001      	beq.n	800e702 <find_volume+0x296>
 800e6fe:	230d      	movs	r3, #13
 800e700:	e234      	b.n	800eb6c <find_volume+0x700>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800e702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e704:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800e708:	461a      	mov	r2, r3
 800e70a:	2301      	movs	r3, #1
 800e70c:	4093      	lsls	r3, r2
 800e70e:	b29a      	uxth	r2, r3
 800e710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e712:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800e714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e716:	895b      	ldrh	r3, [r3, #10]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d101      	bne.n	800e720 <find_volume+0x2b4>
 800e71c:	230d      	movs	r3, #13
 800e71e:	e225      	b.n	800eb6c <find_volume+0x700>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800e720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e722:	333c      	adds	r3, #60	; 0x3c
 800e724:	335c      	adds	r3, #92	; 0x5c
 800e726:	4618      	mov	r0, r3
 800e728:	f7fc fe08 	bl	800b33c <ld_dword>
 800e72c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	4a03      	ldr	r2, [pc, #12]	; (800e740 <find_volume+0x2d4>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d906      	bls.n	800e744 <find_volume+0x2d8>
 800e736:	230d      	movs	r3, #13
 800e738:	e218      	b.n	800eb6c <find_volume+0x700>
 800e73a:	bf00      	nop
 800e73c:	200000b0 	.word	0x200000b0
 800e740:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800e744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e746:	1c9a      	adds	r2, r3, #2
 800e748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e74a:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800e74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e74e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e750:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800e752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e754:	333c      	adds	r3, #60	; 0x3c
 800e756:	3358      	adds	r3, #88	; 0x58
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fc fdef 	bl	800b33c <ld_dword>
 800e75e:	4602      	mov	r2, r0
 800e760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e762:	441a      	add	r2, r3
 800e764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e766:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800e768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e76a:	333c      	adds	r3, #60	; 0x3c
 800e76c:	3350      	adds	r3, #80	; 0x50
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fc fde4 	bl	800b33c <ld_dword>
 800e774:	4602      	mov	r2, r0
 800e776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e778:	441a      	add	r2, r3
 800e77a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e77c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800e77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e782:	4618      	mov	r0, r3
 800e784:	f04f 0100 	mov.w	r1, #0
 800e788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e78a:	895b      	ldrh	r3, [r3, #10]
 800e78c:	461a      	mov	r2, r3
 800e78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e790:	fb03 f302 	mul.w	r3, r3, r2
 800e794:	461a      	mov	r2, r3
 800e796:	f04f 0300 	mov.w	r3, #0
 800e79a:	1884      	adds	r4, r0, r2
 800e79c:	eb41 0503 	adc.w	r5, r1, r3
 800e7a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e7a4:	42ab      	cmp	r3, r5
 800e7a6:	bf08      	it	eq
 800e7a8:	42a2      	cmpeq	r2, r4
 800e7aa:	d201      	bcs.n	800e7b0 <find_volume+0x344>
 800e7ac:	230d      	movs	r3, #13
 800e7ae:	e1dd      	b.n	800eb6c <find_volume+0x700>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800e7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7b2:	333c      	adds	r3, #60	; 0x3c
 800e7b4:	3360      	adds	r3, #96	; 0x60
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fc fdc0 	bl	800b33c <ld_dword>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c0:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800e7c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e7ca:	f7fd fa31 	bl	800bc30 <clust2sect>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e7d4:	f7fd f98e 	bl	800baf4 <move_window>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d001      	beq.n	800e7e2 <find_volume+0x376>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e1c4      	b.n	800eb6c <find_volume+0x700>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7e6:	e015      	b.n	800e814 <find_volume+0x3a8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800e7e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ec:	4413      	add	r3, r2
 800e7ee:	333c      	adds	r3, #60	; 0x3c
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	2b81      	cmp	r3, #129	; 0x81
 800e7f4:	d10b      	bne.n	800e80e <find_volume+0x3a2>
 800e7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7f8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e7fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7fe:	3314      	adds	r3, #20
 800e800:	4413      	add	r3, r2
 800e802:	4618      	mov	r0, r3
 800e804:	f7fc fd9a 	bl	800b33c <ld_dword>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	d009      	beq.n	800e822 <find_volume+0x3b6>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800e80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e810:	3320      	adds	r3, #32
 800e812:	64bb      	str	r3, [r7, #72]	; 0x48
 800e814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e816:	899b      	ldrh	r3, [r3, #12]
 800e818:	461a      	mov	r2, r3
 800e81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d3e3      	bcc.n	800e7e8 <find_volume+0x37c>
 800e820:	e000      	b.n	800e824 <find_volume+0x3b8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800e822:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800e824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e826:	899b      	ldrh	r3, [r3, #12]
 800e828:	461a      	mov	r2, r3
 800e82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d101      	bne.n	800e834 <find_volume+0x3c8>
 800e830:	230d      	movs	r3, #13
 800e832:	e19b      	b.n	800eb6c <find_volume+0x700>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e836:	f04f 32ff 	mov.w	r2, #4294967295
 800e83a:	61da      	str	r2, [r3, #28]
 800e83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e83e:	69da      	ldr	r2, [r3, #28]
 800e840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e842:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800e844:	2304      	movs	r3, #4
 800e846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e84a:	e177      	b.n	800eb3c <find_volume+0x6d0>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e84e:	333c      	adds	r3, #60	; 0x3c
 800e850:	330b      	adds	r3, #11
 800e852:	4618      	mov	r0, r3
 800e854:	f7fc fd5a 	bl	800b30c <ld_word>
 800e858:	4603      	mov	r3, r0
 800e85a:	461a      	mov	r2, r3
 800e85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e85e:	899b      	ldrh	r3, [r3, #12]
 800e860:	429a      	cmp	r2, r3
 800e862:	d001      	beq.n	800e868 <find_volume+0x3fc>
 800e864:	230d      	movs	r3, #13
 800e866:	e181      	b.n	800eb6c <find_volume+0x700>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e86a:	333c      	adds	r3, #60	; 0x3c
 800e86c:	3316      	adds	r3, #22
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fc fd4c 	bl	800b30c <ld_word>
 800e874:	4603      	mov	r3, r0
 800e876:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d106      	bne.n	800e88c <find_volume+0x420>
 800e87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e880:	333c      	adds	r3, #60	; 0x3c
 800e882:	3324      	adds	r3, #36	; 0x24
 800e884:	4618      	mov	r0, r3
 800e886:	f7fc fd59 	bl	800b33c <ld_dword>
 800e88a:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800e88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e88e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e890:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e894:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800e898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e89a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e89e:	789b      	ldrb	r3, [r3, #2]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d005      	beq.n	800e8b0 <find_volume+0x444>
 800e8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8a6:	789b      	ldrb	r3, [r3, #2]
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d001      	beq.n	800e8b0 <find_volume+0x444>
 800e8ac:	230d      	movs	r3, #13
 800e8ae:	e15d      	b.n	800eb6c <find_volume+0x700>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b2:	789b      	ldrb	r3, [r3, #2]
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8b8:	fb02 f303 	mul.w	r3, r2, r3
 800e8bc:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8cc:	895b      	ldrh	r3, [r3, #10]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d008      	beq.n	800e8e4 <find_volume+0x478>
 800e8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d4:	895b      	ldrh	r3, [r3, #10]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8da:	895b      	ldrh	r3, [r3, #10]
 800e8dc:	3b01      	subs	r3, #1
 800e8de:	4013      	ands	r3, r2
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d001      	beq.n	800e8e8 <find_volume+0x47c>
 800e8e4:	230d      	movs	r3, #13
 800e8e6:	e141      	b.n	800eb6c <find_volume+0x700>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ea:	333c      	adds	r3, #60	; 0x3c
 800e8ec:	3311      	adds	r3, #17
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fc fd0c 	bl	800b30c <ld_word>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8fe:	891b      	ldrh	r3, [r3, #8]
 800e900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e902:	8992      	ldrh	r2, [r2, #12]
 800e904:	0952      	lsrs	r2, r2, #5
 800e906:	b292      	uxth	r2, r2
 800e908:	fbb3 f1f2 	udiv	r1, r3, r2
 800e90c:	fb02 f201 	mul.w	r2, r2, r1
 800e910:	1a9b      	subs	r3, r3, r2
 800e912:	b29b      	uxth	r3, r3
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <find_volume+0x4b0>
 800e918:	230d      	movs	r3, #13
 800e91a:	e127      	b.n	800eb6c <find_volume+0x700>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91e:	333c      	adds	r3, #60	; 0x3c
 800e920:	3313      	adds	r3, #19
 800e922:	4618      	mov	r0, r3
 800e924:	f7fc fcf2 	bl	800b30c <ld_word>
 800e928:	4603      	mov	r3, r0
 800e92a:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d106      	bne.n	800e940 <find_volume+0x4d4>
 800e932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e934:	333c      	adds	r3, #60	; 0x3c
 800e936:	3320      	adds	r3, #32
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fc fcff 	bl	800b33c <ld_dword>
 800e93e:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e942:	333c      	adds	r3, #60	; 0x3c
 800e944:	330e      	adds	r3, #14
 800e946:	4618      	mov	r0, r3
 800e948:	f7fc fce0 	bl	800b30c <ld_word>
 800e94c:	4603      	mov	r3, r0
 800e94e:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e950:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <find_volume+0x4ee>
 800e956:	230d      	movs	r3, #13
 800e958:	e108      	b.n	800eb6c <find_volume+0x700>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e95a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e95c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e95e:	4413      	add	r3, r2
 800e960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e962:	8911      	ldrh	r1, [r2, #8]
 800e964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e966:	8992      	ldrh	r2, [r2, #12]
 800e968:	0952      	lsrs	r2, r2, #5
 800e96a:	b292      	uxth	r2, r2
 800e96c:	fbb1 f2f2 	udiv	r2, r1, r2
 800e970:	b292      	uxth	r2, r2
 800e972:	4413      	add	r3, r2
 800e974:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d201      	bcs.n	800e982 <find_volume+0x516>
 800e97e:	230d      	movs	r3, #13
 800e980:	e0f4      	b.n	800eb6c <find_volume+0x700>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e98a:	8952      	ldrh	r2, [r2, #10]
 800e98c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e990:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <find_volume+0x530>
 800e998:	230d      	movs	r3, #13
 800e99a:	e0e7      	b.n	800eb6c <find_volume+0x700>
		fmt = FS_FAT32;
 800e99c:	2303      	movs	r3, #3
 800e99e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d802      	bhi.n	800e9b2 <find_volume+0x546>
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d802      	bhi.n	800e9c2 <find_volume+0x556>
 800e9bc:	2301      	movs	r3, #1
 800e9be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c4:	1c9a      	adds	r2, r3, #2
 800e9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9c8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800e9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9ce:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e9d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9d4:	441a      	add	r2, r3
 800e9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d8:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800e9da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9de:	441a      	add	r2, r3
 800e9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9e2:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800e9e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9e8:	2b03      	cmp	r3, #3
 800e9ea:	d11e      	bne.n	800ea2a <find_volume+0x5be>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ee:	333c      	adds	r3, #60	; 0x3c
 800e9f0:	332a      	adds	r3, #42	; 0x2a
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fc fc8a 	bl	800b30c <ld_word>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d001      	beq.n	800ea02 <find_volume+0x596>
 800e9fe:	230d      	movs	r3, #13
 800ea00:	e0b4      	b.n	800eb6c <find_volume+0x700>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ea02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea04:	891b      	ldrh	r3, [r3, #8]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <find_volume+0x5a2>
 800ea0a:	230d      	movs	r3, #13
 800ea0c:	e0ae      	b.n	800eb6c <find_volume+0x700>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ea0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea10:	333c      	adds	r3, #60	; 0x3c
 800ea12:	332c      	adds	r3, #44	; 0x2c
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fc fc91 	bl	800b33c <ld_dword>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea1e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ea20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea22:	6a1b      	ldr	r3, [r3, #32]
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea28:	e01f      	b.n	800ea6a <find_volume+0x5fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ea2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea2c:	891b      	ldrh	r3, [r3, #8]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <find_volume+0x5ca>
 800ea32:	230d      	movs	r3, #13
 800ea34:	e09a      	b.n	800eb6c <find_volume+0x700>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ea36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea3c:	441a      	add	r2, r3
 800ea3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea40:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d103      	bne.n	800ea52 <find_volume+0x5e6>
 800ea4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4c:	6a1b      	ldr	r3, [r3, #32]
 800ea4e:	005b      	lsls	r3, r3, #1
 800ea50:	e00a      	b.n	800ea68 <find_volume+0x5fc>
 800ea52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea54:	6a1a      	ldr	r2, [r3, #32]
 800ea56:	4613      	mov	r3, r2
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	4413      	add	r3, r2
 800ea5c:	085a      	lsrs	r2, r3, #1
 800ea5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea60:	6a1b      	ldr	r3, [r3, #32]
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ea68:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ea6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea70:	899b      	ldrh	r3, [r3, #12]
 800ea72:	4619      	mov	r1, r3
 800ea74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea76:	440b      	add	r3, r1
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea7c:	8989      	ldrh	r1, [r1, #12]
 800ea7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d201      	bcs.n	800ea8a <find_volume+0x61e>
 800ea86:	230d      	movs	r3, #13
 800ea88:	e070      	b.n	800eb6c <find_volume+0x700>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ea8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea90:	61da      	str	r2, [r3, #28]
 800ea92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea94:	69da      	ldr	r2, [r3, #28]
 800ea96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea98:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800ea9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea9c:	2280      	movs	r2, #128	; 0x80
 800ea9e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eaa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eaa4:	2b03      	cmp	r3, #3
 800eaa6:	d149      	bne.n	800eb3c <find_volume+0x6d0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800eaa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaaa:	333c      	adds	r3, #60	; 0x3c
 800eaac:	3330      	adds	r3, #48	; 0x30
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fc fc2c 	bl	800b30c <ld_word>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d140      	bne.n	800eb3c <find_volume+0x6d0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eaba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eabc:	3301      	adds	r3, #1
 800eabe:	4619      	mov	r1, r3
 800eac0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eac2:	f7fd f817 	bl	800baf4 <move_window>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d137      	bne.n	800eb3c <find_volume+0x6d0>
		{
			fs->fsi_flag = 0;
 800eacc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eace:	2200      	movs	r2, #0
 800ead0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ead2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead4:	333c      	adds	r3, #60	; 0x3c
 800ead6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fc fc16 	bl	800b30c <ld_word>
 800eae0:	4603      	mov	r3, r0
 800eae2:	461a      	mov	r2, r3
 800eae4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d127      	bne.n	800eb3c <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800eaec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaee:	333c      	adds	r3, #60	; 0x3c
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fc fc23 	bl	800b33c <ld_dword>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	4a1f      	ldr	r2, [pc, #124]	; (800eb78 <find_volume+0x70c>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d11e      	bne.n	800eb3c <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800eafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb00:	333c      	adds	r3, #60	; 0x3c
 800eb02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fc fc18 	bl	800b33c <ld_dword>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	4a1b      	ldr	r2, [pc, #108]	; (800eb7c <find_volume+0x710>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d113      	bne.n	800eb3c <find_volume+0x6d0>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800eb14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb16:	333c      	adds	r3, #60	; 0x3c
 800eb18:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fc fc0d 	bl	800b33c <ld_dword>
 800eb22:	4602      	mov	r2, r0
 800eb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb26:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800eb28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb2a:	333c      	adds	r3, #60	; 0x3c
 800eb2c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fc fc03 	bl	800b33c <ld_dword>
 800eb36:	4602      	mov	r2, r0
 800eb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb3a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800eb3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb3e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800eb42:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800eb44:	4b0e      	ldr	r3, [pc, #56]	; (800eb80 <find_volume+0x714>)
 800eb46:	881b      	ldrh	r3, [r3, #0]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	4b0c      	ldr	r3, [pc, #48]	; (800eb80 <find_volume+0x714>)
 800eb4e:	801a      	strh	r2, [r3, #0]
 800eb50:	4b0b      	ldr	r3, [pc, #44]	; (800eb80 <find_volume+0x714>)
 800eb52:	881a      	ldrh	r2, [r3, #0]
 800eb54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb56:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800eb58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb5a:	4a0a      	ldr	r2, [pc, #40]	; (800eb84 <find_volume+0x718>)
 800eb5c:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800eb5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb60:	4a09      	ldr	r2, [pc, #36]	; (800eb88 <find_volume+0x71c>)
 800eb62:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800eb64:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eb66:	f7fc ff5d 	bl	800ba24 <clear_lock>
#endif
	return FR_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3760      	adds	r7, #96	; 0x60
 800eb70:	46bd      	mov	sp, r7
 800eb72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800eb76:	bf00      	nop
 800eb78:	41615252 	.word	0x41615252
 800eb7c:	61417272 	.word	0x61417272
 800eb80:	200000b4 	.word	0x200000b4
 800eb84:	20000338 	.word	0x20000338
 800eb88:	200000d8 	.word	0x200000d8

0800eb8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800eb96:	2309      	movs	r3, #9
 800eb98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d01c      	beq.n	800ebda <validate+0x4e>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d018      	beq.n	800ebda <validate+0x4e>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d013      	beq.n	800ebda <validate+0x4e>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	889a      	ldrh	r2, [r3, #4]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	88db      	ldrh	r3, [r3, #6]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d10c      	bne.n	800ebda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	785b      	ldrb	r3, [r3, #1]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fc fb02 	bl	800b1d0 <disk_status>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d101      	bne.n	800ebda <validate+0x4e>
			res = FR_OK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ebda:	7bfb      	ldrb	r3, [r7, #15]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d102      	bne.n	800ebe6 <validate+0x5a>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	e000      	b.n	800ebe8 <validate+0x5c>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	683a      	ldr	r2, [r7, #0]
 800ebea:	6013      	str	r3, [r2, #0]
	return res;
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b088      	sub	sp, #32
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	4613      	mov	r3, r2
 800ec04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ec0a:	f107 0310 	add.w	r3, r7, #16
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff fb84 	bl	800e31c <get_ldnumber>
 800ec14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	da01      	bge.n	800ec20 <f_mount+0x28>
 800ec1c:	230b      	movs	r3, #11
 800ec1e:	e02b      	b.n	800ec78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ec20:	4a17      	ldr	r2, [pc, #92]	; (800ec80 <f_mount+0x88>)
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d005      	beq.n	800ec3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ec30:	69b8      	ldr	r0, [r7, #24]
 800ec32:	f7fc fef7 	bl	800ba24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2200      	movs	r2, #0
 800ec46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	490d      	ldr	r1, [pc, #52]	; (800ec80 <f_mount+0x88>)
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <f_mount+0x66>
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d001      	beq.n	800ec62 <f_mount+0x6a>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	e00a      	b.n	800ec78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ec62:	f107 010c 	add.w	r1, r7, #12
 800ec66:	f107 0308 	add.w	r3, r7, #8
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7ff fbfd 	bl	800e46c <find_volume>
 800ec72:	4603      	mov	r3, r0
 800ec74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ec76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3720      	adds	r7, #32
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	200000b0 	.word	0x200000b0

0800ec84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ec84:	b5b0      	push	{r4, r5, r7, lr}
 800ec86:	b0a2      	sub	sp, #136	; 0x88
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d101      	bne.n	800ec9c <f_open+0x18>
 800ec98:	2309      	movs	r3, #9
 800ec9a:	e2a0      	b.n	800f1de <f_open+0x55a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ec9c:	79fb      	ldrb	r3, [r7, #7]
 800ec9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eca2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eca4:	79fa      	ldrb	r2, [r7, #7]
 800eca6:	f107 0114 	add.w	r1, r7, #20
 800ecaa:	f107 0308 	add.w	r3, r7, #8
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7ff fbdc 	bl	800e46c <find_volume>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 800ecba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	f040 8284 	bne.w	800f1cc <f_open+0x548>
		dj.obj.fs = fs;
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ecc8:	68ba      	ldr	r2, [r7, #8]
 800ecca:	f107 0318 	add.w	r3, r7, #24
 800ecce:	4611      	mov	r1, r2
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7ff fa75 	bl	800e1c0 <follow_path>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ecdc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d11a      	bne.n	800ed1a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ece4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ece8:	b25b      	sxtb	r3, r3
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	da03      	bge.n	800ecf6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ecee:	2306      	movs	r3, #6
 800ecf0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ecf4:	e011      	b.n	800ed1a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	f023 0301 	bic.w	r3, r3, #1
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	bf14      	ite	ne
 800ed00:	2301      	movne	r3, #1
 800ed02:	2300      	moveq	r3, #0
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	461a      	mov	r2, r3
 800ed08:	f107 0318 	add.w	r3, r7, #24
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fc fd40 	bl	800b794 <chk_lock>
 800ed14:	4603      	mov	r3, r0
 800ed16:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	f003 031c 	and.w	r3, r3, #28
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f000 8109 	beq.w	800ef38 <f_open+0x2b4>
			if (res != FR_OK) {					/* No file, create new */
 800ed26:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d017      	beq.n	800ed5e <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ed2e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	d10e      	bne.n	800ed54 <f_open+0xd0>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ed36:	f7fc fd89 	bl	800b84c <enq_lock>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d006      	beq.n	800ed4e <f_open+0xca>
 800ed40:	f107 0318 	add.w	r3, r7, #24
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fe fdf1 	bl	800d92c <dir_register>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	e000      	b.n	800ed50 <f_open+0xcc>
 800ed4e:	2312      	movs	r3, #18
 800ed50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ed54:	79fb      	ldrb	r3, [r7, #7]
 800ed56:	f043 0308 	orr.w	r3, r3, #8
 800ed5a:	71fb      	strb	r3, [r7, #7]
 800ed5c:	e010      	b.n	800ed80 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ed5e:	7fbb      	ldrb	r3, [r7, #30]
 800ed60:	f003 0311 	and.w	r3, r3, #17
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d003      	beq.n	800ed70 <f_open+0xec>
					res = FR_DENIED;
 800ed68:	2307      	movs	r3, #7
 800ed6a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ed6e:	e007      	b.n	800ed80 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	f003 0304 	and.w	r3, r3, #4
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d002      	beq.n	800ed80 <f_open+0xfc>
 800ed7a:	2308      	movs	r3, #8
 800ed7c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ed80:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f040 80f1 	bne.w	800ef6c <f_open+0x2e8>
 800ed8a:	79fb      	ldrb	r3, [r7, #7]
 800ed8c:	f003 0308 	and.w	r3, r3, #8
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f000 80eb 	beq.w	800ef6c <f_open+0x2e8>
				dw = GET_FATTIME();
 800ed96:	f7f9 fa1f 	bl	80081d8 <get_fattime>
 800ed9a:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	f040 8082 	bne.w	800eeaa <f_open+0x226>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	3334      	adds	r3, #52	; 0x34
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fc fac2 	bl	800b33c <ld_dword>
 800edb8:	4602      	mov	r2, r0
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	695b      	ldr	r3, [r3, #20]
 800edc2:	3338      	adds	r3, #56	; 0x38
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fc fadc 	bl	800b382 <ld_qword>
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	68f9      	ldr	r1, [r7, #12]
 800edd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	3321      	adds	r3, #33	; 0x21
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	f003 0302 	and.w	r3, r3, #2
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2200      	movs	r2, #0
 800edea:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	695b      	ldr	r3, [r3, #20]
 800edf0:	3308      	adds	r3, #8
 800edf2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fc fb9a 	bl	800b52e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	695b      	ldr	r3, [r3, #20]
 800edfe:	3314      	adds	r3, #20
 800ee00:	2200      	movs	r2, #0
 800ee02:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	695b      	ldr	r3, [r3, #20]
 800ee08:	330c      	adds	r3, #12
 800ee0a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fc fb8e 	bl	800b52e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	3315      	adds	r3, #21
 800ee18:	2200      	movs	r2, #0
 800ee1a:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	695b      	ldr	r3, [r3, #20]
 800ee20:	3304      	adds	r3, #4
 800ee22:	2220      	movs	r2, #32
 800ee24:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	695b      	ldr	r3, [r3, #20]
 800ee2a:	3334      	adds	r3, #52	; 0x34
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fc fb7d 	bl	800b52e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	695b      	ldr	r3, [r3, #20]
 800ee38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee3c:	f04f 0200 	mov.w	r2, #0
 800ee40:	f04f 0300 	mov.w	r3, #0
 800ee44:	4608      	mov	r0, r1
 800ee46:	f7fc fb9e 	bl	800b586 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ee52:	f04f 0200 	mov.w	r2, #0
 800ee56:	f04f 0300 	mov.w	r3, #0
 800ee5a:	4608      	mov	r0, r1
 800ee5c:	f7fc fb93 	bl	800b586 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	695b      	ldr	r3, [r3, #20]
 800ee64:	3321      	adds	r3, #33	; 0x21
 800ee66:	2201      	movs	r2, #1
 800ee68:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800ee6a:	f107 0318 	add.w	r3, r7, #24
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fe faa9 	bl	800d3c6 <store_xdir>
 800ee74:	4603      	mov	r3, r0
 800ee76:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800ee7a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d174      	bne.n	800ef6c <f_open+0x2e8>
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d070      	beq.n	800ef6c <f_open+0x2e8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800ee8a:	68f8      	ldr	r0, [r7, #12]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	2200      	movs	r2, #0
 800ee92:	4619      	mov	r1, r3
 800ee94:	f7fd faba 	bl	800c40c <remove_chain>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	689a      	ldr	r2, [r3, #8]
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	3a01      	subs	r2, #1
 800eea6:	619a      	str	r2, [r3, #24]
 800eea8:	e060      	b.n	800ef6c <f_open+0x2e8>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eeaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeac:	330e      	adds	r3, #14
 800eeae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fc fb3c 	bl	800b52e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eeb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeb8:	3316      	adds	r3, #22
 800eeba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fc fb36 	bl	800b52e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eec4:	330b      	adds	r3, #11
 800eec6:	2220      	movs	r2, #32
 800eec8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eece:	4611      	mov	r1, r2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fd fe6a 	bl	800cbaa <ld_clust>
 800eed6:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eedc:	2200      	movs	r2, #0
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fd fe82 	bl	800cbe8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eee6:	331c      	adds	r3, #28
 800eee8:	2100      	movs	r1, #0
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fc fb1f 	bl	800b52e <st_dword>
					fs->wflag = 1;
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	2201      	movs	r2, #1
 800eef4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d037      	beq.n	800ef6c <f_open+0x2e8>
						dw = fs->winsect;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef00:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 800ef02:	f107 0318 	add.w	r3, r7, #24
 800ef06:	2200      	movs	r2, #0
 800ef08:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fd fa7e 	bl	800c40c <remove_chain>
 800ef10:	4603      	mov	r3, r0
 800ef12:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800ef16:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d126      	bne.n	800ef6c <f_open+0x2e8>
							res = move_window(fs, dw);
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fc fde6 	bl	800baf4 <move_window>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ef32:	3a01      	subs	r2, #1
 800ef34:	619a      	str	r2, [r3, #24]
 800ef36:	e019      	b.n	800ef6c <f_open+0x2e8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ef38:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d115      	bne.n	800ef6c <f_open+0x2e8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef40:	7fbb      	ldrb	r3, [r7, #30]
 800ef42:	f003 0310 	and.w	r3, r3, #16
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d003      	beq.n	800ef52 <f_open+0x2ce>
					res = FR_NO_FILE;
 800ef4a:	2304      	movs	r3, #4
 800ef4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ef50:	e00c      	b.n	800ef6c <f_open+0x2e8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef52:	79fb      	ldrb	r3, [r7, #7]
 800ef54:	f003 0302 	and.w	r3, r3, #2
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d007      	beq.n	800ef6c <f_open+0x2e8>
 800ef5c:	7fbb      	ldrb	r3, [r7, #30]
 800ef5e:	f003 0301 	and.w	r3, r3, #1
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d002      	beq.n	800ef6c <f_open+0x2e8>
						res = FR_DENIED;
 800ef66:	2307      	movs	r3, #7
 800ef68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 800ef6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d128      	bne.n	800efc6 <f_open+0x342>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ef74:	79fb      	ldrb	r3, [r7, #7]
 800ef76:	f003 0308 	and.w	r3, r3, #8
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d003      	beq.n	800ef86 <f_open+0x302>
				mode |= FA_MODIFIED;
 800ef7e:	79fb      	ldrb	r3, [r7, #7]
 800ef80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800ef8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	f023 0301 	bic.w	r3, r3, #1
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	bf14      	ite	ne
 800ef9e:	2301      	movne	r3, #1
 800efa0:	2300      	moveq	r3, #0
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	461a      	mov	r2, r3
 800efa6:	f107 0318 	add.w	r3, r7, #24
 800efaa:	4611      	mov	r1, r2
 800efac:	4618      	mov	r0, r3
 800efae:	f7fc fc6f 	bl	800b890 <inc_lock>
 800efb2:	4602      	mov	r2, r0
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d102      	bne.n	800efc6 <f_open+0x342>
 800efc0:	2302      	movs	r3, #2
 800efc2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 800efc6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f040 80fe 	bne.w	800f1cc <f_open+0x548>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	2b04      	cmp	r3, #4
 800efd6:	d12c      	bne.n	800f032 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800efd8:	6a3a      	ldr	r2, [r7, #32]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800efde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800efe2:	4613      	mov	r3, r2
 800efe4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800efe8:	7ffa      	ldrb	r2, [r7, #31]
 800efea:	431a      	orrs	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800eff0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	695b      	ldr	r3, [r3, #20]
 800effa:	3334      	adds	r3, #52	; 0x34
 800effc:	4618      	mov	r0, r3
 800effe:	f7fc f99d 	bl	800b33c <ld_dword>
 800f002:	4602      	mov	r2, r0
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	695b      	ldr	r3, [r3, #20]
 800f00c:	3338      	adds	r3, #56	; 0x38
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fc f9b7 	bl	800b382 <ld_qword>
 800f014:	4602      	mov	r2, r0
 800f016:	460b      	mov	r3, r1
 800f018:	68f9      	ldr	r1, [r7, #12]
 800f01a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	695b      	ldr	r3, [r3, #20]
 800f022:	3321      	adds	r3, #33	; 0x21
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	f003 0302 	and.w	r3, r3, #2
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	71da      	strb	r2, [r3, #7]
 800f030:	e014      	b.n	800f05c <f_open+0x3d8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f036:	4611      	mov	r1, r2
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fd fdb6 	bl	800cbaa <ld_clust>
 800f03e:	4602      	mov	r2, r0
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f046:	331c      	adds	r3, #28
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fc f977 	bl	800b33c <ld_dword>
 800f04e:	4603      	mov	r3, r0
 800f050:	461a      	mov	r2, r3
 800f052:	f04f 0300 	mov.w	r3, #0
 800f056:	68f9      	ldr	r1, [r7, #12]
 800f058:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f062:	697a      	ldr	r2, [r7, #20]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	88da      	ldrh	r2, [r3, #6]
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	79fa      	ldrb	r2, [r7, #7]
 800f074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2200      	movs	r2, #0
 800f084:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f086:	68f9      	ldr	r1, [r7, #12]
 800f088:	f04f 0200 	mov.w	r2, #0
 800f08c:	f04f 0300 	mov.w	r3, #0
 800f090:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	3354      	adds	r3, #84	; 0x54
 800f098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f09c:	2100      	movs	r1, #0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fc fb1a 	bl	800b6d8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f0a4:	79fb      	ldrb	r3, [r7, #7]
 800f0a6:	f003 0320 	and.w	r3, r3, #32
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f000 808e 	beq.w	800f1cc <f_open+0x548>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	f000 8088 	beq.w	800f1cc <f_open+0x548>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f0c2:	68f9      	ldr	r1, [r7, #12]
 800f0c4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	895b      	ldrh	r3, [r3, #10]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	899b      	ldrh	r3, [r3, #12]
 800f0d2:	fb03 f302 	mul.w	r3, r3, r2
 800f0d6:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f0e6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800f0ea:	e021      	b.n	800f130 <f_open+0x4ac>
					clst = get_fat(&fp->obj, clst);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fc fdbc 	bl	800bc70 <get_fat>
 800f0f8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 800f0fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f100:	2b01      	cmp	r3, #1
 800f102:	d802      	bhi.n	800f10a <f_open+0x486>
 800f104:	2302      	movs	r3, #2
 800f106:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f10a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f112:	d102      	bne.n	800f11a <f_open+0x496>
 800f114:	2301      	movs	r3, #1
 800f116:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f11a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f11c:	461a      	mov	r2, r3
 800f11e:	f04f 0300 	mov.w	r3, #0
 800f122:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f126:	1a84      	subs	r4, r0, r2
 800f128:	eb61 0503 	sbc.w	r5, r1, r3
 800f12c:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
 800f130:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f134:	2b00      	cmp	r3, #0
 800f136:	d109      	bne.n	800f14c <f_open+0x4c8>
 800f138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f13a:	4618      	mov	r0, r3
 800f13c:	f04f 0100 	mov.w	r1, #0
 800f140:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f144:	4299      	cmp	r1, r3
 800f146:	bf08      	it	eq
 800f148:	4290      	cmpeq	r0, r2
 800f14a:	d3cf      	bcc.n	800f0ec <f_open+0x468>
				}
				fp->clust = clst;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f152:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f154:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d137      	bne.n	800f1cc <f_open+0x548>
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	899b      	ldrh	r3, [r3, #12]
 800f160:	b29a      	uxth	r2, r3
 800f162:	f04f 0300 	mov.w	r3, #0
 800f166:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f16a:	f7f1 fbb7 	bl	80008dc <__aeabi_uldivmod>
 800f16e:	4313      	orrs	r3, r2
 800f170:	d02c      	beq.n	800f1cc <f_open+0x548>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fc fd59 	bl	800bc30 <clust2sect>
 800f17e:	66b8      	str	r0, [r7, #104]	; 0x68
 800f180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f182:	2b00      	cmp	r3, #0
 800f184:	d103      	bne.n	800f18e <f_open+0x50a>
						res = FR_INT_ERR;
 800f186:	2302      	movs	r3, #2
 800f188:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f18c:	e01e      	b.n	800f1cc <f_open+0x548>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	899b      	ldrh	r3, [r3, #12]
 800f192:	b29a      	uxth	r2, r3
 800f194:	f04f 0300 	mov.w	r3, #0
 800f198:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f19c:	f7f1 fb9e 	bl	80008dc <__aeabi_uldivmod>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1a6:	441a      	add	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	7858      	ldrb	r0, [r3, #1]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	f7fc f848 	bl	800b250 <disk_read>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <f_open+0x548>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f1cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d002      	beq.n	800f1da <f_open+0x556>
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f1da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3788      	adds	r7, #136	; 0x88
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bdb0      	pop	{r4, r5, r7, pc}

0800f1e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f1e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1e8:	b08d      	sub	sp, #52	; 0x34
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	60f8      	str	r0, [r7, #12]
 800f1ee:	60b9      	str	r1, [r7, #8]
 800f1f0:	607a      	str	r2, [r7, #4]
 800f1f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f107 0210 	add.w	r2, r7, #16
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff fcc0 	bl	800eb8c <validate>
 800f20c:	4603      	mov	r3, r0
 800f20e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f216:	2b00      	cmp	r3, #0
 800f218:	d108      	bne.n	800f22c <f_write+0x46>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <f_write+0x4c>
 800f22c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f230:	e1a1      	b.n	800f576 <f_write+0x390>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f238:	f003 0302 	and.w	r3, r3, #2
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <f_write+0x5e>
 800f240:	2307      	movs	r3, #7
 800f242:	e198      	b.n	800f576 <f_write+0x390>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	2b04      	cmp	r3, #4
 800f24a:	f000 8184 	beq.w	800f556 <f_write+0x370>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	18d1      	adds	r1, r2, r3
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f25e:	4613      	mov	r3, r2
 800f260:	4299      	cmp	r1, r3
 800f262:	f080 8178 	bcs.w	800f556 <f_write+0x370>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f26c:	4613      	mov	r3, r2
 800f26e:	43db      	mvns	r3, r3
 800f270:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f272:	e170      	b.n	800f556 <f_write+0x370>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	899b      	ldrh	r3, [r3, #12]
 800f27e:	b29a      	uxth	r2, r3
 800f280:	f04f 0300 	mov.w	r3, #0
 800f284:	f7f1 fb2a 	bl	80008dc <__aeabi_uldivmod>
 800f288:	4313      	orrs	r3, r2
 800f28a:	f040 8107 	bne.w	800f49c <f_write+0x2b6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	899b      	ldrh	r3, [r3, #12]
 800f298:	b29a      	uxth	r2, r3
 800f29a:	f04f 0300 	mov.w	r3, #0
 800f29e:	f7f1 fb1d 	bl	80008dc <__aeabi_uldivmod>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	895b      	ldrh	r3, [r3, #10]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d146      	bne.n	800f344 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	d10c      	bne.n	800f2da <f_write+0xf4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d11a      	bne.n	800f302 <f_write+0x11c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fd f94f 	bl	800c574 <create_chain>
 800f2d6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f2d8:	e013      	b.n	800f302 <f_write+0x11c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d007      	beq.n	800f2f2 <f_write+0x10c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f7fd fa44 	bl	800c776 <clmt_clust>
 800f2ee:	62b8      	str	r0, [r7, #40]	; 0x28
 800f2f0:	e007      	b.n	800f302 <f_write+0x11c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	f7fd f93a 	bl	800c574 <create_chain>
 800f300:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f304:	2b00      	cmp	r3, #0
 800f306:	f000 812b 	beq.w	800f560 <f_write+0x37a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d105      	bne.n	800f31c <f_write+0x136>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2202      	movs	r2, #2
 800f314:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f318:	2302      	movs	r3, #2
 800f31a:	e12c      	b.n	800f576 <f_write+0x390>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f322:	d105      	bne.n	800f330 <f_write+0x14a>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2201      	movs	r2, #1
 800f328:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f32c:	2301      	movs	r3, #1
 800f32e:	e122      	b.n	800f576 <f_write+0x390>
				fp->clust = clst;			/* Update current cluster */
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f334:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d102      	bne.n	800f344 <f_write+0x15e>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f342:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f34a:	b25b      	sxtb	r3, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	da1b      	bge.n	800f388 <f_write+0x1a2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	7858      	ldrb	r0, [r3, #1]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f35e:	2301      	movs	r3, #1
 800f360:	f7fb ff96 	bl	800b290 <disk_write>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d005      	beq.n	800f376 <f_write+0x190>
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f372:	2301      	movs	r3, #1
 800f374:	e0ff      	b.n	800f576 <f_write+0x390>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f380:	b2da      	uxtb	r2, r3
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f38e:	4619      	mov	r1, r3
 800f390:	4610      	mov	r0, r2
 800f392:	f7fc fc4d 	bl	800bc30 <clust2sect>
 800f396:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d105      	bne.n	800f3aa <f_write+0x1c4>
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2202      	movs	r2, #2
 800f3a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f3a6:	2302      	movs	r3, #2
 800f3a8:	e0e5      	b.n	800f576 <f_write+0x390>
			sect += csect;
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	899b      	ldrh	r3, [r3, #12]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3be:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f3c0:	6a3b      	ldr	r3, [r7, #32]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d046      	beq.n	800f454 <f_write+0x26e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f3c6:	69ba      	ldr	r2, [r7, #24]
 800f3c8:	6a3b      	ldr	r3, [r7, #32]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	693a      	ldr	r2, [r7, #16]
 800f3ce:	8952      	ldrh	r2, [r2, #10]
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d905      	bls.n	800f3e0 <f_write+0x1fa>
					cc = fs->csize - csect;
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	895b      	ldrh	r3, [r3, #10]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	7858      	ldrb	r0, [r3, #1]
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	69f9      	ldr	r1, [r7, #28]
 800f3ea:	f7fb ff51 	bl	800b290 <disk_write>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d005      	beq.n	800f400 <f_write+0x21a>
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	e0ba      	b.n	800f576 <f_write+0x390>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	6a3a      	ldr	r2, [r7, #32]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d91a      	bls.n	800f444 <f_write+0x25e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	1ad3      	subs	r3, r2, r3
 800f41c:	693a      	ldr	r2, [r7, #16]
 800f41e:	8992      	ldrh	r2, [r2, #12]
 800f420:	fb02 f303 	mul.w	r3, r2, r3
 800f424:	69fa      	ldr	r2, [r7, #28]
 800f426:	18d1      	adds	r1, r2, r3
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	899b      	ldrh	r3, [r3, #12]
 800f42c:	461a      	mov	r2, r3
 800f42e:	f7fc f932 	bl	800b696 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f43c:	b2da      	uxtb	r2, r3
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	899b      	ldrh	r3, [r3, #12]
 800f448:	461a      	mov	r2, r3
 800f44a:	6a3b      	ldr	r3, [r7, #32]
 800f44c:	fb02 f303 	mul.w	r3, r2, r3
 800f450:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f452:	e056      	b.n	800f502 <f_write+0x31c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f458:	697a      	ldr	r2, [r7, #20]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d01b      	beq.n	800f496 <f_write+0x2b0>
				fp->fptr < fp->obj.objsize &&
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f46a:	4299      	cmp	r1, r3
 800f46c:	bf08      	it	eq
 800f46e:	4290      	cmpeq	r0, r2
 800f470:	d211      	bcs.n	800f496 <f_write+0x2b0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	7858      	ldrb	r0, [r3, #1]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f47c:	2301      	movs	r3, #1
 800f47e:	697a      	ldr	r2, [r7, #20]
 800f480:	f7fb fee6 	bl	800b250 <disk_read>
 800f484:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f486:	2b00      	cmp	r3, #0
 800f488:	d005      	beq.n	800f496 <f_write+0x2b0>
					ABORT(fs, FR_DISK_ERR);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f492:	2301      	movs	r3, #1
 800f494:	e06f      	b.n	800f576 <f_write+0x390>
			}
#endif
			fp->sect = sect;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	697a      	ldr	r2, [r7, #20]
 800f49a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	899b      	ldrh	r3, [r3, #12]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	693a      	ldr	r2, [r7, #16]
 800f4ac:	8992      	ldrh	r2, [r2, #12]
 800f4ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4b2:	fb02 f201 	mul.w	r2, r2, r1
 800f4b6:	1a9b      	subs	r3, r3, r2
 800f4b8:	1ac3      	subs	r3, r0, r3
 800f4ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d901      	bls.n	800f4c8 <f_write+0x2e2>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f103 0654 	add.w	r6, r3, #84	; 0x54
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	899b      	ldrh	r3, [r3, #12]
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	f04f 0300 	mov.w	r3, #0
 800f4de:	f7f1 f9fd 	bl	80008dc <__aeabi_uldivmod>
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	4433      	add	r3, r6
 800f4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4e8:	69f9      	ldr	r1, [r7, #28]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fc f8d3 	bl	800b696 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f4f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f4fa:	b2da      	uxtb	r2, r3
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f502:	69fa      	ldr	r2, [r7, #28]
 800f504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f506:	4413      	add	r3, r2
 800f508:	61fb      	str	r3, [r7, #28]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	461a      	mov	r2, r3
 800f514:	f04f 0300 	mov.w	r3, #0
 800f518:	1884      	adds	r4, r0, r2
 800f51a:	eb41 0503 	adc.w	r5, r1, r3
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f52a:	68f9      	ldr	r1, [r7, #12]
 800f52c:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800f530:	428b      	cmp	r3, r1
 800f532:	bf08      	it	eq
 800f534:	4282      	cmpeq	r2, r0
 800f536:	d201      	bcs.n	800f53c <f_write+0x356>
 800f538:	4602      	mov	r2, r0
 800f53a:	460b      	mov	r3, r1
 800f53c:	68f9      	ldr	r1, [r7, #12]
 800f53e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f548:	441a      	add	r2, r3
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f47f ae8b 	bne.w	800f274 <f_write+0x8e>
 800f55e:	e000      	b.n	800f562 <f_write+0x37c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f560:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f56c:	b2da      	uxtb	r2, r3
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3734      	adds	r7, #52	; 0x34
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f57e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b09a      	sub	sp, #104	; 0x68
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f58c:	4611      	mov	r1, r2
 800f58e:	4618      	mov	r0, r3
 800f590:	f7ff fafc 	bl	800eb8c <validate>
 800f594:	4603      	mov	r3, r0
 800f596:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f59a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f040 8105 	bne.w	800f7ae <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f000 80fd 	beq.w	800f7ae <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5ba:	b25b      	sxtb	r3, r3
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	da17      	bge.n	800f5f0 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f5c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5c2:	7858      	ldrb	r0, [r3, #1]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	f7fb fe5e 	bl	800b290 <disk_write>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <f_sync+0x60>
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e0e9      	b.n	800f7b2 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5e8:	b2da      	uxtb	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f5f0:	f7f8 fdf2 	bl	80081d8 <get_fattime>
 800f5f4:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f5f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	2b04      	cmp	r3, #4
 800f5fc:	f040 808c 	bne.w	800f718 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4618      	mov	r0, r3
 800f604:	f7fc fea2 	bl	800c34c <fill_first_frag>
 800f608:	4603      	mov	r3, r0
 800f60a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800f60e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f612:	2b00      	cmp	r3, #0
 800f614:	d10a      	bne.n	800f62c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f61c:	f04f 32ff 	mov.w	r2, #4294967295
 800f620:	4619      	mov	r1, r3
 800f622:	f7fc fec2 	bl	800c3aa <fill_last_frag>
 800f626:	4603      	mov	r3, r0
 800f628:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800f62c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f630:	2b00      	cmp	r3, #0
 800f632:	f040 80bc 	bne.w	800f7ae <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	f107 0308 	add.w	r3, r7, #8
 800f63c:	4611      	mov	r1, r2
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fd fe86 	bl	800d350 <load_obj_dir>
 800f644:	4603      	mov	r3, r0
 800f646:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800f64a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f040 80ad 	bne.w	800f7ae <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800f654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f656:	695b      	ldr	r3, [r3, #20]
 800f658:	3304      	adds	r3, #4
 800f65a:	781a      	ldrb	r2, [r3, #0]
 800f65c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f65e:	695b      	ldr	r3, [r3, #20]
 800f660:	3304      	adds	r3, #4
 800f662:	f042 0220 	orr.w	r2, r2, #32
 800f666:	b2d2      	uxtb	r2, r2
 800f668:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	79da      	ldrb	r2, [r3, #7]
 800f66e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	3321      	adds	r3, #33	; 0x21
 800f674:	f042 0201 	orr.w	r2, r2, #1
 800f678:	b2d2      	uxtb	r2, r2
 800f67a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800f67c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f67e:	695b      	ldr	r3, [r3, #20]
 800f680:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	4619      	mov	r1, r3
 800f68a:	4610      	mov	r0, r2
 800f68c:	f7fb ff4f 	bl	800b52e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800f690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f692:	695b      	ldr	r3, [r3, #20]
 800f694:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f69e:	4608      	mov	r0, r1
 800f6a0:	f7fb ff71 	bl	800b586 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800f6a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f6b2:	4608      	mov	r0, r1
 800f6b4:	f7fb ff67 	bl	800b586 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f6b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6ba:	695b      	ldr	r3, [r3, #20]
 800f6bc:	330c      	adds	r3, #12
 800f6be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fb ff34 	bl	800b52e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f6c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6c8:	695b      	ldr	r3, [r3, #20]
 800f6ca:	3315      	adds	r3, #21
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f6d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	3310      	adds	r3, #16
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fb ff28 	bl	800b52e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f6de:	f107 0308 	add.w	r3, r7, #8
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fd fe6f 	bl	800d3c6 <store_xdir>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f6ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d15b      	bne.n	800f7ae <f_sync+0x230>
							res = sync_fs(fs);
 800f6f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fc fa29 	bl	800bb50 <sync_fs>
 800f6fe:	4603      	mov	r3, r0
 800f700:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f70a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f716:	e04a      	b.n	800f7ae <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f71e:	4619      	mov	r1, r3
 800f720:	4610      	mov	r0, r2
 800f722:	f7fc f9e7 	bl	800baf4 <move_window>
 800f726:	4603      	mov	r3, r0
 800f728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800f72c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f730:	2b00      	cmp	r3, #0
 800f732:	d13c      	bne.n	800f7ae <f_sync+0x230>
					dir = fp->dir_ptr;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f738:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f73a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f73c:	330b      	adds	r3, #11
 800f73e:	781a      	ldrb	r2, [r3, #0]
 800f740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f742:	330b      	adds	r3, #11
 800f744:	f042 0220 	orr.w	r2, r2, #32
 800f748:	b2d2      	uxtb	r2, r2
 800f74a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6818      	ldr	r0, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	461a      	mov	r2, r3
 800f756:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f758:	f7fd fa46 	bl	800cbe8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f75c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f75e:	f103 001c 	add.w	r0, r3, #28
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f768:	4613      	mov	r3, r2
 800f76a:	4619      	mov	r1, r3
 800f76c:	f7fb fedf 	bl	800b52e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f772:	3316      	adds	r3, #22
 800f774:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f776:	4618      	mov	r0, r3
 800f778:	f7fb fed9 	bl	800b52e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f77c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f77e:	3312      	adds	r3, #18
 800f780:	2100      	movs	r1, #0
 800f782:	4618      	mov	r0, r3
 800f784:	f7fb feb8 	bl	800b4f8 <st_word>
					fs->wflag = 1;
 800f788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f78a:	2201      	movs	r2, #1
 800f78c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f78e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f790:	4618      	mov	r0, r3
 800f792:	f7fc f9dd 	bl	800bb50 <sync_fs>
 800f796:	4603      	mov	r3, r0
 800f798:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f7ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3768      	adds	r7, #104	; 0x68
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b084      	sub	sp, #16
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f7ff fedb 	bl	800f57e <f_sync>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f7cc:	7bfb      	ldrb	r3, [r7, #15]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d118      	bne.n	800f804 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f107 0208 	add.w	r2, r7, #8
 800f7d8:	4611      	mov	r1, r2
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7ff f9d6 	bl	800eb8c <validate>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f7e4:	7bfb      	ldrb	r3, [r7, #15]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d10c      	bne.n	800f804 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fc f8dc 	bl	800b9ac <dec_lock>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f7f8:	7bfb      	ldrb	r3, [r7, #15]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d102      	bne.n	800f804 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f804:	7bfb      	ldrb	r3, [r7, #15]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b086      	sub	sp, #24
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <f_opendir+0x14>
 800f81e:	2309      	movs	r3, #9
 800f820:	e09a      	b.n	800f958 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f826:	f107 010c 	add.w	r1, r7, #12
 800f82a:	463b      	mov	r3, r7
 800f82c:	2200      	movs	r2, #0
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe fe1c 	bl	800e46c <find_volume>
 800f834:	4603      	mov	r3, r0
 800f836:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f838:	7dfb      	ldrb	r3, [r7, #23]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f040 8085 	bne.w	800f94a <f_opendir+0x13c>
		obj->fs = fs;
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	4619      	mov	r1, r3
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7fe fcb8 	bl	800e1c0 <follow_path>
 800f850:	4603      	mov	r3, r0
 800f852:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f854:	7dfb      	ldrb	r3, [r7, #23]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d172      	bne.n	800f940 <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f860:	b25b      	sxtb	r3, r3
 800f862:	2b00      	cmp	r3, #0
 800f864:	db47      	blt.n	800f8f6 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	799b      	ldrb	r3, [r3, #6]
 800f86a:	f003 0310 	and.w	r3, r3, #16
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d03f      	beq.n	800f8f2 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	2b04      	cmp	r3, #4
 800f878:	d130      	bne.n	800f8dc <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	689a      	ldr	r2, [r3, #8]
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f888:	4613      	mov	r3, r2
 800f88a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	79d2      	ldrb	r2, [r2, #7]
 800f892:	431a      	orrs	r2, r3
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	695b      	ldr	r3, [r3, #20]
 800f8a4:	3334      	adds	r3, #52	; 0x34
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7fb fd48 	bl	800b33c <ld_dword>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	695b      	ldr	r3, [r3, #20]
 800f8b6:	3338      	adds	r3, #56	; 0x38
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fb fd62 	bl	800b382 <ld_qword>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	6939      	ldr	r1, [r7, #16]
 800f8c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	695b      	ldr	r3, [r3, #20]
 800f8cc:	3321      	adds	r3, #33	; 0x21
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	f003 0302 	and.w	r3, r3, #2
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	71da      	strb	r2, [r3, #7]
 800f8da:	e00c      	b.n	800f8f6 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	f7fd f960 	bl	800cbaa <ld_clust>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	609a      	str	r2, [r3, #8]
 800f8f0:	e001      	b.n	800f8f6 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f8f2:	2305      	movs	r3, #5
 800f8f4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f8f6:	7dfb      	ldrb	r3, [r7, #23]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d121      	bne.n	800f940 <f_opendir+0x132>
				obj->id = fs->id;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	88da      	ldrh	r2, [r3, #6]
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f904:	2100      	movs	r1, #0
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7fc ff79 	bl	800c7fe <dir_sdi>
 800f90c:	4603      	mov	r3, r0
 800f90e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f910:	7dfb      	ldrb	r3, [r7, #23]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d114      	bne.n	800f940 <f_opendir+0x132>
					if (obj->sclust) {
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00d      	beq.n	800f93a <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f91e:	2100      	movs	r1, #0
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7fb ffb5 	bl	800b890 <inc_lock>
 800f926:	4602      	mov	r2, r0
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f930:	2b00      	cmp	r3, #0
 800f932:	d105      	bne.n	800f940 <f_opendir+0x132>
 800f934:	2312      	movs	r3, #18
 800f936:	75fb      	strb	r3, [r7, #23]
 800f938:	e002      	b.n	800f940 <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	2200      	movs	r2, #0
 800f93e:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f940:	7dfb      	ldrb	r3, [r7, #23]
 800f942:	2b04      	cmp	r3, #4
 800f944:	d101      	bne.n	800f94a <f_opendir+0x13c>
 800f946:	2305      	movs	r3, #5
 800f948:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d002      	beq.n	800f956 <f_opendir+0x148>
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	2200      	movs	r2, #0
 800f954:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f956:	7dfb      	ldrb	r3, [r7, #23]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3718      	adds	r7, #24
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f107 0208 	add.w	r2, r7, #8
 800f96e:	4611      	mov	r1, r2
 800f970:	4618      	mov	r0, r3
 800f972:	f7ff f90b 	bl	800eb8c <validate>
 800f976:	4603      	mov	r3, r0
 800f978:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d110      	bne.n	800f9a2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f984:	2b00      	cmp	r3, #0
 800f986:	d006      	beq.n	800f996 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fc f80d 	bl	800b9ac <dec_lock>
 800f992:	4603      	mov	r3, r0
 800f994:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f996:	7bfb      	ldrb	r3, [r7, #15]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d102      	bne.n	800f9a2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3710      	adds	r7, #16
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f107 0208 	add.w	r2, r7, #8
 800f9bc:	4611      	mov	r1, r2
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7ff f8e4 	bl	800eb8c <validate>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d126      	bne.n	800fa1c <f_readdir+0x70>
		if (!fno) {
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d106      	bne.n	800f9e2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7fc ff11 	bl	800c7fe <dir_sdi>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	73fb      	strb	r3, [r7, #15]
 800f9e0:	e01c      	b.n	800fa1c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fd fdb0 	bl	800d54a <dir_read>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f9ee:	7bfb      	ldrb	r3, [r7, #15]
 800f9f0:	2b04      	cmp	r3, #4
 800f9f2:	d101      	bne.n	800f9f8 <f_readdir+0x4c>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d10e      	bne.n	800fa1c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f9fe:	6839      	ldr	r1, [r7, #0]
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f7fe f939 	bl	800dc78 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fa06:	2100      	movs	r1, #0
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7fc ff8c 	bl	800c926 <dir_next>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
 800fa14:	2b04      	cmp	r3, #4
 800fa16:	d101      	bne.n	800fa1c <f_readdir+0x70>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b098      	sub	sp, #96	; 0x60
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
 800fa2e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800fa30:	f107 0108 	add.w	r1, r7, #8
 800fa34:	1d3b      	adds	r3, r7, #4
 800fa36:	2200      	movs	r2, #0
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe fd17 	bl	800e46c <find_volume>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fa44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d11f      	bne.n	800fa8c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	f107 0308 	add.w	r3, r7, #8
 800fa52:	4611      	mov	r1, r2
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fe fbb3 	bl	800e1c0 <follow_path>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800fa60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d111      	bne.n	800fa8c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800fa68:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fa6c:	b25b      	sxtb	r3, r3
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	da03      	bge.n	800fa7a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800fa72:	2306      	movs	r3, #6
 800fa74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fa78:	e008      	b.n	800fa8c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d005      	beq.n	800fa8c <f_stat+0x66>
 800fa80:	f107 0308 	add.w	r3, r7, #8
 800fa84:	6839      	ldr	r1, [r7, #0]
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fe f8f6 	bl	800dc78 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800fa8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3760      	adds	r7, #96	; 0x60
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b09a      	sub	sp, #104	; 0x68
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800faa4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800faa8:	f107 030c 	add.w	r3, r7, #12
 800faac:	2200      	movs	r2, #0
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fe fcdc 	bl	800e46c <find_volume>
 800fab4:	4603      	mov	r3, r0
 800fab6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800faba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f040 80eb 	bne.w	800fc9a <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800fac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800faca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800facc:	69da      	ldr	r2, [r3, #28]
 800face:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	3b02      	subs	r3, #2
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d804      	bhi.n	800fae2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800fad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fada:	69da      	ldr	r2, [r3, #28]
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	601a      	str	r2, [r3, #0]
 800fae0:	e0db      	b.n	800fc9a <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800fae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	2b01      	cmp	r3, #1
 800faec:	d128      	bne.n	800fb40 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800faee:	2302      	movs	r3, #2
 800faf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800faf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faf4:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800faf6:	f107 0310 	add.w	r3, r7, #16
 800fafa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7fc f8b7 	bl	800bc70 <get_fat>
 800fb02:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fb04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0a:	d103      	bne.n	800fb14 <f_getfree+0x7c>
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fb12:	e0b5      	b.n	800fc80 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fb14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d103      	bne.n	800fb22 <f_getfree+0x8a>
 800fb1a:	2302      	movs	r3, #2
 800fb1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fb20:	e0ae      	b.n	800fc80 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800fb22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d102      	bne.n	800fb2e <f_getfree+0x96>
 800fb28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800fb2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb30:	3301      	adds	r3, #1
 800fb32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb36:	6a1b      	ldr	r3, [r3, #32]
 800fb38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d3db      	bcc.n	800faf6 <f_getfree+0x5e>
 800fb3e:	e09f      	b.n	800fc80 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800fb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	2b04      	cmp	r3, #4
 800fb46:	d14b      	bne.n	800fbe0 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800fb48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb4a:	6a1b      	ldr	r3, [r3, #32]
 800fb4c:	3b02      	subs	r3, #2
 800fb4e:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800fb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb54:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800fb56:	2300      	movs	r3, #0
 800fb58:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800fb5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d10d      	bne.n	800fb7c <f_getfree+0xe4>
 800fb60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fb62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb64:	1c5a      	adds	r2, r3, #1
 800fb66:	65ba      	str	r2, [r7, #88]	; 0x58
 800fb68:	4619      	mov	r1, r3
 800fb6a:	f7fb ffc3 	bl	800baf4 <move_window>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fb74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d17e      	bne.n	800fc7a <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800fb7c:	2308      	movs	r3, #8
 800fb7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb84:	4413      	add	r3, r2
 800fb86:	333c      	adds	r3, #60	; 0x3c
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fb8e:	e013      	b.n	800fbb8 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800fb90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb94:	f003 0301 	and.w	r3, r3, #1
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d102      	bne.n	800fba2 <f_getfree+0x10a>
 800fb9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb9e:	3301      	adds	r3, #1
 800fba0:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800fba2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fba6:	085b      	lsrs	r3, r3, #1
 800fba8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800fbac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fbb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d002      	beq.n	800fbc4 <f_getfree+0x12c>
 800fbbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1e5      	bne.n	800fb90 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800fbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbca:	8992      	ldrh	r2, [r2, #12]
 800fbcc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbd0:	fb02 f201 	mul.w	r2, r2, r1
 800fbd4:	1a9b      	subs	r3, r3, r2
 800fbd6:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800fbd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d1bd      	bne.n	800fb5a <f_getfree+0xc2>
 800fbde:	e04f      	b.n	800fc80 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800fbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe2:	6a1b      	ldr	r3, [r3, #32]
 800fbe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fbe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbea:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800fbec:	2300      	movs	r3, #0
 800fbee:	657b      	str	r3, [r7, #84]	; 0x54
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800fbf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d113      	bne.n	800fc22 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800fbfa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fbfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbfe:	1c5a      	adds	r2, r3, #1
 800fc00:	65ba      	str	r2, [r7, #88]	; 0x58
 800fc02:	4619      	mov	r1, r3
 800fc04:	f7fb ff76 	bl	800baf4 <move_window>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800fc0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d133      	bne.n	800fc7e <f_getfree+0x1e6>
							p = fs->win;
 800fc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc18:	333c      	adds	r3, #60	; 0x3c
 800fc1a:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800fc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc1e:	899b      	ldrh	r3, [r3, #12]
 800fc20:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800fc22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d10f      	bne.n	800fc4a <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800fc2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fc2c:	f7fb fb6e 	bl	800b30c <ld_word>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d102      	bne.n	800fc3c <f_getfree+0x1a4>
 800fc36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc38:	3301      	adds	r3, #1
 800fc3a:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800fc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc3e:	3302      	adds	r3, #2
 800fc40:	653b      	str	r3, [r7, #80]	; 0x50
 800fc42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc44:	3b02      	subs	r3, #2
 800fc46:	657b      	str	r3, [r7, #84]	; 0x54
 800fc48:	e010      	b.n	800fc6c <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800fc4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fc4c:	f7fb fb76 	bl	800b33c <ld_dword>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d102      	bne.n	800fc60 <f_getfree+0x1c8>
 800fc5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800fc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc62:	3304      	adds	r3, #4
 800fc64:	653b      	str	r3, [r7, #80]	; 0x50
 800fc66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc68:	3b04      	subs	r3, #4
 800fc6a:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800fc6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc6e:	3b01      	subs	r3, #1
 800fc70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1bd      	bne.n	800fbf4 <f_getfree+0x15c>
 800fc78:	e002      	b.n	800fc80 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800fc7a:	bf00      	nop
 800fc7c:	e000      	b.n	800fc80 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800fc7e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc84:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800fc86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc8a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800fc8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc8e:	791a      	ldrb	r2, [r3, #4]
 800fc90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc92:	f042 0201 	orr.w	r2, r2, #1
 800fc96:	b2d2      	uxtb	r2, r2
 800fc98:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800fc9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3768      	adds	r7, #104	; 0x68
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b0a0      	sub	sp, #128	; 0x80
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800fcae:	f107 010c 	add.w	r1, r7, #12
 800fcb2:	1d3b      	adds	r3, r7, #4
 800fcb4:	2202      	movs	r2, #2
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe fbd8 	bl	800e46c <find_volume>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800fcc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f040 8133 	bne.w	800ff36 <f_mkdir+0x290>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	f107 0310 	add.w	r3, r7, #16
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fe fa71 	bl	800e1c0 <follow_path>
 800fcde:	4603      	mov	r3, r0
 800fce0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800fce4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d102      	bne.n	800fcf2 <f_mkdir+0x4c>
 800fcec:	2308      	movs	r3, #8
 800fcee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800fcf2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fcf6:	2b04      	cmp	r3, #4
 800fcf8:	f040 811d 	bne.w	800ff36 <f_mkdir+0x290>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800fcfc:	f107 0310 	add.w	r3, r7, #16
 800fd00:	2100      	movs	r1, #0
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fc fc36 	bl	800c574 <create_chain>
 800fd08:	66f8      	str	r0, [r7, #108]	; 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	895b      	ldrh	r3, [r3, #10]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	899b      	ldrh	r3, [r3, #12]
 800fd14:	fb03 f302 	mul.w	r3, r3, r2
 800fd18:	461a      	mov	r2, r3
 800fd1a:	f04f 0300 	mov.w	r3, #0
 800fd1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
			res = FR_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800fd28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d102      	bne.n	800fd34 <f_mkdir+0x8e>
 800fd2e:	2307      	movs	r3, #7
 800fd30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 800fd34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d102      	bne.n	800fd40 <f_mkdir+0x9a>
 800fd3a:	2302      	movs	r3, #2
 800fd3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fd40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd46:	d102      	bne.n	800fd4e <f_mkdir+0xa8>
 800fd48:	2301      	movs	r3, #1
 800fd4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800fd4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d106      	bne.n	800fd64 <f_mkdir+0xbe>
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fb fe87 	bl	800ba6c <sync_window>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 800fd64:	f7f8 fa38 	bl	80081d8 <get_fattime>
 800fd68:	66b8      	str	r0, [r7, #104]	; 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 800fd6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d170      	bne.n	800fe54 <f_mkdir+0x1ae>
				dsc = clust2sect(fs, dcl);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fb ff5a 	bl	800bc30 <clust2sect>
 800fd7c:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	333c      	adds	r3, #60	; 0x3c
 800fd82:	667b      	str	r3, [r7, #100]	; 0x64
				mem_set(dir, 0, SS(fs));
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	899b      	ldrh	r3, [r3, #12]
 800fd88:	461a      	mov	r2, r3
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fd8e:	f7fb fca3 	bl	800b6d8 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	d036      	beq.n	800fe08 <f_mkdir+0x162>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800fd9a:	220b      	movs	r2, #11
 800fd9c:	2120      	movs	r1, #32
 800fd9e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fda0:	f7fb fc9a 	bl	800b6d8 <mem_set>
					dir[DIR_Name] = '.';
 800fda4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fda6:	222e      	movs	r2, #46	; 0x2e
 800fda8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800fdaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdac:	330b      	adds	r3, #11
 800fdae:	2210      	movs	r2, #16
 800fdb0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800fdb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdb4:	3316      	adds	r3, #22
 800fdb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fb fbb8 	bl	800b52e <st_dword>
					st_clust(fs, dir, dcl);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fdc2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7fc ff0f 	bl	800cbe8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800fdca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdcc:	3320      	adds	r3, #32
 800fdce:	2220      	movs	r2, #32
 800fdd0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fb fc5f 	bl	800b696 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800fdd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdda:	3321      	adds	r3, #33	; 0x21
 800fddc:	222e      	movs	r2, #46	; 0x2e
 800fdde:	701a      	strb	r2, [r3, #0]
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d106      	bne.n	800fdfa <f_mkdir+0x154>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d101      	bne.n	800fdfa <f_mkdir+0x154>
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdfe:	3320      	adds	r3, #32
 800fe00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe02:	4619      	mov	r1, r3
 800fe04:	f7fc fef0 	bl	800cbe8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	895b      	ldrh	r3, [r3, #10]
 800fe0c:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe0e:	e01c      	b.n	800fe4a <f_mkdir+0x1a4>
					fs->winsect = dsc++;
 800fe10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe12:	1c5a      	adds	r2, r3, #1
 800fe14:	677a      	str	r2, [r7, #116]	; 0x74
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fb fe22 	bl	800ba6c <sync_window>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 800fe2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d10d      	bne.n	800fe52 <f_mkdir+0x1ac>
					mem_set(dir, 0, SS(fs));
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	899b      	ldrh	r3, [r3, #12]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fe40:	f7fb fc4a 	bl	800b6d8 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fe44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe46:	3b01      	subs	r3, #1
 800fe48:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d1df      	bne.n	800fe10 <f_mkdir+0x16a>
 800fe50:	e000      	b.n	800fe54 <f_mkdir+0x1ae>
					if (res != FR_OK) break;
 800fe52:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800fe54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d107      	bne.n	800fe6c <f_mkdir+0x1c6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800fe5c:	f107 0310 	add.w	r3, r7, #16
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fd fd63 	bl	800d92c <dir_register>
 800fe66:	4603      	mov	r3, r0
 800fe68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 800fe6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d159      	bne.n	800ff28 <f_mkdir+0x282>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	2b04      	cmp	r3, #4
 800fe7a:	d134      	bne.n	800fee6 <f_mkdir+0x240>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	695b      	ldr	r3, [r3, #20]
 800fe80:	330c      	adds	r3, #12
 800fe82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fb fb52 	bl	800b52e <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	695b      	ldr	r3, [r3, #20]
 800fe8e:	3334      	adds	r3, #52	; 0x34
 800fe90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7fb fb4b 	bl	800b52e <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	695b      	ldr	r3, [r3, #20]
 800fe9c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fea0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fea4:	4613      	mov	r3, r2
 800fea6:	4619      	mov	r1, r3
 800fea8:	f7fb fb41 	bl	800b52e <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	695b      	ldr	r3, [r3, #20]
 800feb0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800feb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800feb8:	4613      	mov	r3, r2
 800feba:	4619      	mov	r1, r3
 800febc:	f7fb fb37 	bl	800b52e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	695b      	ldr	r3, [r3, #20]
 800fec4:	3321      	adds	r3, #33	; 0x21
 800fec6:	2203      	movs	r2, #3
 800fec8:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	695b      	ldr	r3, [r3, #20]
 800fece:	3304      	adds	r3, #4
 800fed0:	2210      	movs	r2, #16
 800fed2:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800fed4:	f107 0310 	add.w	r3, r7, #16
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fd fa74 	bl	800d3c6 <store_xdir>
 800fede:	4603      	mov	r3, r0
 800fee0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800fee4:	e014      	b.n	800ff10 <f_mkdir+0x26a>
				} else
#endif
				{
					dir = dj.dir;
 800fee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fee8:	667b      	str	r3, [r7, #100]	; 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800feea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800feec:	3316      	adds	r3, #22
 800feee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7fb fb1c 	bl	800b52e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fefa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7fc fe73 	bl	800cbe8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ff02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff04:	330b      	adds	r3, #11
 800ff06:	2210      	movs	r2, #16
 800ff08:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ff10:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10e      	bne.n	800ff36 <f_mkdir+0x290>
					res = sync_fs(fs);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fb fe18 	bl	800bb50 <sync_fs>
 800ff20:	4603      	mov	r3, r0
 800ff22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ff26:	e006      	b.n	800ff36 <f_mkdir+0x290>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800ff28:	f107 0310 	add.w	r3, r7, #16
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fc fa6b 	bl	800c40c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ff36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3780      	adds	r7, #128	; 0x80
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
	...

0800ff44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b087      	sub	sp, #28
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	4613      	mov	r3, r2
 800ff50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ff52:	2301      	movs	r3, #1
 800ff54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ff56:	2300      	movs	r3, #0
 800ff58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ff5a:	4b1f      	ldr	r3, [pc, #124]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff5c:	7a5b      	ldrb	r3, [r3, #9]
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d131      	bne.n	800ffc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ff64:	4b1c      	ldr	r3, [pc, #112]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff66:	7a5b      	ldrb	r3, [r3, #9]
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	4b1a      	ldr	r3, [pc, #104]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff6e:	2100      	movs	r1, #0
 800ff70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ff72:	4b19      	ldr	r3, [pc, #100]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff74:	7a5b      	ldrb	r3, [r3, #9]
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	4a17      	ldr	r2, [pc, #92]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	4413      	add	r3, r2
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ff82:	4b15      	ldr	r3, [pc, #84]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff84:	7a5b      	ldrb	r3, [r3, #9]
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	461a      	mov	r2, r3
 800ff8a:	4b13      	ldr	r3, [pc, #76]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff8c:	4413      	add	r3, r2
 800ff8e:	79fa      	ldrb	r2, [r7, #7]
 800ff90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ff92:	4b11      	ldr	r3, [pc, #68]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff94:	7a5b      	ldrb	r3, [r3, #9]
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	1c5a      	adds	r2, r3, #1
 800ff9a:	b2d1      	uxtb	r1, r2
 800ff9c:	4a0e      	ldr	r2, [pc, #56]	; (800ffd8 <FATFS_LinkDriverEx+0x94>)
 800ff9e:	7251      	strb	r1, [r2, #9]
 800ffa0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ffa2:	7dbb      	ldrb	r3, [r7, #22]
 800ffa4:	3330      	adds	r3, #48	; 0x30
 800ffa6:	b2da      	uxtb	r2, r3
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	223a      	movs	r2, #58	; 0x3a
 800ffb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	3302      	adds	r3, #2
 800ffb8:	222f      	movs	r2, #47	; 0x2f
 800ffba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	3303      	adds	r3, #3
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ffc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	371c      	adds	r7, #28
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	20000538 	.word	0x20000538

0800ffdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	6839      	ldr	r1, [r7, #0]
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f7ff ffaa 	bl	800ff44 <FATFS_LinkDriverEx>
 800fff0:	4603      	mov	r3, r0
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3708      	adds	r7, #8
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
	...

0800fffc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	4603      	mov	r3, r0
 8010004:	6039      	str	r1, [r7, #0]
 8010006:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010008:	88fb      	ldrh	r3, [r7, #6]
 801000a:	2b7f      	cmp	r3, #127	; 0x7f
 801000c:	d802      	bhi.n	8010014 <ff_convert+0x18>
		c = chr;
 801000e:	88fb      	ldrh	r3, [r7, #6]
 8010010:	81fb      	strh	r3, [r7, #14]
 8010012:	e025      	b.n	8010060 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00b      	beq.n	8010032 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801001a:	88fb      	ldrh	r3, [r7, #6]
 801001c:	2bff      	cmp	r3, #255	; 0xff
 801001e:	d805      	bhi.n	801002c <ff_convert+0x30>
 8010020:	88fb      	ldrh	r3, [r7, #6]
 8010022:	3b80      	subs	r3, #128	; 0x80
 8010024:	4a12      	ldr	r2, [pc, #72]	; (8010070 <ff_convert+0x74>)
 8010026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801002a:	e000      	b.n	801002e <ff_convert+0x32>
 801002c:	2300      	movs	r3, #0
 801002e:	81fb      	strh	r3, [r7, #14]
 8010030:	e016      	b.n	8010060 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010032:	2300      	movs	r3, #0
 8010034:	81fb      	strh	r3, [r7, #14]
 8010036:	e009      	b.n	801004c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010038:	89fb      	ldrh	r3, [r7, #14]
 801003a:	4a0d      	ldr	r2, [pc, #52]	; (8010070 <ff_convert+0x74>)
 801003c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010040:	88fa      	ldrh	r2, [r7, #6]
 8010042:	429a      	cmp	r2, r3
 8010044:	d006      	beq.n	8010054 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010046:	89fb      	ldrh	r3, [r7, #14]
 8010048:	3301      	adds	r3, #1
 801004a:	81fb      	strh	r3, [r7, #14]
 801004c:	89fb      	ldrh	r3, [r7, #14]
 801004e:	2b7f      	cmp	r3, #127	; 0x7f
 8010050:	d9f2      	bls.n	8010038 <ff_convert+0x3c>
 8010052:	e000      	b.n	8010056 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010054:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010056:	89fb      	ldrh	r3, [r7, #14]
 8010058:	3380      	adds	r3, #128	; 0x80
 801005a:	b29b      	uxth	r3, r3
 801005c:	b2db      	uxtb	r3, r3
 801005e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010060:	89fb      	ldrh	r3, [r7, #14]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	080122c8 	.word	0x080122c8

08010074 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010074:	b480      	push	{r7}
 8010076:	b087      	sub	sp, #28
 8010078:	af00      	add	r7, sp, #0
 801007a:	4603      	mov	r3, r0
 801007c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801007e:	88fb      	ldrh	r3, [r7, #6]
 8010080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010084:	d201      	bcs.n	801008a <ff_wtoupper+0x16>
 8010086:	4b3e      	ldr	r3, [pc, #248]	; (8010180 <ff_wtoupper+0x10c>)
 8010088:	e000      	b.n	801008c <ff_wtoupper+0x18>
 801008a:	4b3e      	ldr	r3, [pc, #248]	; (8010184 <ff_wtoupper+0x110>)
 801008c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	1c9a      	adds	r2, r3, #2
 8010092:	617a      	str	r2, [r7, #20]
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010098:	8a7b      	ldrh	r3, [r7, #18]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d068      	beq.n	8010170 <ff_wtoupper+0xfc>
 801009e:	88fa      	ldrh	r2, [r7, #6]
 80100a0:	8a7b      	ldrh	r3, [r7, #18]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d364      	bcc.n	8010170 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	1c9a      	adds	r2, r3, #2
 80100aa:	617a      	str	r2, [r7, #20]
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	823b      	strh	r3, [r7, #16]
 80100b0:	8a3b      	ldrh	r3, [r7, #16]
 80100b2:	0a1b      	lsrs	r3, r3, #8
 80100b4:	81fb      	strh	r3, [r7, #14]
 80100b6:	8a3b      	ldrh	r3, [r7, #16]
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80100bc:	88fa      	ldrh	r2, [r7, #6]
 80100be:	8a79      	ldrh	r1, [r7, #18]
 80100c0:	8a3b      	ldrh	r3, [r7, #16]
 80100c2:	440b      	add	r3, r1
 80100c4:	429a      	cmp	r2, r3
 80100c6:	da49      	bge.n	801015c <ff_wtoupper+0xe8>
			switch (cmd) {
 80100c8:	89fb      	ldrh	r3, [r7, #14]
 80100ca:	2b08      	cmp	r3, #8
 80100cc:	d84f      	bhi.n	801016e <ff_wtoupper+0xfa>
 80100ce:	a201      	add	r2, pc, #4	; (adr r2, 80100d4 <ff_wtoupper+0x60>)
 80100d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d4:	080100f9 	.word	0x080100f9
 80100d8:	0801010b 	.word	0x0801010b
 80100dc:	08010121 	.word	0x08010121
 80100e0:	08010129 	.word	0x08010129
 80100e4:	08010131 	.word	0x08010131
 80100e8:	08010139 	.word	0x08010139
 80100ec:	08010141 	.word	0x08010141
 80100f0:	08010149 	.word	0x08010149
 80100f4:	08010151 	.word	0x08010151
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80100f8:	88fa      	ldrh	r2, [r7, #6]
 80100fa:	8a7b      	ldrh	r3, [r7, #18]
 80100fc:	1ad3      	subs	r3, r2, r3
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	697a      	ldr	r2, [r7, #20]
 8010102:	4413      	add	r3, r2
 8010104:	881b      	ldrh	r3, [r3, #0]
 8010106:	80fb      	strh	r3, [r7, #6]
 8010108:	e027      	b.n	801015a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801010a:	88fa      	ldrh	r2, [r7, #6]
 801010c:	8a7b      	ldrh	r3, [r7, #18]
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	b29b      	uxth	r3, r3
 8010112:	f003 0301 	and.w	r3, r3, #1
 8010116:	b29b      	uxth	r3, r3
 8010118:	88fa      	ldrh	r2, [r7, #6]
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	80fb      	strh	r3, [r7, #6]
 801011e:	e01c      	b.n	801015a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010120:	88fb      	ldrh	r3, [r7, #6]
 8010122:	3b10      	subs	r3, #16
 8010124:	80fb      	strh	r3, [r7, #6]
 8010126:	e018      	b.n	801015a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010128:	88fb      	ldrh	r3, [r7, #6]
 801012a:	3b20      	subs	r3, #32
 801012c:	80fb      	strh	r3, [r7, #6]
 801012e:	e014      	b.n	801015a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010130:	88fb      	ldrh	r3, [r7, #6]
 8010132:	3b30      	subs	r3, #48	; 0x30
 8010134:	80fb      	strh	r3, [r7, #6]
 8010136:	e010      	b.n	801015a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010138:	88fb      	ldrh	r3, [r7, #6]
 801013a:	3b1a      	subs	r3, #26
 801013c:	80fb      	strh	r3, [r7, #6]
 801013e:	e00c      	b.n	801015a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010140:	88fb      	ldrh	r3, [r7, #6]
 8010142:	3308      	adds	r3, #8
 8010144:	80fb      	strh	r3, [r7, #6]
 8010146:	e008      	b.n	801015a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010148:	88fb      	ldrh	r3, [r7, #6]
 801014a:	3b50      	subs	r3, #80	; 0x50
 801014c:	80fb      	strh	r3, [r7, #6]
 801014e:	e004      	b.n	801015a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010150:	88fb      	ldrh	r3, [r7, #6]
 8010152:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010156:	80fb      	strh	r3, [r7, #6]
 8010158:	bf00      	nop
			}
			break;
 801015a:	e008      	b.n	801016e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801015c:	89fb      	ldrh	r3, [r7, #14]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d195      	bne.n	801008e <ff_wtoupper+0x1a>
 8010162:	8a3b      	ldrh	r3, [r7, #16]
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	697a      	ldr	r2, [r7, #20]
 8010168:	4413      	add	r3, r2
 801016a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801016c:	e78f      	b.n	801008e <ff_wtoupper+0x1a>
			break;
 801016e:	bf00      	nop
	}

	return chr;
 8010170:	88fb      	ldrh	r3, [r7, #6]
}
 8010172:	4618      	mov	r0, r3
 8010174:	371c      	adds	r7, #28
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	080123c8 	.word	0x080123c8
 8010184:	080125bc 	.word	0x080125bc

08010188 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801018c:	2201      	movs	r2, #1
 801018e:	490e      	ldr	r1, [pc, #56]	; (80101c8 <MX_USB_HOST_Init+0x40>)
 8010190:	480e      	ldr	r0, [pc, #56]	; (80101cc <MX_USB_HOST_Init+0x44>)
 8010192:	f7f9 fcc5 	bl	8009b20 <USBH_Init>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d001      	beq.n	80101a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801019c:	f7f1 fb0e 	bl	80017bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80101a0:	490b      	ldr	r1, [pc, #44]	; (80101d0 <MX_USB_HOST_Init+0x48>)
 80101a2:	480a      	ldr	r0, [pc, #40]	; (80101cc <MX_USB_HOST_Init+0x44>)
 80101a4:	f7f9 fd4a 	bl	8009c3c <USBH_RegisterClass>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d001      	beq.n	80101b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80101ae:	f7f1 fb05 	bl	80017bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80101b2:	4806      	ldr	r0, [pc, #24]	; (80101cc <MX_USB_HOST_Init+0x44>)
 80101b4:	f7f9 fdce 	bl	8009d54 <USBH_Start>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d001      	beq.n	80101c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80101be:	f7f1 fafd 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80101c2:	bf00      	nop
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	080101e9 	.word	0x080101e9
 80101cc:	200027f8 	.word	0x200027f8
 80101d0:	2000000c 	.word	0x2000000c

080101d4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80101d8:	4802      	ldr	r0, [pc, #8]	; (80101e4 <MX_USB_HOST_Process+0x10>)
 80101da:	f7f9 fdcb 	bl	8009d74 <USBH_Process>
}
 80101de:	bf00      	nop
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	200027f8 	.word	0x200027f8

080101e8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	460b      	mov	r3, r1
 80101f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80101f4:	78fb      	ldrb	r3, [r7, #3]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	2b04      	cmp	r3, #4
 80101fa:	d844      	bhi.n	8010286 <USBH_UserProcess+0x9e>
 80101fc:	a201      	add	r2, pc, #4	; (adr r2, 8010204 <USBH_UserProcess+0x1c>)
 80101fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010202:	bf00      	nop
 8010204:	08010287 	.word	0x08010287
 8010208:	08010225 	.word	0x08010225
 801020c:	08010287 	.word	0x08010287
 8010210:	0801027f 	.word	0x0801027f
 8010214:	08010219 	.word	0x08010219
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010218:	4b1d      	ldr	r3, [pc, #116]	; (8010290 <USBH_UserProcess+0xa8>)
 801021a:	2203      	movs	r2, #3
 801021c:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 801021e:	f7f0 fd11 	bl	8000c44 <Unmount_USB>
  break;
 8010222:	e031      	b.n	8010288 <USBH_UserProcess+0xa0>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010224:	4b1a      	ldr	r3, [pc, #104]	; (8010290 <USBH_UserProcess+0xa8>)
 8010226:	2202      	movs	r2, #2
 8010228:	701a      	strb	r2, [r3, #0]
  Mount_USB();
 801022a:	f7f0 fce9 	bl	8000c00 <Mount_USB>

	Check_USB_Details();   // check space details
 801022e:	f7f1 f847 	bl	80012c0 <Check_USB_Details>

	Scan_USB("/");   // scan for files and directories
 8010232:	4818      	ldr	r0, [pc, #96]	; (8010294 <USBH_UserProcess+0xac>)
 8010234:	f7f0 fd26 	bl	8000c84 <Scan_USB>

	Create_File("/ROOTFILE.txt");
 8010238:	4817      	ldr	r0, [pc, #92]	; (8010298 <USBH_UserProcess+0xb0>)
 801023a:	f7f0 fe8d 	bl	8000f58 <Create_File>
	Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 801023e:	4917      	ldr	r1, [pc, #92]	; (801029c <USBH_UserProcess+0xb4>)
 8010240:	4815      	ldr	r0, [pc, #84]	; (8010298 <USBH_UserProcess+0xb0>)
 8010242:	f7f0 fdc5 	bl	8000dd0 <Write_File>

	Create_Dir("/DIR1");
 8010246:	4816      	ldr	r0, [pc, #88]	; (80102a0 <USBH_UserProcess+0xb8>)
 8010248:	f7f0 fffa 	bl	8001240 <Create_Dir>
	Create_File("/DIR1/DIR1FILE.txt");
 801024c:	4815      	ldr	r0, [pc, #84]	; (80102a4 <USBH_UserProcess+0xbc>)
 801024e:	f7f0 fe83 	bl	8000f58 <Create_File>
	Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 8010252:	4915      	ldr	r1, [pc, #84]	; (80102a8 <USBH_UserProcess+0xc0>)
 8010254:	4813      	ldr	r0, [pc, #76]	; (80102a4 <USBH_UserProcess+0xbc>)
 8010256:	f7f0 fdbb 	bl	8000dd0 <Write_File>

	Create_Dir("/DIR2");
 801025a:	4814      	ldr	r0, [pc, #80]	; (80102ac <USBH_UserProcess+0xc4>)
 801025c:	f7f0 fff0 	bl	8001240 <Create_Dir>
	Create_Dir("/DIR2/SUBDIR1");
 8010260:	4813      	ldr	r0, [pc, #76]	; (80102b0 <USBH_UserProcess+0xc8>)
 8010262:	f7f0 ffed 	bl	8001240 <Create_Dir>
	Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 8010266:	4813      	ldr	r0, [pc, #76]	; (80102b4 <USBH_UserProcess+0xcc>)
 8010268:	f7f0 fe76 	bl	8000f58 <Create_File>
	Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 801026c:	4912      	ldr	r1, [pc, #72]	; (80102b8 <USBH_UserProcess+0xd0>)
 801026e:	4811      	ldr	r0, [pc, #68]	; (80102b4 <USBH_UserProcess+0xcc>)
 8010270:	f7f0 fdae 	bl	8000dd0 <Write_File>

	Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 8010274:	4911      	ldr	r1, [pc, #68]	; (80102bc <USBH_UserProcess+0xd4>)
 8010276:	4808      	ldr	r0, [pc, #32]	; (8010298 <USBH_UserProcess+0xb0>)
 8010278:	f7f0 ff0a 	bl	8001090 <Update_File>
  break;
 801027c:	e004      	b.n	8010288 <USBH_UserProcess+0xa0>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801027e:	4b04      	ldr	r3, [pc, #16]	; (8010290 <USBH_UserProcess+0xa8>)
 8010280:	2201      	movs	r2, #1
 8010282:	701a      	strb	r2, [r3, #0]
  break;
 8010284:	e000      	b.n	8010288 <USBH_UserProcess+0xa0>

  default:
  break;
 8010286:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010288:	bf00      	nop
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	20000544 	.word	0x20000544
 8010294:	08012084 	.word	0x08012084
 8010298:	08012088 	.word	0x08012088
 801029c:	08012098 	.word	0x08012098
 80102a0:	080120bc 	.word	0x080120bc
 80102a4:	080120c4 	.word	0x080120c4
 80102a8:	080120d8 	.word	0x080120d8
 80102ac:	080120fc 	.word	0x080120fc
 80102b0:	08012104 	.word	0x08012104
 80102b4:	08012114 	.word	0x08012114
 80102b8:	08012130 	.word	0x08012130
 80102bc:	08012194 	.word	0x08012194

080102c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b08a      	sub	sp, #40	; 0x28
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102c8:	f107 0314 	add.w	r3, r7, #20
 80102cc:	2200      	movs	r2, #0
 80102ce:	601a      	str	r2, [r3, #0]
 80102d0:	605a      	str	r2, [r3, #4]
 80102d2:	609a      	str	r2, [r3, #8]
 80102d4:	60da      	str	r2, [r3, #12]
 80102d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80102e0:	d14e      	bne.n	8010380 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102e2:	4b29      	ldr	r3, [pc, #164]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 80102e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102e6:	4a28      	ldr	r2, [pc, #160]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 80102e8:	f043 0301 	orr.w	r3, r3, #1
 80102ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80102ee:	4b26      	ldr	r3, [pc, #152]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 80102f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	613b      	str	r3, [r7, #16]
 80102f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80102fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80102fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010300:	2302      	movs	r3, #2
 8010302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010304:	2300      	movs	r3, #0
 8010306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010308:	2303      	movs	r3, #3
 801030a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801030c:	230a      	movs	r3, #10
 801030e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010310:	f107 0314 	add.w	r3, r7, #20
 8010314:	4619      	mov	r1, r3
 8010316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801031a:	f7f3 f81f 	bl	800335c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801031e:	4b1a      	ldr	r3, [pc, #104]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 8010320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010322:	4a19      	ldr	r2, [pc, #100]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 8010324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010328:	64d3      	str	r3, [r2, #76]	; 0x4c
 801032a:	4b17      	ldr	r3, [pc, #92]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 801032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801032e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010332:	60fb      	str	r3, [r7, #12]
 8010334:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010336:	4b14      	ldr	r3, [pc, #80]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 8010338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801033a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801033e:	2b00      	cmp	r3, #0
 8010340:	d114      	bne.n	801036c <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010342:	4b11      	ldr	r3, [pc, #68]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 8010344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010346:	4a10      	ldr	r2, [pc, #64]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 8010348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801034c:	6593      	str	r3, [r2, #88]	; 0x58
 801034e:	4b0e      	ldr	r3, [pc, #56]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 8010350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010356:	60bb      	str	r3, [r7, #8]
 8010358:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 801035a:	f7f4 fe31 	bl	8004fc0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801035e:	4b0a      	ldr	r3, [pc, #40]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 8010360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010362:	4a09      	ldr	r2, [pc, #36]	; (8010388 <HAL_HCD_MspInit+0xc8>)
 8010364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010368:	6593      	str	r3, [r2, #88]	; 0x58
 801036a:	e001      	b.n	8010370 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801036c:	f7f4 fe28 	bl	8004fc0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010370:	2200      	movs	r2, #0
 8010372:	2100      	movs	r1, #0
 8010374:	2043      	movs	r0, #67	; 0x43
 8010376:	f7f2 ffba 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801037a:	2043      	movs	r0, #67	; 0x43
 801037c:	f7f2 ffd3 	bl	8003326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010380:	bf00      	nop
 8010382:	3728      	adds	r7, #40	; 0x28
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	40021000 	.word	0x40021000

0801038c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801039a:	4618      	mov	r0, r3
 801039c:	f7fa f8bd 	bl	800a51a <USBH_LL_IncTimer>
}
 80103a0:	bf00      	nop
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fa f8f5 	bl	800a5a6 <USBH_LL_Connect>
}
 80103bc:	bf00      	nop
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fa f8fe 	bl	800a5d4 <USBH_LL_Disconnect>
}
 80103d8:	bf00      	nop
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	460b      	mov	r3, r1
 80103ea:	70fb      	strb	r3, [r7, #3]
 80103ec:	4613      	mov	r3, r2
 80103ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801040a:	4618      	mov	r0, r3
 801040c:	f7fa f8af 	bl	800a56e <USBH_LL_PortEnabled>
}
 8010410:	bf00      	nop
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010426:	4618      	mov	r0, r3
 8010428:	f7fa f8af 	bl	800a58a <USBH_LL_PortDisabled>
}
 801042c:	bf00      	nop
 801042e:	3708      	adds	r7, #8
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010442:	2b01      	cmp	r3, #1
 8010444:	d12d      	bne.n	80104a2 <USBH_LL_Init+0x6e>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010446:	4a19      	ldr	r2, [pc, #100]	; (80104ac <USBH_LL_Init+0x78>)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4a16      	ldr	r2, [pc, #88]	; (80104ac <USBH_LL_Init+0x78>)
 8010452:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010456:	4b15      	ldr	r3, [pc, #84]	; (80104ac <USBH_LL_Init+0x78>)
 8010458:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801045c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 801045e:	4b13      	ldr	r3, [pc, #76]	; (80104ac <USBH_LL_Init+0x78>)
 8010460:	220c      	movs	r2, #12
 8010462:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 8010464:	4b11      	ldr	r3, [pc, #68]	; (80104ac <USBH_LL_Init+0x78>)
 8010466:	2203      	movs	r2, #3
 8010468:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801046a:	4b10      	ldr	r3, [pc, #64]	; (80104ac <USBH_LL_Init+0x78>)
 801046c:	2200      	movs	r2, #0
 801046e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010470:	4b0e      	ldr	r3, [pc, #56]	; (80104ac <USBH_LL_Init+0x78>)
 8010472:	2202      	movs	r2, #2
 8010474:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010476:	4b0d      	ldr	r3, [pc, #52]	; (80104ac <USBH_LL_Init+0x78>)
 8010478:	2200      	movs	r2, #0
 801047a:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801047c:	4b0b      	ldr	r3, [pc, #44]	; (80104ac <USBH_LL_Init+0x78>)
 801047e:	2200      	movs	r2, #0
 8010480:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010482:	480a      	ldr	r0, [pc, #40]	; (80104ac <USBH_LL_Init+0x78>)
 8010484:	f7f3 f92e 	bl	80036e4 <HAL_HCD_Init>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d001      	beq.n	8010492 <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 801048e:	f7f1 f995 	bl	80017bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010492:	4806      	ldr	r0, [pc, #24]	; (80104ac <USBH_LL_Init+0x78>)
 8010494:	f7f3 fd0d 	bl	8003eb2 <HAL_HCD_GetCurrentFrame>
 8010498:	4603      	mov	r3, r0
 801049a:	4619      	mov	r1, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7fa f82d 	bl	800a4fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80104a2:	2300      	movs	r3, #0
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	20002bd0 	.word	0x20002bd0

080104b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104bc:	2300      	movs	r3, #0
 80104be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7f3 fc7d 	bl	8003dc6 <HAL_HCD_Start>
 80104cc:	4603      	mov	r3, r0
 80104ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80104d0:	7bfb      	ldrb	r3, [r7, #15]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f000 f98c 	bl	80107f0 <USBH_Get_USB_Status>
 80104d8:	4603      	mov	r3, r0
 80104da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b084      	sub	sp, #16
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104ee:	2300      	movs	r3, #0
 80104f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104f2:	2300      	movs	r3, #0
 80104f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7f3 fc85 	bl	8003e0c <HAL_HCD_Stop>
 8010502:	4603      	mov	r3, r0
 8010504:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010506:	7bfb      	ldrb	r3, [r7, #15]
 8010508:	4618      	mov	r0, r3
 801050a:	f000 f971 	bl	80107f0 <USBH_Get_USB_Status>
 801050e:	4603      	mov	r3, r0
 8010510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010512:	7bbb      	ldrb	r3, [r7, #14]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010524:	2301      	movs	r3, #1
 8010526:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801052e:	4618      	mov	r0, r3
 8010530:	f7f3 fccd 	bl	8003ece <HAL_HCD_GetCurrentSpeed>
 8010534:	4603      	mov	r3, r0
 8010536:	2b02      	cmp	r3, #2
 8010538:	d00c      	beq.n	8010554 <USBH_LL_GetSpeed+0x38>
 801053a:	2b02      	cmp	r3, #2
 801053c:	d80d      	bhi.n	801055a <USBH_LL_GetSpeed+0x3e>
 801053e:	2b00      	cmp	r3, #0
 8010540:	d002      	beq.n	8010548 <USBH_LL_GetSpeed+0x2c>
 8010542:	2b01      	cmp	r3, #1
 8010544:	d003      	beq.n	801054e <USBH_LL_GetSpeed+0x32>
 8010546:	e008      	b.n	801055a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010548:	2300      	movs	r3, #0
 801054a:	73fb      	strb	r3, [r7, #15]
    break;
 801054c:	e008      	b.n	8010560 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801054e:	2301      	movs	r3, #1
 8010550:	73fb      	strb	r3, [r7, #15]
    break;
 8010552:	e005      	b.n	8010560 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010554:	2302      	movs	r3, #2
 8010556:	73fb      	strb	r3, [r7, #15]
    break;
 8010558:	e002      	b.n	8010560 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801055a:	2301      	movs	r3, #1
 801055c:	73fb      	strb	r3, [r7, #15]
    break;
 801055e:	bf00      	nop
  }
  return  speed;
 8010560:	7bfb      	ldrb	r3, [r7, #15]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b084      	sub	sp, #16
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010572:	2300      	movs	r3, #0
 8010574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010576:	2300      	movs	r3, #0
 8010578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010580:	4618      	mov	r0, r3
 8010582:	f7f3 fc60 	bl	8003e46 <HAL_HCD_ResetPort>
 8010586:	4603      	mov	r3, r0
 8010588:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801058a:	7bfb      	ldrb	r3, [r7, #15]
 801058c:	4618      	mov	r0, r3
 801058e:	f000 f92f 	bl	80107f0 <USBH_Get_USB_Status>
 8010592:	4603      	mov	r3, r0
 8010594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010596:	7bbb      	ldrb	r3, [r7, #14]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	460b      	mov	r3, r1
 80105aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105b2:	78fa      	ldrb	r2, [r7, #3]
 80105b4:	4611      	mov	r1, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7f3 fc67 	bl	8003e8a <HAL_HCD_HC_GetXferCount>
 80105bc:	4603      	mov	r3, r0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80105c6:	b590      	push	{r4, r7, lr}
 80105c8:	b089      	sub	sp, #36	; 0x24
 80105ca:	af04      	add	r7, sp, #16
 80105cc:	6078      	str	r0, [r7, #4]
 80105ce:	4608      	mov	r0, r1
 80105d0:	4611      	mov	r1, r2
 80105d2:	461a      	mov	r2, r3
 80105d4:	4603      	mov	r3, r0
 80105d6:	70fb      	strb	r3, [r7, #3]
 80105d8:	460b      	mov	r3, r1
 80105da:	70bb      	strb	r3, [r7, #2]
 80105dc:	4613      	mov	r3, r2
 80105de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e0:	2300      	movs	r3, #0
 80105e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80105ee:	787c      	ldrb	r4, [r7, #1]
 80105f0:	78ba      	ldrb	r2, [r7, #2]
 80105f2:	78f9      	ldrb	r1, [r7, #3]
 80105f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105f6:	9302      	str	r3, [sp, #8]
 80105f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80105fc:	9301      	str	r3, [sp, #4]
 80105fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	4623      	mov	r3, r4
 8010606:	f7f3 f8cf 	bl	80037a8 <HAL_HCD_HC_Init>
 801060a:	4603      	mov	r3, r0
 801060c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801060e:	7bfb      	ldrb	r3, [r7, #15]
 8010610:	4618      	mov	r0, r3
 8010612:	f000 f8ed 	bl	80107f0 <USBH_Get_USB_Status>
 8010616:	4603      	mov	r3, r0
 8010618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801061a:	7bbb      	ldrb	r3, [r7, #14]
}
 801061c:	4618      	mov	r0, r3
 801061e:	3714      	adds	r7, #20
 8010620:	46bd      	mov	sp, r7
 8010622:	bd90      	pop	{r4, r7, pc}

08010624 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	460b      	mov	r3, r1
 801062e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010630:	2300      	movs	r3, #0
 8010632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010634:	2300      	movs	r3, #0
 8010636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801063e:	78fa      	ldrb	r2, [r7, #3]
 8010640:	4611      	mov	r1, r2
 8010642:	4618      	mov	r0, r3
 8010644:	f7f3 f93f 	bl	80038c6 <HAL_HCD_HC_Halt>
 8010648:	4603      	mov	r3, r0
 801064a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801064c:	7bfb      	ldrb	r3, [r7, #15]
 801064e:	4618      	mov	r0, r3
 8010650:	f000 f8ce 	bl	80107f0 <USBH_Get_USB_Status>
 8010654:	4603      	mov	r3, r0
 8010656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010658:	7bbb      	ldrb	r3, [r7, #14]
}
 801065a:	4618      	mov	r0, r3
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010662:	b590      	push	{r4, r7, lr}
 8010664:	b089      	sub	sp, #36	; 0x24
 8010666:	af04      	add	r7, sp, #16
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	4608      	mov	r0, r1
 801066c:	4611      	mov	r1, r2
 801066e:	461a      	mov	r2, r3
 8010670:	4603      	mov	r3, r0
 8010672:	70fb      	strb	r3, [r7, #3]
 8010674:	460b      	mov	r3, r1
 8010676:	70bb      	strb	r3, [r7, #2]
 8010678:	4613      	mov	r3, r2
 801067a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801067c:	2300      	movs	r3, #0
 801067e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801068a:	787c      	ldrb	r4, [r7, #1]
 801068c:	78ba      	ldrb	r2, [r7, #2]
 801068e:	78f9      	ldrb	r1, [r7, #3]
 8010690:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010694:	9303      	str	r3, [sp, #12]
 8010696:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010698:	9302      	str	r3, [sp, #8]
 801069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069c:	9301      	str	r3, [sp, #4]
 801069e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	4623      	mov	r3, r4
 80106a6:	f7f3 f931 	bl	800390c <HAL_HCD_HC_SubmitRequest>
 80106aa:	4603      	mov	r3, r0
 80106ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 80106ae:	7bfb      	ldrb	r3, [r7, #15]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f000 f89d 	bl	80107f0 <USBH_Get_USB_Status>
 80106b6:	4603      	mov	r3, r0
 80106b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3714      	adds	r7, #20
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd90      	pop	{r4, r7, pc}

080106c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	460b      	mov	r3, r1
 80106ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106d6:	78fa      	ldrb	r2, [r7, #3]
 80106d8:	4611      	mov	r1, r2
 80106da:	4618      	mov	r0, r3
 80106dc:	f7f3 fbc1 	bl	8003e62 <HAL_HCD_HC_GetURBState>
 80106e0:	4603      	mov	r3, r0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b082      	sub	sp, #8
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
 80106f2:	460b      	mov	r3, r1
 80106f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d103      	bne.n	8010708 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010700:	78fb      	ldrb	r3, [r7, #3]
 8010702:	4618      	mov	r0, r3
 8010704:	f000 f8a0 	bl	8010848 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010708:	20c8      	movs	r0, #200	; 0xc8
 801070a:	f7f1 fae1 	bl	8001cd0 <HAL_Delay>
  return USBH_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010718:	b480      	push	{r7}
 801071a:	b085      	sub	sp, #20
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	460b      	mov	r3, r1
 8010722:	70fb      	strb	r3, [r7, #3]
 8010724:	4613      	mov	r3, r2
 8010726:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801072e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010730:	78fb      	ldrb	r3, [r7, #3]
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	212c      	movs	r1, #44	; 0x2c
 8010736:	fb01 f303 	mul.w	r3, r1, r3
 801073a:	4413      	add	r3, r2
 801073c:	333b      	adds	r3, #59	; 0x3b
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d009      	beq.n	8010758 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010744:	78fb      	ldrb	r3, [r7, #3]
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	212c      	movs	r1, #44	; 0x2c
 801074a:	fb01 f303 	mul.w	r3, r1, r3
 801074e:	4413      	add	r3, r2
 8010750:	3354      	adds	r3, #84	; 0x54
 8010752:	78ba      	ldrb	r2, [r7, #2]
 8010754:	701a      	strb	r2, [r3, #0]
 8010756:	e008      	b.n	801076a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010758:	78fb      	ldrb	r3, [r7, #3]
 801075a:	68fa      	ldr	r2, [r7, #12]
 801075c:	212c      	movs	r1, #44	; 0x2c
 801075e:	fb01 f303 	mul.w	r3, r1, r3
 8010762:	4413      	add	r3, r2
 8010764:	3355      	adds	r3, #85	; 0x55
 8010766:	78ba      	ldrb	r2, [r7, #2]
 8010768:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3714      	adds	r7, #20
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010778:	b480      	push	{r7}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	460b      	mov	r3, r1
 8010782:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010784:	2300      	movs	r3, #0
 8010786:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801078e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010790:	78fb      	ldrb	r3, [r7, #3]
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	212c      	movs	r1, #44	; 0x2c
 8010796:	fb01 f303 	mul.w	r3, r1, r3
 801079a:	4413      	add	r3, r2
 801079c:	333b      	adds	r3, #59	; 0x3b
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d009      	beq.n	80107b8 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80107a4:	78fb      	ldrb	r3, [r7, #3]
 80107a6:	68ba      	ldr	r2, [r7, #8]
 80107a8:	212c      	movs	r1, #44	; 0x2c
 80107aa:	fb01 f303 	mul.w	r3, r1, r3
 80107ae:	4413      	add	r3, r2
 80107b0:	3354      	adds	r3, #84	; 0x54
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	73fb      	strb	r3, [r7, #15]
 80107b6:	e008      	b.n	80107ca <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80107b8:	78fb      	ldrb	r3, [r7, #3]
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	212c      	movs	r1, #44	; 0x2c
 80107be:	fb01 f303 	mul.w	r3, r1, r3
 80107c2:	4413      	add	r3, r2
 80107c4:	3355      	adds	r3, #85	; 0x55
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80107ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3714      	adds	r7, #20
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7f1 fa75 	bl	8001cd0 <HAL_Delay>
}
 80107e6:	bf00      	nop
 80107e8:	3708      	adds	r7, #8
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
	...

080107f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b085      	sub	sp, #20
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	4603      	mov	r3, r0
 80107f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107fa:	2300      	movs	r3, #0
 80107fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80107fe:	79fb      	ldrb	r3, [r7, #7]
 8010800:	2b03      	cmp	r3, #3
 8010802:	d817      	bhi.n	8010834 <USBH_Get_USB_Status+0x44>
 8010804:	a201      	add	r2, pc, #4	; (adr r2, 801080c <USBH_Get_USB_Status+0x1c>)
 8010806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080a:	bf00      	nop
 801080c:	0801081d 	.word	0x0801081d
 8010810:	08010823 	.word	0x08010823
 8010814:	08010829 	.word	0x08010829
 8010818:	0801082f 	.word	0x0801082f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801081c:	2300      	movs	r3, #0
 801081e:	73fb      	strb	r3, [r7, #15]
    break;
 8010820:	e00b      	b.n	801083a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010822:	2302      	movs	r3, #2
 8010824:	73fb      	strb	r3, [r7, #15]
    break;
 8010826:	e008      	b.n	801083a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010828:	2301      	movs	r3, #1
 801082a:	73fb      	strb	r3, [r7, #15]
    break;
 801082c:	e005      	b.n	801083a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801082e:	2302      	movs	r3, #2
 8010830:	73fb      	strb	r3, [r7, #15]
    break;
 8010832:	e002      	b.n	801083a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010834:	2302      	movs	r3, #2
 8010836:	73fb      	strb	r3, [r7, #15]
    break;
 8010838:	bf00      	nop
  }
  return usb_status;
 801083a:	7bfb      	ldrb	r3, [r7, #15]
}
 801083c:	4618      	mov	r0, r3
 801083e:	3714      	adds	r7, #20
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr

08010848 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b084      	sub	sp, #16
 801084c:	af00      	add	r7, sp, #0
 801084e:	4603      	mov	r3, r0
 8010850:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010852:	79fb      	ldrb	r3, [r7, #7]
 8010854:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010856:	79fb      	ldrb	r3, [r7, #7]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d102      	bne.n	8010862 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801085c:	2300      	movs	r3, #0
 801085e:	73fb      	strb	r3, [r7, #15]
 8010860:	e001      	b.n	8010866 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010862:	2301      	movs	r3, #1
 8010864:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,(GPIO_PinState)data);
 8010866:	7bfb      	ldrb	r3, [r7, #15]
 8010868:	461a      	mov	r2, r3
 801086a:	2108      	movs	r1, #8
 801086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010870:	f7f2 ff06 	bl	8003680 <HAL_GPIO_WritePin>
}
 8010874:	bf00      	nop
 8010876:	3710      	adds	r7, #16
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <__errno>:
 801087c:	4b01      	ldr	r3, [pc, #4]	; (8010884 <__errno+0x8>)
 801087e:	6818      	ldr	r0, [r3, #0]
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	2000002c 	.word	0x2000002c

08010888 <__libc_init_array>:
 8010888:	b570      	push	{r4, r5, r6, lr}
 801088a:	4d0d      	ldr	r5, [pc, #52]	; (80108c0 <__libc_init_array+0x38>)
 801088c:	4c0d      	ldr	r4, [pc, #52]	; (80108c4 <__libc_init_array+0x3c>)
 801088e:	1b64      	subs	r4, r4, r5
 8010890:	10a4      	asrs	r4, r4, #2
 8010892:	2600      	movs	r6, #0
 8010894:	42a6      	cmp	r6, r4
 8010896:	d109      	bne.n	80108ac <__libc_init_array+0x24>
 8010898:	4d0b      	ldr	r5, [pc, #44]	; (80108c8 <__libc_init_array+0x40>)
 801089a:	4c0c      	ldr	r4, [pc, #48]	; (80108cc <__libc_init_array+0x44>)
 801089c:	f001 f958 	bl	8011b50 <_init>
 80108a0:	1b64      	subs	r4, r4, r5
 80108a2:	10a4      	asrs	r4, r4, #2
 80108a4:	2600      	movs	r6, #0
 80108a6:	42a6      	cmp	r6, r4
 80108a8:	d105      	bne.n	80108b6 <__libc_init_array+0x2e>
 80108aa:	bd70      	pop	{r4, r5, r6, pc}
 80108ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80108b0:	4798      	blx	r3
 80108b2:	3601      	adds	r6, #1
 80108b4:	e7ee      	b.n	8010894 <__libc_init_array+0xc>
 80108b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80108ba:	4798      	blx	r3
 80108bc:	3601      	adds	r6, #1
 80108be:	e7f2      	b.n	80108a6 <__libc_init_array+0x1e>
 80108c0:	08012718 	.word	0x08012718
 80108c4:	08012718 	.word	0x08012718
 80108c8:	08012718 	.word	0x08012718
 80108cc:	0801271c 	.word	0x0801271c

080108d0 <malloc>:
 80108d0:	4b02      	ldr	r3, [pc, #8]	; (80108dc <malloc+0xc>)
 80108d2:	4601      	mov	r1, r0
 80108d4:	6818      	ldr	r0, [r3, #0]
 80108d6:	f000 b871 	b.w	80109bc <_malloc_r>
 80108da:	bf00      	nop
 80108dc:	2000002c 	.word	0x2000002c

080108e0 <free>:
 80108e0:	4b02      	ldr	r3, [pc, #8]	; (80108ec <free+0xc>)
 80108e2:	4601      	mov	r1, r0
 80108e4:	6818      	ldr	r0, [r3, #0]
 80108e6:	f000 b819 	b.w	801091c <_free_r>
 80108ea:	bf00      	nop
 80108ec:	2000002c 	.word	0x2000002c

080108f0 <memcpy>:
 80108f0:	440a      	add	r2, r1
 80108f2:	4291      	cmp	r1, r2
 80108f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80108f8:	d100      	bne.n	80108fc <memcpy+0xc>
 80108fa:	4770      	bx	lr
 80108fc:	b510      	push	{r4, lr}
 80108fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010902:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010906:	4291      	cmp	r1, r2
 8010908:	d1f9      	bne.n	80108fe <memcpy+0xe>
 801090a:	bd10      	pop	{r4, pc}

0801090c <memset>:
 801090c:	4402      	add	r2, r0
 801090e:	4603      	mov	r3, r0
 8010910:	4293      	cmp	r3, r2
 8010912:	d100      	bne.n	8010916 <memset+0xa>
 8010914:	4770      	bx	lr
 8010916:	f803 1b01 	strb.w	r1, [r3], #1
 801091a:	e7f9      	b.n	8010910 <memset+0x4>

0801091c <_free_r>:
 801091c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801091e:	2900      	cmp	r1, #0
 8010920:	d048      	beq.n	80109b4 <_free_r+0x98>
 8010922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010926:	9001      	str	r0, [sp, #4]
 8010928:	2b00      	cmp	r3, #0
 801092a:	f1a1 0404 	sub.w	r4, r1, #4
 801092e:	bfb8      	it	lt
 8010930:	18e4      	addlt	r4, r4, r3
 8010932:	f000 f9dd 	bl	8010cf0 <__malloc_lock>
 8010936:	4a20      	ldr	r2, [pc, #128]	; (80109b8 <_free_r+0x9c>)
 8010938:	9801      	ldr	r0, [sp, #4]
 801093a:	6813      	ldr	r3, [r2, #0]
 801093c:	4615      	mov	r5, r2
 801093e:	b933      	cbnz	r3, 801094e <_free_r+0x32>
 8010940:	6063      	str	r3, [r4, #4]
 8010942:	6014      	str	r4, [r2, #0]
 8010944:	b003      	add	sp, #12
 8010946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801094a:	f000 b9d7 	b.w	8010cfc <__malloc_unlock>
 801094e:	42a3      	cmp	r3, r4
 8010950:	d90b      	bls.n	801096a <_free_r+0x4e>
 8010952:	6821      	ldr	r1, [r4, #0]
 8010954:	1862      	adds	r2, r4, r1
 8010956:	4293      	cmp	r3, r2
 8010958:	bf04      	itt	eq
 801095a:	681a      	ldreq	r2, [r3, #0]
 801095c:	685b      	ldreq	r3, [r3, #4]
 801095e:	6063      	str	r3, [r4, #4]
 8010960:	bf04      	itt	eq
 8010962:	1852      	addeq	r2, r2, r1
 8010964:	6022      	streq	r2, [r4, #0]
 8010966:	602c      	str	r4, [r5, #0]
 8010968:	e7ec      	b.n	8010944 <_free_r+0x28>
 801096a:	461a      	mov	r2, r3
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	b10b      	cbz	r3, 8010974 <_free_r+0x58>
 8010970:	42a3      	cmp	r3, r4
 8010972:	d9fa      	bls.n	801096a <_free_r+0x4e>
 8010974:	6811      	ldr	r1, [r2, #0]
 8010976:	1855      	adds	r5, r2, r1
 8010978:	42a5      	cmp	r5, r4
 801097a:	d10b      	bne.n	8010994 <_free_r+0x78>
 801097c:	6824      	ldr	r4, [r4, #0]
 801097e:	4421      	add	r1, r4
 8010980:	1854      	adds	r4, r2, r1
 8010982:	42a3      	cmp	r3, r4
 8010984:	6011      	str	r1, [r2, #0]
 8010986:	d1dd      	bne.n	8010944 <_free_r+0x28>
 8010988:	681c      	ldr	r4, [r3, #0]
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	6053      	str	r3, [r2, #4]
 801098e:	4421      	add	r1, r4
 8010990:	6011      	str	r1, [r2, #0]
 8010992:	e7d7      	b.n	8010944 <_free_r+0x28>
 8010994:	d902      	bls.n	801099c <_free_r+0x80>
 8010996:	230c      	movs	r3, #12
 8010998:	6003      	str	r3, [r0, #0]
 801099a:	e7d3      	b.n	8010944 <_free_r+0x28>
 801099c:	6825      	ldr	r5, [r4, #0]
 801099e:	1961      	adds	r1, r4, r5
 80109a0:	428b      	cmp	r3, r1
 80109a2:	bf04      	itt	eq
 80109a4:	6819      	ldreq	r1, [r3, #0]
 80109a6:	685b      	ldreq	r3, [r3, #4]
 80109a8:	6063      	str	r3, [r4, #4]
 80109aa:	bf04      	itt	eq
 80109ac:	1949      	addeq	r1, r1, r5
 80109ae:	6021      	streq	r1, [r4, #0]
 80109b0:	6054      	str	r4, [r2, #4]
 80109b2:	e7c7      	b.n	8010944 <_free_r+0x28>
 80109b4:	b003      	add	sp, #12
 80109b6:	bd30      	pop	{r4, r5, pc}
 80109b8:	20000548 	.word	0x20000548

080109bc <_malloc_r>:
 80109bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109be:	1ccd      	adds	r5, r1, #3
 80109c0:	f025 0503 	bic.w	r5, r5, #3
 80109c4:	3508      	adds	r5, #8
 80109c6:	2d0c      	cmp	r5, #12
 80109c8:	bf38      	it	cc
 80109ca:	250c      	movcc	r5, #12
 80109cc:	2d00      	cmp	r5, #0
 80109ce:	4606      	mov	r6, r0
 80109d0:	db01      	blt.n	80109d6 <_malloc_r+0x1a>
 80109d2:	42a9      	cmp	r1, r5
 80109d4:	d903      	bls.n	80109de <_malloc_r+0x22>
 80109d6:	230c      	movs	r3, #12
 80109d8:	6033      	str	r3, [r6, #0]
 80109da:	2000      	movs	r0, #0
 80109dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109de:	f000 f987 	bl	8010cf0 <__malloc_lock>
 80109e2:	4921      	ldr	r1, [pc, #132]	; (8010a68 <_malloc_r+0xac>)
 80109e4:	680a      	ldr	r2, [r1, #0]
 80109e6:	4614      	mov	r4, r2
 80109e8:	b99c      	cbnz	r4, 8010a12 <_malloc_r+0x56>
 80109ea:	4f20      	ldr	r7, [pc, #128]	; (8010a6c <_malloc_r+0xb0>)
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	b923      	cbnz	r3, 80109fa <_malloc_r+0x3e>
 80109f0:	4621      	mov	r1, r4
 80109f2:	4630      	mov	r0, r6
 80109f4:	f000 f854 	bl	8010aa0 <_sbrk_r>
 80109f8:	6038      	str	r0, [r7, #0]
 80109fa:	4629      	mov	r1, r5
 80109fc:	4630      	mov	r0, r6
 80109fe:	f000 f84f 	bl	8010aa0 <_sbrk_r>
 8010a02:	1c43      	adds	r3, r0, #1
 8010a04:	d123      	bne.n	8010a4e <_malloc_r+0x92>
 8010a06:	230c      	movs	r3, #12
 8010a08:	6033      	str	r3, [r6, #0]
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f000 f976 	bl	8010cfc <__malloc_unlock>
 8010a10:	e7e3      	b.n	80109da <_malloc_r+0x1e>
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	1b5b      	subs	r3, r3, r5
 8010a16:	d417      	bmi.n	8010a48 <_malloc_r+0x8c>
 8010a18:	2b0b      	cmp	r3, #11
 8010a1a:	d903      	bls.n	8010a24 <_malloc_r+0x68>
 8010a1c:	6023      	str	r3, [r4, #0]
 8010a1e:	441c      	add	r4, r3
 8010a20:	6025      	str	r5, [r4, #0]
 8010a22:	e004      	b.n	8010a2e <_malloc_r+0x72>
 8010a24:	6863      	ldr	r3, [r4, #4]
 8010a26:	42a2      	cmp	r2, r4
 8010a28:	bf0c      	ite	eq
 8010a2a:	600b      	streq	r3, [r1, #0]
 8010a2c:	6053      	strne	r3, [r2, #4]
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f000 f964 	bl	8010cfc <__malloc_unlock>
 8010a34:	f104 000b 	add.w	r0, r4, #11
 8010a38:	1d23      	adds	r3, r4, #4
 8010a3a:	f020 0007 	bic.w	r0, r0, #7
 8010a3e:	1ac2      	subs	r2, r0, r3
 8010a40:	d0cc      	beq.n	80109dc <_malloc_r+0x20>
 8010a42:	1a1b      	subs	r3, r3, r0
 8010a44:	50a3      	str	r3, [r4, r2]
 8010a46:	e7c9      	b.n	80109dc <_malloc_r+0x20>
 8010a48:	4622      	mov	r2, r4
 8010a4a:	6864      	ldr	r4, [r4, #4]
 8010a4c:	e7cc      	b.n	80109e8 <_malloc_r+0x2c>
 8010a4e:	1cc4      	adds	r4, r0, #3
 8010a50:	f024 0403 	bic.w	r4, r4, #3
 8010a54:	42a0      	cmp	r0, r4
 8010a56:	d0e3      	beq.n	8010a20 <_malloc_r+0x64>
 8010a58:	1a21      	subs	r1, r4, r0
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f000 f820 	bl	8010aa0 <_sbrk_r>
 8010a60:	3001      	adds	r0, #1
 8010a62:	d1dd      	bne.n	8010a20 <_malloc_r+0x64>
 8010a64:	e7cf      	b.n	8010a06 <_malloc_r+0x4a>
 8010a66:	bf00      	nop
 8010a68:	20000548 	.word	0x20000548
 8010a6c:	2000054c 	.word	0x2000054c

08010a70 <iprintf>:
 8010a70:	b40f      	push	{r0, r1, r2, r3}
 8010a72:	4b0a      	ldr	r3, [pc, #40]	; (8010a9c <iprintf+0x2c>)
 8010a74:	b513      	push	{r0, r1, r4, lr}
 8010a76:	681c      	ldr	r4, [r3, #0]
 8010a78:	b124      	cbz	r4, 8010a84 <iprintf+0x14>
 8010a7a:	69a3      	ldr	r3, [r4, #24]
 8010a7c:	b913      	cbnz	r3, 8010a84 <iprintf+0x14>
 8010a7e:	4620      	mov	r0, r4
 8010a80:	f000 f896 	bl	8010bb0 <__sinit>
 8010a84:	ab05      	add	r3, sp, #20
 8010a86:	9a04      	ldr	r2, [sp, #16]
 8010a88:	68a1      	ldr	r1, [r4, #8]
 8010a8a:	9301      	str	r3, [sp, #4]
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f000 fac1 	bl	8011014 <_vfiprintf_r>
 8010a92:	b002      	add	sp, #8
 8010a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a98:	b004      	add	sp, #16
 8010a9a:	4770      	bx	lr
 8010a9c:	2000002c 	.word	0x2000002c

08010aa0 <_sbrk_r>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	4d06      	ldr	r5, [pc, #24]	; (8010abc <_sbrk_r+0x1c>)
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	4604      	mov	r4, r0
 8010aa8:	4608      	mov	r0, r1
 8010aaa:	602b      	str	r3, [r5, #0]
 8010aac:	f7f1 f82a 	bl	8001b04 <_sbrk>
 8010ab0:	1c43      	adds	r3, r0, #1
 8010ab2:	d102      	bne.n	8010aba <_sbrk_r+0x1a>
 8010ab4:	682b      	ldr	r3, [r5, #0]
 8010ab6:	b103      	cbz	r3, 8010aba <_sbrk_r+0x1a>
 8010ab8:	6023      	str	r3, [r4, #0]
 8010aba:	bd38      	pop	{r3, r4, r5, pc}
 8010abc:	20002ee0 	.word	0x20002ee0

08010ac0 <siprintf>:
 8010ac0:	b40e      	push	{r1, r2, r3}
 8010ac2:	b500      	push	{lr}
 8010ac4:	b09c      	sub	sp, #112	; 0x70
 8010ac6:	ab1d      	add	r3, sp, #116	; 0x74
 8010ac8:	9002      	str	r0, [sp, #8]
 8010aca:	9006      	str	r0, [sp, #24]
 8010acc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ad0:	4809      	ldr	r0, [pc, #36]	; (8010af8 <siprintf+0x38>)
 8010ad2:	9107      	str	r1, [sp, #28]
 8010ad4:	9104      	str	r1, [sp, #16]
 8010ad6:	4909      	ldr	r1, [pc, #36]	; (8010afc <siprintf+0x3c>)
 8010ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010adc:	9105      	str	r1, [sp, #20]
 8010ade:	6800      	ldr	r0, [r0, #0]
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	a902      	add	r1, sp, #8
 8010ae4:	f000 f96c 	bl	8010dc0 <_svfiprintf_r>
 8010ae8:	9b02      	ldr	r3, [sp, #8]
 8010aea:	2200      	movs	r2, #0
 8010aec:	701a      	strb	r2, [r3, #0]
 8010aee:	b01c      	add	sp, #112	; 0x70
 8010af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010af4:	b003      	add	sp, #12
 8010af6:	4770      	bx	lr
 8010af8:	2000002c 	.word	0x2000002c
 8010afc:	ffff0208 	.word	0xffff0208

08010b00 <std>:
 8010b00:	2300      	movs	r3, #0
 8010b02:	b510      	push	{r4, lr}
 8010b04:	4604      	mov	r4, r0
 8010b06:	e9c0 3300 	strd	r3, r3, [r0]
 8010b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b0e:	6083      	str	r3, [r0, #8]
 8010b10:	8181      	strh	r1, [r0, #12]
 8010b12:	6643      	str	r3, [r0, #100]	; 0x64
 8010b14:	81c2      	strh	r2, [r0, #14]
 8010b16:	6183      	str	r3, [r0, #24]
 8010b18:	4619      	mov	r1, r3
 8010b1a:	2208      	movs	r2, #8
 8010b1c:	305c      	adds	r0, #92	; 0x5c
 8010b1e:	f7ff fef5 	bl	801090c <memset>
 8010b22:	4b05      	ldr	r3, [pc, #20]	; (8010b38 <std+0x38>)
 8010b24:	6263      	str	r3, [r4, #36]	; 0x24
 8010b26:	4b05      	ldr	r3, [pc, #20]	; (8010b3c <std+0x3c>)
 8010b28:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b2a:	4b05      	ldr	r3, [pc, #20]	; (8010b40 <std+0x40>)
 8010b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b2e:	4b05      	ldr	r3, [pc, #20]	; (8010b44 <std+0x44>)
 8010b30:	6224      	str	r4, [r4, #32]
 8010b32:	6323      	str	r3, [r4, #48]	; 0x30
 8010b34:	bd10      	pop	{r4, pc}
 8010b36:	bf00      	nop
 8010b38:	0801159d 	.word	0x0801159d
 8010b3c:	080115bf 	.word	0x080115bf
 8010b40:	080115f7 	.word	0x080115f7
 8010b44:	0801161b 	.word	0x0801161b

08010b48 <_cleanup_r>:
 8010b48:	4901      	ldr	r1, [pc, #4]	; (8010b50 <_cleanup_r+0x8>)
 8010b4a:	f000 b8af 	b.w	8010cac <_fwalk_reent>
 8010b4e:	bf00      	nop
 8010b50:	080118f5 	.word	0x080118f5

08010b54 <__sfmoreglue>:
 8010b54:	b570      	push	{r4, r5, r6, lr}
 8010b56:	1e4a      	subs	r2, r1, #1
 8010b58:	2568      	movs	r5, #104	; 0x68
 8010b5a:	4355      	muls	r5, r2
 8010b5c:	460e      	mov	r6, r1
 8010b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b62:	f7ff ff2b 	bl	80109bc <_malloc_r>
 8010b66:	4604      	mov	r4, r0
 8010b68:	b140      	cbz	r0, 8010b7c <__sfmoreglue+0x28>
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8010b70:	300c      	adds	r0, #12
 8010b72:	60a0      	str	r0, [r4, #8]
 8010b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b78:	f7ff fec8 	bl	801090c <memset>
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	bd70      	pop	{r4, r5, r6, pc}

08010b80 <__sfp_lock_acquire>:
 8010b80:	4801      	ldr	r0, [pc, #4]	; (8010b88 <__sfp_lock_acquire+0x8>)
 8010b82:	f000 b8b3 	b.w	8010cec <__retarget_lock_acquire_recursive>
 8010b86:	bf00      	nop
 8010b88:	20002edc 	.word	0x20002edc

08010b8c <__sfp_lock_release>:
 8010b8c:	4801      	ldr	r0, [pc, #4]	; (8010b94 <__sfp_lock_release+0x8>)
 8010b8e:	f000 b8ae 	b.w	8010cee <__retarget_lock_release_recursive>
 8010b92:	bf00      	nop
 8010b94:	20002edc 	.word	0x20002edc

08010b98 <__sinit_lock_acquire>:
 8010b98:	4801      	ldr	r0, [pc, #4]	; (8010ba0 <__sinit_lock_acquire+0x8>)
 8010b9a:	f000 b8a7 	b.w	8010cec <__retarget_lock_acquire_recursive>
 8010b9e:	bf00      	nop
 8010ba0:	20002ed7 	.word	0x20002ed7

08010ba4 <__sinit_lock_release>:
 8010ba4:	4801      	ldr	r0, [pc, #4]	; (8010bac <__sinit_lock_release+0x8>)
 8010ba6:	f000 b8a2 	b.w	8010cee <__retarget_lock_release_recursive>
 8010baa:	bf00      	nop
 8010bac:	20002ed7 	.word	0x20002ed7

08010bb0 <__sinit>:
 8010bb0:	b510      	push	{r4, lr}
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	f7ff fff0 	bl	8010b98 <__sinit_lock_acquire>
 8010bb8:	69a3      	ldr	r3, [r4, #24]
 8010bba:	b11b      	cbz	r3, 8010bc4 <__sinit+0x14>
 8010bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bc0:	f7ff bff0 	b.w	8010ba4 <__sinit_lock_release>
 8010bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8010bca:	4b13      	ldr	r3, [pc, #76]	; (8010c18 <__sinit+0x68>)
 8010bcc:	4a13      	ldr	r2, [pc, #76]	; (8010c1c <__sinit+0x6c>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8010bd2:	42a3      	cmp	r3, r4
 8010bd4:	bf04      	itt	eq
 8010bd6:	2301      	moveq	r3, #1
 8010bd8:	61a3      	streq	r3, [r4, #24]
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f000 f820 	bl	8010c20 <__sfp>
 8010be0:	6060      	str	r0, [r4, #4]
 8010be2:	4620      	mov	r0, r4
 8010be4:	f000 f81c 	bl	8010c20 <__sfp>
 8010be8:	60a0      	str	r0, [r4, #8]
 8010bea:	4620      	mov	r0, r4
 8010bec:	f000 f818 	bl	8010c20 <__sfp>
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	60e0      	str	r0, [r4, #12]
 8010bf4:	2104      	movs	r1, #4
 8010bf6:	6860      	ldr	r0, [r4, #4]
 8010bf8:	f7ff ff82 	bl	8010b00 <std>
 8010bfc:	68a0      	ldr	r0, [r4, #8]
 8010bfe:	2201      	movs	r2, #1
 8010c00:	2109      	movs	r1, #9
 8010c02:	f7ff ff7d 	bl	8010b00 <std>
 8010c06:	68e0      	ldr	r0, [r4, #12]
 8010c08:	2202      	movs	r2, #2
 8010c0a:	2112      	movs	r1, #18
 8010c0c:	f7ff ff78 	bl	8010b00 <std>
 8010c10:	2301      	movs	r3, #1
 8010c12:	61a3      	str	r3, [r4, #24]
 8010c14:	e7d2      	b.n	8010bbc <__sinit+0xc>
 8010c16:	bf00      	nop
 8010c18:	08012678 	.word	0x08012678
 8010c1c:	08010b49 	.word	0x08010b49

08010c20 <__sfp>:
 8010c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c22:	4607      	mov	r7, r0
 8010c24:	f7ff ffac 	bl	8010b80 <__sfp_lock_acquire>
 8010c28:	4b1e      	ldr	r3, [pc, #120]	; (8010ca4 <__sfp+0x84>)
 8010c2a:	681e      	ldr	r6, [r3, #0]
 8010c2c:	69b3      	ldr	r3, [r6, #24]
 8010c2e:	b913      	cbnz	r3, 8010c36 <__sfp+0x16>
 8010c30:	4630      	mov	r0, r6
 8010c32:	f7ff ffbd 	bl	8010bb0 <__sinit>
 8010c36:	3648      	adds	r6, #72	; 0x48
 8010c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	d503      	bpl.n	8010c48 <__sfp+0x28>
 8010c40:	6833      	ldr	r3, [r6, #0]
 8010c42:	b30b      	cbz	r3, 8010c88 <__sfp+0x68>
 8010c44:	6836      	ldr	r6, [r6, #0]
 8010c46:	e7f7      	b.n	8010c38 <__sfp+0x18>
 8010c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c4c:	b9d5      	cbnz	r5, 8010c84 <__sfp+0x64>
 8010c4e:	4b16      	ldr	r3, [pc, #88]	; (8010ca8 <__sfp+0x88>)
 8010c50:	60e3      	str	r3, [r4, #12]
 8010c52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c56:	6665      	str	r5, [r4, #100]	; 0x64
 8010c58:	f000 f847 	bl	8010cea <__retarget_lock_init_recursive>
 8010c5c:	f7ff ff96 	bl	8010b8c <__sfp_lock_release>
 8010c60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c68:	6025      	str	r5, [r4, #0]
 8010c6a:	61a5      	str	r5, [r4, #24]
 8010c6c:	2208      	movs	r2, #8
 8010c6e:	4629      	mov	r1, r5
 8010c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c74:	f7ff fe4a 	bl	801090c <memset>
 8010c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c80:	4620      	mov	r0, r4
 8010c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c84:	3468      	adds	r4, #104	; 0x68
 8010c86:	e7d9      	b.n	8010c3c <__sfp+0x1c>
 8010c88:	2104      	movs	r1, #4
 8010c8a:	4638      	mov	r0, r7
 8010c8c:	f7ff ff62 	bl	8010b54 <__sfmoreglue>
 8010c90:	4604      	mov	r4, r0
 8010c92:	6030      	str	r0, [r6, #0]
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d1d5      	bne.n	8010c44 <__sfp+0x24>
 8010c98:	f7ff ff78 	bl	8010b8c <__sfp_lock_release>
 8010c9c:	230c      	movs	r3, #12
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	e7ee      	b.n	8010c80 <__sfp+0x60>
 8010ca2:	bf00      	nop
 8010ca4:	08012678 	.word	0x08012678
 8010ca8:	ffff0001 	.word	0xffff0001

08010cac <_fwalk_reent>:
 8010cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	4688      	mov	r8, r1
 8010cb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010cb8:	2700      	movs	r7, #0
 8010cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8010cc2:	d505      	bpl.n	8010cd0 <_fwalk_reent+0x24>
 8010cc4:	6824      	ldr	r4, [r4, #0]
 8010cc6:	2c00      	cmp	r4, #0
 8010cc8:	d1f7      	bne.n	8010cba <_fwalk_reent+0xe>
 8010cca:	4638      	mov	r0, r7
 8010ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cd0:	89ab      	ldrh	r3, [r5, #12]
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d907      	bls.n	8010ce6 <_fwalk_reent+0x3a>
 8010cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010cda:	3301      	adds	r3, #1
 8010cdc:	d003      	beq.n	8010ce6 <_fwalk_reent+0x3a>
 8010cde:	4629      	mov	r1, r5
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	47c0      	blx	r8
 8010ce4:	4307      	orrs	r7, r0
 8010ce6:	3568      	adds	r5, #104	; 0x68
 8010ce8:	e7e9      	b.n	8010cbe <_fwalk_reent+0x12>

08010cea <__retarget_lock_init_recursive>:
 8010cea:	4770      	bx	lr

08010cec <__retarget_lock_acquire_recursive>:
 8010cec:	4770      	bx	lr

08010cee <__retarget_lock_release_recursive>:
 8010cee:	4770      	bx	lr

08010cf0 <__malloc_lock>:
 8010cf0:	4801      	ldr	r0, [pc, #4]	; (8010cf8 <__malloc_lock+0x8>)
 8010cf2:	f7ff bffb 	b.w	8010cec <__retarget_lock_acquire_recursive>
 8010cf6:	bf00      	nop
 8010cf8:	20002ed8 	.word	0x20002ed8

08010cfc <__malloc_unlock>:
 8010cfc:	4801      	ldr	r0, [pc, #4]	; (8010d04 <__malloc_unlock+0x8>)
 8010cfe:	f7ff bff6 	b.w	8010cee <__retarget_lock_release_recursive>
 8010d02:	bf00      	nop
 8010d04:	20002ed8 	.word	0x20002ed8

08010d08 <__ssputs_r>:
 8010d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d0c:	688e      	ldr	r6, [r1, #8]
 8010d0e:	429e      	cmp	r6, r3
 8010d10:	4682      	mov	sl, r0
 8010d12:	460c      	mov	r4, r1
 8010d14:	4690      	mov	r8, r2
 8010d16:	461f      	mov	r7, r3
 8010d18:	d838      	bhi.n	8010d8c <__ssputs_r+0x84>
 8010d1a:	898a      	ldrh	r2, [r1, #12]
 8010d1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d20:	d032      	beq.n	8010d88 <__ssputs_r+0x80>
 8010d22:	6825      	ldr	r5, [r4, #0]
 8010d24:	6909      	ldr	r1, [r1, #16]
 8010d26:	eba5 0901 	sub.w	r9, r5, r1
 8010d2a:	6965      	ldr	r5, [r4, #20]
 8010d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d34:	3301      	adds	r3, #1
 8010d36:	444b      	add	r3, r9
 8010d38:	106d      	asrs	r5, r5, #1
 8010d3a:	429d      	cmp	r5, r3
 8010d3c:	bf38      	it	cc
 8010d3e:	461d      	movcc	r5, r3
 8010d40:	0553      	lsls	r3, r2, #21
 8010d42:	d531      	bpl.n	8010da8 <__ssputs_r+0xa0>
 8010d44:	4629      	mov	r1, r5
 8010d46:	f7ff fe39 	bl	80109bc <_malloc_r>
 8010d4a:	4606      	mov	r6, r0
 8010d4c:	b950      	cbnz	r0, 8010d64 <__ssputs_r+0x5c>
 8010d4e:	230c      	movs	r3, #12
 8010d50:	f8ca 3000 	str.w	r3, [sl]
 8010d54:	89a3      	ldrh	r3, [r4, #12]
 8010d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d5a:	81a3      	strh	r3, [r4, #12]
 8010d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d64:	6921      	ldr	r1, [r4, #16]
 8010d66:	464a      	mov	r2, r9
 8010d68:	f7ff fdc2 	bl	80108f0 <memcpy>
 8010d6c:	89a3      	ldrh	r3, [r4, #12]
 8010d6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d76:	81a3      	strh	r3, [r4, #12]
 8010d78:	6126      	str	r6, [r4, #16]
 8010d7a:	6165      	str	r5, [r4, #20]
 8010d7c:	444e      	add	r6, r9
 8010d7e:	eba5 0509 	sub.w	r5, r5, r9
 8010d82:	6026      	str	r6, [r4, #0]
 8010d84:	60a5      	str	r5, [r4, #8]
 8010d86:	463e      	mov	r6, r7
 8010d88:	42be      	cmp	r6, r7
 8010d8a:	d900      	bls.n	8010d8e <__ssputs_r+0x86>
 8010d8c:	463e      	mov	r6, r7
 8010d8e:	4632      	mov	r2, r6
 8010d90:	6820      	ldr	r0, [r4, #0]
 8010d92:	4641      	mov	r1, r8
 8010d94:	f000 fe60 	bl	8011a58 <memmove>
 8010d98:	68a3      	ldr	r3, [r4, #8]
 8010d9a:	6822      	ldr	r2, [r4, #0]
 8010d9c:	1b9b      	subs	r3, r3, r6
 8010d9e:	4432      	add	r2, r6
 8010da0:	60a3      	str	r3, [r4, #8]
 8010da2:	6022      	str	r2, [r4, #0]
 8010da4:	2000      	movs	r0, #0
 8010da6:	e7db      	b.n	8010d60 <__ssputs_r+0x58>
 8010da8:	462a      	mov	r2, r5
 8010daa:	f000 fe6f 	bl	8011a8c <_realloc_r>
 8010dae:	4606      	mov	r6, r0
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d1e1      	bne.n	8010d78 <__ssputs_r+0x70>
 8010db4:	6921      	ldr	r1, [r4, #16]
 8010db6:	4650      	mov	r0, sl
 8010db8:	f7ff fdb0 	bl	801091c <_free_r>
 8010dbc:	e7c7      	b.n	8010d4e <__ssputs_r+0x46>
	...

08010dc0 <_svfiprintf_r>:
 8010dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	4698      	mov	r8, r3
 8010dc6:	898b      	ldrh	r3, [r1, #12]
 8010dc8:	061b      	lsls	r3, r3, #24
 8010dca:	b09d      	sub	sp, #116	; 0x74
 8010dcc:	4607      	mov	r7, r0
 8010dce:	460d      	mov	r5, r1
 8010dd0:	4614      	mov	r4, r2
 8010dd2:	d50e      	bpl.n	8010df2 <_svfiprintf_r+0x32>
 8010dd4:	690b      	ldr	r3, [r1, #16]
 8010dd6:	b963      	cbnz	r3, 8010df2 <_svfiprintf_r+0x32>
 8010dd8:	2140      	movs	r1, #64	; 0x40
 8010dda:	f7ff fdef 	bl	80109bc <_malloc_r>
 8010dde:	6028      	str	r0, [r5, #0]
 8010de0:	6128      	str	r0, [r5, #16]
 8010de2:	b920      	cbnz	r0, 8010dee <_svfiprintf_r+0x2e>
 8010de4:	230c      	movs	r3, #12
 8010de6:	603b      	str	r3, [r7, #0]
 8010de8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dec:	e0d1      	b.n	8010f92 <_svfiprintf_r+0x1d2>
 8010dee:	2340      	movs	r3, #64	; 0x40
 8010df0:	616b      	str	r3, [r5, #20]
 8010df2:	2300      	movs	r3, #0
 8010df4:	9309      	str	r3, [sp, #36]	; 0x24
 8010df6:	2320      	movs	r3, #32
 8010df8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e00:	2330      	movs	r3, #48	; 0x30
 8010e02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010fac <_svfiprintf_r+0x1ec>
 8010e06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e0a:	f04f 0901 	mov.w	r9, #1
 8010e0e:	4623      	mov	r3, r4
 8010e10:	469a      	mov	sl, r3
 8010e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e16:	b10a      	cbz	r2, 8010e1c <_svfiprintf_r+0x5c>
 8010e18:	2a25      	cmp	r2, #37	; 0x25
 8010e1a:	d1f9      	bne.n	8010e10 <_svfiprintf_r+0x50>
 8010e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8010e20:	d00b      	beq.n	8010e3a <_svfiprintf_r+0x7a>
 8010e22:	465b      	mov	r3, fp
 8010e24:	4622      	mov	r2, r4
 8010e26:	4629      	mov	r1, r5
 8010e28:	4638      	mov	r0, r7
 8010e2a:	f7ff ff6d 	bl	8010d08 <__ssputs_r>
 8010e2e:	3001      	adds	r0, #1
 8010e30:	f000 80aa 	beq.w	8010f88 <_svfiprintf_r+0x1c8>
 8010e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e36:	445a      	add	r2, fp
 8010e38:	9209      	str	r2, [sp, #36]	; 0x24
 8010e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f000 80a2 	beq.w	8010f88 <_svfiprintf_r+0x1c8>
 8010e44:	2300      	movs	r3, #0
 8010e46:	f04f 32ff 	mov.w	r2, #4294967295
 8010e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e4e:	f10a 0a01 	add.w	sl, sl, #1
 8010e52:	9304      	str	r3, [sp, #16]
 8010e54:	9307      	str	r3, [sp, #28]
 8010e56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e5a:	931a      	str	r3, [sp, #104]	; 0x68
 8010e5c:	4654      	mov	r4, sl
 8010e5e:	2205      	movs	r2, #5
 8010e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e64:	4851      	ldr	r0, [pc, #324]	; (8010fac <_svfiprintf_r+0x1ec>)
 8010e66:	f7ef f9e3 	bl	8000230 <memchr>
 8010e6a:	9a04      	ldr	r2, [sp, #16]
 8010e6c:	b9d8      	cbnz	r0, 8010ea6 <_svfiprintf_r+0xe6>
 8010e6e:	06d0      	lsls	r0, r2, #27
 8010e70:	bf44      	itt	mi
 8010e72:	2320      	movmi	r3, #32
 8010e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e78:	0711      	lsls	r1, r2, #28
 8010e7a:	bf44      	itt	mi
 8010e7c:	232b      	movmi	r3, #43	; 0x2b
 8010e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e82:	f89a 3000 	ldrb.w	r3, [sl]
 8010e86:	2b2a      	cmp	r3, #42	; 0x2a
 8010e88:	d015      	beq.n	8010eb6 <_svfiprintf_r+0xf6>
 8010e8a:	9a07      	ldr	r2, [sp, #28]
 8010e8c:	4654      	mov	r4, sl
 8010e8e:	2000      	movs	r0, #0
 8010e90:	f04f 0c0a 	mov.w	ip, #10
 8010e94:	4621      	mov	r1, r4
 8010e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e9a:	3b30      	subs	r3, #48	; 0x30
 8010e9c:	2b09      	cmp	r3, #9
 8010e9e:	d94e      	bls.n	8010f3e <_svfiprintf_r+0x17e>
 8010ea0:	b1b0      	cbz	r0, 8010ed0 <_svfiprintf_r+0x110>
 8010ea2:	9207      	str	r2, [sp, #28]
 8010ea4:	e014      	b.n	8010ed0 <_svfiprintf_r+0x110>
 8010ea6:	eba0 0308 	sub.w	r3, r0, r8
 8010eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	9304      	str	r3, [sp, #16]
 8010eb2:	46a2      	mov	sl, r4
 8010eb4:	e7d2      	b.n	8010e5c <_svfiprintf_r+0x9c>
 8010eb6:	9b03      	ldr	r3, [sp, #12]
 8010eb8:	1d19      	adds	r1, r3, #4
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	9103      	str	r1, [sp, #12]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	bfbb      	ittet	lt
 8010ec2:	425b      	neglt	r3, r3
 8010ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8010ec8:	9307      	strge	r3, [sp, #28]
 8010eca:	9307      	strlt	r3, [sp, #28]
 8010ecc:	bfb8      	it	lt
 8010ece:	9204      	strlt	r2, [sp, #16]
 8010ed0:	7823      	ldrb	r3, [r4, #0]
 8010ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8010ed4:	d10c      	bne.n	8010ef0 <_svfiprintf_r+0x130>
 8010ed6:	7863      	ldrb	r3, [r4, #1]
 8010ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8010eda:	d135      	bne.n	8010f48 <_svfiprintf_r+0x188>
 8010edc:	9b03      	ldr	r3, [sp, #12]
 8010ede:	1d1a      	adds	r2, r3, #4
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	9203      	str	r2, [sp, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	bfb8      	it	lt
 8010ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8010eec:	3402      	adds	r4, #2
 8010eee:	9305      	str	r3, [sp, #20]
 8010ef0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010fbc <_svfiprintf_r+0x1fc>
 8010ef4:	7821      	ldrb	r1, [r4, #0]
 8010ef6:	2203      	movs	r2, #3
 8010ef8:	4650      	mov	r0, sl
 8010efa:	f7ef f999 	bl	8000230 <memchr>
 8010efe:	b140      	cbz	r0, 8010f12 <_svfiprintf_r+0x152>
 8010f00:	2340      	movs	r3, #64	; 0x40
 8010f02:	eba0 000a 	sub.w	r0, r0, sl
 8010f06:	fa03 f000 	lsl.w	r0, r3, r0
 8010f0a:	9b04      	ldr	r3, [sp, #16]
 8010f0c:	4303      	orrs	r3, r0
 8010f0e:	3401      	adds	r4, #1
 8010f10:	9304      	str	r3, [sp, #16]
 8010f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f16:	4826      	ldr	r0, [pc, #152]	; (8010fb0 <_svfiprintf_r+0x1f0>)
 8010f18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f1c:	2206      	movs	r2, #6
 8010f1e:	f7ef f987 	bl	8000230 <memchr>
 8010f22:	2800      	cmp	r0, #0
 8010f24:	d038      	beq.n	8010f98 <_svfiprintf_r+0x1d8>
 8010f26:	4b23      	ldr	r3, [pc, #140]	; (8010fb4 <_svfiprintf_r+0x1f4>)
 8010f28:	bb1b      	cbnz	r3, 8010f72 <_svfiprintf_r+0x1b2>
 8010f2a:	9b03      	ldr	r3, [sp, #12]
 8010f2c:	3307      	adds	r3, #7
 8010f2e:	f023 0307 	bic.w	r3, r3, #7
 8010f32:	3308      	adds	r3, #8
 8010f34:	9303      	str	r3, [sp, #12]
 8010f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f38:	4433      	add	r3, r6
 8010f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f3c:	e767      	b.n	8010e0e <_svfiprintf_r+0x4e>
 8010f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f42:	460c      	mov	r4, r1
 8010f44:	2001      	movs	r0, #1
 8010f46:	e7a5      	b.n	8010e94 <_svfiprintf_r+0xd4>
 8010f48:	2300      	movs	r3, #0
 8010f4a:	3401      	adds	r4, #1
 8010f4c:	9305      	str	r3, [sp, #20]
 8010f4e:	4619      	mov	r1, r3
 8010f50:	f04f 0c0a 	mov.w	ip, #10
 8010f54:	4620      	mov	r0, r4
 8010f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f5a:	3a30      	subs	r2, #48	; 0x30
 8010f5c:	2a09      	cmp	r2, #9
 8010f5e:	d903      	bls.n	8010f68 <_svfiprintf_r+0x1a8>
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d0c5      	beq.n	8010ef0 <_svfiprintf_r+0x130>
 8010f64:	9105      	str	r1, [sp, #20]
 8010f66:	e7c3      	b.n	8010ef0 <_svfiprintf_r+0x130>
 8010f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	2301      	movs	r3, #1
 8010f70:	e7f0      	b.n	8010f54 <_svfiprintf_r+0x194>
 8010f72:	ab03      	add	r3, sp, #12
 8010f74:	9300      	str	r3, [sp, #0]
 8010f76:	462a      	mov	r2, r5
 8010f78:	4b0f      	ldr	r3, [pc, #60]	; (8010fb8 <_svfiprintf_r+0x1f8>)
 8010f7a:	a904      	add	r1, sp, #16
 8010f7c:	4638      	mov	r0, r7
 8010f7e:	f3af 8000 	nop.w
 8010f82:	1c42      	adds	r2, r0, #1
 8010f84:	4606      	mov	r6, r0
 8010f86:	d1d6      	bne.n	8010f36 <_svfiprintf_r+0x176>
 8010f88:	89ab      	ldrh	r3, [r5, #12]
 8010f8a:	065b      	lsls	r3, r3, #25
 8010f8c:	f53f af2c 	bmi.w	8010de8 <_svfiprintf_r+0x28>
 8010f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f92:	b01d      	add	sp, #116	; 0x74
 8010f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f98:	ab03      	add	r3, sp, #12
 8010f9a:	9300      	str	r3, [sp, #0]
 8010f9c:	462a      	mov	r2, r5
 8010f9e:	4b06      	ldr	r3, [pc, #24]	; (8010fb8 <_svfiprintf_r+0x1f8>)
 8010fa0:	a904      	add	r1, sp, #16
 8010fa2:	4638      	mov	r0, r7
 8010fa4:	f000 f9d4 	bl	8011350 <_printf_i>
 8010fa8:	e7eb      	b.n	8010f82 <_svfiprintf_r+0x1c2>
 8010faa:	bf00      	nop
 8010fac:	080126dc 	.word	0x080126dc
 8010fb0:	080126e6 	.word	0x080126e6
 8010fb4:	00000000 	.word	0x00000000
 8010fb8:	08010d09 	.word	0x08010d09
 8010fbc:	080126e2 	.word	0x080126e2

08010fc0 <__sfputc_r>:
 8010fc0:	6893      	ldr	r3, [r2, #8]
 8010fc2:	3b01      	subs	r3, #1
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	b410      	push	{r4}
 8010fc8:	6093      	str	r3, [r2, #8]
 8010fca:	da08      	bge.n	8010fde <__sfputc_r+0x1e>
 8010fcc:	6994      	ldr	r4, [r2, #24]
 8010fce:	42a3      	cmp	r3, r4
 8010fd0:	db01      	blt.n	8010fd6 <__sfputc_r+0x16>
 8010fd2:	290a      	cmp	r1, #10
 8010fd4:	d103      	bne.n	8010fde <__sfputc_r+0x1e>
 8010fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fda:	f000 bb23 	b.w	8011624 <__swbuf_r>
 8010fde:	6813      	ldr	r3, [r2, #0]
 8010fe0:	1c58      	adds	r0, r3, #1
 8010fe2:	6010      	str	r0, [r2, #0]
 8010fe4:	7019      	strb	r1, [r3, #0]
 8010fe6:	4608      	mov	r0, r1
 8010fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fec:	4770      	bx	lr

08010fee <__sfputs_r>:
 8010fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff0:	4606      	mov	r6, r0
 8010ff2:	460f      	mov	r7, r1
 8010ff4:	4614      	mov	r4, r2
 8010ff6:	18d5      	adds	r5, r2, r3
 8010ff8:	42ac      	cmp	r4, r5
 8010ffa:	d101      	bne.n	8011000 <__sfputs_r+0x12>
 8010ffc:	2000      	movs	r0, #0
 8010ffe:	e007      	b.n	8011010 <__sfputs_r+0x22>
 8011000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011004:	463a      	mov	r2, r7
 8011006:	4630      	mov	r0, r6
 8011008:	f7ff ffda 	bl	8010fc0 <__sfputc_r>
 801100c:	1c43      	adds	r3, r0, #1
 801100e:	d1f3      	bne.n	8010ff8 <__sfputs_r+0xa>
 8011010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011014 <_vfiprintf_r>:
 8011014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011018:	460d      	mov	r5, r1
 801101a:	b09d      	sub	sp, #116	; 0x74
 801101c:	4614      	mov	r4, r2
 801101e:	4698      	mov	r8, r3
 8011020:	4606      	mov	r6, r0
 8011022:	b118      	cbz	r0, 801102c <_vfiprintf_r+0x18>
 8011024:	6983      	ldr	r3, [r0, #24]
 8011026:	b90b      	cbnz	r3, 801102c <_vfiprintf_r+0x18>
 8011028:	f7ff fdc2 	bl	8010bb0 <__sinit>
 801102c:	4b89      	ldr	r3, [pc, #548]	; (8011254 <_vfiprintf_r+0x240>)
 801102e:	429d      	cmp	r5, r3
 8011030:	d11b      	bne.n	801106a <_vfiprintf_r+0x56>
 8011032:	6875      	ldr	r5, [r6, #4]
 8011034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011036:	07d9      	lsls	r1, r3, #31
 8011038:	d405      	bmi.n	8011046 <_vfiprintf_r+0x32>
 801103a:	89ab      	ldrh	r3, [r5, #12]
 801103c:	059a      	lsls	r2, r3, #22
 801103e:	d402      	bmi.n	8011046 <_vfiprintf_r+0x32>
 8011040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011042:	f7ff fe53 	bl	8010cec <__retarget_lock_acquire_recursive>
 8011046:	89ab      	ldrh	r3, [r5, #12]
 8011048:	071b      	lsls	r3, r3, #28
 801104a:	d501      	bpl.n	8011050 <_vfiprintf_r+0x3c>
 801104c:	692b      	ldr	r3, [r5, #16]
 801104e:	b9eb      	cbnz	r3, 801108c <_vfiprintf_r+0x78>
 8011050:	4629      	mov	r1, r5
 8011052:	4630      	mov	r0, r6
 8011054:	f000 fb4a 	bl	80116ec <__swsetup_r>
 8011058:	b1c0      	cbz	r0, 801108c <_vfiprintf_r+0x78>
 801105a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801105c:	07dc      	lsls	r4, r3, #31
 801105e:	d50e      	bpl.n	801107e <_vfiprintf_r+0x6a>
 8011060:	f04f 30ff 	mov.w	r0, #4294967295
 8011064:	b01d      	add	sp, #116	; 0x74
 8011066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106a:	4b7b      	ldr	r3, [pc, #492]	; (8011258 <_vfiprintf_r+0x244>)
 801106c:	429d      	cmp	r5, r3
 801106e:	d101      	bne.n	8011074 <_vfiprintf_r+0x60>
 8011070:	68b5      	ldr	r5, [r6, #8]
 8011072:	e7df      	b.n	8011034 <_vfiprintf_r+0x20>
 8011074:	4b79      	ldr	r3, [pc, #484]	; (801125c <_vfiprintf_r+0x248>)
 8011076:	429d      	cmp	r5, r3
 8011078:	bf08      	it	eq
 801107a:	68f5      	ldreq	r5, [r6, #12]
 801107c:	e7da      	b.n	8011034 <_vfiprintf_r+0x20>
 801107e:	89ab      	ldrh	r3, [r5, #12]
 8011080:	0598      	lsls	r0, r3, #22
 8011082:	d4ed      	bmi.n	8011060 <_vfiprintf_r+0x4c>
 8011084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011086:	f7ff fe32 	bl	8010cee <__retarget_lock_release_recursive>
 801108a:	e7e9      	b.n	8011060 <_vfiprintf_r+0x4c>
 801108c:	2300      	movs	r3, #0
 801108e:	9309      	str	r3, [sp, #36]	; 0x24
 8011090:	2320      	movs	r3, #32
 8011092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011096:	f8cd 800c 	str.w	r8, [sp, #12]
 801109a:	2330      	movs	r3, #48	; 0x30
 801109c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011260 <_vfiprintf_r+0x24c>
 80110a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110a4:	f04f 0901 	mov.w	r9, #1
 80110a8:	4623      	mov	r3, r4
 80110aa:	469a      	mov	sl, r3
 80110ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110b0:	b10a      	cbz	r2, 80110b6 <_vfiprintf_r+0xa2>
 80110b2:	2a25      	cmp	r2, #37	; 0x25
 80110b4:	d1f9      	bne.n	80110aa <_vfiprintf_r+0x96>
 80110b6:	ebba 0b04 	subs.w	fp, sl, r4
 80110ba:	d00b      	beq.n	80110d4 <_vfiprintf_r+0xc0>
 80110bc:	465b      	mov	r3, fp
 80110be:	4622      	mov	r2, r4
 80110c0:	4629      	mov	r1, r5
 80110c2:	4630      	mov	r0, r6
 80110c4:	f7ff ff93 	bl	8010fee <__sfputs_r>
 80110c8:	3001      	adds	r0, #1
 80110ca:	f000 80aa 	beq.w	8011222 <_vfiprintf_r+0x20e>
 80110ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110d0:	445a      	add	r2, fp
 80110d2:	9209      	str	r2, [sp, #36]	; 0x24
 80110d4:	f89a 3000 	ldrb.w	r3, [sl]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f000 80a2 	beq.w	8011222 <_vfiprintf_r+0x20e>
 80110de:	2300      	movs	r3, #0
 80110e0:	f04f 32ff 	mov.w	r2, #4294967295
 80110e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110e8:	f10a 0a01 	add.w	sl, sl, #1
 80110ec:	9304      	str	r3, [sp, #16]
 80110ee:	9307      	str	r3, [sp, #28]
 80110f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110f4:	931a      	str	r3, [sp, #104]	; 0x68
 80110f6:	4654      	mov	r4, sl
 80110f8:	2205      	movs	r2, #5
 80110fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110fe:	4858      	ldr	r0, [pc, #352]	; (8011260 <_vfiprintf_r+0x24c>)
 8011100:	f7ef f896 	bl	8000230 <memchr>
 8011104:	9a04      	ldr	r2, [sp, #16]
 8011106:	b9d8      	cbnz	r0, 8011140 <_vfiprintf_r+0x12c>
 8011108:	06d1      	lsls	r1, r2, #27
 801110a:	bf44      	itt	mi
 801110c:	2320      	movmi	r3, #32
 801110e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011112:	0713      	lsls	r3, r2, #28
 8011114:	bf44      	itt	mi
 8011116:	232b      	movmi	r3, #43	; 0x2b
 8011118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801111c:	f89a 3000 	ldrb.w	r3, [sl]
 8011120:	2b2a      	cmp	r3, #42	; 0x2a
 8011122:	d015      	beq.n	8011150 <_vfiprintf_r+0x13c>
 8011124:	9a07      	ldr	r2, [sp, #28]
 8011126:	4654      	mov	r4, sl
 8011128:	2000      	movs	r0, #0
 801112a:	f04f 0c0a 	mov.w	ip, #10
 801112e:	4621      	mov	r1, r4
 8011130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011134:	3b30      	subs	r3, #48	; 0x30
 8011136:	2b09      	cmp	r3, #9
 8011138:	d94e      	bls.n	80111d8 <_vfiprintf_r+0x1c4>
 801113a:	b1b0      	cbz	r0, 801116a <_vfiprintf_r+0x156>
 801113c:	9207      	str	r2, [sp, #28]
 801113e:	e014      	b.n	801116a <_vfiprintf_r+0x156>
 8011140:	eba0 0308 	sub.w	r3, r0, r8
 8011144:	fa09 f303 	lsl.w	r3, r9, r3
 8011148:	4313      	orrs	r3, r2
 801114a:	9304      	str	r3, [sp, #16]
 801114c:	46a2      	mov	sl, r4
 801114e:	e7d2      	b.n	80110f6 <_vfiprintf_r+0xe2>
 8011150:	9b03      	ldr	r3, [sp, #12]
 8011152:	1d19      	adds	r1, r3, #4
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	9103      	str	r1, [sp, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	bfbb      	ittet	lt
 801115c:	425b      	neglt	r3, r3
 801115e:	f042 0202 	orrlt.w	r2, r2, #2
 8011162:	9307      	strge	r3, [sp, #28]
 8011164:	9307      	strlt	r3, [sp, #28]
 8011166:	bfb8      	it	lt
 8011168:	9204      	strlt	r2, [sp, #16]
 801116a:	7823      	ldrb	r3, [r4, #0]
 801116c:	2b2e      	cmp	r3, #46	; 0x2e
 801116e:	d10c      	bne.n	801118a <_vfiprintf_r+0x176>
 8011170:	7863      	ldrb	r3, [r4, #1]
 8011172:	2b2a      	cmp	r3, #42	; 0x2a
 8011174:	d135      	bne.n	80111e2 <_vfiprintf_r+0x1ce>
 8011176:	9b03      	ldr	r3, [sp, #12]
 8011178:	1d1a      	adds	r2, r3, #4
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	9203      	str	r2, [sp, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	bfb8      	it	lt
 8011182:	f04f 33ff 	movlt.w	r3, #4294967295
 8011186:	3402      	adds	r4, #2
 8011188:	9305      	str	r3, [sp, #20]
 801118a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011270 <_vfiprintf_r+0x25c>
 801118e:	7821      	ldrb	r1, [r4, #0]
 8011190:	2203      	movs	r2, #3
 8011192:	4650      	mov	r0, sl
 8011194:	f7ef f84c 	bl	8000230 <memchr>
 8011198:	b140      	cbz	r0, 80111ac <_vfiprintf_r+0x198>
 801119a:	2340      	movs	r3, #64	; 0x40
 801119c:	eba0 000a 	sub.w	r0, r0, sl
 80111a0:	fa03 f000 	lsl.w	r0, r3, r0
 80111a4:	9b04      	ldr	r3, [sp, #16]
 80111a6:	4303      	orrs	r3, r0
 80111a8:	3401      	adds	r4, #1
 80111aa:	9304      	str	r3, [sp, #16]
 80111ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111b0:	482c      	ldr	r0, [pc, #176]	; (8011264 <_vfiprintf_r+0x250>)
 80111b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111b6:	2206      	movs	r2, #6
 80111b8:	f7ef f83a 	bl	8000230 <memchr>
 80111bc:	2800      	cmp	r0, #0
 80111be:	d03f      	beq.n	8011240 <_vfiprintf_r+0x22c>
 80111c0:	4b29      	ldr	r3, [pc, #164]	; (8011268 <_vfiprintf_r+0x254>)
 80111c2:	bb1b      	cbnz	r3, 801120c <_vfiprintf_r+0x1f8>
 80111c4:	9b03      	ldr	r3, [sp, #12]
 80111c6:	3307      	adds	r3, #7
 80111c8:	f023 0307 	bic.w	r3, r3, #7
 80111cc:	3308      	adds	r3, #8
 80111ce:	9303      	str	r3, [sp, #12]
 80111d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111d2:	443b      	add	r3, r7
 80111d4:	9309      	str	r3, [sp, #36]	; 0x24
 80111d6:	e767      	b.n	80110a8 <_vfiprintf_r+0x94>
 80111d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80111dc:	460c      	mov	r4, r1
 80111de:	2001      	movs	r0, #1
 80111e0:	e7a5      	b.n	801112e <_vfiprintf_r+0x11a>
 80111e2:	2300      	movs	r3, #0
 80111e4:	3401      	adds	r4, #1
 80111e6:	9305      	str	r3, [sp, #20]
 80111e8:	4619      	mov	r1, r3
 80111ea:	f04f 0c0a 	mov.w	ip, #10
 80111ee:	4620      	mov	r0, r4
 80111f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111f4:	3a30      	subs	r2, #48	; 0x30
 80111f6:	2a09      	cmp	r2, #9
 80111f8:	d903      	bls.n	8011202 <_vfiprintf_r+0x1ee>
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d0c5      	beq.n	801118a <_vfiprintf_r+0x176>
 80111fe:	9105      	str	r1, [sp, #20]
 8011200:	e7c3      	b.n	801118a <_vfiprintf_r+0x176>
 8011202:	fb0c 2101 	mla	r1, ip, r1, r2
 8011206:	4604      	mov	r4, r0
 8011208:	2301      	movs	r3, #1
 801120a:	e7f0      	b.n	80111ee <_vfiprintf_r+0x1da>
 801120c:	ab03      	add	r3, sp, #12
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	462a      	mov	r2, r5
 8011212:	4b16      	ldr	r3, [pc, #88]	; (801126c <_vfiprintf_r+0x258>)
 8011214:	a904      	add	r1, sp, #16
 8011216:	4630      	mov	r0, r6
 8011218:	f3af 8000 	nop.w
 801121c:	4607      	mov	r7, r0
 801121e:	1c78      	adds	r0, r7, #1
 8011220:	d1d6      	bne.n	80111d0 <_vfiprintf_r+0x1bc>
 8011222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011224:	07d9      	lsls	r1, r3, #31
 8011226:	d405      	bmi.n	8011234 <_vfiprintf_r+0x220>
 8011228:	89ab      	ldrh	r3, [r5, #12]
 801122a:	059a      	lsls	r2, r3, #22
 801122c:	d402      	bmi.n	8011234 <_vfiprintf_r+0x220>
 801122e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011230:	f7ff fd5d 	bl	8010cee <__retarget_lock_release_recursive>
 8011234:	89ab      	ldrh	r3, [r5, #12]
 8011236:	065b      	lsls	r3, r3, #25
 8011238:	f53f af12 	bmi.w	8011060 <_vfiprintf_r+0x4c>
 801123c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801123e:	e711      	b.n	8011064 <_vfiprintf_r+0x50>
 8011240:	ab03      	add	r3, sp, #12
 8011242:	9300      	str	r3, [sp, #0]
 8011244:	462a      	mov	r2, r5
 8011246:	4b09      	ldr	r3, [pc, #36]	; (801126c <_vfiprintf_r+0x258>)
 8011248:	a904      	add	r1, sp, #16
 801124a:	4630      	mov	r0, r6
 801124c:	f000 f880 	bl	8011350 <_printf_i>
 8011250:	e7e4      	b.n	801121c <_vfiprintf_r+0x208>
 8011252:	bf00      	nop
 8011254:	0801269c 	.word	0x0801269c
 8011258:	080126bc 	.word	0x080126bc
 801125c:	0801267c 	.word	0x0801267c
 8011260:	080126dc 	.word	0x080126dc
 8011264:	080126e6 	.word	0x080126e6
 8011268:	00000000 	.word	0x00000000
 801126c:	08010fef 	.word	0x08010fef
 8011270:	080126e2 	.word	0x080126e2

08011274 <_printf_common>:
 8011274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011278:	4616      	mov	r6, r2
 801127a:	4699      	mov	r9, r3
 801127c:	688a      	ldr	r2, [r1, #8]
 801127e:	690b      	ldr	r3, [r1, #16]
 8011280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011284:	4293      	cmp	r3, r2
 8011286:	bfb8      	it	lt
 8011288:	4613      	movlt	r3, r2
 801128a:	6033      	str	r3, [r6, #0]
 801128c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011290:	4607      	mov	r7, r0
 8011292:	460c      	mov	r4, r1
 8011294:	b10a      	cbz	r2, 801129a <_printf_common+0x26>
 8011296:	3301      	adds	r3, #1
 8011298:	6033      	str	r3, [r6, #0]
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	0699      	lsls	r1, r3, #26
 801129e:	bf42      	ittt	mi
 80112a0:	6833      	ldrmi	r3, [r6, #0]
 80112a2:	3302      	addmi	r3, #2
 80112a4:	6033      	strmi	r3, [r6, #0]
 80112a6:	6825      	ldr	r5, [r4, #0]
 80112a8:	f015 0506 	ands.w	r5, r5, #6
 80112ac:	d106      	bne.n	80112bc <_printf_common+0x48>
 80112ae:	f104 0a19 	add.w	sl, r4, #25
 80112b2:	68e3      	ldr	r3, [r4, #12]
 80112b4:	6832      	ldr	r2, [r6, #0]
 80112b6:	1a9b      	subs	r3, r3, r2
 80112b8:	42ab      	cmp	r3, r5
 80112ba:	dc26      	bgt.n	801130a <_printf_common+0x96>
 80112bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80112c0:	1e13      	subs	r3, r2, #0
 80112c2:	6822      	ldr	r2, [r4, #0]
 80112c4:	bf18      	it	ne
 80112c6:	2301      	movne	r3, #1
 80112c8:	0692      	lsls	r2, r2, #26
 80112ca:	d42b      	bmi.n	8011324 <_printf_common+0xb0>
 80112cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80112d0:	4649      	mov	r1, r9
 80112d2:	4638      	mov	r0, r7
 80112d4:	47c0      	blx	r8
 80112d6:	3001      	adds	r0, #1
 80112d8:	d01e      	beq.n	8011318 <_printf_common+0xa4>
 80112da:	6823      	ldr	r3, [r4, #0]
 80112dc:	68e5      	ldr	r5, [r4, #12]
 80112de:	6832      	ldr	r2, [r6, #0]
 80112e0:	f003 0306 	and.w	r3, r3, #6
 80112e4:	2b04      	cmp	r3, #4
 80112e6:	bf08      	it	eq
 80112e8:	1aad      	subeq	r5, r5, r2
 80112ea:	68a3      	ldr	r3, [r4, #8]
 80112ec:	6922      	ldr	r2, [r4, #16]
 80112ee:	bf0c      	ite	eq
 80112f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112f4:	2500      	movne	r5, #0
 80112f6:	4293      	cmp	r3, r2
 80112f8:	bfc4      	itt	gt
 80112fa:	1a9b      	subgt	r3, r3, r2
 80112fc:	18ed      	addgt	r5, r5, r3
 80112fe:	2600      	movs	r6, #0
 8011300:	341a      	adds	r4, #26
 8011302:	42b5      	cmp	r5, r6
 8011304:	d11a      	bne.n	801133c <_printf_common+0xc8>
 8011306:	2000      	movs	r0, #0
 8011308:	e008      	b.n	801131c <_printf_common+0xa8>
 801130a:	2301      	movs	r3, #1
 801130c:	4652      	mov	r2, sl
 801130e:	4649      	mov	r1, r9
 8011310:	4638      	mov	r0, r7
 8011312:	47c0      	blx	r8
 8011314:	3001      	adds	r0, #1
 8011316:	d103      	bne.n	8011320 <_printf_common+0xac>
 8011318:	f04f 30ff 	mov.w	r0, #4294967295
 801131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011320:	3501      	adds	r5, #1
 8011322:	e7c6      	b.n	80112b2 <_printf_common+0x3e>
 8011324:	18e1      	adds	r1, r4, r3
 8011326:	1c5a      	adds	r2, r3, #1
 8011328:	2030      	movs	r0, #48	; 0x30
 801132a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801132e:	4422      	add	r2, r4
 8011330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011338:	3302      	adds	r3, #2
 801133a:	e7c7      	b.n	80112cc <_printf_common+0x58>
 801133c:	2301      	movs	r3, #1
 801133e:	4622      	mov	r2, r4
 8011340:	4649      	mov	r1, r9
 8011342:	4638      	mov	r0, r7
 8011344:	47c0      	blx	r8
 8011346:	3001      	adds	r0, #1
 8011348:	d0e6      	beq.n	8011318 <_printf_common+0xa4>
 801134a:	3601      	adds	r6, #1
 801134c:	e7d9      	b.n	8011302 <_printf_common+0x8e>
	...

08011350 <_printf_i>:
 8011350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011354:	460c      	mov	r4, r1
 8011356:	4691      	mov	r9, r2
 8011358:	7e27      	ldrb	r7, [r4, #24]
 801135a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801135c:	2f78      	cmp	r7, #120	; 0x78
 801135e:	4680      	mov	r8, r0
 8011360:	469a      	mov	sl, r3
 8011362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011366:	d807      	bhi.n	8011378 <_printf_i+0x28>
 8011368:	2f62      	cmp	r7, #98	; 0x62
 801136a:	d80a      	bhi.n	8011382 <_printf_i+0x32>
 801136c:	2f00      	cmp	r7, #0
 801136e:	f000 80d8 	beq.w	8011522 <_printf_i+0x1d2>
 8011372:	2f58      	cmp	r7, #88	; 0x58
 8011374:	f000 80a3 	beq.w	80114be <_printf_i+0x16e>
 8011378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801137c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011380:	e03a      	b.n	80113f8 <_printf_i+0xa8>
 8011382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011386:	2b15      	cmp	r3, #21
 8011388:	d8f6      	bhi.n	8011378 <_printf_i+0x28>
 801138a:	a001      	add	r0, pc, #4	; (adr r0, 8011390 <_printf_i+0x40>)
 801138c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011390:	080113e9 	.word	0x080113e9
 8011394:	080113fd 	.word	0x080113fd
 8011398:	08011379 	.word	0x08011379
 801139c:	08011379 	.word	0x08011379
 80113a0:	08011379 	.word	0x08011379
 80113a4:	08011379 	.word	0x08011379
 80113a8:	080113fd 	.word	0x080113fd
 80113ac:	08011379 	.word	0x08011379
 80113b0:	08011379 	.word	0x08011379
 80113b4:	08011379 	.word	0x08011379
 80113b8:	08011379 	.word	0x08011379
 80113bc:	08011509 	.word	0x08011509
 80113c0:	0801142d 	.word	0x0801142d
 80113c4:	080114eb 	.word	0x080114eb
 80113c8:	08011379 	.word	0x08011379
 80113cc:	08011379 	.word	0x08011379
 80113d0:	0801152b 	.word	0x0801152b
 80113d4:	08011379 	.word	0x08011379
 80113d8:	0801142d 	.word	0x0801142d
 80113dc:	08011379 	.word	0x08011379
 80113e0:	08011379 	.word	0x08011379
 80113e4:	080114f3 	.word	0x080114f3
 80113e8:	680b      	ldr	r3, [r1, #0]
 80113ea:	1d1a      	adds	r2, r3, #4
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	600a      	str	r2, [r1, #0]
 80113f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80113f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113f8:	2301      	movs	r3, #1
 80113fa:	e0a3      	b.n	8011544 <_printf_i+0x1f4>
 80113fc:	6825      	ldr	r5, [r4, #0]
 80113fe:	6808      	ldr	r0, [r1, #0]
 8011400:	062e      	lsls	r6, r5, #24
 8011402:	f100 0304 	add.w	r3, r0, #4
 8011406:	d50a      	bpl.n	801141e <_printf_i+0xce>
 8011408:	6805      	ldr	r5, [r0, #0]
 801140a:	600b      	str	r3, [r1, #0]
 801140c:	2d00      	cmp	r5, #0
 801140e:	da03      	bge.n	8011418 <_printf_i+0xc8>
 8011410:	232d      	movs	r3, #45	; 0x2d
 8011412:	426d      	negs	r5, r5
 8011414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011418:	485e      	ldr	r0, [pc, #376]	; (8011594 <_printf_i+0x244>)
 801141a:	230a      	movs	r3, #10
 801141c:	e019      	b.n	8011452 <_printf_i+0x102>
 801141e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011422:	6805      	ldr	r5, [r0, #0]
 8011424:	600b      	str	r3, [r1, #0]
 8011426:	bf18      	it	ne
 8011428:	b22d      	sxthne	r5, r5
 801142a:	e7ef      	b.n	801140c <_printf_i+0xbc>
 801142c:	680b      	ldr	r3, [r1, #0]
 801142e:	6825      	ldr	r5, [r4, #0]
 8011430:	1d18      	adds	r0, r3, #4
 8011432:	6008      	str	r0, [r1, #0]
 8011434:	0628      	lsls	r0, r5, #24
 8011436:	d501      	bpl.n	801143c <_printf_i+0xec>
 8011438:	681d      	ldr	r5, [r3, #0]
 801143a:	e002      	b.n	8011442 <_printf_i+0xf2>
 801143c:	0669      	lsls	r1, r5, #25
 801143e:	d5fb      	bpl.n	8011438 <_printf_i+0xe8>
 8011440:	881d      	ldrh	r5, [r3, #0]
 8011442:	4854      	ldr	r0, [pc, #336]	; (8011594 <_printf_i+0x244>)
 8011444:	2f6f      	cmp	r7, #111	; 0x6f
 8011446:	bf0c      	ite	eq
 8011448:	2308      	moveq	r3, #8
 801144a:	230a      	movne	r3, #10
 801144c:	2100      	movs	r1, #0
 801144e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011452:	6866      	ldr	r6, [r4, #4]
 8011454:	60a6      	str	r6, [r4, #8]
 8011456:	2e00      	cmp	r6, #0
 8011458:	bfa2      	ittt	ge
 801145a:	6821      	ldrge	r1, [r4, #0]
 801145c:	f021 0104 	bicge.w	r1, r1, #4
 8011460:	6021      	strge	r1, [r4, #0]
 8011462:	b90d      	cbnz	r5, 8011468 <_printf_i+0x118>
 8011464:	2e00      	cmp	r6, #0
 8011466:	d04d      	beq.n	8011504 <_printf_i+0x1b4>
 8011468:	4616      	mov	r6, r2
 801146a:	fbb5 f1f3 	udiv	r1, r5, r3
 801146e:	fb03 5711 	mls	r7, r3, r1, r5
 8011472:	5dc7      	ldrb	r7, [r0, r7]
 8011474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011478:	462f      	mov	r7, r5
 801147a:	42bb      	cmp	r3, r7
 801147c:	460d      	mov	r5, r1
 801147e:	d9f4      	bls.n	801146a <_printf_i+0x11a>
 8011480:	2b08      	cmp	r3, #8
 8011482:	d10b      	bne.n	801149c <_printf_i+0x14c>
 8011484:	6823      	ldr	r3, [r4, #0]
 8011486:	07df      	lsls	r7, r3, #31
 8011488:	d508      	bpl.n	801149c <_printf_i+0x14c>
 801148a:	6923      	ldr	r3, [r4, #16]
 801148c:	6861      	ldr	r1, [r4, #4]
 801148e:	4299      	cmp	r1, r3
 8011490:	bfde      	ittt	le
 8011492:	2330      	movle	r3, #48	; 0x30
 8011494:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011498:	f106 36ff 	addle.w	r6, r6, #4294967295
 801149c:	1b92      	subs	r2, r2, r6
 801149e:	6122      	str	r2, [r4, #16]
 80114a0:	f8cd a000 	str.w	sl, [sp]
 80114a4:	464b      	mov	r3, r9
 80114a6:	aa03      	add	r2, sp, #12
 80114a8:	4621      	mov	r1, r4
 80114aa:	4640      	mov	r0, r8
 80114ac:	f7ff fee2 	bl	8011274 <_printf_common>
 80114b0:	3001      	adds	r0, #1
 80114b2:	d14c      	bne.n	801154e <_printf_i+0x1fe>
 80114b4:	f04f 30ff 	mov.w	r0, #4294967295
 80114b8:	b004      	add	sp, #16
 80114ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114be:	4835      	ldr	r0, [pc, #212]	; (8011594 <_printf_i+0x244>)
 80114c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80114c4:	6823      	ldr	r3, [r4, #0]
 80114c6:	680e      	ldr	r6, [r1, #0]
 80114c8:	061f      	lsls	r7, r3, #24
 80114ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80114ce:	600e      	str	r6, [r1, #0]
 80114d0:	d514      	bpl.n	80114fc <_printf_i+0x1ac>
 80114d2:	07d9      	lsls	r1, r3, #31
 80114d4:	bf44      	itt	mi
 80114d6:	f043 0320 	orrmi.w	r3, r3, #32
 80114da:	6023      	strmi	r3, [r4, #0]
 80114dc:	b91d      	cbnz	r5, 80114e6 <_printf_i+0x196>
 80114de:	6823      	ldr	r3, [r4, #0]
 80114e0:	f023 0320 	bic.w	r3, r3, #32
 80114e4:	6023      	str	r3, [r4, #0]
 80114e6:	2310      	movs	r3, #16
 80114e8:	e7b0      	b.n	801144c <_printf_i+0xfc>
 80114ea:	6823      	ldr	r3, [r4, #0]
 80114ec:	f043 0320 	orr.w	r3, r3, #32
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	2378      	movs	r3, #120	; 0x78
 80114f4:	4828      	ldr	r0, [pc, #160]	; (8011598 <_printf_i+0x248>)
 80114f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80114fa:	e7e3      	b.n	80114c4 <_printf_i+0x174>
 80114fc:	065e      	lsls	r6, r3, #25
 80114fe:	bf48      	it	mi
 8011500:	b2ad      	uxthmi	r5, r5
 8011502:	e7e6      	b.n	80114d2 <_printf_i+0x182>
 8011504:	4616      	mov	r6, r2
 8011506:	e7bb      	b.n	8011480 <_printf_i+0x130>
 8011508:	680b      	ldr	r3, [r1, #0]
 801150a:	6826      	ldr	r6, [r4, #0]
 801150c:	6960      	ldr	r0, [r4, #20]
 801150e:	1d1d      	adds	r5, r3, #4
 8011510:	600d      	str	r5, [r1, #0]
 8011512:	0635      	lsls	r5, r6, #24
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	d501      	bpl.n	801151c <_printf_i+0x1cc>
 8011518:	6018      	str	r0, [r3, #0]
 801151a:	e002      	b.n	8011522 <_printf_i+0x1d2>
 801151c:	0671      	lsls	r1, r6, #25
 801151e:	d5fb      	bpl.n	8011518 <_printf_i+0x1c8>
 8011520:	8018      	strh	r0, [r3, #0]
 8011522:	2300      	movs	r3, #0
 8011524:	6123      	str	r3, [r4, #16]
 8011526:	4616      	mov	r6, r2
 8011528:	e7ba      	b.n	80114a0 <_printf_i+0x150>
 801152a:	680b      	ldr	r3, [r1, #0]
 801152c:	1d1a      	adds	r2, r3, #4
 801152e:	600a      	str	r2, [r1, #0]
 8011530:	681e      	ldr	r6, [r3, #0]
 8011532:	6862      	ldr	r2, [r4, #4]
 8011534:	2100      	movs	r1, #0
 8011536:	4630      	mov	r0, r6
 8011538:	f7ee fe7a 	bl	8000230 <memchr>
 801153c:	b108      	cbz	r0, 8011542 <_printf_i+0x1f2>
 801153e:	1b80      	subs	r0, r0, r6
 8011540:	6060      	str	r0, [r4, #4]
 8011542:	6863      	ldr	r3, [r4, #4]
 8011544:	6123      	str	r3, [r4, #16]
 8011546:	2300      	movs	r3, #0
 8011548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801154c:	e7a8      	b.n	80114a0 <_printf_i+0x150>
 801154e:	6923      	ldr	r3, [r4, #16]
 8011550:	4632      	mov	r2, r6
 8011552:	4649      	mov	r1, r9
 8011554:	4640      	mov	r0, r8
 8011556:	47d0      	blx	sl
 8011558:	3001      	adds	r0, #1
 801155a:	d0ab      	beq.n	80114b4 <_printf_i+0x164>
 801155c:	6823      	ldr	r3, [r4, #0]
 801155e:	079b      	lsls	r3, r3, #30
 8011560:	d413      	bmi.n	801158a <_printf_i+0x23a>
 8011562:	68e0      	ldr	r0, [r4, #12]
 8011564:	9b03      	ldr	r3, [sp, #12]
 8011566:	4298      	cmp	r0, r3
 8011568:	bfb8      	it	lt
 801156a:	4618      	movlt	r0, r3
 801156c:	e7a4      	b.n	80114b8 <_printf_i+0x168>
 801156e:	2301      	movs	r3, #1
 8011570:	4632      	mov	r2, r6
 8011572:	4649      	mov	r1, r9
 8011574:	4640      	mov	r0, r8
 8011576:	47d0      	blx	sl
 8011578:	3001      	adds	r0, #1
 801157a:	d09b      	beq.n	80114b4 <_printf_i+0x164>
 801157c:	3501      	adds	r5, #1
 801157e:	68e3      	ldr	r3, [r4, #12]
 8011580:	9903      	ldr	r1, [sp, #12]
 8011582:	1a5b      	subs	r3, r3, r1
 8011584:	42ab      	cmp	r3, r5
 8011586:	dcf2      	bgt.n	801156e <_printf_i+0x21e>
 8011588:	e7eb      	b.n	8011562 <_printf_i+0x212>
 801158a:	2500      	movs	r5, #0
 801158c:	f104 0619 	add.w	r6, r4, #25
 8011590:	e7f5      	b.n	801157e <_printf_i+0x22e>
 8011592:	bf00      	nop
 8011594:	080126ed 	.word	0x080126ed
 8011598:	080126fe 	.word	0x080126fe

0801159c <__sread>:
 801159c:	b510      	push	{r4, lr}
 801159e:	460c      	mov	r4, r1
 80115a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115a4:	f000 fa98 	bl	8011ad8 <_read_r>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	bfab      	itete	ge
 80115ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80115ae:	89a3      	ldrhlt	r3, [r4, #12]
 80115b0:	181b      	addge	r3, r3, r0
 80115b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80115b6:	bfac      	ite	ge
 80115b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80115ba:	81a3      	strhlt	r3, [r4, #12]
 80115bc:	bd10      	pop	{r4, pc}

080115be <__swrite>:
 80115be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c2:	461f      	mov	r7, r3
 80115c4:	898b      	ldrh	r3, [r1, #12]
 80115c6:	05db      	lsls	r3, r3, #23
 80115c8:	4605      	mov	r5, r0
 80115ca:	460c      	mov	r4, r1
 80115cc:	4616      	mov	r6, r2
 80115ce:	d505      	bpl.n	80115dc <__swrite+0x1e>
 80115d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115d4:	2302      	movs	r3, #2
 80115d6:	2200      	movs	r2, #0
 80115d8:	f000 f9c8 	bl	801196c <_lseek_r>
 80115dc:	89a3      	ldrh	r3, [r4, #12]
 80115de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115e6:	81a3      	strh	r3, [r4, #12]
 80115e8:	4632      	mov	r2, r6
 80115ea:	463b      	mov	r3, r7
 80115ec:	4628      	mov	r0, r5
 80115ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115f2:	f000 b869 	b.w	80116c8 <_write_r>

080115f6 <__sseek>:
 80115f6:	b510      	push	{r4, lr}
 80115f8:	460c      	mov	r4, r1
 80115fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115fe:	f000 f9b5 	bl	801196c <_lseek_r>
 8011602:	1c43      	adds	r3, r0, #1
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	bf15      	itete	ne
 8011608:	6560      	strne	r0, [r4, #84]	; 0x54
 801160a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801160e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011612:	81a3      	strheq	r3, [r4, #12]
 8011614:	bf18      	it	ne
 8011616:	81a3      	strhne	r3, [r4, #12]
 8011618:	bd10      	pop	{r4, pc}

0801161a <__sclose>:
 801161a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801161e:	f000 b8d3 	b.w	80117c8 <_close_r>
	...

08011624 <__swbuf_r>:
 8011624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011626:	460e      	mov	r6, r1
 8011628:	4614      	mov	r4, r2
 801162a:	4605      	mov	r5, r0
 801162c:	b118      	cbz	r0, 8011636 <__swbuf_r+0x12>
 801162e:	6983      	ldr	r3, [r0, #24]
 8011630:	b90b      	cbnz	r3, 8011636 <__swbuf_r+0x12>
 8011632:	f7ff fabd 	bl	8010bb0 <__sinit>
 8011636:	4b21      	ldr	r3, [pc, #132]	; (80116bc <__swbuf_r+0x98>)
 8011638:	429c      	cmp	r4, r3
 801163a:	d12b      	bne.n	8011694 <__swbuf_r+0x70>
 801163c:	686c      	ldr	r4, [r5, #4]
 801163e:	69a3      	ldr	r3, [r4, #24]
 8011640:	60a3      	str	r3, [r4, #8]
 8011642:	89a3      	ldrh	r3, [r4, #12]
 8011644:	071a      	lsls	r2, r3, #28
 8011646:	d52f      	bpl.n	80116a8 <__swbuf_r+0x84>
 8011648:	6923      	ldr	r3, [r4, #16]
 801164a:	b36b      	cbz	r3, 80116a8 <__swbuf_r+0x84>
 801164c:	6923      	ldr	r3, [r4, #16]
 801164e:	6820      	ldr	r0, [r4, #0]
 8011650:	1ac0      	subs	r0, r0, r3
 8011652:	6963      	ldr	r3, [r4, #20]
 8011654:	b2f6      	uxtb	r6, r6
 8011656:	4283      	cmp	r3, r0
 8011658:	4637      	mov	r7, r6
 801165a:	dc04      	bgt.n	8011666 <__swbuf_r+0x42>
 801165c:	4621      	mov	r1, r4
 801165e:	4628      	mov	r0, r5
 8011660:	f000 f948 	bl	80118f4 <_fflush_r>
 8011664:	bb30      	cbnz	r0, 80116b4 <__swbuf_r+0x90>
 8011666:	68a3      	ldr	r3, [r4, #8]
 8011668:	3b01      	subs	r3, #1
 801166a:	60a3      	str	r3, [r4, #8]
 801166c:	6823      	ldr	r3, [r4, #0]
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	6022      	str	r2, [r4, #0]
 8011672:	701e      	strb	r6, [r3, #0]
 8011674:	6963      	ldr	r3, [r4, #20]
 8011676:	3001      	adds	r0, #1
 8011678:	4283      	cmp	r3, r0
 801167a:	d004      	beq.n	8011686 <__swbuf_r+0x62>
 801167c:	89a3      	ldrh	r3, [r4, #12]
 801167e:	07db      	lsls	r3, r3, #31
 8011680:	d506      	bpl.n	8011690 <__swbuf_r+0x6c>
 8011682:	2e0a      	cmp	r6, #10
 8011684:	d104      	bne.n	8011690 <__swbuf_r+0x6c>
 8011686:	4621      	mov	r1, r4
 8011688:	4628      	mov	r0, r5
 801168a:	f000 f933 	bl	80118f4 <_fflush_r>
 801168e:	b988      	cbnz	r0, 80116b4 <__swbuf_r+0x90>
 8011690:	4638      	mov	r0, r7
 8011692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011694:	4b0a      	ldr	r3, [pc, #40]	; (80116c0 <__swbuf_r+0x9c>)
 8011696:	429c      	cmp	r4, r3
 8011698:	d101      	bne.n	801169e <__swbuf_r+0x7a>
 801169a:	68ac      	ldr	r4, [r5, #8]
 801169c:	e7cf      	b.n	801163e <__swbuf_r+0x1a>
 801169e:	4b09      	ldr	r3, [pc, #36]	; (80116c4 <__swbuf_r+0xa0>)
 80116a0:	429c      	cmp	r4, r3
 80116a2:	bf08      	it	eq
 80116a4:	68ec      	ldreq	r4, [r5, #12]
 80116a6:	e7ca      	b.n	801163e <__swbuf_r+0x1a>
 80116a8:	4621      	mov	r1, r4
 80116aa:	4628      	mov	r0, r5
 80116ac:	f000 f81e 	bl	80116ec <__swsetup_r>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	d0cb      	beq.n	801164c <__swbuf_r+0x28>
 80116b4:	f04f 37ff 	mov.w	r7, #4294967295
 80116b8:	e7ea      	b.n	8011690 <__swbuf_r+0x6c>
 80116ba:	bf00      	nop
 80116bc:	0801269c 	.word	0x0801269c
 80116c0:	080126bc 	.word	0x080126bc
 80116c4:	0801267c 	.word	0x0801267c

080116c8 <_write_r>:
 80116c8:	b538      	push	{r3, r4, r5, lr}
 80116ca:	4d07      	ldr	r5, [pc, #28]	; (80116e8 <_write_r+0x20>)
 80116cc:	4604      	mov	r4, r0
 80116ce:	4608      	mov	r0, r1
 80116d0:	4611      	mov	r1, r2
 80116d2:	2200      	movs	r2, #0
 80116d4:	602a      	str	r2, [r5, #0]
 80116d6:	461a      	mov	r2, r3
 80116d8:	f7f0 f9c3 	bl	8001a62 <_write>
 80116dc:	1c43      	adds	r3, r0, #1
 80116de:	d102      	bne.n	80116e6 <_write_r+0x1e>
 80116e0:	682b      	ldr	r3, [r5, #0]
 80116e2:	b103      	cbz	r3, 80116e6 <_write_r+0x1e>
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	bd38      	pop	{r3, r4, r5, pc}
 80116e8:	20002ee0 	.word	0x20002ee0

080116ec <__swsetup_r>:
 80116ec:	4b32      	ldr	r3, [pc, #200]	; (80117b8 <__swsetup_r+0xcc>)
 80116ee:	b570      	push	{r4, r5, r6, lr}
 80116f0:	681d      	ldr	r5, [r3, #0]
 80116f2:	4606      	mov	r6, r0
 80116f4:	460c      	mov	r4, r1
 80116f6:	b125      	cbz	r5, 8011702 <__swsetup_r+0x16>
 80116f8:	69ab      	ldr	r3, [r5, #24]
 80116fa:	b913      	cbnz	r3, 8011702 <__swsetup_r+0x16>
 80116fc:	4628      	mov	r0, r5
 80116fe:	f7ff fa57 	bl	8010bb0 <__sinit>
 8011702:	4b2e      	ldr	r3, [pc, #184]	; (80117bc <__swsetup_r+0xd0>)
 8011704:	429c      	cmp	r4, r3
 8011706:	d10f      	bne.n	8011728 <__swsetup_r+0x3c>
 8011708:	686c      	ldr	r4, [r5, #4]
 801170a:	89a3      	ldrh	r3, [r4, #12]
 801170c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011710:	0719      	lsls	r1, r3, #28
 8011712:	d42c      	bmi.n	801176e <__swsetup_r+0x82>
 8011714:	06dd      	lsls	r5, r3, #27
 8011716:	d411      	bmi.n	801173c <__swsetup_r+0x50>
 8011718:	2309      	movs	r3, #9
 801171a:	6033      	str	r3, [r6, #0]
 801171c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011720:	81a3      	strh	r3, [r4, #12]
 8011722:	f04f 30ff 	mov.w	r0, #4294967295
 8011726:	e03e      	b.n	80117a6 <__swsetup_r+0xba>
 8011728:	4b25      	ldr	r3, [pc, #148]	; (80117c0 <__swsetup_r+0xd4>)
 801172a:	429c      	cmp	r4, r3
 801172c:	d101      	bne.n	8011732 <__swsetup_r+0x46>
 801172e:	68ac      	ldr	r4, [r5, #8]
 8011730:	e7eb      	b.n	801170a <__swsetup_r+0x1e>
 8011732:	4b24      	ldr	r3, [pc, #144]	; (80117c4 <__swsetup_r+0xd8>)
 8011734:	429c      	cmp	r4, r3
 8011736:	bf08      	it	eq
 8011738:	68ec      	ldreq	r4, [r5, #12]
 801173a:	e7e6      	b.n	801170a <__swsetup_r+0x1e>
 801173c:	0758      	lsls	r0, r3, #29
 801173e:	d512      	bpl.n	8011766 <__swsetup_r+0x7a>
 8011740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011742:	b141      	cbz	r1, 8011756 <__swsetup_r+0x6a>
 8011744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011748:	4299      	cmp	r1, r3
 801174a:	d002      	beq.n	8011752 <__swsetup_r+0x66>
 801174c:	4630      	mov	r0, r6
 801174e:	f7ff f8e5 	bl	801091c <_free_r>
 8011752:	2300      	movs	r3, #0
 8011754:	6363      	str	r3, [r4, #52]	; 0x34
 8011756:	89a3      	ldrh	r3, [r4, #12]
 8011758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801175c:	81a3      	strh	r3, [r4, #12]
 801175e:	2300      	movs	r3, #0
 8011760:	6063      	str	r3, [r4, #4]
 8011762:	6923      	ldr	r3, [r4, #16]
 8011764:	6023      	str	r3, [r4, #0]
 8011766:	89a3      	ldrh	r3, [r4, #12]
 8011768:	f043 0308 	orr.w	r3, r3, #8
 801176c:	81a3      	strh	r3, [r4, #12]
 801176e:	6923      	ldr	r3, [r4, #16]
 8011770:	b94b      	cbnz	r3, 8011786 <__swsetup_r+0x9a>
 8011772:	89a3      	ldrh	r3, [r4, #12]
 8011774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801177c:	d003      	beq.n	8011786 <__swsetup_r+0x9a>
 801177e:	4621      	mov	r1, r4
 8011780:	4630      	mov	r0, r6
 8011782:	f000 f929 	bl	80119d8 <__smakebuf_r>
 8011786:	89a0      	ldrh	r0, [r4, #12]
 8011788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801178c:	f010 0301 	ands.w	r3, r0, #1
 8011790:	d00a      	beq.n	80117a8 <__swsetup_r+0xbc>
 8011792:	2300      	movs	r3, #0
 8011794:	60a3      	str	r3, [r4, #8]
 8011796:	6963      	ldr	r3, [r4, #20]
 8011798:	425b      	negs	r3, r3
 801179a:	61a3      	str	r3, [r4, #24]
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	b943      	cbnz	r3, 80117b2 <__swsetup_r+0xc6>
 80117a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80117a4:	d1ba      	bne.n	801171c <__swsetup_r+0x30>
 80117a6:	bd70      	pop	{r4, r5, r6, pc}
 80117a8:	0781      	lsls	r1, r0, #30
 80117aa:	bf58      	it	pl
 80117ac:	6963      	ldrpl	r3, [r4, #20]
 80117ae:	60a3      	str	r3, [r4, #8]
 80117b0:	e7f4      	b.n	801179c <__swsetup_r+0xb0>
 80117b2:	2000      	movs	r0, #0
 80117b4:	e7f7      	b.n	80117a6 <__swsetup_r+0xba>
 80117b6:	bf00      	nop
 80117b8:	2000002c 	.word	0x2000002c
 80117bc:	0801269c 	.word	0x0801269c
 80117c0:	080126bc 	.word	0x080126bc
 80117c4:	0801267c 	.word	0x0801267c

080117c8 <_close_r>:
 80117c8:	b538      	push	{r3, r4, r5, lr}
 80117ca:	4d06      	ldr	r5, [pc, #24]	; (80117e4 <_close_r+0x1c>)
 80117cc:	2300      	movs	r3, #0
 80117ce:	4604      	mov	r4, r0
 80117d0:	4608      	mov	r0, r1
 80117d2:	602b      	str	r3, [r5, #0]
 80117d4:	f7f0 f961 	bl	8001a9a <_close>
 80117d8:	1c43      	adds	r3, r0, #1
 80117da:	d102      	bne.n	80117e2 <_close_r+0x1a>
 80117dc:	682b      	ldr	r3, [r5, #0]
 80117de:	b103      	cbz	r3, 80117e2 <_close_r+0x1a>
 80117e0:	6023      	str	r3, [r4, #0]
 80117e2:	bd38      	pop	{r3, r4, r5, pc}
 80117e4:	20002ee0 	.word	0x20002ee0

080117e8 <__sflush_r>:
 80117e8:	898a      	ldrh	r2, [r1, #12]
 80117ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ee:	4605      	mov	r5, r0
 80117f0:	0710      	lsls	r0, r2, #28
 80117f2:	460c      	mov	r4, r1
 80117f4:	d458      	bmi.n	80118a8 <__sflush_r+0xc0>
 80117f6:	684b      	ldr	r3, [r1, #4]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	dc05      	bgt.n	8011808 <__sflush_r+0x20>
 80117fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117fe:	2b00      	cmp	r3, #0
 8011800:	dc02      	bgt.n	8011808 <__sflush_r+0x20>
 8011802:	2000      	movs	r0, #0
 8011804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801180a:	2e00      	cmp	r6, #0
 801180c:	d0f9      	beq.n	8011802 <__sflush_r+0x1a>
 801180e:	2300      	movs	r3, #0
 8011810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011814:	682f      	ldr	r7, [r5, #0]
 8011816:	602b      	str	r3, [r5, #0]
 8011818:	d032      	beq.n	8011880 <__sflush_r+0x98>
 801181a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801181c:	89a3      	ldrh	r3, [r4, #12]
 801181e:	075a      	lsls	r2, r3, #29
 8011820:	d505      	bpl.n	801182e <__sflush_r+0x46>
 8011822:	6863      	ldr	r3, [r4, #4]
 8011824:	1ac0      	subs	r0, r0, r3
 8011826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011828:	b10b      	cbz	r3, 801182e <__sflush_r+0x46>
 801182a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801182c:	1ac0      	subs	r0, r0, r3
 801182e:	2300      	movs	r3, #0
 8011830:	4602      	mov	r2, r0
 8011832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011834:	6a21      	ldr	r1, [r4, #32]
 8011836:	4628      	mov	r0, r5
 8011838:	47b0      	blx	r6
 801183a:	1c43      	adds	r3, r0, #1
 801183c:	89a3      	ldrh	r3, [r4, #12]
 801183e:	d106      	bne.n	801184e <__sflush_r+0x66>
 8011840:	6829      	ldr	r1, [r5, #0]
 8011842:	291d      	cmp	r1, #29
 8011844:	d82c      	bhi.n	80118a0 <__sflush_r+0xb8>
 8011846:	4a2a      	ldr	r2, [pc, #168]	; (80118f0 <__sflush_r+0x108>)
 8011848:	40ca      	lsrs	r2, r1
 801184a:	07d6      	lsls	r6, r2, #31
 801184c:	d528      	bpl.n	80118a0 <__sflush_r+0xb8>
 801184e:	2200      	movs	r2, #0
 8011850:	6062      	str	r2, [r4, #4]
 8011852:	04d9      	lsls	r1, r3, #19
 8011854:	6922      	ldr	r2, [r4, #16]
 8011856:	6022      	str	r2, [r4, #0]
 8011858:	d504      	bpl.n	8011864 <__sflush_r+0x7c>
 801185a:	1c42      	adds	r2, r0, #1
 801185c:	d101      	bne.n	8011862 <__sflush_r+0x7a>
 801185e:	682b      	ldr	r3, [r5, #0]
 8011860:	b903      	cbnz	r3, 8011864 <__sflush_r+0x7c>
 8011862:	6560      	str	r0, [r4, #84]	; 0x54
 8011864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011866:	602f      	str	r7, [r5, #0]
 8011868:	2900      	cmp	r1, #0
 801186a:	d0ca      	beq.n	8011802 <__sflush_r+0x1a>
 801186c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011870:	4299      	cmp	r1, r3
 8011872:	d002      	beq.n	801187a <__sflush_r+0x92>
 8011874:	4628      	mov	r0, r5
 8011876:	f7ff f851 	bl	801091c <_free_r>
 801187a:	2000      	movs	r0, #0
 801187c:	6360      	str	r0, [r4, #52]	; 0x34
 801187e:	e7c1      	b.n	8011804 <__sflush_r+0x1c>
 8011880:	6a21      	ldr	r1, [r4, #32]
 8011882:	2301      	movs	r3, #1
 8011884:	4628      	mov	r0, r5
 8011886:	47b0      	blx	r6
 8011888:	1c41      	adds	r1, r0, #1
 801188a:	d1c7      	bne.n	801181c <__sflush_r+0x34>
 801188c:	682b      	ldr	r3, [r5, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d0c4      	beq.n	801181c <__sflush_r+0x34>
 8011892:	2b1d      	cmp	r3, #29
 8011894:	d001      	beq.n	801189a <__sflush_r+0xb2>
 8011896:	2b16      	cmp	r3, #22
 8011898:	d101      	bne.n	801189e <__sflush_r+0xb6>
 801189a:	602f      	str	r7, [r5, #0]
 801189c:	e7b1      	b.n	8011802 <__sflush_r+0x1a>
 801189e:	89a3      	ldrh	r3, [r4, #12]
 80118a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118a4:	81a3      	strh	r3, [r4, #12]
 80118a6:	e7ad      	b.n	8011804 <__sflush_r+0x1c>
 80118a8:	690f      	ldr	r7, [r1, #16]
 80118aa:	2f00      	cmp	r7, #0
 80118ac:	d0a9      	beq.n	8011802 <__sflush_r+0x1a>
 80118ae:	0793      	lsls	r3, r2, #30
 80118b0:	680e      	ldr	r6, [r1, #0]
 80118b2:	bf08      	it	eq
 80118b4:	694b      	ldreq	r3, [r1, #20]
 80118b6:	600f      	str	r7, [r1, #0]
 80118b8:	bf18      	it	ne
 80118ba:	2300      	movne	r3, #0
 80118bc:	eba6 0807 	sub.w	r8, r6, r7
 80118c0:	608b      	str	r3, [r1, #8]
 80118c2:	f1b8 0f00 	cmp.w	r8, #0
 80118c6:	dd9c      	ble.n	8011802 <__sflush_r+0x1a>
 80118c8:	6a21      	ldr	r1, [r4, #32]
 80118ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118cc:	4643      	mov	r3, r8
 80118ce:	463a      	mov	r2, r7
 80118d0:	4628      	mov	r0, r5
 80118d2:	47b0      	blx	r6
 80118d4:	2800      	cmp	r0, #0
 80118d6:	dc06      	bgt.n	80118e6 <__sflush_r+0xfe>
 80118d8:	89a3      	ldrh	r3, [r4, #12]
 80118da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118de:	81a3      	strh	r3, [r4, #12]
 80118e0:	f04f 30ff 	mov.w	r0, #4294967295
 80118e4:	e78e      	b.n	8011804 <__sflush_r+0x1c>
 80118e6:	4407      	add	r7, r0
 80118e8:	eba8 0800 	sub.w	r8, r8, r0
 80118ec:	e7e9      	b.n	80118c2 <__sflush_r+0xda>
 80118ee:	bf00      	nop
 80118f0:	20400001 	.word	0x20400001

080118f4 <_fflush_r>:
 80118f4:	b538      	push	{r3, r4, r5, lr}
 80118f6:	690b      	ldr	r3, [r1, #16]
 80118f8:	4605      	mov	r5, r0
 80118fa:	460c      	mov	r4, r1
 80118fc:	b913      	cbnz	r3, 8011904 <_fflush_r+0x10>
 80118fe:	2500      	movs	r5, #0
 8011900:	4628      	mov	r0, r5
 8011902:	bd38      	pop	{r3, r4, r5, pc}
 8011904:	b118      	cbz	r0, 801190e <_fflush_r+0x1a>
 8011906:	6983      	ldr	r3, [r0, #24]
 8011908:	b90b      	cbnz	r3, 801190e <_fflush_r+0x1a>
 801190a:	f7ff f951 	bl	8010bb0 <__sinit>
 801190e:	4b14      	ldr	r3, [pc, #80]	; (8011960 <_fflush_r+0x6c>)
 8011910:	429c      	cmp	r4, r3
 8011912:	d11b      	bne.n	801194c <_fflush_r+0x58>
 8011914:	686c      	ldr	r4, [r5, #4]
 8011916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d0ef      	beq.n	80118fe <_fflush_r+0xa>
 801191e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011920:	07d0      	lsls	r0, r2, #31
 8011922:	d404      	bmi.n	801192e <_fflush_r+0x3a>
 8011924:	0599      	lsls	r1, r3, #22
 8011926:	d402      	bmi.n	801192e <_fflush_r+0x3a>
 8011928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801192a:	f7ff f9df 	bl	8010cec <__retarget_lock_acquire_recursive>
 801192e:	4628      	mov	r0, r5
 8011930:	4621      	mov	r1, r4
 8011932:	f7ff ff59 	bl	80117e8 <__sflush_r>
 8011936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011938:	07da      	lsls	r2, r3, #31
 801193a:	4605      	mov	r5, r0
 801193c:	d4e0      	bmi.n	8011900 <_fflush_r+0xc>
 801193e:	89a3      	ldrh	r3, [r4, #12]
 8011940:	059b      	lsls	r3, r3, #22
 8011942:	d4dd      	bmi.n	8011900 <_fflush_r+0xc>
 8011944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011946:	f7ff f9d2 	bl	8010cee <__retarget_lock_release_recursive>
 801194a:	e7d9      	b.n	8011900 <_fflush_r+0xc>
 801194c:	4b05      	ldr	r3, [pc, #20]	; (8011964 <_fflush_r+0x70>)
 801194e:	429c      	cmp	r4, r3
 8011950:	d101      	bne.n	8011956 <_fflush_r+0x62>
 8011952:	68ac      	ldr	r4, [r5, #8]
 8011954:	e7df      	b.n	8011916 <_fflush_r+0x22>
 8011956:	4b04      	ldr	r3, [pc, #16]	; (8011968 <_fflush_r+0x74>)
 8011958:	429c      	cmp	r4, r3
 801195a:	bf08      	it	eq
 801195c:	68ec      	ldreq	r4, [r5, #12]
 801195e:	e7da      	b.n	8011916 <_fflush_r+0x22>
 8011960:	0801269c 	.word	0x0801269c
 8011964:	080126bc 	.word	0x080126bc
 8011968:	0801267c 	.word	0x0801267c

0801196c <_lseek_r>:
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	4d07      	ldr	r5, [pc, #28]	; (801198c <_lseek_r+0x20>)
 8011970:	4604      	mov	r4, r0
 8011972:	4608      	mov	r0, r1
 8011974:	4611      	mov	r1, r2
 8011976:	2200      	movs	r2, #0
 8011978:	602a      	str	r2, [r5, #0]
 801197a:	461a      	mov	r2, r3
 801197c:	f7f0 f8b4 	bl	8001ae8 <_lseek>
 8011980:	1c43      	adds	r3, r0, #1
 8011982:	d102      	bne.n	801198a <_lseek_r+0x1e>
 8011984:	682b      	ldr	r3, [r5, #0]
 8011986:	b103      	cbz	r3, 801198a <_lseek_r+0x1e>
 8011988:	6023      	str	r3, [r4, #0]
 801198a:	bd38      	pop	{r3, r4, r5, pc}
 801198c:	20002ee0 	.word	0x20002ee0

08011990 <__swhatbuf_r>:
 8011990:	b570      	push	{r4, r5, r6, lr}
 8011992:	460e      	mov	r6, r1
 8011994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011998:	2900      	cmp	r1, #0
 801199a:	b096      	sub	sp, #88	; 0x58
 801199c:	4614      	mov	r4, r2
 801199e:	461d      	mov	r5, r3
 80119a0:	da07      	bge.n	80119b2 <__swhatbuf_r+0x22>
 80119a2:	2300      	movs	r3, #0
 80119a4:	602b      	str	r3, [r5, #0]
 80119a6:	89b3      	ldrh	r3, [r6, #12]
 80119a8:	061a      	lsls	r2, r3, #24
 80119aa:	d410      	bmi.n	80119ce <__swhatbuf_r+0x3e>
 80119ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119b0:	e00e      	b.n	80119d0 <__swhatbuf_r+0x40>
 80119b2:	466a      	mov	r2, sp
 80119b4:	f000 f8a2 	bl	8011afc <_fstat_r>
 80119b8:	2800      	cmp	r0, #0
 80119ba:	dbf2      	blt.n	80119a2 <__swhatbuf_r+0x12>
 80119bc:	9a01      	ldr	r2, [sp, #4]
 80119be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119c6:	425a      	negs	r2, r3
 80119c8:	415a      	adcs	r2, r3
 80119ca:	602a      	str	r2, [r5, #0]
 80119cc:	e7ee      	b.n	80119ac <__swhatbuf_r+0x1c>
 80119ce:	2340      	movs	r3, #64	; 0x40
 80119d0:	2000      	movs	r0, #0
 80119d2:	6023      	str	r3, [r4, #0]
 80119d4:	b016      	add	sp, #88	; 0x58
 80119d6:	bd70      	pop	{r4, r5, r6, pc}

080119d8 <__smakebuf_r>:
 80119d8:	898b      	ldrh	r3, [r1, #12]
 80119da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119dc:	079d      	lsls	r5, r3, #30
 80119de:	4606      	mov	r6, r0
 80119e0:	460c      	mov	r4, r1
 80119e2:	d507      	bpl.n	80119f4 <__smakebuf_r+0x1c>
 80119e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119e8:	6023      	str	r3, [r4, #0]
 80119ea:	6123      	str	r3, [r4, #16]
 80119ec:	2301      	movs	r3, #1
 80119ee:	6163      	str	r3, [r4, #20]
 80119f0:	b002      	add	sp, #8
 80119f2:	bd70      	pop	{r4, r5, r6, pc}
 80119f4:	ab01      	add	r3, sp, #4
 80119f6:	466a      	mov	r2, sp
 80119f8:	f7ff ffca 	bl	8011990 <__swhatbuf_r>
 80119fc:	9900      	ldr	r1, [sp, #0]
 80119fe:	4605      	mov	r5, r0
 8011a00:	4630      	mov	r0, r6
 8011a02:	f7fe ffdb 	bl	80109bc <_malloc_r>
 8011a06:	b948      	cbnz	r0, 8011a1c <__smakebuf_r+0x44>
 8011a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a0c:	059a      	lsls	r2, r3, #22
 8011a0e:	d4ef      	bmi.n	80119f0 <__smakebuf_r+0x18>
 8011a10:	f023 0303 	bic.w	r3, r3, #3
 8011a14:	f043 0302 	orr.w	r3, r3, #2
 8011a18:	81a3      	strh	r3, [r4, #12]
 8011a1a:	e7e3      	b.n	80119e4 <__smakebuf_r+0xc>
 8011a1c:	4b0d      	ldr	r3, [pc, #52]	; (8011a54 <__smakebuf_r+0x7c>)
 8011a1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a20:	89a3      	ldrh	r3, [r4, #12]
 8011a22:	6020      	str	r0, [r4, #0]
 8011a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a28:	81a3      	strh	r3, [r4, #12]
 8011a2a:	9b00      	ldr	r3, [sp, #0]
 8011a2c:	6163      	str	r3, [r4, #20]
 8011a2e:	9b01      	ldr	r3, [sp, #4]
 8011a30:	6120      	str	r0, [r4, #16]
 8011a32:	b15b      	cbz	r3, 8011a4c <__smakebuf_r+0x74>
 8011a34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a38:	4630      	mov	r0, r6
 8011a3a:	f000 f871 	bl	8011b20 <_isatty_r>
 8011a3e:	b128      	cbz	r0, 8011a4c <__smakebuf_r+0x74>
 8011a40:	89a3      	ldrh	r3, [r4, #12]
 8011a42:	f023 0303 	bic.w	r3, r3, #3
 8011a46:	f043 0301 	orr.w	r3, r3, #1
 8011a4a:	81a3      	strh	r3, [r4, #12]
 8011a4c:	89a0      	ldrh	r0, [r4, #12]
 8011a4e:	4305      	orrs	r5, r0
 8011a50:	81a5      	strh	r5, [r4, #12]
 8011a52:	e7cd      	b.n	80119f0 <__smakebuf_r+0x18>
 8011a54:	08010b49 	.word	0x08010b49

08011a58 <memmove>:
 8011a58:	4288      	cmp	r0, r1
 8011a5a:	b510      	push	{r4, lr}
 8011a5c:	eb01 0402 	add.w	r4, r1, r2
 8011a60:	d902      	bls.n	8011a68 <memmove+0x10>
 8011a62:	4284      	cmp	r4, r0
 8011a64:	4623      	mov	r3, r4
 8011a66:	d807      	bhi.n	8011a78 <memmove+0x20>
 8011a68:	1e43      	subs	r3, r0, #1
 8011a6a:	42a1      	cmp	r1, r4
 8011a6c:	d008      	beq.n	8011a80 <memmove+0x28>
 8011a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a76:	e7f8      	b.n	8011a6a <memmove+0x12>
 8011a78:	4402      	add	r2, r0
 8011a7a:	4601      	mov	r1, r0
 8011a7c:	428a      	cmp	r2, r1
 8011a7e:	d100      	bne.n	8011a82 <memmove+0x2a>
 8011a80:	bd10      	pop	{r4, pc}
 8011a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a8a:	e7f7      	b.n	8011a7c <memmove+0x24>

08011a8c <_realloc_r>:
 8011a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a8e:	4607      	mov	r7, r0
 8011a90:	4614      	mov	r4, r2
 8011a92:	460e      	mov	r6, r1
 8011a94:	b921      	cbnz	r1, 8011aa0 <_realloc_r+0x14>
 8011a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a9a:	4611      	mov	r1, r2
 8011a9c:	f7fe bf8e 	b.w	80109bc <_malloc_r>
 8011aa0:	b922      	cbnz	r2, 8011aac <_realloc_r+0x20>
 8011aa2:	f7fe ff3b 	bl	801091c <_free_r>
 8011aa6:	4625      	mov	r5, r4
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aac:	f000 f848 	bl	8011b40 <_malloc_usable_size_r>
 8011ab0:	42a0      	cmp	r0, r4
 8011ab2:	d20f      	bcs.n	8011ad4 <_realloc_r+0x48>
 8011ab4:	4621      	mov	r1, r4
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	f7fe ff80 	bl	80109bc <_malloc_r>
 8011abc:	4605      	mov	r5, r0
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d0f2      	beq.n	8011aa8 <_realloc_r+0x1c>
 8011ac2:	4631      	mov	r1, r6
 8011ac4:	4622      	mov	r2, r4
 8011ac6:	f7fe ff13 	bl	80108f0 <memcpy>
 8011aca:	4631      	mov	r1, r6
 8011acc:	4638      	mov	r0, r7
 8011ace:	f7fe ff25 	bl	801091c <_free_r>
 8011ad2:	e7e9      	b.n	8011aa8 <_realloc_r+0x1c>
 8011ad4:	4635      	mov	r5, r6
 8011ad6:	e7e7      	b.n	8011aa8 <_realloc_r+0x1c>

08011ad8 <_read_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	4d07      	ldr	r5, [pc, #28]	; (8011af8 <_read_r+0x20>)
 8011adc:	4604      	mov	r4, r0
 8011ade:	4608      	mov	r0, r1
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	602a      	str	r2, [r5, #0]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	f7ef ff9e 	bl	8001a28 <_read>
 8011aec:	1c43      	adds	r3, r0, #1
 8011aee:	d102      	bne.n	8011af6 <_read_r+0x1e>
 8011af0:	682b      	ldr	r3, [r5, #0]
 8011af2:	b103      	cbz	r3, 8011af6 <_read_r+0x1e>
 8011af4:	6023      	str	r3, [r4, #0]
 8011af6:	bd38      	pop	{r3, r4, r5, pc}
 8011af8:	20002ee0 	.word	0x20002ee0

08011afc <_fstat_r>:
 8011afc:	b538      	push	{r3, r4, r5, lr}
 8011afe:	4d07      	ldr	r5, [pc, #28]	; (8011b1c <_fstat_r+0x20>)
 8011b00:	2300      	movs	r3, #0
 8011b02:	4604      	mov	r4, r0
 8011b04:	4608      	mov	r0, r1
 8011b06:	4611      	mov	r1, r2
 8011b08:	602b      	str	r3, [r5, #0]
 8011b0a:	f7ef ffd2 	bl	8001ab2 <_fstat>
 8011b0e:	1c43      	adds	r3, r0, #1
 8011b10:	d102      	bne.n	8011b18 <_fstat_r+0x1c>
 8011b12:	682b      	ldr	r3, [r5, #0]
 8011b14:	b103      	cbz	r3, 8011b18 <_fstat_r+0x1c>
 8011b16:	6023      	str	r3, [r4, #0]
 8011b18:	bd38      	pop	{r3, r4, r5, pc}
 8011b1a:	bf00      	nop
 8011b1c:	20002ee0 	.word	0x20002ee0

08011b20 <_isatty_r>:
 8011b20:	b538      	push	{r3, r4, r5, lr}
 8011b22:	4d06      	ldr	r5, [pc, #24]	; (8011b3c <_isatty_r+0x1c>)
 8011b24:	2300      	movs	r3, #0
 8011b26:	4604      	mov	r4, r0
 8011b28:	4608      	mov	r0, r1
 8011b2a:	602b      	str	r3, [r5, #0]
 8011b2c:	f7ef ffd1 	bl	8001ad2 <_isatty>
 8011b30:	1c43      	adds	r3, r0, #1
 8011b32:	d102      	bne.n	8011b3a <_isatty_r+0x1a>
 8011b34:	682b      	ldr	r3, [r5, #0]
 8011b36:	b103      	cbz	r3, 8011b3a <_isatty_r+0x1a>
 8011b38:	6023      	str	r3, [r4, #0]
 8011b3a:	bd38      	pop	{r3, r4, r5, pc}
 8011b3c:	20002ee0 	.word	0x20002ee0

08011b40 <_malloc_usable_size_r>:
 8011b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b44:	1f18      	subs	r0, r3, #4
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	bfbc      	itt	lt
 8011b4a:	580b      	ldrlt	r3, [r1, r0]
 8011b4c:	18c0      	addlt	r0, r0, r3
 8011b4e:	4770      	bx	lr

08011b50 <_init>:
 8011b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b52:	bf00      	nop
 8011b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b56:	bc08      	pop	{r3}
 8011b58:	469e      	mov	lr, r3
 8011b5a:	4770      	bx	lr

08011b5c <_fini>:
 8011b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5e:	bf00      	nop
 8011b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b62:	bc08      	pop	{r3}
 8011b64:	469e      	mov	lr, r3
 8011b66:	4770      	bx	lr
