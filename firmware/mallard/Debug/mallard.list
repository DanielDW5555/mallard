
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800b094  0800b094  0001b094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0e4  0800b0e4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0e4  0800b0e4  0001b0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0ec  0800b0ec  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0ec  0800b0ec  0001b0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0f0  0800b0f0  0001b0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000090  0800b184  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800b184  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e33  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e5  00000000  00000000  00042ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00046fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  000486a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dff4  00000000  00000000  00049bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a33b  00000000  00000000  00077be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001170b3  00000000  00000000  00091f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a8fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f4  00000000  00000000  001a9028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800b07c 	.word	0x0800b07c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	0800b07c 	.word	0x0800b07c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <blinky>:

// ************************************************* START FUNCTIONS HERE ***************************************

// Blinky!!
void blinky(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	e011      	b.n	8000514 <blinky+0x30>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <blinky+0x40>)
 80004f4:	f002 f9de 	bl	80028b4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fca7 	bl	8000e4c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <blinky+0x40>)
 8000504:	f002 f9d6 	bl	80028b4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fc9f 	bl	8000e4c <HAL_Delay>
	for(int i = 0; i < 2; i ++)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3301      	adds	r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	ddea      	ble.n	80004f0 <blinky+0xc>
	}
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	48000400 	.word	0x48000400

08000528 <enterSleepMode>:

// Set RTC wakup period
// Sleep time is in seconds
void enterSleepMode(uint16_t sleepTime)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	// To modify the sleep value, preform the following calcultion:
	// Sleep time = {Sleep Time}/([LSI_RC]/[RTC_DIV])
	// Sleep time = {Sleep Time}/(0.0005)
	// Currently, having the wakeup counter set to 0xEA60 is equivalent to 30s.
	// Enter sleep mode
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleepTime, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	2204      	movs	r2, #4
 8000536:	4619      	mov	r1, r3
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <enterSleepMode+0x34>)
 800053a:	f005 fbe5 	bl	8005d08 <HAL_RTCEx_SetWakeUpTimer_IT>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <enterSleepMode+0x20>
	  {
	    Error_Handler();
 8000544:	f000 fa64 	bl	8000a10 <Error_Handler>
	  }

	HAL_SuspendTick();
 8000548:	f000 fca4 	bl	8000e94 <HAL_SuspendTick>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 800054c:	2101      	movs	r1, #1
 800054e:	2000      	movs	r0, #0
 8000550:	f003 fec2 	bl	80042d8 <HAL_PWR_EnterSLEEPMode>

}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200001a8 	.word	0x200001a8

08000560 <HAL_RTCEx_WakeUpTimerEventCallback>:

// Wakeup RTC Interupt
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8000568:	f000 f838 	bl	80005dc <SystemClock_Config>
	HAL_ResumeTick();
 800056c:	f000 fca2 	bl	8000eb4 <HAL_ResumeTick>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fbf0 	bl	8000d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f82b 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f99f 	bl	80008c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800058a:	f000 f947 	bl	800081c <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 800058e:	f00a f973 	bl	800a878 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000592:	f000 f8cb 	bl	800072c <MX_ADC1_Init>
  MX_RTC_Init();
 8000596:	f000 f96f 	bl	8000878 <MX_RTC_Init>

  // ************************************************* START BEFORE WHILE CODE HERE ***************************************

  // Bootup Blinkys
  // These are put in place to allow programming before the microcontroller enters its sleep loop, currently its set to wait 5 seconds before entering sleep mode
  blinky();
 800059a:	f7ff ffa3 	bl	80004e4 <blinky>
  HAL_Delay(5000);
 800059e:	f241 3088 	movw	r0, #5000	; 0x1388
 80005a2:	f000 fc53 	bl	8000e4c <HAL_Delay>
  blinky();
 80005a6:	f7ff ff9d 	bl	80004e4 <blinky>
  //Assign ADC Variable
  uint16_t ADC_READING = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ae:	f00a f989 	bl	800a8c4 <MX_USB_HOST_Process>



    // ************************************************* START WHILE CODE HERE ***************************************
    //Start ADC Conversion
    HAL_ADC_Start(&hadc1);
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <main+0x60>)
 80005b4:	f000 ffde 	bl	8001574 <HAL_ADC_Start>

    //Poll ADC 1 Periferal and Timeout 1ms
    HAL_ADC_PollForConversion(&hadc1, 1);
 80005b8:	2101      	movs	r1, #1
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <main+0x60>)
 80005bc:	f001 f894 	bl	80016e8 <HAL_ADC_PollForConversion>

    //Store ADC Value in ADC_Reading
    ADC_READING = HAL_ADC_GetValue(&hadc1);
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <main+0x60>)
 80005c2:	f001 f969 	bl	8001898 <HAL_ADC_GetValue>
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]

    // Enter sleep mode using RTC wakeup functions
    enterSleepMode(3); // Parameter depicts how long the sleep cycle is (currently its set to 3 seconds)
 80005ca:	2003      	movs	r0, #3
 80005cc:	f7ff ffac 	bl	8000528 <enterSleepMode>
    blinky();
 80005d0:	f7ff ff88 	bl	80004e4 <blinky>
    MX_USB_HOST_Process();
 80005d4:	e7eb      	b.n	80005ae <main+0x36>
 80005d6:	bf00      	nop
 80005d8:	20000140 	.word	0x20000140

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0ba      	sub	sp, #232	; 0xe8
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f00a fc76 	bl	800aedc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	228c      	movs	r2, #140	; 0x8c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f00a fc68 	bl	800aedc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f003 fe54 	bl	80042b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000610:	4b44      	ldr	r3, [pc, #272]	; (8000724 <SystemClock_Config+0x148>)
 8000612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000616:	4a43      	ldr	r2, [pc, #268]	; (8000724 <SystemClock_Config+0x148>)
 8000618:	f023 0318 	bic.w	r3, r3, #24
 800061c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000620:	231c      	movs	r3, #28
 8000622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000632:	2301      	movs	r3, #1
 8000634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800063e:	2390      	movs	r3, #144	; 0x90
 8000640:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800064a:	2301      	movs	r3, #1
 800064c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000650:	2305      	movs	r3, #5
 8000652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000656:	2347      	movs	r3, #71	; 0x47
 8000658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000668:	2306      	movs	r3, #6
 800066a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000672:	4618      	mov	r0, r3
 8000674:	f003 ff30 	bl	80044d8 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800067e:	f000 f9c7 	bl	8000a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800068e:	2390      	movs	r3, #144	; 0x90
 8000690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 fb3b 	bl	8004d24 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006b4:	f000 f9ac 	bl	8000a10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <SystemClock_Config+0x14c>)
 80006ba:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006bc:	2300      	movs	r3, #0
 80006be:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006d4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80006da:	2305      	movs	r3, #5
 80006dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 80006de:	2314      	movs	r3, #20
 80006e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006ee:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80006f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fd1a 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8000702:	f000 f985 	bl	8000a10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000706:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070a:	f003 fe27 	bl	800435c <HAL_PWREx_ControlVoltageScaling>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000714:	f000 f97c 	bl	8000a10 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000718:	f005 f806 	bl	8005728 <HAL_RCCEx_EnableMSIPLLMode>
}
 800071c:	bf00      	nop
 800071e:	37e8      	adds	r7, #232	; 0xe8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	00026020 	.word	0x00026020

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_ADC1_Init+0xe0>)
 8000750:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <MX_ADC1_Init+0xe4>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000754:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_ADC1_Init+0xe0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_ADC1_Init+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_ADC1_Init+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_ADC1_Init+0xe0>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_ADC1_Init+0xe0>)
 800076e:	2204      	movs	r2, #4
 8000770:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC1_Init+0xe0>)
 8000774:	2200      	movs	r2, #0
 8000776:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_ADC1_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_ADC1_Init+0xe0>)
 8000780:	2201      	movs	r2, #1
 8000782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0xe0>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0xe0>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0xe0>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_ADC1_Init+0xe0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <MX_ADC1_Init+0xe0>)
 80007b0:	f000 fd86 	bl	80012c0 <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ba:	f000 f929 	bl	8000a10 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4810      	ldr	r0, [pc, #64]	; (800080c <MX_ADC1_Init+0xe0>)
 80007ca:	f001 fd07 	bl	80021dc <HAL_ADCEx_MultiModeConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007d4:	f000 f91c 	bl	8000a10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_ADC1_Init+0xe8>)
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007dc:	2306      	movs	r3, #6
 80007de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_ADC1_Init+0xec>)
 80007e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e8:	2304      	movs	r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_ADC1_Init+0xe0>)
 80007f6:	f001 f85d 	bl	80018b4 <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000800:	f000 f906 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000140 	.word	0x20000140
 8000810:	50040000 	.word	0x50040000
 8000814:	04300002 	.word	0x04300002
 8000818:	407f0000 	.word	0x407f0000

0800081c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_LPUART1_UART_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_LPUART1_UART_Init+0x58>)
 800082a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 800082e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000832:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_LPUART1_UART_Init+0x50>)
 800085a:	f005 fb0f 	bl	8005e7c <HAL_UART_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 f8d4 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000bc 	.word	0x200000bc
 8000870:	40008000 	.word	0x40008000
 8000874:	00033324 	.word	0x00033324

08000878 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_RTC_Init+0x48>)
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <MX_RTC_Init+0x4c>)
 8000880:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_RTC_Init+0x48>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_RTC_Init+0x48>)
 800088a:	227f      	movs	r2, #127	; 0x7f
 800088c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_RTC_Init+0x48>)
 8000890:	22ff      	movs	r2, #255	; 0xff
 8000892:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_RTC_Init+0x48>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_RTC_Init+0x48>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_RTC_Init+0x48>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_RTC_Init+0x48>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_RTC_Init+0x48>)
 80008ae:	f005 f919 	bl	8005ae4 <HAL_RTC_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80008b8:	f000 f8aa 	bl	8000a10 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200001a8 	.word	0x200001a8
 80008c4:	40002800 	.word	0x40002800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b47      	ldr	r3, [pc, #284]	; (80009fc <MX_GPIO_Init+0x134>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a46      	ldr	r2, [pc, #280]	; (80009fc <MX_GPIO_Init+0x134>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b44      	ldr	r3, [pc, #272]	; (80009fc <MX_GPIO_Init+0x134>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <MX_GPIO_Init+0x134>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a40      	ldr	r2, [pc, #256]	; (80009fc <MX_GPIO_Init+0x134>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <MX_GPIO_Init+0x134>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <MX_GPIO_Init+0x134>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a3a      	ldr	r2, [pc, #232]	; (80009fc <MX_GPIO_Init+0x134>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <MX_GPIO_Init+0x134>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <MX_GPIO_Init+0x134>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a34      	ldr	r2, [pc, #208]	; (80009fc <MX_GPIO_Init+0x134>)
 800092c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <MX_GPIO_Init+0x134>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800093e:	f003 fd73 	bl	8004428 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_GPIO_Init+0x134>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <MX_GPIO_Init+0x134>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_GPIO_Init+0x134>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000960:	4827      	ldr	r0, [pc, #156]	; (8000a00 <MX_GPIO_Init+0x138>)
 8000962:	f001 ff8f 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 800096c:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x13c>)
 800096e:	f001 ff89 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_GPIO_Init+0x140>)
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4821      	ldr	r0, [pc, #132]	; (8000a0c <MX_GPIO_Init+0x144>)
 8000988:	f001 fdea 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800098c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4816      	ldr	r0, [pc, #88]	; (8000a00 <MX_GPIO_Init+0x138>)
 80009a6:	f001 fddb 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80009aa:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4811      	ldr	r0, [pc, #68]	; (8000a04 <MX_GPIO_Init+0x13c>)
 80009c0:	f001 fdce 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80009c4:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <MX_GPIO_Init+0x13c>)
 80009de:	f001 fdbf 	bl	8002560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2028      	movs	r0, #40	; 0x28
 80009e8:	f001 fd83 	bl	80024f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ec:	2028      	movs	r0, #40	; 0x28
 80009ee:	f001 fd9c 	bl	800252a <HAL_NVIC_EnableIRQ>

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000400 	.word	0x48000400
 8000a04:	48001800 	.word	0x48001800
 8000a08:	10110000 	.word	0x10110000
 8000a0c:	48000800 	.word	0x48000800

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6593      	str	r3, [r2, #88]	; 0x58
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <HAL_ADC_MspInit+0x74>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d123      	bne.n	8000ace <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_ADC_MspInit+0x78>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <HAL_ADC_MspInit+0x78>)
 8000a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_ADC_MspInit+0x78>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_ADC_MspInit+0x78>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_ADC_MspInit+0x78>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_ADC_MspInit+0x78>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aba:	230b      	movs	r3, #11
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_ADC_MspInit+0x7c>)
 8000aca:	f001 fd49 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	50040000 	.word	0x50040000
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000800 	.word	0x48000800

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0x80>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12a      	bne.n	8000b5c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000b36:	f003 fc77 	bl	8004428 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b58:	f001 fd02 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40008000 	.word	0x40008000
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48001800 	.word	0x48001800

08000b70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <HAL_RTC_MspInit+0x3c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d10f      	bne.n	8000ba2 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_RTC_MspInit+0x40>)
 8000b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_RTC_MspInit+0x40>)
 8000b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2003      	movs	r0, #3
 8000b98:	f001 fcab 	bl	80024f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f001 fcc4 	bl	800252a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40002800 	.word	0x40002800
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f904 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <RTC_WKUP_IRQHandler+0x10>)
 8000c0e:	f005 f90f 	bl	8005e30 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001a8 	.word	0x200001a8

08000c1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c24:	f001 fe60 	bl	80028e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <OTG_FS_IRQHandler+0x10>)
 8000c32:	f002 f8e3 	bl	8002dfc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000678 	.word	0x20000678

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f00a f8fa 	bl	800ae68 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20050000 	.word	0x20050000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	200000ac 	.word	0x200000ac
 8000ca8:	20000990 	.word	0x20000990

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <SystemInit+0x5c>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <SystemInit+0x5c>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <SystemInit+0x60>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <SystemInit+0x60>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <SystemInit+0x60>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <SystemInit+0x60>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <SystemInit+0x60>)
 8000cd8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cdc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ce0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <SystemInit+0x60>)
 8000ce4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <SystemInit+0x60>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <SystemInit+0x60>)
 8000cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SystemInit+0x60>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	40021000 	.word	0x40021000

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffca 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d1a:	e003      	b.n	8000d24 <LoopCopyDataInit>

08000d1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d22:	3104      	adds	r1, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d2c:	d3f6      	bcc.n	8000d1c <CopyDataInit>
	ldr	r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d30:	e002      	b.n	8000d38 <LoopFillZerobss>

08000d32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d34:	f842 3b04 	str.w	r3, [r2], #4

08000d38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <LoopForever+0x16>)
	cmp	r2, r3
 8000d3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d3c:	d3f9      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f00a f899 	bl	800ae74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fc19 	bl	8000578 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d48:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000d4c:	0800b0f4 	.word	0x0800b0f4
	ldr	r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d54:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000d58:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000d5c:	2000098c 	.word	0x2000098c

08000d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_2_IRQHandler>

08000d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f001 fbb5 	bl	80024dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f80e 	bl	8000d94 <HAL_InitTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	e001      	b.n	8000d88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d84:	f7ff fe4a 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_InitTick+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d023      	beq.n	8000df0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_InitTick+0x70>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fbc1 	bl	8002546 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10f      	bne.n	8000dea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d809      	bhi.n	8000de4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f001 fb8b 	bl	80024f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0x74>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200001cc 	.word	0x200001cc

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001cc 	.word	0x200001cc

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008

08000e94 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_SuspendTick+0x1c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_SuspendTick+0x1c>)
 8000e9e:	f023 0302 	bic.w	r3, r3, #2
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_ResumeTick+0x1c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_ResumeTick+0x1c>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	609a      	str	r2, [r3, #8]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	609a      	str	r2, [r3, #8]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3360      	adds	r3, #96	; 0x60
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <LL_ADC_SetOffset+0x44>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	03fff000 	.word	0x03fff000

08000f84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3360      	adds	r3, #96	; 0x60
 8000f92:	461a      	mov	r2, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3360      	adds	r3, #96	; 0x60
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fda:	bf00      	nop
 8000fdc:	371c      	adds	r7, #28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	615a      	str	r2, [r3, #20]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001032:	b480      	push	{r7}
 8001034:	b087      	sub	sp, #28
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3330      	adds	r3, #48	; 0x30
 8001042:	461a      	mov	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	4413      	add	r3, r2
 8001050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	211f      	movs	r1, #31
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0e9b      	lsrs	r3, r3, #26
 800106a:	f003 011f 	and.w	r1, r3, #31
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	431a      	orrs	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800107e:	bf00      	nop
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800108a:	b480      	push	{r7}
 800108c:	b087      	sub	sp, #28
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3314      	adds	r3, #20
 800109a:	461a      	mov	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	0e5b      	lsrs	r3, r3, #25
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	0d1b      	lsrs	r3, r3, #20
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2107      	movs	r1, #7
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	0d1b      	lsrs	r3, r3, #20
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	431a      	orrs	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0318 	and.w	r3, r3, #24
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001104:	40d9      	lsrs	r1, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	400b      	ands	r3, r1
 800110a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800110e:	431a      	orrs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	0007ffff 	.word	0x0007ffff

08001128 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 031f 	and.w	r3, r3, #31
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001170:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	6093      	str	r3, [r2, #8]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001198:	d101      	bne.n	800119e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011e8:	d101      	bne.n	80011ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800120c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <LL_ADC_IsEnabled+0x18>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <LL_ADC_IsEnabled+0x1a>
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800125a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800125e:	f043 0204 	orr.w	r2, r3, #4
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	2b04      	cmp	r3, #4
 8001284:	d101      	bne.n	800128a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d101      	bne.n	80012b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e139      	b.n	800154e <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d109      	bne.n	80012fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fbbb 	bl	8000a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff3f 	bl	8001184 <LL_ADC_IsDeepPowerDownEnabled>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff25 	bl	8001160 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff5a 	bl	80011d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d115      	bne.n	8001352 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff3e 	bl	80011ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001330:	4b89      	ldr	r3, [pc, #548]	; (8001558 <HAL_ADC_Init+0x298>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	099b      	lsrs	r3, r3, #6
 8001336:	4a89      	ldr	r2, [pc, #548]	; (800155c <HAL_ADC_Init+0x29c>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	099b      	lsrs	r3, r3, #6
 800133e:	3301      	adds	r3, #1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001344:	e002      	b.n	800134c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3b01      	subs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff3c 	bl	80011d4 <LL_ADC_IsInternalRegulatorEnabled>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10d      	bne.n	800137e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f043 0210 	orr.w	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff75 	bl	8001272 <LL_ADC_REG_IsConversionOngoing>
 8001388:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 80d2 	bne.w	800153c <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 80ce 	bne.w	800153c <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013a8:	f043 0202 	orr.w	r2, r3, #2
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff35 	bl	8001224 <LL_ADC_IsEnabled>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d115      	bne.n	80013ec <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013c0:	4867      	ldr	r0, [pc, #412]	; (8001560 <HAL_ADC_Init+0x2a0>)
 80013c2:	f7ff ff2f 	bl	8001224 <LL_ADC_IsEnabled>
 80013c6:	4604      	mov	r4, r0
 80013c8:	4866      	ldr	r0, [pc, #408]	; (8001564 <HAL_ADC_Init+0x2a4>)
 80013ca:	f7ff ff2b 	bl	8001224 <LL_ADC_IsEnabled>
 80013ce:	4603      	mov	r3, r0
 80013d0:	431c      	orrs	r4, r3
 80013d2:	4865      	ldr	r0, [pc, #404]	; (8001568 <HAL_ADC_Init+0x2a8>)
 80013d4:	f7ff ff26 	bl	8001224 <LL_ADC_IsEnabled>
 80013d8:	4603      	mov	r3, r0
 80013da:	4323      	orrs	r3, r4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4861      	ldr	r0, [pc, #388]	; (800156c <HAL_ADC_Init+0x2ac>)
 80013e8:	f7ff fd74 	bl	8000ed4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e5b      	ldrb	r3, [r3, #25]
 80013f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001402:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d106      	bne.n	8001428 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	3b01      	subs	r3, #1
 8001420:	045b      	lsls	r3, r3, #17
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	2b00      	cmp	r3, #0
 800142e:	d009      	beq.n	8001444 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_ADC_Init+0x2b0>)
 800144c:	4013      	ands	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	69b9      	ldr	r1, [r7, #24]
 8001454:	430b      	orrs	r3, r1
 8001456:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff08 	bl	8001272 <LL_ADC_REG_IsConversionOngoing>
 8001462:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff15 	bl	8001298 <LL_ADC_INJ_IsConversionOngoing>
 800146e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d140      	bne.n	80014f8 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d13d      	bne.n	80014f8 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e1b      	ldrb	r3, [r3, #24]
 8001484:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001486:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800148e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800149e:	f023 0306 	bic.w	r3, r3, #6
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	430b      	orrs	r3, r1
 80014aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d118      	bne.n	80014e8 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014cc:	4311      	orrs	r1, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014d2:	4311      	orrs	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014d8:	430a      	orrs	r2, r1
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	e007      	b.n	80014f8 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10c      	bne.n	800151a <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f023 010f 	bic.w	r1, r3, #15
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	1e5a      	subs	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
 8001518:	e007      	b.n	800152a <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 020f 	bic.w	r2, r2, #15
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f023 0303 	bic.w	r3, r3, #3
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	659a      	str	r2, [r3, #88]	; 0x58
 800153a:	e007      	b.n	800154c <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	f043 0210 	orr.w	r2, r3, #16
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800154c:	7ffb      	ldrb	r3, [r7, #31]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	20000000 	.word	0x20000000
 800155c:	053e2d63 	.word	0x053e2d63
 8001560:	50040000 	.word	0x50040000
 8001564:	50040100 	.word	0x50040100
 8001568:	50040200 	.word	0x50040200
 800156c:	50040300 	.word	0x50040300
 8001570:	fff0c007 	.word	0xfff0c007

08001574 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800157c:	4857      	ldr	r0, [pc, #348]	; (80016dc <HAL_ADC_Start+0x168>)
 800157e:	f7ff fdd3 	bl	8001128 <LL_ADC_GetMultimode>
 8001582:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe72 	bl	8001272 <LL_ADC_REG_IsConversionOngoing>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 809c 	bne.w	80016ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_Start+0x30>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e097      	b.n	80016d4 <HAL_ADC_Start+0x160>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fd8d 	bl	80020cc <ADC_Enable>
 80015b2:	4603      	mov	r3, r0
 80015b4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 8083 	bne.w	80016c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a42      	ldr	r2, [pc, #264]	; (80016e0 <HAL_ADC_Start+0x16c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d002      	beq.n	80015e2 <HAL_ADC_Start+0x6e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	e000      	b.n	80015e4 <HAL_ADC_Start+0x70>
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <HAL_ADC_Start+0x170>)
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d002      	beq.n	80015f2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d105      	bne.n	80015fe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800160a:	d106      	bne.n	800161a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	f023 0206 	bic.w	r2, r3, #6
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	65da      	str	r2, [r3, #92]	; 0x5c
 8001618:	e002      	b.n	8001620 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	221c      	movs	r2, #28
 8001626:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <HAL_ADC_Start+0x16c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d002      	beq.n	8001640 <HAL_ADC_Start+0xcc>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	e000      	b.n	8001642 <HAL_ADC_Start+0xce>
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_ADC_Start+0x170>)
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	4293      	cmp	r3, r2
 8001648:	d008      	beq.n	800165c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d002      	beq.n	800165c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b09      	cmp	r3, #9
 800165a:	d114      	bne.n	8001686 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001672:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fde3 	bl	800124a <LL_ADC_REG_StartConversion>
 8001684:	e025      	b.n	80016d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HAL_ADC_Start+0x16c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d002      	beq.n	80016a2 <HAL_ADC_Start+0x12e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	e000      	b.n	80016a4 <HAL_ADC_Start+0x130>
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_ADC_Start+0x170>)
 80016a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00f      	beq.n	80016d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	659a      	str	r2, [r3, #88]	; 0x58
 80016c2:	e006      	b.n	80016d2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80016cc:	e001      	b.n	80016d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016ce:	2302      	movs	r3, #2
 80016d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	50040300 	.word	0x50040300
 80016e0:	50040100 	.word	0x50040100
 80016e4:	50040000 	.word	0x50040000

080016e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016f2:	4866      	ldr	r0, [pc, #408]	; (800188c <HAL_ADC_PollForConversion+0x1a4>)
 80016f4:	f7ff fd18 	bl	8001128 <LL_ADC_GetMultimode>
 80016f8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d102      	bne.n	8001708 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001702:	2308      	movs	r3, #8
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e02a      	b.n	800175e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d002      	beq.n	800171a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b09      	cmp	r3, #9
 8001718:	d111      	bne.n	800173e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f043 0220 	orr.w	r2, r3, #32
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0a4      	b.n	8001882 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001738:	2304      	movs	r3, #4
 800173a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800173c:	e00f      	b.n	800175e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800173e:	4853      	ldr	r0, [pc, #332]	; (800188c <HAL_ADC_PollForConversion+0x1a4>)
 8001740:	f7ff fd00 	bl	8001144 <LL_ADC_GetMultiDMATransfer>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	f043 0220 	orr.w	r2, r3, #32
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e093      	b.n	8001882 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800175a:	2304      	movs	r3, #4
 800175c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800175e:	f7ff fb69 	bl	8000e34 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001764:	e021      	b.n	80017aa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d01d      	beq.n	80017aa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800176e:	f7ff fb61 	bl	8000e34 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d302      	bcc.n	8001784 <HAL_ADC_PollForConversion+0x9c>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d112      	bne.n	80017aa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f043 0204 	orr.w	r2, r3, #4
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e06b      	b.n	8001882 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0d6      	beq.n	8001766 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc1f 	bl	800100c <LL_ADC_REG_IsTriggerSourceSWStart>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01c      	beq.n	800180e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e5b      	ldrb	r3, [r3, #25]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d118      	bne.n	800180e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d111      	bne.n	800180e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <HAL_ADC_PollForConversion+0x1a8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d002      	beq.n	800181e <HAL_ADC_PollForConversion+0x136>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e000      	b.n	8001820 <HAL_ADC_PollForConversion+0x138>
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_ADC_PollForConversion+0x1ac>)
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4293      	cmp	r3, r2
 8001826:	d008      	beq.n	800183a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d002      	beq.n	800183a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b09      	cmp	r3, #9
 8001838:	d104      	bne.n	8001844 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	e00c      	b.n	800185e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_ADC_PollForConversion+0x1a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d002      	beq.n	8001854 <HAL_ADC_PollForConversion+0x16c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e000      	b.n	8001856 <HAL_ADC_PollForConversion+0x16e>
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_ADC_PollForConversion+0x1ac>)
 8001856:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d104      	bne.n	800186e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2208      	movs	r2, #8
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e008      	b.n	8001880 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d103      	bne.n	8001880 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	220c      	movs	r2, #12
 800187e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3720      	adds	r7, #32
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	50040300 	.word	0x50040300
 8001890:	50040100 	.word	0x50040100
 8001894:	50040000 	.word	0x50040000

08001898 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0b6      	sub	sp, #216	; 0xd8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x22>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e3e3      	b.n	800209e <HAL_ADC_ConfigChannel+0x7ea>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fcc5 	bl	8001272 <LL_ADC_REG_IsConversionOngoing>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 83c4 	bne.w	8002078 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d824      	bhi.n	8001942 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	3b02      	subs	r3, #2
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d81b      	bhi.n	800193a <HAL_ADC_ConfigChannel+0x86>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_ADC_ConfigChannel+0x54>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001919 	.word	0x08001919
 800190c:	08001921 	.word	0x08001921
 8001910:	08001929 	.word	0x08001929
 8001914:	08001931 	.word	0x08001931
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	220c      	movs	r2, #12
 800191c:	605a      	str	r2, [r3, #4]
          break;
 800191e:	e011      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2212      	movs	r2, #18
 8001924:	605a      	str	r2, [r3, #4]
          break;
 8001926:	e00d      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2218      	movs	r2, #24
 800192c:	605a      	str	r2, [r3, #4]
          break;
 800192e:	e009      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001936:	605a      	str	r2, [r3, #4]
          break;
 8001938:	e004      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2206      	movs	r2, #6
 800193e:	605a      	str	r2, [r3, #4]
          break;
 8001940:	e000      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001942:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	f7ff fb6e 	bl	8001032 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fc89 	bl	8001272 <LL_ADC_REG_IsConversionOngoing>
 8001960:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fc95 	bl	8001298 <LL_ADC_INJ_IsConversionOngoing>
 800196e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001972:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 81c1 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800197c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001980:	2b00      	cmp	r3, #0
 8001982:	f040 81bc 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800198e:	d10f      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff fb75 	bl	800108a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb1c 	bl	8000fe6 <LL_ADC_SetSamplingTimeCommonConfig>
 80019ae:	e00e      	b.n	80019ce <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	461a      	mov	r2, r3
 80019be:	f7ff fb64 	bl	800108a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fb0c 	bl	8000fe6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d00a      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6919      	ldr	r1, [r3, #16]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a00:	f7ff fa9c 	bl	8000f3c <LL_ADC_SetOffset>
 8001a04:	e17b      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fab9 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10a      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x17e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff faae 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	0e9b      	lsrs	r3, r3, #26
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	e01e      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1bc>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff faa3 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001a60:	2320      	movs	r3, #32
 8001a62:	e004      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001a64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d4>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0e9b      	lsrs	r3, r3, #26
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	e018      	b.n	8001aba <HAL_ADC_ConfigChannel+0x206>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e004      	b.n	8001aba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d106      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fa72 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fa56 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x244>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fa4b 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	0e9b      	lsrs	r3, r3, #26
 8001af2:	f003 021f 	and.w	r2, r3, #31
 8001af6:	e01e      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x282>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fa40 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001b26:	2320      	movs	r3, #32
 8001b28:	e004      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001b2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x29a>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0e9b      	lsrs	r3, r3, #26
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	e018      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x2cc>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e004      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d106      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fa0f 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2102      	movs	r1, #2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f9f3 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x30a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2102      	movs	r1, #2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f9e8 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	e01e      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x348>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f9dd 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001be0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001bec:	2320      	movs	r3, #32
 8001bee:	e004      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x360>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	e016      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x38e>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001c34:	2320      	movs	r3, #32
 8001c36:	e004      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f9ae 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2103      	movs	r1, #3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f992 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x3cc>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2103      	movs	r1, #3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f987 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	e017      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x3fc>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2103      	movs	r1, #3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f97c 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e003      	b.n	8001cae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x414>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0e9b      	lsrs	r3, r3, #26
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	e011      	b.n	8001cec <HAL_ADC_ConfigChannel+0x438>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e003      	b.n	8001cec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f959 	bl	8000fb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fa8e 	bl	8001224 <LL_ADC_IsEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8140 	bne.w	8001f90 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f7ff f9df 	bl	80010e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4a8f      	ldr	r2, [pc, #572]	; (8001f64 <HAL_ADC_ConfigChannel+0x6b0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	f040 8131 	bne.w	8001f90 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10b      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x4a2>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2b09      	cmp	r3, #9
 8001d4c:	bf94      	ite	ls
 8001d4e:	2301      	movls	r3, #1
 8001d50:	2300      	movhi	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	e019      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x4d6>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d66:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d079      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x4f6>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	3301      	adds	r3, #1
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da8:	e015      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x522>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e003      	b.n	8001dce <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	069b      	lsls	r3, r3, #26
 8001dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x542>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	e017      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x572>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e003      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	ea42 0103 	orr.w	r1, r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x598>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	e018      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x5ca>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f003 021f 	and.w	r2, r3, #31
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	e081      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x5ea>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	3301      	adds	r3, #1
 8001e96:	069b      	lsls	r3, r3, #26
 8001e98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9c:	e015      	b.n	8001eca <HAL_ADC_ConfigChannel+0x616>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e003      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	069b      	lsls	r3, r3, #26
 8001ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x636>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	e017      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x666>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	61fb      	str	r3, [r7, #28]
  return result;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e003      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	ea42 0103 	orr.w	r1, r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x692>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 021f 	and.w	r2, r3, #31
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f44:	e01e      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x6d0>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	613b      	str	r3, [r7, #16]
  return result;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d104      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e006      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x6bc>
 8001f62:	bf00      	nop
 8001f64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 021f 	and.w	r2, r3, #31
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	051b      	lsls	r3, r3, #20
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f84:	430b      	orrs	r3, r1
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7ff f87d 	bl	800108a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_ADC_ConfigChannel+0x7f4>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d07a      	beq.n	8002092 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	4843      	ldr	r0, [pc, #268]	; (80020ac <HAL_ADC_ConfigChannel+0x7f8>)
 8001f9e:	f7fe ffbf 	bl	8000f20 <LL_ADC_GetCommonPathInternalCh>
 8001fa2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a41      	ldr	r2, [pc, #260]	; (80020b0 <HAL_ADC_ConfigChannel+0x7fc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d12c      	bne.n	800200a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d126      	bne.n	800200a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <HAL_ADC_ConfigChannel+0x800>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x71c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a3b      	ldr	r2, [pc, #236]	; (80020b8 <HAL_ADC_ConfigChannel+0x804>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d15d      	bne.n	800208c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4834      	ldr	r0, [pc, #208]	; (80020ac <HAL_ADC_ConfigChannel+0x7f8>)
 8001fdc:	f7fe ff8d 	bl	8000efa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_ADC_ConfigChannel+0x808>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	4a36      	ldr	r2, [pc, #216]	; (80020c0 <HAL_ADC_ConfigChannel+0x80c>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ffa:	e002      	b.n	8002002 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f9      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002008:	e040      	b.n	800208c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2d      	ldr	r2, [pc, #180]	; (80020c4 <HAL_ADC_ConfigChannel+0x810>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d118      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x792>
 8002014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d112      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <HAL_ADC_ConfigChannel+0x800>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_ADC_ConfigChannel+0x780>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <HAL_ADC_ConfigChannel+0x804>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d12d      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203c:	4619      	mov	r1, r3
 800203e:	481b      	ldr	r0, [pc, #108]	; (80020ac <HAL_ADC_ConfigChannel+0x7f8>)
 8002040:	f7fe ff5b 	bl	8000efa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002044:	e024      	b.n	8002090 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <HAL_ADC_ConfigChannel+0x814>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d120      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d11a      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_ADC_ConfigChannel+0x800>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d115      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800206a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800206e:	4619      	mov	r1, r3
 8002070:	480e      	ldr	r0, [pc, #56]	; (80020ac <HAL_ADC_ConfigChannel+0x7f8>)
 8002072:	f7fe ff42 	bl	8000efa <LL_ADC_SetCommonPathInternalCh>
 8002076:	e00c      	b.n	8002092 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800208a:	e002      	b.n	8002092 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800208c:	bf00      	nop
 800208e:	e000      	b.n	8002092 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002090:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800209a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	37d8      	adds	r7, #216	; 0xd8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	80080000 	.word	0x80080000
 80020ac:	50040300 	.word	0x50040300
 80020b0:	c7520000 	.word	0xc7520000
 80020b4:	50040000 	.word	0x50040000
 80020b8:	50040200 	.word	0x50040200
 80020bc:	20000000 	.word	0x20000000
 80020c0:	053e2d63 	.word	0x053e2d63
 80020c4:	cb840000 	.word	0xcb840000
 80020c8:	80000001 	.word	0x80000001

080020cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f8a3 	bl	8001224 <LL_ADC_IsEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d14d      	bne.n	8002180 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <ADC_Enable+0xc0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	f043 0210 	orr.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e039      	b.n	8002182 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f872 	bl	80011fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002118:	f7fe fe8c 	bl	8000e34 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800211e:	e028      	b.n	8002172 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f87d 	bl	8001224 <LL_ADC_IsEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f861 	bl	80011fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800213a:	f7fe fe7b 	bl	8000e34 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d914      	bls.n	8002172 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d00d      	beq.n	8002172 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e007      	b.n	8002182 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d1cf      	bne.n	8002120 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	8000003f 	.word	0x8000003f

08002190 <LL_ADC_IsEnabled>:
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <LL_ADC_IsEnabled+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_ADC_IsEnabled+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d101      	bne.n	80021ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b0a1      	sub	sp, #132	; 0x84
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e093      	b.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002202:	2300      	movs	r3, #0
 8002204:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002206:	2300      	movs	r3, #0
 8002208:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d102      	bne.n	800221a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002214:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e001      	b.n	800221e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e072      	b.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ffb9 	bl	80021b6 <LL_ADC_REG_IsConversionOngoing>
 8002244:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ffb3 	bl	80021b6 <LL_ADC_REG_IsConversionOngoing>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d154      	bne.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002258:	2b00      	cmp	r3, #0
 800225a:	d151      	bne.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800225c:	4b35      	ldr	r3, [pc, #212]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800225e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02c      	beq.n	80022c2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800227a:	035b      	lsls	r3, r3, #13
 800227c:	430b      	orrs	r3, r1
 800227e:	431a      	orrs	r2, r3
 8002280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002282:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002284:	4829      	ldr	r0, [pc, #164]	; (800232c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002286:	f7ff ff83 	bl	8002190 <LL_ADC_IsEnabled>
 800228a:	4604      	mov	r4, r0
 800228c:	4828      	ldr	r0, [pc, #160]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800228e:	f7ff ff7f 	bl	8002190 <LL_ADC_IsEnabled>
 8002292:	4603      	mov	r3, r0
 8002294:	431c      	orrs	r4, r3
 8002296:	4828      	ldr	r0, [pc, #160]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002298:	f7ff ff7a 	bl	8002190 <LL_ADC_IsEnabled>
 800229c:	4603      	mov	r3, r0
 800229e:	4323      	orrs	r3, r4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d137      	bne.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022ac:	f023 030f 	bic.w	r3, r3, #15
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	6811      	ldr	r1, [r2, #0]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	6892      	ldr	r2, [r2, #8]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022c0:	e028      	b.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ce:	4817      	ldr	r0, [pc, #92]	; (800232c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022d0:	f7ff ff5e 	bl	8002190 <LL_ADC_IsEnabled>
 80022d4:	4604      	mov	r4, r0
 80022d6:	4816      	ldr	r0, [pc, #88]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022d8:	f7ff ff5a 	bl	8002190 <LL_ADC_IsEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	431c      	orrs	r4, r3
 80022e0:	4815      	ldr	r0, [pc, #84]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022e2:	f7ff ff55 	bl	8002190 <LL_ADC_IsEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4323      	orrs	r3, r4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d112      	bne.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022f6:	f023 030f 	bic.w	r3, r3, #15
 80022fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022fe:	e009      	b.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002312:	e000      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002314:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800231e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002322:	4618      	mov	r0, r3
 8002324:	3784      	adds	r7, #132	; 0x84
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}
 800232a:	bf00      	nop
 800232c:	50040000 	.word	0x50040000
 8002330:	50040100 	.word	0x50040100
 8002334:	50040300 	.word	0x50040300
 8002338:	50040200 	.word	0x50040200

0800233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60d3      	str	r3, [r2, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0b      	blt.n	80023ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <__NVIC_EnableIRQ+0x38>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	; (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a8:	d301      	bcc.n	80024ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00f      	b.n	80024ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <SysTick_Config+0x40>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b6:	210f      	movs	r1, #15
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f7ff ff8e 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <SysTick_Config+0x40>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <SysTick_Config+0x40>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff29 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002504:	f7ff ff3e 	bl	8002384 <__NVIC_GetPriorityGrouping>
 8002508:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	6978      	ldr	r0, [r7, #20]
 8002510:	f7ff ff8e 	bl	8002430 <NVIC_EncodePriority>
 8002514:	4602      	mov	r2, r0
 8002516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff5d 	bl	80023dc <__NVIC_SetPriority>
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff31 	bl	80023a0 <__NVIC_EnableIRQ>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ffa2 	bl	8002498 <SysTick_Config>
 8002554:	4603      	mov	r3, r0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	e166      	b.n	800283e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8158 	beq.w	8002838 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d00b      	beq.n	80025a8 <HAL_GPIO_Init+0x48>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d007      	beq.n	80025a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800259c:	2b11      	cmp	r3, #17
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0201 	and.w	r2, r3, #1
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0xea>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b12      	cmp	r3, #18
 8002648:	d123      	bne.n	8002692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	6939      	ldr	r1, [r7, #16]
 800268e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80b2 	beq.w	8002838 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d4:	4b61      	ldr	r3, [pc, #388]	; (800285c <HAL_GPIO_Init+0x2fc>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	4a60      	ldr	r2, [pc, #384]	; (800285c <HAL_GPIO_Init+0x2fc>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6613      	str	r3, [r2, #96]	; 0x60
 80026e0:	4b5e      	ldr	r3, [pc, #376]	; (800285c <HAL_GPIO_Init+0x2fc>)
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026ec:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <HAL_GPIO_Init+0x300>)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002716:	d02b      	beq.n	8002770 <HAL_GPIO_Init+0x210>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a52      	ldr	r2, [pc, #328]	; (8002864 <HAL_GPIO_Init+0x304>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d025      	beq.n	800276c <HAL_GPIO_Init+0x20c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a51      	ldr	r2, [pc, #324]	; (8002868 <HAL_GPIO_Init+0x308>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d01f      	beq.n	8002768 <HAL_GPIO_Init+0x208>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a50      	ldr	r2, [pc, #320]	; (800286c <HAL_GPIO_Init+0x30c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d019      	beq.n	8002764 <HAL_GPIO_Init+0x204>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a4f      	ldr	r2, [pc, #316]	; (8002870 <HAL_GPIO_Init+0x310>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_GPIO_Init+0x200>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <HAL_GPIO_Init+0x314>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00d      	beq.n	800275c <HAL_GPIO_Init+0x1fc>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a4d      	ldr	r2, [pc, #308]	; (8002878 <HAL_GPIO_Init+0x318>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <HAL_GPIO_Init+0x1f8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_GPIO_Init+0x31c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_GPIO_Init+0x1f4>
 8002750:	2307      	movs	r3, #7
 8002752:	e00e      	b.n	8002772 <HAL_GPIO_Init+0x212>
 8002754:	2308      	movs	r3, #8
 8002756:	e00c      	b.n	8002772 <HAL_GPIO_Init+0x212>
 8002758:	2306      	movs	r3, #6
 800275a:	e00a      	b.n	8002772 <HAL_GPIO_Init+0x212>
 800275c:	2305      	movs	r3, #5
 800275e:	e008      	b.n	8002772 <HAL_GPIO_Init+0x212>
 8002760:	2304      	movs	r3, #4
 8002762:	e006      	b.n	8002772 <HAL_GPIO_Init+0x212>
 8002764:	2303      	movs	r3, #3
 8002766:	e004      	b.n	8002772 <HAL_GPIO_Init+0x212>
 8002768:	2302      	movs	r3, #2
 800276a:	e002      	b.n	8002772 <HAL_GPIO_Init+0x212>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_GPIO_Init+0x212>
 8002770:	2300      	movs	r3, #0
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	f002 0203 	and.w	r2, r2, #3
 8002778:	0092      	lsls	r2, r2, #2
 800277a:	4093      	lsls	r3, r2
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002782:	4937      	ldr	r1, [pc, #220]	; (8002860 <HAL_GPIO_Init+0x300>)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002790:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_GPIO_Init+0x320>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027b4:	4a32      	ldr	r2, [pc, #200]	; (8002880 <HAL_GPIO_Init+0x320>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_GPIO_Init+0x320>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027de:	4a28      	ldr	r2, [pc, #160]	; (8002880 <HAL_GPIO_Init+0x320>)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e4:	4b26      	ldr	r3, [pc, #152]	; (8002880 <HAL_GPIO_Init+0x320>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002808:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <HAL_GPIO_Init+0x320>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_GPIO_Init+0x320>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <HAL_GPIO_Init+0x320>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3301      	adds	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	f47f ae91 	bne.w	8002570 <HAL_GPIO_Init+0x10>
  }
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40021000 	.word	0x40021000
 8002860:	40010000 	.word	0x40010000
 8002864:	48000400 	.word	0x48000400
 8002868:	48000800 	.word	0x48000800
 800286c:	48000c00 	.word	0x48000c00
 8002870:	48001000 	.word	0x48001000
 8002874:	48001400 	.word	0x48001400
 8002878:	48001800 	.word	0x48001800
 800287c:	48001c00 	.word	0x48001c00
 8002880:	40010400 	.word	0x40010400

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028a0:	e002      	b.n	80028a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43d9      	mvns	r1, r3
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	400b      	ands	r3, r1
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f806 	bl	8002918 <HAL_GPIO_EXTI_Callback>
  }
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40010400 	.word	0x40010400

08002918 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800292e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002930:	b08f      	sub	sp, #60	; 0x3c
 8002932:	af0a      	add	r7, sp, #40	; 0x28
 8002934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e054      	b.n	80029ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f007 ffea 	bl	800a934 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2203      	movs	r2, #3
 8002964:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f003 fef8 	bl	8006774 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	687e      	ldr	r6, [r7, #4]
 800298c:	466d      	mov	r5, sp
 800298e:	f106 0410 	add.w	r4, r6, #16
 8002992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800299e:	e885 0003 	stmia.w	r5, {r0, r1}
 80029a2:	1d33      	adds	r3, r6, #4
 80029a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f003 fea7 	bl	80066fa <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 feef 	bl	8006796 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	687e      	ldr	r6, [r7, #4]
 80029c0:	466d      	mov	r5, sp
 80029c2:	f106 0410 	add.w	r4, r6, #16
 80029c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029d6:	1d33      	adds	r3, r6, #4
 80029d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029da:	6838      	ldr	r0, [r7, #0]
 80029dc:	f003 fffe 	bl	80069dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029f2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80029f2:	b590      	push	{r4, r7, lr}
 80029f4:	b089      	sub	sp, #36	; 0x24
 80029f6:	af04      	add	r7, sp, #16
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	4608      	mov	r0, r1
 80029fc:	4611      	mov	r1, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	70fb      	strb	r3, [r7, #3]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70bb      	strb	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_HCD_HC_Init+0x28>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e076      	b.n	8002b08 <HAL_HCD_HC_Init+0x116>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	333d      	adds	r3, #61	; 0x3d
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3338      	adds	r3, #56	; 0x38
 8002a42:	787a      	ldrb	r2, [r7, #1]
 8002a44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3340      	adds	r3, #64	; 0x40
 8002a54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a56:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3339      	adds	r3, #57	; 0x39
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	333f      	adds	r3, #63	; 0x3f
 8002a78:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	78ba      	ldrb	r2, [r7, #2]
 8002a82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a86:	b2d0      	uxtb	r0, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	333a      	adds	r3, #58	; 0x3a
 8002a94:	4602      	mov	r2, r0
 8002a96:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	da09      	bge.n	8002ab4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	333b      	adds	r3, #59	; 0x3b
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e008      	b.n	8002ac6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	333b      	adds	r3, #59	; 0x3b
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	333c      	adds	r3, #60	; 0x3c
 8002ad4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ad8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	787c      	ldrb	r4, [r7, #1]
 8002ae0:	78ba      	ldrb	r2, [r7, #2]
 8002ae2:	78f9      	ldrb	r1, [r7, #3]
 8002ae4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ae6:	9302      	str	r3, [sp, #8]
 8002ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4623      	mov	r3, r4
 8002af6:	f004 f8b5 	bl	8006c64 <USB_HC_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}

08002b10 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_HCD_HC_Halt+0x1e>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e00f      	b.n	8002b4e <HAL_HCD_HC_Halt+0x3e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 fa91 	bl	8007066 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	70fb      	strb	r3, [r7, #3]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	70bb      	strb	r3, [r7, #2]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	333b      	adds	r3, #59	; 0x3b
 8002b80:	78ba      	ldrb	r2, [r7, #2]
 8002b82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	333f      	adds	r3, #63	; 0x3f
 8002b92:	787a      	ldrb	r2, [r7, #1]
 8002b94:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b96:	7c3b      	ldrb	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d112      	bne.n	8002bc2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3342      	adds	r3, #66	; 0x42
 8002baa:	2203      	movs	r2, #3
 8002bac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333d      	adds	r3, #61	; 0x3d
 8002bbc:	7f3a      	ldrb	r2, [r7, #28]
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e008      	b.n	8002bd4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3342      	adds	r3, #66	; 0x42
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	f200 80c6 	bhi.w	8002d68 <HAL_HCD_HC_SubmitRequest+0x210>
 8002bdc:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002d55 	.word	0x08002d55
 8002bec:	08002c59 	.word	0x08002c59
 8002bf0:	08002cd7 	.word	0x08002cd7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002bf4:	7c3b      	ldrb	r3, [r7, #16]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f040 80b8 	bne.w	8002d6c <HAL_HCD_HC_SubmitRequest+0x214>
 8002bfc:	78bb      	ldrb	r3, [r7, #2]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 80b4 	bne.w	8002d6c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002c04:	8b3b      	ldrh	r3, [r7, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d108      	bne.n	8002c1c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3355      	adds	r3, #85	; 0x55
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3355      	adds	r3, #85	; 0x55
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3342      	adds	r3, #66	; 0x42
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c42:	e093      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3342      	adds	r3, #66	; 0x42
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
      break;
 8002c56:	e089      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c58:	78bb      	ldrb	r3, [r7, #2]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11d      	bne.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3355      	adds	r3, #85	; 0x55
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3342      	adds	r3, #66	; 0x42
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c84:	e073      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3342      	adds	r3, #66	; 0x42
 8002c94:	2202      	movs	r2, #2
 8002c96:	701a      	strb	r2, [r3, #0]
      break;
 8002c98:	e069      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3354      	adds	r3, #84	; 0x54
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3342      	adds	r3, #66	; 0x42
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
      break;
 8002cc0:	e055      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3342      	adds	r3, #66	; 0x42
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]
      break;
 8002cd4:	e04b      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cd6:	78bb      	ldrb	r3, [r7, #2]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11d      	bne.n	8002d18 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3355      	adds	r3, #85	; 0x55
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3342      	adds	r3, #66	; 0x42
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d02:	e034      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3342      	adds	r3, #66	; 0x42
 8002d12:	2202      	movs	r2, #2
 8002d14:	701a      	strb	r2, [r3, #0]
      break;
 8002d16:	e02a      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3354      	adds	r3, #84	; 0x54
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3342      	adds	r3, #66	; 0x42
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
      break;
 8002d3e:	e016      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3342      	adds	r3, #66	; 0x42
 8002d4e:	2202      	movs	r2, #2
 8002d50:	701a      	strb	r2, [r3, #0]
      break;
 8002d52:	e00c      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3342      	adds	r3, #66	; 0x42
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
      break;
 8002d66:	e002      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002d6c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3344      	adds	r3, #68	; 0x44
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	8b3a      	ldrh	r2, [r7, #24]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	202c      	movs	r0, #44	; 0x2c
 8002d88:	fb00 f303 	mul.w	r3, r0, r3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	334c      	adds	r3, #76	; 0x4c
 8002d90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3360      	adds	r3, #96	; 0x60
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3350      	adds	r3, #80	; 0x50
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3339      	adds	r3, #57	; 0x39
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3361      	adds	r3, #97	; 0x61
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	222c      	movs	r2, #44	; 0x2c
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	3338      	adds	r3, #56	; 0x38
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f004 f831 	bl	8006e54 <USB_HC_StartXfer>
 8002df2:	4603      	mov	r3, r0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 fd9f 	bl	8006956 <USB_GetMode>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	f040 80ef 	bne.w	8002ffe <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fd83 	bl	8006930 <USB_ReadInterrupts>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80e5 	beq.w	8002ffc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fd7a 	bl	8006930 <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e46:	d104      	bne.n	8002e52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 fd6a 	bl	8006930 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e66:	d104      	bne.n	8002e72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fd5a 	bl	8006930 <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e86:	d104      	bne.n	8002e92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 fd4a 	bl	8006930 <USB_ReadInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d103      	bne.n	8002eae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 fd3c 	bl	8006930 <USB_ReadInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec2:	d115      	bne.n	8002ef0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ecc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d108      	bne.n	8002ef0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f007 fdaa 	bl	800aa38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 fdf4 	bl	8006ad8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 fd1b 	bl	8006930 <USB_ReadInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f04:	d102      	bne.n	8002f0c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f001 f962 	bl	80041d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fd0d 	bl	8006930 <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d106      	bne.n	8002f2e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f007 fd6d 	bl	800aa00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 fcfc 	bl	8006930 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d101      	bne.n	8002f46 <HAL_HCD_IRQHandler+0x14a>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_HCD_IRQHandler+0x14c>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d012      	beq.n	8002f72 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0210 	bic.w	r2, r2, #16
 8002f5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f001 f865 	bl	800402c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0210 	orr.w	r2, r2, #16
 8002f70:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fcda 	bl	8006930 <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f86:	d13a      	bne.n	8002ffe <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f004 f859 	bl	8007044 <USB_HC_ReadInterrupt>
 8002f92:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e025      	b.n	8002fe6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d018      	beq.n	8002fe0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f897 	bl	8003100 <HCD_HC_IN_IRQHandler>
 8002fd2:	e005      	b.n	8002fe0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fc90 	bl	8003900 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3d4      	bcc.n	8002f9a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff8:	615a      	str	r2, [r3, #20]
 8002ffa:	e000      	b.n	8002ffe <HAL_HCD_IRQHandler+0x202>
      return;
 8002ffc:	bf00      	nop
    }
  }
}
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_HCD_Start+0x16>
 8003016:	2302      	movs	r3, #2
 8003018:	e013      	b.n	8003042 <HAL_HCD_Start+0x3e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fb93 	bl	8006752 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f003 fdb4 	bl	8006ba0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_HCD_Stop+0x16>
 800305c:	2302      	movs	r3, #2
 800305e:	e00d      	b.n	800307c <HAL_HCD_Stop+0x32>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f004 f916 	bl	800729e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f003 fd5b 	bl	8006b4c <USB_ResetPort>
 8003096:	4603      	mov	r3, r0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	3360      	adds	r3, #96	; 0x60
 80030ba:	781b      	ldrb	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 fdb3 	bl	8006c40 <USB_GetCurrentFrame>
 80030da:	4603      	mov	r3, r0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 fd8e 	bl	8006c12 <USB_GetHostSpeed>
 80030f6:	4603      	mov	r3, r0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b04      	cmp	r3, #4
 800312e:	d119      	bne.n	8003164 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	2304      	movs	r3, #4
 8003140:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	0151      	lsls	r1, r2, #5
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	440a      	add	r2, r1
 8003158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	60d3      	str	r3, [r2, #12]
 8003162:	e101      	b.n	8003368 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317a:	d12b      	bne.n	80031d4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	461a      	mov	r2, r3
 800318a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800318e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	3361      	adds	r3, #97	; 0x61
 800319e:	2207      	movs	r2, #7
 80031a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	0151      	lsls	r1, r2, #5
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	440a      	add	r2, r1
 80031b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 ff4a 	bl	8007066 <USB_HC_Halt>
 80031d2:	e0c9      	b.n	8003368 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d109      	bne.n	80031fe <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	461a      	mov	r2, r3
 80031f8:	2320      	movs	r3, #32
 80031fa:	6093      	str	r3, [r2, #8]
 80031fc:	e0b4      	b.n	8003368 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d133      	bne.n	800327c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	0151      	lsls	r1, r2, #5
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	440a      	add	r2, r1
 800322a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800322e:	f043 0302 	orr.w	r3, r3, #2
 8003232:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3361      	adds	r3, #97	; 0x61
 8003242:	2205      	movs	r2, #5
 8003244:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4413      	add	r3, r2
 800324e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003252:	461a      	mov	r2, r3
 8003254:	2310      	movs	r3, #16
 8003256:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	2308      	movs	r3, #8
 8003268:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fef6 	bl	8007066 <USB_HC_Halt>
 800327a:	e075      	b.n	8003368 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d134      	bne.n	80032fe <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3361      	adds	r3, #97	; 0x61
 80032c2:	2208      	movs	r2, #8
 80032c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	461a      	mov	r2, r3
 80032d4:	2310      	movs	r3, #16
 80032d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 feb5 	bl	8007066 <USB_HC_Halt>
 80032fc:	e034      	b.n	8003368 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d129      	bne.n	8003368 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	0151      	lsls	r1, r2, #5
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	440a      	add	r2, r1
 800332a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3361      	adds	r3, #97	; 0x61
 8003342:	2206      	movs	r2, #6
 8003344:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f003 fe88 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003362:	461a      	mov	r2, r3
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337e:	d122      	bne.n	80033c6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	0151      	lsls	r1, r2, #5
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	440a      	add	r2, r1
 8003396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fe5b 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80033c4:	e298      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 80fd 	bne.w	80035d8 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3361      	adds	r3, #97	; 0x61
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	335c      	adds	r3, #92	; 0x5c
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	2301      	movs	r3, #1
 8003412:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	333f      	adds	r3, #63	; 0x3f
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	333f      	adds	r3, #63	; 0x3f
 8003436:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003438:	2b02      	cmp	r3, #2
 800343a:	d121      	bne.n	8003480 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	0151      	lsls	r1, r2, #5
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	440a      	add	r2, r1
 8003452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fdfd 	bl	8007066 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003478:	461a      	mov	r2, r3
 800347a:	2310      	movs	r3, #16
 800347c:	6093      	str	r3, [r2, #8]
 800347e:	e066      	b.n	800354e <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	333f      	adds	r3, #63	; 0x3f
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d127      	bne.n	80034e4 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	0151      	lsls	r1, r2, #5
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	440a      	add	r2, r1
 80034aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3360      	adds	r3, #96	; 0x60
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	b2d9      	uxtb	r1, r3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	202c      	movs	r0, #44	; 0x2c
 80034d0:	fb00 f303 	mul.w	r3, r0, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3360      	adds	r3, #96	; 0x60
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f007 fab9 	bl	800aa54 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034e2:	e034      	b.n	800354e <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	333f      	adds	r3, #63	; 0x3f
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d12a      	bne.n	800354e <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3360      	adds	r3, #96	; 0x60
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	212c      	movs	r1, #44	; 0x2c
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	4413      	add	r3, r2
 8003516:	3354      	adds	r3, #84	; 0x54
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	f083 0301 	eor.w	r3, r3, #1
 800351e:	b2d8      	uxtb	r0, r3
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3354      	adds	r3, #84	; 0x54
 800352e:	4602      	mov	r2, r0
 8003530:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	b2d9      	uxtb	r1, r3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	202c      	movs	r0, #44	; 0x2c
 800353c:	fb00 f303 	mul.w	r3, r0, r3
 8003540:	4413      	add	r3, r2
 8003542:	3360      	adds	r3, #96	; 0x60
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f007 fa83 	bl	800aa54 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d12b      	bne.n	80035ae <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3348      	adds	r3, #72	; 0x48
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	202c      	movs	r0, #44	; 0x2c
 800356c:	fb00 f202 	mul.w	r2, r0, r2
 8003570:	440a      	add	r2, r1
 8003572:	3240      	adds	r2, #64	; 0x40
 8003574:	8812      	ldrh	r2, [r2, #0]
 8003576:	fbb3 f3f2 	udiv	r3, r3, r2
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 81ba 	beq.w	80038f8 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3354      	adds	r3, #84	; 0x54
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	f083 0301 	eor.w	r3, r3, #1
 8003598:	b2d8      	uxtb	r0, r3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	212c      	movs	r1, #44	; 0x2c
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	3354      	adds	r3, #84	; 0x54
 80035a8:	4602      	mov	r2, r0
 80035aa:	701a      	strb	r2, [r3, #0]
}
 80035ac:	e1a4      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	212c      	movs	r1, #44	; 0x2c
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	4413      	add	r3, r2
 80035ba:	3354      	adds	r3, #84	; 0x54
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	f083 0301 	eor.w	r3, r3, #1
 80035c2:	b2d8      	uxtb	r0, r3
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3354      	adds	r3, #84	; 0x54
 80035d2:	4602      	mov	r2, r0
 80035d4:	701a      	strb	r2, [r3, #0]
}
 80035d6:	e18f      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	f040 8106 	bne.w	80037fc <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	0151      	lsls	r1, r2, #5
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	440a      	add	r2, r1
 8003606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800360a:	f023 0302 	bic.w	r3, r3, #2
 800360e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3361      	adds	r3, #97	; 0x61
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d109      	bne.n	8003638 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3360      	adds	r3, #96	; 0x60
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e0c9      	b.n	80037cc <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3361      	adds	r3, #97	; 0x61
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d109      	bne.n	8003660 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	3360      	adds	r3, #96	; 0x60
 800365a:	2205      	movs	r2, #5
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e0b5      	b.n	80037cc <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	3361      	adds	r3, #97	; 0x61
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d009      	beq.n	8003688 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3361      	adds	r3, #97	; 0x61
 8003682:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003684:	2b08      	cmp	r3, #8
 8003686:	d150      	bne.n	800372a <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	335c      	adds	r3, #92	; 0x5c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	202c      	movs	r0, #44	; 0x2c
 80036a0:	fb00 f303 	mul.w	r3, r0, r3
 80036a4:	440b      	add	r3, r1
 80036a6:	335c      	adds	r3, #92	; 0x5c
 80036a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	335c      	adds	r3, #92	; 0x5c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d912      	bls.n	80036e4 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	335c      	adds	r3, #92	; 0x5c
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3360      	adds	r3, #96	; 0x60
 80036de:	2204      	movs	r2, #4
 80036e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036e2:	e073      	b.n	80037cc <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3360      	adds	r3, #96	; 0x60
 80036f2:	2202      	movs	r2, #2
 80036f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800370c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003714:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003722:	461a      	mov	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003728:	e050      	b.n	80037cc <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3361      	adds	r3, #97	; 0x61
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d122      	bne.n	8003784 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	3360      	adds	r3, #96	; 0x60
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003766:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800376e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e023      	b.n	80037cc <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3361      	adds	r3, #97	; 0x61
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b07      	cmp	r3, #7
 8003796:	d119      	bne.n	80037cc <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	212c      	movs	r1, #44	; 0x2c
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	4413      	add	r3, r2
 80037a4:	335c      	adds	r3, #92	; 0x5c
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	202c      	movs	r0, #44	; 0x2c
 80037b0:	fb00 f303 	mul.w	r3, r0, r3
 80037b4:	440b      	add	r3, r1
 80037b6:	335c      	adds	r3, #92	; 0x5c
 80037b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	3360      	adds	r3, #96	; 0x60
 80037c8:	2204      	movs	r2, #4
 80037ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	461a      	mov	r2, r3
 80037da:	2302      	movs	r3, #2
 80037dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	b2d9      	uxtb	r1, r3
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	202c      	movs	r0, #44	; 0x2c
 80037e8:	fb00 f303 	mul.w	r3, r0, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	3360      	adds	r3, #96	; 0x60
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f007 f92d 	bl	800aa54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037fa:	e07d      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d172      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	333f      	adds	r3, #63	; 0x3f
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d121      	bne.n	800386a <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	335c      	adds	r3, #92	; 0x5c
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	0151      	lsls	r1, r2, #5
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	440a      	add	r2, r1
 800384e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003852:	f043 0302 	orr.w	r3, r3, #2
 8003856:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f003 fbff 	bl	8007066 <USB_HC_Halt>
 8003868:	e03d      	b.n	80038e6 <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	333f      	adds	r3, #63	; 0x3f
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	333f      	adds	r3, #63	; 0x3f
 800388c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800388e:	2b02      	cmp	r3, #2
 8003890:	d129      	bne.n	80038e6 <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	335c      	adds	r3, #92	; 0x5c
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	212c      	movs	r1, #44	; 0x2c
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	3361      	adds	r3, #97	; 0x61
 80038b2:	2203      	movs	r2, #3
 80038b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 fbc0 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	461a      	mov	r2, r3
 80038f4:	2310      	movs	r3, #16
 80038f6:	6093      	str	r3, [r2, #8]
}
 80038f8:	bf00      	nop
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	4413      	add	r3, r2
 8003922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b04      	cmp	r3, #4
 800392e:	d119      	bne.n	8003964 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393c:	461a      	mov	r2, r3
 800393e:	2304      	movs	r3, #4
 8003940:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	440a      	add	r2, r1
 8003958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003962:	e35f      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b20      	cmp	r3, #32
 8003978:	d13e      	bne.n	80039f8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003986:	461a      	mov	r2, r3
 8003988:	2320      	movs	r3, #32
 800398a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	333d      	adds	r3, #61	; 0x3d
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	f040 8341 	bne.w	8004024 <HCD_HC_OUT_IRQHandler+0x724>
      hhcd->hc[ch_num].do_ping = 0U;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	333d      	adds	r3, #61	; 0x3d
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3360      	adds	r3, #96	; 0x60
 80039c2:	2202      	movs	r2, #2
 80039c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f003 fb38 	bl	8007066 <USB_HC_Halt>
}
 80039f6:	e315      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0e:	d122      	bne.n	8003a56 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	0151      	lsls	r1, r2, #5
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	440a      	add	r2, r1
 8003a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 fb13 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a52:	6093      	str	r3, [r2, #8]
}
 8003a54:	e2e6      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d150      	bne.n	8003b0e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	335c      	adds	r3, #92	; 0x5c
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d111      	bne.n	8003ab8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	333d      	adds	r3, #61	; 0x3d
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2340      	movs	r3, #64	; 0x40
 8003ab6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	0151      	lsls	r1, r2, #5
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	440a      	add	r2, r1
 8003ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 fabf 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af4:	461a      	mov	r2, r3
 8003af6:	2301      	movs	r3, #1
 8003af8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	3361      	adds	r3, #97	; 0x61
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
}
 8003b0c:	e28a      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d13c      	bne.n	8003b9e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3361      	adds	r3, #97	; 0x61
 8003b32:	2204      	movs	r2, #4
 8003b34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	333d      	adds	r3, #61	; 0x3d
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	335c      	adds	r3, #92	; 0x5c
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b74:	f043 0302 	orr.w	r3, r3, #2
 8003b78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 fa6e 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b96:	461a      	mov	r2, r3
 8003b98:	2340      	movs	r3, #64	; 0x40
 8003b9a:	6093      	str	r3, [r2, #8]
}
 8003b9c:	e242      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d12a      	bne.n	8003c0a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 fa38 	bl	8007066 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	3361      	adds	r3, #97	; 0x61
 8003c04:	2205      	movs	r2, #5
 8003c06:	701a      	strb	r2, [r3, #0]
}
 8003c08:	e20c      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d133      	bne.n	8003c88 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	335c      	adds	r3, #92	; 0x5c
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3361      	adds	r3, #97	; 0x61
 8003c40:	2203      	movs	r2, #3
 8003c42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c5e:	f043 0302 	orr.w	r3, r3, #2
 8003c62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f003 f9f9 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	461a      	mov	r2, r3
 8003c82:	2310      	movs	r3, #16
 8003c84:	6093      	str	r3, [r2, #8]
}
 8003c86:	e1cd      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	d12a      	bne.n	8003cf4 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	212c      	movs	r1, #44	; 0x2c
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	3361      	adds	r3, #97	; 0x61
 8003cac:	2206      	movs	r2, #6
 8003cae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	4611      	mov	r1, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f003 f9c3 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	461a      	mov	r2, r3
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	6093      	str	r3, [r2, #8]
}
 8003cf2:	e197      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d134      	bne.n	8003d76 <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	0151      	lsls	r1, r2, #5
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	440a      	add	r2, r1
 8003d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d26:	f043 0302 	orr.w	r3, r3, #2
 8003d2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f003 f995 	bl	8007066 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2310      	movs	r3, #16
 8003d4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3361      	adds	r3, #97	; 0x61
 8003d70:	2208      	movs	r2, #8
 8003d72:	701a      	strb	r2, [r3, #0]
}
 8003d74:	e156      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	f040 814b 	bne.w	8004024 <HCD_HC_OUT_IRQHandler+0x724>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	3361      	adds	r3, #97	; 0x61
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d179      	bne.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x5b6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3360      	adds	r3, #96	; 0x60
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	333f      	adds	r3, #63	; 0x3f
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d00a      	beq.n	8003dfe <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	333f      	adds	r3, #63	; 0x3f
 8003df6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	f040 80fc 	bne.w	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
        if (hhcd->Init.dma_enable == 1U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d142      	bne.n	8003e8c <HCD_HC_OUT_IRQHandler+0x58c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	212c      	movs	r1, #44	; 0x2c
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	334c      	adds	r3, #76	; 0x4c
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80ed 	beq.w	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	212c      	movs	r1, #44	; 0x2c
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	334c      	adds	r3, #76	; 0x4c
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	202c      	movs	r0, #44	; 0x2c
 8003e32:	fb00 f202 	mul.w	r2, r0, r2
 8003e36:	440a      	add	r2, r1
 8003e38:	3240      	adds	r2, #64	; 0x40
 8003e3a:	8812      	ldrh	r2, [r2, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	202c      	movs	r0, #44	; 0x2c
 8003e46:	fb00 f202 	mul.w	r2, r0, r2
 8003e4a:	440a      	add	r2, r1
 8003e4c:	3240      	adds	r2, #64	; 0x40
 8003e4e:	8812      	ldrh	r2, [r2, #0]
 8003e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80ca 	beq.w	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3355      	adds	r3, #85	; 0x55
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	f083 0301 	eor.w	r3, r3, #1
 8003e76:	b2d8      	uxtb	r0, r3
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	212c      	movs	r1, #44	; 0x2c
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	3355      	adds	r3, #85	; 0x55
 8003e86:	4602      	mov	r2, r0
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e0b4      	b.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	212c      	movs	r1, #44	; 0x2c
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	3355      	adds	r3, #85	; 0x55
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	f083 0301 	eor.w	r3, r3, #1
 8003ea0:	b2d8      	uxtb	r0, r3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	3355      	adds	r3, #85	; 0x55
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e09f      	b.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	212c      	movs	r1, #44	; 0x2c
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3361      	adds	r3, #97	; 0x61
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d109      	bne.n	8003ede <HCD_HC_OUT_IRQHandler+0x5de>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3360      	adds	r3, #96	; 0x60
 8003ed8:	2202      	movs	r2, #2
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e08b      	b.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3361      	adds	r3, #97	; 0x61
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d109      	bne.n	8003f06 <HCD_HC_OUT_IRQHandler+0x606>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	3360      	adds	r3, #96	; 0x60
 8003f00:	2202      	movs	r2, #2
 8003f02:	701a      	strb	r2, [r3, #0]
 8003f04:	e077      	b.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	3361      	adds	r3, #97	; 0x61
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d109      	bne.n	8003f2e <HCD_HC_OUT_IRQHandler+0x62e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	3360      	adds	r3, #96	; 0x60
 8003f28:	2205      	movs	r2, #5
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e063      	b.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3361      	adds	r3, #97	; 0x61
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d009      	beq.n	8003f56 <HCD_HC_OUT_IRQHandler+0x656>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	212c      	movs	r1, #44	; 0x2c
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3361      	adds	r3, #97	; 0x61
 8003f50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d14f      	bne.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	212c      	movs	r1, #44	; 0x2c
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	4413      	add	r3, r2
 8003f62:	335c      	adds	r3, #92	; 0x5c
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	202c      	movs	r0, #44	; 0x2c
 8003f6e:	fb00 f303 	mul.w	r3, r0, r3
 8003f72:	440b      	add	r3, r1
 8003f74:	335c      	adds	r3, #92	; 0x5c
 8003f76:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	335c      	adds	r3, #92	; 0x5c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d912      	bls.n	8003fb2 <HCD_HC_OUT_IRQHandler+0x6b2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	335c      	adds	r3, #92	; 0x5c
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	3360      	adds	r3, #96	; 0x60
 8003fac:	2204      	movs	r2, #4
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e021      	b.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x6f6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3360      	adds	r3, #96	; 0x60
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fda:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fe2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004002:	461a      	mov	r2, r3
 8004004:	2302      	movs	r3, #2
 8004006:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	b2d9      	uxtb	r1, r3
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	202c      	movs	r0, #44	; 0x2c
 8004012:	fb00 f303 	mul.w	r3, r0, r3
 8004016:	4413      	add	r3, r2
 8004018:	3360      	adds	r3, #96	; 0x60
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f006 fd18 	bl	800aa54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004024:	bf00      	nop
 8004026:	3720      	adds	r7, #32
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	0c5b      	lsrs	r3, r3, #17
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004060:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d004      	beq.n	8004072 <HCD_RXQLVL_IRQHandler+0x46>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b05      	cmp	r3, #5
 800406c:	f000 80a9 	beq.w	80041c2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004070:	e0aa      	b.n	80041c8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a6 	beq.w	80041c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	3344      	adds	r3, #68	; 0x44
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 809b 	beq.w	80041c6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3350      	adds	r3, #80	; 0x50
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	441a      	add	r2, r3
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	202c      	movs	r0, #44	; 0x2c
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	440b      	add	r3, r1
 80040b0:	334c      	adds	r3, #76	; 0x4c
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d87a      	bhi.n	80041ae <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3344      	adds	r3, #68	; 0x44
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	b292      	uxth	r2, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f002 fc04 	bl	80068de <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3344      	adds	r3, #68	; 0x44
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	441a      	add	r2, r3
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	202c      	movs	r0, #44	; 0x2c
 80040f0:	fb00 f303 	mul.w	r3, r0, r3
 80040f4:	440b      	add	r3, r1
 80040f6:	3344      	adds	r3, #68	; 0x44
 80040f8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	3350      	adds	r3, #80	; 0x50
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	441a      	add	r2, r3
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	202c      	movs	r0, #44	; 0x2c
 8004114:	fb00 f303 	mul.w	r3, r0, r3
 8004118:	440b      	add	r3, r1
 800411a:	3350      	adds	r3, #80	; 0x50
 800411c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	0cdb      	lsrs	r3, r3, #19
 800412e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004132:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3340      	adds	r3, #64	; 0x40
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4293      	cmp	r3, r2
 800414a:	d13c      	bne.n	80041c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d039      	beq.n	80041c6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004168:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004170:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	3354      	adds	r3, #84	; 0x54
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f083 0301 	eor.w	r3, r3, #1
 8004198:	b2d8      	uxtb	r0, r3
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3354      	adds	r3, #84	; 0x54
 80041a8:	4602      	mov	r2, r0
 80041aa:	701a      	strb	r2, [r3, #0]
      break;
 80041ac:	e00b      	b.n	80041c6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	212c      	movs	r1, #44	; 0x2c
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	3360      	adds	r3, #96	; 0x60
 80041bc:	2204      	movs	r2, #4
 80041be:	701a      	strb	r2, [r3, #0]
      break;
 80041c0:	e001      	b.n	80041c6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80041c6:	bf00      	nop
  }
}
 80041c8:	bf00      	nop
 80041ca:	3728      	adds	r7, #40	; 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80041fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d10b      	bne.n	8004220 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b01      	cmp	r3, #1
 8004210:	d102      	bne.n	8004218 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f006 fc02 	bl	800aa1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f043 0302 	orr.w	r3, r3, #2
 800421e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b08      	cmp	r3, #8
 8004228:	d132      	bne.n	8004290 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f043 0308 	orr.w	r3, r3, #8
 8004230:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d126      	bne.n	800428a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d113      	bne.n	800426c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800424a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800424e:	d106      	bne.n	800425e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2102      	movs	r1, #2
 8004256:	4618      	mov	r0, r3
 8004258:	f002 fc3e 	bl	8006ad8 <USB_InitFSLSPClkSel>
 800425c:	e011      	b.n	8004282 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f002 fc37 	bl	8006ad8 <USB_InitFSLSPClkSel>
 800426a:	e00a      	b.n	8004282 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800427a:	461a      	mov	r2, r3
 800427c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004280:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f006 fbf4 	bl	800aa70 <HAL_HCD_PortEnabled_Callback>
 8004288:	e002      	b.n	8004290 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f006 fbfe 	bl	800aa8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b20      	cmp	r3, #32
 8004298:	d103      	bne.n	80042a2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f043 0320 	orr.w	r3, r3, #32
 80042a0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6013      	str	r3, [r2, #0]
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40007000 	.word	0x40007000

080042d8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_PWR_EnterSLEEPMode+0x60>)
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f6:	d10e      	bne.n	8004316 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80042f8:	f000 f8b6 	bl	8004468 <HAL_PWREx_DisableLowPowerRunMode>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8004302:	e016      	b.n	8004332 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004310:	d001      	beq.n	8004316 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004312:	f000 f899 	bl	8004448 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_PWR_EnterSLEEPMode+0x64>)
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <HAL_PWR_EnterSLEEPMode+0x64>)
 800431c:	f023 0304 	bic.w	r3, r3, #4
 8004320:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004328:	bf30      	wfi
 800432a:	e002      	b.n	8004332 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800432c:	bf40      	sev
    __WFE();
 800432e:	bf20      	wfe
    __WFE();
 8004330:	bf20      	wfe
  }

}
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40007000 	.word	0x40007000
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_PWREx_GetVoltageRange+0x18>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40007000 	.word	0x40007000

0800435c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436a:	d130      	bne.n	80043ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800436c:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d038      	beq.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004382:	4a1e      	ldr	r2, [pc, #120]	; (80043fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004388:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2232      	movs	r2, #50	; 0x32
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0c9b      	lsrs	r3, r3, #18
 800439c:	3301      	adds	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a0:	e002      	b.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b4:	d102      	bne.n	80043bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f2      	bne.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d110      	bne.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e00f      	b.n	80043ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043da:	d007      	beq.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043e4:	4a05      	ldr	r2, [pc, #20]	; (80043fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40007000 	.word	0x40007000
 8004400:	20000000 	.word	0x20000000
 8004404:	431bde83 	.word	0x431bde83

08004408 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_PWREx_EnableVddUSB+0x1c>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004416:	6053      	str	r3, [r2, #4]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40007000 	.word	0x40007000

08004428 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_PWREx_EnableVddIO2+0x1c>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a04      	ldr	r2, [pc, #16]	; (8004444 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004436:	6053      	str	r3, [r2, #4]
}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40007000 	.word	0x40007000

08004448 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a04      	ldr	r2, [pc, #16]	; (8004464 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004456:	6013      	str	r3, [r2, #0]
}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40007000 	.word	0x40007000

08004468 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004478:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800447a:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2232      	movs	r2, #50	; 0x32
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0c9b      	lsrs	r3, r3, #18
 800448c:	3301      	adds	r3, #1
 800448e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004490:	e002      	b.n	8004498 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3b01      	subs	r3, #1
 8004496:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a4:	d102      	bne.n	80044ac <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f2      	bne.n	8004492 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b8:	d101      	bne.n	80044be <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e000      	b.n	80044c0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40007000 	.word	0x40007000
 80044d0:	20000000 	.word	0x20000000
 80044d4:	431bde83 	.word	0x431bde83

080044d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f000 bc16 	b.w	8004d18 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ec:	4ba0      	ldr	r3, [pc, #640]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044f6:	4b9e      	ldr	r3, [pc, #632]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80e4 	beq.w	80046d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_RCC_OscConfig+0x4c>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	f040 808b 	bne.w	8004632 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b01      	cmp	r3, #1
 8004520:	f040 8087 	bne.w	8004632 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004524:	4b92      	ldr	r3, [pc, #584]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_OscConfig+0x64>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e3ed      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <HAL_RCC_OscConfig+0x7e>
 800454c:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004554:	e005      	b.n	8004562 <HAL_RCC_OscConfig+0x8a>
 8004556:	4b86      	ldr	r3, [pc, #536]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004562:	4293      	cmp	r3, r2
 8004564:	d223      	bcs.n	80045ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fd80 	bl	8005070 <RCC_SetFlashLatencyFromMSIRange>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e3ce      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800457a:	4b7d      	ldr	r3, [pc, #500]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a7c      	ldr	r2, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	4b7a      	ldr	r3, [pc, #488]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4977      	ldr	r1, [pc, #476]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004598:	4b75      	ldr	r3, [pc, #468]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	4972      	ldr	r1, [pc, #456]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
 80045ac:	e025      	b.n	80045fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ae:	4b70      	ldr	r3, [pc, #448]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6f      	ldr	r2, [pc, #444]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80045b4:	f043 0308 	orr.w	r3, r3, #8
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	4b6d      	ldr	r3, [pc, #436]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	496a      	ldr	r1, [pc, #424]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045cc:	4b68      	ldr	r3, [pc, #416]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	4965      	ldr	r1, [pc, #404]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd40 	bl	8005070 <RCC_SetFlashLatencyFromMSIRange>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e38e      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045fa:	f000 fc75 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 80045fe:	4602      	mov	r2, r0
 8004600:	4b5b      	ldr	r3, [pc, #364]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	495a      	ldr	r1, [pc, #360]	; (8004774 <HAL_RCC_OscConfig+0x29c>)
 800460c:	5ccb      	ldrb	r3, [r1, r3]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	fa22 f303 	lsr.w	r3, r2, r3
 8004616:	4a58      	ldr	r2, [pc, #352]	; (8004778 <HAL_RCC_OscConfig+0x2a0>)
 8004618:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800461a:	4b58      	ldr	r3, [pc, #352]	; (800477c <HAL_RCC_OscConfig+0x2a4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fc fbb8 	bl	8000d94 <HAL_InitTick>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d052      	beq.n	80046d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	e372      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d032      	beq.n	80046a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800463a:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a4c      	ldr	r2, [pc, #304]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004646:	f7fc fbf5 	bl	8000e34 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464e:	f7fc fbf1 	bl	8000e34 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e35b      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800466c:	4b40      	ldr	r3, [pc, #256]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a3f      	ldr	r2, [pc, #252]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004672:	f043 0308 	orr.w	r3, r3, #8
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	493a      	ldr	r1, [pc, #232]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	4935      	ldr	r1, [pc, #212]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800469a:	4313      	orrs	r3, r2
 800469c:	604b      	str	r3, [r1, #4]
 800469e:	e01a      	b.n	80046d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046a0:	4b33      	ldr	r3, [pc, #204]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a32      	ldr	r2, [pc, #200]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046ac:	f7fc fbc2 	bl	8000e34 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046b4:	f7fc fbbe 	bl	8000e34 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e328      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x1dc>
 80046d2:	e000      	b.n	80046d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d073      	beq.n	80047ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_OscConfig+0x21c>
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d10e      	bne.n	800470c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d10b      	bne.n	800470c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d063      	beq.n	80047c8 <HAL_RCC_OscConfig+0x2f0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d15f      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e305      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d106      	bne.n	8004724 <HAL_RCC_OscConfig+0x24c>
 8004716:	4b16      	ldr	r3, [pc, #88]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a15      	ldr	r2, [pc, #84]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e01d      	b.n	8004760 <HAL_RCC_OscConfig+0x288>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x270>
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a0f      	ldr	r2, [pc, #60]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a0c      	ldr	r2, [pc, #48]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e00b      	b.n	8004760 <HAL_RCC_OscConfig+0x288>
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800474e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_RCC_OscConfig+0x298>)
 800475a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800475e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fc fb64 	bl	8000e34 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476e:	e010      	b.n	8004792 <HAL_RCC_OscConfig+0x2ba>
 8004770:	40021000 	.word	0x40021000
 8004774:	0800b09c 	.word	0x0800b09c
 8004778:	20000000 	.word	0x20000000
 800477c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fc fb58 	bl	8000e34 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e2c2      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004792:	4baf      	ldr	r3, [pc, #700]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x2a8>
 800479e:	e014      	b.n	80047ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fc fb48 	bl	8000e34 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fc fb44 	bl	8000e34 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e2ae      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ba:	4ba5      	ldr	r3, [pc, #660]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2d0>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d060      	beq.n	8004898 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_OscConfig+0x310>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d119      	bne.n	8004816 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d116      	bne.n	8004816 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e8:	4b99      	ldr	r3, [pc, #612]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_OscConfig+0x328>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e28b      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004800:	4b93      	ldr	r3, [pc, #588]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	4990      	ldr	r1, [pc, #576]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004814:	e040      	b.n	8004898 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d023      	beq.n	8004866 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481e:	4b8c      	ldr	r3, [pc, #560]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a8b      	ldr	r2, [pc, #556]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fc fb03 	bl	8000e34 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004832:	f7fc faff 	bl	8000e34 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e269      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004844:	4b82      	ldr	r3, [pc, #520]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b7f      	ldr	r3, [pc, #508]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	497c      	ldr	r1, [pc, #496]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	e018      	b.n	8004898 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004866:	4b7a      	ldr	r3, [pc, #488]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a79      	ldr	r2, [pc, #484]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 800486c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fc fadf 	bl	8000e34 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487a:	f7fc fadb 	bl	8000e34 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e245      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800488c:	4b70      	ldr	r3, [pc, #448]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d03c      	beq.n	800491e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01c      	beq.n	80048e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ac:	4b68      	ldr	r3, [pc, #416]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80048ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b2:	4a67      	ldr	r2, [pc, #412]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fc faba 	bl	8000e34 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c4:	f7fc fab6 	bl	8000e34 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e220      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d6:	4b5e      	ldr	r3, [pc, #376]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80048d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0ef      	beq.n	80048c4 <HAL_RCC_OscConfig+0x3ec>
 80048e4:	e01b      	b.n	800491e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e6:	4b5a      	ldr	r3, [pc, #360]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80048e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ec:	4a58      	ldr	r2, [pc, #352]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f6:	f7fc fa9d 	bl	8000e34 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fe:	f7fc fa99 	bl	8000e34 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e203      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004910:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ef      	bne.n	80048fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80a6 	beq.w	8004a78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492c:	2300      	movs	r3, #0
 800492e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004930:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10d      	bne.n	8004958 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	4b44      	ldr	r3, [pc, #272]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	4a43      	ldr	r2, [pc, #268]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004946:	6593      	str	r3, [r2, #88]	; 0x58
 8004948:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004958:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <HAL_RCC_OscConfig+0x57c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d118      	bne.n	8004996 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004964:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <HAL_RCC_OscConfig+0x57c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a3a      	ldr	r2, [pc, #232]	; (8004a54 <HAL_RCC_OscConfig+0x57c>)
 800496a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004970:	f7fc fa60 	bl	8000e34 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004978:	f7fc fa5c 	bl	8000e34 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e1c6      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498a:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <HAL_RCC_OscConfig+0x57c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d108      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4d8>
 800499e:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ae:	e024      	b.n	80049fa <HAL_RCC_OscConfig+0x522>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	d110      	bne.n	80049da <HAL_RCC_OscConfig+0x502>
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049c0:	f043 0304 	orr.w	r3, r3, #4
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c8:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	4a20      	ldr	r2, [pc, #128]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d8:	e00f      	b.n	80049fa <HAL_RCC_OscConfig+0x522>
 80049da:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e0:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 80049f2:	f023 0304 	bic.w	r3, r3, #4
 80049f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a02:	f7fc fa17 	bl	8000e34 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fc fa13 	bl	8000e34 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e17b      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_OscConfig+0x578>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0ed      	beq.n	8004a0a <HAL_RCC_OscConfig+0x532>
 8004a2e:	e01a      	b.n	8004a66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fc fa00 	bl	8000e34 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a36:	e00f      	b.n	8004a58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fc f9fc 	bl	8000e34 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d906      	bls.n	8004a58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e164      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
 8004a4e:	bf00      	nop
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a58:	4ba8      	ldr	r3, [pc, #672]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e8      	bne.n	8004a38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6c:	4ba3      	ldr	r3, [pc, #652]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	4aa2      	ldr	r2, [pc, #648]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d03c      	beq.n	8004afe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01c      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a8c:	4b9b      	ldr	r3, [pc, #620]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a92:	4a9a      	ldr	r2, [pc, #616]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fc f9ca 	bl	8000e34 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aa4:	f7fc f9c6 	bl	8000e34 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e130      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ab6:	4b91      	ldr	r3, [pc, #580]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ef      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x5cc>
 8004ac4:	e01b      	b.n	8004afe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ac6:	4b8d      	ldr	r3, [pc, #564]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004acc:	4a8b      	ldr	r2, [pc, #556]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad6:	f7fc f9ad 	bl	8000e34 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ade:	f7fc f9a9 	bl	8000e34 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e113      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004af0:	4b82      	ldr	r3, [pc, #520]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ef      	bne.n	8004ade <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8107 	beq.w	8004d16 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	f040 80cb 	bne.w	8004ca8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b12:	4b7a      	ldr	r3, [pc, #488]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0203 	and.w	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d12c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	3b01      	subs	r3, #1
 8004b32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d123      	bne.n	8004b80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d11b      	bne.n	8004b80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d113      	bne.n	8004b80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	3b01      	subs	r3, #1
 8004b66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d109      	bne.n	8004b80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d06d      	beq.n	8004c5c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d068      	beq.n	8004c58 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b86:	4b5d      	ldr	r3, [pc, #372]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b92:	4b5a      	ldr	r3, [pc, #360]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0ba      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ba2:	4b56      	ldr	r3, [pc, #344]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a55      	ldr	r2, [pc, #340]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004ba8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bae:	f7fc f941 	bl	8000e34 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fc f93d 	bl	8000e34 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0a7      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc8:	4b4c      	ldr	r3, [pc, #304]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bd4:	4b49      	ldr	r3, [pc, #292]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	4b49      	ldr	r3, [pc, #292]	; (8004d00 <HAL_RCC_OscConfig+0x828>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004be4:	3a01      	subs	r2, #1
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	4311      	orrs	r1, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bee:	0212      	lsls	r2, r2, #8
 8004bf0:	4311      	orrs	r1, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bf6:	0852      	lsrs	r2, r2, #1
 8004bf8:	3a01      	subs	r2, #1
 8004bfa:	0552      	lsls	r2, r2, #21
 8004bfc:	4311      	orrs	r1, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c02:	0852      	lsrs	r2, r2, #1
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0652      	lsls	r2, r2, #25
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c0e:	06d2      	lsls	r2, r2, #27
 8004c10:	430a      	orrs	r2, r1
 8004c12:	493a      	ldr	r1, [pc, #232]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c18:	4b38      	ldr	r3, [pc, #224]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a37      	ldr	r2, [pc, #220]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c24:	4b35      	ldr	r3, [pc, #212]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4a34      	ldr	r2, [pc, #208]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c30:	f7fc f900 	bl	8000e34 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fc f8fc 	bl	8000e34 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e066      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4a:	4b2c      	ldr	r3, [pc, #176]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c56:	e05e      	b.n	8004d16 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e05d      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c5c:	4b27      	ldr	r3, [pc, #156]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d156      	bne.n	8004d16 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c68:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a23      	ldr	r2, [pc, #140]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c74:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a20      	ldr	r2, [pc, #128]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c80:	f7fc f8d8 	bl	8000e34 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fc f8d4 	bl	8000e34 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e03e      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9a:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x7b0>
 8004ca6:	e036      	b.n	8004d16 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d031      	beq.n	8004d12 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <HAL_RCC_OscConfig+0x824>)
 8004cd8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fc f8a7 	bl	8000e34 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce8:	e00c      	b.n	8004d04 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cea:	f7fc f8a3 	bl	8000e34 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d905      	bls.n	8004d04 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e00d      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCC_OscConfig+0x848>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ec      	bne.n	8004cea <HAL_RCC_OscConfig+0x812>
 8004d10:	e001      	b.n	8004d16 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40021000 	.word	0x40021000

08004d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0c8      	b.n	8004eca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d38:	4b66      	ldr	r3, [pc, #408]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d910      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b63      	ldr	r3, [pc, #396]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 0207 	bic.w	r2, r3, #7
 8004d4e:	4961      	ldr	r1, [pc, #388]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b5f      	ldr	r3, [pc, #380]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0b0      	b.n	8004eca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d04c      	beq.n	8004e0e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d7c:	4b56      	ldr	r3, [pc, #344]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d121      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e09e      	b.n	8004eca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d107      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d94:	4b50      	ldr	r3, [pc, #320]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d115      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e092      	b.n	8004eca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dac:	4b4a      	ldr	r3, [pc, #296]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e086      	b.n	8004eca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dbc:	4b46      	ldr	r3, [pc, #280]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e07e      	b.n	8004eca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dcc:	4b42      	ldr	r3, [pc, #264]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 0203 	bic.w	r2, r3, #3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	493f      	ldr	r1, [pc, #252]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dde:	f7fc f829 	bl	8000e34 <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de6:	f7fc f825 	bl	8000e34 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e066      	b.n	8004eca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfc:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 020c 	and.w	r2, r3, #12
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d1eb      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	492c      	ldr	r1, [pc, #176]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d210      	bcs.n	8004e5c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 0207 	bic.w	r2, r3, #7
 8004e42:	4924      	ldr	r1, [pc, #144]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e036      	b.n	8004eca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4918      	ldr	r1, [pc, #96]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e86:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4910      	ldr	r1, [pc, #64]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e9a:	f000 f825 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	490c      	ldr	r1, [pc, #48]	; (8004edc <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	5ccb      	ldrb	r3, [r1, r3]
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004eba:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb ff68 	bl	8000d94 <HAL_InitTick>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40022000 	.word	0x40022000
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	0800b09c 	.word	0x0800b09c
 8004ee0:	20000000 	.word	0x20000000
 8004ee4:	20000004 	.word	0x20000004

08004ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b089      	sub	sp, #36	; 0x24
 8004eec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef6:	4b3e      	ldr	r3, [pc, #248]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f00:	4b3b      	ldr	r3, [pc, #236]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x34>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d121      	bne.n	8004f5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d11e      	bne.n	8004f5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f1c:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f28:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e005      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f38:	4b2d      	ldr	r3, [pc, #180]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f44:	4a2b      	ldr	r2, [pc, #172]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10d      	bne.n	8004f70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f58:	e00a      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d102      	bne.n	8004f66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e004      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f6c:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8004f6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d134      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f76:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_GetSysClockFreq+0xa6>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d003      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0xac>
 8004f8c:	e005      	b.n	8004f9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f90:	617b      	str	r3, [r7, #20]
      break;
 8004f92:	e005      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8004f96:	617b      	str	r3, [r7, #20]
      break;
 8004f98:	e002      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	617b      	str	r3, [r7, #20]
      break;
 8004f9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	3301      	adds	r3, #1
 8004fac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	fb02 f203 	mul.w	r2, r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	0e5b      	lsrs	r3, r3, #25
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	0800b0b4 	.word	0x0800b0b4
 8004ff8:	00f42400 	.word	0x00f42400
 8004ffc:	007a1200 	.word	0x007a1200

08005000 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <HAL_RCC_GetHCLKFreq+0x14>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000000 	.word	0x20000000

08005018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800501c:	f7ff fff0 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b06      	ldr	r3, [pc, #24]	; (800503c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4904      	ldr	r1, [pc, #16]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	0800b0ac 	.word	0x0800b0ac

08005044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005048:	f7ff ffda 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	0adb      	lsrs	r3, r3, #11
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4904      	ldr	r1, [pc, #16]	; (800506c <HAL_RCC_GetPCLK2Freq+0x28>)
 800505a:	5ccb      	ldrb	r3, [r1, r3]
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005064:	4618      	mov	r0, r3
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40021000 	.word	0x40021000
 800506c:	0800b0ac 	.word	0x0800b0ac

08005070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800507c:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005088:	f7ff f95a 	bl	8004340 <HAL_PWREx_GetVoltageRange>
 800508c:	6178      	str	r0, [r7, #20]
 800508e:	e014      	b.n	80050ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b25      	ldr	r3, [pc, #148]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	4a24      	ldr	r2, [pc, #144]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509a:	6593      	str	r3, [r2, #88]	; 0x58
 800509c:	4b22      	ldr	r3, [pc, #136]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050a8:	f7ff f94a 	bl	8004340 <HAL_PWREx_GetVoltageRange>
 80050ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050ae:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d10b      	bne.n	80050da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d919      	bls.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2ba0      	cmp	r3, #160	; 0xa0
 80050cc:	d902      	bls.n	80050d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ce:	2302      	movs	r3, #2
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e013      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050d4:	2301      	movs	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	e010      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b80      	cmp	r3, #128	; 0x80
 80050de:	d902      	bls.n	80050e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050e0:	2303      	movs	r3, #3
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	e00a      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b80      	cmp	r3, #128	; 0x80
 80050ea:	d102      	bne.n	80050f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ec:	2302      	movs	r3, #2
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e004      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b70      	cmp	r3, #112	; 0x70
 80050f6:	d101      	bne.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050f8:	2301      	movs	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 0207 	bic.w	r2, r3, #7
 8005104:	4909      	ldr	r1, [pc, #36]	; (800512c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	429a      	cmp	r2, r3
 8005118:	d001      	beq.n	800511e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40021000 	.word	0x40021000
 800512c:	40022000 	.word	0x40022000

08005130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005138:	2300      	movs	r3, #0
 800513a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800513c:	2300      	movs	r3, #0
 800513e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005148:	2b00      	cmp	r3, #0
 800514a:	d041      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005150:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005154:	d02a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005156:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800515a:	d824      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800515c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005160:	d008      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005166:	d81e      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800516c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005170:	d010      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005172:	e018      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005174:	4b86      	ldr	r3, [pc, #536]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4a85      	ldr	r2, [pc, #532]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800517e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005180:	e015      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fadd 	bl	8005748 <RCCEx_PLLSAI1_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005192:	e00c      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3320      	adds	r3, #32
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fbc6 	bl	800592c <RCCEx_PLLSAI2_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051a4:	e003      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	74fb      	strb	r3, [r7, #19]
      break;
 80051aa:	e000      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ae:	7cfb      	ldrb	r3, [r7, #19]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051b4:	4b76      	ldr	r3, [pc, #472]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c2:	4973      	ldr	r1, [pc, #460]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051ca:	e001      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d041      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051e4:	d02a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051ea:	d824      	bhi.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051f0:	d008      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051f6:	d81e      	bhi.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005200:	d010      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005202:	e018      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005204:	4b62      	ldr	r3, [pc, #392]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4a61      	ldr	r2, [pc, #388]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005210:	e015      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3304      	adds	r3, #4
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fa95 	bl	8005748 <RCCEx_PLLSAI1_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005222:	e00c      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3320      	adds	r3, #32
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fb7e 	bl	800592c <RCCEx_PLLSAI2_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005234:	e003      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	74fb      	strb	r3, [r7, #19]
      break;
 800523a:	e000      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800523c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005244:	4b52      	ldr	r3, [pc, #328]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005252:	494f      	ldr	r1, [pc, #316]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800525a:	e001      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80a0 	beq.w	80053ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800526e:	2300      	movs	r3, #0
 8005270:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005272:	4b47      	ldr	r3, [pc, #284]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005282:	2300      	movs	r3, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005288:	4b41      	ldr	r3, [pc, #260]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528c:	4a40      	ldr	r2, [pc, #256]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005292:	6593      	str	r3, [r2, #88]	; 0x58
 8005294:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a0:	2301      	movs	r3, #1
 80052a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a4:	4b3b      	ldr	r3, [pc, #236]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a3a      	ldr	r2, [pc, #232]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052b0:	f7fb fdc0 	bl	8000e34 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052b6:	e009      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b8:	f7fb fdbc 	bl	8000e34 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d902      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	74fb      	strb	r3, [r7, #19]
        break;
 80052ca:	e005      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052cc:	4b31      	ldr	r3, [pc, #196]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ef      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d15c      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052de:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01f      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d019      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005308:	4b21      	ldr	r3, [pc, #132]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530e:	4a20      	ldr	r2, [pc, #128]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005318:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005328:	4a19      	ldr	r2, [pc, #100]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d016      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533a:	f7fb fd7b 	bl	8000e34 <HAL_GetTick>
 800533e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005340:	e00b      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fb fd77 	bl	8000e34 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d902      	bls.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	74fb      	strb	r3, [r7, #19]
            break;
 8005358:	e006      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800535a:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ec      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800536e:	4b08      	ldr	r3, [pc, #32]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	4904      	ldr	r1, [pc, #16]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005386:	e009      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	74bb      	strb	r3, [r7, #18]
 800538c:	e006      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800538e:	bf00      	nop
 8005390:	40021000 	.word	0x40021000
 8005394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	7cfb      	ldrb	r3, [r7, #19]
 800539a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800539c:	7c7b      	ldrb	r3, [r7, #17]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a2:	4ba6      	ldr	r3, [pc, #664]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	4aa5      	ldr	r2, [pc, #660]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ba:	4ba0      	ldr	r3, [pc, #640]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f023 0203 	bic.w	r2, r3, #3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	499c      	ldr	r1, [pc, #624]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053dc:	4b97      	ldr	r3, [pc, #604]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 020c 	bic.w	r2, r3, #12
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	4994      	ldr	r1, [pc, #592]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053fe:	4b8f      	ldr	r3, [pc, #572]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	498b      	ldr	r1, [pc, #556]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005420:	4b86      	ldr	r3, [pc, #536]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	4983      	ldr	r1, [pc, #524]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005442:	4b7e      	ldr	r3, [pc, #504]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005450:	497a      	ldr	r1, [pc, #488]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005464:	4b75      	ldr	r3, [pc, #468]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005472:	4972      	ldr	r1, [pc, #456]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005486:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	4969      	ldr	r1, [pc, #420]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a8:	4b64      	ldr	r3, [pc, #400]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b6:	4961      	ldr	r1, [pc, #388]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ca:	4b5c      	ldr	r3, [pc, #368]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	4958      	ldr	r1, [pc, #352]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ec:	4b53      	ldr	r3, [pc, #332]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	4950      	ldr	r1, [pc, #320]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800550e:	4b4b      	ldr	r3, [pc, #300]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	4947      	ldr	r1, [pc, #284]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005530:	4b42      	ldr	r3, [pc, #264]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005536:	f023 0203 	bic.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553e:	493f      	ldr	r1, [pc, #252]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d028      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005552:	4b3a      	ldr	r3, [pc, #232]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	4936      	ldr	r1, [pc, #216]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005570:	d106      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005572:	4b32      	ldr	r3, [pc, #200]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	4a31      	ldr	r2, [pc, #196]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557c:	60d3      	str	r3, [r2, #12]
 800557e:	e011      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005588:	d10c      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	2101      	movs	r1, #1
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f8d9 	bl	8005748 <RCCEx_PLLSAI1_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800559a:	7cfb      	ldrb	r3, [r7, #19]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d028      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055be:	491f      	ldr	r1, [pc, #124]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ce:	d106      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4a19      	ldr	r2, [pc, #100]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055da:	60d3      	str	r3, [r2, #12]
 80055dc:	e011      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e6:	d10c      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3304      	adds	r3, #4
 80055ec:	2101      	movs	r1, #1
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f8aa 	bl	8005748 <RCCEx_PLLSAI1_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d02a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800562c:	d108      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562e:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	4a02      	ldr	r2, [pc, #8]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005638:	60d3      	str	r3, [r2, #12]
 800563a:	e013      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800563c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005648:	d10c      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	2101      	movs	r1, #1
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f879 	bl	8005748 <RCCEx_PLLSAI1_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005660:	7cfb      	ldrb	r3, [r7, #19]
 8005662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02f      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005670:	4b2c      	ldr	r3, [pc, #176]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567e:	4929      	ldr	r1, [pc, #164]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800568e:	d10d      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f856 	bl	8005748 <RCCEx_PLLSAI1_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d014      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	74bb      	strb	r3, [r7, #18]
 80056aa:	e011      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3320      	adds	r3, #32
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f935 	bl	800592c <RCCEx_PLLSAI2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00b      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056dc:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ec:	490d      	ldr	r1, [pc, #52]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005710:	4904      	ldr	r1, [pc, #16]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005718:	7cbb      	ldrb	r3, [r7, #18]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000

08005728 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005732:	f043 0304 	orr.w	r3, r3, #4
 8005736:	6013      	str	r3, [r2, #0]
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40021000 	.word	0x40021000

08005748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005756:	4b74      	ldr	r3, [pc, #464]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005762:	4b71      	ldr	r3, [pc, #452]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0203 	and.w	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d10d      	bne.n	800578e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
       ||
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800577a:	4b6b      	ldr	r3, [pc, #428]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
       ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d047      	beq.n	800581e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e044      	b.n	800581e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d018      	beq.n	80057ce <RCCEx_PLLSAI1_Config+0x86>
 800579c:	2b03      	cmp	r3, #3
 800579e:	d825      	bhi.n	80057ec <RCCEx_PLLSAI1_Config+0xa4>
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d002      	beq.n	80057aa <RCCEx_PLLSAI1_Config+0x62>
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d009      	beq.n	80057bc <RCCEx_PLLSAI1_Config+0x74>
 80057a8:	e020      	b.n	80057ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057aa:	4b5f      	ldr	r3, [pc, #380]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11d      	bne.n	80057f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ba:	e01a      	b.n	80057f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057bc:	4b5a      	ldr	r3, [pc, #360]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d116      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057cc:	e013      	b.n	80057f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ce:	4b56      	ldr	r3, [pc, #344]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10f      	bne.n	80057fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057da:	4b53      	ldr	r3, [pc, #332]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ea:	e006      	b.n	80057fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	e004      	b.n	80057fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10d      	bne.n	800581e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005802:	4b49      	ldr	r3, [pc, #292]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	3b01      	subs	r3, #1
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	430b      	orrs	r3, r1
 8005818:	4943      	ldr	r1, [pc, #268]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800581a:	4313      	orrs	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d17c      	bne.n	800591e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005824:	4b40      	ldr	r3, [pc, #256]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3f      	ldr	r2, [pc, #252]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800582a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800582e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005830:	f7fb fb00 	bl	8000e34 <HAL_GetTick>
 8005834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005836:	e009      	b.n	800584c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005838:	f7fb fafc 	bl	8000e34 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d902      	bls.n	800584c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	73fb      	strb	r3, [r7, #15]
        break;
 800584a:	e005      	b.n	8005858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800584c:	4b36      	ldr	r3, [pc, #216]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ef      	bne.n	8005838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d15f      	bne.n	800591e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d110      	bne.n	8005886 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005864:	4b30      	ldr	r3, [pc, #192]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800586c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6892      	ldr	r2, [r2, #8]
 8005874:	0211      	lsls	r1, r2, #8
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68d2      	ldr	r2, [r2, #12]
 800587a:	06d2      	lsls	r2, r2, #27
 800587c:	430a      	orrs	r2, r1
 800587e:	492a      	ldr	r1, [pc, #168]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005880:	4313      	orrs	r3, r2
 8005882:	610b      	str	r3, [r1, #16]
 8005884:	e027      	b.n	80058d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d112      	bne.n	80058b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800588c:	4b26      	ldr	r3, [pc, #152]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6892      	ldr	r2, [r2, #8]
 800589c:	0211      	lsls	r1, r2, #8
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6912      	ldr	r2, [r2, #16]
 80058a2:	0852      	lsrs	r2, r2, #1
 80058a4:	3a01      	subs	r2, #1
 80058a6:	0552      	lsls	r2, r2, #21
 80058a8:	430a      	orrs	r2, r1
 80058aa:	491f      	ldr	r1, [pc, #124]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	610b      	str	r3, [r1, #16]
 80058b0:	e011      	b.n	80058d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058b2:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6892      	ldr	r2, [r2, #8]
 80058c2:	0211      	lsls	r1, r2, #8
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6952      	ldr	r2, [r2, #20]
 80058c8:	0852      	lsrs	r2, r2, #1
 80058ca:	3a01      	subs	r2, #1
 80058cc:	0652      	lsls	r2, r2, #25
 80058ce:	430a      	orrs	r2, r1
 80058d0:	4915      	ldr	r1, [pc, #84]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a13      	ldr	r2, [pc, #76]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e2:	f7fb faa7 	bl	8000e34 <HAL_GetTick>
 80058e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058e8:	e009      	b.n	80058fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ea:	f7fb faa3 	bl	8000e34 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d902      	bls.n	80058fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	73fb      	strb	r3, [r7, #15]
          break;
 80058fc:	e005      	b.n	800590a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ef      	beq.n	80058ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	4903      	ldr	r1, [pc, #12]	; (8005928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000

0800592c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800593a:	4b69      	ldr	r3, [pc, #420]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d018      	beq.n	8005978 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005946:	4b66      	ldr	r3, [pc, #408]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f003 0203 	and.w	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d10d      	bne.n	8005972 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
       ||
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800595e:	4b60      	ldr	r3, [pc, #384]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
       ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d047      	beq.n	8005a02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	e044      	b.n	8005a02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d018      	beq.n	80059b2 <RCCEx_PLLSAI2_Config+0x86>
 8005980:	2b03      	cmp	r3, #3
 8005982:	d825      	bhi.n	80059d0 <RCCEx_PLLSAI2_Config+0xa4>
 8005984:	2b01      	cmp	r3, #1
 8005986:	d002      	beq.n	800598e <RCCEx_PLLSAI2_Config+0x62>
 8005988:	2b02      	cmp	r3, #2
 800598a:	d009      	beq.n	80059a0 <RCCEx_PLLSAI2_Config+0x74>
 800598c:	e020      	b.n	80059d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800598e:	4b54      	ldr	r3, [pc, #336]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d11d      	bne.n	80059d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800599e:	e01a      	b.n	80059d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a0:	4b4f      	ldr	r3, [pc, #316]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d116      	bne.n	80059da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b0:	e013      	b.n	80059da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059b2:	4b4b      	ldr	r3, [pc, #300]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10f      	bne.n	80059de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059be:	4b48      	ldr	r3, [pc, #288]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ce:	e006      	b.n	80059de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
      break;
 80059d4:	e004      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059d6:	bf00      	nop
 80059d8:	e002      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059de:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059e6:	4b3e      	ldr	r3, [pc, #248]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	430b      	orrs	r3, r1
 80059fc:	4938      	ldr	r1, [pc, #224]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d166      	bne.n	8005ad6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a08:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a34      	ldr	r2, [pc, #208]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a14:	f7fb fa0e 	bl	8000e34 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a1a:	e009      	b.n	8005a30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a1c:	f7fb fa0a 	bl	8000e34 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d902      	bls.n	8005a30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a2e:	e005      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a30:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ef      	bne.n	8005a1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d149      	bne.n	8005ad6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d110      	bne.n	8005a6a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a48:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6892      	ldr	r2, [r2, #8]
 8005a58:	0211      	lsls	r1, r2, #8
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68d2      	ldr	r2, [r2, #12]
 8005a5e:	06d2      	lsls	r2, r2, #27
 8005a60:	430a      	orrs	r2, r1
 8005a62:	491f      	ldr	r1, [pc, #124]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	614b      	str	r3, [r1, #20]
 8005a68:	e011      	b.n	8005a8e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6892      	ldr	r2, [r2, #8]
 8005a7a:	0211      	lsls	r1, r2, #8
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6912      	ldr	r2, [r2, #16]
 8005a80:	0852      	lsrs	r2, r2, #1
 8005a82:	3a01      	subs	r2, #1
 8005a84:	0652      	lsls	r2, r2, #25
 8005a86:	430a      	orrs	r2, r1
 8005a88:	4915      	ldr	r1, [pc, #84]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9a:	f7fb f9cb 	bl	8000e34 <HAL_GetTick>
 8005a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aa0:	e009      	b.n	8005ab6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aa2:	f7fb f9c7 	bl	8000e34 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d902      	bls.n	8005ab6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ab4:	e005      	b.n	8005ac2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ef      	beq.n	8005aa2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	4903      	ldr	r1, [pc, #12]	; (8005ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40021000 	.word	0x40021000

08005ae4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d06c      	beq.n	8005bd0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fb f830 	bl	8000b70 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	22ca      	movs	r2, #202	; 0xca
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2253      	movs	r2, #83	; 0x53
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f87c 	bl	8005c26 <RTC_EnterInitMode>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d14b      	bne.n	8005bd0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6899      	ldr	r1, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	68d2      	ldr	r2, [r2, #12]
 8005b72:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6919      	ldr	r1, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	041a      	lsls	r2, r3, #16
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f87f 	bl	8005c8c <RTC_ExitInitMode>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d11b      	bne.n	8005bd0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0203 	bic.w	r2, r2, #3
 8005ba6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bf0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005bf2:	f7fb f91f 	bl	8000e34 <HAL_GetTick>
 8005bf6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bf8:	e009      	b.n	8005c0e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bfa:	f7fb f91b 	bl	8000e34 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c08:	d901      	bls.n	8005c0e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e007      	b.n	8005c1e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ee      	beq.n	8005bfa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d120      	bne.n	8005c82 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295
 8005c48:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c4a:	f7fb f8f3 	bl	8000e34 <HAL_GetTick>
 8005c4e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c50:	e00d      	b.n	8005c6e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c52:	f7fb f8ef 	bl	8000e34 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c60:	d905      	bls.n	8005c6e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <RTC_EnterInitMode+0x5c>
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d1e7      	bne.n	8005c52 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <RTC_ExitInitMode+0x78>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <RTC_ExitInitMode+0x78>)
 8005c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ca4:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <RTC_ExitInitMode+0x78>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10c      	bne.n	8005cca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff ff92 	bl	8005bda <HAL_RTC_WaitForSynchro>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01e      	beq.n	8005cfa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	73fb      	strb	r3, [r7, #15]
 8005cc8:	e017      	b.n	8005cfa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <RTC_ExitInitMode+0x78>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <RTC_ExitInitMode+0x78>)
 8005cd0:	f023 0320 	bic.w	r3, r3, #32
 8005cd4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff ff7f 	bl	8005bda <HAL_RTC_WaitForSynchro>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <RTC_ExitInitMode+0x78>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <RTC_ExitInitMode+0x78>)
 8005cf4:	f043 0320 	orr.w	r3, r3, #32
 8005cf8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40002800 	.word	0x40002800

08005d08 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e07f      	b.n	8005e22 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	22ca      	movs	r2, #202	; 0xca
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2253      	movs	r2, #83	; 0x53
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d50:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005d62:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d120      	bne.n	8005db4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005d72:	f7fb f85f 	bl	8000e34 <HAL_GetTick>
 8005d76:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005d78:	e015      	b.n	8005da6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d7a:	f7fb f85b 	bl	8000e34 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d88:	d90d      	bls.n	8005da6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	22ff      	movs	r2, #255	; 0xff
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2203      	movs	r2, #3
 8005d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e03d      	b.n	8005e22 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0e2      	beq.n	8005d7a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 0107 	bic.w	r1, r3, #7
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005dd0:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dda:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005ddc:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4a12      	ldr	r2, [pc, #72]	; (8005e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005de6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005df6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	22ff      	movs	r2, #255	; 0xff
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40010400 	.word	0x40010400

08005e30 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005e3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e3e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00b      	beq.n	8005e66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005e5e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fa fb7d 	bl	8000560 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40010400 	.word	0x40010400

08005e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e040      	b.n	8005f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fa fe20 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2224      	movs	r2, #36	; 0x24
 8005ea8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f82c 	bl	8005f18 <UART_SetConfig>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e022      	b.n	8005f10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 faaa 	bl	800642c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fb31 	bl	8006570 <UART_CheckIdleState>
 8005f0e:	4603      	mov	r3, r0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f18:	b5b0      	push	{r4, r5, r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4bad      	ldr	r3, [pc, #692]	; (80061f8 <UART_SetConfig+0x2e0>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	69f9      	ldr	r1, [r7, #28]
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4aa2      	ldr	r2, [pc, #648]	; (80061fc <UART_SetConfig+0x2e4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a99      	ldr	r2, [pc, #612]	; (8006200 <UART_SetConfig+0x2e8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d121      	bne.n	8005fe2 <UART_SetConfig+0xca>
 8005f9e:	4b99      	ldr	r3, [pc, #612]	; (8006204 <UART_SetConfig+0x2ec>)
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d817      	bhi.n	8005fdc <UART_SetConfig+0xc4>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x9c>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fd1 	.word	0x08005fd1
 8005fbc:	08005fcb 	.word	0x08005fcb
 8005fc0:	08005fd7 	.word	0x08005fd7
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	76fb      	strb	r3, [r7, #27]
 8005fc8:	e0e7      	b.n	800619a <UART_SetConfig+0x282>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	76fb      	strb	r3, [r7, #27]
 8005fce:	e0e4      	b.n	800619a <UART_SetConfig+0x282>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	76fb      	strb	r3, [r7, #27]
 8005fd4:	e0e1      	b.n	800619a <UART_SetConfig+0x282>
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	76fb      	strb	r3, [r7, #27]
 8005fda:	e0de      	b.n	800619a <UART_SetConfig+0x282>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	76fb      	strb	r3, [r7, #27]
 8005fe0:	e0db      	b.n	800619a <UART_SetConfig+0x282>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a88      	ldr	r2, [pc, #544]	; (8006208 <UART_SetConfig+0x2f0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d132      	bne.n	8006052 <UART_SetConfig+0x13a>
 8005fec:	4b85      	ldr	r3, [pc, #532]	; (8006204 <UART_SetConfig+0x2ec>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f003 030c 	and.w	r3, r3, #12
 8005ff6:	2b0c      	cmp	r3, #12
 8005ff8:	d828      	bhi.n	800604c <UART_SetConfig+0x134>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <UART_SetConfig+0xe8>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006035 	.word	0x08006035
 8006004:	0800604d 	.word	0x0800604d
 8006008:	0800604d 	.word	0x0800604d
 800600c:	0800604d 	.word	0x0800604d
 8006010:	08006041 	.word	0x08006041
 8006014:	0800604d 	.word	0x0800604d
 8006018:	0800604d 	.word	0x0800604d
 800601c:	0800604d 	.word	0x0800604d
 8006020:	0800603b 	.word	0x0800603b
 8006024:	0800604d 	.word	0x0800604d
 8006028:	0800604d 	.word	0x0800604d
 800602c:	0800604d 	.word	0x0800604d
 8006030:	08006047 	.word	0x08006047
 8006034:	2300      	movs	r3, #0
 8006036:	76fb      	strb	r3, [r7, #27]
 8006038:	e0af      	b.n	800619a <UART_SetConfig+0x282>
 800603a:	2302      	movs	r3, #2
 800603c:	76fb      	strb	r3, [r7, #27]
 800603e:	e0ac      	b.n	800619a <UART_SetConfig+0x282>
 8006040:	2304      	movs	r3, #4
 8006042:	76fb      	strb	r3, [r7, #27]
 8006044:	e0a9      	b.n	800619a <UART_SetConfig+0x282>
 8006046:	2308      	movs	r3, #8
 8006048:	76fb      	strb	r3, [r7, #27]
 800604a:	e0a6      	b.n	800619a <UART_SetConfig+0x282>
 800604c:	2310      	movs	r3, #16
 800604e:	76fb      	strb	r3, [r7, #27]
 8006050:	e0a3      	b.n	800619a <UART_SetConfig+0x282>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a6d      	ldr	r2, [pc, #436]	; (800620c <UART_SetConfig+0x2f4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d120      	bne.n	800609e <UART_SetConfig+0x186>
 800605c:	4b69      	ldr	r3, [pc, #420]	; (8006204 <UART_SetConfig+0x2ec>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006066:	2b30      	cmp	r3, #48	; 0x30
 8006068:	d013      	beq.n	8006092 <UART_SetConfig+0x17a>
 800606a:	2b30      	cmp	r3, #48	; 0x30
 800606c:	d814      	bhi.n	8006098 <UART_SetConfig+0x180>
 800606e:	2b20      	cmp	r3, #32
 8006070:	d009      	beq.n	8006086 <UART_SetConfig+0x16e>
 8006072:	2b20      	cmp	r3, #32
 8006074:	d810      	bhi.n	8006098 <UART_SetConfig+0x180>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <UART_SetConfig+0x168>
 800607a:	2b10      	cmp	r3, #16
 800607c:	d006      	beq.n	800608c <UART_SetConfig+0x174>
 800607e:	e00b      	b.n	8006098 <UART_SetConfig+0x180>
 8006080:	2300      	movs	r3, #0
 8006082:	76fb      	strb	r3, [r7, #27]
 8006084:	e089      	b.n	800619a <UART_SetConfig+0x282>
 8006086:	2302      	movs	r3, #2
 8006088:	76fb      	strb	r3, [r7, #27]
 800608a:	e086      	b.n	800619a <UART_SetConfig+0x282>
 800608c:	2304      	movs	r3, #4
 800608e:	76fb      	strb	r3, [r7, #27]
 8006090:	e083      	b.n	800619a <UART_SetConfig+0x282>
 8006092:	2308      	movs	r3, #8
 8006094:	76fb      	strb	r3, [r7, #27]
 8006096:	e080      	b.n	800619a <UART_SetConfig+0x282>
 8006098:	2310      	movs	r3, #16
 800609a:	76fb      	strb	r3, [r7, #27]
 800609c:	e07d      	b.n	800619a <UART_SetConfig+0x282>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a5b      	ldr	r2, [pc, #364]	; (8006210 <UART_SetConfig+0x2f8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d120      	bne.n	80060ea <UART_SetConfig+0x1d2>
 80060a8:	4b56      	ldr	r3, [pc, #344]	; (8006204 <UART_SetConfig+0x2ec>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060b2:	2bc0      	cmp	r3, #192	; 0xc0
 80060b4:	d013      	beq.n	80060de <UART_SetConfig+0x1c6>
 80060b6:	2bc0      	cmp	r3, #192	; 0xc0
 80060b8:	d814      	bhi.n	80060e4 <UART_SetConfig+0x1cc>
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d009      	beq.n	80060d2 <UART_SetConfig+0x1ba>
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d810      	bhi.n	80060e4 <UART_SetConfig+0x1cc>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <UART_SetConfig+0x1b4>
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d006      	beq.n	80060d8 <UART_SetConfig+0x1c0>
 80060ca:	e00b      	b.n	80060e4 <UART_SetConfig+0x1cc>
 80060cc:	2300      	movs	r3, #0
 80060ce:	76fb      	strb	r3, [r7, #27]
 80060d0:	e063      	b.n	800619a <UART_SetConfig+0x282>
 80060d2:	2302      	movs	r3, #2
 80060d4:	76fb      	strb	r3, [r7, #27]
 80060d6:	e060      	b.n	800619a <UART_SetConfig+0x282>
 80060d8:	2304      	movs	r3, #4
 80060da:	76fb      	strb	r3, [r7, #27]
 80060dc:	e05d      	b.n	800619a <UART_SetConfig+0x282>
 80060de:	2308      	movs	r3, #8
 80060e0:	76fb      	strb	r3, [r7, #27]
 80060e2:	e05a      	b.n	800619a <UART_SetConfig+0x282>
 80060e4:	2310      	movs	r3, #16
 80060e6:	76fb      	strb	r3, [r7, #27]
 80060e8:	e057      	b.n	800619a <UART_SetConfig+0x282>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a49      	ldr	r2, [pc, #292]	; (8006214 <UART_SetConfig+0x2fc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d125      	bne.n	8006140 <UART_SetConfig+0x228>
 80060f4:	4b43      	ldr	r3, [pc, #268]	; (8006204 <UART_SetConfig+0x2ec>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006102:	d017      	beq.n	8006134 <UART_SetConfig+0x21c>
 8006104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006108:	d817      	bhi.n	800613a <UART_SetConfig+0x222>
 800610a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800610e:	d00b      	beq.n	8006128 <UART_SetConfig+0x210>
 8006110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006114:	d811      	bhi.n	800613a <UART_SetConfig+0x222>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <UART_SetConfig+0x20a>
 800611a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611e:	d006      	beq.n	800612e <UART_SetConfig+0x216>
 8006120:	e00b      	b.n	800613a <UART_SetConfig+0x222>
 8006122:	2300      	movs	r3, #0
 8006124:	76fb      	strb	r3, [r7, #27]
 8006126:	e038      	b.n	800619a <UART_SetConfig+0x282>
 8006128:	2302      	movs	r3, #2
 800612a:	76fb      	strb	r3, [r7, #27]
 800612c:	e035      	b.n	800619a <UART_SetConfig+0x282>
 800612e:	2304      	movs	r3, #4
 8006130:	76fb      	strb	r3, [r7, #27]
 8006132:	e032      	b.n	800619a <UART_SetConfig+0x282>
 8006134:	2308      	movs	r3, #8
 8006136:	76fb      	strb	r3, [r7, #27]
 8006138:	e02f      	b.n	800619a <UART_SetConfig+0x282>
 800613a:	2310      	movs	r3, #16
 800613c:	76fb      	strb	r3, [r7, #27]
 800613e:	e02c      	b.n	800619a <UART_SetConfig+0x282>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a2d      	ldr	r2, [pc, #180]	; (80061fc <UART_SetConfig+0x2e4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d125      	bne.n	8006196 <UART_SetConfig+0x27e>
 800614a:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <UART_SetConfig+0x2ec>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006158:	d017      	beq.n	800618a <UART_SetConfig+0x272>
 800615a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800615e:	d817      	bhi.n	8006190 <UART_SetConfig+0x278>
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006164:	d00b      	beq.n	800617e <UART_SetConfig+0x266>
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616a:	d811      	bhi.n	8006190 <UART_SetConfig+0x278>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <UART_SetConfig+0x260>
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d006      	beq.n	8006184 <UART_SetConfig+0x26c>
 8006176:	e00b      	b.n	8006190 <UART_SetConfig+0x278>
 8006178:	2300      	movs	r3, #0
 800617a:	76fb      	strb	r3, [r7, #27]
 800617c:	e00d      	b.n	800619a <UART_SetConfig+0x282>
 800617e:	2302      	movs	r3, #2
 8006180:	76fb      	strb	r3, [r7, #27]
 8006182:	e00a      	b.n	800619a <UART_SetConfig+0x282>
 8006184:	2304      	movs	r3, #4
 8006186:	76fb      	strb	r3, [r7, #27]
 8006188:	e007      	b.n	800619a <UART_SetConfig+0x282>
 800618a:	2308      	movs	r3, #8
 800618c:	76fb      	strb	r3, [r7, #27]
 800618e:	e004      	b.n	800619a <UART_SetConfig+0x282>
 8006190:	2310      	movs	r3, #16
 8006192:	76fb      	strb	r3, [r7, #27]
 8006194:	e001      	b.n	800619a <UART_SetConfig+0x282>
 8006196:	2310      	movs	r3, #16
 8006198:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a17      	ldr	r2, [pc, #92]	; (80061fc <UART_SetConfig+0x2e4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	f040 8087 	bne.w	80062b4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061a6:	7efb      	ldrb	r3, [r7, #27]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d837      	bhi.n	800621c <UART_SetConfig+0x304>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x29c>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	0800621d 	.word	0x0800621d
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	0800621d 	.word	0x0800621d
 80061c4:	080061e7 	.word	0x080061e7
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	0800621d 	.word	0x0800621d
 80061d0:	0800621d 	.word	0x0800621d
 80061d4:	080061ef 	.word	0x080061ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d8:	f7fe ff1e 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 80061dc:	6178      	str	r0, [r7, #20]
        break;
 80061de:	e022      	b.n	8006226 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e0:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <UART_SetConfig+0x300>)
 80061e2:	617b      	str	r3, [r7, #20]
        break;
 80061e4:	e01f      	b.n	8006226 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e6:	f7fe fe7f 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 80061ea:	6178      	str	r0, [r7, #20]
        break;
 80061ec:	e01b      	b.n	8006226 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f2:	617b      	str	r3, [r7, #20]
        break;
 80061f4:	e017      	b.n	8006226 <UART_SetConfig+0x30e>
 80061f6:	bf00      	nop
 80061f8:	efff69f3 	.word	0xefff69f3
 80061fc:	40008000 	.word	0x40008000
 8006200:	40013800 	.word	0x40013800
 8006204:	40021000 	.word	0x40021000
 8006208:	40004400 	.word	0x40004400
 800620c:	40004800 	.word	0x40004800
 8006210:	40004c00 	.word	0x40004c00
 8006214:	40005000 	.word	0x40005000
 8006218:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	76bb      	strb	r3, [r7, #26]
        break;
 8006224:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80f1 	beq.w	8006410 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	4413      	add	r3, r2
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	429a      	cmp	r2, r3
 800623c:	d305      	bcc.n	800624a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	429a      	cmp	r2, r3
 8006248:	d902      	bls.n	8006250 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	76bb      	strb	r3, [r7, #26]
 800624e:	e0df      	b.n	8006410 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4618      	mov	r0, r3
 8006254:	f04f 0100 	mov.w	r1, #0
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	020b      	lsls	r3, r1, #8
 8006262:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006266:	0202      	lsls	r2, r0, #8
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	6849      	ldr	r1, [r1, #4]
 800626c:	0849      	lsrs	r1, r1, #1
 800626e:	4608      	mov	r0, r1
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	1814      	adds	r4, r2, r0
 8006276:	eb43 0501 	adc.w	r5, r3, r1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	461a      	mov	r2, r3
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	4620      	mov	r0, r4
 8006286:	4629      	mov	r1, r5
 8006288:	f7f9 ffb0 	bl	80001ec <__aeabi_uldivmod>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4613      	mov	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800629a:	d308      	bcc.n	80062ae <UART_SetConfig+0x396>
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a2:	d204      	bcs.n	80062ae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	60da      	str	r2, [r3, #12]
 80062ac:	e0b0      	b.n	8006410 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	76bb      	strb	r3, [r7, #26]
 80062b2:	e0ad      	b.n	8006410 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	d15c      	bne.n	8006378 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80062be:	7efb      	ldrb	r3, [r7, #27]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d828      	bhi.n	8006316 <UART_SetConfig+0x3fe>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x3b4>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006317 	.word	0x08006317
 80062dc:	08006307 	.word	0x08006307
 80062e0:	08006317 	.word	0x08006317
 80062e4:	08006317 	.word	0x08006317
 80062e8:	08006317 	.word	0x08006317
 80062ec:	0800630f 	.word	0x0800630f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fe fe92 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 80062f4:	6178      	str	r0, [r7, #20]
        break;
 80062f6:	e013      	b.n	8006320 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f8:	f7fe fea4 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 80062fc:	6178      	str	r0, [r7, #20]
        break;
 80062fe:	e00f      	b.n	8006320 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006300:	4b49      	ldr	r3, [pc, #292]	; (8006428 <UART_SetConfig+0x510>)
 8006302:	617b      	str	r3, [r7, #20]
        break;
 8006304:	e00c      	b.n	8006320 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006306:	f7fe fdef 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 800630a:	6178      	str	r0, [r7, #20]
        break;
 800630c:	e008      	b.n	8006320 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006312:	617b      	str	r3, [r7, #20]
        break;
 8006314:	e004      	b.n	8006320 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	76bb      	strb	r3, [r7, #26]
        break;
 800631e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d074      	beq.n	8006410 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	005a      	lsls	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	fbb2 f3f3 	udiv	r3, r2, r3
 800633a:	b29b      	uxth	r3, r3
 800633c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b0f      	cmp	r3, #15
 8006342:	d916      	bls.n	8006372 <UART_SetConfig+0x45a>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800634a:	d212      	bcs.n	8006372 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f023 030f 	bic.w	r3, r3, #15
 8006354:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	b29b      	uxth	r3, r3
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	b29a      	uxth	r2, r3
 8006362:	89fb      	ldrh	r3, [r7, #14]
 8006364:	4313      	orrs	r3, r2
 8006366:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	89fa      	ldrh	r2, [r7, #14]
 800636e:	60da      	str	r2, [r3, #12]
 8006370:	e04e      	b.n	8006410 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	76bb      	strb	r3, [r7, #26]
 8006376:	e04b      	b.n	8006410 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006378:	7efb      	ldrb	r3, [r7, #27]
 800637a:	2b08      	cmp	r3, #8
 800637c:	d827      	bhi.n	80063ce <UART_SetConfig+0x4b6>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0x46c>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063cf 	.word	0x080063cf
 8006394:	080063bf 	.word	0x080063bf
 8006398:	080063cf 	.word	0x080063cf
 800639c:	080063cf 	.word	0x080063cf
 80063a0:	080063cf 	.word	0x080063cf
 80063a4:	080063c7 	.word	0x080063c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a8:	f7fe fe36 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 80063ac:	6178      	str	r0, [r7, #20]
        break;
 80063ae:	e013      	b.n	80063d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b0:	f7fe fe48 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 80063b4:	6178      	str	r0, [r7, #20]
        break;
 80063b6:	e00f      	b.n	80063d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <UART_SetConfig+0x510>)
 80063ba:	617b      	str	r3, [r7, #20]
        break;
 80063bc:	e00c      	b.n	80063d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063be:	f7fe fd93 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 80063c2:	6178      	str	r0, [r7, #20]
        break;
 80063c4:	e008      	b.n	80063d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ca:	617b      	str	r3, [r7, #20]
        break;
 80063cc:	e004      	b.n	80063d8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	76bb      	strb	r3, [r7, #26]
        break;
 80063d6:	bf00      	nop
    }

    if (pclk != 0U)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d018      	beq.n	8006410 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	085a      	lsrs	r2, r3, #1
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	441a      	add	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d908      	bls.n	800640c <UART_SetConfig+0x4f4>
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d204      	bcs.n	800640c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e001      	b.n	8006410 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800641c:	7ebb      	ldrb	r3, [r7, #26]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bdb0      	pop	{r4, r5, r7, pc}
 8006426:	bf00      	nop
 8006428:	00f42400 	.word	0x00f42400

0800642c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01a      	beq.n	8006542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800652a:	d10a      	bne.n	8006542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af02      	add	r7, sp, #8
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006580:	f7fa fc58 	bl	8000e34 <HAL_GetTick>
 8006584:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b08      	cmp	r3, #8
 8006592:	d10e      	bne.n	80065b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f82d 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e023      	b.n	80065fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d10e      	bne.n	80065de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f817 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e00d      	b.n	80065fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	603b      	str	r3, [r7, #0]
 800660e:	4613      	mov	r3, r2
 8006610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006612:	e05e      	b.n	80066d2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d05a      	beq.n	80066d2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661c:	f7fa fc0a 	bl	8000e34 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <UART_WaitOnFlagUntilTimeout+0x30>
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d11b      	bne.n	800666a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006640:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0201 	bic.w	r2, r2, #1
 8006650:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e043      	b.n	80066f2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d02c      	beq.n	80066d2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006686:	d124      	bne.n	80066d2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006690:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066a0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0201 	bic.w	r2, r2, #1
 80066b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e00f      	b.n	80066f2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69da      	ldr	r2, [r3, #28]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4013      	ands	r3, r2
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d091      	beq.n	8006614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066fa:	b084      	sub	sp, #16
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	f107 001c 	add.w	r0, r7, #28
 8006708:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f92b 	bl	8006974 <USB_CoreReset>
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
 8006734:	e005      	b.n	8006742 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800674e:	b004      	add	sp, #16
 8006750:	4770      	bx	lr

08006752 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f043 0201 	orr.w	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f023 0201 	bic.w	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	460b      	mov	r3, r1
 80067a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d106      	bne.n	80067c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	60da      	str	r2, [r3, #12]
 80067c0:	e00b      	b.n	80067da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60da      	str	r2, [r3, #12]
 80067d4:	e001      	b.n	80067da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e003      	b.n	80067e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80067da:	2032      	movs	r0, #50	; 0x32
 80067dc:	f7fa fb36 	bl	8000e4c <HAL_Delay>

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	019b      	lsls	r3, r3, #6
 80067fe:	f043 0220 	orr.w	r2, r3, #32
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a09      	ldr	r2, [pc, #36]	; (8006834 <USB_FlushTxFifo+0x48>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d901      	bls.n	8006818 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e006      	b.n	8006826 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b20      	cmp	r3, #32
 8006822:	d0f0      	beq.n	8006806 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	00030d40 	.word	0x00030d40

08006838 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2210      	movs	r2, #16
 8006848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <USB_FlushRxFifo+0x40>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e006      	b.n	800686a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b10      	cmp	r3, #16
 8006866:	d0f0      	beq.n	800684a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	00030d40 	.word	0x00030d40

0800687c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800687c:	b480      	push	{r7}
 800687e:	b089      	sub	sp, #36	; 0x24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	4611      	mov	r1, r2
 8006888:	461a      	mov	r2, r3
 800688a:	460b      	mov	r3, r1
 800688c:	71fb      	strb	r3, [r7, #7]
 800688e:	4613      	mov	r3, r2
 8006890:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800689a:	88bb      	ldrh	r3, [r7, #4]
 800689c:	3303      	adds	r3, #3
 800689e:	089b      	lsrs	r3, r3, #2
 80068a0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e00f      	b.n	80068c8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	031a      	lsls	r2, r3, #12
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b4:	461a      	mov	r2, r3
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6013      	str	r3, [r2, #0]
    pSrc++;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	3304      	adds	r3, #4
 80068c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	3301      	adds	r3, #1
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d3eb      	bcc.n	80068a8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3724      	adds	r7, #36	; 0x24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068de:	b480      	push	{r7}
 80068e0:	b089      	sub	sp, #36	; 0x24
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	4613      	mov	r3, r2
 80068ea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	3303      	adds	r3, #3
 80068f8:	089b      	lsrs	r3, r3, #2
 80068fa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	e00b      	b.n	800691a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	601a      	str	r2, [r3, #0]
    pDest++;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3304      	adds	r3, #4
 8006912:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	3301      	adds	r3, #1
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	429a      	cmp	r2, r3
 8006920:	d3ef      	bcc.n	8006902 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006922:	69fb      	ldr	r3, [r7, #28]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3724      	adds	r7, #36	; 0x24
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4013      	ands	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006948:	68fb      	ldr	r3, [r7, #12]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f003 0301 	and.w	r3, r3, #1
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a13      	ldr	r2, [pc, #76]	; (80069d8 <USB_CoreReset+0x64>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d901      	bls.n	8006992 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e01b      	b.n	80069ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	daf2      	bge.n	8006980 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f043 0201 	orr.w	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a09      	ldr	r2, [pc, #36]	; (80069d8 <USB_CoreReset+0x64>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d901      	bls.n	80069bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e006      	b.n	80069ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d0f0      	beq.n	80069aa <USB_CoreReset+0x36>

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	00030d40 	.word	0x00030d40

080069dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069dc:	b084      	sub	sp, #16
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	f107 001c 	add.w	r0, r7, #28
 80069ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069f8:	461a      	mov	r2, r3
 80069fa:	2300      	movs	r3, #0
 80069fc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a24:	f023 0304 	bic.w	r3, r3, #4
 8006a28:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006a2a:	2110      	movs	r1, #16
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff fedd 	bl	80067ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff ff00 	bl	8006838 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e015      	b.n	8006a6a <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a50:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	461a      	mov	r2, r3
 8006a60:	2300      	movs	r3, #0
 8006a62:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d3e5      	bcc.n	8006a3e <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006a72:	2101      	movs	r1, #1
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f893 	bl	8006ba0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006a7a:	20c8      	movs	r0, #200	; 0xc8
 8006a7c:	f7fa f9e6 	bl	8000e4c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8c:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2280      	movs	r2, #128	; 0x80
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a0d      	ldr	r2, [pc, #52]	; (8006acc <USB_HostInit+0xf0>)
 8006a98:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a0c      	ldr	r2, [pc, #48]	; (8006ad0 <USB_HostInit+0xf4>)
 8006a9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	f043 0210 	orr.w	r2, r3, #16
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <USB_HostInit+0xf8>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ac6:	b004      	add	sp, #16
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	00600080 	.word	0x00600080
 8006ad0:	004000e0 	.word	0x004000e0
 8006ad4:	a3200008 	.word	0xa3200008

08006ad8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d107      	bne.n	8006b2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b20:	461a      	mov	r2, r3
 8006b22:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b26:	6053      	str	r3, [r2, #4]
 8006b28:	e009      	b.n	8006b3e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d106      	bne.n	8006b3e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b36:	461a      	mov	r2, r3
 8006b38:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b3c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b7c:	2064      	movs	r0, #100	; 0x64
 8006b7e:	f7fa f965 	bl	8000e4c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006b90:	200a      	movs	r0, #10
 8006b92:	f7fa f95b 	bl	8000e4c <HAL_Delay>

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006bc4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <USB_DriveVbus+0x44>
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d106      	bne.n	8006be4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006be2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bee:	d109      	bne.n	8006c04 <USB_DriveVbus+0x64>
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c02:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	0c5b      	lsrs	r3, r3, #17
 8006c30:	f003 0303 	and.w	r3, r3, #3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	b29b      	uxth	r3, r3
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	4611      	mov	r1, r2
 8006c70:	461a      	mov	r2, r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	70fb      	strb	r3, [r7, #3]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70bb      	strb	r3, [r7, #2]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	461a      	mov	r2, r3
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295
 8006c98:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d867      	bhi.n	8006d72 <USB_HC_Init+0x10e>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <USB_HC_Init+0x44>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006d35 	.word	0x08006d35
 8006cb0:	08006cb9 	.word	0x08006cb9
 8006cb4:	08006cf7 	.word	0x08006cf7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f240 439d 	movw	r3, #1181	; 0x49d
 8006cca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ccc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da51      	bge.n	8006d78 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	78fa      	ldrb	r2, [r7, #3]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf2:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006cf4:	e040      	b.n	8006d78 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d02:	461a      	mov	r2, r3
 8006d04:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da34      	bge.n	8006d7c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	78fa      	ldrb	r2, [r7, #3]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d30:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d32:	e023      	b.n	8006d7c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d40:	461a      	mov	r2, r3
 8006d42:	f240 2325 	movw	r3, #549	; 0x225
 8006d46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	da17      	bge.n	8006d80 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d6a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d6e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d70:	e006      	b.n	8006d80 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	77fb      	strb	r3, [r7, #31]
      break;
 8006d76:	e004      	b.n	8006d82 <USB_HC_Init+0x11e>
      break;
 8006d78:	bf00      	nop
 8006d7a:	e002      	b.n	8006d82 <USB_HC_Init+0x11e>
      break;
 8006d7c:	bf00      	nop
 8006d7e:	e000      	b.n	8006d82 <USB_HC_Init+0x11e>
      break;
 8006d80:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	2101      	movs	r1, #1
 8006d92:	fa01 f303 	lsl.w	r3, r1, r3
 8006d96:	6939      	ldr	r1, [r7, #16]
 8006d98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006dac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	da03      	bge.n	8006dbc <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	e001      	b.n	8006dc0 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff ff26 	bl	8006c12 <USB_GetHostSpeed>
 8006dc6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006dc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d106      	bne.n	8006dde <USB_HC_Init+0x17a>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d003      	beq.n	8006dde <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e001      	b.n	8006de2 <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006de2:	787b      	ldrb	r3, [r7, #1]
 8006de4:	059b      	lsls	r3, r3, #22
 8006de6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006dea:	78bb      	ldrb	r3, [r7, #2]
 8006dec:	02db      	lsls	r3, r3, #11
 8006dee:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006df2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006df4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006df8:	049b      	lsls	r3, r3, #18
 8006dfa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006dfe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e06:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	0159      	lsls	r1, r3, #5
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	440b      	add	r3, r1
 8006e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e18:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e1e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006e20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d10f      	bne.n	8006e48 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e46:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop

08006e54 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e6c:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d018      	beq.n	8006ea8 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	8912      	ldrh	r2, [r2, #8]
 8006e7e:	4413      	add	r3, r2
 8006e80:	3b01      	subs	r3, #1
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	8912      	ldrh	r2, [r2, #8]
 8006e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e8a:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006e8c:	8bfa      	ldrh	r2, [r7, #30]
 8006e8e:	8a7b      	ldrh	r3, [r7, #18]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d90b      	bls.n	8006eac <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006e94:	8a7b      	ldrh	r3, [r7, #18]
 8006e96:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e98:	8bfb      	ldrh	r3, [r7, #30]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	8912      	ldrh	r2, [r2, #8]
 8006e9e:	fb02 f203 	mul.w	r2, r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	611a      	str	r2, [r3, #16]
 8006ea6:	e001      	b.n	8006eac <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	78db      	ldrb	r3, [r3, #3]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006eb4:	8bfb      	ldrh	r3, [r7, #30]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	8912      	ldrh	r2, [r2, #8]
 8006eba:	fb02 f203 	mul.w	r2, r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	611a      	str	r2, [r3, #16]
 8006ec2:	e003      	b.n	8006ecc <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695a      	ldr	r2, [r3, #20]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ed4:	8bfb      	ldrh	r3, [r7, #30]
 8006ed6:	04d9      	lsls	r1, r3, #19
 8006ed8:	4b59      	ldr	r3, [pc, #356]	; (8007040 <USB_HC_StartXfer+0x1ec>)
 8006eda:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006edc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	7a9b      	ldrb	r3, [r3, #10]
 8006ee2:	075b      	lsls	r3, r3, #29
 8006ee4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ee8:	6979      	ldr	r1, [r7, #20]
 8006eea:	0148      	lsls	r0, r1, #5
 8006eec:	69b9      	ldr	r1, [r7, #24]
 8006eee:	4401      	add	r1, r0
 8006ef0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ef4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ef6:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f2e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	7c7b      	ldrb	r3, [r7, #17]
 8006f40:	075b      	lsls	r3, r3, #29
 8006f42:	6979      	ldr	r1, [r7, #20]
 8006f44:	0148      	lsls	r0, r1, #5
 8006f46:	69b9      	ldr	r1, [r7, #24]
 8006f48:	4401      	add	r1, r0
 8006f4a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f68:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	78db      	ldrb	r3, [r3, #3]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	e003      	b.n	8006f84 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f82:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f8a:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	78db      	ldrb	r3, [r3, #3]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d147      	bne.n	8007036 <USB_HC_StartXfer+0x1e2>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d043      	beq.n	8007036 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	79db      	ldrb	r3, [r3, #7]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d830      	bhi.n	8007018 <USB_HC_StartXfer+0x1c4>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <USB_HC_StartXfer+0x168>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006ff1 	.word	0x08006ff1
 8006fc4:	08006fcd 	.word	0x08006fcd
 8006fc8:	08006ff1 	.word	0x08006ff1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	3303      	adds	r3, #3
 8006fd2:	089b      	lsrs	r3, r3, #2
 8006fd4:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006fd6:	89fa      	ldrh	r2, [r7, #14]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d91c      	bls.n	800701c <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f043 0220 	orr.w	r2, r3, #32
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fee:	e015      	b.n	800701c <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	3303      	adds	r3, #3
 8006ff6:	089b      	lsrs	r3, r3, #2
 8006ff8:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006ffa:	89fa      	ldrh	r2, [r7, #14]
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	b29b      	uxth	r3, r3
 8007006:	429a      	cmp	r2, r3
 8007008:	d90a      	bls.n	8007020 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	619a      	str	r2, [r3, #24]
        }
        break;
 8007016:	e003      	b.n	8007020 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <USB_HC_StartXfer+0x1ce>
        break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <USB_HC_StartXfer+0x1ce>
        break;
 8007020:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68d9      	ldr	r1, [r3, #12]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	785a      	ldrb	r2, [r3, #1]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	b29b      	uxth	r3, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff fc23 	bl	800687c <USB_WritePacket>
  }

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3720      	adds	r7, #32
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	1ff80000 	.word	0x1ff80000

08007044 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	b29b      	uxth	r3, r3
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007066:	b480      	push	{r7}
 8007068:	b089      	sub	sp, #36	; 0x24
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007076:	78fb      	ldrb	r3, [r7, #3]
 8007078:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	4413      	add	r3, r2
 8007086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	0c9b      	lsrs	r3, r3, #18
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	4413      	add	r3, r2
 800709c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	0fdb      	lsrs	r3, r3, #31
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d104      	bne.n	80070c0 <USB_HC_Halt+0x5a>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	e0e8      	b.n	8007292 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <USB_HC_Halt+0x66>
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d173      	bne.n	80071b4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f040 80cb 	bne.w	8007290 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d143      	bne.n	800718e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	4413      	add	r3, r2
 800710e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	440a      	add	r2, r1
 800711c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007124:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	4413      	add	r3, r2
 800712e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	440a      	add	r2, r1
 800713c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007144:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	440a      	add	r2, r1
 800715c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007160:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007164:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	3301      	adds	r3, #1
 800716a:	61fb      	str	r3, [r7, #28]
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007172:	d81d      	bhi.n	80071b0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	4413      	add	r3, r2
 800717c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800718a:	d0ec      	beq.n	8007166 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800718c:	e080      	b.n	8007290 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	4413      	add	r3, r2
 8007196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	0151      	lsls	r1, r2, #5
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	440a      	add	r2, r1
 80071a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ae:	e06f      	b.n	8007290 <USB_HC_Halt+0x22a>
            break;
 80071b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071b2:	e06d      	b.n	8007290 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d143      	bne.n	800726c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007202:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	440a      	add	r2, r1
 800721a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800721e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007222:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	4413      	add	r3, r2
 800722c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	440a      	add	r2, r1
 800723a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007242:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	3301      	adds	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007250:	d81d      	bhi.n	800728e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007268:	d0ec      	beq.n	8007244 <USB_HC_Halt+0x1de>
 800726a:	e011      	b.n	8007290 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	440a      	add	r2, r1
 8007282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	e000      	b.n	8007290 <USB_HC_Halt+0x22a>
          break;
 800728e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3724      	adds	r7, #36	; 0x24
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff fa60 	bl	8006774 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80072b4:	2110      	movs	r1, #16
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fa98 	bl	80067ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fabb 	bl	8006838 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072c2:	2300      	movs	r3, #0
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	e01f      	b.n	8007308 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072de:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072e6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072ee:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fc:	461a      	mov	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3301      	adds	r3, #1
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b0f      	cmp	r3, #15
 800730c:	d9dc      	bls.n	80072c8 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	e034      	b.n	800737e <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800732a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007332:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800733a:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007348:	461a      	mov	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	3301      	adds	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800735a:	d80c      	bhi.n	8007376 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800736e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007372:	d0ec      	beq.n	800734e <USB_StopHost+0xb0>
 8007374:	e000      	b.n	8007378 <USB_StopHost+0xda>
        break;
 8007376:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3301      	adds	r3, #1
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b0f      	cmp	r3, #15
 8007382:	d9c7      	bls.n	8007314 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800738a:	461a      	mov	r2, r3
 800738c:	f04f 33ff 	mov.w	r3, #4294967295
 8007390:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff f9d9 	bl	8006752 <USB_EnableGlobalInt>

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073aa:	b590      	push	{r4, r7, lr}
 80073ac:	b08b      	sub	sp, #44	; 0x2c
 80073ae:	af04      	add	r7, sp, #16
 80073b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 80073ba:	2300      	movs	r3, #0
 80073bc:	2201      	movs	r2, #1
 80073be:	2101      	movs	r1, #1
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 ffa0 	bl	8009306 <USBH_FindInterface>
 80073c6:	4603      	mov	r3, r0
 80073c8:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 80073ca:	7c7b      	ldrb	r3, [r7, #17]
 80073cc:	2bff      	cmp	r3, #255	; 0xff
 80073ce:	d101      	bne.n	80073d4 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073d0:	2302      	movs	r3, #2
 80073d2:	e1a5      	b.n	8007720 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80073da:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80073de:	f003 fd6d 	bl	800aebc <malloc>
 80073e2:	4603      	mov	r3, r0
 80073e4:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 80073f6:	2302      	movs	r3, #2
 80073f8:	e192      	b.n	8007720 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80073fa:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80073fe:	2100      	movs	r1, #0
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f003 fd6b 	bl	800aedc <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc0f 	bl	8007c2a <USBH_AUDIO_FindAudioStreamingIN>
 800740c:	4603      	mov	r3, r0
 800740e:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fcc9 	bl	8007da8 <USBH_AUDIO_FindAudioStreamingOUT>
 8007416:	4603      	mov	r3, r0
 8007418:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d104      	bne.n	800742a <USBH_AUDIO_InterfaceInit+0x80>
 8007420:	7abb      	ldrb	r3, [r7, #10]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d101      	bne.n	800742a <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007426:	2302      	movs	r3, #2
 8007428:	e17a      	b.n	8007720 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]
 800742e:	e0c6      	b.n	80075be <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8007430:	7dfa      	ldrb	r2, [r7, #23]
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	440b      	add	r3, r1
 800743e:	333e      	adds	r3, #62	; 0x3e
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d156      	bne.n	80074f4 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8007446:	7dfa      	ldrb	r2, [r7, #23]
 8007448:	68f9      	ldr	r1, [r7, #12]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	440b      	add	r3, r1
 8007454:	333a      	adds	r3, #58	; 0x3a
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	8aba      	ldrh	r2, [r7, #20]
 800745a:	429a      	cmp	r2, r3
 800745c:	d24a      	bcs.n	80074f4 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 800745e:	7dfa      	ldrb	r2, [r7, #23]
 8007460:	68f9      	ldr	r1, [r7, #12]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	440b      	add	r3, r1
 800746c:	333a      	adds	r3, #58	; 0x3a
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8007472:	7dfa      	ldrb	r2, [r7, #23]
 8007474:	68f9      	ldr	r1, [r7, #12]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	440b      	add	r3, r1
 8007480:	333d      	adds	r3, #61	; 0x3d
 8007482:	781a      	ldrb	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 800748a:	7dfa      	ldrb	r2, [r7, #23]
 800748c:	68f9      	ldr	r1, [r7, #12]
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	440b      	add	r3, r1
 8007498:	333c      	adds	r3, #60	; 0x3c
 800749a:	781a      	ldrb	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 80074a2:	7dfa      	ldrb	r2, [r7, #23]
 80074a4:	68f9      	ldr	r1, [r7, #12]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	440b      	add	r3, r1
 80074b0:	3338      	adds	r3, #56	; 0x38
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 80074ba:	7dfa      	ldrb	r2, [r7, #23]
 80074bc:	68f9      	ldr	r1, [r7, #12]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	440b      	add	r3, r1
 80074c8:	333a      	adds	r3, #58	; 0x3a
 80074ca:	881a      	ldrh	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80074d2:	7dfa      	ldrb	r2, [r7, #23]
 80074d4:	68f9      	ldr	r1, [r7, #12]
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	440b      	add	r3, r1
 80074e0:	3340      	adds	r3, #64	; 0x40
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 80074f4:	7dfa      	ldrb	r2, [r7, #23]
 80074f6:	68f9      	ldr	r1, [r7, #12]
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	440b      	add	r3, r1
 8007502:	330c      	adds	r3, #12
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d156      	bne.n	80075b8 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 800750a:	7dfa      	ldrb	r2, [r7, #23]
 800750c:	68f9      	ldr	r1, [r7, #12]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	440b      	add	r3, r1
 8007518:	3308      	adds	r3, #8
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	8a7a      	ldrh	r2, [r7, #18]
 800751e:	429a      	cmp	r2, r3
 8007520:	d24a      	bcs.n	80075b8 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8007522:	7dfa      	ldrb	r2, [r7, #23]
 8007524:	68f9      	ldr	r1, [r7, #12]
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	440b      	add	r3, r1
 8007530:	3308      	adds	r3, #8
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8007536:	7dfa      	ldrb	r2, [r7, #23]
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	440b      	add	r3, r1
 8007544:	330b      	adds	r3, #11
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 800754e:	7dfa      	ldrb	r2, [r7, #23]
 8007550:	68f9      	ldr	r1, [r7, #12]
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	440b      	add	r3, r1
 800755c:	330a      	adds	r3, #10
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8007566:	7dfa      	ldrb	r2, [r7, #23]
 8007568:	68f9      	ldr	r1, [r7, #12]
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	440b      	add	r3, r1
 8007574:	3306      	adds	r3, #6
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 800757e:	7dfa      	ldrb	r2, [r7, #23]
 8007580:	68f9      	ldr	r1, [r7, #12]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	440b      	add	r3, r1
 800758c:	3308      	adds	r3, #8
 800758e:	881a      	ldrh	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8007596:	7dfa      	ldrb	r2, [r7, #23]
 8007598:	68f9      	ldr	r1, [r7, #12]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	440b      	add	r3, r1
 80075a4:	3340      	adds	r3, #64	; 0x40
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	3301      	adds	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	f67f af35 	bls.w	8007430 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fcad 	bl	8007f26 <USBH_AUDIO_FindHIDControl>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fd25 	bl	800802a <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d12e      	bne.n	8007648 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 ff68 	bl	80084c0 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f003 f8d5 	bl	800a7a8 <USBH_AllocPipe>
 80075fe:	4603      	mov	r3, r0
 8007600:	461a      	mov	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8007626:	9202      	str	r2, [sp, #8]
 8007628:	2201      	movs	r2, #1
 800762a:	9201      	str	r2, [sp, #4]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	4623      	mov	r3, r4
 8007630:	4602      	mov	r2, r0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f003 f889 	bl	800a74a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800763e:	2200      	movs	r2, #0
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f003 fb8d 	bl	800ad62 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800764e:	2b01      	cmp	r3, #1
 8007650:	d12e      	bne.n	80076b0 <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 feac 	bl	80083b0 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f003 f8a1 	bl	800a7a8 <USBH_AllocPipe>
 8007666:	4603      	mov	r3, r0
 8007668:	461a      	mov	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 800768e:	9202      	str	r2, [sp, #8]
 8007690:	2201      	movs	r2, #1
 8007692:	9201      	str	r2, [sp, #4]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	4623      	mov	r3, r4
 8007698:	4602      	mov	r2, r0
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f003 f855 	bl	800a74a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80076a6:	2200      	movs	r2, #0
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f003 fb59 	bl	800ad62 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d12b      	bne.n	8007712 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f003 f870 	bl	800a7a8 <USBH_AllocPipe>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 80076f0:	9202      	str	r2, [sp, #8]
 80076f2:	2203      	movs	r2, #3
 80076f4:	9201      	str	r2, [sp, #4]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	4623      	mov	r3, r4
 80076fa:	4602      	mov	r2, r0
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f003 f824 	bl	800a74a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007708:	2200      	movs	r2, #0
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f003 fb28 	bl	800ad62 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	371c      	adds	r7, #28
 8007724:	46bd      	mov	sp, r7
 8007726:	bd90      	pop	{r4, r7, pc}

08007728 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007740:	2b00      	cmp	r3, #0
 8007742:	d011      	beq.n	8007768 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f003 f81b 	bl	800a788 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f003 f846 	bl	800a7ec <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800776e:	2b00      	cmp	r3, #0
 8007770:	d011      	beq.n	8007796 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f003 f804 	bl	800a788 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f003 f82f 	bl	800a7ec <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800779c:	2b00      	cmp	r3, #0
 800779e:	d011      	beq.n	80077c4 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f002 ffed 	bl	800a788 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f003 f818 	bl	800a7ec <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	4618      	mov	r0, r3
 80077da:	f003 fb77 	bl	800aecc <free>
    phost->pActiveClass->pData = 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077e4:	2200      	movs	r2, #0
 80077e6:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 800780a:	2301      	movs	r3, #1
 800780c:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	3b01      	subs	r3, #1
 8007814:	2b06      	cmp	r3, #6
 8007816:	f200 80be 	bhi.w	8007996 <USBH_AUDIO_ClassRequest+0x1a2>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USBH_AUDIO_ClassRequest+0x2c>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	0800783d 	.word	0x0800783d
 8007824:	0800797f 	.word	0x0800797f
 8007828:	0800783d 	.word	0x0800783d
 800782c:	0800787f 	.word	0x0800787f
 8007830:	080078f7 	.word	0x080078f7
 8007834:	0800793b 	.word	0x0800793b
 8007838:	080078e3 	.word	0x080078e3
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007842:	2b01      	cmp	r3, #1
 8007844:	d117      	bne.n	8007876 <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800784c:	2200      	movs	r2, #0
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f002 fb2a 	bl	8009eaa <USBH_SetInterface>
 8007856:	4603      	mov	r3, r0
 8007858:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2204      	movs	r2, #4
 8007864:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007866:	e098      	b.n	800799a <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b03      	cmp	r3, #3
 800786c:	f040 8095 	bne.w	800799a <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 8007870:	2302      	movs	r3, #2
 8007872:	75fb      	strb	r3, [r7, #23]
    break;
 8007874:	e091      	b.n	800799a <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2204      	movs	r2, #4
 800787a:	701a      	strb	r2, [r3, #0]
    break;
 800787c:	e08d      	b.n	800799a <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007884:	2b01      	cmp	r3, #1
 8007886:	d125      	bne.n	80078d4 <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800788e:	2200      	movs	r2, #0
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f002 fb09 	bl	8009eaa <USBH_SetInterface>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d112      	bne.n	80078c8 <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2207      	movs	r2, #7
 80078a6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	2206      	movs	r2, #6
 80078ac:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80078c6:	e06a      	b.n	800799e <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d167      	bne.n	800799e <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 80078ce:	2302      	movs	r3, #2
 80078d0:	75fb      	strb	r3, [r7, #23]
    break;
 80078d2:	e064      	b.n	800799e <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2207      	movs	r2, #7
 80078d8:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2206      	movs	r2, #6
 80078de:	705a      	strb	r2, [r3, #1]
    break;
 80078e0:	e05d      	b.n	800799e <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f938 	bl	8007b58 <USBH_AUDIO_HandleCSRequest>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d159      	bne.n	80079a2 <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2205      	movs	r2, #5
 80078f2:	701a      	strb	r2, [r3, #0]
    }
    break;
 80078f4:	e055      	b.n	80079a2 <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d118      	bne.n	8007932 <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 800790c:	461a      	mov	r2, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f002 facb 	bl	8009eaa <USBH_SetInterface>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d103      	bne.n	8007926 <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2206      	movs	r2, #6
 8007922:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007924:	e03f      	b.n	80079a6 <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d13c      	bne.n	80079a6 <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 800792c:	2302      	movs	r3, #2
 800792e:	75fb      	strb	r3, [r7, #23]
    break;
 8007930:	e039      	b.n	80079a6 <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2206      	movs	r2, #6
 8007936:	701a      	strb	r2, [r3, #0]
    break;
 8007938:	e035      	b.n	80079a6 <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007940:	2b01      	cmp	r3, #1
 8007942:	d118      	bne.n	8007976 <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8007950:	461a      	mov	r2, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f002 faa9 	bl	8009eaa <USBH_SetInterface>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d103      	bne.n	800796a <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2202      	movs	r2, #2
 8007966:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007968:	e01f      	b.n	80079aa <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b03      	cmp	r3, #3
 800796e:	d11c      	bne.n	80079aa <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 8007970:	2302      	movs	r3, #2
 8007972:	75fb      	strb	r3, [r7, #23]
    break;
 8007974:	e019      	b.n	80079aa <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2202      	movs	r2, #2
 800797a:	701a      	strb	r2, [r3, #0]
    break;
 800797c:	e015      	b.n	80079aa <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2201      	movs	r2, #1
 8007982:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800798a:	2102      	movs	r1, #2
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	4798      	blx	r3
    status  = USBH_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007994:	e00a      	b.n	80079ac <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 8007996:	bf00      	nop
 8007998:	e008      	b.n	80079ac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 800799a:	bf00      	nop
 800799c:	e006      	b.n	80079ac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 800799e:	bf00      	nop
 80079a0:	e004      	b.n	80079ac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079a2:	bf00      	nop
 80079a4:	e002      	b.n	80079ac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079a6:	bf00      	nop
 80079a8:	e000      	b.n	80079ac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079aa:	bf00      	nop
  }
  return status;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop

080079b8 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af02      	add	r7, sp, #8
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
 80079c4:	4613      	mov	r3, r2
 80079c6:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079d2:	2301      	movs	r3, #1
 80079d4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 80079d6:	2301      	movs	r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	3b04      	subs	r3, #4
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	f200 80aa 	bhi.w	8007b3a <USBH_AUDIO_CSRequest+0x182>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <USBH_AUDIO_CSRequest+0x34>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a49 	.word	0x08007a49
 80079f0:	08007a8f 	.word	0x08007a8f
 80079f4:	08007a01 	.word	0x08007a01
 80079f8:	08007aef 	.word	0x08007aef
 80079fc:	08007b35 	.word	0x08007b35
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8007a00:	78fa      	ldrb	r2, [r7, #3]
 8007a02:	2302      	movs	r3, #2
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	78bb      	ldrb	r3, [r7, #2]
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	2106      	movs	r1, #6
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fe94 	bl	800873c <USBH_AC_GetCur>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	f000 808f 	beq.w	8007b3e <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2204      	movs	r2, #4
 8007a24:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007a32:	3302      	adds	r3, #2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8007a3e:	897a      	ldrh	r2, [r7, #10]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 8007a46:	e07a      	b.n	8007b3e <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	78bb      	ldrb	r3, [r7, #2]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	2302      	movs	r3, #2
 8007a54:	2106      	movs	r1, #6
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 f835 	bl	8008ac6 <USBH_AC_GetMin>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d06d      	beq.n	8007b42 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2205      	movs	r2, #5
 8007a6a:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007a78:	3302      	adds	r3, #2
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	4313      	orrs	r3, r2
 8007a82:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8007a84:	897a      	ldrh	r2, [r7, #10]
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8007a8c:	e059      	b.n	8007b42 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	2302      	movs	r3, #2
 8007a92:	9301      	str	r3, [sp, #4]
 8007a94:	78bb      	ldrb	r3, [r7, #2]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	2302      	movs	r3, #2
 8007a9a:	2106      	movs	r1, #6
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fee4 	bl	800886a <USBH_AC_GetMax>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d04c      	beq.n	8007b46 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2207      	movs	r2, #7
 8007ab0:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007abe:	3302      	adds	r3, #2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8007aca:	897a      	ldrh	r2, [r7, #10]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d231      	bcs.n	8007b46 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8007ae8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8007aec:	e02b      	b.n	8007b46 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	2302      	movs	r3, #2
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	78bb      	ldrb	r3, [r7, #2]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	2302      	movs	r3, #2
 8007afa:	2106      	movs	r1, #6
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 ff4b 	bl	8008998 <USBH_AC_GetRes>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d01e      	beq.n	8007b4a <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2208      	movs	r2, #8
 8007b10:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007b1e:	3302      	adds	r3, #2
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	4313      	orrs	r3, r2
 8007b28:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8007b2a:	89ba      	ldrh	r2, [r7, #12]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 8007b32:	e00a      	b.n	8007b4a <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	75fb      	strb	r3, [r7, #23]
      break;
 8007b38:	e008      	b.n	8007b4c <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e006      	b.n	8007b4c <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e004      	b.n	8007b4c <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b42:	bf00      	nop
 8007b44:	e002      	b.n	8007b4c <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b46:	bf00      	nop
 8007b48:	e000      	b.n	8007b4c <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b4a:	bf00      	nop
  }
  return status;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop

08007b58 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8007b64:	2301      	movs	r3, #1
 8007b66:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff ff19 	bl	80079b8 <USBH_AUDIO_CSRequest>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d01c      	beq.n	8007bca <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d10c      	bne.n	8007bb4 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
 8007bb2:	e007      	b.n	8007bc4 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2206      	movs	r2, #6
 8007bc8:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d102      	bne.n	8007bfa <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 f8e7 	bl	8008dc8 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d102      	bne.n	8007c0a <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 f81d 	bl	8008c44 <USBH_AUDIO_InputStream>
  }

  return status;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007c32:	2302      	movs	r3, #2
 8007c34:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]
 8007c48:	e09e      	b.n	8007d88 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	211a      	movs	r1, #26
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	f040 8090 	bne.w	8007d82 <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	211a      	movs	r1, #26
 8007c68:	fb01 f303 	mul.w	r3, r1, r3
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007c72:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	f040 8084 	bne.w	8007d82 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	211a      	movs	r1, #26
 8007c80:	fb01 f303 	mul.w	r3, r1, r3
 8007c84:	4413      	add	r3, r2
 8007c86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b25b      	sxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da77      	bge.n	8007d82 <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	211a      	movs	r1, #26
 8007c98:	fb01 f303 	mul.w	r3, r1, r3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ca2:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d06c      	beq.n	8007d82 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	7bba      	ldrb	r2, [r7, #14]
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	201a      	movs	r0, #26
 8007cb0:	fb00 f303 	mul.w	r3, r0, r3
 8007cb4:	440b      	add	r3, r1
 8007cb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cba:	7818      	ldrb	r0, [r3, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	440b      	add	r3, r1
 8007cc8:	3306      	adds	r3, #6
 8007cca:	4602      	mov	r2, r0
 8007ccc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	7bba      	ldrb	r2, [r7, #14]
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	201a      	movs	r0, #26
 8007cd6:	fb00 f303 	mul.w	r3, r0, r3
 8007cda:	440b      	add	r3, r1
 8007cdc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ce0:	8818      	ldrh	r0, [r3, #0]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	440b      	add	r3, r1
 8007cee:	3308      	adds	r3, #8
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	7bba      	ldrb	r2, [r7, #14]
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	201a      	movs	r0, #26
 8007cfc:	fb00 f303 	mul.w	r3, r0, r3
 8007d00:	440b      	add	r3, r1
 8007d02:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007d06:	7818      	ldrb	r0, [r3, #0]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	440b      	add	r3, r1
 8007d14:	330b      	adds	r3, #11
 8007d16:	4602      	mov	r2, r0
 8007d18:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	7bba      	ldrb	r2, [r7, #14]
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	201a      	movs	r0, #26
 8007d22:	fb00 f303 	mul.w	r3, r0, r3
 8007d26:	440b      	add	r3, r1
 8007d28:	f203 3345 	addw	r3, r3, #837	; 0x345
 8007d2c:	7818      	ldrb	r0, [r3, #0]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	440b      	add	r3, r1
 8007d3a:	330a      	adds	r3, #10
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	211a      	movs	r1, #26
 8007d46:	fb01 f303 	mul.w	r3, r1, r3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	7bba      	ldrb	r2, [r7, #14]
 8007d54:	b298      	uxth	r0, r3
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	440b      	add	r3, r1
 8007d62:	330e      	adds	r3, #14
 8007d64:	4602      	mov	r2, r0
 8007d66:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8007d68:	7bba      	ldrb	r2, [r7, #14]
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	440b      	add	r3, r1
 8007d76:	330c      	adds	r3, #12
 8007d78:	2201      	movs	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	3301      	adds	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	2b09      	cmp	r3, #9
 8007d8c:	f67f af5d 	bls.w	8007c4a <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007d9a:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007db0:	2302      	movs	r3, #2
 8007db2:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
 8007dc6:	e09e      	b.n	8007f06 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	211a      	movs	r1, #26
 8007dce:	fb01 f303 	mul.w	r3, r1, r3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	f040 8090 	bne.w	8007f00 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	211a      	movs	r1, #26
 8007de6:	fb01 f303 	mul.w	r3, r1, r3
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007df0:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	f040 8084 	bne.w	8007f00 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	211a      	movs	r1, #26
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	4413      	add	r3, r2
 8007e04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	b25b      	sxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	db77      	blt.n	8007f00 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	211a      	movs	r1, #26
 8007e16:	fb01 f303 	mul.w	r3, r1, r3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e20:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d06c      	beq.n	8007f00 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	7bba      	ldrb	r2, [r7, #14]
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	201a      	movs	r0, #26
 8007e2e:	fb00 f303 	mul.w	r3, r0, r3
 8007e32:	440b      	add	r3, r1
 8007e34:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e38:	7818      	ldrb	r0, [r3, #0]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	440b      	add	r3, r1
 8007e46:	3338      	adds	r3, #56	; 0x38
 8007e48:	4602      	mov	r2, r0
 8007e4a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	7bba      	ldrb	r2, [r7, #14]
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	201a      	movs	r0, #26
 8007e54:	fb00 f303 	mul.w	r3, r0, r3
 8007e58:	440b      	add	r3, r1
 8007e5a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e5e:	8818      	ldrh	r0, [r3, #0]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	440b      	add	r3, r1
 8007e6c:	333a      	adds	r3, #58	; 0x3a
 8007e6e:	4602      	mov	r2, r0
 8007e70:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	7bba      	ldrb	r2, [r7, #14]
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	201a      	movs	r0, #26
 8007e7a:	fb00 f303 	mul.w	r3, r0, r3
 8007e7e:	440b      	add	r3, r1
 8007e80:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007e84:	7818      	ldrb	r0, [r3, #0]
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	440b      	add	r3, r1
 8007e92:	333d      	adds	r3, #61	; 0x3d
 8007e94:	4602      	mov	r2, r0
 8007e96:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	7bba      	ldrb	r2, [r7, #14]
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	201a      	movs	r0, #26
 8007ea0:	fb00 f303 	mul.w	r3, r0, r3
 8007ea4:	440b      	add	r3, r1
 8007ea6:	f203 3345 	addw	r3, r3, #837	; 0x345
 8007eaa:	7818      	ldrb	r0, [r3, #0]
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	440b      	add	r3, r1
 8007eb8:	333c      	adds	r3, #60	; 0x3c
 8007eba:	4602      	mov	r2, r0
 8007ebc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	211a      	movs	r1, #26
 8007ec4:	fb01 f303 	mul.w	r3, r1, r3
 8007ec8:	4413      	add	r3, r2
 8007eca:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	7bba      	ldrb	r2, [r7, #14]
 8007ed2:	b298      	uxth	r0, r3
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	440b      	add	r3, r1
 8007ee0:	3340      	adds	r3, #64	; 0x40
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8007ee6:	7bba      	ldrb	r2, [r7, #14]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	440b      	add	r3, r1
 8007ef4:	333e      	adds	r3, #62	; 0x3e
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	3301      	adds	r3, #1
 8007efe:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	3301      	adds	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b09      	cmp	r3, #9
 8007f0a:	f67f af5d 	bls.w	8007dc8 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007f18:	7b7b      	ldrb	r3, [r7, #13]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8007f3c:	23ff      	movs	r3, #255	; 0xff
 8007f3e:	2201      	movs	r2, #1
 8007f40:	2101      	movs	r1, #1
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 f9df 	bl	8009306 <USBH_FindInterface>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2bff      	cmp	r3, #255	; 0xff
 8007f50:	d002      	beq.n	8007f58 <USBH_AUDIO_FindHIDControl+0x32>
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b09      	cmp	r3, #9
 8007f56:	d901      	bls.n	8007f5c <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e062      	b.n	8008022 <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
 8007f60:	e05b      	b.n	800801a <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	211a      	movs	r1, #26
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d14d      	bne.n	8008014 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	211a      	movs	r1, #26
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f88:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d042      	beq.n	8008014 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	211a      	movs	r1, #26
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
 8007f98:	4413      	add	r3, r2
 8007f9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b25b      	sxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	da36      	bge.n	8008014 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	211a      	movs	r1, #26
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fb6:	781a      	ldrb	r2, [r3, #0]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	211a      	movs	r1, #26
 8007fc4:	fb01 f303 	mul.w	r3, r1, r3
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007fce:	881a      	ldrh	r2, [r3, #0]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	211a      	movs	r1, #26
 8007fdc:	fb01 f303 	mul.w	r3, r1, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007fe6:	781a      	ldrb	r2, [r3, #0]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	211a      	movs	r1, #26
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73bb      	strb	r3, [r7, #14]
        break;
 8008012:	e005      	b.n	8008020 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	3301      	adds	r3, #1
 8008018:	73fb      	strb	r3, [r7, #15]
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b09      	cmp	r3, #9
 800801e:	d9a0      	bls.n	8007f62 <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8008020:	7bbb      	ldrb	r3, [r7, #14]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b088      	sub	sp, #32
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	331c      	adds	r3, #28
 800804c:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 800804e:	2309      	movs	r3, #9
 8008050:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2200      	movs	r2, #0
 8008056:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2200      	movs	r2, #0
 800805e:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2200      	movs	r2, #0
 8008066:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2200      	movs	r2, #0
 800806e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8008072:	e03d      	b.n	80080f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008074:	f107 030c 	add.w	r3, r7, #12
 8008078:	4619      	mov	r1, r3
 800807a:	69b8      	ldr	r0, [r7, #24]
 800807c:	f002 f901 	bl	800a282 <USBH_GetNextDesc>
 8008080:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	2b04      	cmp	r3, #4
 8008088:	d002      	beq.n	8008090 <USBH_AUDIO_ParseCSDescriptors+0x66>
 800808a:	2b24      	cmp	r3, #36	; 0x24
 800808c:	d00f      	beq.n	80080ae <USBH_AUDIO_ParseCSDescriptors+0x84>
 800808e:	e02e      	b.n	80080ee <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	789b      	ldrb	r3, [r3, #2]
 8008094:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	78db      	ldrb	r3, [r3, #3]
 800809a:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 800809c:	7bfa      	ldrb	r2, [r7, #15]
 800809e:	7dbb      	ldrb	r3, [r7, #22]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 f975 	bl	8009392 <USBH_FindInterfaceIndex>
 80080a8:	4603      	mov	r3, r0
 80080aa:	75fb      	strb	r3, [r7, #23]
        break;
 80080ac:	e020      	b.n	80080f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80080b4:	7dba      	ldrb	r2, [r7, #22]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d81a      	bhi.n	80080f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	2bff      	cmp	r3, #255	; 0xff
 80080be:	d002      	beq.n	80080c6 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	d902      	bls.n	80080cc <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	77fb      	strb	r3, [r7, #31]
 80080ca:	e00f      	b.n	80080ec <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	211a      	movs	r1, #26
 80080d8:	fb01 f303 	mul.w	r3, r1, r3
 80080dc:	4413      	add	r3, r2
 80080de:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	4619      	mov	r1, r3
 80080e8:	f000 f80e 	bl	8008108 <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 80080ec:	e000      	b.n	80080f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 80080ee:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 80080f6:	89bb      	ldrh	r3, [r7, #12]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d8bb      	bhi.n	8008074 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 80080fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	460b      	mov	r3, r1
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d163      	bne.n	80081e4 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3302      	adds	r3, #2
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	3b01      	subs	r3, #1
 8008124:	2b05      	cmp	r3, #5
 8008126:	f200 8081 	bhi.w	800822c <ParseCSDescriptors+0x124>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <ParseCSDescriptors+0x28>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008149 	.word	0x08008149
 8008134:	08008151 	.word	0x08008151
 8008138:	0800816d 	.word	0x0800816d
 800813c:	080081c7 	.word	0x080081c7
 8008140:	080081a9 	.word	0x080081a9
 8008144:	0800818b 	.word	0x0800818b
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
        break;
 800814e:	e070      	b.n	8008232 <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	b291      	uxth	r1, r2
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	605a      	str	r2, [r3, #4]
        break;
 800816a:	e062      	b.n	8008232 <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	b291      	uxth	r1, r2
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	3304      	adds	r3, #4
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	605a      	str	r2, [r3, #4]
        break;
 8008188:	e053      	b.n	8008232 <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	b291      	uxth	r1, r2
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	3308      	adds	r3, #8
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	605a      	str	r2, [r3, #4]
        break;
 80081a6:	e044      	b.n	8008232 <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	b291      	uxth	r1, r2
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	3310      	adds	r3, #16
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	605a      	str	r2, [r3, #4]
        break;
 80081c4:	e035      	b.n	8008232 <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	b291      	uxth	r1, r2
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	330c      	adds	r3, #12
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	605a      	str	r2, [r3, #4]
        break;
 80081e2:	e026      	b.n	8008232 <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d122      	bne.n	8008230 <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3302      	adds	r3, #2
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d002      	beq.n	80081fa <ParseCSDescriptors+0xf2>
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d00a      	beq.n	800820e <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 80081f8:	e01b      	b.n	8008232 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	330a      	adds	r3, #10
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	4413      	add	r3, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	605a      	str	r2, [r3, #4]
          break;
 800820c:	e011      	b.n	8008232 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	b291      	uxth	r1, r2
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	330a      	adds	r3, #10
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	4413      	add	r3, r2
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	609a      	str	r2, [r3, #8]
          break;
 800822a:	e002      	b.n	8008232 <ParseCSDescriptors+0x12a>
        break;
 800822c:	bf00      	nop
 800822e:	e000      	b.n	8008232 <ParseCSDescriptors+0x12a>
      }
    }
 8008230:	bf00      	nop
  }

  return USBH_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]
 800825a:	e01b      	b.n	8008294 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	3322      	adds	r3, #34	; 0x22
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	791b      	ldrb	r3, [r3, #4]
 800826a:	78fa      	ldrb	r2, [r7, #3]
 800826c:	429a      	cmp	r2, r3
 800826e:	d10e      	bne.n	800828e <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	3322      	adds	r3, #34	; 0x22
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	78db      	ldrb	r3, [r3, #3]
 800827e:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	041a      	lsls	r2, r3, #16
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	4313      	orrs	r3, r2
 8008288:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800828c:	e089      	b.n	80083a2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	3301      	adds	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	b29a      	uxth	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 800829e:	429a      	cmp	r2, r3
 80082a0:	d3dc      	bcc.n	800825c <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
 80082a6:	e026      	b.n	80082f6 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	3326      	adds	r3, #38	; 0x26
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	795b      	ldrb	r3, [r3, #5]
 80082b6:	78fa      	ldrb	r2, [r7, #3]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d009      	beq.n	80082d0 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	3326      	adds	r3, #38	; 0x26
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80082ca:	78fa      	ldrb	r2, [r7, #3]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d10f      	bne.n	80082f0 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	3326      	adds	r3, #38	; 0x26
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	78db      	ldrb	r3, [r3, #3]
 80082de:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	041b      	lsls	r3, r3, #16
 80082e4:	461a      	mov	r2, r3
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082ee:	e058      	b.n	80083a2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	3301      	adds	r3, #1
 80082f4:	73fb      	strb	r3, [r7, #15]
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8008300:	429a      	cmp	r2, r3
 8008302:	d3d1      	bcc.n	80082a8 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
 8008308:	e01c      	b.n	8008344 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	332a      	adds	r3, #42	; 0x2a
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	795b      	ldrb	r3, [r3, #5]
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	429a      	cmp	r2, r3
 800831c:	d10f      	bne.n	800833e <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	332a      	adds	r3, #42	; 0x2a
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	78db      	ldrb	r3, [r3, #3]
 800832c:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	461a      	mov	r2, r3
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	4313      	orrs	r3, r2
 8008338:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800833c:	e031      	b.n	80083a2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	3301      	adds	r3, #1
 8008342:	73fb      	strb	r3, [r7, #15]
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	b29a      	uxth	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800834e:	429a      	cmp	r2, r3
 8008350:	d3db      	bcc.n	800830a <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]
 8008356:	e01c      	b.n	8008392 <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	331e      	adds	r3, #30
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	79db      	ldrb	r3, [r3, #7]
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	429a      	cmp	r2, r3
 800836a:	d10f      	bne.n	800838c <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	331e      	adds	r3, #30
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	78db      	ldrb	r3, [r3, #3]
 800837a:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	041b      	lsls	r3, r3, #16
 8008380:	461a      	mov	r2, r3
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	4313      	orrs	r3, r2
 8008386:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800838a:	e00a      	b.n	80083a2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	3301      	adds	r3, #1
 8008390:	73fb      	strb	r3, [r7, #15]
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	b29a      	uxth	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 800839c:	429a      	cmp	r2, r3
 800839e:	d3db      	bcc.n	8008358 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
	...

080083b0 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80083b8:	2300      	movs	r3, #0
 80083ba:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80083ca:	2300      	movs	r3, #0
 80083cc:	75bb      	strb	r3, [r7, #22]
 80083ce:	e02c      	b.n	800842a <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 80083d0:	7dbb      	ldrb	r3, [r7, #22]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	331a      	adds	r3, #26
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	791b      	ldrb	r3, [r3, #4]
 80083de:	4619      	mov	r1, r3
 80083e0:	7dbb      	ldrb	r3, [r7, #22]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	331a      	adds	r3, #26
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	795b      	ldrb	r3, [r3, #5]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	430b      	orrs	r3, r1
 80083f6:	f240 2201 	movw	r2, #513	; 0x201
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d112      	bne.n	8008424 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80083fe:	7dbb      	ldrb	r3, [r7, #22]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	331a      	adds	r3, #26
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	78db      	ldrb	r3, [r3, #3]
 800840c:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800840e:	7dbb      	ldrb	r3, [r7, #22]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	331a      	adds	r3, #26
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	79da      	ldrb	r2, [r3, #7]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8008422:	e009      	b.n	8008438 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8008424:	7dbb      	ldrb	r3, [r7, #22]
 8008426:	3301      	adds	r3, #1
 8008428:	75bb      	strb	r3, [r7, #22]
 800842a:	7dbb      	ldrb	r3, [r7, #22]
 800842c:	b29a      	uxth	r2, r3
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8008434:	429a      	cmp	r2, r3
 8008436:	d3cb      	bcc.n	80083d0 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff feff 	bl	8008240 <USBH_AUDIO_FindLinkedUnit>
 8008442:	60f8      	str	r0, [r7, #12]

    if (!value)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 800844a:	2302      	movs	r3, #2
 800844c:	e034      	b.n	80084b8 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	0a1b      	lsrs	r3, r3, #8
 8008456:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0c1b      	lsrs	r3, r3, #16
 800845c:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 800845e:	7abb      	ldrb	r3, [r7, #10]
 8008460:	3b03      	subs	r3, #3
 8008462:	2b03      	cmp	r3, #3
 8008464:	d81e      	bhi.n	80084a4 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	0800849b 	.word	0x0800849b
 8008470:	08008487 	.word	0x08008487
 8008474:	08008491 	.word	0x08008491
 8008478:	0800847d 	.word	0x0800847d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	7afa      	ldrb	r2, [r7, #11]
 8008480:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8008484:	e011      	b.n	80084aa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	7afa      	ldrb	r2, [r7, #11]
 800848a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 800848e:	e00c      	b.n	80084aa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	7afa      	ldrb	r2, [r7, #11]
 8008494:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8008498:	e007      	b.n	80084aa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	7afa      	ldrb	r2, [r7, #11]
 800849e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 80084a2:	e002      	b.n	80084aa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 80084a4:	2302      	movs	r3, #2
 80084a6:	757b      	strb	r3, [r7, #21]
        break;
 80084a8:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80084aa:	7abb      	ldrb	r3, [r7, #10]
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d002      	beq.n	80084b6 <USBH_AUDIO_BuildMicrophonePath+0x106>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1c0      	bne.n	8008438 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 80084b6:	7d7b      	ldrb	r3, [r7, #21]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80084da:	2300      	movs	r3, #0
 80084dc:	757b      	strb	r3, [r7, #21]
 80084de:	e02c      	b.n	800853a <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 80084e0:	7d7b      	ldrb	r3, [r7, #21]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	331a      	adds	r3, #26
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	791b      	ldrb	r3, [r3, #4]
 80084ee:	4619      	mov	r1, r3
 80084f0:	7d7b      	ldrb	r3, [r7, #21]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	331a      	adds	r3, #26
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	795b      	ldrb	r3, [r3, #5]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	b29b      	uxth	r3, r3
 8008504:	430b      	orrs	r3, r1
 8008506:	f240 1201 	movw	r2, #257	; 0x101
 800850a:	4293      	cmp	r3, r2
 800850c:	d112      	bne.n	8008534 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800850e:	7d7b      	ldrb	r3, [r7, #21]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	331a      	adds	r3, #26
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	78db      	ldrb	r3, [r3, #3]
 800851c:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800851e:	7d7b      	ldrb	r3, [r7, #21]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	331a      	adds	r3, #26
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	79da      	ldrb	r2, [r3, #7]
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8008532:	e009      	b.n	8008548 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8008534:	7d7b      	ldrb	r3, [r7, #21]
 8008536:	3301      	adds	r3, #1
 8008538:	757b      	strb	r3, [r7, #21]
 800853a:	7d7b      	ldrb	r3, [r7, #21]
 800853c:	b29a      	uxth	r2, r3
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8008544:	429a      	cmp	r2, r3
 8008546:	d3cb      	bcc.n	80084e0 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8008548:	2300      	movs	r3, #0
 800854a:	75bb      	strb	r3, [r7, #22]
 800854c:	e011      	b.n	8008572 <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 800854e:	7dbb      	ldrb	r3, [r7, #22]
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	3317      	adds	r3, #23
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	4413      	add	r3, r2
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	78db      	ldrb	r3, [r3, #3]
 800855c:	7dfa      	ldrb	r2, [r7, #23]
 800855e:	429a      	cmp	r2, r3
 8008560:	d104      	bne.n	800856c <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	7dba      	ldrb	r2, [r7, #22]
 8008566:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 800856a:	e009      	b.n	8008580 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800856c:	7dbb      	ldrb	r3, [r7, #22]
 800856e:	3301      	adds	r3, #1
 8008570:	75bb      	strb	r3, [r7, #22]
 8008572:	7dbb      	ldrb	r3, [r7, #22]
 8008574:	b29a      	uxth	r2, r3
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 800857c:	429a      	cmp	r2, r3
 800857e:	d3e6      	bcc.n	800854e <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff fe5b 	bl	8008240 <USBH_AUDIO_FindLinkedUnit>
 800858a:	60f8      	str	r0, [r7, #12]

    if (!value)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8008592:	2302      	movs	r3, #2
 8008594:	e053      	b.n	800863e <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	0a1b      	lsrs	r3, r3, #8
 800859e:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	0c1b      	lsrs	r3, r3, #16
 80085a4:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	3b03      	subs	r3, #3
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d83c      	bhi.n	8008628 <USBH_AUDIO_BuildHeadphonePath+0x168>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085e3 	.word	0x080085e3
 80085b8:	080085cf 	.word	0x080085cf
 80085bc:	080085d9 	.word	0x080085d9
 80085c0:	080085c5 	.word	0x080085c5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	7dba      	ldrb	r2, [r7, #22]
 80085c8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 80085cc:	e030      	b.n	8008630 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	7dba      	ldrb	r2, [r7, #22]
 80085d2:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 80085d6:	e02b      	b.n	8008630 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	7dba      	ldrb	r2, [r7, #22]
 80085dc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 80085e0:	e026      	b.n	8008630 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	7dba      	ldrb	r2, [r7, #22]
 80085e6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 80085ea:	7dbb      	ldrb	r3, [r7, #22]
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d818      	bhi.n	8008622 <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 80085f0:	7dbb      	ldrb	r3, [r7, #22]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	331e      	adds	r3, #30
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	791b      	ldrb	r3, [r3, #4]
 80085fe:	4619      	mov	r1, r3
 8008600:	7dbb      	ldrb	r3, [r7, #22]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	331e      	adds	r3, #30
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	795b      	ldrb	r3, [r3, #5]
 800860e:	b29b      	uxth	r3, r3
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	b29b      	uxth	r3, r3
 8008614:	430b      	orrs	r3, r1
 8008616:	f240 1203 	movw	r2, #259	; 0x103
 800861a:	4293      	cmp	r3, r2
 800861c:	d007      	beq.n	800862e <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	e00d      	b.n	800863e <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8008622:	2302      	movs	r3, #2
 8008624:	753b      	strb	r3, [r7, #20]
        }
        break;
 8008626:	e002      	b.n	800862e <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 8008628:	2302      	movs	r3, #2
 800862a:	753b      	strb	r3, [r7, #20]
        break;
 800862c:	e000      	b.n	8008630 <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 800862e:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	2b03      	cmp	r3, #3
 8008634:	d002      	beq.n	800863c <USBH_AUDIO_BuildHeadphonePath+0x17c>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1a1      	bne.n	8008580 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 800863c:	7d3b      	ldrb	r3, [r7, #20]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop

08008648 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	461a      	mov	r2, r3
 8008656:	4603      	mov	r3, r0
 8008658:	70fb      	strb	r3, [r7, #3]
 800865a:	460b      	mov	r3, r1
 800865c:	70bb      	strb	r3, [r7, #2]
 800865e:	4613      	mov	r3, r2
 8008660:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	82fb      	strh	r3, [r7, #22]
 8008666:	2300      	movs	r3, #0
 8008668:	82bb      	strh	r3, [r7, #20]
 800866a:	2300      	movs	r3, #0
 800866c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	2b02      	cmp	r3, #2
 8008680:	d002      	beq.n	8008688 <USBH_AC_SetCur+0x40>
 8008682:	2b06      	cmp	r3, #6
 8008684:	d018      	beq.n	80086b8 <USBH_AC_SetCur+0x70>
 8008686:	e035      	b.n	80086f4 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868c:	78db      	ldrb	r3, [r3, #3]
 800868e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008690:	2300      	movs	r3, #0
 8008692:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	b29b      	uxth	r3, r3
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	b29a      	uxth	r2, r3
 800869c:	7abb      	ldrb	r3, [r7, #10]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	4313      	orrs	r3, r2
 80086a2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80086a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086a8:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80086b2:	2301      	movs	r3, #1
 80086b4:	827b      	strh	r3, [r7, #18]
      break;
 80086b6:	e020      	b.n	80086fa <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80086b8:	78bb      	ldrb	r3, [r7, #2]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	3322      	adds	r3, #34	; 0x22
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	78db      	ldrb	r3, [r3, #3]
 80086c6:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80086c8:	2300      	movs	r3, #0
 80086ca:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	7abb      	ldrb	r3, [r7, #10]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80086dc:	787b      	ldrb	r3, [r7, #1]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	4313      	orrs	r3, r2
 80086ec:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80086ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086f0:	827b      	strh	r3, [r7, #18]
      break;
 80086f2:	e002      	b.n	80086fa <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 80086f4:	2302      	movs	r3, #2
 80086f6:	747b      	strb	r3, [r7, #17]
      break;
 80086f8:	bf00      	nop
  }

  if (ret != USBH_OK)
 80086fa:	7c7b      	ldrb	r3, [r7, #17]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8008700:	7c7b      	ldrb	r3, [r7, #17]
 8008702:	e017      	b.n	8008734 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2221      	movs	r2, #33	; 0x21
 8008708:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	8afa      	ldrh	r2, [r7, #22]
 8008714:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	8aba      	ldrh	r2, [r7, #20]
 800871a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8a7a      	ldrh	r2, [r7, #18]
 8008720:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008728:	8a7a      	ldrh	r2, [r7, #18]
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fdc3 	bl	800a2b8 <USBH_CtlReq>
 8008732:	4603      	mov	r3, r0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	461a      	mov	r2, r3
 800874a:	4603      	mov	r3, r0
 800874c:	70fb      	strb	r3, [r7, #3]
 800874e:	460b      	mov	r3, r1
 8008750:	70bb      	strb	r3, [r7, #2]
 8008752:	4613      	mov	r3, r2
 8008754:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	82fb      	strh	r3, [r7, #22]
 800875a:	2300      	movs	r3, #0
 800875c:	82bb      	strh	r3, [r7, #20]
 800875e:	2300      	movs	r3, #0
 8008760:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	743b      	strb	r3, [r7, #16]
 8008766:	2300      	movs	r3, #0
 8008768:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	2b06      	cmp	r3, #6
 800877c:	d01e      	beq.n	80087bc <USBH_AC_GetCur+0x80>
 800877e:	2b06      	cmp	r3, #6
 8008780:	dc4f      	bgt.n	8008822 <USBH_AC_GetCur+0xe6>
 8008782:	2b02      	cmp	r3, #2
 8008784:	d002      	beq.n	800878c <USBH_AC_GetCur+0x50>
 8008786:	2b03      	cmp	r3, #3
 8008788:	d036      	beq.n	80087f8 <USBH_AC_GetCur+0xbc>
 800878a:	e04a      	b.n	8008822 <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008790:	78db      	ldrb	r3, [r3, #3]
 8008792:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008798:	7c3b      	ldrb	r3, [r7, #16]
 800879a:	b29b      	uxth	r3, r3
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	b29a      	uxth	r2, r3
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	4313      	orrs	r3, r2
 80087a6:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80087a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ac:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80087b6:	2301      	movs	r3, #1
 80087b8:	827b      	strh	r3, [r7, #18]
      break;
 80087ba:	e035      	b.n	8008828 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80087bc:	78bb      	ldrb	r3, [r7, #2]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	3322      	adds	r3, #34	; 0x22
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	78db      	ldrb	r3, [r3, #3]
 80087ca:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80087d0:	7c3b      	ldrb	r3, [r7, #16]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	021b      	lsls	r3, r3, #8
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	4313      	orrs	r3, r2
 80087de:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80087e0:	787b      	ldrb	r3, [r7, #1]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	4313      	orrs	r3, r2
 80087f0:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80087f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087f4:	827b      	strh	r3, [r7, #18]
      break;
 80087f6:	e017      	b.n	8008828 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087fe:	78db      	ldrb	r3, [r3, #3]
 8008800:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008806:	7c3b      	ldrb	r3, [r7, #16]
 8008808:	b29b      	uxth	r3, r3
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	b29a      	uxth	r2, r3
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	b29b      	uxth	r3, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800881a:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800881c:	2301      	movs	r3, #1
 800881e:	827b      	strh	r3, [r7, #18]
      break;
 8008820:	e002      	b.n	8008828 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8008822:	2302      	movs	r3, #2
 8008824:	747b      	strb	r3, [r7, #17]
      break;
 8008826:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008828:	7c7b      	ldrb	r3, [r7, #17]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <USBH_AC_GetCur+0xf6>
  {
    return ret;
 800882e:	7c7b      	ldrb	r3, [r7, #17]
 8008830:	e017      	b.n	8008862 <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	22a1      	movs	r2, #161	; 0xa1
 8008836:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2281      	movs	r2, #129	; 0x81
 800883c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	8afa      	ldrh	r2, [r7, #22]
 8008842:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8aba      	ldrh	r2, [r7, #20]
 8008848:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	8a7a      	ldrh	r2, [r7, #18]
 800884e:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008856:	8a7a      	ldrh	r2, [r7, #18]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fd2c 	bl	800a2b8 <USBH_CtlReq>
 8008860:	4603      	mov	r3, r0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b086      	sub	sp, #24
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	4608      	mov	r0, r1
 8008874:	4611      	mov	r1, r2
 8008876:	461a      	mov	r2, r3
 8008878:	4603      	mov	r3, r0
 800887a:	70fb      	strb	r3, [r7, #3]
 800887c:	460b      	mov	r3, r1
 800887e:	70bb      	strb	r3, [r7, #2]
 8008880:	4613      	mov	r3, r2
 8008882:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	82fb      	strh	r3, [r7, #22]
 8008888:	2300      	movs	r3, #0
 800888a:	82bb      	strh	r3, [r7, #20]
 800888c:	2300      	movs	r3, #0
 800888e:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	743b      	strb	r3, [r7, #16]
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	2b06      	cmp	r3, #6
 80088aa:	d01e      	beq.n	80088ea <USBH_AC_GetMax+0x80>
 80088ac:	2b06      	cmp	r3, #6
 80088ae:	dc4f      	bgt.n	8008950 <USBH_AC_GetMax+0xe6>
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d002      	beq.n	80088ba <USBH_AC_GetMax+0x50>
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d036      	beq.n	8008926 <USBH_AC_GetMax+0xbc>
 80088b8:	e04a      	b.n	8008950 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088be:	78db      	ldrb	r3, [r3, #3]
 80088c0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80088c6:	7c3b      	ldrb	r3, [r7, #16]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	4313      	orrs	r3, r2
 80088d4:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80088d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088da:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80088e4:	2301      	movs	r3, #1
 80088e6:	827b      	strh	r3, [r7, #18]
      break;
 80088e8:	e035      	b.n	8008956 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80088ea:	78bb      	ldrb	r3, [r7, #2]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	3322      	adds	r3, #34	; 0x22
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	78db      	ldrb	r3, [r3, #3]
 80088f8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80088fe:	7c3b      	ldrb	r3, [r7, #16]
 8008900:	b29b      	uxth	r3, r3
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	b29a      	uxth	r2, r3
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	b29b      	uxth	r3, r3
 800890a:	4313      	orrs	r3, r2
 800890c:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800890e:	787b      	ldrb	r3, [r7, #1]
 8008910:	b29b      	uxth	r3, r3
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	b29a      	uxth	r2, r3
 8008916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800891a:	b29b      	uxth	r3, r3
 800891c:	4313      	orrs	r3, r2
 800891e:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008922:	827b      	strh	r3, [r7, #18]
      break;
 8008924:	e017      	b.n	8008956 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892c:	78db      	ldrb	r3, [r3, #3]
 800892e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8008934:	7c3b      	ldrb	r3, [r7, #16]
 8008936:	b29b      	uxth	r3, r3
 8008938:	021b      	lsls	r3, r3, #8
 800893a:	b29a      	uxth	r2, r3
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	b29b      	uxth	r3, r3
 8008940:	4313      	orrs	r3, r2
 8008942:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008948:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800894a:	2301      	movs	r3, #1
 800894c:	827b      	strh	r3, [r7, #18]
      break;
 800894e:	e002      	b.n	8008956 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8008950:	2302      	movs	r3, #2
 8008952:	747b      	strb	r3, [r7, #17]
      break;
 8008954:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008956:	7c7b      	ldrb	r3, [r7, #17]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 800895c:	7c7b      	ldrb	r3, [r7, #17]
 800895e:	e017      	b.n	8008990 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	22a1      	movs	r2, #161	; 0xa1
 8008964:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2283      	movs	r2, #131	; 0x83
 800896a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	8afa      	ldrh	r2, [r7, #22]
 8008970:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	8aba      	ldrh	r2, [r7, #20]
 8008976:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8a7a      	ldrh	r2, [r7, #18]
 800897c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008984:	8a7a      	ldrh	r2, [r7, #18]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 fc95 	bl	800a2b8 <USBH_CtlReq>
 800898e:	4603      	mov	r3, r0

}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	4608      	mov	r0, r1
 80089a2:	4611      	mov	r1, r2
 80089a4:	461a      	mov	r2, r3
 80089a6:	4603      	mov	r3, r0
 80089a8:	70fb      	strb	r3, [r7, #3]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70bb      	strb	r3, [r7, #2]
 80089ae:	4613      	mov	r3, r2
 80089b0:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	82fb      	strh	r3, [r7, #22]
 80089b6:	2300      	movs	r3, #0
 80089b8:	82bb      	strh	r3, [r7, #20]
 80089ba:	2300      	movs	r3, #0
 80089bc:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	743b      	strb	r3, [r7, #16]
 80089c2:	2300      	movs	r3, #0
 80089c4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	2b06      	cmp	r3, #6
 80089d8:	d01e      	beq.n	8008a18 <USBH_AC_GetRes+0x80>
 80089da:	2b06      	cmp	r3, #6
 80089dc:	dc4f      	bgt.n	8008a7e <USBH_AC_GetRes+0xe6>
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d002      	beq.n	80089e8 <USBH_AC_GetRes+0x50>
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d036      	beq.n	8008a54 <USBH_AC_GetRes+0xbc>
 80089e6:	e04a      	b.n	8008a7e <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ec:	78db      	ldrb	r3, [r3, #3]
 80089ee:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80089f4:	7c3b      	ldrb	r3, [r7, #16]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	4313      	orrs	r3, r2
 8008a02:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a08:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008a12:	2301      	movs	r3, #1
 8008a14:	827b      	strh	r3, [r7, #18]
      break;
 8008a16:	e035      	b.n	8008a84 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008a18:	78bb      	ldrb	r3, [r7, #2]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	3322      	adds	r3, #34	; 0x22
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	78db      	ldrb	r3, [r3, #3]
 8008a26:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008a2c:	7c3b      	ldrb	r3, [r7, #16]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008a3c:	787b      	ldrb	r3, [r7, #1]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a50:	827b      	strh	r3, [r7, #18]
      break;
 8008a52:	e017      	b.n	8008a84 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a5a:	78db      	ldrb	r3, [r3, #3]
 8008a5c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008a62:	7c3b      	ldrb	r3, [r7, #16]
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a76:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	827b      	strh	r3, [r7, #18]
      break;
 8008a7c:	e002      	b.n	8008a84 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	747b      	strb	r3, [r7, #17]
      break;
 8008a82:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008a84:	7c7b      	ldrb	r3, [r7, #17]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8008a8a:	7c7b      	ldrb	r3, [r7, #17]
 8008a8c:	e017      	b.n	8008abe <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	22a1      	movs	r2, #161	; 0xa1
 8008a92:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2284      	movs	r2, #132	; 0x84
 8008a98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	8afa      	ldrh	r2, [r7, #22]
 8008a9e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	8aba      	ldrh	r2, [r7, #20]
 8008aa4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	8a7a      	ldrh	r2, [r7, #18]
 8008aaa:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008ab2:	8a7a      	ldrh	r2, [r7, #18]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fbfe 	bl	800a2b8 <USBH_CtlReq>
 8008abc:	4603      	mov	r3, r0

}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b086      	sub	sp, #24
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	4608      	mov	r0, r1
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	70fb      	strb	r3, [r7, #3]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70bb      	strb	r3, [r7, #2]
 8008adc:	4613      	mov	r3, r2
 8008ade:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	82fb      	strh	r3, [r7, #22]
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	82bb      	strh	r3, [r7, #20]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	743b      	strb	r3, [r7, #16]
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	2b06      	cmp	r3, #6
 8008b06:	d01e      	beq.n	8008b46 <USBH_AC_GetMin+0x80>
 8008b08:	2b06      	cmp	r3, #6
 8008b0a:	dc4f      	bgt.n	8008bac <USBH_AC_GetMin+0xe6>
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d002      	beq.n	8008b16 <USBH_AC_GetMin+0x50>
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d036      	beq.n	8008b82 <USBH_AC_GetMin+0xbc>
 8008b14:	e04a      	b.n	8008bac <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1a:	78db      	ldrb	r3, [r3, #3]
 8008b1c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008b22:	7c3b      	ldrb	r3, [r7, #16]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	021b      	lsls	r3, r3, #8
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b36:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008b40:	2301      	movs	r3, #1
 8008b42:	827b      	strh	r3, [r7, #18]
      break;
 8008b44:	e035      	b.n	8008bb2 <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008b46:	78bb      	ldrb	r3, [r7, #2]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	3322      	adds	r3, #34	; 0x22
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	78db      	ldrb	r3, [r3, #3]
 8008b54:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008b5a:	7c3b      	ldrb	r3, [r7, #16]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	4313      	orrs	r3, r2
 8008b68:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008b6a:	787b      	ldrb	r3, [r7, #1]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b7e:	827b      	strh	r3, [r7, #18]
      break;
 8008b80:	e017      	b.n	8008bb2 <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b88:	78db      	ldrb	r3, [r3, #3]
 8008b8a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008b90:	7c3b      	ldrb	r3, [r7, #16]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ba4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	827b      	strh	r3, [r7, #18]
      break;
 8008baa:	e002      	b.n	8008bb2 <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	747b      	strb	r3, [r7, #17]
      break;
 8008bb0:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008bb2:	7c7b      	ldrb	r3, [r7, #17]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8008bb8:	7c7b      	ldrb	r3, [r7, #17]
 8008bba:	e017      	b.n	8008bec <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	22a1      	movs	r2, #161	; 0xa1
 8008bc0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2282      	movs	r2, #130	; 0x82
 8008bc6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	8afa      	ldrh	r2, [r7, #22]
 8008bcc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	8aba      	ldrh	r2, [r7, #20]
 8008bd2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	8a7a      	ldrh	r2, [r7, #18]
 8008bd8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008be0:	8a7a      	ldrh	r2, [r7, #18]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 fb67 	bl	800a2b8 <USBH_CtlReq>
 8008bea:	4603      	mov	r3, r0

}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8008c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c06:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2222      	movs	r2, #34	; 0x22
 8008c14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8afa      	ldrh	r2, [r7, #22]
 8008c20:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8aba      	ldrh	r2, [r7, #20]
 8008c26:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8a7a      	ldrh	r2, [r7, #18]
 8008c2c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8008c2e:	8a7b      	ldrh	r3, [r7, #18]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f001 fb3f 	bl	800a2b8 <USBH_CtlReq>
 8008c3a:	4603      	mov	r3, r0

}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	73fb      	strb	r3, [r7, #15]

  return status;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	78db      	ldrb	r3, [r3, #3]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	f200 8090 	bhi.w	8008da6 <USBH_AUDIO_Control+0x146>
 8008c86:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <USBH_AUDIO_Control+0x2c>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008ca1 	.word	0x08008ca1
 8008c90:	08008cf5 	.word	0x08008cf5
 8008c94:	08008da7 	.word	0x08008da7
 8008c98:	08008d73 	.word	0x08008d73
 8008c9c:	08008d8d 	.word	0x08008d8d
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d17d      	bne.n	8008daa <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fd01 	bl	800a6d6 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	70da      	strb	r2, [r3, #3]
      }
      break;
 8008cf2:	e05a      	b.n	8008daa <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f002 f806 	bl	800ad0e <USBH_LL_GetURBState>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d114      	bne.n	8008d32 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008d14:	3302      	adds	r3, #2
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8008d20:	89fb      	ldrh	r3, [r7, #14]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f97a 	bl	8009020 <USBH_AUDIO_SetControlAttribute>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d03d      	beq.n	8008dae <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d333      	bcc.n	8008db2 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 fcb3 	bl	800a6d6 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 8008d70:	e01f      	b.n	8008db2 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8008d72:	2101      	movs	r1, #1
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f953 	bl	8009020 <USBH_AUDIO_SetControlAttribute>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d11a      	bne.n	8008db6 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2201      	movs	r2, #1
 8008d84:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008d8a:	e014      	b.n	8008db6 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8008d8c:	2102      	movs	r1, #2
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f946 	bl	8009020 <USBH_AUDIO_SetControlAttribute>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10f      	bne.n	8008dba <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008da4:	e009      	b.n	8008dba <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8008da6:	bf00      	nop
 8008da8:	e008      	b.n	8008dbc <USBH_AUDIO_Control+0x15c>
      break;
 8008daa:	bf00      	nop
 8008dac:	e006      	b.n	8008dbc <USBH_AUDIO_Control+0x15c>
          break;
 8008dae:	bf00      	nop
 8008db0:	e004      	b.n	8008dbc <USBH_AUDIO_Control+0x15c>
      break;
 8008db2:	bf00      	nop
 8008db4:	e002      	b.n	8008dbc <USBH_AUDIO_Control+0x15c>
      break;
 8008db6:	bf00      	nop
 8008db8:	e000      	b.n	8008dbc <USBH_AUDIO_Control+0x15c>
      break;
 8008dba:	bf00      	nop
  }

  return status;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop

08008dc8 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	789b      	ldrb	r3, [r3, #2]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d85c      	bhi.n	8008ea2 <USBH_AUDIO_OutputStream+0xda>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBH_AUDIO_OutputStream+0x28>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e05 	.word	0x08008e05
 8008df4:	08008e61 	.word	0x08008e61
 8008df8:	08008e2b 	.word	0x08008e2b
 8008dfc:	08008e97 	.word	0x08008e97
 8008e00:	08008e91 	.word	0x08008e91
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	3317      	adds	r3, #23
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	4413      	add	r3, r2
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	79db      	ldrb	r3, [r3, #7]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d103      	bne.n	8008e22 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	2203      	movs	r2, #3
 8008e1e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e20:	e044      	b.n	8008eac <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	2202      	movs	r2, #2
 8008e26:	709a      	strb	r2, [r3, #2]
      break;
 8008e28:	e040      	b.n	8008eac <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	3317      	adds	r3, #23
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	4413      	add	r3, r2
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff fed3 	bl	8008bf4 <USBH_AUDIO_SetEndpointControls>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d126      	bne.n	8008ea6 <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2205      	movs	r2, #5
 8008e5c:	709a      	strb	r2, [r3, #2]
      }
      break;
 8008e5e:	e022      	b.n	8008ea6 <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8008e66:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff febe 	bl	8008bf4 <USBH_AUDIO_SetEndpointControls>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d113      	bne.n	8008eaa <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2205      	movs	r2, #5
 8008e86:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f96e 	bl	800916a <USBH_AUDIO_FrequencySet>
      }
      break;
 8008e8e:	e00c      	b.n	8008eaa <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e94:	e00a      	b.n	8008eac <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f80e 	bl	8008eb8 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea0:	e004      	b.n	8008eac <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 8008ea2:	bf00      	nop
 8008ea4:	e002      	b.n	8008eac <USBH_AUDIO_OutputStream+0xe4>
      break;
 8008ea6:	bf00      	nop
 8008ea8:	e000      	b.n	8008eac <USBH_AUDIO_OutputStream+0xe4>
      break;
 8008eaa:	bf00      	nop
  }

  return status;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop

08008eb8 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	791b      	ldrb	r3, [r3, #4]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d002      	beq.n	8008edc <USBH_AUDIO_Transmit+0x24>
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d033      	beq.n	8008f42 <USBH_AUDIO_Transmit+0x8a>
 8008eda:	e096      	b.n	800900a <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 8092 	bne.w	8009010 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2202      	movs	r2, #2
 8008efc:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fbfe 	bl	800a714 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008f1e:	461a      	mov	r2, r3
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008f40:	e066      	b.n	8009010 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 fedf 	bl	800ad0e <USBH_LL_GetURBState>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d15e      	bne.n	8009014 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d352      	bcc.n	8009014 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d102      	bne.n	8008f8a <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fe6b 	bl	8008c60 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d82b      	bhi.n	8008ff2 <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 fbb0 	bl	800a714 <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8008fc0:	441a      	add	r2, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8008fe8:	441a      	add	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8008ff0:	e010      	b.n	8009014 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2205      	movs	r2, #5
 8009000:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f8bb 	bl	800917e <USBH_AUDIO_BufferEmptyCallback>
      break;
 8009008:	e004      	b.n	8009014 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 800900a:	2302      	movs	r3, #2
 800900c:	73fb      	strb	r3, [r7, #15]
      break;
 800900e:	e002      	b.n	8009016 <USBH_AUDIO_Transmit+0x15e>
      break;
 8009010:	bf00      	nop
 8009012:	e000      	b.n	8009016 <USBH_AUDIO_Transmit+0x15e>
      break;
 8009014:	bf00      	nop
  }
  return status;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 800902c:	2301      	movs	r3, #1
 800902e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d002      	beq.n	8009046 <USBH_AUDIO_SetControlAttribute+0x26>
 8009040:	2b02      	cmp	r3, #2
 8009042:	d00b      	beq.n	800905c <USBH_AUDIO_SetControlAttribute+0x3c>
 8009044:	e015      	b.n	8009072 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009052:	441a      	add	r2, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 800905a:	e00d      	b.n	8009078 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009068:	1ad2      	subs	r2, r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8009070:	e002      	b.n	8009078 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 8009072:	2302      	movs	r3, #2
 8009074:	73fb      	strb	r3, [r7, #15]
      break;
 8009076:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8009084:	429a      	cmp	r2, r3
 8009086:	d905      	bls.n	8009094 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d205      	bcs.n	80090b0 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f827 	bl	8009118 <AUDIO_SetVolume>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d01e      	beq.n	800910e <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d10e      	bne.n	80090f8 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
 80090f6:	e007      	b.n	8009108 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80090fe:	3b01      	subs	r3, #1
 8009100:	b2da      	uxtb	r2, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2206      	movs	r2, #6
 800910c:	705a      	strb	r2, [r3, #1]
  }


  return status;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af02      	add	r7, sp, #8
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	461a      	mov	r2, r3
 8009126:	4603      	mov	r3, r0
 8009128:	70fb      	strb	r3, [r7, #3]
 800912a:	460b      	mov	r3, r1
 800912c:	70bb      	strb	r3, [r7, #2]
 800912e:	4613      	mov	r3, r2
 8009130:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8009132:	2301      	movs	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	883a      	ldrh	r2, [r7, #0]
 8009144:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	2302      	movs	r3, #2
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	78bb      	ldrb	r3, [r7, #2]
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	2302      	movs	r3, #2
 8009154:	2106      	movs	r1, #6
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff fa76 	bl	8008648 <USBH_AC_SetCur>
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	4613      	mov	r3, r2
 800919e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80091a6:	2302      	movs	r3, #2
 80091a8:	e029      	b.n	80091fe <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	79fa      	ldrb	r2, [r7, #7]
 80091ae:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f81f 	bl	8009206 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f001 fc56 	bl	800aaa8 <USBH_LL_Init>

  return USBH_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	e00a      	b.n	800922e <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	2200      	movs	r2, #0
 8009226:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b0e      	cmp	r3, #14
 8009232:	d9f1      	bls.n	8009218 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	e009      	b.n	800924e <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009244:	2200      	movs	r2, #0
 8009246:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3301      	adds	r3, #1
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009254:	d3f1      	bcc.n	800923a <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2240      	movs	r2, #64	; 0x40
 800927a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d017      	beq.n	80092f4 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10f      	bne.n	80092ee <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80092d4:	1c59      	adds	r1, r3, #1
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	f503 7389 	add.w	r3, r3, #274	; 0x112
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]
 80092ec:	e004      	b.n	80092f8 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092ee:	2302      	movs	r3, #2
 80092f0:	73fb      	strb	r3, [r7, #15]
 80092f2:	e001      	b.n	80092f8 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092f4:	2302      	movs	r3, #2
 80092f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009306:	b480      	push	{r7}
 8009308:	b087      	sub	sp, #28
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	4608      	mov	r0, r1
 8009310:	4611      	mov	r1, r2
 8009312:	461a      	mov	r2, r3
 8009314:	4603      	mov	r3, r0
 8009316:	70fb      	strb	r3, [r7, #3]
 8009318:	460b      	mov	r3, r1
 800931a:	70bb      	strb	r3, [r7, #2]
 800931c:	4613      	mov	r3, r2
 800931e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009320:	2300      	movs	r3, #0
 8009322:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009324:	2300      	movs	r3, #0
 8009326:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800932e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009330:	e025      	b.n	800937e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	221a      	movs	r2, #26
 8009336:	fb02 f303 	mul.w	r3, r2, r3
 800933a:	3308      	adds	r3, #8
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4413      	add	r3, r2
 8009340:	3302      	adds	r3, #2
 8009342:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	795b      	ldrb	r3, [r3, #5]
 8009348:	78fa      	ldrb	r2, [r7, #3]
 800934a:	429a      	cmp	r2, r3
 800934c:	d002      	beq.n	8009354 <USBH_FindInterface+0x4e>
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	2bff      	cmp	r3, #255	; 0xff
 8009352:	d111      	bne.n	8009378 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009358:	78ba      	ldrb	r2, [r7, #2]
 800935a:	429a      	cmp	r2, r3
 800935c:	d002      	beq.n	8009364 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800935e:	78bb      	ldrb	r3, [r7, #2]
 8009360:	2bff      	cmp	r3, #255	; 0xff
 8009362:	d109      	bne.n	8009378 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009368:	787a      	ldrb	r2, [r7, #1]
 800936a:	429a      	cmp	r2, r3
 800936c:	d002      	beq.n	8009374 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800936e:	787b      	ldrb	r3, [r7, #1]
 8009370:	2bff      	cmp	r3, #255	; 0xff
 8009372:	d101      	bne.n	8009378 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	e006      	b.n	8009386 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	3301      	adds	r3, #1
 800937c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	2b09      	cmp	r3, #9
 8009382:	d9d6      	bls.n	8009332 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009384:	23ff      	movs	r3, #255	; 0xff
}
 8009386:	4618      	mov	r0, r3
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	460b      	mov	r3, r1
 800939c:	70fb      	strb	r3, [r7, #3]
 800939e:	4613      	mov	r3, r2
 80093a0:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80093b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093b2:	e017      	b.n	80093e4 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	221a      	movs	r2, #26
 80093b8:	fb02 f303 	mul.w	r3, r2, r3
 80093bc:	3308      	adds	r3, #8
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4413      	add	r3, r2
 80093c2:	3302      	adds	r3, #2
 80093c4:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	789b      	ldrb	r3, [r3, #2]
 80093ca:	78fa      	ldrb	r2, [r7, #3]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d106      	bne.n	80093de <USBH_FindInterfaceIndex+0x4c>
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	78db      	ldrb	r3, [r3, #3]
 80093d4:	78ba      	ldrb	r2, [r7, #2]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d101      	bne.n	80093de <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	e006      	b.n	80093ec <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	3301      	adds	r3, #1
 80093e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	2b09      	cmp	r3, #9
 80093e8:	d9e4      	bls.n	80093b4 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 80093ea:	23ff      	movs	r3, #255	; 0xff
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	371c      	adds	r7, #28
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 fb8d 	bl	800ab20 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009406:	2101      	movs	r1, #1
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 fc93 	bl	800ad34 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af04      	add	r7, sp, #16
 800941e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009420:	2302      	movs	r3, #2
 8009422:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b01      	cmp	r3, #1
 8009432:	d102      	bne.n	800943a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2203      	movs	r2, #3
 8009438:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b0b      	cmp	r3, #11
 8009442:	f200 81b5 	bhi.w	80097b0 <USBH_Process+0x398>
 8009446:	a201      	add	r2, pc, #4	; (adr r2, 800944c <USBH_Process+0x34>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	0800947d 	.word	0x0800947d
 8009450:	080094af 	.word	0x080094af
 8009454:	08009517 	.word	0x08009517
 8009458:	0800974b 	.word	0x0800974b
 800945c:	080097b1 	.word	0x080097b1
 8009460:	080095bb 	.word	0x080095bb
 8009464:	080096f1 	.word	0x080096f1
 8009468:	080095f1 	.word	0x080095f1
 800946c:	08009611 	.word	0x08009611
 8009470:	08009631 	.word	0x08009631
 8009474:	0800965f 	.word	0x0800965f
 8009478:	08009733 	.word	0x08009733
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 8195 	beq.w	80097b4 <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009490:	20c8      	movs	r0, #200	; 0xc8
 8009492:	f001 fc96 	bl	800adc2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fb9f 	bl	800abda <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094ac:	e182      	b.n	80097b4 <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d107      	bne.n	80094c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094c6:	e184      	b.n	80097d2 <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80094ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094d2:	d914      	bls.n	80094fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094da:	3301      	adds	r3, #1
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d903      	bls.n	80094f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	220d      	movs	r2, #13
 80094f2:	701a      	strb	r2, [r3, #0]
      break;
 80094f4:	e16d      	b.n	80097d2 <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	701a      	strb	r2, [r3, #0]
      break;
 80094fc:	e169      	b.n	80097d2 <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8009504:	f103 020a 	add.w	r2, r3, #10
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 800950e:	200a      	movs	r0, #10
 8009510:	f001 fc57 	bl	800adc2 <USBH_Delay>
      break;
 8009514:	e15d      	b.n	80097d2 <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009526:	2104      	movs	r1, #4
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800952c:	2064      	movs	r0, #100	; 0x64
 800952e:	f001 fc48 	bl	800adc2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 fb2a 	bl	800ab8c <USBH_LL_GetSpeed>
 8009538:	4603      	mov	r3, r0
 800953a:	461a      	mov	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2205      	movs	r2, #5
 8009546:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009548:	2100      	movs	r1, #0
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 f92c 	bl	800a7a8 <USBH_AllocPipe>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009558:	2180      	movs	r1, #128	; 0x80
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 f924 	bl	800a7a8 <USBH_AllocPipe>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	7919      	ldrb	r1, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800957c:	b292      	uxth	r2, r2
 800957e:	9202      	str	r2, [sp, #8]
 8009580:	2200      	movs	r2, #0
 8009582:	9201      	str	r2, [sp, #4]
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	4603      	mov	r3, r0
 8009588:	2280      	movs	r2, #128	; 0x80
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 f8dd 	bl	800a74a <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	7959      	ldrb	r1, [r3, #5]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80095a4:	b292      	uxth	r2, r2
 80095a6:	9202      	str	r2, [sp, #8]
 80095a8:	2200      	movs	r2, #0
 80095aa:	9201      	str	r2, [sp, #4]
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	4603      	mov	r3, r0
 80095b0:	2200      	movs	r2, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 f8c9 	bl	800a74a <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095b8:	e10b      	b.n	80097d2 <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f90e 	bl	80097dc <USBH_HandleEnum>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f040 80f5 	bne.w	80097b8 <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d103      	bne.n	80095e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2208      	movs	r2, #8
 80095e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80095e6:	e0e7      	b.n	80097b8 <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2207      	movs	r2, #7
 80095ec:	701a      	strb	r2, [r3, #0]
      break;
 80095ee:	e0e3      	b.n	80097b8 <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 80e0 	beq.w	80097bc <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009602:	2101      	movs	r1, #1
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2208      	movs	r2, #8
 800960c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800960e:	e0d5      	b.n	80097bc <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009616:	b29b      	uxth	r3, r3
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fc22 	bl	8009e64 <USBH_SetCfg>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	f040 80cc 	bne.w	80097c0 <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2209      	movs	r2, #9
 800962c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800962e:	e0c7      	b.n	80097c0 <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800963e:	2101      	movs	r1, #1
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fc59 	bl	8009ef8 <USBH_SetFeature>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	f040 80bb 	bne.w	80097c4 <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	220a      	movs	r2, #10
 8009652:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009654:	e0b6      	b.n	80097c4 <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	220a      	movs	r2, #10
 800965a:	701a      	strb	r2, [r3, #0]
      break;
 800965c:	e0b2      	b.n	80097c4 <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 80af 	beq.w	80097c8 <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
 8009676:	e018      	b.n	80096aa <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009678:	7bfa      	ldrb	r2, [r7, #15]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8009680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009684:	791a      	ldrb	r2, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800968c:	429a      	cmp	r2, r3
 800968e:	d109      	bne.n	80096a4 <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009690:	7bfa      	ldrb	r2, [r7, #15]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8009698:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 80096a2:	e005      	b.n	80096b0 <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
 80096a6:	3301      	adds	r3, #1
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d0e3      	beq.n	8009678 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	4798      	blx	r3
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d109      	bne.n	80096e0 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2206      	movs	r2, #6
 80096d0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80096d8:	2103      	movs	r1, #3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096de:	e073      	b.n	80097c8 <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220d      	movs	r2, #13
 80096e4:	701a      	strb	r2, [r3, #0]
      break;
 80096e6:	e06f      	b.n	80097c8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	220d      	movs	r2, #13
 80096ec:	701a      	strb	r2, [r3, #0]
      break;
 80096ee:	e06b      	b.n	80097c8 <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d017      	beq.n	800972a <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	220b      	movs	r2, #11
 8009716:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009718:	e058      	b.n	80097cc <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 800971a:	7bbb      	ldrb	r3, [r7, #14]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b02      	cmp	r3, #2
 8009720:	d154      	bne.n	80097cc <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	220d      	movs	r2, #13
 8009726:	701a      	strb	r2, [r3, #0]
      break;
 8009728:	e050      	b.n	80097cc <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	220d      	movs	r2, #13
 800972e:	701a      	strb	r2, [r3, #0]
      break;
 8009730:	e04c      	b.n	80097cc <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d049      	beq.n	80097d0 <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
      }
      break;
 8009748:	e042      	b.n	80097d0 <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff fd57 	bl	8009206 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009786:	2105      	movs	r1, #5
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b01      	cmp	r3, #1
 8009796:	d107      	bne.n	80097a8 <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff fe29 	bl	80093f8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097a6:	e014      	b.n	80097d2 <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 f9b9 	bl	800ab20 <USBH_LL_Start>
      break;
 80097ae:	e010      	b.n	80097d2 <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 80097b0:	bf00      	nop
 80097b2:	e00e      	b.n	80097d2 <USBH_Process+0x3ba>
      break;
 80097b4:	bf00      	nop
 80097b6:	e00c      	b.n	80097d2 <USBH_Process+0x3ba>
      break;
 80097b8:	bf00      	nop
 80097ba:	e00a      	b.n	80097d2 <USBH_Process+0x3ba>
    break;
 80097bc:	bf00      	nop
 80097be:	e008      	b.n	80097d2 <USBH_Process+0x3ba>
      break;
 80097c0:	bf00      	nop
 80097c2:	e006      	b.n	80097d2 <USBH_Process+0x3ba>
      break;
 80097c4:	bf00      	nop
 80097c6:	e004      	b.n	80097d2 <USBH_Process+0x3ba>
      break;
 80097c8:	bf00      	nop
 80097ca:	e002      	b.n	80097d2 <USBH_Process+0x3ba>
      break;
 80097cc:	bf00      	nop
 80097ce:	e000      	b.n	80097d2 <USBH_Process+0x3ba>
      break;
 80097d0:	bf00      	nop
  }
  return USBH_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af04      	add	r7, sp, #16
 80097e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80097e4:	2301      	movs	r3, #1
 80097e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80097e8:	2301      	movs	r3, #1
 80097ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	785b      	ldrb	r3, [r3, #1]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	f200 81c1 	bhi.w	8009b78 <USBH_HandleEnum+0x39c>
 80097f6:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <USBH_HandleEnum+0x20>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	0800981d 	.word	0x0800981d
 8009800:	080098db 	.word	0x080098db
 8009804:	08009945 	.word	0x08009945
 8009808:	080099d3 	.word	0x080099d3
 800980c:	08009a3d 	.word	0x08009a3d
 8009810:	08009aad 	.word	0x08009aad
 8009814:	08009af3 	.word	0x08009af3
 8009818:	08009b39 	.word	0x08009b39
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800981c:	2108      	movs	r1, #8
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fa50 	bl	8009cc4 <USBH_Get_DevDesc>
 8009824:	4603      	mov	r3, r0
 8009826:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d130      	bne.n	8009890 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	7919      	ldrb	r1, [r3, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009852:	b292      	uxth	r2, r2
 8009854:	9202      	str	r2, [sp, #8]
 8009856:	2200      	movs	r2, #0
 8009858:	9201      	str	r2, [sp, #4]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	4603      	mov	r3, r0
 800985e:	2280      	movs	r2, #128	; 0x80
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 ff72 	bl	800a74a <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	7959      	ldrb	r1, [r3, #5]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800987a:	b292      	uxth	r2, r2
 800987c:	9202      	str	r2, [sp, #8]
 800987e:	2200      	movs	r2, #0
 8009880:	9201      	str	r2, [sp, #4]
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	4603      	mov	r3, r0
 8009886:	2200      	movs	r2, #0
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 ff5e 	bl	800a74a <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800988e:	e175      	b.n	8009b7c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	2b03      	cmp	r3, #3
 8009894:	f040 8172 	bne.w	8009b7c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800989e:	3301      	adds	r3, #1
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d903      	bls.n	80098ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	220d      	movs	r2, #13
 80098b6:	701a      	strb	r2, [r3, #0]
      break;
 80098b8:	e160      	b.n	8009b7c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	795b      	ldrb	r3, [r3, #5]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 ff93 	bl	800a7ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	791b      	ldrb	r3, [r3, #4]
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 ff8d 	bl	800a7ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
      break;
 80098d8:	e150      	b.n	8009b7c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80098da:	2112      	movs	r1, #18
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f9f1 	bl	8009cc4 <USBH_Get_DevDesc>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d103      	bne.n	80098f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098f2:	e145      	b.n	8009b80 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	f040 8142 	bne.w	8009b80 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009902:	3301      	adds	r3, #1
 8009904:	b2da      	uxtb	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009912:	2b03      	cmp	r3, #3
 8009914:	d903      	bls.n	800991e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	220d      	movs	r2, #13
 800991a:	701a      	strb	r2, [r3, #0]
      break;
 800991c:	e130      	b.n	8009b80 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	795b      	ldrb	r3, [r3, #5]
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 ff61 	bl	800a7ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	791b      	ldrb	r3, [r3, #4]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 ff5b 	bl	800a7ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	701a      	strb	r2, [r3, #0]
      break;
 8009942:	e11d      	b.n	8009b80 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009944:	2101      	movs	r1, #1
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fa68 	bl	8009e1c <USBH_SetAddress>
 800994c:	4603      	mov	r3, r0
 800994e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d132      	bne.n	80099bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009956:	2002      	movs	r0, #2
 8009958:	f001 fa33 	bl	800adc2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2203      	movs	r2, #3
 8009968:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	7919      	ldrb	r1, [r3, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800997e:	b292      	uxth	r2, r2
 8009980:	9202      	str	r2, [sp, #8]
 8009982:	2200      	movs	r2, #0
 8009984:	9201      	str	r2, [sp, #4]
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	4603      	mov	r3, r0
 800998a:	2280      	movs	r2, #128	; 0x80
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fedc 	bl	800a74a <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	7959      	ldrb	r1, [r3, #5]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099a6:	b292      	uxth	r2, r2
 80099a8:	9202      	str	r2, [sp, #8]
 80099aa:	2200      	movs	r2, #0
 80099ac:	9201      	str	r2, [sp, #4]
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	4603      	mov	r3, r0
 80099b2:	2200      	movs	r2, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fec8 	bl	800a74a <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099ba:	e0e3      	b.n	8009b84 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	f040 80e0 	bne.w	8009b84 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	220d      	movs	r2, #13
 80099c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	705a      	strb	r2, [r3, #1]
      break;
 80099d0:	e0d8      	b.n	8009b84 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80099d2:	2109      	movs	r1, #9
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f99d 	bl	8009d14 <USBH_Get_CfgDesc>
 80099da:	4603      	mov	r3, r0
 80099dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099de:	7bbb      	ldrb	r3, [r7, #14]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d103      	bne.n	80099ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2204      	movs	r2, #4
 80099e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099ea:	e0cd      	b.n	8009b88 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	f040 80ca 	bne.w	8009b88 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099fa:	3301      	adds	r3, #1
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d903      	bls.n	8009a16 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	220d      	movs	r2, #13
 8009a12:	701a      	strb	r2, [r3, #0]
      break;
 8009a14:	e0b8      	b.n	8009b88 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	795b      	ldrb	r3, [r3, #5]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fee5 	bl	800a7ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	791b      	ldrb	r3, [r3, #4]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fedf 	bl	800a7ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
      break;
 8009a3a:	e0a5      	b.n	8009b88 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f965 	bl	8009d14 <USBH_Get_CfgDesc>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d103      	bne.n	8009a5c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2205      	movs	r2, #5
 8009a58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a5a:	e097      	b.n	8009b8c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	f040 8094 	bne.w	8009b8c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d903      	bls.n	8009a86 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	220d      	movs	r2, #13
 8009a82:	701a      	strb	r2, [r3, #0]
      break;
 8009a84:	e082      	b.n	8009b8c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	795b      	ldrb	r3, [r3, #5]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fead 	bl	800a7ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	791b      	ldrb	r3, [r3, #4]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fea7 	bl	800a7ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	701a      	strb	r2, [r3, #0]
      break;
 8009aaa:	e06f      	b.n	8009b8c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d019      	beq.n	8009aea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ac2:	23ff      	movs	r3, #255	; 0xff
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f949 	bl	8009d5c <USBH_Get_StringDesc>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2206      	movs	r2, #6
 8009ad8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009ada:	e059      	b.n	8009b90 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d156      	bne.n	8009b90 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2206      	movs	r2, #6
 8009ae6:	705a      	strb	r2, [r3, #1]
      break;
 8009ae8:	e052      	b.n	8009b90 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2206      	movs	r2, #6
 8009aee:	705a      	strb	r2, [r3, #1]
      break;
 8009af0:	e04e      	b.n	8009b90 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d019      	beq.n	8009b30 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b08:	23ff      	movs	r3, #255	; 0xff
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f926 	bl	8009d5c <USBH_Get_StringDesc>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2207      	movs	r2, #7
 8009b1e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b20:	e038      	b.n	8009b94 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d135      	bne.n	8009b94 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2207      	movs	r2, #7
 8009b2c:	705a      	strb	r2, [r3, #1]
      break;
 8009b2e:	e031      	b.n	8009b94 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2207      	movs	r2, #7
 8009b34:	705a      	strb	r2, [r3, #1]
      break;
 8009b36:	e02d      	b.n	8009b94 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d017      	beq.n	8009b72 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b4e:	23ff      	movs	r3, #255	; 0xff
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f903 	bl	8009d5c <USBH_Get_StringDesc>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b64:	e018      	b.n	8009b98 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d115      	bne.n	8009b98 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b70:	e012      	b.n	8009b98 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
      break;
 8009b76:	e00f      	b.n	8009b98 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b78:	bf00      	nop
 8009b7a:	e00e      	b.n	8009b9a <USBH_HandleEnum+0x3be>
      break;
 8009b7c:	bf00      	nop
 8009b7e:	e00c      	b.n	8009b9a <USBH_HandleEnum+0x3be>
      break;
 8009b80:	bf00      	nop
 8009b82:	e00a      	b.n	8009b9a <USBH_HandleEnum+0x3be>
      break;
 8009b84:	bf00      	nop
 8009b86:	e008      	b.n	8009b9a <USBH_HandleEnum+0x3be>
      break;
 8009b88:	bf00      	nop
 8009b8a:	e006      	b.n	8009b9a <USBH_HandleEnum+0x3be>
      break;
 8009b8c:	bf00      	nop
 8009b8e:	e004      	b.n	8009b9a <USBH_HandleEnum+0x3be>
      break;
 8009b90:	bf00      	nop
 8009b92:	e002      	b.n	8009b9a <USBH_HandleEnum+0x3be>
      break;
 8009b94:	bf00      	nop
 8009b96:	e000      	b.n	8009b9a <USBH_HandleEnum+0x3be>
      break;
 8009b98:	bf00      	nop
  }
  return Status;
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f804 	bl	8009be6 <USBH_HandleSof>
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b0b      	cmp	r3, #11
 8009bf6:	d10a      	bne.n	8009c0e <USBH_HandleSof+0x28>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d005      	beq.n	8009c0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	4798      	blx	r3
  }
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009c26:	bf00      	nop
}
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c42:	bf00      	nop
}
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 ff5a 	bl	800ab56 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	791b      	ldrb	r3, [r3, #4]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fd9f 	bl	800a7ec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	795b      	ldrb	r3, [r3, #5]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fd99 	bl	800a7ec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009cd6:	78fb      	ldrb	r3, [r7, #3]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f864 	bl	8009db2 <USBH_GetDescriptor>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10a      	bne.n	8009d0a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d00:	78fa      	ldrb	r2, [r7, #3]
 8009d02:	b292      	uxth	r2, r2
 8009d04:	4619      	mov	r1, r3
 8009d06:	f000 f91b 	bl	8009f40 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	331c      	adds	r3, #28
 8009d24:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009d26:	887b      	ldrh	r3, [r7, #2]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d30:	2100      	movs	r1, #0
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f83d 	bl	8009db2 <USBH_GetDescriptor>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	72fb      	strb	r3, [r7, #11]
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d107      	bne.n	8009d52 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d48:	887a      	ldrh	r2, [r7, #2]
 8009d4a:	68f9      	ldr	r1, [r7, #12]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f967 	bl	800a020 <USBH_ParseCfgDesc>
  }

  return status;
 8009d52:	7afb      	ldrb	r3, [r7, #11]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	607a      	str	r2, [r7, #4]
 8009d66:	461a      	mov	r2, r3
 8009d68:	460b      	mov	r3, r1
 8009d6a:	72fb      	strb	r3, [r7, #11]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009d70:	7afb      	ldrb	r3, [r7, #11]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d78:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009d80:	893b      	ldrh	r3, [r7, #8]
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	460b      	mov	r3, r1
 8009d86:	2100      	movs	r1, #0
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f812 	bl	8009db2 <USBH_GetDescriptor>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	75fb      	strb	r3, [r7, #23]
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d107      	bne.n	8009da8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d9e:	893a      	ldrh	r2, [r7, #8]
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 fa3a 	bl	800a21c <USBH_ParseStringDesc>
  }

  return status;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	607b      	str	r3, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	72fb      	strb	r3, [r7, #11]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	789b      	ldrb	r3, [r3, #2]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d11c      	bne.n	8009e06 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2206      	movs	r2, #6
 8009ddc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	893a      	ldrh	r2, [r7, #8]
 8009de2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009de4:	893b      	ldrh	r3, [r7, #8]
 8009de6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dee:	d104      	bne.n	8009dfa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f240 4209 	movw	r2, #1033	; 0x409
 8009df6:	829a      	strh	r2, [r3, #20]
 8009df8:	e002      	b.n	8009e00 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8b3a      	ldrh	r2, [r7, #24]
 8009e04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009e06:	8b3b      	ldrh	r3, [r7, #24]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 fa53 	bl	800a2b8 <USBH_CtlReq>
 8009e12:	4603      	mov	r3, r0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	789b      	ldrb	r3, [r3, #2]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d10f      	bne.n	8009e50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2205      	movs	r2, #5
 8009e3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e50:	2200      	movs	r2, #0
 8009e52:	2100      	movs	r1, #0
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fa2f 	bl	800a2b8 <USBH_CtlReq>
 8009e5a:	4603      	mov	r3, r0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	789b      	ldrb	r3, [r3, #2]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d10e      	bne.n	8009e96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2209      	movs	r2, #9
 8009e82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	887a      	ldrh	r2, [r7, #2]
 8009e88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e96:	2200      	movs	r2, #0
 8009e98:	2100      	movs	r1, #0
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa0c 	bl	800a2b8 <USBH_CtlReq>
 8009ea0:	4603      	mov	r3, r0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	70fb      	strb	r3, [r7, #3]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	789b      	ldrb	r3, [r3, #2]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d110      	bne.n	8009ee4 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	220b      	movs	r2, #11
 8009ecc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8009ece:	78bb      	ldrb	r3, [r7, #2]
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f9e5 	bl	800a2b8 <USBH_CtlReq>
 8009eee:	4603      	mov	r3, r0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	789b      	ldrb	r3, [r3, #2]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d10f      	bne.n	8009f2c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2203      	movs	r2, #3
 8009f16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2100      	movs	r1, #0
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f9c1 	bl	800a2b8 <USBH_CtlReq>
 8009f36:	4603      	mov	r3, r0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	781a      	ldrb	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	785a      	ldrb	r2, [r3, #1]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	3302      	adds	r3, #2
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	3303      	adds	r3, #3
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	021b      	lsls	r3, r3, #8
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	4313      	orrs	r3, r2
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	791a      	ldrb	r2, [r3, #4]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	795a      	ldrb	r2, [r3, #5]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	799a      	ldrb	r2, [r3, #6]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	79da      	ldrb	r2, [r3, #7]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009f9a:	88fb      	ldrh	r3, [r7, #6]
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d939      	bls.n	800a014 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	3308      	adds	r3, #8
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	3309      	adds	r3, #9
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	021b      	lsls	r3, r3, #8
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	330a      	adds	r3, #10
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	330b      	adds	r3, #11
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	021b      	lsls	r3, r3, #8
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	330c      	adds	r3, #12
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	330d      	adds	r3, #13
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	021b      	lsls	r3, r3, #8
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	4313      	orrs	r3, r2
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	7b9a      	ldrb	r2, [r3, #14]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	7bda      	ldrb	r2, [r3, #15]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	7c1a      	ldrb	r2, [r3, #16]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	7c5a      	ldrb	r2, [r3, #17]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	745a      	strb	r2, [r3, #17]
  }
}
 800a014:	bf00      	nop
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08a      	sub	sp, #40	; 0x28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	4613      	mov	r3, r2
 800a02c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	785a      	ldrb	r2, [r3, #1]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	3302      	adds	r3, #2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	b29a      	uxth	r2, r3
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	3303      	adds	r3, #3
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	b29b      	uxth	r3, r3
 800a062:	021b      	lsls	r3, r3, #8
 800a064:	b29b      	uxth	r3, r3
 800a066:	4313      	orrs	r3, r2
 800a068:	b29a      	uxth	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	791a      	ldrb	r2, [r3, #4]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	795a      	ldrb	r2, [r3, #5]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	799a      	ldrb	r2, [r3, #6]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	79da      	ldrb	r2, [r3, #7]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	7a1a      	ldrb	r2, [r3, #8]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a096:	88fb      	ldrh	r3, [r7, #6]
 800a098:	2b09      	cmp	r3, #9
 800a09a:	d95f      	bls.n	800a15c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a09c:	2309      	movs	r3, #9
 800a09e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0a4:	e051      	b.n	800a14a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0a6:	f107 0316 	add.w	r3, r7, #22
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0ae:	f000 f8e8 	bl	800a282 <USBH_GetNextDesc>
 800a0b2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	785b      	ldrb	r3, [r3, #1]
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	d146      	bne.n	800a14a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a0bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0c0:	221a      	movs	r2, #26
 800a0c2:	fb02 f303 	mul.w	r3, r2, r3
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	3302      	adds	r3, #2
 800a0ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a0d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0d2:	69f8      	ldr	r0, [r7, #28]
 800a0d4:	f000 f846 	bl	800a164 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0e2:	e022      	b.n	800a12a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0e4:	f107 0316 	add.w	r3, r7, #22
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0ec:	f000 f8c9 	bl	800a282 <USBH_GetNextDesc>
 800a0f0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	785b      	ldrb	r3, [r3, #1]
 800a0f6:	2b05      	cmp	r3, #5
 800a0f8:	d117      	bne.n	800a12a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a0fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0fe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a102:	3201      	adds	r2, #1
 800a104:	00d2      	lsls	r2, r2, #3
 800a106:	211a      	movs	r1, #26
 800a108:	fb01 f303 	mul.w	r3, r1, r3
 800a10c:	4413      	add	r3, r2
 800a10e:	3308      	adds	r3, #8
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	3304      	adds	r3, #4
 800a116:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a11a:	69b8      	ldr	r0, [r7, #24]
 800a11c:	f000 f851 	bl	800a1c2 <USBH_ParseEPDesc>
            ep_ix++;
 800a120:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a124:	3301      	adds	r3, #1
 800a126:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	791b      	ldrb	r3, [r3, #4]
 800a12e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a132:	429a      	cmp	r2, r3
 800a134:	d204      	bcs.n	800a140 <USBH_ParseCfgDesc+0x120>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	885a      	ldrh	r2, [r3, #2]
 800a13a:	8afb      	ldrh	r3, [r7, #22]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d8d1      	bhi.n	800a0e4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a144:	3301      	adds	r3, #1
 800a146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a14a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a14e:	2b09      	cmp	r3, #9
 800a150:	d804      	bhi.n	800a15c <USBH_ParseCfgDesc+0x13c>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	885a      	ldrh	r2, [r3, #2]
 800a156:	8afb      	ldrh	r3, [r7, #22]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d8a4      	bhi.n	800a0a6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a15c:	bf00      	nop
 800a15e:	3728      	adds	r7, #40	; 0x28
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781a      	ldrb	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	785a      	ldrb	r2, [r3, #1]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	789a      	ldrb	r2, [r3, #2]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	78da      	ldrb	r2, [r3, #3]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	791a      	ldrb	r2, [r3, #4]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	795a      	ldrb	r2, [r3, #5]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	799a      	ldrb	r2, [r3, #6]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	79da      	ldrb	r2, [r3, #7]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	7a1a      	ldrb	r2, [r3, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	721a      	strb	r2, [r3, #8]
}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781a      	ldrb	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	785a      	ldrb	r2, [r3, #1]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	789a      	ldrb	r2, [r3, #2]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	78da      	ldrb	r2, [r3, #3]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	3305      	adds	r3, #5
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	021b      	lsls	r3, r3, #8
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	4313      	orrs	r3, r2
 800a202:	b29a      	uxth	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	799a      	ldrb	r2, [r3, #6]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	719a      	strb	r2, [r3, #6]
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3301      	adds	r3, #1
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b03      	cmp	r3, #3
 800a232:	d120      	bne.n	800a276 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	1e9a      	subs	r2, r3, #2
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	4293      	cmp	r3, r2
 800a23e:	bf28      	it	cs
 800a240:	4613      	movcs	r3, r2
 800a242:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3302      	adds	r3, #2
 800a248:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a24a:	2300      	movs	r3, #0
 800a24c:	82fb      	strh	r3, [r7, #22]
 800a24e:	e00b      	b.n	800a268 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a250:	8afb      	ldrh	r3, [r7, #22]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4413      	add	r3, r2
 800a256:	781a      	ldrb	r2, [r3, #0]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	3301      	adds	r3, #1
 800a260:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a262:	8afb      	ldrh	r3, [r7, #22]
 800a264:	3302      	adds	r3, #2
 800a266:	82fb      	strh	r3, [r7, #22]
 800a268:	8afa      	ldrh	r2, [r7, #22]
 800a26a:	8abb      	ldrh	r3, [r7, #20]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d3ef      	bcc.n	800a250 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]
  }
}
 800a276:	bf00      	nop
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a282:	b480      	push	{r7}
 800a284:	b085      	sub	sp, #20
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	881a      	ldrh	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	b29b      	uxth	r3, r3
 800a296:	4413      	add	r3, r2
 800a298:	b29a      	uxth	r2, r3
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	789b      	ldrb	r3, [r3, #2]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d002      	beq.n	800a2d8 <USBH_CtlReq+0x20>
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d00f      	beq.n	800a2f6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a2d6:	e027      	b.n	800a328 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	88fa      	ldrh	r2, [r7, #6]
 800a2e2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f4:	e018      	b.n	800a328 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 f81c 	bl	800a334 <USBH_HandleControl>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a300:	7dfb      	ldrb	r3, [r7, #23]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <USBH_CtlReq+0x54>
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d106      	bne.n	800a31a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	761a      	strb	r2, [r3, #24]
      break;
 800a318:	e005      	b.n	800a326 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d102      	bne.n	800a326 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2201      	movs	r2, #1
 800a324:	709a      	strb	r2, [r3, #2]
      break;
 800a326:	bf00      	nop
  }
  return status;
 800a328:	7dfb      	ldrb	r3, [r7, #23]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
	...

0800a334 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af02      	add	r7, sp, #8
 800a33a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a33c:	2301      	movs	r3, #1
 800a33e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a340:	2300      	movs	r3, #0
 800a342:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7e1b      	ldrb	r3, [r3, #24]
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b0a      	cmp	r3, #10
 800a34c:	f200 8156 	bhi.w	800a5fc <USBH_HandleControl+0x2c8>
 800a350:	a201      	add	r2, pc, #4	; (adr r2, 800a358 <USBH_HandleControl+0x24>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a385 	.word	0x0800a385
 800a35c:	0800a39f 	.word	0x0800a39f
 800a360:	0800a409 	.word	0x0800a409
 800a364:	0800a42f 	.word	0x0800a42f
 800a368:	0800a467 	.word	0x0800a467
 800a36c:	0800a491 	.word	0x0800a491
 800a370:	0800a4e3 	.word	0x0800a4e3
 800a374:	0800a505 	.word	0x0800a505
 800a378:	0800a541 	.word	0x0800a541
 800a37c:	0800a567 	.word	0x0800a567
 800a380:	0800a5a5 	.word	0x0800a5a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f103 0110 	add.w	r1, r3, #16
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	795b      	ldrb	r3, [r3, #5]
 800a38e:	461a      	mov	r2, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f943 	bl	800a61c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2202      	movs	r2, #2
 800a39a:	761a      	strb	r2, [r3, #24]
      break;
 800a39c:	e139      	b.n	800a612 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	795b      	ldrb	r3, [r3, #5]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fcb2 	bl	800ad0e <USBH_LL_GetURBState>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d11e      	bne.n	800a3f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7c1b      	ldrb	r3, [r3, #16]
 800a3b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	8adb      	ldrh	r3, [r3, #22]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a3c6:	7b7b      	ldrb	r3, [r7, #13]
 800a3c8:	2b80      	cmp	r3, #128	; 0x80
 800a3ca:	d103      	bne.n	800a3d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2203      	movs	r2, #3
 800a3d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a3d2:	e115      	b.n	800a600 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2205      	movs	r2, #5
 800a3d8:	761a      	strb	r2, [r3, #24]
      break;
 800a3da:	e111      	b.n	800a600 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a3dc:	7b7b      	ldrb	r3, [r7, #13]
 800a3de:	2b80      	cmp	r3, #128	; 0x80
 800a3e0:	d103      	bne.n	800a3ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2209      	movs	r2, #9
 800a3e6:	761a      	strb	r2, [r3, #24]
      break;
 800a3e8:	e10a      	b.n	800a600 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2207      	movs	r2, #7
 800a3ee:	761a      	strb	r2, [r3, #24]
      break;
 800a3f0:	e106      	b.n	800a600 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d003      	beq.n	800a400 <USBH_HandleControl+0xcc>
 800a3f8:	7bbb      	ldrb	r3, [r7, #14]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	f040 8100 	bne.w	800a600 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	220b      	movs	r2, #11
 800a404:	761a      	strb	r2, [r3, #24]
      break;
 800a406:	e0fb      	b.n	800a600 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a40e:	b29a      	uxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6899      	ldr	r1, [r3, #8]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	899a      	ldrh	r2, [r3, #12]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	791b      	ldrb	r3, [r3, #4]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f93a 	bl	800a69a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2204      	movs	r2, #4
 800a42a:	761a      	strb	r2, [r3, #24]
      break;
 800a42c:	e0f1      	b.n	800a612 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	791b      	ldrb	r3, [r3, #4]
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fc6a 	bl	800ad0e <USBH_LL_GetURBState>
 800a43a:	4603      	mov	r3, r0
 800a43c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d102      	bne.n	800a44a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2209      	movs	r2, #9
 800a448:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d102      	bne.n	800a456 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a450:	2303      	movs	r3, #3
 800a452:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a454:	e0d6      	b.n	800a604 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	2b04      	cmp	r3, #4
 800a45a:	f040 80d3 	bne.w	800a604 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	220b      	movs	r2, #11
 800a462:	761a      	strb	r2, [r3, #24]
      break;
 800a464:	e0ce      	b.n	800a604 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6899      	ldr	r1, [r3, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	899a      	ldrh	r2, [r3, #12]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	795b      	ldrb	r3, [r3, #5]
 800a472:	2001      	movs	r0, #1
 800a474:	9000      	str	r0, [sp, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f8ea 	bl	800a650 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a482:	b29a      	uxth	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2206      	movs	r2, #6
 800a48c:	761a      	strb	r2, [r3, #24]
      break;
 800a48e:	e0c0      	b.n	800a612 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	795b      	ldrb	r3, [r3, #5]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fc39 	bl	800ad0e <USBH_LL_GetURBState>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d103      	bne.n	800a4ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2207      	movs	r2, #7
 800a4aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4ac:	e0ac      	b.n	800a608 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a4ae:	7bbb      	ldrb	r3, [r7, #14]
 800a4b0:	2b05      	cmp	r3, #5
 800a4b2:	d105      	bne.n	800a4c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	220c      	movs	r2, #12
 800a4b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4be:	e0a3      	b.n	800a608 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d103      	bne.n	800a4ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2205      	movs	r2, #5
 800a4ca:	761a      	strb	r2, [r3, #24]
      break;
 800a4cc:	e09c      	b.n	800a608 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	f040 8099 	bne.w	800a608 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	220b      	movs	r2, #11
 800a4da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a4dc:	2302      	movs	r3, #2
 800a4de:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e0:	e092      	b.n	800a608 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	791b      	ldrb	r3, [r3, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f8d5 	bl	800a69a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2208      	movs	r2, #8
 800a500:	761a      	strb	r2, [r3, #24]

      break;
 800a502:	e086      	b.n	800a612 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	791b      	ldrb	r3, [r3, #4]
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fbff 	bl	800ad0e <USBH_LL_GetURBState>
 800a510:	4603      	mov	r3, r0
 800a512:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d105      	bne.n	800a526 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	220d      	movs	r2, #13
 800a51e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a524:	e072      	b.n	800a60c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d103      	bne.n	800a534 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	220b      	movs	r2, #11
 800a530:	761a      	strb	r2, [r3, #24]
      break;
 800a532:	e06b      	b.n	800a60c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	2b05      	cmp	r3, #5
 800a538:	d168      	bne.n	800a60c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a53a:	2303      	movs	r3, #3
 800a53c:	73fb      	strb	r3, [r7, #15]
      break;
 800a53e:	e065      	b.n	800a60c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	795b      	ldrb	r3, [r3, #5]
 800a544:	2201      	movs	r2, #1
 800a546:	9200      	str	r2, [sp, #0]
 800a548:	2200      	movs	r2, #0
 800a54a:	2100      	movs	r1, #0
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f87f 	bl	800a650 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a558:	b29a      	uxth	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	220a      	movs	r2, #10
 800a562:	761a      	strb	r2, [r3, #24]
      break;
 800a564:	e055      	b.n	800a612 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	795b      	ldrb	r3, [r3, #5]
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fbce 	bl	800ad0e <USBH_LL_GetURBState>
 800a572:	4603      	mov	r3, r0
 800a574:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a576:	7bbb      	ldrb	r3, [r7, #14]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d105      	bne.n	800a588 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	220d      	movs	r2, #13
 800a584:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a586:	e043      	b.n	800a610 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a588:	7bbb      	ldrb	r3, [r7, #14]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d103      	bne.n	800a596 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2209      	movs	r2, #9
 800a592:	761a      	strb	r2, [r3, #24]
      break;
 800a594:	e03c      	b.n	800a610 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b04      	cmp	r3, #4
 800a59a:	d139      	bne.n	800a610 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	220b      	movs	r2, #11
 800a5a0:	761a      	strb	r2, [r3, #24]
      break;
 800a5a2:	e035      	b.n	800a610 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7e5b      	ldrb	r3, [r3, #25]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	765a      	strb	r2, [r3, #25]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7e5b      	ldrb	r3, [r3, #25]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d806      	bhi.n	800a5c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a5c4:	e025      	b.n	800a612 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800a5cc:	2106      	movs	r1, #6
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	795b      	ldrb	r3, [r3, #5]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f904 	bl	800a7ec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	791b      	ldrb	r3, [r3, #4]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f8fe 	bl	800a7ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5fa:	e00a      	b.n	800a612 <USBH_HandleControl+0x2de>

    default:
      break;
 800a5fc:	bf00      	nop
 800a5fe:	e008      	b.n	800a612 <USBH_HandleControl+0x2de>
      break;
 800a600:	bf00      	nop
 800a602:	e006      	b.n	800a612 <USBH_HandleControl+0x2de>
      break;
 800a604:	bf00      	nop
 800a606:	e004      	b.n	800a612 <USBH_HandleControl+0x2de>
      break;
 800a608:	bf00      	nop
 800a60a:	e002      	b.n	800a612 <USBH_HandleControl+0x2de>
      break;
 800a60c:	bf00      	nop
 800a60e:	e000      	b.n	800a612 <USBH_HandleControl+0x2de>
      break;
 800a610:	bf00      	nop
  }

  return status;
 800a612:	7bfb      	ldrb	r3, [r7, #15]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af04      	add	r7, sp, #16
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4613      	mov	r3, r2
 800a628:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a62a:	79f9      	ldrb	r1, [r7, #7]
 800a62c:	2300      	movs	r3, #0
 800a62e:	9303      	str	r3, [sp, #12]
 800a630:	2308      	movs	r3, #8
 800a632:	9302      	str	r3, [sp, #8]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	2300      	movs	r3, #0
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	2300      	movs	r3, #0
 800a63e:	2200      	movs	r2, #0
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 fb33 	bl	800acac <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af04      	add	r7, sp, #16
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4611      	mov	r1, r2
 800a65c:	461a      	mov	r2, r3
 800a65e:	460b      	mov	r3, r1
 800a660:	80fb      	strh	r3, [r7, #6]
 800a662:	4613      	mov	r3, r2
 800a664:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a674:	7979      	ldrb	r1, [r7, #5]
 800a676:	7e3b      	ldrb	r3, [r7, #24]
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	9302      	str	r3, [sp, #8]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	2301      	movs	r3, #1
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	2300      	movs	r3, #0
 800a688:	2200      	movs	r2, #0
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 fb0e 	bl	800acac <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af04      	add	r7, sp, #16
 800a6a0:	60f8      	str	r0, [r7, #12]
 800a6a2:	60b9      	str	r1, [r7, #8]
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	80fb      	strh	r3, [r7, #6]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6b0:	7979      	ldrb	r1, [r7, #5]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9303      	str	r3, [sp, #12]
 800a6b6:	88fb      	ldrh	r3, [r7, #6]
 800a6b8:	9302      	str	r3, [sp, #8]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	9301      	str	r3, [sp, #4]
 800a6be:	2301      	movs	r3, #1
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 faf0 	bl	800acac <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a6cc:	2300      	movs	r3, #0

}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b088      	sub	sp, #32
 800a6da:	af04      	add	r7, sp, #16
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	71fb      	strb	r3, [r7, #7]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	79b9      	ldrb	r1, [r7, #6]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	9203      	str	r2, [sp, #12]
 800a6f6:	9302      	str	r3, [sp, #8]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	2303      	movs	r3, #3
 800a702:	2201      	movs	r2, #1
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fad1 	bl	800acac <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af04      	add	r7, sp, #16
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	b29b      	uxth	r3, r3
 800a726:	78f9      	ldrb	r1, [r7, #3]
 800a728:	2200      	movs	r2, #0
 800a72a:	9203      	str	r2, [sp, #12]
 800a72c:	9302      	str	r3, [sp, #8]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	2301      	movs	r3, #1
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	2301      	movs	r3, #1
 800a738:	2200      	movs	r2, #0
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 fab6 	bl	800acac <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b086      	sub	sp, #24
 800a74e:	af04      	add	r7, sp, #16
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	4608      	mov	r0, r1
 800a754:	4611      	mov	r1, r2
 800a756:	461a      	mov	r2, r3
 800a758:	4603      	mov	r3, r0
 800a75a:	70fb      	strb	r3, [r7, #3]
 800a75c:	460b      	mov	r3, r1
 800a75e:	70bb      	strb	r3, [r7, #2]
 800a760:	4613      	mov	r3, r2
 800a762:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a764:	7878      	ldrb	r0, [r7, #1]
 800a766:	78ba      	ldrb	r2, [r7, #2]
 800a768:	78f9      	ldrb	r1, [r7, #3]
 800a76a:	8b3b      	ldrh	r3, [r7, #24]
 800a76c:	9302      	str	r3, [sp, #8]
 800a76e:	7d3b      	ldrb	r3, [r7, #20]
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	7c3b      	ldrb	r3, [r7, #16]
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	4603      	mov	r3, r0
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fa49 	bl	800ac10 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fa68 	bl	800ac6e <USBH_LL_ClosePipe>

  return USBH_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f839 	bl	800a82c <USBH_GetFreePipe>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a7be:	89fb      	ldrh	r3, [r7, #14]
 800a7c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d00b      	beq.n	800a7e0 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a7c8:	78fa      	ldrb	r2, [r7, #3]
 800a7ca:	89fb      	ldrh	r3, [r7, #14]
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a7e0:	89fb      	ldrh	r3, [r7, #14]
 800a7e2:	b2db      	uxtb	r3, r3
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	2b0a      	cmp	r3, #10
 800a7fc:	d80f      	bhi.n	800a81e <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a834:	2300      	movs	r3, #0
 800a836:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
 800a83c:	e010      	b.n	800a860 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	b29b      	uxth	r3, r3
 800a858:	e007      	b.n	800a86a <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	3301      	adds	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]
 800a860:	7bfb      	ldrb	r3, [r7, #15]
 800a862:	2b0a      	cmp	r3, #10
 800a864:	d9eb      	bls.n	800a83e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a866:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
	...

0800a878 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a87c:	2201      	movs	r2, #1
 800a87e:	490e      	ldr	r1, [pc, #56]	; (800a8b8 <MX_USB_HOST_Init+0x40>)
 800a880:	480e      	ldr	r0, [pc, #56]	; (800a8bc <MX_USB_HOST_Init+0x44>)
 800a882:	f7fe fc86 	bl	8009192 <USBH_Init>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a88c:	f7f6 f8c0 	bl	8000a10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800a890:	490b      	ldr	r1, [pc, #44]	; (800a8c0 <MX_USB_HOST_Init+0x48>)
 800a892:	480a      	ldr	r0, [pc, #40]	; (800a8bc <MX_USB_HOST_Init+0x44>)
 800a894:	f7fe fd0c 	bl	80092b0 <USBH_RegisterClass>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a89e:	f7f6 f8b7 	bl	8000a10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a8a2:	4806      	ldr	r0, [pc, #24]	; (800a8bc <MX_USB_HOST_Init+0x44>)
 800a8a4:	f7fe fda8 	bl	80093f8 <USBH_Start>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a8ae:	f7f6 f8af 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a8b2:	bf00      	nop
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0800a8d9 	.word	0x0800a8d9
 800a8bc:	200001d0 	.word	0x200001d0
 800a8c0:	2000000c 	.word	0x2000000c

0800a8c4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a8c8:	4802      	ldr	r0, [pc, #8]	; (800a8d4 <MX_USB_HOST_Process+0x10>)
 800a8ca:	f7fe fda5 	bl	8009418 <USBH_Process>
}
 800a8ce:	bf00      	nop
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	200001d0 	.word	0x200001d0

0800a8d8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d819      	bhi.n	800a920 <USBH_UserProcess+0x48>
 800a8ec:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <USBH_UserProcess+0x1c>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a921 	.word	0x0800a921
 800a8f8:	0800a911 	.word	0x0800a911
 800a8fc:	0800a921 	.word	0x0800a921
 800a900:	0800a919 	.word	0x0800a919
 800a904:	0800a909 	.word	0x0800a909
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a908:	4b09      	ldr	r3, [pc, #36]	; (800a930 <USBH_UserProcess+0x58>)
 800a90a:	2203      	movs	r2, #3
 800a90c:	701a      	strb	r2, [r3, #0]
  break;
 800a90e:	e008      	b.n	800a922 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <USBH_UserProcess+0x58>)
 800a912:	2202      	movs	r2, #2
 800a914:	701a      	strb	r2, [r3, #0]
  break;
 800a916:	e004      	b.n	800a922 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a918:	4b05      	ldr	r3, [pc, #20]	; (800a930 <USBH_UserProcess+0x58>)
 800a91a:	2201      	movs	r2, #1
 800a91c:	701a      	strb	r2, [r3, #0]
  break;
 800a91e:	e000      	b.n	800a922 <USBH_UserProcess+0x4a>

  default:
  break;
 800a920:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	200000b0 	.word	0x200000b0

0800a934 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08a      	sub	sp, #40	; 0x28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a93c:	f107 0314 	add.w	r3, r7, #20
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	609a      	str	r2, [r3, #8]
 800a948:	60da      	str	r2, [r3, #12]
 800a94a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a954:	d14e      	bne.n	800a9f4 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a956:	4b29      	ldr	r3, [pc, #164]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a95a:	4a28      	ldr	r2, [pc, #160]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a95c:	f043 0301 	orr.w	r3, r3, #1
 800a960:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a962:	4b26      	ldr	r3, [pc, #152]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a96e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a974:	2302      	movs	r3, #2
 800a976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a97c:	2303      	movs	r3, #3
 800a97e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a980:	230a      	movs	r3, #10
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a984:	f107 0314 	add.w	r3, r7, #20
 800a988:	4619      	mov	r1, r3
 800a98a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a98e:	f7f7 fde7 	bl	8002560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a992:	4b1a      	ldr	r3, [pc, #104]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a996:	4a19      	ldr	r2, [pc, #100]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a99c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a99e:	4b17      	ldr	r3, [pc, #92]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a9a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9aa:	4b14      	ldr	r3, [pc, #80]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d114      	bne.n	800a9e0 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9b6:	4b11      	ldr	r3, [pc, #68]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ba:	4a10      	ldr	r2, [pc, #64]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a9bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9c0:	6593      	str	r3, [r2, #88]	; 0x58
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9ca:	60bb      	str	r3, [r7, #8]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a9ce:	f7f9 fd1b 	bl	8004408 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9d2:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d6:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <HAL_HCD_MspInit+0xc8>)
 800a9d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9dc:	6593      	str	r3, [r2, #88]	; 0x58
 800a9de:	e001      	b.n	800a9e4 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a9e0:	f7f9 fd12 	bl	8004408 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	2043      	movs	r0, #67	; 0x43
 800a9ea:	f7f7 fd82 	bl	80024f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9ee:	2043      	movs	r0, #67	; 0x43
 800a9f0:	f7f7 fd9b 	bl	800252a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9f4:	bf00      	nop
 800a9f6:	3728      	adds	r7, #40	; 0x28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	40021000 	.word	0x40021000

0800aa00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff f8d7 	bl	8009bc2 <USBH_LL_IncTimer>
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff f90f 	bl	8009c4e <USBH_LL_Connect>
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff f918 	bl	8009c7c <USBH_LL_Disconnect>
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
 800aa60:	4613      	mov	r3, r2
 800aa62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff f8c9 	bl	8009c16 <USBH_LL_PortEnabled>
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff f8c9 	bl	8009c32 <USBH_LL_PortDisabled>
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d12a      	bne.n	800ab10 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aaba:	4a18      	ldr	r2, [pc, #96]	; (800ab1c <USBH_LL_Init+0x74>)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a15      	ldr	r2, [pc, #84]	; (800ab1c <USBH_LL_Init+0x74>)
 800aac6:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aaca:	4b14      	ldr	r3, [pc, #80]	; (800ab1c <USBH_LL_Init+0x74>)
 800aacc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aad0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800aad2:	4b12      	ldr	r3, [pc, #72]	; (800ab1c <USBH_LL_Init+0x74>)
 800aad4:	220c      	movs	r2, #12
 800aad6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aad8:	4b10      	ldr	r3, [pc, #64]	; (800ab1c <USBH_LL_Init+0x74>)
 800aada:	2201      	movs	r2, #1
 800aadc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aade:	4b0f      	ldr	r3, [pc, #60]	; (800ab1c <USBH_LL_Init+0x74>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aae4:	4b0d      	ldr	r3, [pc, #52]	; (800ab1c <USBH_LL_Init+0x74>)
 800aae6:	2202      	movs	r2, #2
 800aae8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aaea:	4b0c      	ldr	r3, [pc, #48]	; (800ab1c <USBH_LL_Init+0x74>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aaf0:	480a      	ldr	r0, [pc, #40]	; (800ab1c <USBH_LL_Init+0x74>)
 800aaf2:	f7f7 ff1c 	bl	800292e <HAL_HCD_Init>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aafc:	f7f5 ff88 	bl	8000a10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ab00:	4806      	ldr	r0, [pc, #24]	; (800ab1c <USBH_LL_Init+0x74>)
 800ab02:	f7f8 fae1 	bl	80030c8 <HAL_HCD_GetCurrentFrame>
 800ab06:	4603      	mov	r3, r0
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7ff f84a 	bl	8009ba4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000678 	.word	0x20000678

0800ab20 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7f8 fa64 	bl	8003004 <HAL_HCD_Start>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 f948 	bl	800add8 <USBH_Get_USB_Status>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7f8 fa6c 	bl	800304a <HAL_HCD_Stop>
 800ab72:	4603      	mov	r3, r0
 800ab74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 f92d 	bl	800add8 <USBH_Get_USB_Status>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ab94:	2301      	movs	r3, #1
 800ab96:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7f8 faa0 	bl	80030e4 <HAL_HCD_GetCurrentSpeed>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d00c      	beq.n	800abc4 <USBH_LL_GetSpeed+0x38>
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d80d      	bhi.n	800abca <USBH_LL_GetSpeed+0x3e>
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d002      	beq.n	800abb8 <USBH_LL_GetSpeed+0x2c>
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d003      	beq.n	800abbe <USBH_LL_GetSpeed+0x32>
 800abb6:	e008      	b.n	800abca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800abb8:	2300      	movs	r3, #0
 800abba:	73fb      	strb	r3, [r7, #15]
    break;
 800abbc:	e008      	b.n	800abd0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800abbe:	2301      	movs	r3, #1
 800abc0:	73fb      	strb	r3, [r7, #15]
    break;
 800abc2:	e005      	b.n	800abd0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800abc4:	2302      	movs	r3, #2
 800abc6:	73fb      	strb	r3, [r7, #15]
    break;
 800abc8:	e002      	b.n	800abd0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800abca:	2301      	movs	r3, #1
 800abcc:	73fb      	strb	r3, [r7, #15]
    break;
 800abce:	bf00      	nop
  }
  return  speed;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f8 fa47 	bl	8003084 <HAL_HCD_ResetPort>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 f8eb 	bl	800add8 <USBH_Get_USB_Status>
 800ac02:	4603      	mov	r3, r0
 800ac04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b089      	sub	sp, #36	; 0x24
 800ac14:	af04      	add	r7, sp, #16
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	4608      	mov	r0, r1
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4603      	mov	r3, r0
 800ac20:	70fb      	strb	r3, [r7, #3]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70bb      	strb	r3, [r7, #2]
 800ac26:	4613      	mov	r3, r2
 800ac28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800ac38:	787c      	ldrb	r4, [r7, #1]
 800ac3a:	78ba      	ldrb	r2, [r7, #2]
 800ac3c:	78f9      	ldrb	r1, [r7, #3]
 800ac3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac40:	9302      	str	r3, [sp, #8]
 800ac42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	4623      	mov	r3, r4
 800ac50:	f7f7 fecf 	bl	80029f2 <HAL_HCD_HC_Init>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f8bc 	bl	800add8 <USBH_Get_USB_Status>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd90      	pop	{r4, r7, pc}

0800ac6e <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ac88:	78fa      	ldrb	r2, [r7, #3]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7f7 ff3f 	bl	8002b10 <HAL_HCD_HC_Halt>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 f89d 	bl	800add8 <USBH_Get_USB_Status>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b089      	sub	sp, #36	; 0x24
 800acb0:	af04      	add	r7, sp, #16
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	4608      	mov	r0, r1
 800acb6:	4611      	mov	r1, r2
 800acb8:	461a      	mov	r2, r3
 800acba:	4603      	mov	r3, r0
 800acbc:	70fb      	strb	r3, [r7, #3]
 800acbe:	460b      	mov	r3, r1
 800acc0:	70bb      	strb	r3, [r7, #2]
 800acc2:	4613      	mov	r3, r2
 800acc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800acd4:	787c      	ldrb	r4, [r7, #1]
 800acd6:	78ba      	ldrb	r2, [r7, #2]
 800acd8:	78f9      	ldrb	r1, [r7, #3]
 800acda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acde:	9303      	str	r3, [sp, #12]
 800ace0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ace2:	9302      	str	r3, [sp, #8]
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	9301      	str	r3, [sp, #4]
 800ace8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	4623      	mov	r3, r4
 800acf0:	f7f7 ff32 	bl	8002b58 <HAL_HCD_HC_SubmitRequest>
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 f86c 	bl	800add8 <USBH_Get_USB_Status>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd90      	pop	{r4, r7, pc}

0800ad0e <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ad20:	78fa      	ldrb	r2, [r7, #3]
 800ad22:	4611      	mov	r1, r2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7f8 f9bb 	bl	80030a0 <HAL_HCD_HC_GetURBState>
 800ad2a:	4603      	mov	r3, r0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d103      	bne.n	800ad52 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ad4a:	78fb      	ldrb	r3, [r7, #3]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 f86f 	bl	800ae30 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad52:	20c8      	movs	r0, #200	; 0xc8
 800ad54:	f7f6 f87a 	bl	8000e4c <HAL_Delay>
  return USBH_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	70fb      	strb	r3, [r7, #3]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ad78:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	212c      	movs	r1, #44	; 0x2c
 800ad80:	fb01 f303 	mul.w	r3, r1, r3
 800ad84:	4413      	add	r3, r2
 800ad86:	333b      	adds	r3, #59	; 0x3b
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d009      	beq.n	800ada2 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	212c      	movs	r1, #44	; 0x2c
 800ad94:	fb01 f303 	mul.w	r3, r1, r3
 800ad98:	4413      	add	r3, r2
 800ad9a:	3354      	adds	r3, #84	; 0x54
 800ad9c:	78ba      	ldrb	r2, [r7, #2]
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	e008      	b.n	800adb4 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ada2:	78fb      	ldrb	r3, [r7, #3]
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	212c      	movs	r1, #44	; 0x2c
 800ada8:	fb01 f303 	mul.w	r3, r1, r3
 800adac:	4413      	add	r3, r2
 800adae:	3355      	adds	r3, #85	; 0x55
 800adb0:	78ba      	ldrb	r2, [r7, #2]
 800adb2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7f6 f83e 	bl	8000e4c <HAL_Delay>
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	4603      	mov	r3, r0
 800ade0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ade6:	79fb      	ldrb	r3, [r7, #7]
 800ade8:	2b03      	cmp	r3, #3
 800adea:	d817      	bhi.n	800ae1c <USBH_Get_USB_Status+0x44>
 800adec:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <USBH_Get_USB_Status+0x1c>)
 800adee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf2:	bf00      	nop
 800adf4:	0800ae05 	.word	0x0800ae05
 800adf8:	0800ae0b 	.word	0x0800ae0b
 800adfc:	0800ae11 	.word	0x0800ae11
 800ae00:	0800ae17 	.word	0x0800ae17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	73fb      	strb	r3, [r7, #15]
    break;
 800ae08:	e00b      	b.n	800ae22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae0e:	e008      	b.n	800ae22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae10:	2301      	movs	r3, #1
 800ae12:	73fb      	strb	r3, [r7, #15]
    break;
 800ae14:	e005      	b.n	800ae22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae16:	2302      	movs	r3, #2
 800ae18:	73fb      	strb	r3, [r7, #15]
    break;
 800ae1a:	e002      	b.n	800ae22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae20:	bf00      	nop
  }
  return usb_status;
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ae44:	2301      	movs	r3, #1
 800ae46:	73fb      	strb	r3, [r7, #15]
 800ae48:	e001      	b.n	800ae4e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	461a      	mov	r2, r3
 800ae52:	2140      	movs	r1, #64	; 0x40
 800ae54:	4803      	ldr	r0, [pc, #12]	; (800ae64 <MX_DriverVbusFS+0x34>)
 800ae56:	f7f7 fd15 	bl	8002884 <HAL_GPIO_WritePin>
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	48001800 	.word	0x48001800

0800ae68 <__errno>:
 800ae68:	4b01      	ldr	r3, [pc, #4]	; (800ae70 <__errno+0x8>)
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	2000002c 	.word	0x2000002c

0800ae74 <__libc_init_array>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	4d0d      	ldr	r5, [pc, #52]	; (800aeac <__libc_init_array+0x38>)
 800ae78:	4c0d      	ldr	r4, [pc, #52]	; (800aeb0 <__libc_init_array+0x3c>)
 800ae7a:	1b64      	subs	r4, r4, r5
 800ae7c:	10a4      	asrs	r4, r4, #2
 800ae7e:	2600      	movs	r6, #0
 800ae80:	42a6      	cmp	r6, r4
 800ae82:	d109      	bne.n	800ae98 <__libc_init_array+0x24>
 800ae84:	4d0b      	ldr	r5, [pc, #44]	; (800aeb4 <__libc_init_array+0x40>)
 800ae86:	4c0c      	ldr	r4, [pc, #48]	; (800aeb8 <__libc_init_array+0x44>)
 800ae88:	f000 f8f8 	bl	800b07c <_init>
 800ae8c:	1b64      	subs	r4, r4, r5
 800ae8e:	10a4      	asrs	r4, r4, #2
 800ae90:	2600      	movs	r6, #0
 800ae92:	42a6      	cmp	r6, r4
 800ae94:	d105      	bne.n	800aea2 <__libc_init_array+0x2e>
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae9c:	4798      	blx	r3
 800ae9e:	3601      	adds	r6, #1
 800aea0:	e7ee      	b.n	800ae80 <__libc_init_array+0xc>
 800aea2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea6:	4798      	blx	r3
 800aea8:	3601      	adds	r6, #1
 800aeaa:	e7f2      	b.n	800ae92 <__libc_init_array+0x1e>
 800aeac:	0800b0ec 	.word	0x0800b0ec
 800aeb0:	0800b0ec 	.word	0x0800b0ec
 800aeb4:	0800b0ec 	.word	0x0800b0ec
 800aeb8:	0800b0f0 	.word	0x0800b0f0

0800aebc <malloc>:
 800aebc:	4b02      	ldr	r3, [pc, #8]	; (800aec8 <malloc+0xc>)
 800aebe:	4601      	mov	r1, r0
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	f000 b863 	b.w	800af8c <_malloc_r>
 800aec6:	bf00      	nop
 800aec8:	2000002c 	.word	0x2000002c

0800aecc <free>:
 800aecc:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <free+0xc>)
 800aece:	4601      	mov	r1, r0
 800aed0:	6818      	ldr	r0, [r3, #0]
 800aed2:	f000 b80b 	b.w	800aeec <_free_r>
 800aed6:	bf00      	nop
 800aed8:	2000002c 	.word	0x2000002c

0800aedc <memset>:
 800aedc:	4402      	add	r2, r0
 800aede:	4603      	mov	r3, r0
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d100      	bne.n	800aee6 <memset+0xa>
 800aee4:	4770      	bx	lr
 800aee6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeea:	e7f9      	b.n	800aee0 <memset+0x4>

0800aeec <_free_r>:
 800aeec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeee:	2900      	cmp	r1, #0
 800aef0:	d048      	beq.n	800af84 <_free_r+0x98>
 800aef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef6:	9001      	str	r0, [sp, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f1a1 0404 	sub.w	r4, r1, #4
 800aefe:	bfb8      	it	lt
 800af00:	18e4      	addlt	r4, r4, r3
 800af02:	f000 f8ad 	bl	800b060 <__malloc_lock>
 800af06:	4a20      	ldr	r2, [pc, #128]	; (800af88 <_free_r+0x9c>)
 800af08:	9801      	ldr	r0, [sp, #4]
 800af0a:	6813      	ldr	r3, [r2, #0]
 800af0c:	4615      	mov	r5, r2
 800af0e:	b933      	cbnz	r3, 800af1e <_free_r+0x32>
 800af10:	6063      	str	r3, [r4, #4]
 800af12:	6014      	str	r4, [r2, #0]
 800af14:	b003      	add	sp, #12
 800af16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af1a:	f000 b8a7 	b.w	800b06c <__malloc_unlock>
 800af1e:	42a3      	cmp	r3, r4
 800af20:	d90b      	bls.n	800af3a <_free_r+0x4e>
 800af22:	6821      	ldr	r1, [r4, #0]
 800af24:	1862      	adds	r2, r4, r1
 800af26:	4293      	cmp	r3, r2
 800af28:	bf04      	itt	eq
 800af2a:	681a      	ldreq	r2, [r3, #0]
 800af2c:	685b      	ldreq	r3, [r3, #4]
 800af2e:	6063      	str	r3, [r4, #4]
 800af30:	bf04      	itt	eq
 800af32:	1852      	addeq	r2, r2, r1
 800af34:	6022      	streq	r2, [r4, #0]
 800af36:	602c      	str	r4, [r5, #0]
 800af38:	e7ec      	b.n	800af14 <_free_r+0x28>
 800af3a:	461a      	mov	r2, r3
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	b10b      	cbz	r3, 800af44 <_free_r+0x58>
 800af40:	42a3      	cmp	r3, r4
 800af42:	d9fa      	bls.n	800af3a <_free_r+0x4e>
 800af44:	6811      	ldr	r1, [r2, #0]
 800af46:	1855      	adds	r5, r2, r1
 800af48:	42a5      	cmp	r5, r4
 800af4a:	d10b      	bne.n	800af64 <_free_r+0x78>
 800af4c:	6824      	ldr	r4, [r4, #0]
 800af4e:	4421      	add	r1, r4
 800af50:	1854      	adds	r4, r2, r1
 800af52:	42a3      	cmp	r3, r4
 800af54:	6011      	str	r1, [r2, #0]
 800af56:	d1dd      	bne.n	800af14 <_free_r+0x28>
 800af58:	681c      	ldr	r4, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	6053      	str	r3, [r2, #4]
 800af5e:	4421      	add	r1, r4
 800af60:	6011      	str	r1, [r2, #0]
 800af62:	e7d7      	b.n	800af14 <_free_r+0x28>
 800af64:	d902      	bls.n	800af6c <_free_r+0x80>
 800af66:	230c      	movs	r3, #12
 800af68:	6003      	str	r3, [r0, #0]
 800af6a:	e7d3      	b.n	800af14 <_free_r+0x28>
 800af6c:	6825      	ldr	r5, [r4, #0]
 800af6e:	1961      	adds	r1, r4, r5
 800af70:	428b      	cmp	r3, r1
 800af72:	bf04      	itt	eq
 800af74:	6819      	ldreq	r1, [r3, #0]
 800af76:	685b      	ldreq	r3, [r3, #4]
 800af78:	6063      	str	r3, [r4, #4]
 800af7a:	bf04      	itt	eq
 800af7c:	1949      	addeq	r1, r1, r5
 800af7e:	6021      	streq	r1, [r4, #0]
 800af80:	6054      	str	r4, [r2, #4]
 800af82:	e7c7      	b.n	800af14 <_free_r+0x28>
 800af84:	b003      	add	sp, #12
 800af86:	bd30      	pop	{r4, r5, pc}
 800af88:	200000b4 	.word	0x200000b4

0800af8c <_malloc_r>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	1ccd      	adds	r5, r1, #3
 800af90:	f025 0503 	bic.w	r5, r5, #3
 800af94:	3508      	adds	r5, #8
 800af96:	2d0c      	cmp	r5, #12
 800af98:	bf38      	it	cc
 800af9a:	250c      	movcc	r5, #12
 800af9c:	2d00      	cmp	r5, #0
 800af9e:	4606      	mov	r6, r0
 800afa0:	db01      	blt.n	800afa6 <_malloc_r+0x1a>
 800afa2:	42a9      	cmp	r1, r5
 800afa4:	d903      	bls.n	800afae <_malloc_r+0x22>
 800afa6:	230c      	movs	r3, #12
 800afa8:	6033      	str	r3, [r6, #0]
 800afaa:	2000      	movs	r0, #0
 800afac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afae:	f000 f857 	bl	800b060 <__malloc_lock>
 800afb2:	4921      	ldr	r1, [pc, #132]	; (800b038 <_malloc_r+0xac>)
 800afb4:	680a      	ldr	r2, [r1, #0]
 800afb6:	4614      	mov	r4, r2
 800afb8:	b99c      	cbnz	r4, 800afe2 <_malloc_r+0x56>
 800afba:	4f20      	ldr	r7, [pc, #128]	; (800b03c <_malloc_r+0xb0>)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	b923      	cbnz	r3, 800afca <_malloc_r+0x3e>
 800afc0:	4621      	mov	r1, r4
 800afc2:	4630      	mov	r0, r6
 800afc4:	f000 f83c 	bl	800b040 <_sbrk_r>
 800afc8:	6038      	str	r0, [r7, #0]
 800afca:	4629      	mov	r1, r5
 800afcc:	4630      	mov	r0, r6
 800afce:	f000 f837 	bl	800b040 <_sbrk_r>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	d123      	bne.n	800b01e <_malloc_r+0x92>
 800afd6:	230c      	movs	r3, #12
 800afd8:	6033      	str	r3, [r6, #0]
 800afda:	4630      	mov	r0, r6
 800afdc:	f000 f846 	bl	800b06c <__malloc_unlock>
 800afe0:	e7e3      	b.n	800afaa <_malloc_r+0x1e>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	1b5b      	subs	r3, r3, r5
 800afe6:	d417      	bmi.n	800b018 <_malloc_r+0x8c>
 800afe8:	2b0b      	cmp	r3, #11
 800afea:	d903      	bls.n	800aff4 <_malloc_r+0x68>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	441c      	add	r4, r3
 800aff0:	6025      	str	r5, [r4, #0]
 800aff2:	e004      	b.n	800affe <_malloc_r+0x72>
 800aff4:	6863      	ldr	r3, [r4, #4]
 800aff6:	42a2      	cmp	r2, r4
 800aff8:	bf0c      	ite	eq
 800affa:	600b      	streq	r3, [r1, #0]
 800affc:	6053      	strne	r3, [r2, #4]
 800affe:	4630      	mov	r0, r6
 800b000:	f000 f834 	bl	800b06c <__malloc_unlock>
 800b004:	f104 000b 	add.w	r0, r4, #11
 800b008:	1d23      	adds	r3, r4, #4
 800b00a:	f020 0007 	bic.w	r0, r0, #7
 800b00e:	1ac2      	subs	r2, r0, r3
 800b010:	d0cc      	beq.n	800afac <_malloc_r+0x20>
 800b012:	1a1b      	subs	r3, r3, r0
 800b014:	50a3      	str	r3, [r4, r2]
 800b016:	e7c9      	b.n	800afac <_malloc_r+0x20>
 800b018:	4622      	mov	r2, r4
 800b01a:	6864      	ldr	r4, [r4, #4]
 800b01c:	e7cc      	b.n	800afb8 <_malloc_r+0x2c>
 800b01e:	1cc4      	adds	r4, r0, #3
 800b020:	f024 0403 	bic.w	r4, r4, #3
 800b024:	42a0      	cmp	r0, r4
 800b026:	d0e3      	beq.n	800aff0 <_malloc_r+0x64>
 800b028:	1a21      	subs	r1, r4, r0
 800b02a:	4630      	mov	r0, r6
 800b02c:	f000 f808 	bl	800b040 <_sbrk_r>
 800b030:	3001      	adds	r0, #1
 800b032:	d1dd      	bne.n	800aff0 <_malloc_r+0x64>
 800b034:	e7cf      	b.n	800afd6 <_malloc_r+0x4a>
 800b036:	bf00      	nop
 800b038:	200000b4 	.word	0x200000b4
 800b03c:	200000b8 	.word	0x200000b8

0800b040 <_sbrk_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	4d06      	ldr	r5, [pc, #24]	; (800b05c <_sbrk_r+0x1c>)
 800b044:	2300      	movs	r3, #0
 800b046:	4604      	mov	r4, r0
 800b048:	4608      	mov	r0, r1
 800b04a:	602b      	str	r3, [r5, #0]
 800b04c:	f7f5 fdf8 	bl	8000c40 <_sbrk>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d102      	bne.n	800b05a <_sbrk_r+0x1a>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	b103      	cbz	r3, 800b05a <_sbrk_r+0x1a>
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	2000097c 	.word	0x2000097c

0800b060 <__malloc_lock>:
 800b060:	4801      	ldr	r0, [pc, #4]	; (800b068 <__malloc_lock+0x8>)
 800b062:	f000 b809 	b.w	800b078 <__retarget_lock_acquire_recursive>
 800b066:	bf00      	nop
 800b068:	20000984 	.word	0x20000984

0800b06c <__malloc_unlock>:
 800b06c:	4801      	ldr	r0, [pc, #4]	; (800b074 <__malloc_unlock+0x8>)
 800b06e:	f000 b804 	b.w	800b07a <__retarget_lock_release_recursive>
 800b072:	bf00      	nop
 800b074:	20000984 	.word	0x20000984

0800b078 <__retarget_lock_acquire_recursive>:
 800b078:	4770      	bx	lr

0800b07a <__retarget_lock_release_recursive>:
 800b07a:	4770      	bx	lr

0800b07c <_init>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	bf00      	nop
 800b080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b082:	bc08      	pop	{r3}
 800b084:	469e      	mov	lr, r3
 800b086:	4770      	bx	lr

0800b088 <_fini>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	bf00      	nop
 800b08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b08e:	bc08      	pop	{r3}
 800b090:	469e      	mov	lr, r3
 800b092:	4770      	bx	lr
