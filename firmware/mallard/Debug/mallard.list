
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800aa80  0800aa80  0001aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aad0  0800aad0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800aad0  0800aad0  0001aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aad8  0800aad8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aadc  0800aadc  0001aadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800aae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000090  0800ab70  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800ab70  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e0b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040fb  00000000  00000000  00042ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00046fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  00048698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dff4  00000000  00000000  00049be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a47c  00000000  00000000  00077bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001170ab  00000000  00000000  00092050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a90fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061e8  00000000  00000000  001a9150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800aa68 	.word	0x0800aa68

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	0800aa68 	.word	0x0800aa68

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <blinky>:

// ************************************************* START FUNCTIONS HERE ***************************************

// Blinky!!
void blinky(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	e011      	b.n	8000514 <blinky+0x30>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <blinky+0x40>)
 80004f4:	f001 ff50 	bl	8002398 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fc81 	bl	8000e00 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <blinky+0x40>)
 8000504:	f001 ff48 	bl	8002398 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fc79 	bl	8000e00 <HAL_Delay>
	for(int i = 0; i < 2; i ++)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3301      	adds	r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	ddea      	ble.n	80004f0 <blinky+0xc>
	}
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	48000400 	.word	0x48000400

08000528 <HAL_RTCEx_WakeUpTimerEventCallback>:

}

// Wakeup RTC Interupt
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8000530:	f000 f824 	bl	800057c <SystemClock_Config>
	HAL_ResumeTick();
 8000534:	f000 fc88 	bl	8000e48 <HAL_ResumeTick>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fbe7 	bl	8000d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f818 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f996 	bl	800087c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000550:	f000 f934 	bl	80007bc <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 8000554:	f009 fe86 	bl	800a264 <MX_USB_HOST_Init>
  MX_RTC_Init();
 8000558:	f000 f95e 	bl	8000818 <MX_RTC_Init>
  MX_ADC1_Init();
 800055c:	f000 f8b6 	bl	80006cc <MX_ADC1_Init>


  // ************************************************* START BEFORE WHILE CODE HERE ***************************************

  // Bootup Blinkys
  blinky();
 8000560:	f7ff ffc0 	bl	80004e4 <blinky>
  HAL_Delay(3000);
 8000564:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000568:	f000 fc4a 	bl	8000e00 <HAL_Delay>
  blinky();
 800056c:	f7ff ffba 	bl	80004e4 <blinky>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000570:	f009 fe9e 	bl	800a2b0 <MX_USB_HOST_Process>

    // ************************************************* START WHILE CODE HERE ***************************************

    // Enter sleep for 30s, this is currently commented out because it makes programming the STM32 much more difficult
    // enterSleepMode();
    blinky();
 8000574:	f7ff ffb6 	bl	80004e4 <blinky>
    MX_USB_HOST_Process();
 8000578:	e7fa      	b.n	8000570 <main+0x30>
	...

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0ba      	sub	sp, #232	; 0xe8
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f00a f99c 	bl	800a8c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	228c      	movs	r2, #140	; 0x8c
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00a f98e 	bl	800a8c8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ac:	f003 fbf6 	bl	8003d9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b0:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <SystemClock_Config+0x148>)
 80005b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005b6:	4a43      	ldr	r2, [pc, #268]	; (80006c4 <SystemClock_Config+0x148>)
 80005b8:	f023 0318 	bic.w	r3, r3, #24
 80005bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80005c0:	231c      	movs	r3, #28
 80005c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80005de:	2390      	movs	r3, #144	; 0x90
 80005e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ea:	2301      	movs	r3, #1
 80005ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005f0:	2305      	movs	r3, #5
 80005f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 71;
 80005f6:	2347      	movs	r3, #71	; 0x47
 80005f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000608:	2306      	movs	r3, #6
 800060a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fc56 	bl	8003ec4 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800061e:	f000 f9d1 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2303      	movs	r3, #3
 800062a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800062e:	2390      	movs	r3, #144	; 0x90
 8000630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000642:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f004 f861 	bl	8004710 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000654:	f000 f9b6 	bl	80009c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <SystemClock_Config+0x14c>)
 800065a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800065c:	2300      	movs	r3, #0
 800065e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000660:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800066c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000670:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000674:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000676:	2301      	movs	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800067a:	2305      	movs	r3, #5
 800067c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800067e:	2314      	movs	r3, #20
 8000680:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800068e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000692:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fa40 	bl	8004b1c <HAL_RCCEx_PeriphCLKConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80006a2:	f000 f98f 	bl	80009c4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006aa:	f003 fb95 	bl	8003dd8 <HAL_PWREx_ControlVoltageScaling>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80006b4:	f000 f986 	bl	80009c4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b8:	f004 fd2c 	bl	8005114 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006bc:	bf00      	nop
 80006be:	37e8      	adds	r7, #232	; 0xe8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	00026020 	.word	0x00026020

080006cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ee:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <MX_ADC1_Init+0xe0>)
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <MX_ADC1_Init+0xe4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <MX_ADC1_Init+0xe0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fa:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <MX_ADC1_Init+0xe0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MX_ADC1_Init+0xe0>)
 800070e:	2204      	movs	r2, #4
 8000710:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_ADC1_Init+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000720:	2201      	movs	r2, #1
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_ADC1_Init+0xe0>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_ADC1_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074e:	4817      	ldr	r0, [pc, #92]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000750:	f000 fd2a 	bl	80011a8 <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800075a:	f000 f933 	bl	80009c4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <MX_ADC1_Init+0xe0>)
 800076a:	f001 faa9 	bl	8001cc0 <HAL_ADCEx_MultiModeConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000774:	f000 f926 	bl	80009c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_ADC1_Init+0xe8>)
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077c:	2306      	movs	r3, #6
 800077e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_ADC1_Init+0xec>)
 8000786:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000788:	2304      	movs	r3, #4
 800078a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_ADC1_Init+0xe0>)
 8000796:	f000 fe61 	bl	800145c <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007a0:	f000 f910 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000140 	.word	0x20000140
 80007b0:	50040000 	.word	0x50040000
 80007b4:	04300002 	.word	0x04300002
 80007b8:	407f0000 	.word	0x407f0000

080007bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <MX_LPUART1_UART_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_LPUART1_UART_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_LPUART1_UART_Init+0x50>)
 80007fa:	f005 f835 	bl	8005868 <HAL_UART_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 f8de 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000bc 	.word	0x200000bc
 8000810:	40008000 	.word	0x40008000
 8000814:	00033324 	.word	0x00033324

08000818 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_RTC_Init+0x5c>)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_RTC_Init+0x60>)
 8000820:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_RTC_Init+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_RTC_Init+0x5c>)
 800082a:	227f      	movs	r2, #127	; 0x7f
 800082c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_RTC_Init+0x5c>)
 8000830:	22ff      	movs	r2, #255	; 0xff
 8000832:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_RTC_Init+0x5c>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_RTC_Init+0x5c>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_RTC_Init+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_RTC_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_RTC_Init+0x5c>)
 800084e:	f004 fe3f 	bl	80054d0 <HAL_RTC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000858:	f000 f8b4 	bl	80009c4 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_RTC_Init+0x5c>)
 8000862:	f004 ff47 	bl	80056f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800086c:	f000 f8aa 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001a8 	.word	0x200001a8
 8000878:	40002800 	.word	0x40002800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <MX_GPIO_Init+0x134>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a46      	ldr	r2, [pc, #280]	; (80009b0 <MX_GPIO_Init+0x134>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a40      	ldr	r2, [pc, #256]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a3a      	ldr	r2, [pc, #232]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a34      	ldr	r2, [pc, #208]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80008f2:	f003 fad7 	bl	8003ea4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_GPIO_Init+0x134>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000914:	4827      	ldr	r0, [pc, #156]	; (80009b4 <MX_GPIO_Init+0x138>)
 8000916:	f001 fd27 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8000920:	4825      	ldr	r0, [pc, #148]	; (80009b8 <MX_GPIO_Init+0x13c>)
 8000922:	f001 fd21 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_GPIO_Init+0x140>)
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <MX_GPIO_Init+0x144>)
 800093c:	f001 fb82 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000940:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4816      	ldr	r0, [pc, #88]	; (80009b4 <MX_GPIO_Init+0x138>)
 800095a:	f001 fb73 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 800095e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_GPIO_Init+0x13c>)
 8000974:	f001 fb66 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000978:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_GPIO_Init+0x13c>)
 8000992:	f001 fb57 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2028      	movs	r0, #40	; 0x28
 800099c:	f001 fb1b 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009a0:	2028      	movs	r0, #40	; 0x28
 80009a2:	f001 fb34 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000400 	.word	0x48000400
 80009b8:	48001800 	.word	0x48001800
 80009bc:	10110000 	.word	0x10110000
 80009c0:	48000800 	.word	0x48000800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	; 0x60
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <HAL_ADC_MspInit+0x74>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d123      	bne.n	8000a82 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a6e:	230b      	movs	r3, #11
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_ADC_MspInit+0x7c>)
 8000a7e:	f001 fae1 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	50040000 	.word	0x50040000
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000800 	.word	0x48000800

08000a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0x80>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12a      	bne.n	8000b10 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0x84>)
 8000abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x84>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x84>)
 8000ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_UART_MspInit+0x84>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x84>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_UART_MspInit+0x84>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000aea:	f003 f9db 	bl	8003ea4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b00:	2308      	movs	r3, #8
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_UART_MspInit+0x88>)
 8000b0c:	f001 fa9a 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40008000 	.word	0x40008000
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48001800 	.word	0x48001800

08000b24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_RTC_MspInit+0x3c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10f      	bne.n	8000b56 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_RTC_MspInit+0x40>)
 8000b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <HAL_RTC_MspInit+0x40>)
 8000b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f001 fa43 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f001 fa5c 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40002800 	.word	0x40002800
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f904 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <RTC_WKUP_IRQHandler+0x10>)
 8000bc2:	f004 fe2b 	bl	800581c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001a8 	.word	0x200001a8

08000bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bd8:	f001 fbf8 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <OTG_FS_IRQHandler+0x10>)
 8000be6:	f001 fe7b 	bl	80028e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000678 	.word	0x20000678

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f009 fe16 	bl	800a854 <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20050000 	.word	0x20050000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	200000ac 	.word	0x200000ac
 8000c5c:	20000990 	.word	0x20000990

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <SystemInit+0x5c>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <SystemInit+0x5c>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <SystemInit+0x60>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <SystemInit+0x60>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <SystemInit+0x60>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <SystemInit+0x60>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <SystemInit+0x60>)
 8000c8c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c90:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <SystemInit+0x60>)
 8000c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <SystemInit+0x60>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <SystemInit+0x60>)
 8000ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SystemInit+0x60>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc8:	f7ff ffca 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ccc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cce:	e003      	b.n	8000cd8 <LoopCopyDataInit>

08000cd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cd6:	3104      	adds	r1, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ce0:	d3f6      	bcc.n	8000cd0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ce4:	e002      	b.n	8000cec <LoopFillZerobss>

08000ce6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ce6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ce8:	f842 3b04 	str.w	r3, [r2], #4

08000cec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <LoopForever+0x16>)
	cmp	r2, r3
 8000cee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cf0:	d3f9      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f009 fdb5 	bl	800a860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cf6:	f7ff fc23 	bl	8000540 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cfc:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000d00:	0800aae0 	.word	0x0800aae0
	ldr	r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d08:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000d0c:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000d10:	2000098c 	.word	0x2000098c

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>

08000d16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f001 f94d 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f80e 	bl	8000d48 <HAL_InitTick>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	e001      	b.n	8000d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d38:	f7ff fe4a 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d023      	beq.n	8000da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_InitTick+0x70>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f959 	bl	800202a <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10f      	bne.n	8000d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d809      	bhi.n	8000d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f001 f923 	bl	8001fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_InitTick+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e004      	b.n	8000da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e001      	b.n	8000da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	200001cc 	.word	0x200001cc

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200001cc 	.word	0x200001cc

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008

08000e48 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_ResumeTick+0x1c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_ResumeTick+0x1c>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	609a      	str	r2, [r3, #8]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3360      	adds	r3, #96	; 0x60
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <LL_ADC_SetOffset+0x44>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	4313      	orrs	r3, r2
 8000f00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f08:	bf00      	nop
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	03fff000 	.word	0x03fff000

08000f18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3360      	adds	r3, #96	; 0x60
 8000f26:	461a      	mov	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3360      	adds	r3, #96	; 0x60
 8000f54:	461a      	mov	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f6e:	bf00      	nop
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	615a      	str	r2, [r3, #20]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3330      	adds	r3, #48	; 0x30
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	4413      	add	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	211f      	movs	r1, #31
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	0e9b      	lsrs	r3, r3, #26
 8000fd8:	f003 011f 	and.w	r1, r3, #31
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3314      	adds	r3, #20
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	0e5b      	lsrs	r3, r3, #25
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	0d1b      	lsrs	r3, r3, #20
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	2107      	movs	r1, #7
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	0d1b      	lsrs	r3, r3, #20
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0318 	and.w	r3, r3, #24
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001074:	40d9      	lsrs	r1, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	400b      	ands	r3, r1
 800107a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800107e:	431a      	orrs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	0007ffff 	.word	0x0007ffff

08001098 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6093      	str	r3, [r2, #8]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010d0:	d101      	bne.n	80010d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001120:	d101      	bne.n	8001126 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <LL_ADC_IsEnabled+0x18>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <LL_ADC_IsEnabled+0x1a>
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b04      	cmp	r3, #4
 800116c:	d101      	bne.n	8001172 <LL_ADC_REG_IsConversionOngoing+0x18>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	2b08      	cmp	r3, #8
 8001192:	d101      	bne.n	8001198 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e139      	b.n	8001436 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d109      	bne.n	80011e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fc21 	bl	8000a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff67 	bl	80010bc <LL_ADC_IsDeepPowerDownEnabled>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff4d 	bl	8001098 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff82 	bl	800110c <LL_ADC_IsInternalRegulatorEnabled>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d115      	bne.n	800123a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff66 	bl	80010e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001218:	4b89      	ldr	r3, [pc, #548]	; (8001440 <HAL_ADC_Init+0x298>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	4a89      	ldr	r2, [pc, #548]	; (8001444 <HAL_ADC_Init+0x29c>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	099b      	lsrs	r3, r3, #6
 8001226:	3301      	adds	r3, #1
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800122c:	e002      	b.n	8001234 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3b01      	subs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f9      	bne.n	800122e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff64 	bl	800110c <LL_ADC_IsInternalRegulatorEnabled>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	f043 0210 	orr.w	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125a:	f043 0201 	orr.w	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff75 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 8001270:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 80d2 	bne.w	8001424 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 80ce 	bne.w	8001424 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001290:	f043 0202 	orr.w	r2, r3, #2
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff49 	bl	8001134 <LL_ADC_IsEnabled>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d115      	bne.n	80012d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012a8:	4867      	ldr	r0, [pc, #412]	; (8001448 <HAL_ADC_Init+0x2a0>)
 80012aa:	f7ff ff43 	bl	8001134 <LL_ADC_IsEnabled>
 80012ae:	4604      	mov	r4, r0
 80012b0:	4866      	ldr	r0, [pc, #408]	; (800144c <HAL_ADC_Init+0x2a4>)
 80012b2:	f7ff ff3f 	bl	8001134 <LL_ADC_IsEnabled>
 80012b6:	4603      	mov	r3, r0
 80012b8:	431c      	orrs	r4, r3
 80012ba:	4865      	ldr	r0, [pc, #404]	; (8001450 <HAL_ADC_Init+0x2a8>)
 80012bc:	f7ff ff3a 	bl	8001134 <LL_ADC_IsEnabled>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4323      	orrs	r3, r4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d105      	bne.n	80012d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4861      	ldr	r0, [pc, #388]	; (8001454 <HAL_ADC_Init+0x2ac>)
 80012d0:	f7ff fdca 	bl	8000e68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7e5b      	ldrb	r3, [r3, #25]
 80012d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	3b01      	subs	r3, #1
 8001308:	045b      	lsls	r3, r3, #17
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	2b00      	cmp	r3, #0
 8001316:	d009      	beq.n	800132c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_ADC_Init+0x2b0>)
 8001334:	4013      	ands	r3, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	430b      	orrs	r3, r1
 800133e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff08 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 800134a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff15 	bl	8001180 <LL_ADC_INJ_IsConversionOngoing>
 8001356:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d140      	bne.n	80013e0 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d13d      	bne.n	80013e0 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7e1b      	ldrb	r3, [r3, #24]
 800136c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800136e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001376:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001386:	f023 0306 	bic.w	r3, r3, #6
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	69b9      	ldr	r1, [r7, #24]
 8001390:	430b      	orrs	r3, r1
 8001392:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800139a:	2b01      	cmp	r3, #1
 800139c:	d118      	bne.n	80013d0 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013ba:	4311      	orrs	r1, r2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013c0:	430a      	orrs	r2, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0201 	orr.w	r2, r2, #1
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	e007      	b.n	80013e0 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d10c      	bne.n	8001402 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f023 010f 	bic.w	r1, r3, #15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	1e5a      	subs	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001400:	e007      	b.n	8001412 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 020f 	bic.w	r2, r2, #15
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	659a      	str	r2, [r3, #88]	; 0x58
 8001422:	e007      	b.n	8001434 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f043 0210 	orr.w	r2, r3, #16
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001434:	7ffb      	ldrb	r3, [r7, #31]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000
 8001444:	053e2d63 	.word	0x053e2d63
 8001448:	50040000 	.word	0x50040000
 800144c:	50040100 	.word	0x50040100
 8001450:	50040200 	.word	0x50040200
 8001454:	50040300 	.word	0x50040300
 8001458:	fff0c007 	.word	0xfff0c007

0800145c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0b6      	sub	sp, #216	; 0xd8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_ADC_ConfigChannel+0x22>
 800147a:	2302      	movs	r3, #2
 800147c:	e3e3      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x7ea>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe65 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 83c4 	bne.w	8001c20 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b05      	cmp	r3, #5
 800149e:	d824      	bhi.n	80014ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	3b02      	subs	r3, #2
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d81b      	bhi.n	80014e2 <HAL_ADC_ConfigChannel+0x86>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <HAL_ADC_ConfigChannel+0x54>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014c9 	.word	0x080014c9
 80014b8:	080014d1 	.word	0x080014d1
 80014bc:	080014d9 	.word	0x080014d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	220c      	movs	r2, #12
 80014c4:	605a      	str	r2, [r3, #4]
          break;
 80014c6:	e011      	b.n	80014ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2212      	movs	r2, #18
 80014cc:	605a      	str	r2, [r3, #4]
          break;
 80014ce:	e00d      	b.n	80014ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	2218      	movs	r2, #24
 80014d4:	605a      	str	r2, [r3, #4]
          break;
 80014d6:	e009      	b.n	80014ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	605a      	str	r2, [r3, #4]
          break;
 80014e0:	e004      	b.n	80014ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2206      	movs	r2, #6
 80014e6:	605a      	str	r2, [r3, #4]
          break;
 80014e8:	e000      	b.n	80014ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80014ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	f7ff fd51 	bl	8000fa0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fe29 	bl	800115a <LL_ADC_REG_IsConversionOngoing>
 8001508:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe35 	bl	8001180 <LL_ADC_INJ_IsConversionOngoing>
 8001516:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800151a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 81c1 	bne.w	80018a6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001524:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 81bc 	bne.w	80018a6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001536:	d10f      	bne.n	8001558 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fd58 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fd12 	bl	8000f7a <LL_ADC_SetSamplingTimeCommonConfig>
 8001556:	e00e      	b.n	8001576 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	461a      	mov	r2, r3
 8001566:	f7ff fd47 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd02 	bl	8000f7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d00a      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6919      	ldr	r1, [r3, #16]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015a8:	f7ff fc92 	bl	8000ed0 <LL_ADC_SetOffset>
 80015ac:	e17b      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fcaf 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10a      	bne.n	80015da <HAL_ADC_ConfigChannel+0x17e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fca4 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	0e9b      	lsrs	r3, r3, #26
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	e01e      	b.n	8001618 <HAL_ADC_ConfigChannel+0x1bc>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fc99 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001608:	2320      	movs	r3, #32
 800160a:	e004      	b.n	8001616 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800160c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1d4>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0e9b      	lsrs	r3, r3, #26
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	e018      	b.n	8001662 <HAL_ADC_ConfigChannel+0x206>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800164c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001654:	2320      	movs	r3, #32
 8001656:	e004      	b.n	8001662 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001658:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001662:	429a      	cmp	r2, r3
 8001664:	d106      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc68 	bl	8000f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fc4c 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10a      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x244>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2101      	movs	r1, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc41 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	0e9b      	lsrs	r3, r3, #26
 800169a:	f003 021f 	and.w	r2, r3, #31
 800169e:	e01e      	b.n	80016de <HAL_ADC_ConfigChannel+0x282>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fc36 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80016be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80016c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80016ce:	2320      	movs	r3, #32
 80016d0:	e004      	b.n	80016dc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80016d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x29a>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	e018      	b.n	8001728 <HAL_ADC_ConfigChannel+0x2cc>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800170a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800170e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800171a:	2320      	movs	r3, #32
 800171c:	e004      	b.n	8001728 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800171e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001728:	429a      	cmp	r2, r3
 800172a:	d106      	bne.n	800173a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc05 	bl	8000f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2102      	movs	r1, #2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fbe9 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x30a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2102      	movs	r1, #2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fbde 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	0e9b      	lsrs	r3, r3, #26
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	e01e      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x348>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2102      	movs	r1, #2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fbd3 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800178c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001794:	2320      	movs	r3, #32
 8001796:	e004      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x360>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0e9b      	lsrs	r3, r3, #26
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	e016      	b.n	80017ea <HAL_ADC_ConfigChannel+0x38e>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80017ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80017d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80017dc:	2320      	movs	r3, #32
 80017de:	e004      	b.n	80017ea <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80017e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d106      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2200      	movs	r2, #0
 80017f4:	2102      	movs	r1, #2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fba4 	bl	8000f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2103      	movs	r1, #3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fb88 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10a      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x3cc>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2103      	movs	r1, #3
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fb7d 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	0e9b      	lsrs	r3, r3, #26
 8001822:	f003 021f 	and.w	r2, r3, #31
 8001826:	e017      	b.n	8001858 <HAL_ADC_ConfigChannel+0x3fc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2103      	movs	r1, #3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fb72 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001842:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800184a:	2320      	movs	r3, #32
 800184c:	e003      	b.n	8001856 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800184e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x414>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0e9b      	lsrs	r3, r3, #26
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	e011      	b.n	8001894 <HAL_ADC_ConfigChannel+0x438>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800187e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001880:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001888:	2320      	movs	r3, #32
 800188a:	e003      	b.n	8001894 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800188c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001894:	429a      	cmp	r2, r3
 8001896:	d106      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	2103      	movs	r1, #3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb4f 	bl	8000f44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fc42 	bl	8001134 <LL_ADC_IsEnabled>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 8140 	bne.w	8001b38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6819      	ldr	r1, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	461a      	mov	r2, r3
 80018c6:	f7ff fbc3 	bl	8001050 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	4a8f      	ldr	r2, [pc, #572]	; (8001b0c <HAL_ADC_ConfigChannel+0x6b0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	f040 8131 	bne.w	8001b38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10b      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x4a2>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	3301      	adds	r3, #1
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	bf94      	ite	ls
 80018f6:	2301      	movls	r3, #1
 80018f8:	2300      	movhi	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	e019      	b.n	8001932 <HAL_ADC_ConfigChannel+0x4d6>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800190c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800190e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001916:	2320      	movs	r3, #32
 8001918:	e003      	b.n	8001922 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800191a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	2b09      	cmp	r3, #9
 800192a:	bf94      	ite	ls
 800192c:	2301      	movls	r3, #1
 800192e:	2300      	movhi	r3, #0
 8001930:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001932:	2b00      	cmp	r3, #0
 8001934:	d079      	beq.n	8001a2a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193e:	2b00      	cmp	r3, #0
 8001940:	d107      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x4f6>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0e9b      	lsrs	r3, r3, #26
 8001948:	3301      	adds	r3, #1
 800194a:	069b      	lsls	r3, r3, #26
 800194c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001950:	e015      	b.n	800197e <HAL_ADC_ConfigChannel+0x522>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001962:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800196a:	2320      	movs	r3, #32
 800196c:	e003      	b.n	8001976 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	3301      	adds	r3, #1
 8001978:	069b      	lsls	r3, r3, #26
 800197a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_ADC_ConfigChannel+0x542>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0e9b      	lsrs	r3, r3, #26
 8001990:	3301      	adds	r3, #1
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	e017      	b.n	80019ce <HAL_ADC_ConfigChannel+0x572>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80019ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80019b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e003      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80019ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2101      	movs	r1, #1
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	ea42 0103 	orr.w	r1, r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10a      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x598>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	0e9b      	lsrs	r3, r3, #26
 80019e4:	3301      	adds	r3, #1
 80019e6:	f003 021f 	and.w	r2, r3, #31
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	051b      	lsls	r3, r3, #20
 80019f2:	e018      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x5ca>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	e003      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f003 021f 	and.w	r2, r3, #31
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a26:	430b      	orrs	r3, r1
 8001a28:	e081      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x5ea>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	0e9b      	lsrs	r3, r3, #26
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	069b      	lsls	r3, r3, #26
 8001a40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a44:	e015      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x616>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	e003      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	069b      	lsls	r3, r3, #26
 8001a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x636>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	3301      	adds	r3, #1
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	e017      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x666>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	61fb      	str	r3, [r7, #28]
  return result;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e003      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	ea42 0103 	orr.w	r1, r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x692>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 021f 	and.w	r2, r3, #31
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b1e      	subs	r3, #30
 8001ae6:	051b      	lsls	r3, r3, #20
 8001ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aec:	e01e      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x6d0>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	613b      	str	r3, [r7, #16]
  return result;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d104      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001b06:	2320      	movs	r3, #32
 8001b08:	e006      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x6bc>
 8001b0a:	bf00      	nop
 8001b0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f003 021f 	and.w	r2, r3, #31
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	3b1e      	subs	r3, #30
 8001b26:	051b      	lsls	r3, r3, #20
 8001b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	6892      	ldr	r2, [r2, #8]
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff fa60 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_ADC_ConfigChannel+0x7f4>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d07a      	beq.n	8001c3a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b44:	4843      	ldr	r0, [pc, #268]	; (8001c54 <HAL_ADC_ConfigChannel+0x7f8>)
 8001b46:	f7ff f9b5 	bl	8000eb4 <LL_ADC_GetCommonPathInternalCh>
 8001b4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a41      	ldr	r2, [pc, #260]	; (8001c58 <HAL_ADC_ConfigChannel+0x7fc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d12c      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d126      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a3c      	ldr	r2, [pc, #240]	; (8001c5c <HAL_ADC_ConfigChannel+0x800>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x71c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a3b      	ldr	r2, [pc, #236]	; (8001c60 <HAL_ADC_ConfigChannel+0x804>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d15d      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b80:	4619      	mov	r1, r3
 8001b82:	4834      	ldr	r0, [pc, #208]	; (8001c54 <HAL_ADC_ConfigChannel+0x7f8>)
 8001b84:	f7ff f983 	bl	8000e8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_ADC_ConfigChannel+0x808>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	4a36      	ldr	r2, [pc, #216]	; (8001c68 <HAL_ADC_ConfigChannel+0x80c>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	099b      	lsrs	r3, r3, #6
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ba2:	e002      	b.n	8001baa <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f9      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb0:	e040      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	; (8001c6c <HAL_ADC_ConfigChannel+0x810>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d118      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x792>
 8001bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d112      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <HAL_ADC_ConfigChannel+0x800>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_ADC_ConfigChannel+0x780>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <HAL_ADC_ConfigChannel+0x804>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d12d      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be4:	4619      	mov	r1, r3
 8001be6:	481b      	ldr	r0, [pc, #108]	; (8001c54 <HAL_ADC_ConfigChannel+0x7f8>)
 8001be8:	f7ff f951 	bl	8000e8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bec:	e024      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_ADC_ConfigChannel+0x814>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d120      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d11a      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <HAL_ADC_ConfigChannel+0x800>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d115      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c16:	4619      	mov	r1, r3
 8001c18:	480e      	ldr	r0, [pc, #56]	; (8001c54 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c1a:	f7ff f938 	bl	8000e8e <LL_ADC_SetCommonPathInternalCh>
 8001c1e:	e00c      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c32:	e002      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c34:	bf00      	nop
 8001c36:	e000      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001c42:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	37d8      	adds	r7, #216	; 0xd8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	80080000 	.word	0x80080000
 8001c54:	50040300 	.word	0x50040300
 8001c58:	c7520000 	.word	0xc7520000
 8001c5c:	50040000 	.word	0x50040000
 8001c60:	50040200 	.word	0x50040200
 8001c64:	20000000 	.word	0x20000000
 8001c68:	053e2d63 	.word	0x053e2d63
 8001c6c:	cb840000 	.word	0xcb840000
 8001c70:	80000001 	.word	0x80000001

08001c74 <LL_ADC_IsEnabled>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <LL_ADC_IsEnabled+0x18>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <LL_ADC_IsEnabled+0x1a>
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_REG_IsConversionOngoing>:
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d101      	bne.n	8001cb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b0a1      	sub	sp, #132	; 0x84
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e093      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001cea:	2300      	movs	r3, #0
 8001cec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d102      	bne.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001cf8:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e001      	b.n	8001d02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10b      	bne.n	8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e072      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ffb9 	bl	8001c9a <LL_ADC_REG_IsConversionOngoing>
 8001d28:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ffb3 	bl	8001c9a <LL_ADC_REG_IsConversionOngoing>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d154      	bne.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d151      	bne.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001d42:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d02c      	beq.n	8001da6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d5e:	035b      	lsls	r3, r3, #13
 8001d60:	430b      	orrs	r3, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d68:	4829      	ldr	r0, [pc, #164]	; (8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d6a:	f7ff ff83 	bl	8001c74 <LL_ADC_IsEnabled>
 8001d6e:	4604      	mov	r4, r0
 8001d70:	4828      	ldr	r0, [pc, #160]	; (8001e14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d72:	f7ff ff7f 	bl	8001c74 <LL_ADC_IsEnabled>
 8001d76:	4603      	mov	r3, r0
 8001d78:	431c      	orrs	r4, r3
 8001d7a:	4828      	ldr	r0, [pc, #160]	; (8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d7c:	f7ff ff7a 	bl	8001c74 <LL_ADC_IsEnabled>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4323      	orrs	r3, r4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d137      	bne.n	8001df8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d90:	f023 030f 	bic.w	r3, r3, #15
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	6811      	ldr	r1, [r2, #0]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	6892      	ldr	r2, [r2, #8]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001da4:	e028      	b.n	8001df8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001db2:	4817      	ldr	r0, [pc, #92]	; (8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001db4:	f7ff ff5e 	bl	8001c74 <LL_ADC_IsEnabled>
 8001db8:	4604      	mov	r4, r0
 8001dba:	4816      	ldr	r0, [pc, #88]	; (8001e14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dbc:	f7ff ff5a 	bl	8001c74 <LL_ADC_IsEnabled>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	431c      	orrs	r4, r3
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001dc6:	f7ff ff55 	bl	8001c74 <LL_ADC_IsEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4323      	orrs	r3, r4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d112      	bne.n	8001df8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dda:	f023 030f 	bic.w	r3, r3, #15
 8001dde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001de0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001de2:	e009      	b.n	8001df8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001df6:	e000      	b.n	8001dfa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001df8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001e02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3784      	adds	r7, #132	; 0x84
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	50040000 	.word	0x50040000
 8001e14:	50040100 	.word	0x50040100
 8001e18:	50040300 	.word	0x50040300
 8001e1c:	50040200 	.word	0x50040200

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002052:	e166      	b.n	8002322 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2101      	movs	r1, #1
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8158 	beq.w	800231c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d00b      	beq.n	800208c <HAL_GPIO_Init+0x48>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d007      	beq.n	800208c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002080:	2b11      	cmp	r3, #17
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b12      	cmp	r3, #18
 800208a:	d130      	bne.n	80020ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020c2:	2201      	movs	r2, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	f003 0201 	and.w	r2, r3, #1
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0xea>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b12      	cmp	r3, #18
 800212c:	d123      	bne.n	8002176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	6939      	ldr	r1, [r7, #16]
 8002172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0203 	and.w	r2, r3, #3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80b2 	beq.w	800231c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b8:	4b61      	ldr	r3, [pc, #388]	; (8002340 <HAL_GPIO_Init+0x2fc>)
 80021ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021bc:	4a60      	ldr	r2, [pc, #384]	; (8002340 <HAL_GPIO_Init+0x2fc>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6613      	str	r3, [r2, #96]	; 0x60
 80021c4:	4b5e      	ldr	r3, [pc, #376]	; (8002340 <HAL_GPIO_Init+0x2fc>)
 80021c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021d0:	4a5c      	ldr	r2, [pc, #368]	; (8002344 <HAL_GPIO_Init+0x300>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021fa:	d02b      	beq.n	8002254 <HAL_GPIO_Init+0x210>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_GPIO_Init+0x304>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d025      	beq.n	8002250 <HAL_GPIO_Init+0x20c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a51      	ldr	r2, [pc, #324]	; (800234c <HAL_GPIO_Init+0x308>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01f      	beq.n	800224c <HAL_GPIO_Init+0x208>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a50      	ldr	r2, [pc, #320]	; (8002350 <HAL_GPIO_Init+0x30c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d019      	beq.n	8002248 <HAL_GPIO_Init+0x204>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a4f      	ldr	r2, [pc, #316]	; (8002354 <HAL_GPIO_Init+0x310>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_Init+0x200>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a4e      	ldr	r2, [pc, #312]	; (8002358 <HAL_GPIO_Init+0x314>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_Init+0x1fc>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_GPIO_Init+0x318>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1f8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_GPIO_Init+0x31c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_Init+0x1f4>
 8002234:	2307      	movs	r3, #7
 8002236:	e00e      	b.n	8002256 <HAL_GPIO_Init+0x212>
 8002238:	2308      	movs	r3, #8
 800223a:	e00c      	b.n	8002256 <HAL_GPIO_Init+0x212>
 800223c:	2306      	movs	r3, #6
 800223e:	e00a      	b.n	8002256 <HAL_GPIO_Init+0x212>
 8002240:	2305      	movs	r3, #5
 8002242:	e008      	b.n	8002256 <HAL_GPIO_Init+0x212>
 8002244:	2304      	movs	r3, #4
 8002246:	e006      	b.n	8002256 <HAL_GPIO_Init+0x212>
 8002248:	2303      	movs	r3, #3
 800224a:	e004      	b.n	8002256 <HAL_GPIO_Init+0x212>
 800224c:	2302      	movs	r3, #2
 800224e:	e002      	b.n	8002256 <HAL_GPIO_Init+0x212>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_GPIO_Init+0x212>
 8002254:	2300      	movs	r3, #0
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4093      	lsls	r3, r2
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002266:	4937      	ldr	r1, [pc, #220]	; (8002344 <HAL_GPIO_Init+0x300>)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_GPIO_Init+0x320>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002298:	4a32      	ldr	r2, [pc, #200]	; (8002364 <HAL_GPIO_Init+0x320>)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022c8:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002316:	4a13      	ldr	r2, [pc, #76]	; (8002364 <HAL_GPIO_Init+0x320>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f ae91 	bne.w	8002054 <HAL_GPIO_Init+0x10>
  }
}
 8002332:	bf00      	nop
 8002334:	bf00      	nop
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000
 8002344:	40010000 	.word	0x40010000
 8002348:	48000400 	.word	0x48000400
 800234c:	48000800 	.word	0x48000800
 8002350:	48000c00 	.word	0x48000c00
 8002354:	48001000 	.word	0x48001000
 8002358:	48001400 	.word	0x48001400
 800235c:	48001800 	.word	0x48001800
 8002360:	48001c00 	.word	0x48001c00
 8002364:	40010400 	.word	0x40010400

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002384:	e002      	b.n	800238c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4013      	ands	r3, r2
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43d9      	mvns	r1, r3
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	400b      	ands	r3, r1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	619a      	str	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f806 	bl	80023fc <HAL_GPIO_EXTI_Callback>
  }
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40010400 	.word	0x40010400

080023fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002414:	b08f      	sub	sp, #60	; 0x3c
 8002416:	af0a      	add	r7, sp, #40	; 0x28
 8002418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e054      	b.n	80024ce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f007 ff6e 	bl	800a320 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2203      	movs	r2, #3
 8002448:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fe7c 	bl	8006160 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	687e      	ldr	r6, [r7, #4]
 8002470:	466d      	mov	r5, sp
 8002472:	f106 0410 	add.w	r4, r6, #16
 8002476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002482:	e885 0003 	stmia.w	r5, {r0, r1}
 8002486:	1d33      	adds	r3, r6, #4
 8002488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248a:	6838      	ldr	r0, [r7, #0]
 800248c:	f003 fe2b 	bl	80060e6 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2101      	movs	r1, #1
 8002496:	4618      	mov	r0, r3
 8002498:	f003 fe73 	bl	8006182 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	687e      	ldr	r6, [r7, #4]
 80024a4:	466d      	mov	r5, sp
 80024a6:	f106 0410 	add.w	r4, r6, #16
 80024aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ba:	1d33      	adds	r3, r6, #4
 80024bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024be:	6838      	ldr	r0, [r7, #0]
 80024c0:	f003 ff82 	bl	80063c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024d6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80024d6:	b590      	push	{r4, r7, lr}
 80024d8:	b089      	sub	sp, #36	; 0x24
 80024da:	af04      	add	r7, sp, #16
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	4608      	mov	r0, r1
 80024e0:	4611      	mov	r1, r2
 80024e2:	461a      	mov	r2, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	70fb      	strb	r3, [r7, #3]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70bb      	strb	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_HCD_HC_Init+0x28>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e076      	b.n	80025ec <HAL_HCD_HC_Init+0x116>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	333d      	adds	r3, #61	; 0x3d
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3338      	adds	r3, #56	; 0x38
 8002526:	787a      	ldrb	r2, [r7, #1]
 8002528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3340      	adds	r3, #64	; 0x40
 8002538:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800253a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3339      	adds	r3, #57	; 0x39
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	333f      	adds	r3, #63	; 0x3f
 800255c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	78ba      	ldrb	r2, [r7, #2]
 8002566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800256a:	b2d0      	uxtb	r0, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	333a      	adds	r3, #58	; 0x3a
 8002578:	4602      	mov	r2, r0
 800257a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800257c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002580:	2b00      	cmp	r3, #0
 8002582:	da09      	bge.n	8002598 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	212c      	movs	r1, #44	; 0x2c
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	333b      	adds	r3, #59	; 0x3b
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e008      	b.n	80025aa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	212c      	movs	r1, #44	; 0x2c
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	333b      	adds	r3, #59	; 0x3b
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	333c      	adds	r3, #60	; 0x3c
 80025b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025bc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	787c      	ldrb	r4, [r7, #1]
 80025c4:	78ba      	ldrb	r2, [r7, #2]
 80025c6:	78f9      	ldrb	r1, [r7, #3]
 80025c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025ca:	9302      	str	r3, [sp, #8]
 80025cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4623      	mov	r3, r4
 80025da:	f004 f839 	bl	8006650 <USB_HC_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}

080025f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_HCD_HC_Halt+0x1e>
 800260e:	2302      	movs	r3, #2
 8002610:	e00f      	b.n	8002632 <HAL_HCD_HC_Halt+0x3e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fa15 	bl	8006a52 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	4608      	mov	r0, r1
 8002646:	4611      	mov	r1, r2
 8002648:	461a      	mov	r2, r3
 800264a:	4603      	mov	r3, r0
 800264c:	70fb      	strb	r3, [r7, #3]
 800264e:	460b      	mov	r3, r1
 8002650:	70bb      	strb	r3, [r7, #2]
 8002652:	4613      	mov	r3, r2
 8002654:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	333b      	adds	r3, #59	; 0x3b
 8002664:	78ba      	ldrb	r2, [r7, #2]
 8002666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	333f      	adds	r3, #63	; 0x3f
 8002676:	787a      	ldrb	r2, [r7, #1]
 8002678:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800267a:	7c3b      	ldrb	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d112      	bne.n	80026a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3342      	adds	r3, #66	; 0x42
 800268e:	2203      	movs	r2, #3
 8002690:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	333d      	adds	r3, #61	; 0x3d
 80026a0:	7f3a      	ldrb	r2, [r7, #28]
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e008      	b.n	80026b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3342      	adds	r3, #66	; 0x42
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	f200 80c6 	bhi.w	800284c <HAL_HCD_HC_SubmitRequest+0x210>
 80026c0:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80026c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c6:	bf00      	nop
 80026c8:	080026d9 	.word	0x080026d9
 80026cc:	08002839 	.word	0x08002839
 80026d0:	0800273d 	.word	0x0800273d
 80026d4:	080027bb 	.word	0x080027bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80026d8:	7c3b      	ldrb	r3, [r7, #16]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	f040 80b8 	bne.w	8002850 <HAL_HCD_HC_SubmitRequest+0x214>
 80026e0:	78bb      	ldrb	r3, [r7, #2]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 80b4 	bne.w	8002850 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80026e8:	8b3b      	ldrh	r3, [r7, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	3355      	adds	r3, #85	; 0x55
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3355      	adds	r3, #85	; 0x55
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3342      	adds	r3, #66	; 0x42
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002726:	e093      	b.n	8002850 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3342      	adds	r3, #66	; 0x42
 8002736:	2202      	movs	r2, #2
 8002738:	701a      	strb	r2, [r3, #0]
      break;
 800273a:	e089      	b.n	8002850 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800273c:	78bb      	ldrb	r3, [r7, #2]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11d      	bne.n	800277e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3355      	adds	r3, #85	; 0x55
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3342      	adds	r3, #66	; 0x42
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002768:	e073      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3342      	adds	r3, #66	; 0x42
 8002778:	2202      	movs	r2, #2
 800277a:	701a      	strb	r2, [r3, #0]
      break;
 800277c:	e069      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	3354      	adds	r3, #84	; 0x54
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3342      	adds	r3, #66	; 0x42
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
      break;
 80027a4:	e055      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3342      	adds	r3, #66	; 0x42
 80027b4:	2202      	movs	r2, #2
 80027b6:	701a      	strb	r2, [r3, #0]
      break;
 80027b8:	e04b      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027ba:	78bb      	ldrb	r3, [r7, #2]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11d      	bne.n	80027fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3355      	adds	r3, #85	; 0x55
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3342      	adds	r3, #66	; 0x42
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027e6:	e034      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3342      	adds	r3, #66	; 0x42
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
      break;
 80027fa:	e02a      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3354      	adds	r3, #84	; 0x54
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	3342      	adds	r3, #66	; 0x42
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
      break;
 8002822:	e016      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3342      	adds	r3, #66	; 0x42
 8002832:	2202      	movs	r2, #2
 8002834:	701a      	strb	r2, [r3, #0]
      break;
 8002836:	e00c      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3342      	adds	r3, #66	; 0x42
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
      break;
 800284a:	e002      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002850:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3344      	adds	r3, #68	; 0x44
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	8b3a      	ldrh	r2, [r7, #24]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	202c      	movs	r0, #44	; 0x2c
 800286c:	fb00 f303 	mul.w	r3, r0, r3
 8002870:	440b      	add	r3, r1
 8002872:	334c      	adds	r3, #76	; 0x4c
 8002874:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3360      	adds	r3, #96	; 0x60
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3350      	adds	r3, #80	; 0x50
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3339      	adds	r3, #57	; 0x39
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3361      	adds	r3, #97	; 0x61
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	222c      	movs	r2, #44	; 0x2c
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	3338      	adds	r3, #56	; 0x38
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f003 ffb5 	bl	8006840 <USB_HC_StartXfer>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fd23 	bl	8006342 <USB_GetMode>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	f040 80ef 	bne.w	8002ae2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fd07 	bl	800631c <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80e5 	beq.w	8002ae0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fcfe 	bl	800631c <USB_ReadInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800292a:	d104      	bne.n	8002936 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002934:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fcee 	bl	800631c <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800294a:	d104      	bne.n	8002956 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002954:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fcde 	bl	800631c <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800296a:	d104      	bne.n	8002976 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002974:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fcce 	bl	800631c <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d103      	bne.n	8002992 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2202      	movs	r2, #2
 8002990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fcc0 	bl	800631c <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a6:	d115      	bne.n	80029d4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d108      	bne.n	80029d4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f007 fd2e 	bl	800a424 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fd78 	bl	80064c4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fc9f 	bl	800631c <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e8:	d102      	bne.n	80029f0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f001 f962 	bl	8003cb4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fc91 	bl	800631c <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d106      	bne.n	8002a12 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f007 fcf1 	bl	800a3ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2208      	movs	r2, #8
 8002a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fc80 	bl	800631c <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d101      	bne.n	8002a2a <HAL_HCD_IRQHandler+0x14a>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_HCD_IRQHandler+0x14c>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0210 	bic.w	r2, r2, #16
 8002a3e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f001 f865 	bl	8003b10 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0210 	orr.w	r2, r2, #16
 8002a54:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fc5e 	bl	800631c <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a6a:	d13a      	bne.n	8002ae2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 ffdd 	bl	8006a30 <USB_HC_ReadInterrupt>
 8002a76:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e025      	b.n	8002aca <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d018      	beq.n	8002ac4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f897 	bl	8002be4 <HCD_HC_IN_IRQHandler>
 8002ab6:	e005      	b.n	8002ac4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fc90 	bl	80033e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d3d4      	bcc.n	8002a7e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002adc:	615a      	str	r2, [r3, #20]
 8002ade:	e000      	b.n	8002ae2 <HAL_HCD_IRQHandler+0x202>
      return;
 8002ae0:	bf00      	nop
    }
  }
}
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_HCD_Start+0x16>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e013      	b.n	8002b26 <HAL_HCD_Start+0x3e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fb17 	bl	800613e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fd38 	bl	800658c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_HCD_Stop+0x16>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e00d      	b.n	8002b60 <HAL_HCD_Stop+0x32>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 f89a 	bl	8006c8a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 fcdf 	bl	8006538 <USB_ResetPort>
 8002b7a:	4603      	mov	r3, r0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3360      	adds	r3, #96	; 0x60
 8002b9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fd37 	bl	800662c <USB_GetCurrentFrame>
 8002bbe:	4603      	mov	r3, r0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fd12 	bl	80065fe <USB_GetHostSpeed>
 8002bda:	4603      	mov	r3, r0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d119      	bne.n	8002c48 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	461a      	mov	r2, r3
 8002c22:	2304      	movs	r3, #4
 8002c24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	0151      	lsls	r1, r2, #5
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	440a      	add	r2, r1
 8002c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	60d3      	str	r3, [r2, #12]
 8002c46:	e101      	b.n	8002e4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5e:	d12b      	bne.n	8002cb8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3361      	adds	r3, #97	; 0x61
 8002c82:	2207      	movs	r2, #7
 8002c84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	0151      	lsls	r1, r2, #5
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	440a      	add	r2, r1
 8002c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 fece 	bl	8006a52 <USB_HC_Halt>
 8002cb6:	e0c9      	b.n	8002e4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d109      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2320      	movs	r3, #32
 8002cde:	6093      	str	r3, [r2, #8]
 8002ce0:	e0b4      	b.n	8002e4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d133      	bne.n	8002d60 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	0151      	lsls	r1, r2, #5
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	440a      	add	r2, r1
 8002d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3361      	adds	r3, #97	; 0x61
 8002d26:	2205      	movs	r2, #5
 8002d28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	461a      	mov	r2, r3
 8002d38:	2310      	movs	r3, #16
 8002d3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 fe7a 	bl	8006a52 <USB_HC_Halt>
 8002d5e:	e075      	b.n	8002e4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d134      	bne.n	8002de2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	0151      	lsls	r1, r2, #5
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	440a      	add	r2, r1
 8002d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3361      	adds	r3, #97	; 0x61
 8002da6:	2208      	movs	r2, #8
 8002da8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	461a      	mov	r2, r3
 8002db8:	2310      	movs	r3, #16
 8002dba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fe39 	bl	8006a52 <USB_HC_Halt>
 8002de0:	e034      	b.n	8002e4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d129      	bne.n	8002e4c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	0151      	lsls	r1, r2, #5
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e12:	f043 0302 	orr.w	r3, r3, #2
 8002e16:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3361      	adds	r3, #97	; 0x61
 8002e26:	2206      	movs	r2, #6
 8002e28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 fe0c 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e62:	d122      	bne.n	8002eaa <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	0151      	lsls	r1, r2, #5
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	440a      	add	r2, r1
 8002e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fddf 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ea8:	e298      	b.n	80033dc <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	f040 80fd 	bne.w	80030bc <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3361      	adds	r3, #97	; 0x61
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	335c      	adds	r3, #92	; 0x5c
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	333f      	adds	r3, #63	; 0x3f
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	333f      	adds	r3, #63	; 0x3f
 8002f1a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d121      	bne.n	8002f64 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	0151      	lsls	r1, r2, #5
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	440a      	add	r2, r1
 8002f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fd81 	bl	8006a52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2310      	movs	r3, #16
 8002f60:	6093      	str	r3, [r2, #8]
 8002f62:	e066      	b.n	8003032 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	333f      	adds	r3, #63	; 0x3f
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d127      	bne.n	8002fc8 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	0151      	lsls	r1, r2, #5
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	440a      	add	r2, r1
 8002f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f96:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3360      	adds	r3, #96	; 0x60
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	b2d9      	uxtb	r1, r3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	202c      	movs	r0, #44	; 0x2c
 8002fb4:	fb00 f303 	mul.w	r3, r0, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	3360      	adds	r3, #96	; 0x60
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f007 fa3d 	bl	800a440 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fc6:	e034      	b.n	8003032 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	333f      	adds	r3, #63	; 0x3f
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d12a      	bne.n	8003032 <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3360      	adds	r3, #96	; 0x60
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3354      	adds	r3, #84	; 0x54
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	f083 0301 	eor.w	r3, r3, #1
 8003002:	b2d8      	uxtb	r0, r3
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3354      	adds	r3, #84	; 0x54
 8003012:	4602      	mov	r2, r0
 8003014:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	b2d9      	uxtb	r1, r3
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	202c      	movs	r0, #44	; 0x2c
 8003020:	fb00 f303 	mul.w	r3, r0, r3
 8003024:	4413      	add	r3, r2
 8003026:	3360      	adds	r3, #96	; 0x60
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f007 fa07 	bl	800a440 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d12b      	bne.n	8003092 <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3348      	adds	r3, #72	; 0x48
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	202c      	movs	r0, #44	; 0x2c
 8003050:	fb00 f202 	mul.w	r2, r0, r2
 8003054:	440a      	add	r2, r1
 8003056:	3240      	adds	r2, #64	; 0x40
 8003058:	8812      	ldrh	r2, [r2, #0]
 800305a:	fbb3 f3f2 	udiv	r3, r3, r2
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 81ba 	beq.w	80033dc <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3354      	adds	r3, #84	; 0x54
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2d8      	uxtb	r0, r3
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3354      	adds	r3, #84	; 0x54
 800308c:	4602      	mov	r2, r0
 800308e:	701a      	strb	r2, [r3, #0]
}
 8003090:	e1a4      	b.n	80033dc <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3354      	adds	r3, #84	; 0x54
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2d8      	uxtb	r0, r3
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3354      	adds	r3, #84	; 0x54
 80030b6:	4602      	mov	r2, r0
 80030b8:	701a      	strb	r2, [r3, #0]
}
 80030ba:	e18f      	b.n	80033dc <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	f040 8106 	bne.w	80032e0 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	0151      	lsls	r1, r2, #5
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	440a      	add	r2, r1
 80030ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ee:	f023 0302 	bic.w	r3, r3, #2
 80030f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3361      	adds	r3, #97	; 0x61
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d109      	bne.n	800311c <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3360      	adds	r3, #96	; 0x60
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e0c9      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3361      	adds	r3, #97	; 0x61
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d109      	bne.n	8003144 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3360      	adds	r3, #96	; 0x60
 800313e:	2205      	movs	r2, #5
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	e0b5      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3361      	adds	r3, #97	; 0x61
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d009      	beq.n	800316c <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3361      	adds	r3, #97	; 0x61
 8003166:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003168:	2b08      	cmp	r3, #8
 800316a:	d150      	bne.n	800320e <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	335c      	adds	r3, #92	; 0x5c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	202c      	movs	r0, #44	; 0x2c
 8003184:	fb00 f303 	mul.w	r3, r0, r3
 8003188:	440b      	add	r3, r1
 800318a:	335c      	adds	r3, #92	; 0x5c
 800318c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	335c      	adds	r3, #92	; 0x5c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d912      	bls.n	80031c8 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	335c      	adds	r3, #92	; 0x5c
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3360      	adds	r3, #96	; 0x60
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031c6:	e073      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3360      	adds	r3, #96	; 0x60
 80031d6:	2202      	movs	r2, #2
 80031d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031f0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031f8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800320c:	e050      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3361      	adds	r3, #97	; 0x61
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d122      	bne.n	8003268 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3360      	adds	r3, #96	; 0x60
 8003230:	2202      	movs	r2, #2
 8003232:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800324a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003252:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e023      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3361      	adds	r3, #97	; 0x61
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b07      	cmp	r3, #7
 800327a:	d119      	bne.n	80032b0 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	335c      	adds	r3, #92	; 0x5c
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	202c      	movs	r0, #44	; 0x2c
 8003294:	fb00 f303 	mul.w	r3, r0, r3
 8003298:	440b      	add	r3, r1
 800329a:	335c      	adds	r3, #92	; 0x5c
 800329c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	3360      	adds	r3, #96	; 0x60
 80032ac:	2204      	movs	r2, #4
 80032ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	461a      	mov	r2, r3
 80032be:	2302      	movs	r3, #2
 80032c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	b2d9      	uxtb	r1, r3
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	202c      	movs	r0, #44	; 0x2c
 80032cc:	fb00 f303 	mul.w	r3, r0, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	3360      	adds	r3, #96	; 0x60
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f007 f8b1 	bl	800a440 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032de:	e07d      	b.n	80033dc <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d172      	bne.n	80033dc <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	333f      	adds	r3, #63	; 0x3f
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d121      	bne.n	800334e <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	335c      	adds	r3, #92	; 0x5c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	0151      	lsls	r1, r2, #5
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	440a      	add	r2, r1
 8003332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f003 fb83 	bl	8006a52 <USB_HC_Halt>
 800334c:	e03d      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	333f      	adds	r3, #63	; 0x3f
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	333f      	adds	r3, #63	; 0x3f
 8003370:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003372:	2b02      	cmp	r3, #2
 8003374:	d129      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	335c      	adds	r3, #92	; 0x5c
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3361      	adds	r3, #97	; 0x61
 8003396:	2203      	movs	r2, #3
 8003398:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	0151      	lsls	r1, r2, #5
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	440a      	add	r2, r1
 80033b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fb44 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	461a      	mov	r2, r3
 80033d8:	2310      	movs	r3, #16
 80033da:	6093      	str	r3, [r2, #8]
}
 80033dc:	bf00      	nop
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d119      	bne.n	8003448 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	2304      	movs	r3, #4
 8003424:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4413      	add	r3, r2
 800342e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	0151      	lsls	r1, r2, #5
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	440a      	add	r2, r1
 800343c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003446:	e35f      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b20      	cmp	r3, #32
 800345c:	d13e      	bne.n	80034dc <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346a:	461a      	mov	r2, r3
 800346c:	2320      	movs	r3, #32
 800346e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	333d      	adds	r3, #61	; 0x3d
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	f040 8341 	bne.w	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
      hhcd->hc[ch_num].do_ping = 0U;
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	333d      	adds	r3, #61	; 0x3d
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3360      	adds	r3, #96	; 0x60
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	0151      	lsls	r1, r2, #5
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	440a      	add	r2, r1
 80034c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f003 fabc 	bl	8006a52 <USB_HC_Halt>
}
 80034da:	e315      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	d122      	bne.n	800353a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	0151      	lsls	r1, r2, #5
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	440a      	add	r2, r1
 800350a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f003 fa97 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003530:	461a      	mov	r2, r3
 8003532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003536:	6093      	str	r3, [r2, #8]
}
 8003538:	e2e6      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d150      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	335c      	adds	r3, #92	; 0x5c
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d111      	bne.n	800359c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	333d      	adds	r3, #61	; 0x3d
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	2340      	movs	r3, #64	; 0x40
 800359a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	0151      	lsls	r1, r2, #5
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	440a      	add	r2, r1
 80035b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 fa43 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	461a      	mov	r2, r3
 80035da:	2301      	movs	r3, #1
 80035dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	212c      	movs	r1, #44	; 0x2c
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	3361      	adds	r3, #97	; 0x61
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
}
 80035f0:	e28a      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d13c      	bne.n	8003682 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	3361      	adds	r3, #97	; 0x61
 8003616:	2204      	movs	r2, #4
 8003618:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	333d      	adds	r3, #61	; 0x3d
 8003628:	2201      	movs	r2, #1
 800362a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	4413      	add	r3, r2
 8003638:	335c      	adds	r3, #92	; 0x5c
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	0151      	lsls	r1, r2, #5
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	440a      	add	r2, r1
 8003654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f003 f9f2 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	461a      	mov	r2, r3
 800367c:	2340      	movs	r3, #64	; 0x40
 800367e:	6093      	str	r3, [r2, #8]
}
 8003680:	e242      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4413      	add	r3, r2
 800368a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d12a      	bne.n	80036ee <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a4:	461a      	mov	r2, r3
 80036a6:	2308      	movs	r3, #8
 80036a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 f9bc 	bl	8006a52 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	3361      	adds	r3, #97	; 0x61
 80036e8:	2205      	movs	r2, #5
 80036ea:	701a      	strb	r2, [r3, #0]
}
 80036ec:	e20c      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d133      	bne.n	800376c <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	335c      	adds	r3, #92	; 0x5c
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	3361      	adds	r3, #97	; 0x61
 8003724:	2203      	movs	r2, #3
 8003726:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	0151      	lsls	r1, r2, #5
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	440a      	add	r2, r1
 800373e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f003 f97d 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	2310      	movs	r3, #16
 8003768:	6093      	str	r3, [r2, #8]
}
 800376a:	e1cd      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d12a      	bne.n	80037d8 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	3361      	adds	r3, #97	; 0x61
 8003790:	2206      	movs	r2, #6
 8003792:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	0151      	lsls	r1, r2, #5
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	440a      	add	r2, r1
 80037aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 f947 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	461a      	mov	r2, r3
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	6093      	str	r3, [r2, #8]
}
 80037d6:	e197      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ee:	d134      	bne.n	800385a <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	0151      	lsls	r1, r2, #5
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	440a      	add	r2, r1
 8003806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f003 f919 	bl	8006a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	2310      	movs	r3, #16
 8003830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	461a      	mov	r2, r3
 8003840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003844:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	3361      	adds	r3, #97	; 0x61
 8003854:	2208      	movs	r2, #8
 8003856:	701a      	strb	r2, [r3, #0]
}
 8003858:	e156      	b.n	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	f040 814b 	bne.w	8003b08 <HCD_HC_OUT_IRQHandler+0x724>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	440a      	add	r2, r1
 8003888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800388c:	f023 0302 	bic.w	r3, r3, #2
 8003890:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3361      	adds	r3, #97	; 0x61
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d179      	bne.n	800399a <HCD_HC_OUT_IRQHandler+0x5b6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3360      	adds	r3, #96	; 0x60
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	212c      	movs	r1, #44	; 0x2c
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	333f      	adds	r3, #63	; 0x3f
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d00a      	beq.n	80038e2 <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	333f      	adds	r3, #63	; 0x3f
 80038da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038dc:	2b03      	cmp	r3, #3
 80038de:	f040 80fc 	bne.w	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
        if (hhcd->Init.dma_enable == 1U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d142      	bne.n	8003970 <HCD_HC_OUT_IRQHandler+0x58c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	334c      	adds	r3, #76	; 0x4c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80ed 	beq.w	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	334c      	adds	r3, #76	; 0x4c
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	202c      	movs	r0, #44	; 0x2c
 8003916:	fb00 f202 	mul.w	r2, r0, r2
 800391a:	440a      	add	r2, r1
 800391c:	3240      	adds	r2, #64	; 0x40
 800391e:	8812      	ldrh	r2, [r2, #0]
 8003920:	4413      	add	r3, r2
 8003922:	3b01      	subs	r3, #1
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	202c      	movs	r0, #44	; 0x2c
 800392a:	fb00 f202 	mul.w	r2, r0, r2
 800392e:	440a      	add	r2, r1
 8003930:	3240      	adds	r2, #64	; 0x40
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	fbb3 f3f2 	udiv	r3, r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80ca 	beq.w	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3355      	adds	r3, #85	; 0x55
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	f083 0301 	eor.w	r3, r3, #1
 800395a:	b2d8      	uxtb	r0, r3
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3355      	adds	r3, #85	; 0x55
 800396a:	4602      	mov	r2, r0
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e0b4      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3355      	adds	r3, #85	; 0x55
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	f083 0301 	eor.w	r3, r3, #1
 8003984:	b2d8      	uxtb	r0, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3355      	adds	r3, #85	; 0x55
 8003994:	4602      	mov	r2, r0
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e09f      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	3361      	adds	r3, #97	; 0x61
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d109      	bne.n	80039c2 <HCD_HC_OUT_IRQHandler+0x5de>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	212c      	movs	r1, #44	; 0x2c
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	3360      	adds	r3, #96	; 0x60
 80039bc:	2202      	movs	r2, #2
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	e08b      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3361      	adds	r3, #97	; 0x61
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d109      	bne.n	80039ea <HCD_HC_OUT_IRQHandler+0x606>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3360      	adds	r3, #96	; 0x60
 80039e4:	2202      	movs	r2, #2
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e077      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	3361      	adds	r3, #97	; 0x61
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d109      	bne.n	8003a12 <HCD_HC_OUT_IRQHandler+0x62e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	3360      	adds	r3, #96	; 0x60
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e063      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3361      	adds	r3, #97	; 0x61
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d009      	beq.n	8003a3a <HCD_HC_OUT_IRQHandler+0x656>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3361      	adds	r3, #97	; 0x61
 8003a34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d14f      	bne.n	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	335c      	adds	r3, #92	; 0x5c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	202c      	movs	r0, #44	; 0x2c
 8003a52:	fb00 f303 	mul.w	r3, r0, r3
 8003a56:	440b      	add	r3, r1
 8003a58:	335c      	adds	r3, #92	; 0x5c
 8003a5a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	335c      	adds	r3, #92	; 0x5c
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d912      	bls.n	8003a96 <HCD_HC_OUT_IRQHandler+0x6b2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	212c      	movs	r1, #44	; 0x2c
 8003a76:	fb01 f303 	mul.w	r3, r1, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	335c      	adds	r3, #92	; 0x5c
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	212c      	movs	r1, #44	; 0x2c
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3360      	adds	r3, #96	; 0x60
 8003a90:	2204      	movs	r2, #4
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e021      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6f6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3360      	adds	r3, #96	; 0x60
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003abe:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ac6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2302      	movs	r3, #2
 8003aea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	b2d9      	uxtb	r1, r3
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	202c      	movs	r0, #44	; 0x2c
 8003af6:	fb00 f303 	mul.w	r3, r0, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3360      	adds	r3, #96	; 0x60
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f006 fc9c 	bl	800a440 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b08:	bf00      	nop
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	0c5b      	lsrs	r3, r3, #17
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b44:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d004      	beq.n	8003b56 <HCD_RXQLVL_IRQHandler+0x46>
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	f000 80a9 	beq.w	8003ca6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b54:	e0aa      	b.n	8003cac <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a6 	beq.w	8003caa <HCD_RXQLVL_IRQHandler+0x19a>
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3344      	adds	r3, #68	; 0x44
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 809b 	beq.w	8003caa <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3350      	adds	r3, #80	; 0x50
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	441a      	add	r2, r3
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	202c      	movs	r0, #44	; 0x2c
 8003b8e:	fb00 f303 	mul.w	r3, r0, r3
 8003b92:	440b      	add	r3, r1
 8003b94:	334c      	adds	r3, #76	; 0x4c
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d87a      	bhi.n	8003c92 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	3344      	adds	r3, #68	; 0x44
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f002 fb88 	bl	80062ca <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3344      	adds	r3, #68	; 0x44
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	441a      	add	r2, r3
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	202c      	movs	r0, #44	; 0x2c
 8003bd4:	fb00 f303 	mul.w	r3, r0, r3
 8003bd8:	440b      	add	r3, r1
 8003bda:	3344      	adds	r3, #68	; 0x44
 8003bdc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	212c      	movs	r1, #44	; 0x2c
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	3350      	adds	r3, #80	; 0x50
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	441a      	add	r2, r3
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	202c      	movs	r0, #44	; 0x2c
 8003bf8:	fb00 f303 	mul.w	r3, r0, r3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3350      	adds	r3, #80	; 0x50
 8003c00:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	0cdb      	lsrs	r3, r3, #19
 8003c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c16:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	3340      	adds	r3, #64	; 0x40
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d13c      	bne.n	8003caa <HCD_RXQLVL_IRQHandler+0x19a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d039      	beq.n	8003caa <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c4c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c54:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c62:	461a      	mov	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3354      	adds	r3, #84	; 0x54
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f083 0301 	eor.w	r3, r3, #1
 8003c7c:	b2d8      	uxtb	r0, r3
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3354      	adds	r3, #84	; 0x54
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	701a      	strb	r2, [r3, #0]
      break;
 8003c90:	e00b      	b.n	8003caa <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3360      	adds	r3, #96	; 0x60
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	701a      	strb	r2, [r3, #0]
      break;
 8003ca4:	e001      	b.n	8003caa <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003caa:	bf00      	nop
  }
}
 8003cac:	bf00      	nop
 8003cae:	3728      	adds	r7, #40	; 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ce0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d10b      	bne.n	8003d04 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f006 fb86 	bl	800a408 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f043 0302 	orr.w	r3, r3, #2
 8003d02:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d132      	bne.n	8003d74 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f043 0308 	orr.w	r3, r3, #8
 8003d14:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d126      	bne.n	8003d6e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d113      	bne.n	8003d50 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d32:	d106      	bne.n	8003d42 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f002 fbc2 	bl	80064c4 <USB_InitFSLSPClkSel>
 8003d40:	e011      	b.n	8003d66 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 fbbb 	bl	80064c4 <USB_InitFSLSPClkSel>
 8003d4e:	e00a      	b.n	8003d66 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d64:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f006 fb78 	bl	800a45c <HAL_HCD_PortEnabled_Callback>
 8003d6c:	e002      	b.n	8003d74 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f006 fb82 	bl	800a478 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d103      	bne.n	8003d86 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f043 0320 	orr.w	r3, r3, #32
 8003d84:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	6013      	str	r3, [r2, #0]
}
 8003d92:	bf00      	nop
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003daa:	6013      	str	r3, [r2, #0]
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40007000 	.word	0x40007000

08003dbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40007000 	.word	0x40007000

08003dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de6:	d130      	bne.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de8:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df4:	d038      	beq.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dfe:	4a1e      	ldr	r2, [pc, #120]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2232      	movs	r2, #50	; 0x32
 8003e0c:	fb02 f303 	mul.w	r3, r2, r3
 8003e10:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0c9b      	lsrs	r3, r3, #18
 8003e18:	3301      	adds	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1c:	e002      	b.n	8003e24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e30:	d102      	bne.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f2      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e44:	d110      	bne.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e00f      	b.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e56:	d007      	beq.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e58:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e60:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	431bde83 	.word	0x431bde83

08003e84 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e92:	6053      	str	r3, [r2, #4]
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40007000 	.word	0x40007000

08003ea4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eb2:	6053      	str	r3, [r2, #4]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40007000 	.word	0x40007000

08003ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d102      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f000 bc16 	b.w	8004704 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed8:	4ba0      	ldr	r3, [pc, #640]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee2:	4b9e      	ldr	r3, [pc, #632]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80e4 	beq.w	80040c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4c>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	f040 808b 	bne.w	800401e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	f040 8087 	bne.w	800401e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f10:	4b92      	ldr	r3, [pc, #584]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_OscConfig+0x64>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e3ed      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	4b8b      	ldr	r3, [pc, #556]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_RCC_OscConfig+0x7e>
 8003f38:	4b88      	ldr	r3, [pc, #544]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f40:	e005      	b.n	8003f4e <HAL_RCC_OscConfig+0x8a>
 8003f42:	4b86      	ldr	r3, [pc, #536]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d223      	bcs.n	8003f9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fd80 	bl	8004a5c <RCC_SetFlashLatencyFromMSIRange>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e3ce      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f66:	4b7d      	ldr	r3, [pc, #500]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7c      	ldr	r2, [pc, #496]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f6c:	f043 0308 	orr.w	r3, r3, #8
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b7a      	ldr	r3, [pc, #488]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4977      	ldr	r1, [pc, #476]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f84:	4b75      	ldr	r3, [pc, #468]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	4972      	ldr	r1, [pc, #456]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	e025      	b.n	8003fe6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f9a:	4b70      	ldr	r3, [pc, #448]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a6f      	ldr	r2, [pc, #444]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	496a      	ldr	r1, [pc, #424]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb8:	4b68      	ldr	r3, [pc, #416]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	4965      	ldr	r1, [pc, #404]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fd40 	bl	8004a5c <RCC_SetFlashLatencyFromMSIRange>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e38e      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fe6:	f000 fc75 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8003fea:	4602      	mov	r2, r0
 8003fec:	4b5b      	ldr	r3, [pc, #364]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	495a      	ldr	r1, [pc, #360]	; (8004160 <HAL_RCC_OscConfig+0x29c>)
 8003ff8:	5ccb      	ldrb	r3, [r1, r3]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a58      	ldr	r2, [pc, #352]	; (8004164 <HAL_RCC_OscConfig+0x2a0>)
 8004004:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004006:	4b58      	ldr	r3, [pc, #352]	; (8004168 <HAL_RCC_OscConfig+0x2a4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc fe9c 	bl	8000d48 <HAL_InitTick>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d052      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	e372      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d032      	beq.n	800408c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004026:	4b4d      	ldr	r3, [pc, #308]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a4c      	ldr	r2, [pc, #304]	; (800415c <HAL_RCC_OscConfig+0x298>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004032:	f7fc fed9 	bl	8000de8 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800403a:	f7fc fed5 	bl	8000de8 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e35b      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800404c:	4b43      	ldr	r3, [pc, #268]	; (800415c <HAL_RCC_OscConfig+0x298>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004058:	4b40      	ldr	r3, [pc, #256]	; (800415c <HAL_RCC_OscConfig+0x298>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a3f      	ldr	r2, [pc, #252]	; (800415c <HAL_RCC_OscConfig+0x298>)
 800405e:	f043 0308 	orr.w	r3, r3, #8
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	493a      	ldr	r1, [pc, #232]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	4935      	ldr	r1, [pc, #212]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
 800408a:	e01a      	b.n	80040c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800408c:	4b33      	ldr	r3, [pc, #204]	; (800415c <HAL_RCC_OscConfig+0x298>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a32      	ldr	r2, [pc, #200]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004098:	f7fc fea6 	bl	8000de8 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040a0:	f7fc fea2 	bl	8000de8 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e328      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <HAL_RCC_OscConfig+0x298>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x1dc>
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d073      	beq.n	80041b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_OscConfig+0x21c>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d10e      	bne.n	80040f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d10b      	bne.n	80040f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	4b1e      	ldr	r3, [pc, #120]	; (800415c <HAL_RCC_OscConfig+0x298>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d063      	beq.n	80041b4 <HAL_RCC_OscConfig+0x2f0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d15f      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e305      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x24c>
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a15      	ldr	r2, [pc, #84]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e01d      	b.n	800414c <HAL_RCC_OscConfig+0x288>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x270>
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_RCC_OscConfig+0x298>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a0f      	ldr	r2, [pc, #60]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a0c      	ldr	r2, [pc, #48]	; (800415c <HAL_RCC_OscConfig+0x298>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0x288>
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a08      	ldr	r2, [pc, #32]	; (800415c <HAL_RCC_OscConfig+0x298>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a05      	ldr	r2, [pc, #20]	; (800415c <HAL_RCC_OscConfig+0x298>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fc fe48 	bl	8000de8 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415a:	e010      	b.n	800417e <HAL_RCC_OscConfig+0x2ba>
 800415c:	40021000 	.word	0x40021000
 8004160:	0800aa88 	.word	0x0800aa88
 8004164:	20000000 	.word	0x20000000
 8004168:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fc fe3c 	bl	8000de8 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e2c2      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800417e:	4baf      	ldr	r3, [pc, #700]	; (800443c <HAL_RCC_OscConfig+0x578>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x2a8>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fc fe2c 	bl	8000de8 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fc fe28 	bl	8000de8 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e2ae      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041a6:	4ba5      	ldr	r3, [pc, #660]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x2d0>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d060      	beq.n	8004284 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_OscConfig+0x310>
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	d119      	bne.n	8004202 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d116      	bne.n	8004202 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d4:	4b99      	ldr	r3, [pc, #612]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_OscConfig+0x328>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e28b      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ec:	4b93      	ldr	r3, [pc, #588]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	4990      	ldr	r1, [pc, #576]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004200:	e040      	b.n	8004284 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d023      	beq.n	8004252 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420a:	4b8c      	ldr	r3, [pc, #560]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a8b      	ldr	r2, [pc, #556]	; (800443c <HAL_RCC_OscConfig+0x578>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fc fde7 	bl	8000de8 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421e:	f7fc fde3 	bl	8000de8 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e269      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004230:	4b82      	ldr	r3, [pc, #520]	; (800443c <HAL_RCC_OscConfig+0x578>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b7f      	ldr	r3, [pc, #508]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	497c      	ldr	r1, [pc, #496]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
 8004250:	e018      	b.n	8004284 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b7a      	ldr	r3, [pc, #488]	; (800443c <HAL_RCC_OscConfig+0x578>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a79      	ldr	r2, [pc, #484]	; (800443c <HAL_RCC_OscConfig+0x578>)
 8004258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fc fdc3 	bl	8000de8 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004266:	f7fc fdbf 	bl	8000de8 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e245      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004278:	4b70      	ldr	r3, [pc, #448]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03c      	beq.n	800430a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004298:	4b68      	ldr	r3, [pc, #416]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800429a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429e:	4a67      	ldr	r2, [pc, #412]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fc fd9e 	bl	8000de8 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b0:	f7fc fd9a 	bl	8000de8 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e220      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042c2:	4b5e      	ldr	r3, [pc, #376]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80042c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ef      	beq.n	80042b0 <HAL_RCC_OscConfig+0x3ec>
 80042d0:	e01b      	b.n	800430a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d2:	4b5a      	ldr	r3, [pc, #360]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80042d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d8:	4a58      	ldr	r2, [pc, #352]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fc fd81 	bl	8000de8 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ea:	f7fc fd7d 	bl	8000de8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e203      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042fc:	4b4f      	ldr	r3, [pc, #316]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1ef      	bne.n	80042ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80a6 	beq.w	8004464 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004318:	2300      	movs	r3, #0
 800431a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800431c:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10d      	bne.n	8004344 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004328:	4b44      	ldr	r3, [pc, #272]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	4a43      	ldr	r2, [pc, #268]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004332:	6593      	str	r3, [r2, #88]	; 0x58
 8004334:	4b41      	ldr	r3, [pc, #260]	; (800443c <HAL_RCC_OscConfig+0x578>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004340:	2301      	movs	r3, #1
 8004342:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004344:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <HAL_RCC_OscConfig+0x57c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d118      	bne.n	8004382 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004350:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <HAL_RCC_OscConfig+0x57c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a3a      	ldr	r2, [pc, #232]	; (8004440 <HAL_RCC_OscConfig+0x57c>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435c:	f7fc fd44 	bl	8000de8 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7fc fd40 	bl	8000de8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1c6      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004376:	4b32      	ldr	r3, [pc, #200]	; (8004440 <HAL_RCC_OscConfig+0x57c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d108      	bne.n	800439c <HAL_RCC_OscConfig+0x4d8>
 800438a:	4b2c      	ldr	r3, [pc, #176]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_RCC_OscConfig+0x578>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800439a:	e024      	b.n	80043e6 <HAL_RCC_OscConfig+0x522>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	d110      	bne.n	80043c6 <HAL_RCC_OscConfig+0x502>
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a24      	ldr	r2, [pc, #144]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b4:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	4a20      	ldr	r2, [pc, #128]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c4:	e00f      	b.n	80043e6 <HAL_RCC_OscConfig+0x522>
 80043c6:	4b1d      	ldr	r3, [pc, #116]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d6:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_RCC_OscConfig+0x578>)
 80043de:	f023 0304 	bic.w	r3, r3, #4
 80043e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ee:	f7fc fcfb 	bl	8000de8 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f4:	e00a      	b.n	800440c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f6:	f7fc fcf7 	bl	8000de8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f241 3288 	movw	r2, #5000	; 0x1388
 8004404:	4293      	cmp	r3, r2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e17b      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_OscConfig+0x578>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ed      	beq.n	80043f6 <HAL_RCC_OscConfig+0x532>
 800441a:	e01a      	b.n	8004452 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fc fce4 	bl	8000de8 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004422:	e00f      	b.n	8004444 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fc fce0 	bl	8000de8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d906      	bls.n	8004444 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e164      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004444:	4ba8      	ldr	r3, [pc, #672]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e8      	bne.n	8004424 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004452:	7ffb      	ldrb	r3, [r7, #31]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004458:	4ba3      	ldr	r3, [pc, #652]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	4aa2      	ldr	r2, [pc, #648]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004462:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d03c      	beq.n	80044ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004478:	4b9b      	ldr	r3, [pc, #620]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 800447a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447e:	4a9a      	ldr	r2, [pc, #616]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fc fcae 	bl	8000de8 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004490:	f7fc fcaa 	bl	8000de8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e130      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044a2:	4b91      	ldr	r3, [pc, #580]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80044a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0ef      	beq.n	8004490 <HAL_RCC_OscConfig+0x5cc>
 80044b0:	e01b      	b.n	80044ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044b2:	4b8d      	ldr	r3, [pc, #564]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80044b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b8:	4a8b      	ldr	r2, [pc, #556]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fc fc91 	bl	8000de8 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ca:	f7fc fc8d 	bl	8000de8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e113      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044dc:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80044de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ef      	bne.n	80044ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8107 	beq.w	8004702 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f040 80cb 	bne.w	8004694 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044fe:	4b7a      	ldr	r3, [pc, #488]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f003 0203 	and.w	r2, r3, #3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	429a      	cmp	r2, r3
 8004510:	d12c      	bne.n	800456c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	3b01      	subs	r3, #1
 800451e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d123      	bne.n	800456c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d11b      	bne.n	800456c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d113      	bne.n	800456c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	3b01      	subs	r3, #1
 8004552:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d109      	bne.n	800456c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	3b01      	subs	r3, #1
 8004566:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d06d      	beq.n	8004648 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d068      	beq.n	8004644 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004572:	4b5d      	ldr	r3, [pc, #372]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800457e:	4b5a      	ldr	r3, [pc, #360]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0ba      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800458e:	4b56      	ldr	r3, [pc, #344]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a55      	ldr	r2, [pc, #340]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004598:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800459a:	f7fc fc25 	bl	8000de8 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fc fc21 	bl	8000de8 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0a7      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b4:	4b4c      	ldr	r3, [pc, #304]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c0:	4b49      	ldr	r3, [pc, #292]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	4b49      	ldr	r3, [pc, #292]	; (80046ec <HAL_RCC_OscConfig+0x828>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045d0:	3a01      	subs	r2, #1
 80045d2:	0112      	lsls	r2, r2, #4
 80045d4:	4311      	orrs	r1, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045da:	0212      	lsls	r2, r2, #8
 80045dc:	4311      	orrs	r1, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045e2:	0852      	lsrs	r2, r2, #1
 80045e4:	3a01      	subs	r2, #1
 80045e6:	0552      	lsls	r2, r2, #21
 80045e8:	4311      	orrs	r1, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045ee:	0852      	lsrs	r2, r2, #1
 80045f0:	3a01      	subs	r2, #1
 80045f2:	0652      	lsls	r2, r2, #25
 80045f4:	4311      	orrs	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045fa:	06d2      	lsls	r2, r2, #27
 80045fc:	430a      	orrs	r2, r1
 80045fe:	493a      	ldr	r1, [pc, #232]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004600:	4313      	orrs	r3, r2
 8004602:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004604:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a37      	ldr	r2, [pc, #220]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 800460a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004610:	4b35      	ldr	r3, [pc, #212]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a34      	ldr	r2, [pc, #208]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800461c:	f7fc fbe4 	bl	8000de8 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004624:	f7fc fbe0 	bl	8000de8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e066      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004642:	e05e      	b.n	8004702 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e05d      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004648:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d156      	bne.n	8004702 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 800465a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800465e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004660:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800466c:	f7fc fbbc 	bl	8000de8 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004674:	f7fc fbb8 	bl	8000de8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e03e      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004686:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x7b0>
 8004692:	e036      	b.n	8004702 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d031      	beq.n	80046fe <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469a:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80046a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80046b8:	f023 0303 	bic.w	r3, r3, #3
 80046bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_OscConfig+0x824>)
 80046c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fc fb8b 	bl	8000de8 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	e00c      	b.n	80046f0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fc fb87 	bl	8000de8 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d905      	bls.n	80046f0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e00d      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
 80046e8:	40021000 	.word	0x40021000
 80046ec:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_OscConfig+0x848>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ec      	bne.n	80046d6 <HAL_RCC_OscConfig+0x812>
 80046fc:	e001      	b.n	8004702 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000

08004710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0c8      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004724:	4b66      	ldr	r3, [pc, #408]	; (80048c0 <HAL_RCC_ClockConfig+0x1b0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d910      	bls.n	8004754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_ClockConfig+0x1b0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 0207 	bic.w	r2, r3, #7
 800473a:	4961      	ldr	r1, [pc, #388]	; (80048c0 <HAL_RCC_ClockConfig+0x1b0>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <HAL_RCC_ClockConfig+0x1b0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0b0      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d04c      	beq.n	80047fa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d107      	bne.n	8004778 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004768:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d121      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e09e      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d107      	bne.n	8004790 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004780:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d115      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e092      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004798:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e086      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a8:	4b46      	ldr	r3, [pc, #280]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e07e      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047b8:	4b42      	ldr	r3, [pc, #264]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 0203 	bic.w	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	493f      	ldr	r1, [pc, #252]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ca:	f7fc fb0d 	bl	8000de8 <HAL_GetTick>
 80047ce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d2:	f7fc fb09 	bl	8000de8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e066      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e8:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 020c 	and.w	r2, r3, #12
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d1eb      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004806:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	492c      	ldr	r1, [pc, #176]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <HAL_RCC_ClockConfig+0x1b0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d210      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b26      	ldr	r3, [pc, #152]	; (80048c0 <HAL_RCC_ClockConfig+0x1b0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0207 	bic.w	r2, r3, #7
 800482e:	4924      	ldr	r1, [pc, #144]	; (80048c0 <HAL_RCC_ClockConfig+0x1b0>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_RCC_ClockConfig+0x1b0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e036      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4918      	ldr	r1, [pc, #96]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4910      	ldr	r1, [pc, #64]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004886:	f000 f825 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 800488a:	4602      	mov	r2, r0
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <HAL_RCC_ClockConfig+0x1b4>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	490c      	ldr	r1, [pc, #48]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	5ccb      	ldrb	r3, [r1, r3]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fc fa4c 	bl	8000d48 <HAL_InitTick>
 80048b0:	4603      	mov	r3, r0
 80048b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80048b4:	7afb      	ldrb	r3, [r7, #11]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40021000 	.word	0x40021000
 80048c8:	0800aa88 	.word	0x0800aa88
 80048cc:	20000000 	.word	0x20000000
 80048d0:	20000004 	.word	0x20000004

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e2:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048ec:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x34>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d121      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d11e      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004908:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d107      	bne.n	8004924 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	e005      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004930:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004938:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10d      	bne.n	800495c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004944:	e00a      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d102      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	e004      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d101      	bne.n	800495c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800495a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0c      	cmp	r3, #12
 8004960:	d134      	bne.n	80049cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d003      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0xa6>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d003      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0xac>
 8004978:	e005      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800497a:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800497c:	617b      	str	r3, [r7, #20]
      break;
 800497e:	e005      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004982:	617b      	str	r3, [r7, #20]
      break;
 8004984:	e002      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	617b      	str	r3, [r7, #20]
      break;
 800498a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800498c:	4b13      	ldr	r3, [pc, #76]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	3301      	adds	r3, #1
 8004998:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	fb02 f203 	mul.w	r2, r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	0e5b      	lsrs	r3, r3, #25
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	3301      	adds	r3, #1
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049cc:	69bb      	ldr	r3, [r7, #24]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3724      	adds	r7, #36	; 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	0800aaa0 	.word	0x0800aaa0
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	007a1200 	.word	0x007a1200

080049ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000000 	.word	0x20000000

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a08:	f7ff fff0 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	0800aa98 	.word	0x0800aa98

08004a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a34:	f7ff ffda 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	0adb      	lsrs	r3, r3, #11
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4904      	ldr	r1, [pc, #16]	; (8004a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000
 8004a58:	0800aa98 	.word	0x0800aa98

08004a5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a68:	4b2a      	ldr	r3, [pc, #168]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a74:	f7ff f9a2 	bl	8003dbc <HAL_PWREx_GetVoltageRange>
 8004a78:	6178      	str	r0, [r7, #20]
 8004a7a:	e014      	b.n	8004aa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6593      	str	r3, [r2, #88]	; 0x58
 8004a88:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a94:	f7ff f992 	bl	8003dbc <HAL_PWREx_GetVoltageRange>
 8004a98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aac:	d10b      	bne.n	8004ac6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d919      	bls.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ab8:	d902      	bls.n	8004ac0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004aba:	2302      	movs	r3, #2
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	e013      	b.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	e010      	b.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b80      	cmp	r3, #128	; 0x80
 8004aca:	d902      	bls.n	8004ad2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004acc:	2303      	movs	r3, #3
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	e00a      	b.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d102      	bne.n	8004ade <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ad8:	2302      	movs	r3, #2
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	e004      	b.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b70      	cmp	r3, #112	; 0x70
 8004ae2:	d101      	bne.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 0207 	bic.w	r2, r3, #7
 8004af0:	4909      	ldr	r1, [pc, #36]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004af8:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d001      	beq.n	8004b0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40022000 	.word	0x40022000

08004b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b24:	2300      	movs	r3, #0
 8004b26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b28:	2300      	movs	r3, #0
 8004b2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d041      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b40:	d02a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b46:	d824      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b4c:	d008      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b52:	d81e      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5c:	d010      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b5e:	e018      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b60:	4b86      	ldr	r3, [pc, #536]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4a85      	ldr	r2, [pc, #532]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b6c:	e015      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	2100      	movs	r1, #0
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fadd 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b7e:	e00c      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3320      	adds	r3, #32
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fbc6 	bl	8005318 <RCCEx_PLLSAI2_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b90:	e003      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	74fb      	strb	r3, [r7, #19]
      break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ba0:	4b76      	ldr	r3, [pc, #472]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bae:	4973      	ldr	r1, [pc, #460]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bb6:	e001      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d041      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bd0:	d02a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004bd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bd6:	d824      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bdc:	d008      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be2:	d81e      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bec:	d010      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bee:	e018      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bf0:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4a61      	ldr	r2, [pc, #388]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bfc:	e015      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3304      	adds	r3, #4
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fa95 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c0e:	e00c      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3320      	adds	r3, #32
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fb7e 	bl	8005318 <RCCEx_PLLSAI2_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c20:	e003      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	74fb      	strb	r3, [r7, #19]
      break;
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c30:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3e:	494f      	ldr	r1, [pc, #316]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c46:	e001      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a0 	beq.w	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c5e:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c74:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	4a40      	ldr	r2, [pc, #256]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c80:	4b3e      	ldr	r3, [pc, #248]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c90:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3a      	ldr	r2, [pc, #232]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c9c:	f7fc f8a4 	bl	8000de8 <HAL_GetTick>
 8004ca0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ca2:	e009      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fc f8a0 	bl	8000de8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d902      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	74fb      	strb	r3, [r7, #19]
        break;
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cb8:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ef      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d15c      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cca:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01f      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d019      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d04:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc f85f 	bl	8000de8 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2c:	e00b      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fc f85b 	bl	8000de8 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d902      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	74fb      	strb	r3, [r7, #19]
            break;
 8004d44:	e006      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ec      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	4904      	ldr	r1, [pc, #16]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d72:	e009      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
 8004d78:	e006      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d88:	7c7b      	ldrb	r3, [r7, #17]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4ba6      	ldr	r3, [pc, #664]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	4aa5      	ldr	r2, [pc, #660]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004da6:	4ba0      	ldr	r3, [pc, #640]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f023 0203 	bic.w	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	499c      	ldr	r1, [pc, #624]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dc8:	4b97      	ldr	r3, [pc, #604]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 020c 	bic.w	r2, r3, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	4994      	ldr	r1, [pc, #592]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dea:	4b8f      	ldr	r3, [pc, #572]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	498b      	ldr	r1, [pc, #556]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e0c:	4b86      	ldr	r3, [pc, #536]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	4983      	ldr	r1, [pc, #524]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e2e:	4b7e      	ldr	r3, [pc, #504]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3c:	497a      	ldr	r1, [pc, #488]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e50:	4b75      	ldr	r3, [pc, #468]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	4972      	ldr	r1, [pc, #456]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e72:	4b6d      	ldr	r3, [pc, #436]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e80:	4969      	ldr	r1, [pc, #420]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e94:	4b64      	ldr	r3, [pc, #400]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea2:	4961      	ldr	r1, [pc, #388]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb6:	4b5c      	ldr	r3, [pc, #368]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	4958      	ldr	r1, [pc, #352]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ed8:	4b53      	ldr	r3, [pc, #332]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	4950      	ldr	r1, [pc, #320]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004efa:	4b4b      	ldr	r3, [pc, #300]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	4947      	ldr	r1, [pc, #284]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f1c:	4b42      	ldr	r3, [pc, #264]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f22:	f023 0203 	bic.w	r2, r3, #3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	493f      	ldr	r1, [pc, #252]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d028      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f3e:	4b3a      	ldr	r3, [pc, #232]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4936      	ldr	r1, [pc, #216]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5c:	d106      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f5e:	4b32      	ldr	r3, [pc, #200]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	4a31      	ldr	r2, [pc, #196]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f68:	60d3      	str	r3, [r2, #12]
 8004f6a:	e011      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f8d9 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d028      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f9c:	4b22      	ldr	r3, [pc, #136]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004faa:	491f      	ldr	r1, [pc, #124]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fba:	d106      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc6:	60d3      	str	r3, [r2, #12]
 8004fc8:	e011      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd2:	d10c      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	2101      	movs	r1, #1
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f8aa 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d02a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005008:	4907      	ldr	r1, [pc, #28]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005018:	d108      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501a:	4b03      	ldr	r3, [pc, #12]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4a02      	ldr	r2, [pc, #8]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005024:	60d3      	str	r3, [r2, #12]
 8005026:	e013      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005028:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005034:	d10c      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f879 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d02f      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800505c:	4b2c      	ldr	r3, [pc, #176]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800506a:	4929      	ldr	r1, [pc, #164]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800507a:	d10d      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f856 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d014      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005092:	7cfb      	ldrb	r3, [r7, #19]
 8005094:	74bb      	strb	r3, [r7, #18]
 8005096:	e011      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a0:	d10c      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3320      	adds	r3, #32
 80050a6:	2102      	movs	r1, #2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 f935 	bl	8005318 <RCCEx_PLLSAI2_Config>
 80050ae:	4603      	mov	r3, r0
 80050b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050b2:	7cfb      	ldrb	r3, [r7, #19]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050c8:	4b11      	ldr	r3, [pc, #68]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d8:	490d      	ldr	r1, [pc, #52]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050ec:	4b08      	ldr	r3, [pc, #32]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fc:	4904      	ldr	r1, [pc, #16]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005104:	7cbb      	ldrb	r3, [r7, #18]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000

08005114 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800511e:	f043 0304 	orr.w	r3, r3, #4
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000

08005134 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005142:	4b74      	ldr	r3, [pc, #464]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d018      	beq.n	8005180 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800514e:	4b71      	ldr	r3, [pc, #452]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0203 	and.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d10d      	bne.n	800517a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
       ||
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005166:	4b6b      	ldr	r3, [pc, #428]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
       ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d047      	beq.n	800520a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	e044      	b.n	800520a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d018      	beq.n	80051ba <RCCEx_PLLSAI1_Config+0x86>
 8005188:	2b03      	cmp	r3, #3
 800518a:	d825      	bhi.n	80051d8 <RCCEx_PLLSAI1_Config+0xa4>
 800518c:	2b01      	cmp	r3, #1
 800518e:	d002      	beq.n	8005196 <RCCEx_PLLSAI1_Config+0x62>
 8005190:	2b02      	cmp	r3, #2
 8005192:	d009      	beq.n	80051a8 <RCCEx_PLLSAI1_Config+0x74>
 8005194:	e020      	b.n	80051d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005196:	4b5f      	ldr	r3, [pc, #380]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11d      	bne.n	80051de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a6:	e01a      	b.n	80051de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a8:	4b5a      	ldr	r3, [pc, #360]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b8:	e013      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051ba:	4b56      	ldr	r3, [pc, #344]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10f      	bne.n	80051e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051c6:	4b53      	ldr	r3, [pc, #332]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051d6:	e006      	b.n	80051e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
      break;
 80051dc:	e004      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051de:	bf00      	nop
 80051e0:	e002      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051e2:	bf00      	nop
 80051e4:	e000      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ee:	4b49      	ldr	r3, [pc, #292]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	3b01      	subs	r3, #1
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	430b      	orrs	r3, r1
 8005204:	4943      	ldr	r1, [pc, #268]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d17c      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005210:	4b40      	ldr	r3, [pc, #256]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a3f      	ldr	r2, [pc, #252]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005216:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800521a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521c:	f7fb fde4 	bl	8000de8 <HAL_GetTick>
 8005220:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005222:	e009      	b.n	8005238 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005224:	f7fb fde0 	bl	8000de8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d902      	bls.n	8005238 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	73fb      	strb	r3, [r7, #15]
        break;
 8005236:	e005      	b.n	8005244 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005238:	4b36      	ldr	r3, [pc, #216]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1ef      	bne.n	8005224 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d15f      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d110      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005250:	4b30      	ldr	r3, [pc, #192]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005258:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6892      	ldr	r2, [r2, #8]
 8005260:	0211      	lsls	r1, r2, #8
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68d2      	ldr	r2, [r2, #12]
 8005266:	06d2      	lsls	r2, r2, #27
 8005268:	430a      	orrs	r2, r1
 800526a:	492a      	ldr	r1, [pc, #168]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]
 8005270:	e027      	b.n	80052c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d112      	bne.n	800529e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005278:	4b26      	ldr	r3, [pc, #152]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005280:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6892      	ldr	r2, [r2, #8]
 8005288:	0211      	lsls	r1, r2, #8
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6912      	ldr	r2, [r2, #16]
 800528e:	0852      	lsrs	r2, r2, #1
 8005290:	3a01      	subs	r2, #1
 8005292:	0552      	lsls	r2, r2, #21
 8005294:	430a      	orrs	r2, r1
 8005296:	491f      	ldr	r1, [pc, #124]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]
 800529c:	e011      	b.n	80052c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6892      	ldr	r2, [r2, #8]
 80052ae:	0211      	lsls	r1, r2, #8
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6952      	ldr	r2, [r2, #20]
 80052b4:	0852      	lsrs	r2, r2, #1
 80052b6:	3a01      	subs	r2, #1
 80052b8:	0652      	lsls	r2, r2, #25
 80052ba:	430a      	orrs	r2, r1
 80052bc:	4915      	ldr	r1, [pc, #84]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a13      	ldr	r2, [pc, #76]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ce:	f7fb fd8b 	bl	8000de8 <HAL_GetTick>
 80052d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052d4:	e009      	b.n	80052ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d6:	f7fb fd87 	bl	8000de8 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d902      	bls.n	80052ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	73fb      	strb	r3, [r7, #15]
          break;
 80052e8:	e005      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ef      	beq.n	80052d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005306:	4313      	orrs	r3, r2
 8005308:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000

08005318 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005326:	4b69      	ldr	r3, [pc, #420]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d018      	beq.n	8005364 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005332:	4b66      	ldr	r3, [pc, #408]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0203 	and.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d10d      	bne.n	800535e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
       ||
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800534a:	4b60      	ldr	r3, [pc, #384]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
       ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d047      	beq.n	80053ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
 8005362:	e044      	b.n	80053ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d018      	beq.n	800539e <RCCEx_PLLSAI2_Config+0x86>
 800536c:	2b03      	cmp	r3, #3
 800536e:	d825      	bhi.n	80053bc <RCCEx_PLLSAI2_Config+0xa4>
 8005370:	2b01      	cmp	r3, #1
 8005372:	d002      	beq.n	800537a <RCCEx_PLLSAI2_Config+0x62>
 8005374:	2b02      	cmp	r3, #2
 8005376:	d009      	beq.n	800538c <RCCEx_PLLSAI2_Config+0x74>
 8005378:	e020      	b.n	80053bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800537a:	4b54      	ldr	r3, [pc, #336]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d11d      	bne.n	80053c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538a:	e01a      	b.n	80053c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800538c:	4b4f      	ldr	r3, [pc, #316]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d116      	bne.n	80053c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539c:	e013      	b.n	80053c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800539e:	4b4b      	ldr	r3, [pc, #300]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10f      	bne.n	80053ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053aa:	4b48      	ldr	r3, [pc, #288]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053ba:	e006      	b.n	80053ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      break;
 80053c0:	e004      	b.n	80053cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053c2:	bf00      	nop
 80053c4:	e002      	b.n	80053cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10d      	bne.n	80053ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053d2:	4b3e      	ldr	r3, [pc, #248]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6819      	ldr	r1, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	430b      	orrs	r3, r1
 80053e8:	4938      	ldr	r1, [pc, #224]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d166      	bne.n	80054c2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053f4:	4b35      	ldr	r3, [pc, #212]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a34      	ldr	r2, [pc, #208]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80053fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005400:	f7fb fcf2 	bl	8000de8 <HAL_GetTick>
 8005404:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005406:	e009      	b.n	800541c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005408:	f7fb fcee 	bl	8000de8 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d902      	bls.n	800541c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	73fb      	strb	r3, [r7, #15]
        break;
 800541a:	e005      	b.n	8005428 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ef      	bne.n	8005408 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d149      	bne.n	80054c2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d110      	bne.n	8005456 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800543c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	0211      	lsls	r1, r2, #8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68d2      	ldr	r2, [r2, #12]
 800544a:	06d2      	lsls	r2, r2, #27
 800544c:	430a      	orrs	r2, r1
 800544e:	491f      	ldr	r1, [pc, #124]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005450:	4313      	orrs	r3, r2
 8005452:	614b      	str	r3, [r1, #20]
 8005454:	e011      	b.n	800547a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800545e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6892      	ldr	r2, [r2, #8]
 8005466:	0211      	lsls	r1, r2, #8
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6912      	ldr	r2, [r2, #16]
 800546c:	0852      	lsrs	r2, r2, #1
 800546e:	3a01      	subs	r2, #1
 8005470:	0652      	lsls	r2, r2, #25
 8005472:	430a      	orrs	r2, r1
 8005474:	4915      	ldr	r1, [pc, #84]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005476:	4313      	orrs	r3, r2
 8005478:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800547a:	4b14      	ldr	r3, [pc, #80]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a13      	ldr	r2, [pc, #76]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005484:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005486:	f7fb fcaf 	bl	8000de8 <HAL_GetTick>
 800548a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800548c:	e009      	b.n	80054a2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800548e:	f7fb fcab 	bl	8000de8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d902      	bls.n	80054a2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	73fb      	strb	r3, [r7, #15]
          break;
 80054a0:	e005      	b.n	80054ae <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0ef      	beq.n	800548e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	4903      	ldr	r1, [pc, #12]	; (80054cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40021000 	.word	0x40021000

080054d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d06c      	beq.n	80055bc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fb fb14 	bl	8000b24 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	22ca      	movs	r2, #202	; 0xca
 800550a:	625a      	str	r2, [r3, #36]	; 0x24
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2253      	movs	r2, #83	; 0x53
 8005512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f87c 	bl	8005612 <RTC_EnterInitMode>
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d14b      	bne.n	80055bc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6812      	ldr	r2, [r2, #0]
 800552e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005536:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6899      	ldr	r1, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68d2      	ldr	r2, [r2, #12]
 800555e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6919      	ldr	r1, [r3, #16]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	041a      	lsls	r2, r3, #16
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f87f 	bl	8005678 <RTC_ExitInitMode>
 800557a:	4603      	mov	r3, r0
 800557c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11b      	bne.n	80055bc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0203 	bic.w	r2, r2, #3
 8005592:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	22ff      	movs	r2, #255	; 0xff
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055dc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80055de:	f7fb fc03 	bl	8000de8 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80055e4:	e009      	b.n	80055fa <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055e6:	f7fb fbff 	bl	8000de8 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f4:	d901      	bls.n	80055fa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e007      	b.n	800560a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0ee      	beq.n	80055e6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d120      	bne.n	800566e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f04f 32ff 	mov.w	r2, #4294967295
 8005634:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005636:	f7fb fbd7 	bl	8000de8 <HAL_GetTick>
 800563a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800563c:	e00d      	b.n	800565a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800563e:	f7fb fbd3 	bl	8000de8 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800564c:	d905      	bls.n	800565a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2203      	movs	r2, #3
 8005656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <RTC_EnterInitMode+0x5c>
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d1e7      	bne.n	800563e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800566e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005684:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <RTC_ExitInitMode+0x78>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <RTC_ExitInitMode+0x78>)
 800568a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005690:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <RTC_ExitInitMode+0x78>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10c      	bne.n	80056b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff92 	bl	80055c6 <HAL_RTC_WaitForSynchro>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01e      	beq.n	80056e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2203      	movs	r2, #3
 80056ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	73fb      	strb	r3, [r7, #15]
 80056b4:	e017      	b.n	80056e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <RTC_ExitInitMode+0x78>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <RTC_ExitInitMode+0x78>)
 80056bc:	f023 0320 	bic.w	r3, r3, #32
 80056c0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff ff7f 	bl	80055c6 <HAL_RTC_WaitForSynchro>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2203      	movs	r2, #3
 80056d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <RTC_ExitInitMode+0x78>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	4a04      	ldr	r2, [pc, #16]	; (80056f0 <RTC_ExitInitMode+0x78>)
 80056e0:	f043 0320 	orr.w	r3, r3, #32
 80056e4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40002800 	.word	0x40002800

080056f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800570a:	2302      	movs	r3, #2
 800570c:	e07f      	b.n	800580e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	22ca      	movs	r2, #202	; 0xca
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2253      	movs	r2, #83	; 0x53
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800574e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d120      	bne.n	80057a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800575e:	f7fb fb43 	bl	8000de8 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005764:	e015      	b.n	8005792 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005766:	f7fb fb3f 	bl	8000de8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005774:	d90d      	bls.n	8005792 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	22ff      	movs	r2, #255	; 0xff
 800577c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2203      	movs	r2, #3
 8005782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e03d      	b.n	800580e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0e2      	beq.n	8005766 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 0107 	bic.w	r1, r3, #7
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80057bc:	4b16      	ldr	r3, [pc, #88]	; (8005818 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a15      	ldr	r2, [pc, #84]	; (8005818 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80057c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057c6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80057c8:	4b13      	ldr	r3, [pc, #76]	; (8005818 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4a12      	ldr	r2, [pc, #72]	; (8005818 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057e2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	22ff      	movs	r2, #255	; 0xff
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40010400 	.word	0x40010400

0800581c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005826:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800582a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800584a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fa fe6b 	bl	8000528 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40010400 	.word	0x40010400

08005868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e040      	b.n	80058fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fb f904 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	; 0x24
 8005894:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f82c 	bl	8005904 <UART_SetConfig>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e022      	b.n	80058fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 faaa 	bl	8005e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fb31 	bl	8005f5c <UART_CheckIdleState>
 80058fa:	4603      	mov	r3, r0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005904:	b5b0      	push	{r4, r5, r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	4313      	orrs	r3, r2
 8005926:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4bad      	ldr	r3, [pc, #692]	; (8005be4 <UART_SetConfig+0x2e0>)
 8005930:	4013      	ands	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	69f9      	ldr	r1, [r7, #28]
 8005938:	430b      	orrs	r3, r1
 800593a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4aa2      	ldr	r2, [pc, #648]	; (8005be8 <UART_SetConfig+0x2e4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	4313      	orrs	r3, r2
 800596a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	430a      	orrs	r2, r1
 800597e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a99      	ldr	r2, [pc, #612]	; (8005bec <UART_SetConfig+0x2e8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d121      	bne.n	80059ce <UART_SetConfig+0xca>
 800598a:	4b99      	ldr	r3, [pc, #612]	; (8005bf0 <UART_SetConfig+0x2ec>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	2b03      	cmp	r3, #3
 8005996:	d817      	bhi.n	80059c8 <UART_SetConfig+0xc4>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <UART_SetConfig+0x9c>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059b1 	.word	0x080059b1
 80059a4:	080059bd 	.word	0x080059bd
 80059a8:	080059b7 	.word	0x080059b7
 80059ac:	080059c3 	.word	0x080059c3
 80059b0:	2301      	movs	r3, #1
 80059b2:	76fb      	strb	r3, [r7, #27]
 80059b4:	e0e7      	b.n	8005b86 <UART_SetConfig+0x282>
 80059b6:	2302      	movs	r3, #2
 80059b8:	76fb      	strb	r3, [r7, #27]
 80059ba:	e0e4      	b.n	8005b86 <UART_SetConfig+0x282>
 80059bc:	2304      	movs	r3, #4
 80059be:	76fb      	strb	r3, [r7, #27]
 80059c0:	e0e1      	b.n	8005b86 <UART_SetConfig+0x282>
 80059c2:	2308      	movs	r3, #8
 80059c4:	76fb      	strb	r3, [r7, #27]
 80059c6:	e0de      	b.n	8005b86 <UART_SetConfig+0x282>
 80059c8:	2310      	movs	r3, #16
 80059ca:	76fb      	strb	r3, [r7, #27]
 80059cc:	e0db      	b.n	8005b86 <UART_SetConfig+0x282>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a88      	ldr	r2, [pc, #544]	; (8005bf4 <UART_SetConfig+0x2f0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d132      	bne.n	8005a3e <UART_SetConfig+0x13a>
 80059d8:	4b85      	ldr	r3, [pc, #532]	; (8005bf0 <UART_SetConfig+0x2ec>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	2b0c      	cmp	r3, #12
 80059e4:	d828      	bhi.n	8005a38 <UART_SetConfig+0x134>
 80059e6:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <UART_SetConfig+0xe8>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005a39 	.word	0x08005a39
 80059f4:	08005a39 	.word	0x08005a39
 80059f8:	08005a39 	.word	0x08005a39
 80059fc:	08005a2d 	.word	0x08005a2d
 8005a00:	08005a39 	.word	0x08005a39
 8005a04:	08005a39 	.word	0x08005a39
 8005a08:	08005a39 	.word	0x08005a39
 8005a0c:	08005a27 	.word	0x08005a27
 8005a10:	08005a39 	.word	0x08005a39
 8005a14:	08005a39 	.word	0x08005a39
 8005a18:	08005a39 	.word	0x08005a39
 8005a1c:	08005a33 	.word	0x08005a33
 8005a20:	2300      	movs	r3, #0
 8005a22:	76fb      	strb	r3, [r7, #27]
 8005a24:	e0af      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a26:	2302      	movs	r3, #2
 8005a28:	76fb      	strb	r3, [r7, #27]
 8005a2a:	e0ac      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	76fb      	strb	r3, [r7, #27]
 8005a30:	e0a9      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a32:	2308      	movs	r3, #8
 8005a34:	76fb      	strb	r3, [r7, #27]
 8005a36:	e0a6      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	76fb      	strb	r3, [r7, #27]
 8005a3c:	e0a3      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a6d      	ldr	r2, [pc, #436]	; (8005bf8 <UART_SetConfig+0x2f4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d120      	bne.n	8005a8a <UART_SetConfig+0x186>
 8005a48:	4b69      	ldr	r3, [pc, #420]	; (8005bf0 <UART_SetConfig+0x2ec>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a52:	2b30      	cmp	r3, #48	; 0x30
 8005a54:	d013      	beq.n	8005a7e <UART_SetConfig+0x17a>
 8005a56:	2b30      	cmp	r3, #48	; 0x30
 8005a58:	d814      	bhi.n	8005a84 <UART_SetConfig+0x180>
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d009      	beq.n	8005a72 <UART_SetConfig+0x16e>
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d810      	bhi.n	8005a84 <UART_SetConfig+0x180>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <UART_SetConfig+0x168>
 8005a66:	2b10      	cmp	r3, #16
 8005a68:	d006      	beq.n	8005a78 <UART_SetConfig+0x174>
 8005a6a:	e00b      	b.n	8005a84 <UART_SetConfig+0x180>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	76fb      	strb	r3, [r7, #27]
 8005a70:	e089      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a72:	2302      	movs	r3, #2
 8005a74:	76fb      	strb	r3, [r7, #27]
 8005a76:	e086      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	76fb      	strb	r3, [r7, #27]
 8005a7c:	e083      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a7e:	2308      	movs	r3, #8
 8005a80:	76fb      	strb	r3, [r7, #27]
 8005a82:	e080      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a84:	2310      	movs	r3, #16
 8005a86:	76fb      	strb	r3, [r7, #27]
 8005a88:	e07d      	b.n	8005b86 <UART_SetConfig+0x282>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a5b      	ldr	r2, [pc, #364]	; (8005bfc <UART_SetConfig+0x2f8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d120      	bne.n	8005ad6 <UART_SetConfig+0x1d2>
 8005a94:	4b56      	ldr	r3, [pc, #344]	; (8005bf0 <UART_SetConfig+0x2ec>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa0:	d013      	beq.n	8005aca <UART_SetConfig+0x1c6>
 8005aa2:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa4:	d814      	bhi.n	8005ad0 <UART_SetConfig+0x1cc>
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d009      	beq.n	8005abe <UART_SetConfig+0x1ba>
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d810      	bhi.n	8005ad0 <UART_SetConfig+0x1cc>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <UART_SetConfig+0x1b4>
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d006      	beq.n	8005ac4 <UART_SetConfig+0x1c0>
 8005ab6:	e00b      	b.n	8005ad0 <UART_SetConfig+0x1cc>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	76fb      	strb	r3, [r7, #27]
 8005abc:	e063      	b.n	8005b86 <UART_SetConfig+0x282>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	76fb      	strb	r3, [r7, #27]
 8005ac2:	e060      	b.n	8005b86 <UART_SetConfig+0x282>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	76fb      	strb	r3, [r7, #27]
 8005ac8:	e05d      	b.n	8005b86 <UART_SetConfig+0x282>
 8005aca:	2308      	movs	r3, #8
 8005acc:	76fb      	strb	r3, [r7, #27]
 8005ace:	e05a      	b.n	8005b86 <UART_SetConfig+0x282>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	76fb      	strb	r3, [r7, #27]
 8005ad4:	e057      	b.n	8005b86 <UART_SetConfig+0x282>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a49      	ldr	r2, [pc, #292]	; (8005c00 <UART_SetConfig+0x2fc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d125      	bne.n	8005b2c <UART_SetConfig+0x228>
 8005ae0:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <UART_SetConfig+0x2ec>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aee:	d017      	beq.n	8005b20 <UART_SetConfig+0x21c>
 8005af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af4:	d817      	bhi.n	8005b26 <UART_SetConfig+0x222>
 8005af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afa:	d00b      	beq.n	8005b14 <UART_SetConfig+0x210>
 8005afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b00:	d811      	bhi.n	8005b26 <UART_SetConfig+0x222>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <UART_SetConfig+0x20a>
 8005b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0a:	d006      	beq.n	8005b1a <UART_SetConfig+0x216>
 8005b0c:	e00b      	b.n	8005b26 <UART_SetConfig+0x222>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	76fb      	strb	r3, [r7, #27]
 8005b12:	e038      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b14:	2302      	movs	r3, #2
 8005b16:	76fb      	strb	r3, [r7, #27]
 8005b18:	e035      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	76fb      	strb	r3, [r7, #27]
 8005b1e:	e032      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b20:	2308      	movs	r3, #8
 8005b22:	76fb      	strb	r3, [r7, #27]
 8005b24:	e02f      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b26:	2310      	movs	r3, #16
 8005b28:	76fb      	strb	r3, [r7, #27]
 8005b2a:	e02c      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a2d      	ldr	r2, [pc, #180]	; (8005be8 <UART_SetConfig+0x2e4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d125      	bne.n	8005b82 <UART_SetConfig+0x27e>
 8005b36:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <UART_SetConfig+0x2ec>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b44:	d017      	beq.n	8005b76 <UART_SetConfig+0x272>
 8005b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b4a:	d817      	bhi.n	8005b7c <UART_SetConfig+0x278>
 8005b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b50:	d00b      	beq.n	8005b6a <UART_SetConfig+0x266>
 8005b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b56:	d811      	bhi.n	8005b7c <UART_SetConfig+0x278>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <UART_SetConfig+0x260>
 8005b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b60:	d006      	beq.n	8005b70 <UART_SetConfig+0x26c>
 8005b62:	e00b      	b.n	8005b7c <UART_SetConfig+0x278>
 8005b64:	2300      	movs	r3, #0
 8005b66:	76fb      	strb	r3, [r7, #27]
 8005b68:	e00d      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	76fb      	strb	r3, [r7, #27]
 8005b6e:	e00a      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b70:	2304      	movs	r3, #4
 8005b72:	76fb      	strb	r3, [r7, #27]
 8005b74:	e007      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b76:	2308      	movs	r3, #8
 8005b78:	76fb      	strb	r3, [r7, #27]
 8005b7a:	e004      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	76fb      	strb	r3, [r7, #27]
 8005b80:	e001      	b.n	8005b86 <UART_SetConfig+0x282>
 8005b82:	2310      	movs	r3, #16
 8005b84:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <UART_SetConfig+0x2e4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	f040 8087 	bne.w	8005ca0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b92:	7efb      	ldrb	r3, [r7, #27]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d837      	bhi.n	8005c08 <UART_SetConfig+0x304>
 8005b98:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <UART_SetConfig+0x29c>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005c09 	.word	0x08005c09
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005c09 	.word	0x08005c09
 8005bb0:	08005bd3 	.word	0x08005bd3
 8005bb4:	08005c09 	.word	0x08005c09
 8005bb8:	08005c09 	.word	0x08005c09
 8005bbc:	08005c09 	.word	0x08005c09
 8005bc0:	08005bdb 	.word	0x08005bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc4:	f7fe ff1e 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8005bc8:	6178      	str	r0, [r7, #20]
        break;
 8005bca:	e022      	b.n	8005c12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <UART_SetConfig+0x300>)
 8005bce:	617b      	str	r3, [r7, #20]
        break;
 8005bd0:	e01f      	b.n	8005c12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd2:	f7fe fe7f 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8005bd6:	6178      	str	r0, [r7, #20]
        break;
 8005bd8:	e01b      	b.n	8005c12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bde:	617b      	str	r3, [r7, #20]
        break;
 8005be0:	e017      	b.n	8005c12 <UART_SetConfig+0x30e>
 8005be2:	bf00      	nop
 8005be4:	efff69f3 	.word	0xefff69f3
 8005be8:	40008000 	.word	0x40008000
 8005bec:	40013800 	.word	0x40013800
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40004400 	.word	0x40004400
 8005bf8:	40004800 	.word	0x40004800
 8005bfc:	40004c00 	.word	0x40004c00
 8005c00:	40005000 	.word	0x40005000
 8005c04:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	76bb      	strb	r3, [r7, #26]
        break;
 8005c10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80f1 	beq.w	8005dfc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d305      	bcc.n	8005c36 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d902      	bls.n	8005c3c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	76bb      	strb	r3, [r7, #26]
 8005c3a:	e0df      	b.n	8005dfc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	020b      	lsls	r3, r1, #8
 8005c4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c52:	0202      	lsls	r2, r0, #8
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	6849      	ldr	r1, [r1, #4]
 8005c58:	0849      	lsrs	r1, r1, #1
 8005c5a:	4608      	mov	r0, r1
 8005c5c:	f04f 0100 	mov.w	r1, #0
 8005c60:	1814      	adds	r4, r2, r0
 8005c62:	eb43 0501 	adc.w	r5, r3, r1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	4620      	mov	r0, r4
 8005c72:	4629      	mov	r1, r5
 8005c74:	f7fa faba 	bl	80001ec <__aeabi_uldivmod>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c86:	d308      	bcc.n	8005c9a <UART_SetConfig+0x396>
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c8e:	d204      	bcs.n	8005c9a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	e0b0      	b.n	8005dfc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	76bb      	strb	r3, [r7, #26]
 8005c9e:	e0ad      	b.n	8005dfc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca8:	d15c      	bne.n	8005d64 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005caa:	7efb      	ldrb	r3, [r7, #27]
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d828      	bhi.n	8005d02 <UART_SetConfig+0x3fe>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <UART_SetConfig+0x3b4>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005ced 	.word	0x08005ced
 8005cc4:	08005d03 	.word	0x08005d03
 8005cc8:	08005cf3 	.word	0x08005cf3
 8005ccc:	08005d03 	.word	0x08005d03
 8005cd0:	08005d03 	.word	0x08005d03
 8005cd4:	08005d03 	.word	0x08005d03
 8005cd8:	08005cfb 	.word	0x08005cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cdc:	f7fe fe92 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8005ce0:	6178      	str	r0, [r7, #20]
        break;
 8005ce2:	e013      	b.n	8005d0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce4:	f7fe fea4 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8005ce8:	6178      	str	r0, [r7, #20]
        break;
 8005cea:	e00f      	b.n	8005d0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cec:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <UART_SetConfig+0x510>)
 8005cee:	617b      	str	r3, [r7, #20]
        break;
 8005cf0:	e00c      	b.n	8005d0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf2:	f7fe fdef 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8005cf6:	6178      	str	r0, [r7, #20]
        break;
 8005cf8:	e008      	b.n	8005d0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfe:	617b      	str	r3, [r7, #20]
        break;
 8005d00:	e004      	b.n	8005d0c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	76bb      	strb	r3, [r7, #26]
        break;
 8005d0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d074      	beq.n	8005dfc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	005a      	lsls	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	441a      	add	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b0f      	cmp	r3, #15
 8005d2e:	d916      	bls.n	8005d5e <UART_SetConfig+0x45a>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d36:	d212      	bcs.n	8005d5e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f023 030f 	bic.w	r3, r3, #15
 8005d40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	89fb      	ldrh	r3, [r7, #14]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	89fa      	ldrh	r2, [r7, #14]
 8005d5a:	60da      	str	r2, [r3, #12]
 8005d5c:	e04e      	b.n	8005dfc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	76bb      	strb	r3, [r7, #26]
 8005d62:	e04b      	b.n	8005dfc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d64:	7efb      	ldrb	r3, [r7, #27]
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d827      	bhi.n	8005dba <UART_SetConfig+0x4b6>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0x46c>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005dbb 	.word	0x08005dbb
 8005d80:	08005dab 	.word	0x08005dab
 8005d84:	08005dbb 	.word	0x08005dbb
 8005d88:	08005dbb 	.word	0x08005dbb
 8005d8c:	08005dbb 	.word	0x08005dbb
 8005d90:	08005db3 	.word	0x08005db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d94:	f7fe fe36 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8005d98:	6178      	str	r0, [r7, #20]
        break;
 8005d9a:	e013      	b.n	8005dc4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fe fe48 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8005da0:	6178      	str	r0, [r7, #20]
        break;
 8005da2:	e00f      	b.n	8005dc4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <UART_SetConfig+0x510>)
 8005da6:	617b      	str	r3, [r7, #20]
        break;
 8005da8:	e00c      	b.n	8005dc4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fe fd93 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8005dae:	6178      	str	r0, [r7, #20]
        break;
 8005db0:	e008      	b.n	8005dc4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db6:	617b      	str	r3, [r7, #20]
        break;
 8005db8:	e004      	b.n	8005dc4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	76bb      	strb	r3, [r7, #26]
        break;
 8005dc2:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d018      	beq.n	8005dfc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	085a      	lsrs	r2, r3, #1
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	441a      	add	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	d908      	bls.n	8005df8 <UART_SetConfig+0x4f4>
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dec:	d204      	bcs.n	8005df8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	e001      	b.n	8005dfc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e08:	7ebb      	ldrb	r3, [r7, #26]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bdb0      	pop	{r4, r5, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	00f42400 	.word	0x00f42400

08005e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01a      	beq.n	8005f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f16:	d10a      	bne.n	8005f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  }
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f6c:	f7fa ff3c 	bl	8000de8 <HAL_GetTick>
 8005f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d10e      	bne.n	8005f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f82d 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e023      	b.n	8005fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d10e      	bne.n	8005fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f817 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e00d      	b.n	8005fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffe:	e05e      	b.n	80060be <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d05a      	beq.n	80060be <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006008:	f7fa feee 	bl	8000de8 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <UART_WaitOnFlagUntilTimeout+0x30>
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d11b      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800602c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e043      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02c      	beq.n	80060be <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006072:	d124      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800607c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800608c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e00f      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4013      	ands	r3, r2
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	bf0c      	ite	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	2300      	movne	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d091      	beq.n	8006000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e6:	b084      	sub	sp, #16
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	f107 001c 	add.w	r0, r7, #28
 80060f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f92b 	bl	8006360 <USB_CoreReset>
 800610a:	4603      	mov	r3, r0
 800610c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800610e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
 8006120:	e005      	b.n	800612e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800613a:	b004      	add	sp, #16
 800613c:	4770      	bx	lr

0800613e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f043 0201 	orr.w	r2, r3, #1
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f023 0201 	bic.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d106      	bne.n	80061ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]
 80061ac:	e00b      	b.n	80061c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]
 80061c0:	e001      	b.n	80061c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e003      	b.n	80061ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80061c6:	2032      	movs	r0, #50	; 0x32
 80061c8:	f7fa fe1a 	bl	8000e00 <HAL_Delay>

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	019b      	lsls	r3, r3, #6
 80061ea:	f043 0220 	orr.w	r2, r3, #32
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3301      	adds	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4a09      	ldr	r2, [pc, #36]	; (8006220 <USB_FlushTxFifo+0x48>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d901      	bls.n	8006204 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e006      	b.n	8006212 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b20      	cmp	r3, #32
 800620e:	d0f0      	beq.n	80061f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	00030d40 	.word	0x00030d40

08006224 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2210      	movs	r2, #16
 8006234:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4a09      	ldr	r2, [pc, #36]	; (8006264 <USB_FlushRxFifo+0x40>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d901      	bls.n	8006248 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e006      	b.n	8006256 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b10      	cmp	r3, #16
 8006252:	d0f0      	beq.n	8006236 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	00030d40 	.word	0x00030d40

08006268 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006268:	b480      	push	{r7}
 800626a:	b089      	sub	sp, #36	; 0x24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4611      	mov	r1, r2
 8006274:	461a      	mov	r2, r3
 8006276:	460b      	mov	r3, r1
 8006278:	71fb      	strb	r3, [r7, #7]
 800627a:	4613      	mov	r3, r2
 800627c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006286:	88bb      	ldrh	r3, [r7, #4]
 8006288:	3303      	adds	r3, #3
 800628a:	089b      	lsrs	r3, r3, #2
 800628c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800628e:	2300      	movs	r3, #0
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	e00f      	b.n	80062b4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006294:	79fb      	ldrb	r3, [r7, #7]
 8006296:	031a      	lsls	r2, r3, #12
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4413      	add	r3, r2
 800629c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a0:	461a      	mov	r2, r3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3304      	adds	r3, #4
 80062ac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	3301      	adds	r3, #1
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d3eb      	bcc.n	8006294 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3724      	adds	r7, #36	; 0x24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b089      	sub	sp, #36	; 0x24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	4613      	mov	r3, r2
 80062d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	3303      	adds	r3, #3
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062e8:	2300      	movs	r3, #0
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e00b      	b.n	8006306 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	601a      	str	r2, [r3, #0]
    pDest++;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3304      	adds	r3, #4
 80062fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	3301      	adds	r3, #1
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	429a      	cmp	r2, r3
 800630c:	d3ef      	bcc.n	80062ee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800630e:	69fb      	ldr	r3, [r7, #28]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3724      	adds	r7, #36	; 0x24
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006334:	68fb      	ldr	r3, [r7, #12]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f003 0301 	and.w	r3, r3, #1
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3301      	adds	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <USB_CoreReset+0x64>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e01b      	b.n	80063b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	daf2      	bge.n	800636c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f043 0201 	orr.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <USB_CoreReset+0x64>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d901      	bls.n	80063a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e006      	b.n	80063b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d0f0      	beq.n	8006396 <USB_CoreReset+0x36>

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	00030d40 	.word	0x00030d40

080063c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c8:	b084      	sub	sp, #16
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	f107 001c 	add.w	r0, r7, #28
 80063d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063e4:	461a      	mov	r2, r3
 80063e6:	2300      	movs	r3, #0
 80063e8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006410:	f023 0304 	bic.w	r3, r3, #4
 8006414:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006416:	2110      	movs	r1, #16
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff fedd 	bl	80061d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff ff00 	bl	8006224 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e015      	b.n	8006456 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006436:	461a      	mov	r2, r3
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4413      	add	r3, r2
 8006446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644a:	461a      	mov	r2, r3
 800644c:	2300      	movs	r3, #0
 800644e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d3e5      	bcc.n	800642a <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800645e:	2101      	movs	r1, #1
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f893 	bl	800658c <USB_DriveVbus>

  HAL_Delay(200U);
 8006466:	20c8      	movs	r0, #200	; 0xc8
 8006468:	f7fa fcca 	bl	8000e00 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f04f 32ff 	mov.w	r2, #4294967295
 8006478:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2280      	movs	r2, #128	; 0x80
 800647e:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a0d      	ldr	r2, [pc, #52]	; (80064b8 <USB_HostInit+0xf0>)
 8006484:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a0c      	ldr	r2, [pc, #48]	; (80064bc <USB_HostInit+0xf4>)
 800648a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f043 0210 	orr.w	r2, r3, #16
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <USB_HostInit+0xf8>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b2:	b004      	add	sp, #16
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	00600080 	.word	0x00600080
 80064bc:	004000e0 	.word	0x004000e0
 80064c0:	a3200008 	.word	0xa3200008

080064c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	68f9      	ldr	r1, [r7, #12]
 80064f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064fc:	4313      	orrs	r3, r2
 80064fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d107      	bne.n	8006516 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800650c:	461a      	mov	r2, r3
 800650e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006512:	6053      	str	r3, [r2, #4]
 8006514:	e009      	b.n	800652a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d106      	bne.n	800652a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006522:	461a      	mov	r2, r3
 8006524:	f241 7370 	movw	r3, #6000	; 0x1770
 8006528:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006558:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006566:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006568:	2064      	movs	r0, #100	; 0x64
 800656a:	f7fa fc49 	bl	8000e00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800657a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800657c:	200a      	movs	r0, #10
 800657e:	f7fa fc3f 	bl	8000e00 <HAL_Delay>

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <USB_DriveVbus+0x44>
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d106      	bne.n	80065d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065da:	d109      	bne.n	80065f0 <USB_DriveVbus+0x64>
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	0c5b      	lsrs	r3, r3, #17
 800661c:	f003 0303 	and.w	r3, r3, #3
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	b29b      	uxth	r3, r3
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	4608      	mov	r0, r1
 800665a:	4611      	mov	r1, r2
 800665c:	461a      	mov	r2, r3
 800665e:	4603      	mov	r3, r0
 8006660:	70fb      	strb	r3, [r7, #3]
 8006662:	460b      	mov	r3, r1
 8006664:	70bb      	strb	r3, [r7, #2]
 8006666:	4613      	mov	r3, r2
 8006668:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	461a      	mov	r2, r3
 8006680:	f04f 33ff 	mov.w	r3, #4294967295
 8006684:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006686:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800668a:	2b03      	cmp	r3, #3
 800668c:	d867      	bhi.n	800675e <USB_HC_Init+0x10e>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <USB_HC_Init+0x44>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066a5 	.word	0x080066a5
 8006698:	08006721 	.word	0x08006721
 800669c:	080066a5 	.word	0x080066a5
 80066a0:	080066e3 	.word	0x080066e3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b0:	461a      	mov	r2, r3
 80066b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80066b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80066b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	da51      	bge.n	8006764 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066de:	60d3      	str	r3, [r2, #12]
      }
      break;
 80066e0:	e040      	b.n	8006764 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	461a      	mov	r2, r3
 80066f0:	f240 639d 	movw	r3, #1693	; 0x69d
 80066f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	da34      	bge.n	8006768 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	440a      	add	r2, r1
 8006714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800671e:	e023      	b.n	8006768 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4413      	add	r3, r2
 8006728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672c:	461a      	mov	r2, r3
 800672e:	f240 2325 	movw	r3, #549	; 0x225
 8006732:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006734:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006738:	2b00      	cmp	r3, #0
 800673a:	da17      	bge.n	800676c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4413      	add	r3, r2
 8006744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	0151      	lsls	r1, r2, #5
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	440a      	add	r2, r1
 8006752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006756:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800675a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800675c:	e006      	b.n	800676c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	77fb      	strb	r3, [r7, #31]
      break;
 8006762:	e004      	b.n	800676e <USB_HC_Init+0x11e>
      break;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <USB_HC_Init+0x11e>
      break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <USB_HC_Init+0x11e>
      break;
 800676c:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	2101      	movs	r1, #1
 800677e:	fa01 f303 	lsl.w	r3, r1, r3
 8006782:	6939      	ldr	r1, [r7, #16]
 8006784:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006788:	4313      	orrs	r3, r2
 800678a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006798:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	da03      	bge.n	80067a8 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80067a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	e001      	b.n	80067ac <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff26 	bl	80065fe <USB_GetHostSpeed>
 80067b2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80067b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d106      	bne.n	80067ca <USB_HC_Init+0x17a>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d003      	beq.n	80067ca <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80067c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	e001      	b.n	80067ce <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067ce:	787b      	ldrb	r3, [r7, #1]
 80067d0:	059b      	lsls	r3, r3, #22
 80067d2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067d6:	78bb      	ldrb	r3, [r7, #2]
 80067d8:	02db      	lsls	r3, r3, #11
 80067da:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067de:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067e4:	049b      	lsls	r3, r3, #18
 80067e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80067ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	0159      	lsls	r1, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	440b      	add	r3, r1
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800680a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800680c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006810:	2b03      	cmp	r3, #3
 8006812:	d10f      	bne.n	8006834 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	440a      	add	r2, r1
 800682a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006832:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006834:	7ffb      	ldrb	r3, [r7, #31]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop

08006840 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006858:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d018      	beq.n	8006894 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	8912      	ldrh	r2, [r2, #8]
 800686a:	4413      	add	r3, r2
 800686c:	3b01      	subs	r3, #1
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	8912      	ldrh	r2, [r2, #8]
 8006872:	fbb3 f3f2 	udiv	r3, r3, r2
 8006876:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006878:	8bfa      	ldrh	r2, [r7, #30]
 800687a:	8a7b      	ldrh	r3, [r7, #18]
 800687c:	429a      	cmp	r2, r3
 800687e:	d90b      	bls.n	8006898 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006880:	8a7b      	ldrh	r3, [r7, #18]
 8006882:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006884:	8bfb      	ldrh	r3, [r7, #30]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	8912      	ldrh	r2, [r2, #8]
 800688a:	fb02 f203 	mul.w	r2, r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	611a      	str	r2, [r3, #16]
 8006892:	e001      	b.n	8006898 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006894:	2301      	movs	r3, #1
 8006896:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	78db      	ldrb	r3, [r3, #3]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068a0:	8bfb      	ldrh	r3, [r7, #30]
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	8912      	ldrh	r2, [r2, #8]
 80068a6:	fb02 f203 	mul.w	r2, r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	611a      	str	r2, [r3, #16]
 80068ae:	e003      	b.n	80068b8 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068c0:	8bfb      	ldrh	r3, [r7, #30]
 80068c2:	04d9      	lsls	r1, r3, #19
 80068c4:	4b59      	ldr	r3, [pc, #356]	; (8006a2c <USB_HC_StartXfer+0x1ec>)
 80068c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	7a9b      	ldrb	r3, [r3, #10]
 80068ce:	075b      	lsls	r3, r3, #29
 80068d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068d4:	6979      	ldr	r1, [r7, #20]
 80068d6:	0148      	lsls	r0, r1, #5
 80068d8:	69b9      	ldr	r1, [r7, #24]
 80068da:	4401      	add	r1, r0
 80068dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068e2:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	440a      	add	r2, r1
 8006912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006916:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800691a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	4413      	add	r3, r2
 8006924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	7c7b      	ldrb	r3, [r7, #17]
 800692c:	075b      	lsls	r3, r3, #29
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	0148      	lsls	r0, r1, #5
 8006932:	69b9      	ldr	r1, [r7, #24]
 8006934:	4401      	add	r1, r0
 8006936:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006954:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	78db      	ldrb	r3, [r3, #3]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	e003      	b.n	8006970 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800696e:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006976:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	461a      	mov	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	78db      	ldrb	r3, [r3, #3]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d147      	bne.n	8006a22 <USB_HC_StartXfer+0x1e2>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d043      	beq.n	8006a22 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	79db      	ldrb	r3, [r3, #7]
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d830      	bhi.n	8006a04 <USB_HC_StartXfer+0x1c4>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <USB_HC_StartXfer+0x168>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	080069dd 	.word	0x080069dd
 80069b0:	080069b9 	.word	0x080069b9
 80069b4:	080069dd 	.word	0x080069dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	3303      	adds	r3, #3
 80069be:	089b      	lsrs	r3, r3, #2
 80069c0:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069c2:	89fa      	ldrh	r2, [r7, #14]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d91c      	bls.n	8006a08 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f043 0220 	orr.w	r2, r3, #32
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80069da:	e015      	b.n	8006a08 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	3303      	adds	r3, #3
 80069e2:	089b      	lsrs	r3, r3, #2
 80069e4:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80069e6:	89fa      	ldrh	r2, [r7, #14]
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d90a      	bls.n	8006a0c <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a02:	e003      	b.n	8006a0c <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006a04:	bf00      	nop
 8006a06:	e002      	b.n	8006a0e <USB_HC_StartXfer+0x1ce>
        break;
 8006a08:	bf00      	nop
 8006a0a:	e000      	b.n	8006a0e <USB_HC_StartXfer+0x1ce>
        break;
 8006a0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68d9      	ldr	r1, [r3, #12]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	785a      	ldrb	r2, [r3, #1]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff fc23 	bl	8006268 <USB_WritePacket>
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	1ff80000 	.word	0x1ff80000

08006a30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	b29b      	uxth	r3, r3
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b089      	sub	sp, #36	; 0x24
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	0c9b      	lsrs	r3, r3, #18
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	0fdb      	lsrs	r3, r3, #31
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d104      	bne.n	8006aac <USB_HC_Halt+0x5a>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e0e8      	b.n	8006c7e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <USB_HC_Halt+0x66>
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d173      	bne.n	8006ba0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ad6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f040 80cb 	bne.w	8006c7c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d143      	bne.n	8006b7a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b10:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b50:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	3301      	adds	r3, #1
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b5e:	d81d      	bhi.n	8006b9c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b76:	d0ec      	beq.n	8006b52 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b78:	e080      	b.n	8006c7c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b98:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b9a:	e06f      	b.n	8006c7c <USB_HC_Halt+0x22a>
            break;
 8006b9c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b9e:	e06d      	b.n	8006c7c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bbe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d143      	bne.n	8006c58 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c2e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	3301      	adds	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c3c:	d81d      	bhi.n	8006c7a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c54:	d0ec      	beq.n	8006c30 <USB_HC_Halt+0x1de>
 8006c56:	e011      	b.n	8006c7c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	e000      	b.n	8006c7c <USB_HC_Halt+0x22a>
          break;
 8006c7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3724      	adds	r7, #36	; 0x24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b086      	sub	sp, #24
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fa60 	bl	8006160 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ca0:	2110      	movs	r1, #16
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fa98 	bl	80061d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff fabb 	bl	8006224 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e01f      	b.n	8006cf4 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cca:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cda:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b0f      	cmp	r3, #15
 8006cf8:	d9dc      	bls.n	8006cb4 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	e034      	b.n	8006d6a <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d16:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d1e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d26:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d34:	461a      	mov	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d46:	d80c      	bhi.n	8006d62 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d5e:	d0ec      	beq.n	8006d3a <USB_StopHost+0xb0>
 8006d60:	e000      	b.n	8006d64 <USB_StopHost+0xda>
        break;
 8006d62:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	3301      	adds	r3, #1
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b0f      	cmp	r3, #15
 8006d6e:	d9c7      	bls.n	8006d00 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d76:	461a      	mov	r2, r3
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f04f 32ff 	mov.w	r2, #4294967295
 8006d84:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff f9d9 	bl	800613e <USB_EnableGlobalInt>

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d96:	b590      	push	{r4, r7, lr}
 8006d98:	b08b      	sub	sp, #44	; 0x2c
 8006d9a:	af04      	add	r7, sp, #16
 8006d9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8006da6:	2300      	movs	r3, #0
 8006da8:	2201      	movs	r2, #1
 8006daa:	2101      	movs	r1, #1
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 ffa0 	bl	8008cf2 <USBH_FindInterface>
 8006db2:	4603      	mov	r3, r0
 8006db4:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8006db6:	7c7b      	ldrb	r3, [r7, #17]
 8006db8:	2bff      	cmp	r3, #255	; 0xff
 8006dba:	d101      	bne.n	8006dc0 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e1a5      	b.n	800710c <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8006dc6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8006dca:	f003 fd6d 	bl	800a8a8 <malloc>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 8006de2:	2302      	movs	r3, #2
 8006de4:	e192      	b.n	800710c <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8006de6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006dea:	2100      	movs	r1, #0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f003 fd6b 	bl	800a8c8 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc0f 	bl	8007616 <USBH_AUDIO_FindAudioStreamingIN>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fcc9 	bl	8007794 <USBH_AUDIO_FindAudioStreamingOUT>
 8006e02:	4603      	mov	r3, r0
 8006e04:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d104      	bne.n	8006e16 <USBH_AUDIO_InterfaceInit+0x80>
 8006e0c:	7abb      	ldrb	r3, [r7, #10]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d101      	bne.n	8006e16 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e12:	2302      	movs	r3, #2
 8006e14:	e17a      	b.n	800710c <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	75fb      	strb	r3, [r7, #23]
 8006e1a:	e0c6      	b.n	8006faa <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8006e1c:	7dfa      	ldrb	r2, [r7, #23]
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	440b      	add	r3, r1
 8006e2a:	333e      	adds	r3, #62	; 0x3e
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d156      	bne.n	8006ee0 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8006e32:	7dfa      	ldrb	r2, [r7, #23]
 8006e34:	68f9      	ldr	r1, [r7, #12]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	440b      	add	r3, r1
 8006e40:	333a      	adds	r3, #58	; 0x3a
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	8aba      	ldrh	r2, [r7, #20]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d24a      	bcs.n	8006ee0 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8006e4a:	7dfa      	ldrb	r2, [r7, #23]
 8006e4c:	68f9      	ldr	r1, [r7, #12]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	440b      	add	r3, r1
 8006e58:	333a      	adds	r3, #58	; 0x3a
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8006e5e:	7dfa      	ldrb	r2, [r7, #23]
 8006e60:	68f9      	ldr	r1, [r7, #12]
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	440b      	add	r3, r1
 8006e6c:	333d      	adds	r3, #61	; 0x3d
 8006e6e:	781a      	ldrb	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8006e76:	7dfa      	ldrb	r2, [r7, #23]
 8006e78:	68f9      	ldr	r1, [r7, #12]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	440b      	add	r3, r1
 8006e84:	333c      	adds	r3, #60	; 0x3c
 8006e86:	781a      	ldrb	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8006e8e:	7dfa      	ldrb	r2, [r7, #23]
 8006e90:	68f9      	ldr	r1, [r7, #12]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3338      	adds	r3, #56	; 0x38
 8006e9e:	781a      	ldrb	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8006ea6:	7dfa      	ldrb	r2, [r7, #23]
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	440b      	add	r3, r1
 8006eb4:	333a      	adds	r3, #58	; 0x3a
 8006eb6:	881a      	ldrh	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8006ebe:	7dfa      	ldrb	r2, [r7, #23]
 8006ec0:	68f9      	ldr	r1, [r7, #12]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	440b      	add	r3, r1
 8006ecc:	3340      	adds	r3, #64	; 0x40
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8006ee0:	7dfa      	ldrb	r2, [r7, #23]
 8006ee2:	68f9      	ldr	r1, [r7, #12]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	440b      	add	r3, r1
 8006eee:	330c      	adds	r3, #12
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d156      	bne.n	8006fa4 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8006ef6:	7dfa      	ldrb	r2, [r7, #23]
 8006ef8:	68f9      	ldr	r1, [r7, #12]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	440b      	add	r3, r1
 8006f04:	3308      	adds	r3, #8
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	8a7a      	ldrh	r2, [r7, #18]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d24a      	bcs.n	8006fa4 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8006f0e:	7dfa      	ldrb	r2, [r7, #23]
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	440b      	add	r3, r1
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8006f22:	7dfa      	ldrb	r2, [r7, #23]
 8006f24:	68f9      	ldr	r1, [r7, #12]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	440b      	add	r3, r1
 8006f30:	330b      	adds	r3, #11
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8006f3a:	7dfa      	ldrb	r2, [r7, #23]
 8006f3c:	68f9      	ldr	r1, [r7, #12]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	440b      	add	r3, r1
 8006f48:	330a      	adds	r3, #10
 8006f4a:	781a      	ldrb	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8006f52:	7dfa      	ldrb	r2, [r7, #23]
 8006f54:	68f9      	ldr	r1, [r7, #12]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	440b      	add	r3, r1
 8006f60:	3306      	adds	r3, #6
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8006f6a:	7dfa      	ldrb	r2, [r7, #23]
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	440b      	add	r3, r1
 8006f78:	3308      	adds	r3, #8
 8006f7a:	881a      	ldrh	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8006f82:	7dfa      	ldrb	r2, [r7, #23]
 8006f84:	68f9      	ldr	r1, [r7, #12]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	440b      	add	r3, r1
 8006f90:	3340      	adds	r3, #64	; 0x40
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	75fb      	strb	r3, [r7, #23]
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	f67f af35 	bls.w	8006e1c <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fcad 	bl	8007912 <USBH_AUDIO_FindHIDControl>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d103      	bne.n	8006fc6 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fd25 	bl	8007a16 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d12e      	bne.n	8007034 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 ff68 	bl	8007eac <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f003 f8d5 	bl	800a194 <USBH_AllocPipe>
 8006fea:	4603      	mov	r3, r0
 8006fec:	461a      	mov	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8007012:	9202      	str	r2, [sp, #8]
 8007014:	2201      	movs	r2, #1
 8007016:	9201      	str	r2, [sp, #4]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	4623      	mov	r3, r4
 800701c:	4602      	mov	r2, r0
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f003 f889 	bl	800a136 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800702a:	2200      	movs	r2, #0
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f003 fb8d 	bl	800a74e <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800703a:	2b01      	cmp	r3, #1
 800703c:	d12e      	bne.n	800709c <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 feac 	bl	8007d9c <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f003 f8a1 	bl	800a194 <USBH_AllocPipe>
 8007052:	4603      	mov	r3, r0
 8007054:	461a      	mov	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 800707a:	9202      	str	r2, [sp, #8]
 800707c:	2201      	movs	r2, #1
 800707e:	9201      	str	r2, [sp, #4]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	4623      	mov	r3, r4
 8007084:	4602      	mov	r2, r0
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f003 f855 	bl	800a136 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007092:	2200      	movs	r2, #0
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f003 fb59 	bl	800a74e <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d12b      	bne.n	80070fe <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f003 f870 	bl	800a194 <USBH_AllocPipe>
 80070b4:	4603      	mov	r3, r0
 80070b6:	461a      	mov	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 80070dc:	9202      	str	r2, [sp, #8]
 80070de:	2203      	movs	r2, #3
 80070e0:	9201      	str	r2, [sp, #4]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4623      	mov	r3, r4
 80070e6:	4602      	mov	r2, r0
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f003 f824 	bl	800a136 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80070f4:	2200      	movs	r2, #0
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f003 fb28 	bl	800a74e <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2201      	movs	r2, #1
 8007108:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	bd90      	pop	{r4, r7, pc}

08007114 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800712c:	2b00      	cmp	r3, #0
 800712e:	d011      	beq.n	8007154 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f003 f81b 	bl	800a174 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f003 f846 	bl	800a1d8 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800715a:	2b00      	cmp	r3, #0
 800715c:	d011      	beq.n	8007182 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f003 f804 	bl	800a174 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f003 f82f 	bl	800a1d8 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007188:	2b00      	cmp	r3, #0
 800718a:	d011      	beq.n	80071b0 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f002 ffed 	bl	800a174 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f003 f818 	bl	800a1d8 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f003 fb77 	bl	800a8b8 <free>
    phost->pActiveClass->pData = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80071d0:	2200      	movs	r2, #0
 80071d2:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071f2:	2301      	movs	r3, #1
 80071f4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 80071f6:	2301      	movs	r3, #1
 80071f8:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	2b06      	cmp	r3, #6
 8007202:	f200 80be 	bhi.w	8007382 <USBH_AUDIO_ClassRequest+0x1a2>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <USBH_AUDIO_ClassRequest+0x2c>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007229 	.word	0x08007229
 8007210:	0800736b 	.word	0x0800736b
 8007214:	08007229 	.word	0x08007229
 8007218:	0800726b 	.word	0x0800726b
 800721c:	080072e3 	.word	0x080072e3
 8007220:	08007327 	.word	0x08007327
 8007224:	080072cf 	.word	0x080072cf
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800722e:	2b01      	cmp	r3, #1
 8007230:	d117      	bne.n	8007262 <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007238:	2200      	movs	r2, #0
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f002 fb2a 	bl	8009896 <USBH_SetInterface>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d103      	bne.n	8007254 <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2204      	movs	r2, #4
 8007250:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007252:	e098      	b.n	8007386 <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b03      	cmp	r3, #3
 8007258:	f040 8095 	bne.w	8007386 <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 800725c:	2302      	movs	r3, #2
 800725e:	75fb      	strb	r3, [r7, #23]
    break;
 8007260:	e091      	b.n	8007386 <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2204      	movs	r2, #4
 8007266:	701a      	strb	r2, [r3, #0]
    break;
 8007268:	e08d      	b.n	8007386 <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007270:	2b01      	cmp	r3, #1
 8007272:	d125      	bne.n	80072c0 <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800727a:	2200      	movs	r2, #0
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f002 fb09 	bl	8009896 <USBH_SetInterface>
 8007284:	4603      	mov	r3, r0
 8007286:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d112      	bne.n	80072b4 <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2207      	movs	r2, #7
 8007292:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2206      	movs	r2, #6
 8007298:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80072b2:	e06a      	b.n	800738a <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d167      	bne.n	800738a <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 80072ba:	2302      	movs	r3, #2
 80072bc:	75fb      	strb	r3, [r7, #23]
    break;
 80072be:	e064      	b.n	800738a <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2207      	movs	r2, #7
 80072c4:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2206      	movs	r2, #6
 80072ca:	705a      	strb	r2, [r3, #1]
    break;
 80072cc:	e05d      	b.n	800738a <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f938 	bl	8007544 <USBH_AUDIO_HandleCSRequest>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d159      	bne.n	800738e <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2205      	movs	r2, #5
 80072de:	701a      	strb	r2, [r3, #0]
    }
    break;
 80072e0:	e055      	b.n	800738e <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d118      	bne.n	800731e <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80072f8:	461a      	mov	r2, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f002 facb 	bl	8009896 <USBH_SetInterface>
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2206      	movs	r2, #6
 800730e:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007310:	e03f      	b.n	8007392 <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d13c      	bne.n	8007392 <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 8007318:	2302      	movs	r3, #2
 800731a:	75fb      	strb	r3, [r7, #23]
    break;
 800731c:	e039      	b.n	8007392 <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2206      	movs	r2, #6
 8007322:	701a      	strb	r2, [r3, #0]
    break;
 8007324:	e035      	b.n	8007392 <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800732c:	2b01      	cmp	r3, #1
 800732e:	d118      	bne.n	8007362 <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 800733c:	461a      	mov	r2, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f002 faa9 	bl	8009896 <USBH_SetInterface>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	2202      	movs	r2, #2
 8007352:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007354:	e01f      	b.n	8007396 <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	2b03      	cmp	r3, #3
 800735a:	d11c      	bne.n	8007396 <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 800735c:	2302      	movs	r3, #2
 800735e:	75fb      	strb	r3, [r7, #23]
    break;
 8007360:	e019      	b.n	8007396 <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2202      	movs	r2, #2
 8007366:	701a      	strb	r2, [r3, #0]
    break;
 8007368:	e015      	b.n	8007396 <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2201      	movs	r2, #1
 800736e:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007376:	2102      	movs	r1, #2
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
    status  = USBH_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007380:	e00a      	b.n	8007398 <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 8007382:	bf00      	nop
 8007384:	e008      	b.n	8007398 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8007386:	bf00      	nop
 8007388:	e006      	b.n	8007398 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 800738a:	bf00      	nop
 800738c:	e004      	b.n	8007398 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 800738e:	bf00      	nop
 8007390:	e002      	b.n	8007398 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8007396:	bf00      	nop
  }
  return status;
 8007398:	7dfb      	ldrb	r3, [r7, #23]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop

080073a4 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
 80073b0:	4613      	mov	r3, r2
 80073b2:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073be:	2301      	movs	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 80073c2:	2301      	movs	r3, #1
 80073c4:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	3b04      	subs	r3, #4
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	f200 80aa 	bhi.w	8007526 <USBH_AUDIO_CSRequest+0x182>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <USBH_AUDIO_CSRequest+0x34>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	08007435 	.word	0x08007435
 80073dc:	0800747b 	.word	0x0800747b
 80073e0:	080073ed 	.word	0x080073ed
 80073e4:	080074db 	.word	0x080074db
 80073e8:	08007521 	.word	0x08007521
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	2302      	movs	r3, #2
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	78bb      	ldrb	r3, [r7, #2]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	2302      	movs	r3, #2
 80073f8:	2106      	movs	r1, #6
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fe94 	bl	8008128 <USBH_AC_GetCur>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b01      	cmp	r3, #1
 8007408:	f000 808f 	beq.w	800752a <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2204      	movs	r2, #4
 8007410:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800741e:	3302      	adds	r3, #2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	b29b      	uxth	r3, r3
 8007426:	4313      	orrs	r3, r2
 8007428:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 800742a:	897a      	ldrh	r2, [r7, #10]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 8007432:	e07a      	b.n	800752a <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	2302      	movs	r3, #2
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	78bb      	ldrb	r3, [r7, #2]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	2302      	movs	r3, #2
 8007440:	2106      	movs	r1, #6
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f835 	bl	80084b2 <USBH_AC_GetMin>
 8007448:	4603      	mov	r3, r0
 800744a:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d06d      	beq.n	800752e <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2205      	movs	r2, #5
 8007456:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007464:	3302      	adds	r3, #2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	b29b      	uxth	r3, r3
 800746c:	4313      	orrs	r3, r2
 800746e:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8007470:	897a      	ldrh	r2, [r7, #10]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8007478:	e059      	b.n	800752e <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 800747a:	78fa      	ldrb	r2, [r7, #3]
 800747c:	2302      	movs	r3, #2
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	78bb      	ldrb	r3, [r7, #2]
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	2302      	movs	r3, #2
 8007486:	2106      	movs	r1, #6
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fee4 	bl	8008256 <USBH_AC_GetMax>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d04c      	beq.n	8007532 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2207      	movs	r2, #7
 800749c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80074aa:	3302      	adds	r3, #2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 80074b6:	897a      	ldrh	r2, [r7, #10]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d231      	bcs.n	8007532 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80074d4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 80074d8:	e02b      	b.n	8007532 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 80074da:	78fa      	ldrb	r2, [r7, #3]
 80074dc:	2302      	movs	r3, #2
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	78bb      	ldrb	r3, [r7, #2]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2302      	movs	r3, #2
 80074e6:	2106      	movs	r1, #6
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 ff4b 	bl	8008384 <USBH_AC_GetRes>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d01e      	beq.n	8007536 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2208      	movs	r2, #8
 80074fc:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800750a:	3302      	adds	r3, #2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	b29b      	uxth	r3, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8007516:	89ba      	ldrh	r2, [r7, #12]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 800751e:	e00a      	b.n	8007536 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]
      break;
 8007524:	e008      	b.n	8007538 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8007526:	bf00      	nop
 8007528:	e006      	b.n	8007538 <USBH_AUDIO_CSRequest+0x194>
      break;
 800752a:	bf00      	nop
 800752c:	e004      	b.n	8007538 <USBH_AUDIO_CSRequest+0x194>
      break;
 800752e:	bf00      	nop
 8007530:	e002      	b.n	8007538 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007532:	bf00      	nop
 8007534:	e000      	b.n	8007538 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007536:	bf00      	nop
  }
  return status;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop

08007544 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8007550:	2301      	movs	r3, #1
 8007552:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800756a:	461a      	mov	r2, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff19 	bl	80073a4 <USBH_AUDIO_CSRequest>
 8007572:	4603      	mov	r3, r0
 8007574:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d01c      	beq.n	80075b6 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10c      	bne.n	80075a0 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
 800759e:	e007      	b.n	80075b0 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2206      	movs	r2, #6
 80075b4:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075c8:	2301      	movs	r3, #1
 80075ca:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d102      	bne.n	80075e6 <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f8e7 	bl	80087b4 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d102      	bne.n	80075f6 <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 f81d 	bl	8008630 <USBH_AUDIO_InputStream>
  }

  return status;
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 800761e:	2302      	movs	r3, #2
 8007620:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
 8007634:	e09e      	b.n	8007774 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	211a      	movs	r1, #26
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	2b01      	cmp	r3, #1
 800764a:	f040 8090 	bne.w	800776e <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	211a      	movs	r1, #26
 8007654:	fb01 f303 	mul.w	r3, r1, r3
 8007658:	4413      	add	r3, r2
 800765a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800765e:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007660:	2b02      	cmp	r3, #2
 8007662:	f040 8084 	bne.w	800776e <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	211a      	movs	r1, #26
 800766c:	fb01 f303 	mul.w	r3, r1, r3
 8007670:	4413      	add	r3, r2
 8007672:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	b25b      	sxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	da77      	bge.n	800776e <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	211a      	movs	r1, #26
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800768e:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8007690:	2b00      	cmp	r3, #0
 8007692:	d06c      	beq.n	800776e <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	7bba      	ldrb	r2, [r7, #14]
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	201a      	movs	r0, #26
 800769c:	fb00 f303 	mul.w	r3, r0, r3
 80076a0:	440b      	add	r3, r1
 80076a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076a6:	7818      	ldrb	r0, [r3, #0]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	440b      	add	r3, r1
 80076b4:	3306      	adds	r3, #6
 80076b6:	4602      	mov	r2, r0
 80076b8:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	7bba      	ldrb	r2, [r7, #14]
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	201a      	movs	r0, #26
 80076c2:	fb00 f303 	mul.w	r3, r0, r3
 80076c6:	440b      	add	r3, r1
 80076c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076cc:	8818      	ldrh	r0, [r3, #0]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	440b      	add	r3, r1
 80076da:	3308      	adds	r3, #8
 80076dc:	4602      	mov	r2, r0
 80076de:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	7bba      	ldrb	r2, [r7, #14]
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	201a      	movs	r0, #26
 80076e8:	fb00 f303 	mul.w	r3, r0, r3
 80076ec:	440b      	add	r3, r1
 80076ee:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80076f2:	7818      	ldrb	r0, [r3, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	440b      	add	r3, r1
 8007700:	330b      	adds	r3, #11
 8007702:	4602      	mov	r2, r0
 8007704:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	7bba      	ldrb	r2, [r7, #14]
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	201a      	movs	r0, #26
 800770e:	fb00 f303 	mul.w	r3, r0, r3
 8007712:	440b      	add	r3, r1
 8007714:	f203 3345 	addw	r3, r3, #837	; 0x345
 8007718:	7818      	ldrb	r0, [r3, #0]
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	440b      	add	r3, r1
 8007726:	330a      	adds	r3, #10
 8007728:	4602      	mov	r2, r0
 800772a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	211a      	movs	r1, #26
 8007732:	fb01 f303 	mul.w	r3, r1, r3
 8007736:	4413      	add	r3, r2
 8007738:	f203 3352 	addw	r3, r3, #850	; 0x352
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	7bba      	ldrb	r2, [r7, #14]
 8007740:	b298      	uxth	r0, r3
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	440b      	add	r3, r1
 800774e:	330e      	adds	r3, #14
 8007750:	4602      	mov	r2, r0
 8007752:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8007754:	7bba      	ldrb	r2, [r7, #14]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	440b      	add	r3, r1
 8007762:	330c      	adds	r3, #12
 8007764:	2201      	movs	r2, #1
 8007766:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	3301      	adds	r3, #1
 800776c:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	3301      	adds	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b09      	cmp	r3, #9
 8007778:	f67f af5d 	bls.w	8007636 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007786:	7b7b      	ldrb	r3, [r7, #13]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 800779c:	2302      	movs	r3, #2
 800779e:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
 80077b2:	e09e      	b.n	80078f2 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	211a      	movs	r1, #26
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	f203 3347 	addw	r3, r3, #839	; 0x347
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	f040 8090 	bne.w	80078ec <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	211a      	movs	r1, #26
 80077d2:	fb01 f303 	mul.w	r3, r1, r3
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80077dc:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80077de:	2b02      	cmp	r3, #2
 80077e0:	f040 8084 	bne.w	80078ec <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	211a      	movs	r1, #26
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	db77      	blt.n	80078ec <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	211a      	movs	r1, #26
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	4413      	add	r3, r2
 8007808:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800780c:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800780e:	2b00      	cmp	r3, #0
 8007810:	d06c      	beq.n	80078ec <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	7bba      	ldrb	r2, [r7, #14]
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	201a      	movs	r0, #26
 800781a:	fb00 f303 	mul.w	r3, r0, r3
 800781e:	440b      	add	r3, r1
 8007820:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007824:	7818      	ldrb	r0, [r3, #0]
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	440b      	add	r3, r1
 8007832:	3338      	adds	r3, #56	; 0x38
 8007834:	4602      	mov	r2, r0
 8007836:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	7bba      	ldrb	r2, [r7, #14]
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	201a      	movs	r0, #26
 8007840:	fb00 f303 	mul.w	r3, r0, r3
 8007844:	440b      	add	r3, r1
 8007846:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800784a:	8818      	ldrh	r0, [r3, #0]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	440b      	add	r3, r1
 8007858:	333a      	adds	r3, #58	; 0x3a
 800785a:	4602      	mov	r2, r0
 800785c:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	7bba      	ldrb	r2, [r7, #14]
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	201a      	movs	r0, #26
 8007866:	fb00 f303 	mul.w	r3, r0, r3
 800786a:	440b      	add	r3, r1
 800786c:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007870:	7818      	ldrb	r0, [r3, #0]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	440b      	add	r3, r1
 800787e:	333d      	adds	r3, #61	; 0x3d
 8007880:	4602      	mov	r2, r0
 8007882:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	7bba      	ldrb	r2, [r7, #14]
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	201a      	movs	r0, #26
 800788c:	fb00 f303 	mul.w	r3, r0, r3
 8007890:	440b      	add	r3, r1
 8007892:	f203 3345 	addw	r3, r3, #837	; 0x345
 8007896:	7818      	ldrb	r0, [r3, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	440b      	add	r3, r1
 80078a4:	333c      	adds	r3, #60	; 0x3c
 80078a6:	4602      	mov	r2, r0
 80078a8:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	211a      	movs	r1, #26
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	4413      	add	r3, r2
 80078b6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	7bba      	ldrb	r2, [r7, #14]
 80078be:	b298      	uxth	r0, r3
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	440b      	add	r3, r1
 80078cc:	3340      	adds	r3, #64	; 0x40
 80078ce:	4602      	mov	r2, r0
 80078d0:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 80078d2:	7bba      	ldrb	r2, [r7, #14]
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	440b      	add	r3, r1
 80078e0:	333e      	adds	r3, #62	; 0x3e
 80078e2:	2201      	movs	r2, #1
 80078e4:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	3301      	adds	r3, #1
 80078ea:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	3301      	adds	r3, #1
 80078f0:	73fb      	strb	r3, [r7, #15]
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b09      	cmp	r3, #9
 80078f6:	f67f af5d 	bls.w	80077b4 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007904:	7b7b      	ldrb	r3, [r7, #13]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 800791a:	2302      	movs	r3, #2
 800791c:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8007928:	23ff      	movs	r3, #255	; 0xff
 800792a:	2201      	movs	r2, #1
 800792c:	2101      	movs	r1, #1
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 f9df 	bl	8008cf2 <USBH_FindInterface>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	2bff      	cmp	r3, #255	; 0xff
 800793c:	d002      	beq.n	8007944 <USBH_AUDIO_FindHIDControl+0x32>
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	2b09      	cmp	r3, #9
 8007942:	d901      	bls.n	8007948 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8007944:	2302      	movs	r3, #2
 8007946:	e062      	b.n	8007a0e <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
 800794c:	e05b      	b.n	8007a06 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	211a      	movs	r1, #26
 8007954:	fb01 f303 	mul.w	r3, r1, r3
 8007958:	4413      	add	r3, r2
 800795a:	f203 3347 	addw	r3, r3, #839	; 0x347
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d14d      	bne.n	8007a00 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	211a      	movs	r1, #26
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	4413      	add	r3, r2
 8007970:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007974:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8007976:	2b00      	cmp	r3, #0
 8007978:	d042      	beq.n	8007a00 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	211a      	movs	r1, #26
 8007980:	fb01 f303 	mul.w	r3, r1, r3
 8007984:	4413      	add	r3, r2
 8007986:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b25b      	sxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	da36      	bge.n	8007a00 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	211a      	movs	r1, #26
 8007998:	fb01 f303 	mul.w	r3, r1, r3
 800799c:	4413      	add	r3, r2
 800799e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079a2:	781a      	ldrb	r2, [r3, #0]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	211a      	movs	r1, #26
 80079b0:	fb01 f303 	mul.w	r3, r1, r3
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80079ba:	881a      	ldrh	r2, [r3, #0]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	211a      	movs	r1, #26
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80079d2:	781a      	ldrb	r2, [r3, #0]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	211a      	movs	r1, #26
 80079e0:	fb01 f303 	mul.w	r3, r1, r3
 80079e4:	4413      	add	r3, r2
 80079e6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80079ea:	781a      	ldrb	r2, [r3, #0]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73bb      	strb	r3, [r7, #14]
        break;
 80079fe:	e005      	b.n	8007a0c <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	3301      	adds	r3, #1
 8007a04:	73fb      	strb	r3, [r7, #15]
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	2b09      	cmp	r3, #9
 8007a0a:	d9a0      	bls.n	800794e <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b088      	sub	sp, #32
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	331c      	adds	r3, #28
 8007a38:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8007a3a:	2309      	movs	r3, #9
 8007a3c:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8007a5e:	e03d      	b.n	8007adc <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a60:	f107 030c 	add.w	r3, r7, #12
 8007a64:	4619      	mov	r1, r3
 8007a66:	69b8      	ldr	r0, [r7, #24]
 8007a68:	f002 f901 	bl	8009c6e <USBH_GetNextDesc>
 8007a6c:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	785b      	ldrb	r3, [r3, #1]
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d002      	beq.n	8007a7c <USBH_AUDIO_ParseCSDescriptors+0x66>
 8007a76:	2b24      	cmp	r3, #36	; 0x24
 8007a78:	d00f      	beq.n	8007a9a <USBH_AUDIO_ParseCSDescriptors+0x84>
 8007a7a:	e02e      	b.n	8007ada <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	789b      	ldrb	r3, [r3, #2]
 8007a80:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	78db      	ldrb	r3, [r3, #3]
 8007a86:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8007a88:	7bfa      	ldrb	r2, [r7, #15]
 8007a8a:	7dbb      	ldrb	r3, [r7, #22]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 f975 	bl	8008d7e <USBH_FindInterfaceIndex>
 8007a94:	4603      	mov	r3, r0
 8007a96:	75fb      	strb	r3, [r7, #23]
        break;
 8007a98:	e020      	b.n	8007adc <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007aa0:	7dba      	ldrb	r2, [r7, #22]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d81a      	bhi.n	8007adc <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	2bff      	cmp	r3, #255	; 0xff
 8007aaa:	d002      	beq.n	8007ab2 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	2b09      	cmp	r3, #9
 8007ab0:	d902      	bls.n	8007ab8 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	77fb      	strb	r3, [r7, #31]
 8007ab6:	e00f      	b.n	8007ad8 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	211a      	movs	r1, #26
 8007ac4:	fb01 f303 	mul.w	r3, r1, r3
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f000 f80e 	bl	8007af4 <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 8007ad8:	e000      	b.n	8007adc <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 8007ada:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 8007ae2:	89bb      	ldrh	r3, [r7, #12]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d8bb      	bhi.n	8007a60 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8007ae8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	460b      	mov	r3, r1
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8007b02:	7afb      	ldrb	r3, [r7, #11]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d163      	bne.n	8007bd0 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3302      	adds	r3, #2
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b05      	cmp	r3, #5
 8007b12:	f200 8081 	bhi.w	8007c18 <ParseCSDescriptors+0x124>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <ParseCSDescriptors+0x28>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b35 	.word	0x08007b35
 8007b20:	08007b3d 	.word	0x08007b3d
 8007b24:	08007b59 	.word	0x08007b59
 8007b28:	08007bb3 	.word	0x08007bb3
 8007b2c:	08007b95 	.word	0x08007b95
 8007b30:	08007b77 	.word	0x08007b77
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
        break;
 8007b3a:	e070      	b.n	8007c1e <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	b291      	uxth	r1, r2
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	605a      	str	r2, [r3, #4]
        break;
 8007b56:	e062      	b.n	8007c1e <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	b291      	uxth	r1, r2
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	605a      	str	r2, [r3, #4]
        break;
 8007b74:	e053      	b.n	8007c1e <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	b291      	uxth	r1, r2
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]
        break;
 8007b92:	e044      	b.n	8007c1e <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	b291      	uxth	r1, r2
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	3310      	adds	r3, #16
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]
        break;
 8007bb0:	e035      	b.n	8007c1e <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	b291      	uxth	r1, r2
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	605a      	str	r2, [r3, #4]
        break;
 8007bce:	e026      	b.n	8007c1e <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d122      	bne.n	8007c1c <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3302      	adds	r3, #2
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d002      	beq.n	8007be6 <ParseCSDescriptors+0xf2>
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d00a      	beq.n	8007bfa <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8007be4:	e01b      	b.n	8007c1e <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	330a      	adds	r3, #10
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	605a      	str	r2, [r3, #4]
          break;
 8007bf8:	e011      	b.n	8007c1e <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	b291      	uxth	r1, r2
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	330a      	adds	r3, #10
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	4413      	add	r3, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	609a      	str	r2, [r3, #8]
          break;
 8007c16:	e002      	b.n	8007c1e <ParseCSDescriptors+0x12a>
        break;
 8007c18:	bf00      	nop
 8007c1a:	e000      	b.n	8007c1e <ParseCSDescriptors+0x12a>
      }
    }
 8007c1c:	bf00      	nop
  }

  return USBH_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	e01b      	b.n	8007c80 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	3322      	adds	r3, #34	; 0x22
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	791b      	ldrb	r3, [r3, #4]
 8007c56:	78fa      	ldrb	r2, [r7, #3]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d10e      	bne.n	8007c7a <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	3322      	adds	r3, #34	; 0x22
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	78db      	ldrb	r3, [r3, #3]
 8007c6a:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	041a      	lsls	r2, r3, #16
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007c78:	e089      	b.n	8007d8e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d3dc      	bcc.n	8007c48 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	e026      	b.n	8007ce2 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	3326      	adds	r3, #38	; 0x26
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	795b      	ldrb	r3, [r3, #5]
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d009      	beq.n	8007cbc <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	3326      	adds	r3, #38	; 0x26
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d10f      	bne.n	8007cdc <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	3326      	adds	r3, #38	; 0x26
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	78db      	ldrb	r3, [r3, #3]
 8007cca:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cda:	e058      	b.n	8007d8e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	73fb      	strb	r3, [r7, #15]
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d3d1      	bcc.n	8007c94 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
 8007cf4:	e01c      	b.n	8007d30 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	332a      	adds	r3, #42	; 0x2a
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	795b      	ldrb	r3, [r3, #5]
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d10f      	bne.n	8007d2a <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	332a      	adds	r3, #42	; 0x2a
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	78db      	ldrb	r3, [r3, #3]
 8007d18:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	461a      	mov	r2, r3
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8007d28:	e031      	b.n	8007d8e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d3db      	bcc.n	8007cf6 <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
 8007d42:	e01c      	b.n	8007d7e <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	331e      	adds	r3, #30
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	79db      	ldrb	r3, [r3, #7]
 8007d52:	78fa      	ldrb	r2, [r7, #3]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d10f      	bne.n	8007d78 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	331e      	adds	r3, #30
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	78db      	ldrb	r3, [r3, #3]
 8007d66:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	041b      	lsls	r3, r3, #16
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d76:	e00a      	b.n	8007d8e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	73fb      	strb	r3, [r7, #15]
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d3db      	bcc.n	8007d44 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
	...

08007d9c <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8007da4:	2300      	movs	r3, #0
 8007da6:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007db6:	2300      	movs	r3, #0
 8007db8:	75bb      	strb	r3, [r7, #22]
 8007dba:	e02c      	b.n	8007e16 <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8007dbc:	7dbb      	ldrb	r3, [r7, #22]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	331a      	adds	r3, #26
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	7dbb      	ldrb	r3, [r7, #22]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	331a      	adds	r3, #26
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	795b      	ldrb	r3, [r3, #5]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	430b      	orrs	r3, r1
 8007de2:	f240 2201 	movw	r2, #513	; 0x201
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d112      	bne.n	8007e10 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8007dea:	7dbb      	ldrb	r3, [r7, #22]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	331a      	adds	r3, #26
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	78db      	ldrb	r3, [r3, #3]
 8007df8:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8007dfa:	7dbb      	ldrb	r3, [r7, #22]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	331a      	adds	r3, #26
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	79da      	ldrb	r2, [r3, #7]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8007e0e:	e009      	b.n	8007e24 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007e10:	7dbb      	ldrb	r3, [r7, #22]
 8007e12:	3301      	adds	r3, #1
 8007e14:	75bb      	strb	r3, [r7, #22]
 8007e16:	7dbb      	ldrb	r3, [r7, #22]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d3cb      	bcc.n	8007dbc <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff feff 	bl	8007c2c <USBH_AUDIO_FindLinkedUnit>
 8007e2e:	60f8      	str	r0, [r7, #12]

    if (!value)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 8007e36:	2302      	movs	r3, #2
 8007e38:	e034      	b.n	8007ea4 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	0c1b      	lsrs	r3, r3, #16
 8007e48:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8007e4a:	7abb      	ldrb	r3, [r7, #10]
 8007e4c:	3b03      	subs	r3, #3
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d81e      	bhi.n	8007e90 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8007e52:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007e87 	.word	0x08007e87
 8007e5c:	08007e73 	.word	0x08007e73
 8007e60:	08007e7d 	.word	0x08007e7d
 8007e64:	08007e69 	.word	0x08007e69
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	7afa      	ldrb	r2, [r7, #11]
 8007e6c:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8007e70:	e011      	b.n	8007e96 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	7afa      	ldrb	r2, [r7, #11]
 8007e76:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 8007e7a:	e00c      	b.n	8007e96 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	7afa      	ldrb	r2, [r7, #11]
 8007e80:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8007e84:	e007      	b.n	8007e96 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	7afa      	ldrb	r2, [r7, #11]
 8007e8a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 8007e8e:	e002      	b.n	8007e96 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 8007e90:	2302      	movs	r3, #2
 8007e92:	757b      	strb	r3, [r7, #21]
        break;
 8007e94:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8007e96:	7abb      	ldrb	r3, [r7, #10]
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d002      	beq.n	8007ea2 <USBH_AUDIO_BuildMicrophonePath+0x106>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1c0      	bne.n	8007e24 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8007ea2:	7d7b      	ldrb	r3, [r7, #21]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	757b      	strb	r3, [r7, #21]
 8007eca:	e02c      	b.n	8007f26 <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8007ecc:	7d7b      	ldrb	r3, [r7, #21]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	331a      	adds	r3, #26
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	791b      	ldrb	r3, [r3, #4]
 8007eda:	4619      	mov	r1, r3
 8007edc:	7d7b      	ldrb	r3, [r7, #21]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	331a      	adds	r3, #26
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	795b      	ldrb	r3, [r3, #5]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	f240 1201 	movw	r2, #257	; 0x101
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d112      	bne.n	8007f20 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8007efa:	7d7b      	ldrb	r3, [r7, #21]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	331a      	adds	r3, #26
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	78db      	ldrb	r3, [r3, #3]
 8007f08:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8007f0a:	7d7b      	ldrb	r3, [r7, #21]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	331a      	adds	r3, #26
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	79da      	ldrb	r2, [r3, #7]
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8007f1e:	e009      	b.n	8007f34 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007f20:	7d7b      	ldrb	r3, [r7, #21]
 8007f22:	3301      	adds	r3, #1
 8007f24:	757b      	strb	r3, [r7, #21]
 8007f26:	7d7b      	ldrb	r3, [r7, #21]
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d3cb      	bcc.n	8007ecc <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8007f34:	2300      	movs	r3, #0
 8007f36:	75bb      	strb	r3, [r7, #22]
 8007f38:	e011      	b.n	8007f5e <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8007f3a:	7dbb      	ldrb	r3, [r7, #22]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	3317      	adds	r3, #23
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	4413      	add	r3, r2
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	78db      	ldrb	r3, [r3, #3]
 8007f48:	7dfa      	ldrb	r2, [r7, #23]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d104      	bne.n	8007f58 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	7dba      	ldrb	r2, [r7, #22]
 8007f52:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 8007f56:	e009      	b.n	8007f6c <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8007f58:	7dbb      	ldrb	r3, [r7, #22]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	75bb      	strb	r3, [r7, #22]
 8007f5e:	7dbb      	ldrb	r3, [r7, #22]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3e6      	bcc.n	8007f3a <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff fe5b 	bl	8007c2c <USBH_AUDIO_FindLinkedUnit>
 8007f76:	60f8      	str	r0, [r7, #12]

    if (!value)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e053      	b.n	800802a <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	0a1b      	lsrs	r3, r3, #8
 8007f8a:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	3b03      	subs	r3, #3
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d83c      	bhi.n	8008014 <USBH_AUDIO_BuildHeadphonePath+0x168>
 8007f9a:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fcf 	.word	0x08007fcf
 8007fa4:	08007fbb 	.word	0x08007fbb
 8007fa8:	08007fc5 	.word	0x08007fc5
 8007fac:	08007fb1 	.word	0x08007fb1
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	7dba      	ldrb	r2, [r7, #22]
 8007fb4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8007fb8:	e030      	b.n	800801c <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	7dba      	ldrb	r2, [r7, #22]
 8007fbe:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 8007fc2:	e02b      	b.n	800801c <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	7dba      	ldrb	r2, [r7, #22]
 8007fc8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8007fcc:	e026      	b.n	800801c <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	7dba      	ldrb	r2, [r7, #22]
 8007fd2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8007fd6:	7dbb      	ldrb	r3, [r7, #22]
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d818      	bhi.n	800800e <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8007fdc:	7dbb      	ldrb	r3, [r7, #22]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	331e      	adds	r3, #30
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	791b      	ldrb	r3, [r3, #4]
 8007fea:	4619      	mov	r1, r3
 8007fec:	7dbb      	ldrb	r3, [r7, #22]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	331e      	adds	r3, #30
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	795b      	ldrb	r3, [r3, #5]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	430b      	orrs	r3, r1
 8008002:	f240 1203 	movw	r2, #259	; 0x103
 8008006:	4293      	cmp	r3, r2
 8008008:	d007      	beq.n	800801a <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	e00d      	b.n	800802a <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 800800e:	2302      	movs	r3, #2
 8008010:	753b      	strb	r3, [r7, #20]
        }
        break;
 8008012:	e002      	b.n	800801a <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 8008014:	2302      	movs	r3, #2
 8008016:	753b      	strb	r3, [r7, #20]
        break;
 8008018:	e000      	b.n	800801c <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 800801a:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 800801c:	7afb      	ldrb	r3, [r7, #11]
 800801e:	2b03      	cmp	r3, #3
 8008020:	d002      	beq.n	8008028 <USBH_AUDIO_BuildHeadphonePath+0x17c>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1a1      	bne.n	8007f6c <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 8008028:	7d3b      	ldrb	r3, [r7, #20]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop

08008034 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	4608      	mov	r0, r1
 800803e:	4611      	mov	r1, r2
 8008040:	461a      	mov	r2, r3
 8008042:	4603      	mov	r3, r0
 8008044:	70fb      	strb	r3, [r7, #3]
 8008046:	460b      	mov	r3, r1
 8008048:	70bb      	strb	r3, [r7, #2]
 800804a:	4613      	mov	r3, r2
 800804c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	82fb      	strh	r3, [r7, #22]
 8008052:	2300      	movs	r3, #0
 8008054:	82bb      	strh	r3, [r7, #20]
 8008056:	2300      	movs	r3, #0
 8008058:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	2b02      	cmp	r3, #2
 800806c:	d002      	beq.n	8008074 <USBH_AC_SetCur+0x40>
 800806e:	2b06      	cmp	r3, #6
 8008070:	d018      	beq.n	80080a4 <USBH_AC_SetCur+0x70>
 8008072:	e035      	b.n	80080e0 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	78db      	ldrb	r3, [r3, #3]
 800807a:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800807c:	2300      	movs	r3, #0
 800807e:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008080:	7afb      	ldrb	r3, [r7, #11]
 8008082:	b29b      	uxth	r3, r3
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	b29a      	uxth	r2, r3
 8008088:	7abb      	ldrb	r3, [r7, #10]
 800808a:	b29b      	uxth	r3, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008094:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 800809e:	2301      	movs	r3, #1
 80080a0:	827b      	strh	r3, [r7, #18]
      break;
 80080a2:	e020      	b.n	80080e6 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80080a4:	78bb      	ldrb	r3, [r7, #2]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	3322      	adds	r3, #34	; 0x22
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	78db      	ldrb	r3, [r3, #3]
 80080b2:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80080b4:	2300      	movs	r3, #0
 80080b6:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	021b      	lsls	r3, r3, #8
 80080be:	b29a      	uxth	r2, r3
 80080c0:	7abb      	ldrb	r3, [r7, #10]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4313      	orrs	r3, r2
 80080c6:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80080c8:	787b      	ldrb	r3, [r7, #1]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	4313      	orrs	r3, r2
 80080d8:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80080da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080dc:	827b      	strh	r3, [r7, #18]
      break;
 80080de:	e002      	b.n	80080e6 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 80080e0:	2302      	movs	r3, #2
 80080e2:	747b      	strb	r3, [r7, #17]
      break;
 80080e4:	bf00      	nop
  }

  if (ret != USBH_OK)
 80080e6:	7c7b      	ldrb	r3, [r7, #17]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 80080ec:	7c7b      	ldrb	r3, [r7, #17]
 80080ee:	e017      	b.n	8008120 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2221      	movs	r2, #33	; 0x21
 80080f4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8afa      	ldrh	r2, [r7, #22]
 8008100:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	8aba      	ldrh	r2, [r7, #20]
 8008106:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	8a7a      	ldrh	r2, [r7, #18]
 800810c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008114:	8a7a      	ldrh	r2, [r7, #18]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 fdc3 	bl	8009ca4 <USBH_CtlReq>
 800811e:	4603      	mov	r3, r0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	4608      	mov	r0, r1
 8008132:	4611      	mov	r1, r2
 8008134:	461a      	mov	r2, r3
 8008136:	4603      	mov	r3, r0
 8008138:	70fb      	strb	r3, [r7, #3]
 800813a:	460b      	mov	r3, r1
 800813c:	70bb      	strb	r3, [r7, #2]
 800813e:	4613      	mov	r3, r2
 8008140:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	82fb      	strh	r3, [r7, #22]
 8008146:	2300      	movs	r3, #0
 8008148:	82bb      	strh	r3, [r7, #20]
 800814a:	2300      	movs	r3, #0
 800814c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	743b      	strb	r3, [r7, #16]
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	2b06      	cmp	r3, #6
 8008168:	d01e      	beq.n	80081a8 <USBH_AC_GetCur+0x80>
 800816a:	2b06      	cmp	r3, #6
 800816c:	dc4f      	bgt.n	800820e <USBH_AC_GetCur+0xe6>
 800816e:	2b02      	cmp	r3, #2
 8008170:	d002      	beq.n	8008178 <USBH_AC_GetCur+0x50>
 8008172:	2b03      	cmp	r3, #3
 8008174:	d036      	beq.n	80081e4 <USBH_AC_GetCur+0xbc>
 8008176:	e04a      	b.n	800820e <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817c:	78db      	ldrb	r3, [r3, #3]
 800817e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008184:	7c3b      	ldrb	r3, [r7, #16]
 8008186:	b29b      	uxth	r3, r3
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	b29a      	uxth	r2, r3
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	b29b      	uxth	r3, r3
 8008190:	4313      	orrs	r3, r2
 8008192:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008198:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2200      	movs	r2, #0
 800819e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80081a2:	2301      	movs	r3, #1
 80081a4:	827b      	strh	r3, [r7, #18]
      break;
 80081a6:	e035      	b.n	8008214 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80081a8:	78bb      	ldrb	r3, [r7, #2]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	3322      	adds	r3, #34	; 0x22
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	78db      	ldrb	r3, [r3, #3]
 80081b6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80081bc:	7c3b      	ldrb	r3, [r7, #16]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	4313      	orrs	r3, r2
 80081ca:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80081cc:	787b      	ldrb	r3, [r7, #1]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80081de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081e0:	827b      	strh	r3, [r7, #18]
      break;
 80081e2:	e017      	b.n	8008214 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ea:	78db      	ldrb	r3, [r3, #3]
 80081ec:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80081f2:	7c3b      	ldrb	r3, [r7, #16]
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008206:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008208:	2301      	movs	r3, #1
 800820a:	827b      	strh	r3, [r7, #18]
      break;
 800820c:	e002      	b.n	8008214 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 800820e:	2302      	movs	r3, #2
 8008210:	747b      	strb	r3, [r7, #17]
      break;
 8008212:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008214:	7c7b      	ldrb	r3, [r7, #17]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <USBH_AC_GetCur+0xf6>
  {
    return ret;
 800821a:	7c7b      	ldrb	r3, [r7, #17]
 800821c:	e017      	b.n	800824e <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	22a1      	movs	r2, #161	; 0xa1
 8008222:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2281      	movs	r2, #129	; 0x81
 8008228:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	8afa      	ldrh	r2, [r7, #22]
 800822e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	8aba      	ldrh	r2, [r7, #20]
 8008234:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8a7a      	ldrh	r2, [r7, #18]
 800823a:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008242:	8a7a      	ldrh	r2, [r7, #18]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 fd2c 	bl	8009ca4 <USBH_CtlReq>
 800824c:	4603      	mov	r3, r0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b086      	sub	sp, #24
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	4608      	mov	r0, r1
 8008260:	4611      	mov	r1, r2
 8008262:	461a      	mov	r2, r3
 8008264:	4603      	mov	r3, r0
 8008266:	70fb      	strb	r3, [r7, #3]
 8008268:	460b      	mov	r3, r1
 800826a:	70bb      	strb	r3, [r7, #2]
 800826c:	4613      	mov	r3, r2
 800826e:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	82fb      	strh	r3, [r7, #22]
 8008274:	2300      	movs	r3, #0
 8008276:	82bb      	strh	r3, [r7, #20]
 8008278:	2300      	movs	r3, #0
 800827a:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	743b      	strb	r3, [r7, #16]
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	2b06      	cmp	r3, #6
 8008296:	d01e      	beq.n	80082d6 <USBH_AC_GetMax+0x80>
 8008298:	2b06      	cmp	r3, #6
 800829a:	dc4f      	bgt.n	800833c <USBH_AC_GetMax+0xe6>
 800829c:	2b02      	cmp	r3, #2
 800829e:	d002      	beq.n	80082a6 <USBH_AC_GetMax+0x50>
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d036      	beq.n	8008312 <USBH_AC_GetMax+0xbc>
 80082a4:	e04a      	b.n	800833c <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	78db      	ldrb	r3, [r3, #3]
 80082ac:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80082b2:	7c3b      	ldrb	r3, [r7, #16]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	4313      	orrs	r3, r2
 80082c0:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80082c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c6:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80082d0:	2301      	movs	r3, #1
 80082d2:	827b      	strh	r3, [r7, #18]
      break;
 80082d4:	e035      	b.n	8008342 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80082d6:	78bb      	ldrb	r3, [r7, #2]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	3322      	adds	r3, #34	; 0x22
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80082ea:	7c3b      	ldrb	r3, [r7, #16]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	021b      	lsls	r3, r3, #8
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	4313      	orrs	r3, r2
 80082f8:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80082fa:	787b      	ldrb	r3, [r7, #1]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	021b      	lsls	r3, r3, #8
 8008300:	b29a      	uxth	r2, r3
 8008302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008306:	b29b      	uxth	r3, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800830c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800830e:	827b      	strh	r3, [r7, #18]
      break;
 8008310:	e017      	b.n	8008342 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008318:	78db      	ldrb	r3, [r3, #3]
 800831a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8008320:	7c3b      	ldrb	r3, [r7, #16]
 8008322:	b29b      	uxth	r3, r3
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	b29a      	uxth	r2, r3
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	b29b      	uxth	r3, r3
 800832c:	4313      	orrs	r3, r2
 800832e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008334:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008336:	2301      	movs	r3, #1
 8008338:	827b      	strh	r3, [r7, #18]
      break;
 800833a:	e002      	b.n	8008342 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 800833c:	2302      	movs	r3, #2
 800833e:	747b      	strb	r3, [r7, #17]
      break;
 8008340:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008342:	7c7b      	ldrb	r3, [r7, #17]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <USBH_AC_GetMax+0xf6>
  {
    return ret;
 8008348:	7c7b      	ldrb	r3, [r7, #17]
 800834a:	e017      	b.n	800837c <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	22a1      	movs	r2, #161	; 0xa1
 8008350:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2283      	movs	r2, #131	; 0x83
 8008356:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8afa      	ldrh	r2, [r7, #22]
 800835c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	8aba      	ldrh	r2, [r7, #20]
 8008362:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	8a7a      	ldrh	r2, [r7, #18]
 8008368:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008370:	8a7a      	ldrh	r2, [r7, #18]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fc95 	bl	8009ca4 <USBH_CtlReq>
 800837a:	4603      	mov	r3, r0

}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	461a      	mov	r2, r3
 8008392:	4603      	mov	r3, r0
 8008394:	70fb      	strb	r3, [r7, #3]
 8008396:	460b      	mov	r3, r1
 8008398:	70bb      	strb	r3, [r7, #2]
 800839a:	4613      	mov	r3, r2
 800839c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	82fb      	strh	r3, [r7, #22]
 80083a2:	2300      	movs	r3, #0
 80083a4:	82bb      	strh	r3, [r7, #20]
 80083a6:	2300      	movs	r3, #0
 80083a8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	743b      	strb	r3, [r7, #16]
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	2b06      	cmp	r3, #6
 80083c4:	d01e      	beq.n	8008404 <USBH_AC_GetRes+0x80>
 80083c6:	2b06      	cmp	r3, #6
 80083c8:	dc4f      	bgt.n	800846a <USBH_AC_GetRes+0xe6>
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d002      	beq.n	80083d4 <USBH_AC_GetRes+0x50>
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d036      	beq.n	8008440 <USBH_AC_GetRes+0xbc>
 80083d2:	e04a      	b.n	800846a <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d8:	78db      	ldrb	r3, [r3, #3]
 80083da:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80083e0:	7c3b      	ldrb	r3, [r7, #16]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	4313      	orrs	r3, r2
 80083ee:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 80083f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083f4:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80083fe:	2301      	movs	r3, #1
 8008400:	827b      	strh	r3, [r7, #18]
      break;
 8008402:	e035      	b.n	8008470 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008404:	78bb      	ldrb	r3, [r7, #2]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	3322      	adds	r3, #34	; 0x22
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	78db      	ldrb	r3, [r3, #3]
 8008412:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008418:	7c3b      	ldrb	r3, [r7, #16]
 800841a:	b29b      	uxth	r3, r3
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	b29a      	uxth	r2, r3
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	b29b      	uxth	r3, r3
 8008424:	4313      	orrs	r3, r2
 8008426:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008428:	787b      	ldrb	r3, [r7, #1]
 800842a:	b29b      	uxth	r3, r3
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	b29a      	uxth	r2, r3
 8008430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008434:	b29b      	uxth	r3, r3
 8008436:	4313      	orrs	r3, r2
 8008438:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800843a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800843c:	827b      	strh	r3, [r7, #18]
      break;
 800843e:	e017      	b.n	8008470 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008446:	78db      	ldrb	r3, [r3, #3]
 8008448:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800844e:	7c3b      	ldrb	r3, [r7, #16]
 8008450:	b29b      	uxth	r3, r3
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	b29a      	uxth	r2, r3
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	b29b      	uxth	r3, r3
 800845a:	4313      	orrs	r3, r2
 800845c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 800845e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008462:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008464:	2301      	movs	r3, #1
 8008466:	827b      	strh	r3, [r7, #18]
      break;
 8008468:	e002      	b.n	8008470 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 800846a:	2302      	movs	r3, #2
 800846c:	747b      	strb	r3, [r7, #17]
      break;
 800846e:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008470:	7c7b      	ldrb	r3, [r7, #17]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8008476:	7c7b      	ldrb	r3, [r7, #17]
 8008478:	e017      	b.n	80084aa <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	22a1      	movs	r2, #161	; 0xa1
 800847e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2284      	movs	r2, #132	; 0x84
 8008484:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	8afa      	ldrh	r2, [r7, #22]
 800848a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	8aba      	ldrh	r2, [r7, #20]
 8008490:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	8a7a      	ldrh	r2, [r7, #18]
 8008496:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800849e:	8a7a      	ldrh	r2, [r7, #18]
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fbfe 	bl	8009ca4 <USBH_CtlReq>
 80084a8:	4603      	mov	r3, r0

}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	4608      	mov	r0, r1
 80084bc:	4611      	mov	r1, r2
 80084be:	461a      	mov	r2, r3
 80084c0:	4603      	mov	r3, r0
 80084c2:	70fb      	strb	r3, [r7, #3]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70bb      	strb	r3, [r7, #2]
 80084c8:	4613      	mov	r3, r2
 80084ca:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	82fb      	strh	r3, [r7, #22]
 80084d0:	2300      	movs	r3, #0
 80084d2:	82bb      	strh	r3, [r7, #20]
 80084d4:	2300      	movs	r3, #0
 80084d6:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	743b      	strb	r3, [r7, #16]
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	2b06      	cmp	r3, #6
 80084f2:	d01e      	beq.n	8008532 <USBH_AC_GetMin+0x80>
 80084f4:	2b06      	cmp	r3, #6
 80084f6:	dc4f      	bgt.n	8008598 <USBH_AC_GetMin+0xe6>
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d002      	beq.n	8008502 <USBH_AC_GetMin+0x50>
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d036      	beq.n	800856e <USBH_AC_GetMin+0xbc>
 8008500:	e04a      	b.n	8008598 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	78db      	ldrb	r3, [r3, #3]
 8008508:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800850e:	7c3b      	ldrb	r3, [r7, #16]
 8008510:	b29b      	uxth	r3, r3
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	b29a      	uxth	r2, r3
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	b29b      	uxth	r3, r3
 800851a:	4313      	orrs	r3, r2
 800851c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800851e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008522:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2200      	movs	r2, #0
 8008528:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 800852c:	2301      	movs	r3, #1
 800852e:	827b      	strh	r3, [r7, #18]
      break;
 8008530:	e035      	b.n	800859e <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008532:	78bb      	ldrb	r3, [r7, #2]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	3322      	adds	r3, #34	; 0x22
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	78db      	ldrb	r3, [r3, #3]
 8008540:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008546:	7c3b      	ldrb	r3, [r7, #16]
 8008548:	b29b      	uxth	r3, r3
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	b29a      	uxth	r2, r3
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	b29b      	uxth	r3, r3
 8008552:	4313      	orrs	r3, r2
 8008554:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008556:	787b      	ldrb	r3, [r7, #1]
 8008558:	b29b      	uxth	r3, r3
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	b29a      	uxth	r2, r3
 800855e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008562:	b29b      	uxth	r3, r3
 8008564:	4313      	orrs	r3, r2
 8008566:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800856a:	827b      	strh	r3, [r7, #18]
      break;
 800856c:	e017      	b.n	800859e <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008574:	78db      	ldrb	r3, [r3, #3]
 8008576:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800857c:	7c3b      	ldrb	r3, [r7, #16]
 800857e:	b29b      	uxth	r3, r3
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	b29a      	uxth	r2, r3
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	b29b      	uxth	r3, r3
 8008588:	4313      	orrs	r3, r2
 800858a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800858c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008590:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008592:	2301      	movs	r3, #1
 8008594:	827b      	strh	r3, [r7, #18]
      break;
 8008596:	e002      	b.n	800859e <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8008598:	2302      	movs	r3, #2
 800859a:	747b      	strb	r3, [r7, #17]
      break;
 800859c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800859e:	7c7b      	ldrb	r3, [r7, #17]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 80085a4:	7c7b      	ldrb	r3, [r7, #17]
 80085a6:	e017      	b.n	80085d8 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	22a1      	movs	r2, #161	; 0xa1
 80085ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2282      	movs	r2, #130	; 0x82
 80085b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	8afa      	ldrh	r2, [r7, #22]
 80085b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	8aba      	ldrh	r2, [r7, #20]
 80085be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	8a7a      	ldrh	r2, [r7, #18]
 80085c4:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80085cc:	8a7a      	ldrh	r2, [r7, #18]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fb67 	bl	8009ca4 <USBH_CtlReq>
 80085d6:	4603      	mov	r3, r0

}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	460b      	mov	r3, r1
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 80085ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085f2:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 80085f4:	7afb      	ldrb	r3, [r7, #11]
 80085f6:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 80085f8:	2303      	movs	r3, #3
 80085fa:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2222      	movs	r2, #34	; 0x22
 8008600:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8afa      	ldrh	r2, [r7, #22]
 800860c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8aba      	ldrh	r2, [r7, #20]
 8008612:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8a7a      	ldrh	r2, [r7, #18]
 8008618:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800861a:	8a7b      	ldrh	r3, [r7, #18]
 800861c:	461a      	mov	r2, r3
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f001 fb3f 	bl	8009ca4 <USBH_CtlReq>
 8008626:	4603      	mov	r3, r0

}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8008638:	2301      	movs	r3, #1
 800863a:	73fb      	strb	r3, [r7, #15]

  return status;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008654:	2301      	movs	r3, #1
 8008656:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	78db      	ldrb	r3, [r3, #3]
 800866a:	3b01      	subs	r3, #1
 800866c:	2b04      	cmp	r3, #4
 800866e:	f200 8090 	bhi.w	8008792 <USBH_AUDIO_Control+0x146>
 8008672:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <USBH_AUDIO_Control+0x2c>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	0800868d 	.word	0x0800868d
 800867c:	080086e1 	.word	0x080086e1
 8008680:	08008793 	.word	0x08008793
 8008684:	0800875f 	.word	0x0800875f
 8008688:	08008779 	.word	0x08008779
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d17d      	bne.n	8008796 <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 fd01 	bl	800a0c2 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2202      	movs	r2, #2
 80086dc:	70da      	strb	r2, [r3, #3]
      }
      break;
 80086de:	e05a      	b.n	8008796 <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f002 f806 	bl	800a6fa <USBH_LL_GetURBState>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d114      	bne.n	800871e <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008700:	3302      	adds	r3, #2
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	b29b      	uxth	r3, r3
 8008708:	4313      	orrs	r3, r2
 800870a:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 800870c:	89fb      	ldrh	r3, [r7, #14]
 800870e:	b2db      	uxtb	r3, r3
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f97a 	bl	8008a0c <USBH_AUDIO_SetControlAttribute>
 8008718:	4603      	mov	r3, r0
 800871a:	2b01      	cmp	r3, #1
 800871c:	d03d      	beq.n	800879a <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8008732:	4293      	cmp	r3, r2
 8008734:	d333      	bcc.n	800879e <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 800874e:	b2da      	uxtb	r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 fcb3 	bl	800a0c2 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 800875c:	e01f      	b.n	800879e <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 800875e:	2101      	movs	r1, #1
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f953 	bl	8008a0c <USBH_AUDIO_SetControlAttribute>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d11a      	bne.n	80087a2 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2201      	movs	r2, #1
 8008770:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008776:	e014      	b.n	80087a2 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8008778:	2102      	movs	r1, #2
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f946 	bl	8008a0c <USBH_AUDIO_SetControlAttribute>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10f      	bne.n	80087a6 <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	2201      	movs	r2, #1
 800878a:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008790:	e009      	b.n	80087a6 <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8008792:	bf00      	nop
 8008794:	e008      	b.n	80087a8 <USBH_AUDIO_Control+0x15c>
      break;
 8008796:	bf00      	nop
 8008798:	e006      	b.n	80087a8 <USBH_AUDIO_Control+0x15c>
          break;
 800879a:	bf00      	nop
 800879c:	e004      	b.n	80087a8 <USBH_AUDIO_Control+0x15c>
      break;
 800879e:	bf00      	nop
 80087a0:	e002      	b.n	80087a8 <USBH_AUDIO_Control+0x15c>
      break;
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <USBH_AUDIO_Control+0x15c>
      break;
 80087a6:	bf00      	nop
  }

  return status;
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop

080087b4 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80087bc:	2301      	movs	r3, #1
 80087be:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	789b      	ldrb	r3, [r3, #2]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d85c      	bhi.n	800888e <USBH_AUDIO_OutputStream+0xda>
 80087d4:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <USBH_AUDIO_OutputStream+0x28>)
 80087d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087da:	bf00      	nop
 80087dc:	080087f1 	.word	0x080087f1
 80087e0:	0800884d 	.word	0x0800884d
 80087e4:	08008817 	.word	0x08008817
 80087e8:	08008883 	.word	0x08008883
 80087ec:	0800887d 	.word	0x0800887d
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	3317      	adds	r3, #23
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	4413      	add	r3, r2
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	79db      	ldrb	r3, [r3, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2203      	movs	r2, #3
 800880a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800880c:	e044      	b.n	8008898 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2202      	movs	r2, #2
 8008812:	709a      	strb	r2, [r3, #2]
      break;
 8008814:	e040      	b.n	8008898 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	3317      	adds	r3, #23
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	4413      	add	r3, r2
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	3308      	adds	r3, #8
 8008828:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff fed3 	bl	80085e0 <USBH_AUDIO_SetEndpointControls>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d126      	bne.n	8008892 <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	2205      	movs	r2, #5
 8008848:	709a      	strb	r2, [r3, #2]
      }
      break;
 800884a:	e022      	b.n	8008892 <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8008852:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff febe 	bl	80085e0 <USBH_AUDIO_SetEndpointControls>
 8008864:	4603      	mov	r3, r0
 8008866:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d113      	bne.n	8008896 <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2205      	movs	r2, #5
 8008872:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f96e 	bl	8008b56 <USBH_AUDIO_FrequencySet>
      }
      break;
 800887a:	e00c      	b.n	8008896 <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008880:	e00a      	b.n	8008898 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f80e 	bl	80088a4 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	75fb      	strb	r3, [r7, #23]
      break;
 800888c:	e004      	b.n	8008898 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 800888e:	bf00      	nop
 8008890:	e002      	b.n	8008898 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8008892:	bf00      	nop
 8008894:	e000      	b.n	8008898 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8008896:	bf00      	nop
  }

  return status;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop

080088a4 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80088ac:	2301      	movs	r3, #1
 80088ae:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	791b      	ldrb	r3, [r3, #4]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d002      	beq.n	80088c8 <USBH_AUDIO_Transmit+0x24>
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d033      	beq.n	800892e <USBH_AUDIO_Transmit+0x8a>
 80088c6:	e096      	b.n	80089f6 <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f040 8092 	bne.w	80089fc <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2202      	movs	r2, #2
 80088e8:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 80088f6:	461a      	mov	r2, r3
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f001 fbfe 	bl	800a100 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800890a:	461a      	mov	r2, r3
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008918:	461a      	mov	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800892c:	e066      	b.n	80089fc <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 fedf 	bl	800a6fa <USBH_LL_GetURBState>
 800893c:	4603      	mov	r3, r0
 800893e:	2b01      	cmp	r3, #1
 8008940:	d15e      	bne.n	8008a00 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8008956:	4293      	cmp	r3, r2
 8008958:	d352      	bcc.n	8008a00 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 800896c:	2b01      	cmp	r3, #1
 800896e:	d102      	bne.n	8008976 <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff fe6b 	bl	800864c <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008982:	429a      	cmp	r2, r3
 8008984:	d82b      	bhi.n	80089de <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 8008992:	461a      	mov	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f001 fbb0 	bl	800a100 <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80089ac:	441a      	add	r2, r3
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80089c0:	441a      	add	r2, r3
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80089d4:	441a      	add	r2, r3
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 80089dc:	e010      	b.n	8008a00 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2205      	movs	r2, #5
 80089ec:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f8bb 	bl	8008b6a <USBH_AUDIO_BufferEmptyCallback>
      break;
 80089f4:	e004      	b.n	8008a00 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 80089f6:	2302      	movs	r3, #2
 80089f8:	73fb      	strb	r3, [r7, #15]
      break;
 80089fa:	e002      	b.n	8008a02 <USBH_AUDIO_Transmit+0x15e>
      break;
 80089fc:	bf00      	nop
 80089fe:	e000      	b.n	8008a02 <USBH_AUDIO_Transmit+0x15e>
      break;
 8008a00:	bf00      	nop
  }
  return status;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d002      	beq.n	8008a32 <USBH_AUDIO_SetControlAttribute+0x26>
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d00b      	beq.n	8008a48 <USBH_AUDIO_SetControlAttribute+0x3c>
 8008a30:	e015      	b.n	8008a5e <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008a3e:	441a      	add	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8008a46:	e00d      	b.n	8008a64 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008a54:	1ad2      	subs	r2, r2, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8008a5c:	e002      	b.n	8008a64 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	73fb      	strb	r3, [r7, #15]
      break;
 8008a62:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d905      	bls.n	8008a80 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d205      	bcs.n	8008a9c <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f827 	bl	8008b04 <AUDIO_SetVolume>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d01e      	beq.n	8008afa <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d10e      	bne.n	8008ae4 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
 8008ae2:	e007      	b.n	8008af4 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2206      	movs	r2, #6
 8008af8:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	461a      	mov	r2, r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	70fb      	strb	r3, [r7, #3]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70bb      	strb	r3, [r7, #2]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	883a      	ldrh	r2, [r7, #0]
 8008b30:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	2302      	movs	r3, #2
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	78bb      	ldrb	r3, [r7, #2]
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	2302      	movs	r3, #2
 8008b40:	2106      	movs	r1, #6
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff fa76 	bl	8008034 <USBH_AC_SetCur>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008b92:	2302      	movs	r3, #2
 8008b94:	e029      	b.n	8008bea <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	79fa      	ldrb	r2, [r7, #7]
 8008b9a:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 f81f 	bl	8008bf2 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f001 fc56 	bl	800a494 <USBH_LL_Init>

  return USBH_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	e00a      	b.n	8008c1a <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	2200      	movs	r2, #0
 8008c12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b0e      	cmp	r3, #14
 8008c1e:	d9f1      	bls.n	8008c04 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e009      	b.n	8008c3a <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3301      	adds	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c40:	d3f1      	bcc.n	8008c26 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2240      	movs	r2, #64	; 0x40
 8008c66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d017      	beq.n	8008ce0 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10f      	bne.n	8008cda <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8008cc0:	1c59      	adds	r1, r3, #1
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
 8008cd8:	e004      	b.n	8008ce4 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008cda:	2302      	movs	r3, #2
 8008cdc:	73fb      	strb	r3, [r7, #15]
 8008cde:	e001      	b.n	8008ce4 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b087      	sub	sp, #28
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	4608      	mov	r0, r1
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4603      	mov	r3, r0
 8008d02:	70fb      	strb	r3, [r7, #3]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70bb      	strb	r3, [r7, #2]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d1a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d1c:	e025      	b.n	8008d6a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	221a      	movs	r2, #26
 8008d22:	fb02 f303 	mul.w	r3, r2, r3
 8008d26:	3308      	adds	r3, #8
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	795b      	ldrb	r3, [r3, #5]
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d002      	beq.n	8008d40 <USBH_FindInterface+0x4e>
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	2bff      	cmp	r3, #255	; 0xff
 8008d3e:	d111      	bne.n	8008d64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d44:	78ba      	ldrb	r2, [r7, #2]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d002      	beq.n	8008d50 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d4a:	78bb      	ldrb	r3, [r7, #2]
 8008d4c:	2bff      	cmp	r3, #255	; 0xff
 8008d4e:	d109      	bne.n	8008d64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d54:	787a      	ldrb	r2, [r7, #1]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d002      	beq.n	8008d60 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d5a:	787b      	ldrb	r3, [r7, #1]
 8008d5c:	2bff      	cmp	r3, #255	; 0xff
 8008d5e:	d101      	bne.n	8008d64 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	e006      	b.n	8008d72 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	3301      	adds	r3, #1
 8008d68:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	2b09      	cmp	r3, #9
 8008d6e:	d9d6      	bls.n	8008d1e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d70:	23ff      	movs	r3, #255	; 0xff
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b087      	sub	sp, #28
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70fb      	strb	r3, [r7, #3]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d9c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d9e:	e017      	b.n	8008dd0 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	221a      	movs	r2, #26
 8008da4:	fb02 f303 	mul.w	r3, r2, r3
 8008da8:	3308      	adds	r3, #8
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	3302      	adds	r3, #2
 8008db0:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	789b      	ldrb	r3, [r3, #2]
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d106      	bne.n	8008dca <USBH_FindInterfaceIndex+0x4c>
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	78db      	ldrb	r3, [r3, #3]
 8008dc0:	78ba      	ldrb	r2, [r7, #2]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d101      	bne.n	8008dca <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	e006      	b.n	8008dd8 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	2b09      	cmp	r3, #9
 8008dd4:	d9e4      	bls.n	8008da0 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 8008dd6:	23ff      	movs	r3, #255	; 0xff
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 fb8d 	bl	800a50c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008df2:	2101      	movs	r1, #1
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 fc93 	bl	800a720 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af04      	add	r7, sp, #16
 8008e0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d102      	bne.n	8008e26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2203      	movs	r2, #3
 8008e24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b0b      	cmp	r3, #11
 8008e2e:	f200 81b5 	bhi.w	800919c <USBH_Process+0x398>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <USBH_Process+0x34>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e69 	.word	0x08008e69
 8008e3c:	08008e9b 	.word	0x08008e9b
 8008e40:	08008f03 	.word	0x08008f03
 8008e44:	08009137 	.word	0x08009137
 8008e48:	0800919d 	.word	0x0800919d
 8008e4c:	08008fa7 	.word	0x08008fa7
 8008e50:	080090dd 	.word	0x080090dd
 8008e54:	08008fdd 	.word	0x08008fdd
 8008e58:	08008ffd 	.word	0x08008ffd
 8008e5c:	0800901d 	.word	0x0800901d
 8008e60:	0800904b 	.word	0x0800904b
 8008e64:	0800911f 	.word	0x0800911f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 8195 	beq.w	80091a0 <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008e7c:	20c8      	movs	r0, #200	; 0xc8
 8008e7e:	f001 fc96 	bl	800a7ae <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fb9f 	bl	800a5c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008e98:	e182      	b.n	80091a0 <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d107      	bne.n	8008eb4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008eb2:	e184      	b.n	80091be <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8008eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ebe:	d914      	bls.n	8008eea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d903      	bls.n	8008ee2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	220d      	movs	r2, #13
 8008ede:	701a      	strb	r2, [r3, #0]
      break;
 8008ee0:	e16d      	b.n	80091be <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	701a      	strb	r2, [r3, #0]
      break;
 8008ee8:	e169      	b.n	80091be <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8008ef0:	f103 020a 	add.w	r2, r3, #10
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8008efa:	200a      	movs	r0, #10
 8008efc:	f001 fc57 	bl	800a7ae <USBH_Delay>
      break;
 8008f00:	e15d      	b.n	80091be <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d005      	beq.n	8008f18 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008f12:	2104      	movs	r1, #4
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008f18:	2064      	movs	r0, #100	; 0x64
 8008f1a:	f001 fc48 	bl	800a7ae <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fb2a 	bl	800a578 <USBH_LL_GetSpeed>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461a      	mov	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2205      	movs	r2, #5
 8008f32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 f92c 	bl	800a194 <USBH_AllocPipe>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	461a      	mov	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008f44:	2180      	movs	r1, #128	; 0x80
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f924 	bl	800a194 <USBH_AllocPipe>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	461a      	mov	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	7919      	ldrb	r1, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f68:	b292      	uxth	r2, r2
 8008f6a:	9202      	str	r2, [sp, #8]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	9201      	str	r2, [sp, #4]
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	4603      	mov	r3, r0
 8008f74:	2280      	movs	r2, #128	; 0x80
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f001 f8dd 	bl	800a136 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	7959      	ldrb	r1, [r3, #5]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f90:	b292      	uxth	r2, r2
 8008f92:	9202      	str	r2, [sp, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	9201      	str	r2, [sp, #4]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 f8c9 	bl	800a136 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008fa4:	e10b      	b.n	80091be <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f90e 	bl	80091c8 <USBH_HandleEnum>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f040 80f5 	bne.w	80091a4 <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d103      	bne.n	8008fd4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2208      	movs	r2, #8
 8008fd0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008fd2:	e0e7      	b.n	80091a4 <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2207      	movs	r2, #7
 8008fd8:	701a      	strb	r2, [r3, #0]
      break;
 8008fda:	e0e3      	b.n	80091a4 <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 80e0 	beq.w	80091a8 <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008fee:	2101      	movs	r1, #1
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2208      	movs	r2, #8
 8008ff8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008ffa:	e0d5      	b.n	80091a8 <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009002:	b29b      	uxth	r3, r3
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fc22 	bl	8009850 <USBH_SetCfg>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	f040 80cc 	bne.w	80091ac <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2209      	movs	r2, #9
 8009018:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800901a:	e0c7      	b.n	80091ac <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00b      	beq.n	8009042 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800902a:	2101      	movs	r1, #1
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fc59 	bl	80098e4 <USBH_SetFeature>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	f040 80bb 	bne.w	80091b0 <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	220a      	movs	r2, #10
 800903e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009040:	e0b6      	b.n	80091b0 <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	220a      	movs	r2, #10
 8009046:	701a      	strb	r2, [r3, #0]
      break;
 8009048:	e0b2      	b.n	80091b0 <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 80af 	beq.w	80091b4 <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
 8009062:	e018      	b.n	8009096 <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009064:	7bfa      	ldrb	r2, [r7, #15]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f502 7289 	add.w	r2, r2, #274	; 0x112
 800906c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009070:	791a      	ldrb	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009078:	429a      	cmp	r2, r3
 800907a:	d109      	bne.n	8009090 <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800907c:	7bfa      	ldrb	r2, [r7, #15]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8009084:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 800908e:	e005      	b.n	800909c <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	3301      	adds	r3, #1
 8009094:	73fb      	strb	r3, [r7, #15]
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0e3      	beq.n	8009064 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d016      	beq.n	80090d4 <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	4798      	blx	r3
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d109      	bne.n	80090cc <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2206      	movs	r2, #6
 80090bc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80090c4:	2103      	movs	r1, #3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090ca:	e073      	b.n	80091b4 <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	220d      	movs	r2, #13
 80090d0:	701a      	strb	r2, [r3, #0]
      break;
 80090d2:	e06f      	b.n	80091b4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	220d      	movs	r2, #13
 80090d8:	701a      	strb	r2, [r3, #0]
      break;
 80090da:	e06b      	b.n	80091b4 <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d017      	beq.n	8009116 <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	4798      	blx	r3
 80090f2:	4603      	mov	r3, r0
 80090f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	220b      	movs	r2, #11
 8009102:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009104:	e058      	b.n	80091b8 <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b02      	cmp	r3, #2
 800910c:	d154      	bne.n	80091b8 <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	220d      	movs	r2, #13
 8009112:	701a      	strb	r2, [r3, #0]
      break;
 8009114:	e050      	b.n	80091b8 <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	220d      	movs	r2, #13
 800911a:	701a      	strb	r2, [r3, #0]
      break;
 800911c:	e04c      	b.n	80091b8 <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d049      	beq.n	80091bc <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
      }
      break;
 8009134:	e042      	b.n	80091bc <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff fd57 	bl	8008bf2 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009172:	2105      	movs	r1, #5
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	d107      	bne.n	8009194 <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff fe29 	bl	8008de4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009192:	e014      	b.n	80091be <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 f9b9 	bl	800a50c <USBH_LL_Start>
      break;
 800919a:	e010      	b.n	80091be <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 800919c:	bf00      	nop
 800919e:	e00e      	b.n	80091be <USBH_Process+0x3ba>
      break;
 80091a0:	bf00      	nop
 80091a2:	e00c      	b.n	80091be <USBH_Process+0x3ba>
      break;
 80091a4:	bf00      	nop
 80091a6:	e00a      	b.n	80091be <USBH_Process+0x3ba>
    break;
 80091a8:	bf00      	nop
 80091aa:	e008      	b.n	80091be <USBH_Process+0x3ba>
      break;
 80091ac:	bf00      	nop
 80091ae:	e006      	b.n	80091be <USBH_Process+0x3ba>
      break;
 80091b0:	bf00      	nop
 80091b2:	e004      	b.n	80091be <USBH_Process+0x3ba>
      break;
 80091b4:	bf00      	nop
 80091b6:	e002      	b.n	80091be <USBH_Process+0x3ba>
      break;
 80091b8:	bf00      	nop
 80091ba:	e000      	b.n	80091be <USBH_Process+0x3ba>
      break;
 80091bc:	bf00      	nop
  }
  return USBH_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af04      	add	r7, sp, #16
 80091ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091d0:	2301      	movs	r3, #1
 80091d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	785b      	ldrb	r3, [r3, #1]
 80091dc:	2b07      	cmp	r3, #7
 80091de:	f200 81c1 	bhi.w	8009564 <USBH_HandleEnum+0x39c>
 80091e2:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <USBH_HandleEnum+0x20>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	08009209 	.word	0x08009209
 80091ec:	080092c7 	.word	0x080092c7
 80091f0:	08009331 	.word	0x08009331
 80091f4:	080093bf 	.word	0x080093bf
 80091f8:	08009429 	.word	0x08009429
 80091fc:	08009499 	.word	0x08009499
 8009200:	080094df 	.word	0x080094df
 8009204:	08009525 	.word	0x08009525
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009208:	2108      	movs	r1, #8
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa50 	bl	80096b0 <USBH_Get_DevDesc>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d130      	bne.n	800927c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7919      	ldrb	r1, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800923e:	b292      	uxth	r2, r2
 8009240:	9202      	str	r2, [sp, #8]
 8009242:	2200      	movs	r2, #0
 8009244:	9201      	str	r2, [sp, #4]
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4603      	mov	r3, r0
 800924a:	2280      	movs	r2, #128	; 0x80
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 ff72 	bl	800a136 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7959      	ldrb	r1, [r3, #5]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009266:	b292      	uxth	r2, r2
 8009268:	9202      	str	r2, [sp, #8]
 800926a:	2200      	movs	r2, #0
 800926c:	9201      	str	r2, [sp, #4]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4603      	mov	r3, r0
 8009272:	2200      	movs	r2, #0
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 ff5e 	bl	800a136 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800927a:	e175      	b.n	8009568 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b03      	cmp	r3, #3
 8009280:	f040 8172 	bne.w	8009568 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800928a:	3301      	adds	r3, #1
 800928c:	b2da      	uxtb	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800929a:	2b03      	cmp	r3, #3
 800929c:	d903      	bls.n	80092a6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	220d      	movs	r2, #13
 80092a2:	701a      	strb	r2, [r3, #0]
      break;
 80092a4:	e160      	b.n	8009568 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	795b      	ldrb	r3, [r3, #5]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 ff93 	bl	800a1d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	791b      	ldrb	r3, [r3, #4]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 ff8d 	bl	800a1d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	701a      	strb	r2, [r3, #0]
      break;
 80092c4:	e150      	b.n	8009568 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80092c6:	2112      	movs	r1, #18
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f9f1 	bl	80096b0 <USBH_Get_DevDesc>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092de:	e145      	b.n	800956c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	f040 8142 	bne.w	800956c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ee:	3301      	adds	r3, #1
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d903      	bls.n	800930a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	220d      	movs	r2, #13
 8009306:	701a      	strb	r2, [r3, #0]
      break;
 8009308:	e130      	b.n	800956c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	795b      	ldrb	r3, [r3, #5]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 ff61 	bl	800a1d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	791b      	ldrb	r3, [r3, #4]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 ff5b 	bl	800a1d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]
      break;
 800932e:	e11d      	b.n	800956c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009330:	2101      	movs	r1, #1
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa68 	bl	8009808 <USBH_SetAddress>
 8009338:	4603      	mov	r3, r0
 800933a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d132      	bne.n	80093a8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009342:	2002      	movs	r0, #2
 8009344:	f001 fa33 	bl	800a7ae <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2203      	movs	r2, #3
 8009354:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	7919      	ldrb	r1, [r3, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800936a:	b292      	uxth	r2, r2
 800936c:	9202      	str	r2, [sp, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	9201      	str	r2, [sp, #4]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	4603      	mov	r3, r0
 8009376:	2280      	movs	r2, #128	; 0x80
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fedc 	bl	800a136 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	7959      	ldrb	r1, [r3, #5]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009392:	b292      	uxth	r2, r2
 8009394:	9202      	str	r2, [sp, #8]
 8009396:	2200      	movs	r2, #0
 8009398:	9201      	str	r2, [sp, #4]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	4603      	mov	r3, r0
 800939e:	2200      	movs	r2, #0
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fec8 	bl	800a136 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093a6:	e0e3      	b.n	8009570 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	f040 80e0 	bne.w	8009570 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	220d      	movs	r2, #13
 80093b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	705a      	strb	r2, [r3, #1]
      break;
 80093bc:	e0d8      	b.n	8009570 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80093be:	2109      	movs	r1, #9
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f99d 	bl	8009700 <USBH_Get_CfgDesc>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d103      	bne.n	80093d8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2204      	movs	r2, #4
 80093d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093d6:	e0cd      	b.n	8009574 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	2b03      	cmp	r3, #3
 80093dc:	f040 80ca 	bne.w	8009574 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093e6:	3301      	adds	r3, #1
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d903      	bls.n	8009402 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	220d      	movs	r2, #13
 80093fe:	701a      	strb	r2, [r3, #0]
      break;
 8009400:	e0b8      	b.n	8009574 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	795b      	ldrb	r3, [r3, #5]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fee5 	bl	800a1d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	791b      	ldrb	r3, [r3, #4]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fedf 	bl	800a1d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
      break;
 8009426:	e0a5      	b.n	8009574 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f965 	bl	8009700 <USBH_Get_CfgDesc>
 8009436:	4603      	mov	r3, r0
 8009438:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2205      	movs	r2, #5
 8009444:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009446:	e097      	b.n	8009578 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	2b03      	cmp	r3, #3
 800944c:	f040 8094 	bne.w	8009578 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009456:	3301      	adds	r3, #1
 8009458:	b2da      	uxtb	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009466:	2b03      	cmp	r3, #3
 8009468:	d903      	bls.n	8009472 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	220d      	movs	r2, #13
 800946e:	701a      	strb	r2, [r3, #0]
      break;
 8009470:	e082      	b.n	8009578 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	795b      	ldrb	r3, [r3, #5]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fead 	bl	800a1d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	791b      	ldrb	r3, [r3, #4]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fea7 	bl	800a1d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
      break;
 8009496:	e06f      	b.n	8009578 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d019      	beq.n	80094d6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094ae:	23ff      	movs	r3, #255	; 0xff
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f949 	bl	8009748 <USBH_Get_StringDesc>
 80094b6:	4603      	mov	r3, r0
 80094b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d103      	bne.n	80094c8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2206      	movs	r2, #6
 80094c4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094c6:	e059      	b.n	800957c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d156      	bne.n	800957c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2206      	movs	r2, #6
 80094d2:	705a      	strb	r2, [r3, #1]
      break;
 80094d4:	e052      	b.n	800957c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2206      	movs	r2, #6
 80094da:	705a      	strb	r2, [r3, #1]
      break;
 80094dc:	e04e      	b.n	800957c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d019      	beq.n	800951c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094f4:	23ff      	movs	r3, #255	; 0xff
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f926 	bl	8009748 <USBH_Get_StringDesc>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d103      	bne.n	800950e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2207      	movs	r2, #7
 800950a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800950c:	e038      	b.n	8009580 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800950e:	7bbb      	ldrb	r3, [r7, #14]
 8009510:	2b03      	cmp	r3, #3
 8009512:	d135      	bne.n	8009580 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2207      	movs	r2, #7
 8009518:	705a      	strb	r2, [r3, #1]
      break;
 800951a:	e031      	b.n	8009580 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2207      	movs	r2, #7
 8009520:	705a      	strb	r2, [r3, #1]
      break;
 8009522:	e02d      	b.n	8009580 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800952a:	2b00      	cmp	r3, #0
 800952c:	d017      	beq.n	800955e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800953a:	23ff      	movs	r3, #255	; 0xff
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f903 	bl	8009748 <USBH_Get_StringDesc>
 8009542:	4603      	mov	r3, r0
 8009544:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009550:	e018      	b.n	8009584 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	2b03      	cmp	r3, #3
 8009556:	d115      	bne.n	8009584 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]
      break;
 800955c:	e012      	b.n	8009584 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
      break;
 8009562:	e00f      	b.n	8009584 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009564:	bf00      	nop
 8009566:	e00e      	b.n	8009586 <USBH_HandleEnum+0x3be>
      break;
 8009568:	bf00      	nop
 800956a:	e00c      	b.n	8009586 <USBH_HandleEnum+0x3be>
      break;
 800956c:	bf00      	nop
 800956e:	e00a      	b.n	8009586 <USBH_HandleEnum+0x3be>
      break;
 8009570:	bf00      	nop
 8009572:	e008      	b.n	8009586 <USBH_HandleEnum+0x3be>
      break;
 8009574:	bf00      	nop
 8009576:	e006      	b.n	8009586 <USBH_HandleEnum+0x3be>
      break;
 8009578:	bf00      	nop
 800957a:	e004      	b.n	8009586 <USBH_HandleEnum+0x3be>
      break;
 800957c:	bf00      	nop
 800957e:	e002      	b.n	8009586 <USBH_HandleEnum+0x3be>
      break;
 8009580:	bf00      	nop
 8009582:	e000      	b.n	8009586 <USBH_HandleEnum+0x3be>
      break;
 8009584:	bf00      	nop
  }
  return Status;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f804 	bl	80095d2 <USBH_HandleSof>
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b0b      	cmp	r3, #11
 80095e2:	d10a      	bne.n	80095fa <USBH_HandleSof+0x28>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d005      	beq.n	80095fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	4798      	blx	r3
  }
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009612:	bf00      	nop
}
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800962e:	bf00      	nop
}
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 ff5a 	bl	800a542 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	791b      	ldrb	r3, [r3, #4]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fd9f 	bl	800a1d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	795b      	ldrb	r3, [r3, #5]
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fd99 	bl	800a1d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80096c2:	78fb      	ldrb	r3, [r7, #3]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	4613      	mov	r3, r2
 80096ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096ce:	2100      	movs	r1, #0
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f864 	bl	800979e <USBH_GetDescriptor>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096ec:	78fa      	ldrb	r2, [r7, #3]
 80096ee:	b292      	uxth	r2, r2
 80096f0:	4619      	mov	r1, r3
 80096f2:	f000 f91b 	bl	800992c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af02      	add	r7, sp, #8
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	331c      	adds	r3, #28
 8009710:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009712:	887b      	ldrh	r3, [r7, #2]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800971c:	2100      	movs	r1, #0
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f83d 	bl	800979e <USBH_GetDescriptor>
 8009724:	4603      	mov	r3, r0
 8009726:	72fb      	strb	r3, [r7, #11]
 8009728:	7afb      	ldrb	r3, [r7, #11]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009734:	887a      	ldrh	r2, [r7, #2]
 8009736:	68f9      	ldr	r1, [r7, #12]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f967 	bl	8009a0c <USBH_ParseCfgDesc>
  }

  return status;
 800973e:	7afb      	ldrb	r3, [r7, #11]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	607a      	str	r2, [r7, #4]
 8009752:	461a      	mov	r2, r3
 8009754:	460b      	mov	r3, r1
 8009756:	72fb      	strb	r3, [r7, #11]
 8009758:	4613      	mov	r3, r2
 800975a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800975c:	7afb      	ldrb	r3, [r7, #11]
 800975e:	b29b      	uxth	r3, r3
 8009760:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009764:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800976c:	893b      	ldrh	r3, [r7, #8]
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	460b      	mov	r3, r1
 8009772:	2100      	movs	r1, #0
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f812 	bl	800979e <USBH_GetDescriptor>
 800977a:	4603      	mov	r3, r0
 800977c:	75fb      	strb	r3, [r7, #23]
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d107      	bne.n	8009794 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800978a:	893a      	ldrh	r2, [r7, #8]
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fa3a 	bl	8009c08 <USBH_ParseStringDesc>
  }

  return status;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	607b      	str	r3, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	72fb      	strb	r3, [r7, #11]
 80097ac:	4613      	mov	r3, r2
 80097ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	789b      	ldrb	r3, [r3, #2]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d11c      	bne.n	80097f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2206      	movs	r2, #6
 80097c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	893a      	ldrh	r2, [r7, #8]
 80097ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80097d0:	893b      	ldrh	r3, [r7, #8]
 80097d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097da:	d104      	bne.n	80097e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f240 4209 	movw	r2, #1033	; 0x409
 80097e2:	829a      	strh	r2, [r3, #20]
 80097e4:	e002      	b.n	80097ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8b3a      	ldrh	r2, [r7, #24]
 80097f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80097f2:	8b3b      	ldrh	r3, [r7, #24]
 80097f4:	461a      	mov	r2, r3
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 fa53 	bl	8009ca4 <USBH_CtlReq>
 80097fe:	4603      	mov	r3, r0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	789b      	ldrb	r3, [r3, #2]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d10f      	bne.n	800983c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2205      	movs	r2, #5
 8009826:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	b29a      	uxth	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800983c:	2200      	movs	r2, #0
 800983e:	2100      	movs	r1, #0
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fa2f 	bl	8009ca4 <USBH_CtlReq>
 8009846:	4603      	mov	r3, r0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	789b      	ldrb	r3, [r3, #2]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d10e      	bne.n	8009882 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2209      	movs	r2, #9
 800986e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	887a      	ldrh	r2, [r7, #2]
 8009874:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009882:	2200      	movs	r2, #0
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fa0c 	bl	8009ca4 <USBH_CtlReq>
 800988c:	4603      	mov	r3, r0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	70fb      	strb	r3, [r7, #3]
 80098a2:	4613      	mov	r3, r2
 80098a4:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	789b      	ldrb	r3, [r3, #2]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d110      	bne.n	80098d0 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	220b      	movs	r2, #11
 80098b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 80098ba:	78bb      	ldrb	r3, [r7, #2]
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80098d0:	2200      	movs	r2, #0
 80098d2:	2100      	movs	r1, #0
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f9e5 	bl	8009ca4 <USBH_CtlReq>
 80098da:	4603      	mov	r3, r0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	789b      	ldrb	r3, [r3, #2]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d10f      	bne.n	8009918 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2203      	movs	r2, #3
 8009902:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	b29a      	uxth	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009918:	2200      	movs	r2, #0
 800991a:	2100      	movs	r1, #0
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f9c1 	bl	8009ca4 <USBH_CtlReq>
 8009922:	4603      	mov	r3, r0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	4613      	mov	r3, r2
 8009938:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	781a      	ldrb	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	785a      	ldrb	r2, [r3, #1]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	3302      	adds	r3, #2
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	b29a      	uxth	r2, r3
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	3303      	adds	r3, #3
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	b29b      	uxth	r3, r3
 800995a:	021b      	lsls	r3, r3, #8
 800995c:	b29b      	uxth	r3, r3
 800995e:	4313      	orrs	r3, r2
 8009960:	b29a      	uxth	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	791a      	ldrb	r2, [r3, #4]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	795a      	ldrb	r2, [r3, #5]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	799a      	ldrb	r2, [r3, #6]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	79da      	ldrb	r2, [r3, #7]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009986:	88fb      	ldrh	r3, [r7, #6]
 8009988:	2b08      	cmp	r3, #8
 800998a:	d939      	bls.n	8009a00 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	3308      	adds	r3, #8
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	b29a      	uxth	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	3309      	adds	r3, #9
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	021b      	lsls	r3, r3, #8
 800999e:	b29b      	uxth	r3, r3
 80099a0:	4313      	orrs	r3, r2
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	330a      	adds	r3, #10
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	330b      	adds	r3, #11
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	4313      	orrs	r3, r2
 80099be:	b29a      	uxth	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	330c      	adds	r3, #12
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	330d      	adds	r3, #13
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	021b      	lsls	r3, r3, #8
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	4313      	orrs	r3, r2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	7b9a      	ldrb	r2, [r3, #14]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	7bda      	ldrb	r2, [r3, #15]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	7c1a      	ldrb	r2, [r3, #16]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	7c5a      	ldrb	r2, [r3, #17]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	745a      	strb	r2, [r3, #17]
  }
}
 8009a00:	bf00      	nop
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08a      	sub	sp, #40	; 0x28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	4613      	mov	r3, r2
 8009a18:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	781a      	ldrb	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	785a      	ldrb	r2, [r3, #1]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	3302      	adds	r3, #2
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	3303      	adds	r3, #3
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	021b      	lsls	r3, r3, #8
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	4313      	orrs	r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	791a      	ldrb	r2, [r3, #4]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	795a      	ldrb	r2, [r3, #5]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	799a      	ldrb	r2, [r3, #6]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	79da      	ldrb	r2, [r3, #7]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	7a1a      	ldrb	r2, [r3, #8]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009a82:	88fb      	ldrh	r3, [r7, #6]
 8009a84:	2b09      	cmp	r3, #9
 8009a86:	d95f      	bls.n	8009b48 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009a88:	2309      	movs	r3, #9
 8009a8a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a90:	e051      	b.n	8009b36 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a92:	f107 0316 	add.w	r3, r7, #22
 8009a96:	4619      	mov	r1, r3
 8009a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a9a:	f000 f8e8 	bl	8009c6e <USBH_GetNextDesc>
 8009a9e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	785b      	ldrb	r3, [r3, #1]
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d146      	bne.n	8009b36 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aac:	221a      	movs	r2, #26
 8009aae:	fb02 f303 	mul.w	r3, r2, r3
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	3302      	adds	r3, #2
 8009aba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009abe:	69f8      	ldr	r0, [r7, #28]
 8009ac0:	f000 f846 	bl	8009b50 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ace:	e022      	b.n	8009b16 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ad0:	f107 0316 	add.w	r3, r7, #22
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ad8:	f000 f8c9 	bl	8009c6e <USBH_GetNextDesc>
 8009adc:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	2b05      	cmp	r3, #5
 8009ae4:	d117      	bne.n	8009b16 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009aee:	3201      	adds	r2, #1
 8009af0:	00d2      	lsls	r2, r2, #3
 8009af2:	211a      	movs	r1, #26
 8009af4:	fb01 f303 	mul.w	r3, r1, r3
 8009af8:	4413      	add	r3, r2
 8009afa:	3308      	adds	r3, #8
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	3304      	adds	r3, #4
 8009b02:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b06:	69b8      	ldr	r0, [r7, #24]
 8009b08:	f000 f851 	bl	8009bae <USBH_ParseEPDesc>
            ep_ix++;
 8009b0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b10:	3301      	adds	r3, #1
 8009b12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	791b      	ldrb	r3, [r3, #4]
 8009b1a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d204      	bcs.n	8009b2c <USBH_ParseCfgDesc+0x120>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	885a      	ldrh	r2, [r3, #2]
 8009b26:	8afb      	ldrh	r3, [r7, #22]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d8d1      	bhi.n	8009ad0 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b30:	3301      	adds	r3, #1
 8009b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b3a:	2b09      	cmp	r3, #9
 8009b3c:	d804      	bhi.n	8009b48 <USBH_ParseCfgDesc+0x13c>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	885a      	ldrh	r2, [r3, #2]
 8009b42:	8afb      	ldrh	r3, [r7, #22]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d8a4      	bhi.n	8009a92 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009b48:	bf00      	nop
 8009b4a:	3728      	adds	r7, #40	; 0x28
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781a      	ldrb	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	785a      	ldrb	r2, [r3, #1]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	789a      	ldrb	r2, [r3, #2]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	78da      	ldrb	r2, [r3, #3]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	791a      	ldrb	r2, [r3, #4]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	795a      	ldrb	r2, [r3, #5]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	799a      	ldrb	r2, [r3, #6]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	79da      	ldrb	r2, [r3, #7]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	7a1a      	ldrb	r2, [r3, #8]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	721a      	strb	r2, [r3, #8]
}
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b083      	sub	sp, #12
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781a      	ldrb	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	785a      	ldrb	r2, [r3, #1]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	789a      	ldrb	r2, [r3, #2]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	78da      	ldrb	r2, [r3, #3]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	3305      	adds	r3, #5
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	021b      	lsls	r3, r3, #8
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	4313      	orrs	r3, r2
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	799a      	ldrb	r2, [r3, #6]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	719a      	strb	r2, [r3, #6]
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	4613      	mov	r3, r2
 8009c14:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d120      	bne.n	8009c62 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	1e9a      	subs	r2, r3, #2
 8009c26:	88fb      	ldrh	r3, [r7, #6]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	bf28      	it	cs
 8009c2c:	4613      	movcs	r3, r2
 8009c2e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3302      	adds	r3, #2
 8009c34:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c36:	2300      	movs	r3, #0
 8009c38:	82fb      	strh	r3, [r7, #22]
 8009c3a:	e00b      	b.n	8009c54 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c3c:	8afb      	ldrh	r3, [r7, #22]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4413      	add	r3, r2
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c4e:	8afb      	ldrh	r3, [r7, #22]
 8009c50:	3302      	adds	r3, #2
 8009c52:	82fb      	strh	r3, [r7, #22]
 8009c54:	8afa      	ldrh	r2, [r7, #22]
 8009c56:	8abb      	ldrh	r3, [r7, #20]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d3ef      	bcc.n	8009c3c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	701a      	strb	r2, [r3, #0]
  }
}
 8009c62:	bf00      	nop
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b085      	sub	sp, #20
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	881a      	ldrh	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	4413      	add	r3, r2
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c96:	68fb      	ldr	r3, [r7, #12]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	789b      	ldrb	r3, [r3, #2]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d002      	beq.n	8009cc4 <USBH_CtlReq+0x20>
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d00f      	beq.n	8009ce2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009cc2:	e027      	b.n	8009d14 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2202      	movs	r2, #2
 8009cda:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce0:	e018      	b.n	8009d14 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 f81c 	bl	8009d20 <USBH_HandleControl>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <USBH_CtlReq+0x54>
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d106      	bne.n	8009d06 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	761a      	strb	r2, [r3, #24]
      break;
 8009d04:	e005      	b.n	8009d12 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d102      	bne.n	8009d12 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	709a      	strb	r2, [r3, #2]
      break;
 8009d12:	bf00      	nop
  }
  return status;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
	...

08009d20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	7e1b      	ldrb	r3, [r3, #24]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	2b0a      	cmp	r3, #10
 8009d38:	f200 8156 	bhi.w	8009fe8 <USBH_HandleControl+0x2c8>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <USBH_HandleControl+0x24>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	08009d8b 	.word	0x08009d8b
 8009d4c:	08009df5 	.word	0x08009df5
 8009d50:	08009e1b 	.word	0x08009e1b
 8009d54:	08009e53 	.word	0x08009e53
 8009d58:	08009e7d 	.word	0x08009e7d
 8009d5c:	08009ecf 	.word	0x08009ecf
 8009d60:	08009ef1 	.word	0x08009ef1
 8009d64:	08009f2d 	.word	0x08009f2d
 8009d68:	08009f53 	.word	0x08009f53
 8009d6c:	08009f91 	.word	0x08009f91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f103 0110 	add.w	r1, r3, #16
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	795b      	ldrb	r3, [r3, #5]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f943 	bl	800a008 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2202      	movs	r2, #2
 8009d86:	761a      	strb	r2, [r3, #24]
      break;
 8009d88:	e139      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	795b      	ldrb	r3, [r3, #5]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fcb2 	bl	800a6fa <USBH_LL_GetURBState>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d11e      	bne.n	8009dde <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7c1b      	ldrb	r3, [r3, #16]
 8009da4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009da8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	8adb      	ldrh	r3, [r3, #22]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00a      	beq.n	8009dc8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009db2:	7b7b      	ldrb	r3, [r7, #13]
 8009db4:	2b80      	cmp	r3, #128	; 0x80
 8009db6:	d103      	bne.n	8009dc0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009dbe:	e115      	b.n	8009fec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2205      	movs	r2, #5
 8009dc4:	761a      	strb	r2, [r3, #24]
      break;
 8009dc6:	e111      	b.n	8009fec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009dc8:	7b7b      	ldrb	r3, [r7, #13]
 8009dca:	2b80      	cmp	r3, #128	; 0x80
 8009dcc:	d103      	bne.n	8009dd6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2209      	movs	r2, #9
 8009dd2:	761a      	strb	r2, [r3, #24]
      break;
 8009dd4:	e10a      	b.n	8009fec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2207      	movs	r2, #7
 8009dda:	761a      	strb	r2, [r3, #24]
      break;
 8009ddc:	e106      	b.n	8009fec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d003      	beq.n	8009dec <USBH_HandleControl+0xcc>
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	f040 8100 	bne.w	8009fec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	220b      	movs	r2, #11
 8009df0:	761a      	strb	r2, [r3, #24]
      break;
 8009df2:	e0fb      	b.n	8009fec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6899      	ldr	r1, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	899a      	ldrh	r2, [r3, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	791b      	ldrb	r3, [r3, #4]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f93a 	bl	800a086 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2204      	movs	r2, #4
 8009e16:	761a      	strb	r2, [r3, #24]
      break;
 8009e18:	e0f1      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	791b      	ldrb	r3, [r3, #4]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fc6a 	bl	800a6fa <USBH_LL_GetURBState>
 8009e26:	4603      	mov	r3, r0
 8009e28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d102      	bne.n	8009e36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2209      	movs	r2, #9
 8009e34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b05      	cmp	r3, #5
 8009e3a:	d102      	bne.n	8009e42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e40:	e0d6      	b.n	8009ff0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	f040 80d3 	bne.w	8009ff0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	220b      	movs	r2, #11
 8009e4e:	761a      	strb	r2, [r3, #24]
      break;
 8009e50:	e0ce      	b.n	8009ff0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6899      	ldr	r1, [r3, #8]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	899a      	ldrh	r2, [r3, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	795b      	ldrb	r3, [r3, #5]
 8009e5e:	2001      	movs	r0, #1
 8009e60:	9000      	str	r0, [sp, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f8ea 	bl	800a03c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2206      	movs	r2, #6
 8009e78:	761a      	strb	r2, [r3, #24]
      break;
 8009e7a:	e0c0      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	795b      	ldrb	r3, [r3, #5]
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fc39 	bl	800a6fa <USBH_LL_GetURBState>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d103      	bne.n	8009e9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2207      	movs	r2, #7
 8009e96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e98:	e0ac      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	2b05      	cmp	r3, #5
 8009e9e:	d105      	bne.n	8009eac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	220c      	movs	r2, #12
 8009ea4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8009eaa:	e0a3      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d103      	bne.n	8009eba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2205      	movs	r2, #5
 8009eb6:	761a      	strb	r2, [r3, #24]
      break;
 8009eb8:	e09c      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	f040 8099 	bne.w	8009ff4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	220b      	movs	r2, #11
 8009ec6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ecc:	e092      	b.n	8009ff4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f8d5 	bl	800a086 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2208      	movs	r2, #8
 8009eec:	761a      	strb	r2, [r3, #24]

      break;
 8009eee:	e086      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	791b      	ldrb	r3, [r3, #4]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fbff 	bl	800a6fa <USBH_LL_GetURBState>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d105      	bne.n	8009f12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	220d      	movs	r2, #13
 8009f0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f10:	e072      	b.n	8009ff8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d103      	bne.n	8009f20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	220b      	movs	r2, #11
 8009f1c:	761a      	strb	r2, [r3, #24]
      break;
 8009f1e:	e06b      	b.n	8009ff8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d168      	bne.n	8009ff8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f26:	2303      	movs	r3, #3
 8009f28:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2a:	e065      	b.n	8009ff8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	795b      	ldrb	r3, [r3, #5]
 8009f30:	2201      	movs	r2, #1
 8009f32:	9200      	str	r2, [sp, #0]
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f87f 	bl	800a03c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	220a      	movs	r2, #10
 8009f4e:	761a      	strb	r2, [r3, #24]
      break;
 8009f50:	e055      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	795b      	ldrb	r3, [r3, #5]
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fbce 	bl	800a6fa <USBH_LL_GetURBState>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d105      	bne.n	8009f74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	220d      	movs	r2, #13
 8009f70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f72:	e043      	b.n	8009ffc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d103      	bne.n	8009f82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2209      	movs	r2, #9
 8009f7e:	761a      	strb	r2, [r3, #24]
      break;
 8009f80:	e03c      	b.n	8009ffc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d139      	bne.n	8009ffc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	220b      	movs	r2, #11
 8009f8c:	761a      	strb	r2, [r3, #24]
      break;
 8009f8e:	e035      	b.n	8009ffc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7e5b      	ldrb	r3, [r3, #25]
 8009f94:	3301      	adds	r3, #1
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	765a      	strb	r2, [r3, #25]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7e5b      	ldrb	r3, [r3, #25]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d806      	bhi.n	8009fb2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009fb0:	e025      	b.n	8009ffe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009fb8:	2106      	movs	r1, #6
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f904 	bl	800a1d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f8fe 	bl	800a1d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fe6:	e00a      	b.n	8009ffe <USBH_HandleControl+0x2de>

    default:
      break;
 8009fe8:	bf00      	nop
 8009fea:	e008      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009fec:	bf00      	nop
 8009fee:	e006      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff0:	bf00      	nop
 8009ff2:	e004      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff4:	bf00      	nop
 8009ff6:	e002      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e000      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ffc:	bf00      	nop
  }

  return status;
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af04      	add	r7, sp, #16
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a016:	79f9      	ldrb	r1, [r7, #7]
 800a018:	2300      	movs	r3, #0
 800a01a:	9303      	str	r3, [sp, #12]
 800a01c:	2308      	movs	r3, #8
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	2300      	movs	r3, #0
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	2300      	movs	r3, #0
 800a02a:	2200      	movs	r2, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 fb33 	bl	800a698 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b088      	sub	sp, #32
 800a040:	af04      	add	r7, sp, #16
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	4611      	mov	r1, r2
 800a048:	461a      	mov	r2, r3
 800a04a:	460b      	mov	r3, r1
 800a04c:	80fb      	strh	r3, [r7, #6]
 800a04e:	4613      	mov	r3, r2
 800a050:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a060:	7979      	ldrb	r1, [r7, #5]
 800a062:	7e3b      	ldrb	r3, [r7, #24]
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	9302      	str	r3, [sp, #8]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	2301      	movs	r3, #1
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	2300      	movs	r3, #0
 800a074:	2200      	movs	r2, #0
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fb0e 	bl	800a698 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b088      	sub	sp, #32
 800a08a:	af04      	add	r7, sp, #16
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	60b9      	str	r1, [r7, #8]
 800a090:	4611      	mov	r1, r2
 800a092:	461a      	mov	r2, r3
 800a094:	460b      	mov	r3, r1
 800a096:	80fb      	strh	r3, [r7, #6]
 800a098:	4613      	mov	r3, r2
 800a09a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a09c:	7979      	ldrb	r1, [r7, #5]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 faf0 	bl	800a698 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a0b8:	2300      	movs	r3, #0

}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b088      	sub	sp, #32
 800a0c6:	af04      	add	r7, sp, #16
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	71fb      	strb	r3, [r7, #7]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	79b9      	ldrb	r1, [r7, #6]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	9203      	str	r2, [sp, #12]
 800a0e2:	9302      	str	r3, [sp, #8]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 fad1 	bl	800a698 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af04      	add	r7, sp, #16
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	b29b      	uxth	r3, r3
 800a112:	78f9      	ldrb	r1, [r7, #3]
 800a114:	2200      	movs	r2, #0
 800a116:	9203      	str	r2, [sp, #12]
 800a118:	9302      	str	r3, [sp, #8]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	2301      	movs	r3, #1
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	2301      	movs	r3, #1
 800a124:	2200      	movs	r2, #0
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 fab6 	bl	800a698 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b086      	sub	sp, #24
 800a13a:	af04      	add	r7, sp, #16
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	4608      	mov	r0, r1
 800a140:	4611      	mov	r1, r2
 800a142:	461a      	mov	r2, r3
 800a144:	4603      	mov	r3, r0
 800a146:	70fb      	strb	r3, [r7, #3]
 800a148:	460b      	mov	r3, r1
 800a14a:	70bb      	strb	r3, [r7, #2]
 800a14c:	4613      	mov	r3, r2
 800a14e:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a150:	7878      	ldrb	r0, [r7, #1]
 800a152:	78ba      	ldrb	r2, [r7, #2]
 800a154:	78f9      	ldrb	r1, [r7, #3]
 800a156:	8b3b      	ldrh	r3, [r7, #24]
 800a158:	9302      	str	r3, [sp, #8]
 800a15a:	7d3b      	ldrb	r3, [r7, #20]
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	7c3b      	ldrb	r3, [r7, #16]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	4603      	mov	r3, r0
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fa49 	bl	800a5fc <USBH_LL_OpenPipe>

  return USBH_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fa68 	bl	800a65a <USBH_LL_ClosePipe>

  return USBH_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f839 	bl	800a218 <USBH_GetFreePipe>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a1aa:	89fb      	ldrh	r3, [r7, #14]
 800a1ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d00b      	beq.n	800a1cc <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	89fb      	ldrh	r3, [r7, #14]
 800a1b8:	f003 030f 	and.w	r3, r3, #15
 800a1bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	440b      	add	r3, r1
 800a1ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a1cc:	89fb      	ldrh	r3, [r7, #14]
 800a1ce:	b2db      	uxtb	r3, r3
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	2b0a      	cmp	r3, #10
 800a1e8:	d80f      	bhi.n	800a20a <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a220:	2300      	movs	r3, #0
 800a222:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
 800a228:	e010      	b.n	800a24c <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d102      	bne.n	800a246 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	b29b      	uxth	r3, r3
 800a244:	e007      	b.n	800a256 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	3301      	adds	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	2b0a      	cmp	r3, #10
 800a250:	d9eb      	bls.n	800a22a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a252:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
	...

0800a264 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a268:	2201      	movs	r2, #1
 800a26a:	490e      	ldr	r1, [pc, #56]	; (800a2a4 <MX_USB_HOST_Init+0x40>)
 800a26c:	480e      	ldr	r0, [pc, #56]	; (800a2a8 <MX_USB_HOST_Init+0x44>)
 800a26e:	f7fe fc86 	bl	8008b7e <USBH_Init>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a278:	f7f6 fba4 	bl	80009c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800a27c:	490b      	ldr	r1, [pc, #44]	; (800a2ac <MX_USB_HOST_Init+0x48>)
 800a27e:	480a      	ldr	r0, [pc, #40]	; (800a2a8 <MX_USB_HOST_Init+0x44>)
 800a280:	f7fe fd0c 	bl	8008c9c <USBH_RegisterClass>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a28a:	f7f6 fb9b 	bl	80009c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a28e:	4806      	ldr	r0, [pc, #24]	; (800a2a8 <MX_USB_HOST_Init+0x44>)
 800a290:	f7fe fda8 	bl	8008de4 <USBH_Start>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a29a:	f7f6 fb93 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a29e:	bf00      	nop
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800a2c5 	.word	0x0800a2c5
 800a2a8:	200001d0 	.word	0x200001d0
 800a2ac:	2000000c 	.word	0x2000000c

0800a2b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a2b4:	4802      	ldr	r0, [pc, #8]	; (800a2c0 <MX_USB_HOST_Process+0x10>)
 800a2b6:	f7fe fda5 	bl	8008e04 <USBH_Process>
}
 800a2ba:	bf00      	nop
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	200001d0 	.word	0x200001d0

0800a2c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d819      	bhi.n	800a30c <USBH_UserProcess+0x48>
 800a2d8:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <USBH_UserProcess+0x1c>)
 800a2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2de:	bf00      	nop
 800a2e0:	0800a30d 	.word	0x0800a30d
 800a2e4:	0800a2fd 	.word	0x0800a2fd
 800a2e8:	0800a30d 	.word	0x0800a30d
 800a2ec:	0800a305 	.word	0x0800a305
 800a2f0:	0800a2f5 	.word	0x0800a2f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a2f4:	4b09      	ldr	r3, [pc, #36]	; (800a31c <USBH_UserProcess+0x58>)
 800a2f6:	2203      	movs	r2, #3
 800a2f8:	701a      	strb	r2, [r3, #0]
  break;
 800a2fa:	e008      	b.n	800a30e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a2fc:	4b07      	ldr	r3, [pc, #28]	; (800a31c <USBH_UserProcess+0x58>)
 800a2fe:	2202      	movs	r2, #2
 800a300:	701a      	strb	r2, [r3, #0]
  break;
 800a302:	e004      	b.n	800a30e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <USBH_UserProcess+0x58>)
 800a306:	2201      	movs	r2, #1
 800a308:	701a      	strb	r2, [r3, #0]
  break;
 800a30a:	e000      	b.n	800a30e <USBH_UserProcess+0x4a>

  default:
  break;
 800a30c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a30e:	bf00      	nop
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	200000b0 	.word	0x200000b0

0800a320 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08a      	sub	sp, #40	; 0x28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a328:	f107 0314 	add.w	r3, r7, #20
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	609a      	str	r2, [r3, #8]
 800a334:	60da      	str	r2, [r3, #12]
 800a336:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a340:	d14e      	bne.n	800a3e0 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a342:	4b29      	ldr	r3, [pc, #164]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a346:	4a28      	ldr	r2, [pc, #160]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a348:	f043 0301 	orr.w	r3, r3, #1
 800a34c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a34e:	4b26      	ldr	r3, [pc, #152]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a35a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a35e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a360:	2302      	movs	r3, #2
 800a362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a364:	2300      	movs	r3, #0
 800a366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a368:	2303      	movs	r3, #3
 800a36a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a36c:	230a      	movs	r3, #10
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a370:	f107 0314 	add.w	r3, r7, #20
 800a374:	4619      	mov	r1, r3
 800a376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a37a:	f7f7 fe63 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a37e:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a382:	4a19      	ldr	r2, [pc, #100]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a38a:	4b17      	ldr	r3, [pc, #92]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a39a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d114      	bne.n	800a3cc <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3a2:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a6:	4a10      	ldr	r2, [pc, #64]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a3a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3ac:	6593      	str	r3, [r2, #88]	; 0x58
 800a3ae:	4b0e      	ldr	r3, [pc, #56]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3b6:	60bb      	str	r3, [r7, #8]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a3ba:	f7f9 fd63 	bl	8003e84 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3be:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a3c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c2:	4a09      	ldr	r2, [pc, #36]	; (800a3e8 <HAL_HCD_MspInit+0xc8>)
 800a3c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a3ca:	e001      	b.n	800a3d0 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a3cc:	f7f9 fd5a 	bl	8003e84 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	2043      	movs	r0, #67	; 0x43
 800a3d6:	f7f7 fdfe 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3da:	2043      	movs	r0, #67	; 0x43
 800a3dc:	f7f7 fe17 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3e0:	bf00      	nop
 800a3e2:	3728      	adds	r7, #40	; 0x28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	40021000 	.word	0x40021000

0800a3ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff f8d7 	bl	80095ae <USBH_LL_IncTimer>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff f90f 	bl	800963a <USBH_LL_Connect>
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff f918 	bl	8009668 <USBH_LL_Disconnect>
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
 800a44c:	4613      	mov	r3, r2
 800a44e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff f8c9 	bl	8009602 <USBH_LL_PortEnabled>
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff f8c9 	bl	800961e <USBH_LL_PortDisabled>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d12a      	bne.n	800a4fc <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a4a6:	4a18      	ldr	r2, [pc, #96]	; (800a508 <USBH_LL_Init+0x74>)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a15      	ldr	r2, [pc, #84]	; (800a508 <USBH_LL_Init+0x74>)
 800a4b2:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <USBH_LL_Init+0x74>)
 800a4b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800a4be:	4b12      	ldr	r3, [pc, #72]	; (800a508 <USBH_LL_Init+0x74>)
 800a4c0:	220c      	movs	r2, #12
 800a4c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a4c4:	4b10      	ldr	r3, [pc, #64]	; (800a508 <USBH_LL_Init+0x74>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <USBH_LL_Init+0x74>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a4d0:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <USBH_LL_Init+0x74>)
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <USBH_LL_Init+0x74>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a4dc:	480a      	ldr	r0, [pc, #40]	; (800a508 <USBH_LL_Init+0x74>)
 800a4de:	f7f7 ff98 	bl	8002412 <HAL_HCD_Init>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a4e8:	f7f6 fa6c 	bl	80009c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a4ec:	4806      	ldr	r0, [pc, #24]	; (800a508 <USBH_LL_Init+0x74>)
 800a4ee:	f7f8 fb5d 	bl	8002bac <HAL_HCD_GetCurrentFrame>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff f84a 	bl	8009590 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20000678 	.word	0x20000678

0800a50c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a522:	4618      	mov	r0, r3
 800a524:	f7f8 fae0 	bl	8002ae8 <HAL_HCD_Start>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f948 	bl	800a7c4 <USBH_Get_USB_Status>
 800a534:	4603      	mov	r3, r0
 800a536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a538:	7bbb      	ldrb	r3, [r7, #14]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a558:	4618      	mov	r0, r3
 800a55a:	f7f8 fae8 	bl	8002b2e <HAL_HCD_Stop>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	4618      	mov	r0, r3
 800a566:	f000 f92d 	bl	800a7c4 <USBH_Get_USB_Status>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a580:	2301      	movs	r3, #1
 800a582:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7f8 fb1c 	bl	8002bc8 <HAL_HCD_GetCurrentSpeed>
 800a590:	4603      	mov	r3, r0
 800a592:	2b02      	cmp	r3, #2
 800a594:	d00c      	beq.n	800a5b0 <USBH_LL_GetSpeed+0x38>
 800a596:	2b02      	cmp	r3, #2
 800a598:	d80d      	bhi.n	800a5b6 <USBH_LL_GetSpeed+0x3e>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <USBH_LL_GetSpeed+0x2c>
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d003      	beq.n	800a5aa <USBH_LL_GetSpeed+0x32>
 800a5a2:	e008      	b.n	800a5b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e008      	b.n	800a5bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ae:	e005      	b.n	800a5bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b4:	e002      	b.n	800a5bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ba:	bf00      	nop
  }
  return  speed;
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7f8 fac3 	bl	8002b68 <HAL_HCD_ResetPort>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 f8eb 	bl	800a7c4 <USBH_Get_USB_Status>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5fc:	b590      	push	{r4, r7, lr}
 800a5fe:	b089      	sub	sp, #36	; 0x24
 800a600:	af04      	add	r7, sp, #16
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	4608      	mov	r0, r1
 800a606:	4611      	mov	r1, r2
 800a608:	461a      	mov	r2, r3
 800a60a:	4603      	mov	r3, r0
 800a60c:	70fb      	strb	r3, [r7, #3]
 800a60e:	460b      	mov	r3, r1
 800a610:	70bb      	strb	r3, [r7, #2]
 800a612:	4613      	mov	r3, r2
 800a614:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800a624:	787c      	ldrb	r4, [r7, #1]
 800a626:	78ba      	ldrb	r2, [r7, #2]
 800a628:	78f9      	ldrb	r1, [r7, #3]
 800a62a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a62c:	9302      	str	r3, [sp, #8]
 800a62e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	4623      	mov	r3, r4
 800a63c:	f7f7 ff4b 	bl	80024d6 <HAL_HCD_HC_Init>
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	4618      	mov	r0, r3
 800a648:	f000 f8bc 	bl	800a7c4 <USBH_Get_USB_Status>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a650:	7bbb      	ldrb	r3, [r7, #14]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	bd90      	pop	{r4, r7, pc}

0800a65a <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	460b      	mov	r3, r1
 800a664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a674:	78fa      	ldrb	r2, [r7, #3]
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f7f7 ffbb 	bl	80025f4 <HAL_HCD_HC_Halt>
 800a67e:	4603      	mov	r3, r0
 800a680:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 f89d 	bl	800a7c4 <USBH_Get_USB_Status>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a698:	b590      	push	{r4, r7, lr}
 800a69a:	b089      	sub	sp, #36	; 0x24
 800a69c:	af04      	add	r7, sp, #16
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	70fb      	strb	r3, [r7, #3]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70bb      	strb	r3, [r7, #2]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800a6c0:	787c      	ldrb	r4, [r7, #1]
 800a6c2:	78ba      	ldrb	r2, [r7, #2]
 800a6c4:	78f9      	ldrb	r1, [r7, #3]
 800a6c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6ca:	9303      	str	r3, [sp, #12]
 800a6cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6ce:	9302      	str	r3, [sp, #8]
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	9301      	str	r3, [sp, #4]
 800a6d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	4623      	mov	r3, r4
 800a6dc:	f7f7 ffae 	bl	800263c <HAL_HCD_HC_SubmitRequest>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f86c 	bl	800a7c4 <USBH_Get_USB_Status>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd90      	pop	{r4, r7, pc}

0800a6fa <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a70c:	78fa      	ldrb	r2, [r7, #3]
 800a70e:	4611      	mov	r1, r2
 800a710:	4618      	mov	r0, r3
 800a712:	f7f8 fa37 	bl	8002b84 <HAL_HCD_HC_GetURBState>
 800a716:	4603      	mov	r3, r0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800a732:	2b01      	cmp	r3, #1
 800a734:	d103      	bne.n	800a73e <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 f86f 	bl	800a81c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a73e:	20c8      	movs	r0, #200	; 0xc8
 800a740:	f7f6 fb5e 	bl	8000e00 <HAL_Delay>
  return USBH_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a74e:	b480      	push	{r7}
 800a750:	b085      	sub	sp, #20
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	70fb      	strb	r3, [r7, #3]
 800a75a:	4613      	mov	r3, r2
 800a75c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a764:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	212c      	movs	r1, #44	; 0x2c
 800a76c:	fb01 f303 	mul.w	r3, r1, r3
 800a770:	4413      	add	r3, r2
 800a772:	333b      	adds	r3, #59	; 0x3b
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d009      	beq.n	800a78e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	212c      	movs	r1, #44	; 0x2c
 800a780:	fb01 f303 	mul.w	r3, r1, r3
 800a784:	4413      	add	r3, r2
 800a786:	3354      	adds	r3, #84	; 0x54
 800a788:	78ba      	ldrb	r2, [r7, #2]
 800a78a:	701a      	strb	r2, [r3, #0]
 800a78c:	e008      	b.n	800a7a0 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a78e:	78fb      	ldrb	r3, [r7, #3]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	212c      	movs	r1, #44	; 0x2c
 800a794:	fb01 f303 	mul.w	r3, r1, r3
 800a798:	4413      	add	r3, r2
 800a79a:	3355      	adds	r3, #85	; 0x55
 800a79c:	78ba      	ldrb	r2, [r7, #2]
 800a79e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b082      	sub	sp, #8
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7f6 fb22 	bl	8000e00 <HAL_Delay>
}
 800a7bc:	bf00      	nop
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d817      	bhi.n	800a808 <USBH_Get_USB_Status+0x44>
 800a7d8:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <USBH_Get_USB_Status+0x1c>)
 800a7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7de:	bf00      	nop
 800a7e0:	0800a7f1 	.word	0x0800a7f1
 800a7e4:	0800a7f7 	.word	0x0800a7f7
 800a7e8:	0800a7fd 	.word	0x0800a7fd
 800a7ec:	0800a803 	.word	0x0800a803
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f4:	e00b      	b.n	800a80e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fa:	e008      	b.n	800a80e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a800:	e005      	b.n	800a80e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a802:	2302      	movs	r3, #2
 800a804:	73fb      	strb	r3, [r7, #15]
    break;
 800a806:	e002      	b.n	800a80e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a808:	2302      	movs	r3, #2
 800a80a:	73fb      	strb	r3, [r7, #15]
    break;
 800a80c:	bf00      	nop
  }
  return usb_status;
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a830:	2301      	movs	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
 800a834:	e001      	b.n	800a83a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
 800a83c:	461a      	mov	r2, r3
 800a83e:	2140      	movs	r1, #64	; 0x40
 800a840:	4803      	ldr	r0, [pc, #12]	; (800a850 <MX_DriverVbusFS+0x34>)
 800a842:	f7f7 fd91 	bl	8002368 <HAL_GPIO_WritePin>
}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	48001800 	.word	0x48001800

0800a854 <__errno>:
 800a854:	4b01      	ldr	r3, [pc, #4]	; (800a85c <__errno+0x8>)
 800a856:	6818      	ldr	r0, [r3, #0]
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	2000002c 	.word	0x2000002c

0800a860 <__libc_init_array>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	4d0d      	ldr	r5, [pc, #52]	; (800a898 <__libc_init_array+0x38>)
 800a864:	4c0d      	ldr	r4, [pc, #52]	; (800a89c <__libc_init_array+0x3c>)
 800a866:	1b64      	subs	r4, r4, r5
 800a868:	10a4      	asrs	r4, r4, #2
 800a86a:	2600      	movs	r6, #0
 800a86c:	42a6      	cmp	r6, r4
 800a86e:	d109      	bne.n	800a884 <__libc_init_array+0x24>
 800a870:	4d0b      	ldr	r5, [pc, #44]	; (800a8a0 <__libc_init_array+0x40>)
 800a872:	4c0c      	ldr	r4, [pc, #48]	; (800a8a4 <__libc_init_array+0x44>)
 800a874:	f000 f8f8 	bl	800aa68 <_init>
 800a878:	1b64      	subs	r4, r4, r5
 800a87a:	10a4      	asrs	r4, r4, #2
 800a87c:	2600      	movs	r6, #0
 800a87e:	42a6      	cmp	r6, r4
 800a880:	d105      	bne.n	800a88e <__libc_init_array+0x2e>
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	f855 3b04 	ldr.w	r3, [r5], #4
 800a888:	4798      	blx	r3
 800a88a:	3601      	adds	r6, #1
 800a88c:	e7ee      	b.n	800a86c <__libc_init_array+0xc>
 800a88e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a892:	4798      	blx	r3
 800a894:	3601      	adds	r6, #1
 800a896:	e7f2      	b.n	800a87e <__libc_init_array+0x1e>
 800a898:	0800aad8 	.word	0x0800aad8
 800a89c:	0800aad8 	.word	0x0800aad8
 800a8a0:	0800aad8 	.word	0x0800aad8
 800a8a4:	0800aadc 	.word	0x0800aadc

0800a8a8 <malloc>:
 800a8a8:	4b02      	ldr	r3, [pc, #8]	; (800a8b4 <malloc+0xc>)
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f000 b863 	b.w	800a978 <_malloc_r>
 800a8b2:	bf00      	nop
 800a8b4:	2000002c 	.word	0x2000002c

0800a8b8 <free>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	; (800a8c4 <free+0xc>)
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	f000 b80b 	b.w	800a8d8 <_free_r>
 800a8c2:	bf00      	nop
 800a8c4:	2000002c 	.word	0x2000002c

0800a8c8 <memset>:
 800a8c8:	4402      	add	r2, r0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d100      	bne.n	800a8d2 <memset+0xa>
 800a8d0:	4770      	bx	lr
 800a8d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8d6:	e7f9      	b.n	800a8cc <memset+0x4>

0800a8d8 <_free_r>:
 800a8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8da:	2900      	cmp	r1, #0
 800a8dc:	d048      	beq.n	800a970 <_free_r+0x98>
 800a8de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e2:	9001      	str	r0, [sp, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ea:	bfb8      	it	lt
 800a8ec:	18e4      	addlt	r4, r4, r3
 800a8ee:	f000 f8ad 	bl	800aa4c <__malloc_lock>
 800a8f2:	4a20      	ldr	r2, [pc, #128]	; (800a974 <_free_r+0x9c>)
 800a8f4:	9801      	ldr	r0, [sp, #4]
 800a8f6:	6813      	ldr	r3, [r2, #0]
 800a8f8:	4615      	mov	r5, r2
 800a8fa:	b933      	cbnz	r3, 800a90a <_free_r+0x32>
 800a8fc:	6063      	str	r3, [r4, #4]
 800a8fe:	6014      	str	r4, [r2, #0]
 800a900:	b003      	add	sp, #12
 800a902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a906:	f000 b8a7 	b.w	800aa58 <__malloc_unlock>
 800a90a:	42a3      	cmp	r3, r4
 800a90c:	d90b      	bls.n	800a926 <_free_r+0x4e>
 800a90e:	6821      	ldr	r1, [r4, #0]
 800a910:	1862      	adds	r2, r4, r1
 800a912:	4293      	cmp	r3, r2
 800a914:	bf04      	itt	eq
 800a916:	681a      	ldreq	r2, [r3, #0]
 800a918:	685b      	ldreq	r3, [r3, #4]
 800a91a:	6063      	str	r3, [r4, #4]
 800a91c:	bf04      	itt	eq
 800a91e:	1852      	addeq	r2, r2, r1
 800a920:	6022      	streq	r2, [r4, #0]
 800a922:	602c      	str	r4, [r5, #0]
 800a924:	e7ec      	b.n	800a900 <_free_r+0x28>
 800a926:	461a      	mov	r2, r3
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	b10b      	cbz	r3, 800a930 <_free_r+0x58>
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	d9fa      	bls.n	800a926 <_free_r+0x4e>
 800a930:	6811      	ldr	r1, [r2, #0]
 800a932:	1855      	adds	r5, r2, r1
 800a934:	42a5      	cmp	r5, r4
 800a936:	d10b      	bne.n	800a950 <_free_r+0x78>
 800a938:	6824      	ldr	r4, [r4, #0]
 800a93a:	4421      	add	r1, r4
 800a93c:	1854      	adds	r4, r2, r1
 800a93e:	42a3      	cmp	r3, r4
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	d1dd      	bne.n	800a900 <_free_r+0x28>
 800a944:	681c      	ldr	r4, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	6053      	str	r3, [r2, #4]
 800a94a:	4421      	add	r1, r4
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	e7d7      	b.n	800a900 <_free_r+0x28>
 800a950:	d902      	bls.n	800a958 <_free_r+0x80>
 800a952:	230c      	movs	r3, #12
 800a954:	6003      	str	r3, [r0, #0]
 800a956:	e7d3      	b.n	800a900 <_free_r+0x28>
 800a958:	6825      	ldr	r5, [r4, #0]
 800a95a:	1961      	adds	r1, r4, r5
 800a95c:	428b      	cmp	r3, r1
 800a95e:	bf04      	itt	eq
 800a960:	6819      	ldreq	r1, [r3, #0]
 800a962:	685b      	ldreq	r3, [r3, #4]
 800a964:	6063      	str	r3, [r4, #4]
 800a966:	bf04      	itt	eq
 800a968:	1949      	addeq	r1, r1, r5
 800a96a:	6021      	streq	r1, [r4, #0]
 800a96c:	6054      	str	r4, [r2, #4]
 800a96e:	e7c7      	b.n	800a900 <_free_r+0x28>
 800a970:	b003      	add	sp, #12
 800a972:	bd30      	pop	{r4, r5, pc}
 800a974:	200000b4 	.word	0x200000b4

0800a978 <_malloc_r>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	1ccd      	adds	r5, r1, #3
 800a97c:	f025 0503 	bic.w	r5, r5, #3
 800a980:	3508      	adds	r5, #8
 800a982:	2d0c      	cmp	r5, #12
 800a984:	bf38      	it	cc
 800a986:	250c      	movcc	r5, #12
 800a988:	2d00      	cmp	r5, #0
 800a98a:	4606      	mov	r6, r0
 800a98c:	db01      	blt.n	800a992 <_malloc_r+0x1a>
 800a98e:	42a9      	cmp	r1, r5
 800a990:	d903      	bls.n	800a99a <_malloc_r+0x22>
 800a992:	230c      	movs	r3, #12
 800a994:	6033      	str	r3, [r6, #0]
 800a996:	2000      	movs	r0, #0
 800a998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a99a:	f000 f857 	bl	800aa4c <__malloc_lock>
 800a99e:	4921      	ldr	r1, [pc, #132]	; (800aa24 <_malloc_r+0xac>)
 800a9a0:	680a      	ldr	r2, [r1, #0]
 800a9a2:	4614      	mov	r4, r2
 800a9a4:	b99c      	cbnz	r4, 800a9ce <_malloc_r+0x56>
 800a9a6:	4f20      	ldr	r7, [pc, #128]	; (800aa28 <_malloc_r+0xb0>)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	b923      	cbnz	r3, 800a9b6 <_malloc_r+0x3e>
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 f83c 	bl	800aa2c <_sbrk_r>
 800a9b4:	6038      	str	r0, [r7, #0]
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f000 f837 	bl	800aa2c <_sbrk_r>
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	d123      	bne.n	800aa0a <_malloc_r+0x92>
 800a9c2:	230c      	movs	r3, #12
 800a9c4:	6033      	str	r3, [r6, #0]
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f000 f846 	bl	800aa58 <__malloc_unlock>
 800a9cc:	e7e3      	b.n	800a996 <_malloc_r+0x1e>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	1b5b      	subs	r3, r3, r5
 800a9d2:	d417      	bmi.n	800aa04 <_malloc_r+0x8c>
 800a9d4:	2b0b      	cmp	r3, #11
 800a9d6:	d903      	bls.n	800a9e0 <_malloc_r+0x68>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	441c      	add	r4, r3
 800a9dc:	6025      	str	r5, [r4, #0]
 800a9de:	e004      	b.n	800a9ea <_malloc_r+0x72>
 800a9e0:	6863      	ldr	r3, [r4, #4]
 800a9e2:	42a2      	cmp	r2, r4
 800a9e4:	bf0c      	ite	eq
 800a9e6:	600b      	streq	r3, [r1, #0]
 800a9e8:	6053      	strne	r3, [r2, #4]
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f000 f834 	bl	800aa58 <__malloc_unlock>
 800a9f0:	f104 000b 	add.w	r0, r4, #11
 800a9f4:	1d23      	adds	r3, r4, #4
 800a9f6:	f020 0007 	bic.w	r0, r0, #7
 800a9fa:	1ac2      	subs	r2, r0, r3
 800a9fc:	d0cc      	beq.n	800a998 <_malloc_r+0x20>
 800a9fe:	1a1b      	subs	r3, r3, r0
 800aa00:	50a3      	str	r3, [r4, r2]
 800aa02:	e7c9      	b.n	800a998 <_malloc_r+0x20>
 800aa04:	4622      	mov	r2, r4
 800aa06:	6864      	ldr	r4, [r4, #4]
 800aa08:	e7cc      	b.n	800a9a4 <_malloc_r+0x2c>
 800aa0a:	1cc4      	adds	r4, r0, #3
 800aa0c:	f024 0403 	bic.w	r4, r4, #3
 800aa10:	42a0      	cmp	r0, r4
 800aa12:	d0e3      	beq.n	800a9dc <_malloc_r+0x64>
 800aa14:	1a21      	subs	r1, r4, r0
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 f808 	bl	800aa2c <_sbrk_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d1dd      	bne.n	800a9dc <_malloc_r+0x64>
 800aa20:	e7cf      	b.n	800a9c2 <_malloc_r+0x4a>
 800aa22:	bf00      	nop
 800aa24:	200000b4 	.word	0x200000b4
 800aa28:	200000b8 	.word	0x200000b8

0800aa2c <_sbrk_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d06      	ldr	r5, [pc, #24]	; (800aa48 <_sbrk_r+0x1c>)
 800aa30:	2300      	movs	r3, #0
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	f7f6 f8dc 	bl	8000bf4 <_sbrk>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_sbrk_r+0x1a>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_sbrk_r+0x1a>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	2000097c 	.word	0x2000097c

0800aa4c <__malloc_lock>:
 800aa4c:	4801      	ldr	r0, [pc, #4]	; (800aa54 <__malloc_lock+0x8>)
 800aa4e:	f000 b809 	b.w	800aa64 <__retarget_lock_acquire_recursive>
 800aa52:	bf00      	nop
 800aa54:	20000984 	.word	0x20000984

0800aa58 <__malloc_unlock>:
 800aa58:	4801      	ldr	r0, [pc, #4]	; (800aa60 <__malloc_unlock+0x8>)
 800aa5a:	f000 b804 	b.w	800aa66 <__retarget_lock_release_recursive>
 800aa5e:	bf00      	nop
 800aa60:	20000984 	.word	0x20000984

0800aa64 <__retarget_lock_acquire_recursive>:
 800aa64:	4770      	bx	lr

0800aa66 <__retarget_lock_release_recursive>:
 800aa66:	4770      	bx	lr

0800aa68 <_init>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	bf00      	nop
 800aa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6e:	bc08      	pop	{r3}
 800aa70:	469e      	mov	lr, r3
 800aa72:	4770      	bx	lr

0800aa74 <_fini>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr
