
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  08012390  08012390  00022390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f70  08012f70  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08012f70  08012f70  00022f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f78  08012f78  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f78  08012f78  00022f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f7c  08012f7c  00022f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08012f80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e84  20000090  08013010  00030090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002f14  08013010  00032f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036d81  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c52  00000000  00000000  00066e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  0006ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e8  00000000  00000000  0006e428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000349b9  00000000  00000000  0006fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025aa5  00000000  00000000  000a45c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126a06  00000000  00000000  000ca06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f0a74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007578  00000000  00000000  001f0ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000090 	.word	0x20000090
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012378 	.word	0x08012378

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000094 	.word	0x20000094
 80001fc:	08012378 	.word	0x08012378

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	; 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2uiz>:
 800089c:	004a      	lsls	r2, r1, #1
 800089e:	d211      	bcs.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008a4:	d211      	bcs.n	80008ca <__aeabi_d2uiz+0x2e>
 80008a6:	d50d      	bpl.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b0:	d40e      	bmi.n	80008d0 <__aeabi_d2uiz+0x34>
 80008b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008be:	fa23 f002 	lsr.w	r0, r3, r2
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ce:	d102      	bne.n	80008d6 <__aeabi_d2uiz+0x3a>
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	4770      	bx	lr
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	4770      	bx	lr

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96e 	b.w	8000bd0 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468c      	mov	ip, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8083 	bne.w	8000a22 <__udivmoddi4+0x116>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d947      	bls.n	80009b2 <__udivmoddi4+0xa6>
 8000922:	fab2 f282 	clz	r2, r2
 8000926:	b142      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000928:	f1c2 0020 	rsb	r0, r2, #32
 800092c:	fa24 f000 	lsr.w	r0, r4, r0
 8000930:	4091      	lsls	r1, r2
 8000932:	4097      	lsls	r7, r2
 8000934:	ea40 0c01 	orr.w	ip, r0, r1
 8000938:	4094      	lsls	r4, r2
 800093a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800093e:	0c23      	lsrs	r3, r4, #16
 8000940:	fbbc f6f8 	udiv	r6, ip, r8
 8000944:	fa1f fe87 	uxth.w	lr, r7
 8000948:	fb08 c116 	mls	r1, r8, r6, ip
 800094c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000950:	fb06 f10e 	mul.w	r1, r6, lr
 8000954:	4299      	cmp	r1, r3
 8000956:	d909      	bls.n	800096c <__udivmoddi4+0x60>
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	f106 30ff 	add.w	r0, r6, #4294967295
 800095e:	f080 8119 	bcs.w	8000b94 <__udivmoddi4+0x288>
 8000962:	4299      	cmp	r1, r3
 8000964:	f240 8116 	bls.w	8000b94 <__udivmoddi4+0x288>
 8000968:	3e02      	subs	r6, #2
 800096a:	443b      	add	r3, r7
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb3 f0f8 	udiv	r0, r3, r8
 8000974:	fb08 3310 	mls	r3, r8, r0, r3
 8000978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800097c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000980:	45a6      	cmp	lr, r4
 8000982:	d909      	bls.n	8000998 <__udivmoddi4+0x8c>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 33ff 	add.w	r3, r0, #4294967295
 800098a:	f080 8105 	bcs.w	8000b98 <__udivmoddi4+0x28c>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f240 8102 	bls.w	8000b98 <__udivmoddi4+0x28c>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800099c:	eba4 040e 	sub.w	r4, r4, lr
 80009a0:	2600      	movs	r6, #0
 80009a2:	b11d      	cbz	r5, 80009ac <__udivmoddi4+0xa0>
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	2300      	movs	r3, #0
 80009a8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	b902      	cbnz	r2, 80009b6 <__udivmoddi4+0xaa>
 80009b4:	deff      	udf	#255	; 0xff
 80009b6:	fab2 f282 	clz	r2, r2
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d150      	bne.n	8000a60 <__udivmoddi4+0x154>
 80009be:	1bcb      	subs	r3, r1, r7
 80009c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c4:	fa1f f887 	uxth.w	r8, r7
 80009c8:	2601      	movs	r6, #1
 80009ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ce:	0c21      	lsrs	r1, r4, #16
 80009d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d8:	fb08 f30c 	mul.w	r3, r8, ip
 80009dc:	428b      	cmp	r3, r1
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0xe4>
 80009e0:	1879      	adds	r1, r7, r1
 80009e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0xe2>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	f200 80e9 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 80009ee:	4684      	mov	ip, r0
 80009f0:	1ac9      	subs	r1, r1, r3
 80009f2:	b2a3      	uxth	r3, r4
 80009f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a00:	fb08 f800 	mul.w	r8, r8, r0
 8000a04:	45a0      	cmp	r8, r4
 8000a06:	d907      	bls.n	8000a18 <__udivmoddi4+0x10c>
 8000a08:	193c      	adds	r4, r7, r4
 8000a0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x10a>
 8000a10:	45a0      	cmp	r8, r4
 8000a12:	f200 80d9 	bhi.w	8000bc8 <__udivmoddi4+0x2bc>
 8000a16:	4618      	mov	r0, r3
 8000a18:	eba4 0408 	sub.w	r4, r4, r8
 8000a1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a20:	e7bf      	b.n	80009a2 <__udivmoddi4+0x96>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d909      	bls.n	8000a3a <__udivmoddi4+0x12e>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	f000 80b1 	beq.w	8000b8e <__udivmoddi4+0x282>
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a32:	4630      	mov	r0, r6
 8000a34:	4631      	mov	r1, r6
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	fab3 f683 	clz	r6, r3
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d14a      	bne.n	8000ad8 <__udivmoddi4+0x1cc>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d302      	bcc.n	8000a4c <__udivmoddi4+0x140>
 8000a46:	4282      	cmp	r2, r0
 8000a48:	f200 80b8 	bhi.w	8000bbc <__udivmoddi4+0x2b0>
 8000a4c:	1a84      	subs	r4, r0, r2
 8000a4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a52:	2001      	movs	r0, #1
 8000a54:	468c      	mov	ip, r1
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d0a8      	beq.n	80009ac <__udivmoddi4+0xa0>
 8000a5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a5e:	e7a5      	b.n	80009ac <__udivmoddi4+0xa0>
 8000a60:	f1c2 0320 	rsb	r3, r2, #32
 8000a64:	fa20 f603 	lsr.w	r6, r0, r3
 8000a68:	4097      	lsls	r7, r2
 8000a6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a72:	40d9      	lsrs	r1, r3
 8000a74:	4330      	orrs	r0, r6
 8000a76:	0c03      	lsrs	r3, r0, #16
 8000a78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a7c:	fa1f f887 	uxth.w	r8, r7
 8000a80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f108 	mul.w	r1, r6, r8
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x19c>
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a9a:	f080 808d 	bcs.w	8000bb8 <__udivmoddi4+0x2ac>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 808a 	bls.w	8000bb8 <__udivmoddi4+0x2ac>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	443b      	add	r3, r7
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b281      	uxth	r1, r0
 8000aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab8:	fb00 f308 	mul.w	r3, r0, r8
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x1c4>
 8000ac0:	1879      	adds	r1, r7, r1
 8000ac2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ac6:	d273      	bcs.n	8000bb0 <__udivmoddi4+0x2a4>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d971      	bls.n	8000bb0 <__udivmoddi4+0x2a4>
 8000acc:	3802      	subs	r0, #2
 8000ace:	4439      	add	r1, r7
 8000ad0:	1acb      	subs	r3, r1, r3
 8000ad2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ad6:	e778      	b.n	80009ca <__udivmoddi4+0xbe>
 8000ad8:	f1c6 0c20 	rsb	ip, r6, #32
 8000adc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ae0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ae4:	431c      	orrs	r4, r3
 8000ae6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aea:	fa01 f306 	lsl.w	r3, r1, r6
 8000aee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000af2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000af6:	431f      	orrs	r7, r3
 8000af8:	0c3b      	lsrs	r3, r7, #16
 8000afa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000afe:	fa1f f884 	uxth.w	r8, r4
 8000b02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b0e:	458a      	cmp	sl, r1
 8000b10:	fa02 f206 	lsl.w	r2, r2, r6
 8000b14:	fa00 f306 	lsl.w	r3, r0, r6
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x220>
 8000b1a:	1861      	adds	r1, r4, r1
 8000b1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b20:	d248      	bcs.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b22:	458a      	cmp	sl, r1
 8000b24:	d946      	bls.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b26:	f1a9 0902 	sub.w	r9, r9, #2
 8000b2a:	4421      	add	r1, r4
 8000b2c:	eba1 010a 	sub.w	r1, r1, sl
 8000b30:	b2bf      	uxth	r7, r7
 8000b32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b3e:	fb00 f808 	mul.w	r8, r0, r8
 8000b42:	45b8      	cmp	r8, r7
 8000b44:	d907      	bls.n	8000b56 <__udivmoddi4+0x24a>
 8000b46:	19e7      	adds	r7, r4, r7
 8000b48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4c:	d22e      	bcs.n	8000bac <__udivmoddi4+0x2a0>
 8000b4e:	45b8      	cmp	r8, r7
 8000b50:	d92c      	bls.n	8000bac <__udivmoddi4+0x2a0>
 8000b52:	3802      	subs	r0, #2
 8000b54:	4427      	add	r7, r4
 8000b56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b5a:	eba7 0708 	sub.w	r7, r7, r8
 8000b5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b62:	454f      	cmp	r7, r9
 8000b64:	46c6      	mov	lr, r8
 8000b66:	4649      	mov	r1, r9
 8000b68:	d31a      	bcc.n	8000ba0 <__udivmoddi4+0x294>
 8000b6a:	d017      	beq.n	8000b9c <__udivmoddi4+0x290>
 8000b6c:	b15d      	cbz	r5, 8000b86 <__udivmoddi4+0x27a>
 8000b6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b72:	eb67 0701 	sbc.w	r7, r7, r1
 8000b76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b7a:	40f2      	lsrs	r2, r6
 8000b7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b80:	40f7      	lsrs	r7, r6
 8000b82:	e9c5 2700 	strd	r2, r7, [r5]
 8000b86:	2600      	movs	r6, #0
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e70b      	b.n	80009ac <__udivmoddi4+0xa0>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e9      	b.n	800096c <__udivmoddi4+0x60>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6fd      	b.n	8000998 <__udivmoddi4+0x8c>
 8000b9c:	4543      	cmp	r3, r8
 8000b9e:	d2e5      	bcs.n	8000b6c <__udivmoddi4+0x260>
 8000ba0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ba4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7df      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bac:	4608      	mov	r0, r1
 8000bae:	e7d2      	b.n	8000b56 <__udivmoddi4+0x24a>
 8000bb0:	4660      	mov	r0, ip
 8000bb2:	e78d      	b.n	8000ad0 <__udivmoddi4+0x1c4>
 8000bb4:	4681      	mov	r9, r0
 8000bb6:	e7b9      	b.n	8000b2c <__udivmoddi4+0x220>
 8000bb8:	4666      	mov	r6, ip
 8000bba:	e775      	b.n	8000aa8 <__udivmoddi4+0x19c>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e74a      	b.n	8000a56 <__udivmoddi4+0x14a>
 8000bc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bc4:	4439      	add	r1, r7
 8000bc6:	e713      	b.n	80009f0 <__udivmoddi4+0xe4>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	e724      	b.n	8000a18 <__udivmoddi4+0x10c>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <Send_Usart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Usart (char *string)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fb19 	bl	8000214 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <Send_Usart+0x28>)
 8000bee:	f006 fa65 	bl	80070bc <HAL_UART_Transmit>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200006f4 	.word	0x200006f4

08000c00 <Mount_USB>:




void Mount_USB (void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	491f      	ldr	r1, [pc, #124]	; (8000c84 <Mount_USB+0x84>)
 8000c08:	481f      	ldr	r0, [pc, #124]	; (8000c88 <Mount_USB+0x88>)
 8000c0a:	f00e fc53 	bl	800f4b4 <f_mount>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <Mount_USB+0x8c>)
 8000c14:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) printf("ERROR!!! in mounting USB ...\n\n");
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <Mount_USB+0x8c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <Mount_USB+0x24>
 8000c1e:	481c      	ldr	r0, [pc, #112]	; (8000c90 <Mount_USB+0x90>)
 8000c20:	f010 fb4a 	bl	80112b8 <puts>
	printf("USB mounted successfully...\n");
 8000c24:	481b      	ldr	r0, [pc, #108]	; (8000c94 <Mount_USB+0x94>)
 8000c26:	f010 fb47 	bl	80112b8 <puts>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	481a      	ldr	r0, [pc, #104]	; (8000c98 <Mount_USB+0x98>)
 8000c2e:	f003 f88b 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f001 f9fa 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000c38:	2110      	movs	r1, #16
 8000c3a:	4817      	ldr	r0, [pc, #92]	; (8000c98 <Mount_USB+0x98>)
 8000c3c:	f003 f884 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000c40:	2064      	movs	r0, #100	; 0x64
 8000c42:	f001 f9f3 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000c46:	2110      	movs	r1, #16
 8000c48:	4813      	ldr	r0, [pc, #76]	; (8000c98 <Mount_USB+0x98>)
 8000c4a:	f003 f87d 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f001 f9ec 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000c54:	2110      	movs	r1, #16
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <Mount_USB+0x98>)
 8000c58:	f003 f876 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f001 f9e5 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000c62:	2110      	movs	r1, #16
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <Mount_USB+0x98>)
 8000c66:	f003 f86f 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f001 f9de 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000c70:	2110      	movs	r1, #16
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <Mount_USB+0x98>)
 8000c74:	f003 f868 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000c78:	2064      	movs	r0, #100	; 0x64
 8000c7a:	f001 f9d7 	bl	800202c <HAL_Delay>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000b60 	.word	0x20000b60
 8000c88:	20001bc0 	.word	0x20001bc0
 8000c8c:	20000564 	.word	0x20000564
 8000c90:	08012390 	.word	0x08012390
 8000c94:	080123b0 	.word	0x080123b0
 8000c98:	48000400 	.word	0x48000400

08000c9c <Unmount_USB>:

void Unmount_USB (void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	490a      	ldr	r1, [pc, #40]	; (8000ccc <Unmount_USB+0x30>)
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f00e fc05 	bl	800f4b4 <f_mount>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <Unmount_USB+0x34>)
 8000cb0:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Usart ("USB UNMOUNTED successfully...\n\n\n");
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <Unmount_USB+0x34>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <Unmount_USB+0x26>
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <Unmount_USB+0x38>)
 8000cbc:	f7ff ff8a 	bl	8000bd4 <Send_Usart>
	else Send_Usart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000cc0:	e002      	b.n	8000cc8 <Unmount_USB+0x2c>
	else Send_Usart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <Unmount_USB+0x3c>)
 8000cc4:	f7ff ff86 	bl	8000bd4 <Send_Usart>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000b60 	.word	0x20000b60
 8000cd0:	20000564 	.word	0x20000564
 8000cd4:	080123cc 	.word	0x080123cc
 8000cd8:	080123f0 	.word	0x080123f0

08000cdc <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09a      	sub	sp, #104	; 0x68
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000ce4:	2014      	movs	r0, #20
 8000ce6:	f010 f991 	bl	801100c <malloc>
 8000cea:	4603      	mov	r3, r0
 8000cec:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	4944      	ldr	r1, [pc, #272]	; (8000e04 <Scan_USB+0x128>)
 8000cf2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000cf4:	f010 faf8 	bl	80112e8 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00f f9e3 	bl	80100ca <f_opendir>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <Scan_USB+0x12c>)
 8000d0a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000d0c:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <Scan_USB+0x12c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d16e      	bne.n	8000df2 <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	493c      	ldr	r1, [pc, #240]	; (8000e0c <Scan_USB+0x130>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00f faa4 	bl	8010268 <f_readdir>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <Scan_USB+0x12c>)
 8000d26:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <Scan_USB+0x12c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d15b      	bne.n	8000de8 <Scan_USB+0x10c>
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <Scan_USB+0x130>)
 8000d32:	7e9b      	ldrb	r3, [r3, #26]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d057      	beq.n	8000de8 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000d38:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <Scan_USB+0x130>)
 8000d3a:	7b1b      	ldrb	r3, [r3, #12]
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d03a      	beq.n	8000dba <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000d44:	4932      	ldr	r1, [pc, #200]	; (8000e10 <Scan_USB+0x134>)
 8000d46:	4833      	ldr	r0, [pc, #204]	; (8000e14 <Scan_USB+0x138>)
 8000d48:	f7ff fa5a 	bl	8000200 <strcmp>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d045      	beq.n	8000dde <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d52:	492f      	ldr	r1, [pc, #188]	; (8000e10 <Scan_USB+0x134>)
 8000d54:	4830      	ldr	r0, [pc, #192]	; (8000e18 <Scan_USB+0x13c>)
 8000d56:	f7ff fa53 	bl	8000200 <strcmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d040      	beq.n	8000de2 <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8000d60:	201e      	movs	r0, #30
 8000d62:	f010 f953 	bl	801100c <malloc>
 8000d66:	4603      	mov	r3, r0
 8000d68:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000d6a:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <Scan_USB+0x134>)
 8000d6c:	492b      	ldr	r1, [pc, #172]	; (8000e1c <Scan_USB+0x140>)
 8000d6e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d70:	f010 faba 	bl	80112e8 <siprintf>
            	Send_Usart(buf);
 8000d74:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d76:	f7ff ff2d 	bl	8000bd4 <Send_Usart>
            	free(buf);
 8000d7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d7c:	f010 f94e 	bl	801101c <free>
                i = strlen(path);
 8000d80:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d82:	f7ff fa47 	bl	8000214 <strlen>
 8000d86:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <Scan_USB+0x134>)
 8000d90:	4923      	ldr	r1, [pc, #140]	; (8000e20 <Scan_USB+0x144>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f010 faa8 	bl	80112e8 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000d98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d9a:	f7ff ff9f 	bl	8000cdc <Scan_USB>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <Scan_USB+0x12c>)
 8000da4:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <Scan_USB+0x12c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d11b      	bne.n	8000de6 <Scan_USB+0x10a>
                path[i] = 0;
 8000dae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000db2:	4413      	add	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e7ac      	b.n	8000d14 <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000dba:	201e      	movs	r0, #30
 8000dbc:	f010 f926 	bl	801100c <malloc>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <Scan_USB+0x134>)
 8000dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000dc8:	4916      	ldr	r1, [pc, #88]	; (8000e24 <Scan_USB+0x148>)
 8000dca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000dcc:	f010 fa8c 	bl	80112e8 <siprintf>
               Send_Usart(buf);
 8000dd0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000dd2:	f7ff feff 	bl	8000bd4 <Send_Usart>
               free(buf);
 8000dd6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000dd8:	f010 f920 	bl	801101c <free>
 8000ddc:	e79a      	b.n	8000d14 <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000dde:	bf00      	nop
 8000de0:	e798      	b.n	8000d14 <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000de2:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000de4:	e796      	b.n	8000d14 <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000de6:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4618      	mov	r0, r3
 8000dee:	f00f fa15 	bl	801021c <f_closedir>
    }
    free(path);
 8000df2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000df4:	f010 f912 	bl	801101c <free>
    return fresult;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <Scan_USB+0x12c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3768      	adds	r7, #104	; 0x68
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	08012410 	.word	0x08012410
 8000e08:	20000564 	.word	0x20000564
 8000e0c:	20000568 	.word	0x20000568
 8000e10:	20000582 	.word	0x20000582
 8000e14:	08012414 	.word	0x08012414
 8000e18:	08012420 	.word	0x08012420
 8000e1c:	0801243c 	.word	0x0801243c
 8000e20:	08012448 	.word	0x08012448
 8000e24:	0801244c 	.word	0x0801244c

08000e28 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000e32:	4955      	ldr	r1, [pc, #340]	; (8000f88 <Write_File+0x160>)
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f00f fa54 	bl	80102e2 <f_stat>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <Write_File+0x164>)
 8000e40:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000e42:	4b52      	ldr	r3, [pc, #328]	; (8000f8c <Write_File+0x164>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d012      	beq.n	8000e70 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000e4a:	2064      	movs	r0, #100	; 0x64
 8000e4c:	f010 f8de 	bl	801100c <malloc>
 8000e50:	4603      	mov	r3, r0
 8000e52:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	494e      	ldr	r1, [pc, #312]	; (8000f90 <Write_File+0x168>)
 8000e58:	68b8      	ldr	r0, [r7, #8]
 8000e5a:	f010 fa45 	bl	80112e8 <siprintf>
		Send_Usart (buf);
 8000e5e:	68b8      	ldr	r0, [r7, #8]
 8000e60:	f7ff feb8 	bl	8000bd4 <Send_Usart>
	    free(buf);
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f010 f8d9 	bl	801101c <free>
	    return fresult;
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <Write_File+0x164>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	e087      	b.n	8000f80 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000e70:	2202      	movs	r2, #2
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4847      	ldr	r0, [pc, #284]	; (8000f94 <Write_File+0x16c>)
 8000e76:	f00e fb63 	bl	800f540 <f_open>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <Write_File+0x164>)
 8000e80:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <Write_File+0x164>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d015      	beq.n	8000eb6 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f010 f8be 	bl	801100c <malloc>
 8000e90:	4603      	mov	r3, r0
 8000e92:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e94:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <Write_File+0x164>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	493e      	ldr	r1, [pc, #248]	; (8000f98 <Write_File+0x170>)
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f010 fa22 	bl	80112e8 <siprintf>
	    	Send_Usart(buf);
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fe95 	bl	8000bd4 <Send_Usart>
	        free(buf);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f010 f8b6 	bl	801101c <free>
	        return fresult;
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <Write_File+0x164>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	e064      	b.n	8000f80 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000eb6:	2064      	movs	r0, #100	; 0x64
 8000eb8:	f010 f8a8 	bl	801100c <malloc>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4936      	ldr	r1, [pc, #216]	; (8000f9c <Write_File+0x174>)
 8000ec4:	69f8      	ldr	r0, [r7, #28]
 8000ec6:	f010 fa0f 	bl	80112e8 <siprintf>
	    	Send_Usart(buf);
 8000eca:	69f8      	ldr	r0, [r7, #28]
 8000ecc:	f7ff fe82 	bl	8000bd4 <Send_Usart>
	        free(buf);
 8000ed0:	69f8      	ldr	r0, [r7, #28]
 8000ed2:	f010 f8a3 	bl	801101c <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000ed6:	6838      	ldr	r0, [r7, #0]
 8000ed8:	f7ff f99c 	bl	8000214 <strlen>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <Write_File+0x178>)
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	482c      	ldr	r0, [pc, #176]	; (8000f94 <Write_File+0x16c>)
 8000ee4:	f00e fddd 	bl	800faa2 <f_write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <Write_File+0x164>)
 8000eee:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <Write_File+0x164>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d012      	beq.n	8000f1e <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f010 f887 	bl	801100c <malloc>
 8000efe:	4603      	mov	r3, r0
 8000f00:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <Write_File+0x164>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4926      	ldr	r1, [pc, #152]	; (8000fa4 <Write_File+0x17c>)
 8000f0c:	69b8      	ldr	r0, [r7, #24]
 8000f0e:	f010 f9eb 	bl	80112e8 <siprintf>
	    		Send_Usart(buf);
 8000f12:	69b8      	ldr	r0, [r7, #24]
 8000f14:	f7ff fe5e 	bl	8000bd4 <Send_Usart>
	    		free(buf);
 8000f18:	69b8      	ldr	r0, [r7, #24]
 8000f1a:	f010 f87f 	bl	801101c <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000f1e:	481d      	ldr	r0, [pc, #116]	; (8000f94 <Write_File+0x16c>)
 8000f20:	f00f f8a9 	bl	8010076 <f_close>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <Write_File+0x164>)
 8000f2a:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <Write_File+0x164>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d013      	beq.n	8000f5c <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000f34:	2064      	movs	r0, #100	; 0x64
 8000f36:	f010 f869 	bl	801100c <malloc>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <Write_File+0x164>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4918      	ldr	r1, [pc, #96]	; (8000fa8 <Write_File+0x180>)
 8000f48:	6938      	ldr	r0, [r7, #16]
 8000f4a:	f010 f9cd 	bl	80112e8 <siprintf>
	    		Send_Usart(buf);
 8000f4e:	6938      	ldr	r0, [r7, #16]
 8000f50:	f7ff fe40 	bl	8000bd4 <Send_Usart>
	    		free(buf);
 8000f54:	6938      	ldr	r0, [r7, #16]
 8000f56:	f010 f861 	bl	801101c <free>
 8000f5a:	e00f      	b.n	8000f7c <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f010 f855 	bl	801100c <malloc>
 8000f62:	4603      	mov	r3, r0
 8000f64:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4910      	ldr	r1, [pc, #64]	; (8000fac <Write_File+0x184>)
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f010 f9bc 	bl	80112e8 <siprintf>
	    		Send_Usart(buf);
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f7ff fe2f 	bl	8000bd4 <Send_Usart>
	    		free(buf);
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f010 f850 	bl	801101c <free>
	    	}
	    }
	    return fresult;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <Write_File+0x164>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000568 	.word	0x20000568
 8000f8c:	20000564 	.word	0x20000564
 8000f90:	08012460 	.word	0x08012460
 8000f94:	20000b68 	.word	0x20000b68
 8000f98:	08012480 	.word	0x08012480
 8000f9c:	080124a8 	.word	0x080124a8
 8000fa0:	20000560 	.word	0x20000560
 8000fa4:	080124d4 	.word	0x080124d4
 8000fa8:	08012508 	.word	0x08012508
 8000fac:	08012540 	.word	0x08012540

08000fb0 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000fb8:	4943      	ldr	r1, [pc, #268]	; (80010c8 <Create_File+0x118>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f00f f991 	bl	80102e2 <f_stat>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <Create_File+0x11c>)
 8000fc6:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <Create_File+0x11c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d112      	bne.n	8000ff6 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000fd0:	2064      	movs	r0, #100	; 0x64
 8000fd2:	f010 f81b 	bl	801100c <malloc>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	493c      	ldr	r1, [pc, #240]	; (80010d0 <Create_File+0x120>)
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f010 f982 	bl	80112e8 <siprintf>
		Send_Usart(buf);
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff fdf5 	bl	8000bd4 <Send_Usart>
		free(buf);
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f010 f816 	bl	801101c <free>
	    return fresult;
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <Create_File+0x11c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	e063      	b.n	80010be <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000ff6:	220b      	movs	r2, #11
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4836      	ldr	r0, [pc, #216]	; (80010d4 <Create_File+0x124>)
 8000ffc:	f00e faa0 	bl	800f540 <f_open>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <Create_File+0x11c>)
 8001006:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <Create_File+0x11c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d015      	beq.n	800103c <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f00f fffb 	bl	801100c <malloc>
 8001016:	4603      	mov	r3, r0
 8001018:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <Create_File+0x11c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	492d      	ldr	r1, [pc, #180]	; (80010d8 <Create_File+0x128>)
 8001024:	6938      	ldr	r0, [r7, #16]
 8001026:	f010 f95f 	bl	80112e8 <siprintf>
			Send_Usart(buf);
 800102a:	6938      	ldr	r0, [r7, #16]
 800102c:	f7ff fdd2 	bl	8000bd4 <Send_Usart>
			free(buf);
 8001030:	6938      	ldr	r0, [r7, #16]
 8001032:	f00f fff3 	bl	801101c <free>
		    return fresult;
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <Create_File+0x11c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	e040      	b.n	80010be <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800103c:	2064      	movs	r0, #100	; 0x64
 800103e:	f00f ffe5 	bl	801100c <malloc>
 8001042:	4603      	mov	r3, r0
 8001044:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4924      	ldr	r1, [pc, #144]	; (80010dc <Create_File+0x12c>)
 800104a:	69f8      	ldr	r0, [r7, #28]
 800104c:	f010 f94c 	bl	80112e8 <siprintf>
			Send_Usart(buf);
 8001050:	69f8      	ldr	r0, [r7, #28]
 8001052:	f7ff fdbf 	bl	8000bd4 <Send_Usart>
			free(buf);
 8001056:	69f8      	ldr	r0, [r7, #28]
 8001058:	f00f ffe0 	bl	801101c <free>
		}

		fresult = f_close(&USBHFile);
 800105c:	481d      	ldr	r0, [pc, #116]	; (80010d4 <Create_File+0x124>)
 800105e:	f00f f80a 	bl	8010076 <f_close>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <Create_File+0x11c>)
 8001068:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <Create_File+0x11c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d013      	beq.n	800109a <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8001072:	2064      	movs	r0, #100	; 0x64
 8001074:	f00f ffca 	bl	801100c <malloc>
 8001078:	4603      	mov	r3, r0
 800107a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <Create_File+0x11c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4916      	ldr	r1, [pc, #88]	; (80010e0 <Create_File+0x130>)
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f010 f92e 	bl	80112e8 <siprintf>
			Send_Usart(buf);
 800108c:	6978      	ldr	r0, [r7, #20]
 800108e:	f7ff fda1 	bl	8000bd4 <Send_Usart>
			free(buf);
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f00f ffc2 	bl	801101c <free>
 8001098:	e00f      	b.n	80010ba <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800109a:	2064      	movs	r0, #100	; 0x64
 800109c:	f00f ffb6 	bl	801100c <malloc>
 80010a0:	4603      	mov	r3, r0
 80010a2:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	490f      	ldr	r1, [pc, #60]	; (80010e4 <Create_File+0x134>)
 80010a8:	69b8      	ldr	r0, [r7, #24]
 80010aa:	f010 f91d 	bl	80112e8 <siprintf>
			Send_Usart(buf);
 80010ae:	69b8      	ldr	r0, [r7, #24]
 80010b0:	f7ff fd90 	bl	8000bd4 <Send_Usart>
			free(buf);
 80010b4:	69b8      	ldr	r0, [r7, #24]
 80010b6:	f00f ffb1 	bl	801101c <free>
		}
	}
    return fresult;
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <Create_File+0x11c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000568 	.word	0x20000568
 80010cc:	20000564 	.word	0x20000564
 80010d0:	08012634 	.word	0x08012634
 80010d4:	20000b68 	.word	0x20000b68
 80010d8:	0801266c 	.word	0x0801266c
 80010dc:	08012694 	.word	0x08012694
 80010e0:	080126d4 	.word	0x080126d4
 80010e4:	08012614 	.word	0x08012614

080010e8 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80010f2:	495e      	ldr	r1, [pc, #376]	; (800126c <Update_File+0x184>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f00f f8f4 	bl	80102e2 <f_stat>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b5c      	ldr	r3, [pc, #368]	; (8001270 <Update_File+0x188>)
 8001100:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001102:	4b5b      	ldr	r3, [pc, #364]	; (8001270 <Update_File+0x188>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d012      	beq.n	8001130 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f00f ff7e 	bl	801100c <malloc>
 8001110:	4603      	mov	r3, r0
 8001112:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4957      	ldr	r1, [pc, #348]	; (8001274 <Update_File+0x18c>)
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f010 f8e5 	bl	80112e8 <siprintf>
		Send_Usart (buf);
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff fd58 	bl	8000bd4 <Send_Usart>
		free(buf);
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f00f ff79 	bl	801101c <free>
	    return fresult;
 800112a:	4b51      	ldr	r3, [pc, #324]	; (8001270 <Update_File+0x188>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	e098      	b.n	8001262 <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8001130:	2232      	movs	r2, #50	; 0x32
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4850      	ldr	r0, [pc, #320]	; (8001278 <Update_File+0x190>)
 8001136:	f00e fa03 	bl	800f540 <f_open>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <Update_File+0x188>)
 8001140:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001142:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <Update_File+0x188>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d015      	beq.n	8001176 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800114a:	2064      	movs	r0, #100	; 0x64
 800114c:	f00f ff5e 	bl	801100c <malloc>
 8001150:	4603      	mov	r3, r0
 8001152:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <Update_File+0x188>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4947      	ldr	r1, [pc, #284]	; (800127c <Update_File+0x194>)
 800115e:	6938      	ldr	r0, [r7, #16]
 8001160:	f010 f8c2 	bl	80112e8 <siprintf>
	    	Send_Usart(buf);
 8001164:	6938      	ldr	r0, [r7, #16]
 8001166:	f7ff fd35 	bl	8000bd4 <Send_Usart>
	        free(buf);
 800116a:	6938      	ldr	r0, [r7, #16]
 800116c:	f00f ff56 	bl	801101c <free>
	        return fresult;
 8001170:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <Update_File+0x188>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	e075      	b.n	8001262 <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8001176:	2064      	movs	r0, #100	; 0x64
 8001178:	f00f ff48 	bl	801100c <malloc>
 800117c:	4603      	mov	r3, r0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	493f      	ldr	r1, [pc, #252]	; (8001280 <Update_File+0x198>)
 8001184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001186:	f010 f8af 	bl	80112e8 <siprintf>
    	Send_Usart(buf);
 800118a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800118c:	f7ff fd22 	bl	8000bd4 <Send_Usart>
        free(buf);
 8001190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001192:	f00f ff43 	bl	801101c <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f7ff f83c 	bl	8000214 <strlen>
 800119c:	4602      	mov	r2, r0
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <Update_File+0x19c>)
 80011a0:	6839      	ldr	r1, [r7, #0]
 80011a2:	4835      	ldr	r0, [pc, #212]	; (8001278 <Update_File+0x190>)
 80011a4:	f00e fc7d 	bl	800faa2 <f_write>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <Update_File+0x188>)
 80011ae:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <Update_File+0x188>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011b8:	2064      	movs	r0, #100	; 0x64
 80011ba:	f00f ff27 	bl	801100c <malloc>
 80011be:	4603      	mov	r3, r0
 80011c0:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <Update_File+0x188>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	492f      	ldr	r1, [pc, #188]	; (8001288 <Update_File+0x1a0>)
 80011cc:	69f8      	ldr	r0, [r7, #28]
 80011ce:	f010 f88b 	bl	80112e8 <siprintf>
	    	Send_Usart(buf);
 80011d2:	69f8      	ldr	r0, [r7, #28]
 80011d4:	f7ff fcfe 	bl	8000bd4 <Send_Usart>
	    	free(buf);
 80011d8:	69f8      	ldr	r0, [r7, #28]
 80011da:	f00f ff1f 	bl	801101c <free>
 80011de:	e00f      	b.n	8001200 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011e0:	2064      	movs	r0, #100	; 0x64
 80011e2:	f00f ff13 	bl	801100c <malloc>
 80011e6:	4603      	mov	r3, r0
 80011e8:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4927      	ldr	r1, [pc, #156]	; (800128c <Update_File+0x1a4>)
 80011ee:	6a38      	ldr	r0, [r7, #32]
 80011f0:	f010 f87a 	bl	80112e8 <siprintf>
	    	Send_Usart(buf);
 80011f4:	6a38      	ldr	r0, [r7, #32]
 80011f6:	f7ff fced 	bl	8000bd4 <Send_Usart>
	    	free(buf);
 80011fa:	6a38      	ldr	r0, [r7, #32]
 80011fc:	f00f ff0e 	bl	801101c <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8001200:	481d      	ldr	r0, [pc, #116]	; (8001278 <Update_File+0x190>)
 8001202:	f00e ff38 	bl	8010076 <f_close>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <Update_File+0x188>)
 800120c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <Update_File+0x188>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d013      	beq.n	800123e <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f00f fef8 	bl	801100c <malloc>
 800121c:	4603      	mov	r3, r0
 800121e:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <Update_File+0x188>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4919      	ldr	r1, [pc, #100]	; (8001290 <Update_File+0x1a8>)
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f010 f85c 	bl	80112e8 <siprintf>
	    	Send_Usart(buf);
 8001230:	6978      	ldr	r0, [r7, #20]
 8001232:	f7ff fccf 	bl	8000bd4 <Send_Usart>
	    	free(buf);
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f00f fef0 	bl	801101c <free>
 800123c:	e00f      	b.n	800125e <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800123e:	2064      	movs	r0, #100	; 0x64
 8001240:	f00f fee4 	bl	801100c <malloc>
 8001244:	4603      	mov	r3, r0
 8001246:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4912      	ldr	r1, [pc, #72]	; (8001294 <Update_File+0x1ac>)
 800124c:	69b8      	ldr	r0, [r7, #24]
 800124e:	f010 f84b 	bl	80112e8 <siprintf>
	    	Send_Usart(buf);
 8001252:	69b8      	ldr	r0, [r7, #24]
 8001254:	f7ff fcbe 	bl	8000bd4 <Send_Usart>
	    	free(buf);
 8001258:	69b8      	ldr	r0, [r7, #24]
 800125a:	f00f fedf 	bl	801101c <free>
	     }
	}
    return fresult;
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <Update_File+0x188>)
 8001260:	781b      	ldrb	r3, [r3, #0]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000568 	.word	0x20000568
 8001270:	20000564 	.word	0x20000564
 8001274:	08012460 	.word	0x08012460
 8001278:	20000b68 	.word	0x20000b68
 800127c:	08012480 	.word	0x08012480
 8001280:	080126f8 	.word	0x080126f8
 8001284:	20000560 	.word	0x20000560
 8001288:	08012728 	.word	0x08012728
 800128c:	08012750 	.word	0x08012750
 8001290:	080125ec 	.word	0x080125ec
 8001294:	08012614 	.word	0x08012614

08001298 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f00f f95e 	bl	8010562 <f_mkdir>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <Create_Dir+0x74>)
 80012ac:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <Create_Dir+0x74>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d110      	bne.n	80012d8 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80012b6:	2064      	movs	r0, #100	; 0x64
 80012b8:	f00f fea8 	bl	801100c <malloc>
 80012bc:	4603      	mov	r3, r0
 80012be:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4913      	ldr	r1, [pc, #76]	; (8001310 <Create_Dir+0x78>)
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f010 f80f 	bl	80112e8 <siprintf>
    	Send_Usart (buf);
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f7ff fc82 	bl	8000bd4 <Send_Usart>
    	free(buf);
 80012d0:	68b8      	ldr	r0, [r7, #8]
 80012d2:	f00f fea3 	bl	801101c <free>
 80012d6:	e012      	b.n	80012fe <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80012d8:	2064      	movs	r0, #100	; 0x64
 80012da:	f00f fe97 	bl	801100c <malloc>
 80012de:	4603      	mov	r3, r0
 80012e0:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <Create_Dir+0x74>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	490a      	ldr	r1, [pc, #40]	; (8001314 <Create_Dir+0x7c>)
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f00f fffb 	bl	80112e8 <siprintf>
    	Send_Usart(buf);
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff fc6e 	bl	8000bd4 <Send_Usart>
    	free(buf);
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f00f fe8f 	bl	801101c <free>
    }
    return fresult;
 80012fe:	4b03      	ldr	r3, [pc, #12]	; (800130c <Create_Dir+0x74>)
 8001300:	781b      	ldrb	r3, [r3, #0]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000564 	.word	0x20000564
 8001310:	080127b4 	.word	0x080127b4
 8001314:	080127dc 	.word	0x080127dc

08001318 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800131e:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <Check_USB_Details+0xc8>)
 8001320:	4930      	ldr	r1, [pc, #192]	; (80013e4 <Check_USB_Details+0xcc>)
 8001322:	4831      	ldr	r0, [pc, #196]	; (80013e8 <Check_USB_Details+0xd0>)
 8001324:	f00f f816 	bl	8010354 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <Check_USB_Details+0xc8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	3b02      	subs	r3, #2
 8001330:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <Check_USB_Details+0xc8>)
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	8952      	ldrh	r2, [r2, #10]
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fa34 	bl	80007a8 <__aeabi_ui2d>
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <Check_USB_Details+0xd4>)
 8001346:	f7fe ffc3 	bl	80002d0 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff faa3 	bl	800089c <__aeabi_d2uiz>
 8001356:	4603      	mov	r3, r0
 8001358:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <Check_USB_Details+0xd8>)
 800135a:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 800135c:	201e      	movs	r0, #30
 800135e:	f00f fe55 	bl	801100c <malloc>
 8001362:	4603      	mov	r3, r0
 8001364:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <Check_USB_Details+0xd8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4921      	ldr	r1, [pc, #132]	; (80013f4 <Check_USB_Details+0xdc>)
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f00f ffba 	bl	80112e8 <siprintf>
    Send_Usart(buf);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fc2d 	bl	8000bd4 <Send_Usart>
    free(buf);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f00f fe4e 	bl	801101c <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <Check_USB_Details+0xc8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	895b      	ldrh	r3, [r3, #10]
 8001386:	461a      	mov	r2, r3
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <Check_USB_Details+0xcc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fb03 f302 	mul.w	r3, r3, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fa09 	bl	80007a8 <__aeabi_ui2d>
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <Check_USB_Details+0xd4>)
 800139c:	f7fe ff98 	bl	80002d0 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fa78 	bl	800089c <__aeabi_d2uiz>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <Check_USB_Details+0xe0>)
 80013b0:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80013b2:	201e      	movs	r0, #30
 80013b4:	f00f fe2a 	bl	801100c <malloc>
 80013b8:	4603      	mov	r3, r0
 80013ba:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <Check_USB_Details+0xe0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <Check_USB_Details+0xe4>)
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f00f ff8f 	bl	80112e8 <siprintf>
    Send_Usart(buf);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fc02 	bl	8000bd4 <Send_Usart>
    free(buf);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f00f fe23 	bl	801101c <free>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000558 	.word	0x20000558
 80013e4:	20000550 	.word	0x20000550
 80013e8:	08012808 	.word	0x08012808
 80013ec:	3fe00000 	.word	0x3fe00000
 80013f0:	20000688 	.word	0x20000688
 80013f4:	0801280c 	.word	0x0801280c
 80013f8:	2000055c 	.word	0x2000055c
 80013fc:	08012824 	.word	0x08012824

08001400 <blinky>:
/* USER CODE BEGIN 0 */
// ************************************************* START FUNCTIONS HERE ***************************************

// Blinky!!
void blinky(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	e012      	b.n	8001432 <blinky+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800140c:	2110      	movs	r1, #16
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <blinky+0x44>)
 8001410:	f002 fc9a 	bl	8003d48 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001418:	f000 fe08 	bl	800202c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800141c:	2110      	movs	r1, #16
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <blinky+0x44>)
 8001420:	f002 fc92 	bl	8003d48 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001428:	f000 fe00 	bl	800202c <HAL_Delay>
	for(int i = 0; i < 2; i ++)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3301      	adds	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b01      	cmp	r3, #1
 8001436:	dde9      	ble.n	800140c <blinky+0xc>
	}
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	48000400 	.word	0x48000400

08001448 <ADC_Select_EH>:

// ADC Channel Select EH
void ADC_Select_EH(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]

	sConfig.Channel = ADC_CHANNEL_7;
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <ADC_Select_EH+0x4c>)
 8001460:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800146a:	237f      	movs	r3, #127	; 0x7f
 800146c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800146e:	2304      	movs	r3, #4
 8001470:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <ADC_Select_EH+0x50>)
 800147c:	f001 fb64 	bl	8002b48 <HAL_ADC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <ADC_Select_EH+0x42>
	{
	Error_Handler();
 8001486:	f000 fabd 	bl	8001a04 <Error_Handler>
	}
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	1d500080 	.word	0x1d500080
 8001498:	2000068c 	.word	0x2000068c

0800149c <ADC_Select_REF>:

// ADC Channel Select REF
void ADC_Select_REF(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014a2:	463b      	mov	r3, r7
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
 80014b0:	615a      	str	r2, [r3, #20]

	sConfig.Channel = ADC_CHANNEL_6;
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <ADC_Select_REF+0x4c>)
 80014b4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014be:	237f      	movs	r3, #127	; 0x7f
 80014c0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014c2:	2304      	movs	r3, #4
 80014c4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <ADC_Select_REF+0x50>)
 80014d0:	f001 fb3a 	bl	8002b48 <HAL_ADC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <ADC_Select_REF+0x42>
	{
	Error_Handler();
 80014da:	f000 fa93 	bl	8001a04 <Error_Handler>
	}
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	19200040 	.word	0x19200040
 80014ec:	2000068c 	.word	0x2000068c

080014f0 <ADC_Select_TEMP>:

// ADC Channel Select TEMP
void ADC_Select_TEMP(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]

	sConfig.Channel = ADC_CHANNEL_5;
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <ADC_Select_TEMP+0x4c>)
 8001508:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800150a:	2301      	movs	r3, #1
 800150c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001512:	237f      	movs	r3, #127	; 0x7f
 8001514:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001516:	2304      	movs	r3, #4
 8001518:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <ADC_Select_TEMP+0x50>)
 8001524:	f001 fb10 	bl	8002b48 <HAL_ADC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <ADC_Select_TEMP+0x42>
	{
	Error_Handler();
 800152e:	f000 fa69 	bl	8001a04 <Error_Handler>
	}
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	14f00020 	.word	0x14f00020
 8001540:	2000068c 	.word	0x2000068c

08001544 <_write>:

// UART Write
void _write(int file, char *ptr, int len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	b29a      	uxth	r2, r3
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	4803      	ldr	r0, [pc, #12]	; (8001568 <_write+0x24>)
 800155c:	f005 fdae 	bl	80070bc <HAL_UART_Transmit>
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200006f4 	.word	0x200006f4

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001572:	f000 fce6 	bl	8001f42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001576:	f000 f86f 	bl	8001658 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800157a:	f000 f8c6 	bl	800170a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157e:	f000 f9b7 	bl	80018f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001582:	f000 f8f1 	bl	8001768 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001586:	f000 f967 	bl	8001858 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 800158a:	f000 fbe9 	bl	8001d60 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800158e:	f007 fa6f 	bl	8008a70 <MX_FATFS_Init>
  // ************************************************* START BEFORE WHILE CODE HERE ***************************************

  // Bootup Blinkys
  // These are put in place to allow programming before the microcontroller enters its sleep loop, currently its set to wait 5 seconds before entering sleep mode

  printf("System Starting!\r\n");
 8001592:	482b      	ldr	r0, [pc, #172]	; (8001640 <main+0xd4>)
 8001594:	f00f fe90 	bl	80112b8 <puts>

  blinky();
 8001598:	f7ff ff32 	bl	8001400 <blinky>
  // HAL_Delay(5000);
  //Assign ADC Variable
  uint16_t ADC_READING = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	80fb      	strh	r3, [r7, #6]

  // Enable 1V0 Regulator
  // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);

  // Enable 5V0 Regulator
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a6:	4827      	ldr	r0, [pc, #156]	; (8001644 <main+0xd8>)
 80015a8:	f002 fbb6 	bl	8003d18 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80015ac:	f000 fc2a 	bl	8001e04 <MX_USB_HOST_Process>

    // ************************************************* START WHILE CODE HERE ***************************************

    // READ EH
    // Switch ADC channel to EH
    ADC_Select_EH();
 80015b0:	f7ff ff4a 	bl	8001448 <ADC_Select_EH>
    //Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <main+0xdc>)
 80015b6:	f001 f8f3 	bl	80027a0 <HAL_ADC_Start>
	// Pole to see if converstion is finished
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015ba:	f04f 31ff 	mov.w	r1, #4294967295
 80015be:	4822      	ldr	r0, [pc, #136]	; (8001648 <main+0xdc>)
 80015c0:	f001 f9dc 	bl	800297c <HAL_ADC_PollForConversion>
    // Store ADC Value in ADC_Reading
    ADC_READING = HAL_ADC_GetValue(&hadc1);
 80015c4:	4820      	ldr	r0, [pc, #128]	; (8001648 <main+0xdc>)
 80015c6:	f001 fab1 	bl	8002b2c <HAL_ADC_GetValue>
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Stop(&hadc1);
 80015ce:	481e      	ldr	r0, [pc, #120]	; (8001648 <main+0xdc>)
 80015d0:	f001 f9a0 	bl	8002914 <HAL_ADC_Stop>

    // Print ADC value through UART
	printf("EH: %d\r\n", ADC_READING);
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4619      	mov	r1, r3
 80015d8:	481c      	ldr	r0, [pc, #112]	; (800164c <main+0xe0>)
 80015da:	f00f fde7 	bl	80111ac <iprintf>

	// READ REF
	// Switch ADC channel to REF
	ADC_Select_REF();
 80015de:	f7ff ff5d 	bl	800149c <ADC_Select_REF>
	//Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80015e2:	4819      	ldr	r0, [pc, #100]	; (8001648 <main+0xdc>)
 80015e4:	f001 f8dc 	bl	80027a0 <HAL_ADC_Start>
	// Pole to see if converstion is finished
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <main+0xdc>)
 80015ee:	f001 f9c5 	bl	800297c <HAL_ADC_PollForConversion>
	// Store ADC Value in ADC_Reading
	ADC_READING = HAL_ADC_GetValue(&hadc1);
 80015f2:	4815      	ldr	r0, [pc, #84]	; (8001648 <main+0xdc>)
 80015f4:	f001 fa9a 	bl	8002b2c <HAL_ADC_GetValue>
 80015f8:	4603      	mov	r3, r0
 80015fa:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 80015fc:	4812      	ldr	r0, [pc, #72]	; (8001648 <main+0xdc>)
 80015fe:	f001 f989 	bl	8002914 <HAL_ADC_Stop>

	// Print ADC value through UART
	printf("REF: %d\r\n", ADC_READING);
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	4619      	mov	r1, r3
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <main+0xe4>)
 8001608:	f00f fdd0 	bl	80111ac <iprintf>

	// READ TEMP
	// Switch ADC channel to TEMP
	ADC_Select_TEMP();
 800160c:	f7ff ff70 	bl	80014f0 <ADC_Select_TEMP>
	//Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <main+0xdc>)
 8001612:	f001 f8c5 	bl	80027a0 <HAL_ADC_Start>
	// Pole to see if converstion is finished
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001616:	f04f 31ff 	mov.w	r1, #4294967295
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <main+0xdc>)
 800161c:	f001 f9ae 	bl	800297c <HAL_ADC_PollForConversion>
	// Store ADC Value in ADC_Reading
	ADC_READING = HAL_ADC_GetValue(&hadc1);
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <main+0xdc>)
 8001622:	f001 fa83 	bl	8002b2c <HAL_ADC_GetValue>
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <main+0xdc>)
 800162c:	f001 f972 	bl	8002914 <HAL_ADC_Stop>

	// Print ADC value through UART
	printf("TEMP: %d\r\n", ADC_READING);
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <main+0xe8>)
 8001636:	f00f fdb9 	bl	80111ac <iprintf>



    // Enter sleep mode using RTC wakeup functions
    // enterSleepMode(3); // Parameter depicts how long the sleep cycle is (currently its set to 3 seconds)
    blinky();
 800163a:	f7ff fee1 	bl	8001400 <blinky>
    MX_USB_HOST_Process();
 800163e:	e7b5      	b.n	80015ac <main+0x40>
 8001640:	0801283c 	.word	0x0801283c
 8001644:	48000400 	.word	0x48000400
 8001648:	2000068c 	.word	0x2000068c
 800164c:	08012850 	.word	0x08012850
 8001650:	0801285c 	.word	0x0801285c
 8001654:	08012868 	.word	0x08012868

08001658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b098      	sub	sp, #96	; 0x60
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	2248      	movs	r2, #72	; 0x48
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f00f fcee 	bl	8011048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800167a:	2000      	movs	r0, #0
 800167c:	f003 ff48 	bl	8005510 <HAL_PWREx_ControlVoltageScaling>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001686:	f000 f9bd 	bl	8001a04 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800168a:	2310      	movs	r3, #16
 800168c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800168e:	2301      	movs	r3, #1
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001696:	2360      	movs	r3, #96	; 0x60
 8001698:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2302      	movs	r3, #2
 800169c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800169e:	2301      	movs	r3, #1
 80016a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80016a6:	233c      	movs	r3, #60	; 0x3c
 80016a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 ffdc 	bl	8005678 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016c6:	f000 f99d 	bl	8001a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2303      	movs	r3, #3
 80016d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2105      	movs	r1, #5
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 fc50 	bl	8005f88 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016ee:	f000 f989 	bl	8001a04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80016f8:	2000      	movs	r0, #0
 80016fa:	f004 fd71 	bl	80061e0 <HAL_RCC_MCOConfig>
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016fe:	f005 fa95 	bl	8006c2c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001702:	bf00      	nop
 8001704:	3760      	adds	r7, #96	; 0x60
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b0a6      	sub	sp, #152	; 0x98
 800170e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2298      	movs	r2, #152	; 0x98
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f00f fc96 	bl	8011048 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800171c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001720:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001722:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001726:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800172a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800172e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001730:	2301      	movs	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001738:	2318      	movs	r3, #24
 800173a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800173c:	2302      	movs	r3, #2
 800173e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001740:	2302      	movs	r3, #2
 8001742:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001748:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800174c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	4618      	mov	r0, r3
 8001752:	f004 feff 	bl	8006554 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800175c:	f000 f952 	bl	8001a04 <Error_Handler>
  }
}
 8001760:	bf00      	nop
 8001762:	3798      	adds	r7, #152	; 0x98
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <MX_ADC1_Init+0xe4>)
 800178c:	4a30      	ldr	r2, [pc, #192]	; (8001850 <MX_ADC1_Init+0xe8>)
 800178e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <MX_ADC1_Init+0xe4>)
 8001792:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001798:	4b2c      	ldr	r3, [pc, #176]	; (800184c <MX_ADC1_Init+0xe4>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <MX_ADC1_Init+0xe4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <MX_ADC1_Init+0xe4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <MX_ADC1_Init+0xe4>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <MX_ADC1_Init+0xe4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <MX_ADC1_Init+0xe4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <MX_ADC1_Init+0xe4>)
 80017be:	2201      	movs	r2, #1
 80017c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <MX_ADC1_Init+0xe4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <MX_ADC1_Init+0xe4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_ADC1_Init+0xe4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_ADC1_Init+0xe4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_ADC1_Init+0xe4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_ADC1_Init+0xe4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ec:	4817      	ldr	r0, [pc, #92]	; (800184c <MX_ADC1_Init+0xe4>)
 80017ee:	f000 fe85 	bl	80024fc <HAL_ADC_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80017f8:	f000 f904 	bl	8001a04 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	4811      	ldr	r0, [pc, #68]	; (800184c <MX_ADC1_Init+0xe4>)
 8001808:	f001 ff3e 	bl	8003688 <HAL_ADCEx_MultiModeConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001812:	f000 f8f7 	bl	8001a04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_ADC1_Init+0xec>)
 8001818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800181a:	2306      	movs	r3, #6
 800181c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001822:	237f      	movs	r3, #127	; 0x7f
 8001824:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001826:	2304      	movs	r3, #4
 8001828:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <MX_ADC1_Init+0xe4>)
 8001834:	f001 f988 	bl	8002b48 <HAL_ADC_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800183e:	f000 f8e1 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000068c 	.word	0x2000068c
 8001850:	50040000 	.word	0x50040000
 8001854:	14f00020 	.word	0x14f00020

08001858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 800185e:	4a23      	ldr	r2, [pc, #140]	; (80018ec <MX_USART1_UART_Init+0x94>)
 8001860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 8001864:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 80018a2:	f005 fbbb 	bl	800701c <HAL_UART_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018ac:	f000 f8aa 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b0:	2100      	movs	r1, #0
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 80018b4:	f006 f94e 	bl	8007b54 <HAL_UARTEx_SetTxFifoThreshold>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018be:	f000 f8a1 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 80018c6:	f006 f983 	bl	8007bd0 <HAL_UARTEx_SetRxFifoThreshold>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018d0:	f000 f898 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_USART1_UART_Init+0x90>)
 80018d6:	f006 f904 	bl	8007ae2 <HAL_UARTEx_DisableFifoMode>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018e0:	f000 f890 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200006f4 	.word	0x200006f4
 80018ec:	40013800 	.word	0x40013800

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <MX_GPIO_Init+0x108>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <MX_GPIO_Init+0x108>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <MX_GPIO_Init+0x108>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001954:	4829      	ldr	r0, [pc, #164]	; (80019fc <MX_GPIO_Init+0x10c>)
 8001956:	f002 f9df 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001962:	f002 f9d9 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Charge_Enable_Pin|Enable_1V_Pin|Reset_5V_Pin
 8001966:	2200      	movs	r2, #0
 8001968:	f247 4111 	movw	r1, #29713	; 0x7411
 800196c:	4824      	ldr	r0, [pc, #144]	; (8001a00 <MX_GPIO_Init+0x110>)
 800196e:	f002 f9d3 	bl	8003d18 <HAL_GPIO_WritePin>
                          |_5V_SHDN_Pin|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001972:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	481c      	ldr	r0, [pc, #112]	; (80019fc <MX_GPIO_Init+0x10c>)
 800198c:	f002 f832 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f002 f823 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Charge_Enable_Pin Enable_1V_Pin Reset_5V_Pin
                           _5V_SHDN_Pin PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Charge_Enable_Pin|Enable_1V_Pin|Reset_5V_Pin
 80019ae:	f247 4311 	movw	r3, #29713	; 0x7411
 80019b2:	60fb      	str	r3, [r7, #12]
                          |_5V_SHDN_Pin|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	4619      	mov	r1, r3
 80019c6:	480e      	ldr	r0, [pc, #56]	; (8001a00 <MX_GPIO_Init+0x110>)
 80019c8:	f002 f814 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f002 f802 	bl	80039f4 <HAL_GPIO_Init>

}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000800 	.word	0x48000800
 8001a00:	48000400 	.word	0x48000400

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <Error_Handler+0x8>
	...

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_MspInit+0x44>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_MspInit+0x44>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6613      	str	r3, [r2, #96]	; 0x60
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_MspInit+0x44>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_MspInit+0x44>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_MspInit+0x44>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_MspInit+0x44>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <HAL_ADC_MspInit+0xa4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d13c      	bne.n	8001af4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001a80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_ADC_MspInit+0xa8>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Temp_Sense_1_Pin|Eh_Sense_1_Pin|Temp_Sense_2_Pin
 8001ac2:	237f      	movs	r3, #127	; 0x7f
 8001ac4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|Temp_Sense_3_Pin|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ac6:	230b      	movs	r3, #11
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad8:	f001 ff8c 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001adc:	2302      	movs	r3, #2
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ae0:	230b      	movs	r3, #11
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <HAL_ADC_MspInit+0xac>)
 8001af0:	f001 ff80 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	50040000 	.word	0x50040000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	48000400 	.word	0x48000400

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0b0      	sub	sp, #192	; 0xc0
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2298      	movs	r2, #152	; 0x98
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00f fa8d 	bl	8011048 <memset>
  if(huart->Instance==USART1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <HAL_UART_MspInit+0xb4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d13c      	bne.n	8001bb2 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fd05 	bl	8006554 <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b50:	f7ff ff58 	bl	8001a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_UART_MspInit+0xb8>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_UART_MspInit+0xb8>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_UART_MspInit+0xb8>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_UART_MspInit+0xb8>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <HAL_UART_MspInit+0xb8>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_UART_MspInit+0xb8>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b84:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bae:	f001 ff21 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	37c0      	adds	r7, #192	; 0xc0
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f000 f9ec 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <OTG_FS_IRQHandler+0x10>)
 8001c1e:	f002 fb13 	bl	8004248 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20002c00 	.word	0x20002c00

08001c2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e00a      	b.n	8001c54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c3e:	f3af 8000 	nop.w
 8001c42:	4601      	mov	r1, r0
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf0      	blt.n	8001c3e <_read+0x12>
	}

return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_isatty>:

int _isatty(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f00f f95a 	bl	8010fb8 <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20050000 	.word	0x20050000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	200000ac 	.word	0x200000ac
 8001d38:	20002f18 	.word	0x20002f18

08001d3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001d64:	2110      	movs	r1, #16
 8001d66:	4823      	ldr	r0, [pc, #140]	; (8001df4 <MX_USB_HOST_Init+0x94>)
 8001d68:	f001 ffee 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001d6c:	2064      	movs	r0, #100	; 0x64
 8001d6e:	f000 f95d 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001d72:	2110      	movs	r1, #16
 8001d74:	481f      	ldr	r0, [pc, #124]	; (8001df4 <MX_USB_HOST_Init+0x94>)
 8001d76:	f001 ffe7 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001d7a:	2064      	movs	r0, #100	; 0x64
 8001d7c:	f000 f956 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001d80:	2110      	movs	r1, #16
 8001d82:	481c      	ldr	r0, [pc, #112]	; (8001df4 <MX_USB_HOST_Init+0x94>)
 8001d84:	f001 ffe0 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001d88:	2064      	movs	r0, #100	; 0x64
 8001d8a:	f000 f94f 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001d8e:	2110      	movs	r1, #16
 8001d90:	4818      	ldr	r0, [pc, #96]	; (8001df4 <MX_USB_HOST_Init+0x94>)
 8001d92:	f001 ffd9 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001d96:	2064      	movs	r0, #100	; 0x64
 8001d98:	f000 f948 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001d9c:	2110      	movs	r1, #16
 8001d9e:	4815      	ldr	r0, [pc, #84]	; (8001df4 <MX_USB_HOST_Init+0x94>)
 8001da0:	f001 ffd2 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001da4:	2064      	movs	r0, #100	; 0x64
 8001da6:	f000 f941 	bl	800202c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001daa:	2110      	movs	r1, #16
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <MX_USB_HOST_Init+0x94>)
 8001dae:	f001 ffcb 	bl	8003d48 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001db2:	2064      	movs	r0, #100	; 0x64
 8001db4:	f000 f93a 	bl	800202c <HAL_Delay>

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8001db8:	2201      	movs	r2, #1
 8001dba:	490f      	ldr	r1, [pc, #60]	; (8001df8 <MX_USB_HOST_Init+0x98>)
 8001dbc:	480f      	ldr	r0, [pc, #60]	; (8001dfc <MX_USB_HOST_Init+0x9c>)
 8001dbe:	f008 fb0d 	bl	800a3dc <USBH_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_USB_HOST_Init+0x6c>
  {
    Error_Handler();
 8001dc8:	f7ff fe1c 	bl	8001a04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <MX_USB_HOST_Init+0xa0>)
 8001dce:	480b      	ldr	r0, [pc, #44]	; (8001dfc <MX_USB_HOST_Init+0x9c>)
 8001dd0:	f008 fb92 	bl	800a4f8 <USBH_RegisterClass>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_USB_HOST_Init+0x7e>
  {
    Error_Handler();
 8001dda:	f7ff fe13 	bl	8001a04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8001dde:	4807      	ldr	r0, [pc, #28]	; (8001dfc <MX_USB_HOST_Init+0x9c>)
 8001de0:	f008 fc16 	bl	800a610 <USBH_Start>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USB_HOST_Init+0x8e>
  {
    Error_Handler();
 8001dea:	f7ff fe0b 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	48000400 	.word	0x48000400
 8001df8:	08001e19 	.word	0x08001e19
 8001dfc:	20000784 	.word	0x20000784
 8001e00:	2000000c 	.word	0x2000000c

08001e04 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <MX_USB_HOST_Process+0x10>)
 8001e0a:	f008 fc11 	bl	800a630 <USBH_Process>
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000784 	.word	0x20000784

08001e18 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d844      	bhi.n	8001eb6 <USBH_UserProcess+0x9e>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <USBH_UserProcess+0x1c>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001eb7 	.word	0x08001eb7
 8001e38:	08001e55 	.word	0x08001e55
 8001e3c:	08001eb7 	.word	0x08001eb7
 8001e40:	08001eaf 	.word	0x08001eaf
 8001e44:	08001e49 	.word	0x08001e49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <USBH_UserProcess+0xa8>)
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 8001e4e:	f7fe ff25 	bl	8000c9c <Unmount_USB>
  break;
 8001e52:	e031      	b.n	8001eb8 <USBH_UserProcess+0xa0>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <USBH_UserProcess+0xa8>)
 8001e56:	2202      	movs	r2, #2
 8001e58:	701a      	strb	r2, [r3, #0]
  Mount_USB();
 8001e5a:	f7fe fed1 	bl	8000c00 <Mount_USB>

	Check_USB_Details();   // check space details
 8001e5e:	f7ff fa5b 	bl	8001318 <Check_USB_Details>

	Scan_USB("/");   // scan for files and directories
 8001e62:	4818      	ldr	r0, [pc, #96]	; (8001ec4 <USBH_UserProcess+0xac>)
 8001e64:	f7fe ff3a 	bl	8000cdc <Scan_USB>

	Create_File("/ROOTFILE.txt");
 8001e68:	4817      	ldr	r0, [pc, #92]	; (8001ec8 <USBH_UserProcess+0xb0>)
 8001e6a:	f7ff f8a1 	bl	8000fb0 <Create_File>
	Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 8001e6e:	4917      	ldr	r1, [pc, #92]	; (8001ecc <USBH_UserProcess+0xb4>)
 8001e70:	4815      	ldr	r0, [pc, #84]	; (8001ec8 <USBH_UserProcess+0xb0>)
 8001e72:	f7fe ffd9 	bl	8000e28 <Write_File>

	Create_Dir("/DIR1");
 8001e76:	4816      	ldr	r0, [pc, #88]	; (8001ed0 <USBH_UserProcess+0xb8>)
 8001e78:	f7ff fa0e 	bl	8001298 <Create_Dir>
	Create_File("/DIR1/DIR1FILE.txt");
 8001e7c:	4815      	ldr	r0, [pc, #84]	; (8001ed4 <USBH_UserProcess+0xbc>)
 8001e7e:	f7ff f897 	bl	8000fb0 <Create_File>
	Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 8001e82:	4915      	ldr	r1, [pc, #84]	; (8001ed8 <USBH_UserProcess+0xc0>)
 8001e84:	4813      	ldr	r0, [pc, #76]	; (8001ed4 <USBH_UserProcess+0xbc>)
 8001e86:	f7fe ffcf 	bl	8000e28 <Write_File>

	Create_Dir("/DIR2");
 8001e8a:	4814      	ldr	r0, [pc, #80]	; (8001edc <USBH_UserProcess+0xc4>)
 8001e8c:	f7ff fa04 	bl	8001298 <Create_Dir>
	Create_Dir("/DIR2/SUBDIR1");
 8001e90:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <USBH_UserProcess+0xc8>)
 8001e92:	f7ff fa01 	bl	8001298 <Create_Dir>
	Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 8001e96:	4813      	ldr	r0, [pc, #76]	; (8001ee4 <USBH_UserProcess+0xcc>)
 8001e98:	f7ff f88a 	bl	8000fb0 <Create_File>
	Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 8001e9c:	4912      	ldr	r1, [pc, #72]	; (8001ee8 <USBH_UserProcess+0xd0>)
 8001e9e:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <USBH_UserProcess+0xcc>)
 8001ea0:	f7fe ffc2 	bl	8000e28 <Write_File>

	Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 8001ea4:	4911      	ldr	r1, [pc, #68]	; (8001eec <USBH_UserProcess+0xd4>)
 8001ea6:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <USBH_UserProcess+0xb0>)
 8001ea8:	f7ff f91e 	bl	80010e8 <Update_File>
  break;
 8001eac:	e004      	b.n	8001eb8 <USBH_UserProcess+0xa0>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <USBH_UserProcess+0xa8>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
  break;
 8001eb4:	e000      	b.n	8001eb8 <USBH_UserProcess+0xa0>

  default:
  break;
 8001eb6:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200000b0 	.word	0x200000b0
 8001ec4:	08012874 	.word	0x08012874
 8001ec8:	08012878 	.word	0x08012878
 8001ecc:	08012888 	.word	0x08012888
 8001ed0:	080128ac 	.word	0x080128ac
 8001ed4:	080128b4 	.word	0x080128b4
 8001ed8:	080128c8 	.word	0x080128c8
 8001edc:	080128ec 	.word	0x080128ec
 8001ee0:	080128f4 	.word	0x080128f4
 8001ee4:	08012904 	.word	0x08012904
 8001ee8:	08012920 	.word	0x08012920
 8001eec:	08012984 	.word	0x08012984

08001ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef4:	f7ff ff22 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001efa:	490d      	ldr	r1, [pc, #52]	; (8001f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <LoopForever+0xe>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f10:	4c0a      	ldr	r4, [pc, #40]	; (8001f3c <LoopForever+0x16>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f00f f851 	bl	8010fc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f22:	f7ff fb23 	bl	800156c <main>

08001f26 <LoopForever>:

LoopForever:
    b LoopForever
 8001f26:	e7fe      	b.n	8001f26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f28:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001f34:	08012f80 	.word	0x08012f80
  ldr r2, =_sbss
 8001f38:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001f3c:	20002f14 	.word	0x20002f14

08001f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC1_2_IRQHandler>

08001f42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f001 fd0f 	bl	8003970 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f80e 	bl	8001f74 <HAL_InitTick>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	71fb      	strb	r3, [r7, #7]
 8001f62:	e001      	b.n	8001f68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f64:	f7ff fd54 	bl	8001a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f68:	79fb      	ldrb	r3, [r7, #7]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_InitTick+0x6c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d023      	beq.n	8001fd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_InitTick+0x70>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_InitTick+0x6c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fd1b 	bl	80039da <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d809      	bhi.n	8001fc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f001 fce5 	bl	8003986 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_InitTick+0x74>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e007      	b.n	8001fd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e004      	b.n	8001fd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	e001      	b.n	8001fd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008
 8002010:	20000b5c 	.word	0x20000b5c

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000b5c 	.word	0x20000b5c

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff ffee 	bl	8002014 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d005      	beq.n	8002052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_Delay+0x44>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002052:	bf00      	nop
 8002054:	f7ff ffde 	bl	8002014 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d8f7      	bhi.n	8002054 <HAL_Delay+0x28>
  {
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000008 	.word	0x20000008

08002074 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	609a      	str	r2, [r3, #8]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3360      	adds	r3, #96	; 0x60
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <LL_ADC_SetOffset+0x44>)
 80020fe:	4013      	ands	r3, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	4313      	orrs	r3, r2
 800210c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	03fff000 	.word	0x03fff000

08002124 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3360      	adds	r3, #96	; 0x60
 8002132:	461a      	mov	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3360      	adds	r3, #96	; 0x60
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	615a      	str	r2, [r3, #20]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b087      	sub	sp, #28
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3330      	adds	r3, #48	; 0x30
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	4413      	add	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	211f      	movs	r1, #31
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	f003 011f 	and.w	r1, r3, #31
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	431a      	orrs	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800222a:	b480      	push	{r7}
 800222c:	b087      	sub	sp, #28
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3314      	adds	r3, #20
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	0e5b      	lsrs	r3, r3, #25
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	4413      	add	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	0d1b      	lsrs	r3, r3, #20
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2107      	movs	r1, #7
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	0d1b      	lsrs	r3, r3, #20
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	431a      	orrs	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002274:	bf00      	nop
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0318 	and.w	r3, r3, #24
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	400b      	ands	r3, r1
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	0007ffff 	.word	0x0007ffff

080022c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 031f 	and.w	r3, r3, #31
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6093      	str	r3, [r2, #8]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002338:	d101      	bne.n	800233e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800235c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002388:	d101      	bne.n	800238e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023d8:	f043 0202 	orr.w	r2, r3, #2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <LL_ADC_IsEnabled+0x18>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <LL_ADC_IsEnabled+0x1a>
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d101      	bne.n	800242a <LL_ADC_IsDisableOngoing+0x18>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_IsDisableOngoing+0x1a>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800244c:	f043 0204 	orr.w	r2, r3, #4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002474:	f043 0210 	orr.w	r2, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b04      	cmp	r3, #4
 800249a:	d101      	bne.n	80024a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d101      	bne.n	80024ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e134      	b.n	8002780 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fa97 	bl	8001a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fef1 	bl	8002324 <LL_ADC_IsDeepPowerDownEnabled>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fed7 	bl	8002300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff0c 	bl	8002374 <LL_ADC_IsInternalRegulatorEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d115      	bne.n	800258e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fef0 	bl	800234c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800256c:	4b86      	ldr	r3, [pc, #536]	; (8002788 <HAL_ADC_Init+0x28c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	4a86      	ldr	r2, [pc, #536]	; (800278c <HAL_ADC_Init+0x290>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002580:	e002      	b.n	8002588 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3b01      	subs	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff feee 	bl	8002374 <LL_ADC_IsInternalRegulatorEnabled>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10d      	bne.n	80025ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f043 0210 	orr.w	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff62 	bl	8002488 <LL_ADC_REG_IsConversionOngoing>
 80025c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 80cd 	bne.w	800276e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 80c9 	bne.w	800276e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025e4:	f043 0202 	orr.w	r2, r3, #2
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fefb 	bl	80023ec <LL_ADC_IsEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d110      	bne.n	800261e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fc:	4864      	ldr	r0, [pc, #400]	; (8002790 <HAL_ADC_Init+0x294>)
 80025fe:	f7ff fef5 	bl	80023ec <LL_ADC_IsEnabled>
 8002602:	4604      	mov	r4, r0
 8002604:	4863      	ldr	r0, [pc, #396]	; (8002794 <HAL_ADC_Init+0x298>)
 8002606:	f7ff fef1 	bl	80023ec <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	4323      	orrs	r3, r4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4619      	mov	r1, r3
 8002618:	485f      	ldr	r0, [pc, #380]	; (8002798 <HAL_ADC_Init+0x29c>)
 800261a:	f7ff fd2b 	bl	8002074 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e5b      	ldrb	r3, [r3, #25]
 8002622:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002628:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800262e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002634:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	3b01      	subs	r3, #1
 8002652:	045b      	lsls	r3, r3, #17
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_ADC_Init+0x2a0>)
 800267e:	4013      	ands	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	69b9      	ldr	r1, [r7, #24]
 8002686:	430b      	orrs	r3, r1
 8002688:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fefa 	bl	8002488 <LL_ADC_REG_IsConversionOngoing>
 8002694:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff1b 	bl	80024d6 <LL_ADC_INJ_IsConversionOngoing>
 80026a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d140      	bne.n	800272a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d13d      	bne.n	800272a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7e1b      	ldrb	r3, [r3, #24]
 80026b6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026b8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d0:	f023 0306 	bic.w	r3, r3, #6
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	69b9      	ldr	r1, [r7, #24]
 80026da:	430b      	orrs	r3, r1
 80026dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d118      	bne.n	800271a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026f2:	f023 0304 	bic.w	r3, r3, #4
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800270a:	430a      	orrs	r2, r1
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	e007      	b.n	800272a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10c      	bne.n	800274c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	f023 010f 	bic.w	r1, r3, #15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
 800274a:	e007      	b.n	800275c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 020f 	bic.w	r2, r2, #15
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f023 0303 	bic.w	r3, r3, #3
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	659a      	str	r2, [r3, #88]	; 0x58
 800276c:	e007      	b.n	800277e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	f043 0210 	orr.w	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800277e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3724      	adds	r7, #36	; 0x24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	20000000 	.word	0x20000000
 800278c:	053e2d63 	.word	0x053e2d63
 8002790:	50040000 	.word	0x50040000
 8002794:	50040100 	.word	0x50040100
 8002798:	50040300 	.word	0x50040300
 800279c:	fff0c007 	.word	0xfff0c007

080027a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a8:	4857      	ldr	r0, [pc, #348]	; (8002908 <HAL_ADC_Start+0x168>)
 80027aa:	f7ff fd8d 	bl	80022c8 <LL_ADC_GetMultimode>
 80027ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe67 	bl	8002488 <LL_ADC_REG_IsConversionOngoing>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 809c 	bne.w	80028fa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_Start+0x30>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e097      	b.n	8002900 <HAL_ADC_Start+0x160>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fe6d 	bl	80034b8 <ADC_Enable>
 80027de:	4603      	mov	r3, r0
 80027e0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 8083 	bne.w	80028f0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a42      	ldr	r2, [pc, #264]	; (800290c <HAL_ADC_Start+0x16c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d002      	beq.n	800280e <HAL_ADC_Start+0x6e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	e000      	b.n	8002810 <HAL_ADC_Start+0x70>
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_ADC_Start+0x170>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	4293      	cmp	r3, r2
 8002816:	d002      	beq.n	800281e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	d106      	bne.n	8002846 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	f023 0206 	bic.w	r2, r3, #6
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	; 0x5c
 8002844:	e002      	b.n	800284c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	221c      	movs	r2, #28
 8002852:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2a      	ldr	r2, [pc, #168]	; (800290c <HAL_ADC_Start+0x16c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d002      	beq.n	800286c <HAL_ADC_Start+0xcc>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e000      	b.n	800286e <HAL_ADC_Start+0xce>
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_ADC_Start+0x170>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4293      	cmp	r3, r2
 8002874:	d008      	beq.n	8002888 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d002      	beq.n	8002888 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b09      	cmp	r3, #9
 8002886:	d114      	bne.n	80028b2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800289e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fdc4 	bl	8002438 <LL_ADC_REG_StartConversion>
 80028b0:	e025      	b.n	80028fe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_ADC_Start+0x16c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d002      	beq.n	80028ce <HAL_ADC_Start+0x12e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	e000      	b.n	80028d0 <HAL_ADC_Start+0x130>
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_ADC_Start+0x170>)
 80028d0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00f      	beq.n	80028fe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	659a      	str	r2, [r3, #88]	; 0x58
 80028ee:	e006      	b.n	80028fe <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80028f8:	e001      	b.n	80028fe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	50040300 	.word	0x50040300
 800290c:	50040100 	.word	0x50040100
 8002910:	50040000 	.word	0x50040000

08002914 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_ADC_Stop+0x16>
 8002926:	2302      	movs	r3, #2
 8002928:	e023      	b.n	8002972 <HAL_ADC_Stop+0x5e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002932:	2103      	movs	r1, #3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fd03 	bl	8003340 <ADC_ConversionStop>
 800293a:	4603      	mov	r3, r0
 800293c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d111      	bne.n	8002968 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fe19 	bl	800357c <ADC_Disable>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002986:	4866      	ldr	r0, [pc, #408]	; (8002b20 <HAL_ADC_PollForConversion+0x1a4>)
 8002988:	f7ff fc9e 	bl	80022c8 <LL_ADC_GetMultimode>
 800298c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b08      	cmp	r3, #8
 8002994:	d102      	bne.n	800299c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002996:	2308      	movs	r3, #8
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e02a      	b.n	80029f2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d002      	beq.n	80029ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0a4      	b.n	8002b16 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029cc:	2304      	movs	r3, #4
 80029ce:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029d0:	e00f      	b.n	80029f2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029d2:	4853      	ldr	r0, [pc, #332]	; (8002b20 <HAL_ADC_PollForConversion+0x1a4>)
 80029d4:	f7ff fc86 	bl	80022e4 <LL_ADC_GetMultiDMATransfer>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e093      	b.n	8002b16 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029ee:	2304      	movs	r3, #4
 80029f0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029f2:	f7ff fb0f 	bl	8002014 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029f8:	e021      	b.n	8002a3e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d01d      	beq.n	8002a3e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a02:	f7ff fb07 	bl	8002014 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <HAL_ADC_PollForConversion+0x9c>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d112      	bne.n	8002a3e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e06b      	b.n	8002b16 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0d6      	beq.n	80029fa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fba5 	bl	80021ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01c      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7e5b      	ldrb	r3, [r3, #25]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d118      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d111      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_ADC_PollForConversion+0x1a8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d002      	beq.n	8002ab2 <HAL_ADC_PollForConversion+0x136>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_PollForConversion+0x138>
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_ADC_PollForConversion+0x1ac>)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d008      	beq.n	8002ace <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d002      	beq.n	8002ace <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	d104      	bne.n	8002ad8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e00c      	b.n	8002af2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <HAL_ADC_PollForConversion+0x1a8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d002      	beq.n	8002ae8 <HAL_ADC_PollForConversion+0x16c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	e000      	b.n	8002aea <HAL_ADC_PollForConversion+0x16e>
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <HAL_ADC_PollForConversion+0x1ac>)
 8002aea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d104      	bne.n	8002b02 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2208      	movs	r2, #8
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e008      	b.n	8002b14 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	220c      	movs	r2, #12
 8002b12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	50040300 	.word	0x50040300
 8002b24:	50040100 	.word	0x50040100
 8002b28:	50040000 	.word	0x50040000

08002b2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b0b6      	sub	sp, #216	; 0xd8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x22>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e3d5      	b.n	8003316 <HAL_ADC_ConfigChannel+0x7ce>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fc86 	bl	8002488 <LL_ADC_REG_IsConversionOngoing>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 83ba 	bne.w	80032f8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d824      	bhi.n	8002bd6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	3b02      	subs	r3, #2
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d81b      	bhi.n	8002bce <HAL_ADC_ConfigChannel+0x86>
 8002b96:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <HAL_ADC_ConfigChannel+0x54>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bb5 	.word	0x08002bb5
 8002ba4:	08002bbd 	.word	0x08002bbd
 8002ba8:	08002bc5 	.word	0x08002bc5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	220c      	movs	r2, #12
 8002bb0:	605a      	str	r2, [r3, #4]
          break;
 8002bb2:	e011      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2212      	movs	r2, #18
 8002bb8:	605a      	str	r2, [r3, #4]
          break;
 8002bba:	e00d      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2218      	movs	r2, #24
 8002bc0:	605a      	str	r2, [r3, #4]
          break;
 8002bc2:	e009      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bca:	605a      	str	r2, [r3, #4]
          break;
 8002bcc:	e004      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	605a      	str	r2, [r3, #4]
          break;
 8002bd4:	e000      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002bd6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	f7ff faf4 	bl	80021d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fc4a 	bl	8002488 <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fc6a 	bl	80024d6 <LL_ADC_INJ_IsConversionOngoing>
 8002c02:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f040 81c1 	bne.w	8002f92 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 81bc 	bne.w	8002f92 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c22:	d10f      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f7ff fafb 	bl	800222a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff faa2 	bl	8002186 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c42:	e00e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f7ff faea 	bl	800222a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fa92 	bl	8002186 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d00a      	beq.n	8002c9a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6919      	ldr	r1, [r3, #16]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c94:	f7ff fa22 	bl	80020dc <LL_ADC_SetOffset>
 8002c98:	e17b      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fa3f 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x17e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fa34 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	f003 021f 	and.w	r2, r3, #31
 8002cc4:	e01e      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x1bc>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fa29 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1d4>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	e018      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x206>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e004      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002d44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f9f8 	bl	8002150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f9dc 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x244>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f9d1 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	f003 021f 	and.w	r2, r3, #31
 8002d8a:	e01e      	b.n	8002dca <HAL_ADC_ConfigChannel+0x282>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff f9c6 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002db2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e004      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x29a>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	e018      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x2cc>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002dfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e004      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d106      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f995 	bl	8002150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f979 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x30a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f96e 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	0e9b      	lsrs	r3, r3, #26
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	e01e      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x348>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2102      	movs	r1, #2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f963 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e004      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x360>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	e016      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x38e>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e004      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d106      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f934 	bl	8002150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2103      	movs	r1, #3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f918 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x3cc>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2103      	movs	r1, #3
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff f90d 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	e017      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x3fc>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2103      	movs	r1, #3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff f902 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f2e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e003      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x414>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	e011      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x438>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002f74:	2320      	movs	r3, #32
 8002f76:	e003      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d106      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff f8df 	bl	8002150 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fa28 	bl	80023ec <LL_ADC_IsEnabled>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 8140 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f7ff f965 	bl	8002280 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	4a8f      	ldr	r2, [pc, #572]	; (80031f8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 8131 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x4a2>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2b09      	cmp	r3, #9
 8002fe0:	bf94      	ite	ls
 8002fe2:	2301      	movls	r3, #1
 8002fe4:	2300      	movhi	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e019      	b.n	800301e <HAL_ADC_ConfigChannel+0x4d6>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e003      	b.n	800300e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	2b09      	cmp	r3, #9
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301e:	2b00      	cmp	r3, #0
 8003020:	d079      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_ADC_ConfigChannel+0x4f6>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	3301      	adds	r3, #1
 8003036:	069b      	lsls	r3, r3, #26
 8003038:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800303c:	e015      	b.n	800306a <HAL_ADC_ConfigChannel+0x522>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800304c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800305a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	069b      	lsls	r3, r3, #26
 8003066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_ADC_ConfigChannel+0x542>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	3301      	adds	r3, #1
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	e017      	b.n	80030ba <HAL_ADC_ConfigChannel+0x572>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800309c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e003      	b.n	80030ae <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80030a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	ea42 0103 	orr.w	r1, r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x598>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	051b      	lsls	r3, r3, #20
 80030de:	e018      	b.n	8003112 <HAL_ADC_ConfigChannel+0x5ca>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	e003      	b.n	8003104 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80030fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003112:	430b      	orrs	r3, r1
 8003114:	e081      	b.n	800321a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x5ea>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	3301      	adds	r3, #1
 800312a:	069b      	lsls	r3, r3, #26
 800312c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003130:	e015      	b.n	800315e <HAL_ADC_ConfigChannel+0x616>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	069b      	lsls	r3, r3, #26
 800315a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_ADC_ConfigChannel+0x636>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	3301      	adds	r3, #1
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	e017      	b.n	80031ae <HAL_ADC_ConfigChannel+0x666>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	61fb      	str	r3, [r7, #28]
  return result;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003196:	2320      	movs	r3, #32
 8003198:	e003      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	ea42 0103 	orr.w	r1, r2, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10d      	bne.n	80031da <HAL_ADC_ConfigChannel+0x692>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	3301      	adds	r3, #1
 80031c6:	f003 021f 	and.w	r2, r3, #31
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	3b1e      	subs	r3, #30
 80031d2:	051b      	lsls	r3, r3, #20
 80031d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031d8:	e01e      	b.n	8003218 <HAL_ADC_ConfigChannel+0x6d0>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	613b      	str	r3, [r7, #16]
  return result;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e006      	b.n	8003204 <HAL_ADC_ConfigChannel+0x6bc>
 80031f6:	bf00      	nop
 80031f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f003 021f 	and.w	r2, r3, #31
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	3b1e      	subs	r3, #30
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003218:	430b      	orrs	r3, r1
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	4619      	mov	r1, r3
 8003220:	f7ff f803 	bl	800222a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <HAL_ADC_ConfigChannel+0x7d8>)
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d06c      	beq.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003230:	483c      	ldr	r0, [pc, #240]	; (8003324 <HAL_ADC_ConfigChannel+0x7dc>)
 8003232:	f7fe ff45 	bl	80020c0 <LL_ADC_GetCommonPathInternalCh>
 8003236:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a3a      	ldr	r2, [pc, #232]	; (8003328 <HAL_ADC_ConfigChannel+0x7e0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d127      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d121      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a35      	ldr	r2, [pc, #212]	; (800332c <HAL_ADC_ConfigChannel+0x7e4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d157      	bne.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800325a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800325e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003262:	4619      	mov	r1, r3
 8003264:	482f      	ldr	r0, [pc, #188]	; (8003324 <HAL_ADC_ConfigChannel+0x7dc>)
 8003266:	f7fe ff18 	bl	800209a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800326a:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_ADC_ConfigChannel+0x7e8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	099b      	lsrs	r3, r3, #6
 8003270:	4a30      	ldr	r2, [pc, #192]	; (8003334 <HAL_ADC_ConfigChannel+0x7ec>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003284:	e002      	b.n	800328c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3b01      	subs	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f9      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003292:	e03a      	b.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a27      	ldr	r2, [pc, #156]	; (8003338 <HAL_ADC_ConfigChannel+0x7f0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d113      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x77e>
 800329e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <HAL_ADC_ConfigChannel+0x7e4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d12a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032bc:	4619      	mov	r1, r3
 80032be:	4819      	ldr	r0, [pc, #100]	; (8003324 <HAL_ADC_ConfigChannel+0x7dc>)
 80032c0:	f7fe feeb 	bl	800209a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032c4:	e021      	b.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <HAL_ADC_ConfigChannel+0x7f4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d11c      	bne.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d116      	bne.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_ADC_ConfigChannel+0x7e4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d111      	bne.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032ee:	4619      	mov	r1, r3
 80032f0:	480c      	ldr	r0, [pc, #48]	; (8003324 <HAL_ADC_ConfigChannel+0x7dc>)
 80032f2:	f7fe fed2 	bl	800209a <LL_ADC_SetCommonPathInternalCh>
 80032f6:	e008      	b.n	800330a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003312:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003316:	4618      	mov	r0, r3
 8003318:	37d8      	adds	r7, #216	; 0xd8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	80080000 	.word	0x80080000
 8003324:	50040300 	.word	0x50040300
 8003328:	c7520000 	.word	0xc7520000
 800332c:	50040000 	.word	0x50040000
 8003330:	20000000 	.word	0x20000000
 8003334:	053e2d63 	.word	0x053e2d63
 8003338:	cb840000 	.word	0xcb840000
 800333c:	80000001 	.word	0x80000001

08003340 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff f896 	bl	8002488 <LL_ADC_REG_IsConversionOngoing>
 800335c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff f8b7 	bl	80024d6 <LL_ADC_INJ_IsConversionOngoing>
 8003368:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8098 	beq.w	80034a8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02a      	beq.n	80033dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	7e5b      	ldrb	r3, [r3, #25]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d126      	bne.n	80033dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7e1b      	ldrb	r3, [r3, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d122      	bne.n	80033dc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003396:	2301      	movs	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800339a:	e014      	b.n	80033c6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4a45      	ldr	r2, [pc, #276]	; (80034b4 <ADC_ConversionStop+0x174>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d90d      	bls.n	80033c0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e074      	b.n	80034aa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	3301      	adds	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d1e3      	bne.n	800339c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d014      	beq.n	800340c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f84e 	bl	8002488 <LL_ADC_REG_IsConversionOngoing>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f80b 	bl	8002412 <LL_ADC_IsDisableOngoing>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff f82a 	bl	8002460 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d014      	beq.n	800343c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f85d 	bl	80024d6 <LL_ADC_INJ_IsConversionOngoing>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fff3 	bl	8002412 <LL_ADC_IsDisableOngoing>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f839 	bl	80024ae <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d005      	beq.n	800344e <ADC_ConversionStop+0x10e>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d105      	bne.n	8003454 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003448:	230c      	movs	r3, #12
 800344a:	617b      	str	r3, [r7, #20]
        break;
 800344c:	e005      	b.n	800345a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800344e:	2308      	movs	r3, #8
 8003450:	617b      	str	r3, [r7, #20]
        break;
 8003452:	e002      	b.n	800345a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003454:	2304      	movs	r3, #4
 8003456:	617b      	str	r3, [r7, #20]
        break;
 8003458:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800345a:	f7fe fddb 	bl	8002014 <HAL_GetTick>
 800345e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003460:	e01b      	b.n	800349a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003462:	f7fe fdd7 	bl	8002014 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b05      	cmp	r3, #5
 800346e:	d914      	bls.n	800349a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00d      	beq.n	800349a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f043 0210 	orr.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e007      	b.n	80034aa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1dc      	bne.n	8003462 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	a33fffff 	.word	0xa33fffff

080034b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe ff91 	bl	80023ec <LL_ADC_IsEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d14d      	bne.n	800356c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <ADC_Enable+0xc0>)
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	f043 0210 	orr.w	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e039      	b.n	800356e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe ff4c 	bl	800239c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003504:	f7fe fd86 	bl	8002014 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800350a:	e028      	b.n	800355e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe ff6b 	bl	80023ec <LL_ADC_IsEnabled>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe ff3b 	bl	800239c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003526:	f7fe fd75 	bl	8002014 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d914      	bls.n	800355e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d00d      	beq.n	800355e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	f043 0210 	orr.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e007      	b.n	800356e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d1cf      	bne.n	800350c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	8000003f 	.word	0x8000003f

0800357c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe ff42 	bl	8002412 <LL_ADC_IsDisableOngoing>
 800358e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe ff29 	bl	80023ec <LL_ADC_IsEnabled>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d047      	beq.n	8003630 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d144      	bne.n	8003630 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030d 	and.w	r3, r3, #13
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10c      	bne.n	80035ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe ff03 	bl	80023c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2203      	movs	r2, #3
 80035c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035c6:	f7fe fd25 	bl	8002014 <HAL_GetTick>
 80035ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035cc:	e029      	b.n	8003622 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	f043 0210 	orr.w	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e023      	b.n	8003632 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035ea:	f7fe fd13 	bl	8002014 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d914      	bls.n	8003622 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	f043 0210 	orr.w	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e007      	b.n	8003632 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1dc      	bne.n	80035ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <LL_ADC_IsEnabled>:
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <LL_ADC_IsEnabled+0x18>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <LL_ADC_IsEnabled+0x1a>
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_ADC_REG_IsConversionOngoing>:
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d101      	bne.n	8003678 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b0a1      	sub	sp, #132	; 0x84
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e089      	b.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80036ae:	2300      	movs	r3, #0
 80036b0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80036b2:	2300      	movs	r3, #0
 80036b4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d102      	bne.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036c0:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e001      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10b      	bne.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e068      	b.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff ffb8 	bl	8003660 <LL_ADC_REG_IsConversionOngoing>
 80036f0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ffb2 	bl	8003660 <LL_ADC_REG_IsConversionOngoing>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d14a      	bne.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003704:	2b00      	cmp	r3, #0
 8003706:	d147      	bne.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003708:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800370a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d027      	beq.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003726:	035b      	lsls	r3, r3, #13
 8003728:	430b      	orrs	r3, r1
 800372a:	431a      	orrs	r2, r3
 800372c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003730:	4824      	ldr	r0, [pc, #144]	; (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003732:	f7ff ff82 	bl	800363a <LL_ADC_IsEnabled>
 8003736:	4604      	mov	r4, r0
 8003738:	4823      	ldr	r0, [pc, #140]	; (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800373a:	f7ff ff7e 	bl	800363a <LL_ADC_IsEnabled>
 800373e:	4603      	mov	r3, r0
 8003740:	4323      	orrs	r3, r4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d132      	bne.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800374e:	f023 030f 	bic.w	r3, r3, #15
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	6811      	ldr	r1, [r2, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	6892      	ldr	r2, [r2, #8]
 800375a:	430a      	orrs	r2, r1
 800375c:	431a      	orrs	r2, r3
 800375e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003760:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003762:	e023      	b.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800376c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800376e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003770:	4814      	ldr	r0, [pc, #80]	; (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003772:	f7ff ff62 	bl	800363a <LL_ADC_IsEnabled>
 8003776:	4604      	mov	r4, r0
 8003778:	4813      	ldr	r0, [pc, #76]	; (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800377a:	f7ff ff5e 	bl	800363a <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	4323      	orrs	r3, r4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d112      	bne.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800378e:	f023 030f 	bic.w	r3, r3, #15
 8003792:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003794:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003796:	e009      	b.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037aa:	e000      	b.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80037b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3784      	adds	r7, #132	; 0x84
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd90      	pop	{r4, r7, pc}
 80037c2:	bf00      	nop
 80037c4:	50040000 	.word	0x50040000
 80037c8:	50040100 	.word	0x50040100
 80037cc:	50040300 	.word	0x50040300

080037d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037ec:	4013      	ands	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003802:	4a04      	ldr	r2, [pc, #16]	; (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	60d3      	str	r3, [r2, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <__NVIC_GetPriorityGrouping+0x18>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	f003 0307 	and.w	r3, r3, #7
}
 8003826:	4618      	mov	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	2b00      	cmp	r3, #0
 8003844:	db0b      	blt.n	800385e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <__NVIC_EnableIRQ+0x38>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2001      	movs	r0, #1
 8003856:	fa00 f202 	lsl.w	r2, r0, r2
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	; (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	; (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
         );
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	; 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800393c:	d301      	bcc.n	8003942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393e:	2301      	movs	r3, #1
 8003940:	e00f      	b.n	8003962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <SysTick_Config+0x40>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394a:	210f      	movs	r1, #15
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	f7ff ff8e 	bl	8003870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <SysTick_Config+0x40>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <SysTick_Config+0x40>)
 800395c:	2207      	movs	r2, #7
 800395e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010

08003970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff29 	bl	80037d0 <__NVIC_SetPriorityGrouping>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003998:	f7ff ff3e 	bl	8003818 <__NVIC_GetPriorityGrouping>
 800399c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7ff ff8e 	bl	80038c4 <NVIC_EncodePriority>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff5d 	bl	8003870 <__NVIC_SetPriority>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff31 	bl	8003834 <__NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ffa2 	bl	800392c <SysTick_Config>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a02:	e166      	b.n	8003cd2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8158 	beq.w	8003ccc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d005      	beq.n	8003a34 <HAL_GPIO_Init+0x40>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d130      	bne.n	8003a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0201 	and.w	r2, r3, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d017      	beq.n	8003ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	2203      	movs	r2, #3
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d123      	bne.n	8003b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	08da      	lsrs	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3208      	adds	r2, #8
 8003ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	08da      	lsrs	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3208      	adds	r2, #8
 8003b20:	6939      	ldr	r1, [r7, #16]
 8003b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0203 	and.w	r2, r3, #3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80b2 	beq.w	8003ccc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b68:	4b61      	ldr	r3, [pc, #388]	; (8003cf0 <HAL_GPIO_Init+0x2fc>)
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	4a60      	ldr	r2, [pc, #384]	; (8003cf0 <HAL_GPIO_Init+0x2fc>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6613      	str	r3, [r2, #96]	; 0x60
 8003b74:	4b5e      	ldr	r3, [pc, #376]	; (8003cf0 <HAL_GPIO_Init+0x2fc>)
 8003b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b80:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	3302      	adds	r3, #2
 8003b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	220f      	movs	r2, #15
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003baa:	d02b      	beq.n	8003c04 <HAL_GPIO_Init+0x210>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_GPIO_Init+0x304>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d025      	beq.n	8003c00 <HAL_GPIO_Init+0x20c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a51      	ldr	r2, [pc, #324]	; (8003cfc <HAL_GPIO_Init+0x308>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01f      	beq.n	8003bfc <HAL_GPIO_Init+0x208>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a50      	ldr	r2, [pc, #320]	; (8003d00 <HAL_GPIO_Init+0x30c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d019      	beq.n	8003bf8 <HAL_GPIO_Init+0x204>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a4f      	ldr	r2, [pc, #316]	; (8003d04 <HAL_GPIO_Init+0x310>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <HAL_GPIO_Init+0x200>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a4e      	ldr	r2, [pc, #312]	; (8003d08 <HAL_GPIO_Init+0x314>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_GPIO_Init+0x1fc>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a4d      	ldr	r2, [pc, #308]	; (8003d0c <HAL_GPIO_Init+0x318>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <HAL_GPIO_Init+0x1f8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a4c      	ldr	r2, [pc, #304]	; (8003d10 <HAL_GPIO_Init+0x31c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_GPIO_Init+0x1f4>
 8003be4:	2307      	movs	r3, #7
 8003be6:	e00e      	b.n	8003c06 <HAL_GPIO_Init+0x212>
 8003be8:	2308      	movs	r3, #8
 8003bea:	e00c      	b.n	8003c06 <HAL_GPIO_Init+0x212>
 8003bec:	2306      	movs	r3, #6
 8003bee:	e00a      	b.n	8003c06 <HAL_GPIO_Init+0x212>
 8003bf0:	2305      	movs	r3, #5
 8003bf2:	e008      	b.n	8003c06 <HAL_GPIO_Init+0x212>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e006      	b.n	8003c06 <HAL_GPIO_Init+0x212>
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e004      	b.n	8003c06 <HAL_GPIO_Init+0x212>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e002      	b.n	8003c06 <HAL_GPIO_Init+0x212>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_GPIO_Init+0x212>
 8003c04:	2300      	movs	r3, #0
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	f002 0203 	and.w	r2, r2, #3
 8003c0c:	0092      	lsls	r2, r2, #2
 8003c0e:	4093      	lsls	r3, r2
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c16:	4937      	ldr	r1, [pc, #220]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c24:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c48:	4a32      	ldr	r2, [pc, #200]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c72:	4a28      	ldr	r2, [pc, #160]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c78:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c9c:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cc6:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f47f ae91 	bne.w	8003a04 <HAL_GPIO_Init+0x10>
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	48000400 	.word	0x48000400
 8003cfc:	48000800 	.word	0x48000800
 8003d00:	48000c00 	.word	0x48000c00
 8003d04:	48001000 	.word	0x48001000
 8003d08:	48001400 	.word	0x48001400
 8003d0c:	48001800 	.word	0x48001800
 8003d10:	48001c00 	.word	0x48001c00
 8003d14:	40010400 	.word	0x40010400

08003d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d5a:	887a      	ldrh	r2, [r7, #2]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	041a      	lsls	r2, r3, #16
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	43d9      	mvns	r1, r3
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	400b      	ands	r3, r1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7e:	b08f      	sub	sp, #60	; 0x3c
 8003d80:	af0a      	add	r7, sp, #40	; 0x28
 8003d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e054      	b.n	8003e38 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f00c fe4b 	bl	8010a44 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2203      	movs	r2, #3
 8003db2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 ffc8 	bl	8007d62 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	687e      	ldr	r6, [r7, #4]
 8003dda:	466d      	mov	r5, sp
 8003ddc:	f106 0410 	add.w	r4, r6, #16
 8003de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dec:	e885 0003 	stmia.w	r5, {r0, r1}
 8003df0:	1d33      	adds	r3, r6, #4
 8003df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003df4:	6838      	ldr	r0, [r7, #0]
 8003df6:	f003 ff77 	bl	8007ce8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4618      	mov	r0, r3
 8003e02:	f003 ffbf 	bl	8007d84 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	687e      	ldr	r6, [r7, #4]
 8003e0e:	466d      	mov	r5, sp
 8003e10:	f106 0410 	add.w	r4, r6, #16
 8003e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e20:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e24:	1d33      	adds	r3, r6, #4
 8003e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e28:	6838      	ldr	r0, [r7, #0]
 8003e2a:	f004 f93d 	bl	80080a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e40 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b089      	sub	sp, #36	; 0x24
 8003e44:	af04      	add	r7, sp, #16
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	70fb      	strb	r3, [r7, #3]
 8003e52:	460b      	mov	r3, r1
 8003e54:	70bb      	strb	r3, [r7, #2]
 8003e56:	4613      	mov	r3, r2
 8003e58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_HCD_HC_Init+0x28>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e076      	b.n	8003f56 <HAL_HCD_HC_Init+0x116>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	212c      	movs	r1, #44	; 0x2c
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	333d      	adds	r3, #61	; 0x3d
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3338      	adds	r3, #56	; 0x38
 8003e90:	787a      	ldrb	r2, [r7, #1]
 8003e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3340      	adds	r3, #64	; 0x40
 8003ea2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ea4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3339      	adds	r3, #57	; 0x39
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	333f      	adds	r3, #63	; 0x3f
 8003ec6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003eca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	78ba      	ldrb	r2, [r7, #2]
 8003ed0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ed4:	b2d0      	uxtb	r0, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	212c      	movs	r1, #44	; 0x2c
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	333a      	adds	r3, #58	; 0x3a
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003ee6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	da09      	bge.n	8003f02 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	333b      	adds	r3, #59	; 0x3b
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e008      	b.n	8003f14 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	333b      	adds	r3, #59	; 0x3b
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	333c      	adds	r3, #60	; 0x3c
 8003f22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f26:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	787c      	ldrb	r4, [r7, #1]
 8003f2e:	78ba      	ldrb	r2, [r7, #2]
 8003f30:	78f9      	ldrb	r1, [r7, #3]
 8003f32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f34:	9302      	str	r3, [sp, #8]
 8003f36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	4623      	mov	r3, r4
 8003f44:	f004 f9f8 	bl	8008338 <USB_HC_Init>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}

08003f5e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_HCD_HC_Halt+0x1e>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e00f      	b.n	8003f9c <HAL_HCD_HC_Halt+0x3e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f004 fbe4 	bl	800875a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	4608      	mov	r0, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	70fb      	strb	r3, [r7, #3]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	70bb      	strb	r3, [r7, #2]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	333b      	adds	r3, #59	; 0x3b
 8003fcc:	78ba      	ldrb	r2, [r7, #2]
 8003fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	333f      	adds	r3, #63	; 0x3f
 8003fde:	787a      	ldrb	r2, [r7, #1]
 8003fe0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003fe2:	7c3b      	ldrb	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d112      	bne.n	800400e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3342      	adds	r3, #66	; 0x42
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	333d      	adds	r3, #61	; 0x3d
 8004008:	7f3a      	ldrb	r2, [r7, #28]
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e008      	b.n	8004020 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	212c      	movs	r1, #44	; 0x2c
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	3342      	adds	r3, #66	; 0x42
 800401c:	2202      	movs	r2, #2
 800401e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004020:	787b      	ldrb	r3, [r7, #1]
 8004022:	2b03      	cmp	r3, #3
 8004024:	f200 80c6 	bhi.w	80041b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004041 	.word	0x08004041
 8004034:	080041a1 	.word	0x080041a1
 8004038:	080040a5 	.word	0x080040a5
 800403c:	08004123 	.word	0x08004123
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004040:	7c3b      	ldrb	r3, [r7, #16]
 8004042:	2b01      	cmp	r3, #1
 8004044:	f040 80b8 	bne.w	80041b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004048:	78bb      	ldrb	r3, [r7, #2]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f040 80b4 	bne.w	80041b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004050:	8b3b      	ldrh	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d108      	bne.n	8004068 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	3355      	adds	r3, #85	; 0x55
 8004064:	2201      	movs	r2, #1
 8004066:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3355      	adds	r3, #85	; 0x55
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	3342      	adds	r3, #66	; 0x42
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800408e:	e093      	b.n	80041b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3342      	adds	r3, #66	; 0x42
 800409e:	2202      	movs	r2, #2
 80040a0:	701a      	strb	r2, [r3, #0]
      break;
 80040a2:	e089      	b.n	80041b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80040a4:	78bb      	ldrb	r3, [r7, #2]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11d      	bne.n	80040e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	3355      	adds	r3, #85	; 0x55
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	3342      	adds	r3, #66	; 0x42
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80040d0:	e073      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	212c      	movs	r1, #44	; 0x2c
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	3342      	adds	r3, #66	; 0x42
 80040e0:	2202      	movs	r2, #2
 80040e2:	701a      	strb	r2, [r3, #0]
      break;
 80040e4:	e069      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	212c      	movs	r1, #44	; 0x2c
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	3354      	adds	r3, #84	; 0x54
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	3342      	adds	r3, #66	; 0x42
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
      break;
 800410c:	e055      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3342      	adds	r3, #66	; 0x42
 800411c:	2202      	movs	r2, #2
 800411e:	701a      	strb	r2, [r3, #0]
      break;
 8004120:	e04b      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004122:	78bb      	ldrb	r3, [r7, #2]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3355      	adds	r3, #85	; 0x55
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	3342      	adds	r3, #66	; 0x42
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800414e:	e034      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	3342      	adds	r3, #66	; 0x42
 800415e:	2202      	movs	r2, #2
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e02a      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	212c      	movs	r1, #44	; 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	3354      	adds	r3, #84	; 0x54
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	3342      	adds	r3, #66	; 0x42
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
      break;
 800418a:	e016      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	212c      	movs	r1, #44	; 0x2c
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	3342      	adds	r3, #66	; 0x42
 800419a:	2202      	movs	r2, #2
 800419c:	701a      	strb	r2, [r3, #0]
      break;
 800419e:	e00c      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	212c      	movs	r1, #44	; 0x2c
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	3342      	adds	r3, #66	; 0x42
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
      break;
 80041b2:	e002      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80041b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	3344      	adds	r3, #68	; 0x44
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	8b3a      	ldrh	r2, [r7, #24]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	202c      	movs	r0, #44	; 0x2c
 80041d4:	fb00 f303 	mul.w	r3, r0, r3
 80041d8:	440b      	add	r3, r1
 80041da:	334c      	adds	r3, #76	; 0x4c
 80041dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	3360      	adds	r3, #96	; 0x60
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	3350      	adds	r3, #80	; 0x50
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	212c      	movs	r1, #44	; 0x2c
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	4413      	add	r3, r2
 800420e:	3339      	adds	r3, #57	; 0x39
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	212c      	movs	r1, #44	; 0x2c
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	3361      	adds	r3, #97	; 0x61
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	222c      	movs	r2, #44	; 0x2c
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	3338      	adds	r3, #56	; 0x38
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	4619      	mov	r1, r3
 800423a:	f004 f985 	bl	8008548 <USB_HC_StartXfer>
 800423e:	4603      	mov	r3, r0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f003 fee1 	bl	8008026 <USB_GetMode>
 8004264:	4603      	mov	r3, r0
 8004266:	2b01      	cmp	r3, #1
 8004268:	f040 80f6 	bne.w	8004458 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f003 fec5 	bl	8008000 <USB_ReadInterrupts>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80ec 	beq.w	8004456 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f003 febc 	bl	8008000 <USB_ReadInterrupts>
 8004288:	4603      	mov	r3, r0
 800428a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004292:	d104      	bne.n	800429e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800429c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 feac 	bl	8008000 <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b2:	d104      	bne.n	80042be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f003 fe9c 	bl	8008000 <USB_ReadInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042d2:	d104      	bne.n	80042de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 fe8c 	bl	8008000 <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d103      	bne.n	80042fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2202      	movs	r2, #2
 80042f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f003 fe7e 	bl	8008000 <USB_ReadInterrupts>
 8004304:	4603      	mov	r3, r0
 8004306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800430a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800430e:	d11c      	bne.n	800434a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004318:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10f      	bne.n	800434a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800432a:	2110      	movs	r1, #16
 800432c:	6938      	ldr	r0, [r7, #16]
 800432e:	f003 fd75 	bl	8007e1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004332:	6938      	ldr	r0, [r7, #16]
 8004334:	f003 fda4 	bl	8007e80 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f003 ff34 	bl	80081ac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f00c fbff 	bl	8010b48 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f003 fe56 	bl	8008000 <USB_ReadInterrupts>
 8004354:	4603      	mov	r3, r0
 8004356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800435e:	d102      	bne.n	8004366 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f001 f841 	bl	80053e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f003 fe48 	bl	8008000 <USB_ReadInterrupts>
 8004370:	4603      	mov	r3, r0
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b08      	cmp	r3, #8
 8004378:	d106      	bne.n	8004388 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f00c fbc8 	bl	8010b10 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2208      	movs	r2, #8
 8004386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f003 fe37 	bl	8008000 <USB_ReadInterrupts>
 8004392:	4603      	mov	r3, r0
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b10      	cmp	r3, #16
 800439a:	d101      	bne.n	80043a0 <HAL_HCD_IRQHandler+0x158>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_HCD_IRQHandler+0x15a>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d012      	beq.n	80043cc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699a      	ldr	r2, [r3, #24]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0210 	bic.w	r2, r2, #16
 80043b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 ff44 	bl	8005244 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0210 	orr.w	r2, r2, #16
 80043ca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 fe15 	bl	8008000 <USB_ReadInterrupts>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043e0:	d13a      	bne.n	8004458 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f004 f9a6 	bl	8008738 <USB_HC_ReadInterrupt>
 80043ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e025      	b.n	8004440 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d018      	beq.n	800443a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441e:	d106      	bne.n	800442e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8ab 	bl	8004582 <HCD_HC_IN_IRQHandler>
 800442c:	e005      	b.n	800443a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fc03 	bl	8004c40 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3301      	adds	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	429a      	cmp	r2, r3
 8004448:	d3d4      	bcc.n	80043f4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004452:	615a      	str	r2, [r3, #20]
 8004454:	e000      	b.n	8004458 <HAL_HCD_IRQHandler+0x210>
      return;
 8004456:	bf00      	nop
    }
  }
}
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_HCD_Start+0x16>
 8004470:	2302      	movs	r3, #2
 8004472:	e013      	b.n	800449c <HAL_HCD_Start+0x3e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f003 fef6 	bl	8008274 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 fc57 	bl	8007d40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_HCD_Stop+0x16>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e00d      	b.n	80044d6 <HAL_HCD_Stop+0x32>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f004 fa41 	bl	800894e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f003 fe98 	bl	8008220 <USB_ResetPort>
 80044f0:	4603      	mov	r3, r0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	3360      	adds	r3, #96	; 0x60
 8004514:	781b      	ldrb	r3, [r3, #0]
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3350      	adds	r3, #80	; 0x50
 800453c:	681b      	ldr	r3, [r3, #0]
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f003 fedc 	bl	8008314 <USB_GetCurrentFrame>
 800455c:	4603      	mov	r3, r0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f003 feb7 	bl	80082e6 <USB_GetHostSpeed>
 8004578:	4603      	mov	r3, r0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	460b      	mov	r3, r1
 800458c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d11a      	bne.n	80045e8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045be:	461a      	mov	r2, r3
 80045c0:	2304      	movs	r3, #4
 80045c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3361      	adds	r3, #97	; 0x61
 80045d2:	2206      	movs	r2, #6
 80045d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f004 f8ba 	bl	800875a <USB_HC_Halt>
 80045e6:	e0af      	b.n	8004748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fe:	d11b      	bne.n	8004638 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	461a      	mov	r2, r3
 800460e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004612:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3361      	adds	r3, #97	; 0x61
 8004622:	2207      	movs	r2, #7
 8004624:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f004 f892 	bl	800875a <USB_HC_Halt>
 8004636:	e087      	b.n	8004748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b20      	cmp	r3, #32
 800464c:	d109      	bne.n	8004662 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	461a      	mov	r2, r3
 800465c:	2320      	movs	r3, #32
 800465e:	6093      	str	r3, [r2, #8]
 8004660:	e072      	b.n	8004748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b08      	cmp	r3, #8
 8004676:	d11a      	bne.n	80046ae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004684:	461a      	mov	r2, r3
 8004686:	2308      	movs	r3, #8
 8004688:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	212c      	movs	r1, #44	; 0x2c
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	4413      	add	r3, r2
 8004696:	3361      	adds	r3, #97	; 0x61
 8004698:	2205      	movs	r2, #5
 800469a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 f857 	bl	800875a <USB_HC_Halt>
 80046ac:	e04c      	b.n	8004748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c4:	d11b      	bne.n	80046fe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d2:	461a      	mov	r2, r3
 80046d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	212c      	movs	r1, #44	; 0x2c
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	3361      	adds	r3, #97	; 0x61
 80046e8:	2208      	movs	r2, #8
 80046ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 f82f 	bl	800875a <USB_HC_Halt>
 80046fc:	e024      	b.n	8004748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d119      	bne.n	8004748 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	461a      	mov	r2, r3
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3361      	adds	r3, #97	; 0x61
 8004734:	2206      	movs	r2, #6
 8004736:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f004 f809 	bl	800875a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475e:	d112      	bne.n	8004786 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f003 fff5 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477c:	461a      	mov	r2, r3
 800477e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004782:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004784:	e258      	b.n	8004c38 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4413      	add	r3, r2
 800478e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	f040 80ed 	bne.w	8004978 <HCD_HC_IN_IRQHandler+0x3f6>
    hhcd->hc[ch_num].state = HC_XFRC;
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	212c      	movs	r1, #44	; 0x2c
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	3361      	adds	r3, #97	; 0x61
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	212c      	movs	r1, #44	; 0x2c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	335c      	adds	r3, #92	; 0x5c
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	461a      	mov	r2, r3
 80047d0:	2301      	movs	r3, #1
 80047d2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	333f      	adds	r3, #63	; 0x3f
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d009      	beq.n	80047fc <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	212c      	movs	r1, #44	; 0x2c
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	333f      	adds	r3, #63	; 0x3f
 80047f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d111      	bne.n	8004820 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f003 ffa7 	bl	800875a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	461a      	mov	r2, r3
 800481a:	2310      	movs	r3, #16
 800481c:	6093      	str	r3, [r2, #8]
 800481e:	e066      	b.n	80048ee <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	333f      	adds	r3, #63	; 0x3f
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d127      	bne.n	8004884 <HCD_HC_IN_IRQHandler+0x302>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	440a      	add	r2, r1
 800484a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800484e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004852:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3360      	adds	r3, #96	; 0x60
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	b2d9      	uxtb	r1, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	202c      	movs	r0, #44	; 0x2c
 8004870:	fb00 f303 	mul.w	r3, r0, r3
 8004874:	4413      	add	r3, r2
 8004876:	3360      	adds	r3, #96	; 0x60
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f00c f971 	bl	8010b64 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004882:	e034      	b.n	80048ee <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	333f      	adds	r3, #63	; 0x3f
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d12a      	bne.n	80048ee <HCD_HC_IN_IRQHandler+0x36c>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	212c      	movs	r1, #44	; 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	3360      	adds	r3, #96	; 0x60
 80048a6:	2201      	movs	r2, #1
 80048a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	212c      	movs	r1, #44	; 0x2c
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	3354      	adds	r3, #84	; 0x54
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f083 0301 	eor.w	r3, r3, #1
 80048be:	b2d8      	uxtb	r0, r3
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3354      	adds	r3, #84	; 0x54
 80048ce:	4602      	mov	r2, r0
 80048d0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	b2d9      	uxtb	r1, r3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	202c      	movs	r0, #44	; 0x2c
 80048dc:	fb00 f303 	mul.w	r3, r0, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	3360      	adds	r3, #96	; 0x60
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f00c f93b 	bl	8010b64 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d12b      	bne.n	800494e <HCD_HC_IN_IRQHandler+0x3cc>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	3348      	adds	r3, #72	; 0x48
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	202c      	movs	r0, #44	; 0x2c
 800490c:	fb00 f202 	mul.w	r2, r0, r2
 8004910:	440a      	add	r2, r1
 8004912:	3240      	adds	r2, #64	; 0x40
 8004914:	8812      	ldrh	r2, [r2, #0]
 8004916:	fbb3 f3f2 	udiv	r3, r3, r2
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 818a 	beq.w	8004c38 <HCD_HC_IN_IRQHandler+0x6b6>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3354      	adds	r3, #84	; 0x54
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f083 0301 	eor.w	r3, r3, #1
 8004938:	b2d8      	uxtb	r0, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	212c      	movs	r1, #44	; 0x2c
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	3354      	adds	r3, #84	; 0x54
 8004948:	4602      	mov	r2, r0
 800494a:	701a      	strb	r2, [r3, #0]
}
 800494c:	e174      	b.n	8004c38 <HCD_HC_IN_IRQHandler+0x6b6>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3354      	adds	r3, #84	; 0x54
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	f083 0301 	eor.w	r3, r3, #1
 8004962:	b2d8      	uxtb	r0, r3
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	212c      	movs	r1, #44	; 0x2c
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	3354      	adds	r3, #84	; 0x54
 8004972:	4602      	mov	r2, r0
 8004974:	701a      	strb	r2, [r3, #0]
}
 8004976:	e15f      	b.n	8004c38 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4413      	add	r3, r2
 8004980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	f040 80f6 	bne.w	8004b7c <HCD_HC_IN_IRQHandler+0x5fa>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	212c      	movs	r1, #44	; 0x2c
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	4413      	add	r3, r2
 800499c:	3361      	adds	r3, #97	; 0x61
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d109      	bne.n	80049b8 <HCD_HC_IN_IRQHandler+0x436>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	212c      	movs	r1, #44	; 0x2c
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	3360      	adds	r3, #96	; 0x60
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e0c9      	b.n	8004b4c <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	212c      	movs	r1, #44	; 0x2c
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	3361      	adds	r3, #97	; 0x61
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d109      	bne.n	80049e0 <HCD_HC_IN_IRQHandler+0x45e>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3360      	adds	r3, #96	; 0x60
 80049da:	2205      	movs	r2, #5
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	e0b5      	b.n	8004b4c <HCD_HC_IN_IRQHandler+0x5ca>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	3361      	adds	r3, #97	; 0x61
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b06      	cmp	r3, #6
 80049f2:	d009      	beq.n	8004a08 <HCD_HC_IN_IRQHandler+0x486>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3361      	adds	r3, #97	; 0x61
 8004a02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d150      	bne.n	8004aaa <HCD_HC_IN_IRQHandler+0x528>
      hhcd->hc[ch_num].ErrCnt++;
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	212c      	movs	r1, #44	; 0x2c
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	335c      	adds	r3, #92	; 0x5c
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	202c      	movs	r0, #44	; 0x2c
 8004a20:	fb00 f303 	mul.w	r3, r0, r3
 8004a24:	440b      	add	r3, r1
 8004a26:	335c      	adds	r3, #92	; 0x5c
 8004a28:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	212c      	movs	r1, #44	; 0x2c
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	335c      	adds	r3, #92	; 0x5c
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d912      	bls.n	8004a64 <HCD_HC_IN_IRQHandler+0x4e2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	335c      	adds	r3, #92	; 0x5c
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3360      	adds	r3, #96	; 0x60
 8004a5e:	2204      	movs	r2, #4
 8004a60:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a62:	e073      	b.n	8004b4c <HCD_HC_IN_IRQHandler+0x5ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3360      	adds	r3, #96	; 0x60
 8004a72:	2202      	movs	r2, #2
 8004a74:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a8c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a94:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004aa8:	e050      	b.n	8004b4c <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	212c      	movs	r1, #44	; 0x2c
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3361      	adds	r3, #97	; 0x61
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d122      	bne.n	8004b04 <HCD_HC_IN_IRQHandler+0x582>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	212c      	movs	r1, #44	; 0x2c
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	3360      	adds	r3, #96	; 0x60
 8004acc:	2202      	movs	r2, #2
 8004ace:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e023      	b.n	8004b4c <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	212c      	movs	r1, #44	; 0x2c
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	3361      	adds	r3, #97	; 0x61
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b07      	cmp	r3, #7
 8004b16:	d119      	bne.n	8004b4c <HCD_HC_IN_IRQHandler+0x5ca>
      hhcd->hc[ch_num].ErrCnt++;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	212c      	movs	r1, #44	; 0x2c
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	335c      	adds	r3, #92	; 0x5c
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	202c      	movs	r0, #44	; 0x2c
 8004b30:	fb00 f303 	mul.w	r3, r0, r3
 8004b34:	440b      	add	r3, r1
 8004b36:	335c      	adds	r3, #92	; 0x5c
 8004b38:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	212c      	movs	r1, #44	; 0x2c
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	3360      	adds	r3, #96	; 0x60
 8004b48:	2204      	movs	r2, #4
 8004b4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	b2d9      	uxtb	r1, r3
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	202c      	movs	r0, #44	; 0x2c
 8004b68:	fb00 f303 	mul.w	r3, r0, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3360      	adds	r3, #96	; 0x60
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f00b fff5 	bl	8010b64 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b7a:	e05d      	b.n	8004c38 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d152      	bne.n	8004c38 <HCD_HC_IN_IRQHandler+0x6b6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	212c      	movs	r1, #44	; 0x2c
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	333f      	adds	r3, #63	; 0x3f
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d111      	bne.n	8004bca <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	335c      	adds	r3, #92	; 0x5c
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f003 fdc9 	bl	800875a <USB_HC_Halt>
 8004bc8:	e02d      	b.n	8004c26 <HCD_HC_IN_IRQHandler+0x6a4>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	333f      	adds	r3, #63	; 0x3f
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HCD_HC_IN_IRQHandler+0x670>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	212c      	movs	r1, #44	; 0x2c
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	4413      	add	r3, r2
 8004bea:	333f      	adds	r3, #63	; 0x3f
 8004bec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d119      	bne.n	8004c26 <HCD_HC_IN_IRQHandler+0x6a4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	335c      	adds	r3, #92	; 0x5c
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	212c      	movs	r1, #44	; 0x2c
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	3361      	adds	r3, #97	; 0x61
 8004c12:	2203      	movs	r2, #3
 8004c14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f003 fd9a 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c32:	461a      	mov	r2, r3
 8004c34:	2310      	movs	r3, #16
 8004c36:	6093      	str	r3, [r2, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d11a      	bne.n	8004ca6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2304      	movs	r3, #4
 8004c80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3361      	adds	r3, #97	; 0x61
 8004c90:	2206      	movs	r2, #6
 8004c92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fd5b 	bl	800875a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004ca4:	e2ca      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d12e      	bne.n	8004d1a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2320      	movs	r3, #32
 8004ccc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	333d      	adds	r3, #61	; 0x3d
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	f040 82ac 	bne.w	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	333d      	adds	r3, #61	; 0x3d
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	3360      	adds	r3, #96	; 0x60
 8004d04:	2202      	movs	r2, #2
 8004d06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f003 fd21 	bl	800875a <USB_HC_Halt>
}
 8004d18:	e290      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d30:	d112      	bne.n	8004d58 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d44:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f003 fd02 	bl	800875a <USB_HC_Halt>
}
 8004d56:	e271      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d140      	bne.n	8004df0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	212c      	movs	r1, #44	; 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	335c      	adds	r3, #92	; 0x5c
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d111      	bne.n	8004dba <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	212c      	movs	r1, #44	; 0x2c
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	333d      	adds	r3, #61	; 0x3d
 8004da4:	2201      	movs	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	461a      	mov	r2, r3
 8004db6:	2340      	movs	r3, #64	; 0x40
 8004db8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2301      	movs	r3, #1
 8004dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3361      	adds	r3, #97	; 0x61
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f003 fcb6 	bl	800875a <USB_HC_Halt>
}
 8004dee:	e225      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d12c      	bne.n	8004e60 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	212c      	movs	r1, #44	; 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	3361      	adds	r3, #97	; 0x61
 8004e14:	2204      	movs	r2, #4
 8004e16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	212c      	movs	r1, #44	; 0x2c
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	333d      	adds	r3, #61	; 0x3d
 8004e26:	2201      	movs	r2, #1
 8004e28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	212c      	movs	r1, #44	; 0x2c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	335c      	adds	r3, #92	; 0x5c
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f003 fc87 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2340      	movs	r3, #64	; 0x40
 8004e5c:	6093      	str	r3, [r2, #8]
}
 8004e5e:	e1ed      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d11a      	bne.n	8004eac <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	461a      	mov	r2, r3
 8004e84:	2308      	movs	r3, #8
 8004e86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	212c      	movs	r1, #44	; 0x2c
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	3361      	adds	r3, #97	; 0x61
 8004e96:	2205      	movs	r2, #5
 8004e98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 fc58 	bl	800875a <USB_HC_Halt>
}
 8004eaa:	e1c7      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d123      	bne.n	8004f0a <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	335c      	adds	r3, #92	; 0x5c
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	212c      	movs	r1, #44	; 0x2c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3361      	adds	r3, #97	; 0x61
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f003 fc32 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	2310      	movs	r3, #16
 8004f06:	6093      	str	r3, [r2, #8]
}
 8004f08:	e198      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b80      	cmp	r3, #128	; 0x80
 8004f1e:	d11a      	bne.n	8004f56 <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	212c      	movs	r1, #44	; 0x2c
 8004f26:	fb01 f303 	mul.w	r3, r1, r3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3361      	adds	r3, #97	; 0x61
 8004f2e:	2206      	movs	r2, #6
 8004f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f003 fc0c 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	6093      	str	r3, [r2, #8]
}
 8004f54:	e172      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6c:	d11b      	bne.n	8004fa6 <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	3361      	adds	r3, #97	; 0x61
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f003 fbe5 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa2:	6093      	str	r3, [r2, #8]
}
 8004fa4:	e14a      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	f040 813f 	bne.w	800523c <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	212c      	movs	r1, #44	; 0x2c
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	3361      	adds	r3, #97	; 0x61
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d17d      	bne.n	80050ce <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	212c      	movs	r1, #44	; 0x2c
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	4413      	add	r3, r2
 8004fde:	3360      	adds	r3, #96	; 0x60
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	212c      	movs	r1, #44	; 0x2c
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	333f      	adds	r3, #63	; 0x3f
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d00a      	beq.n	800500e <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	212c      	movs	r1, #44	; 0x2c
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	4413      	add	r3, r2
 8005004:	333f      	adds	r3, #63	; 0x3f
 8005006:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005008:	2b03      	cmp	r3, #3
 800500a:	f040 8100 	bne.w	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d113      	bne.n	800503e <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	212c      	movs	r1, #44	; 0x2c
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	4413      	add	r3, r2
 8005022:	3355      	adds	r3, #85	; 0x55
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f083 0301 	eor.w	r3, r3, #1
 800502a:	b2d8      	uxtb	r0, r3
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	212c      	movs	r1, #44	; 0x2c
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	3355      	adds	r3, #85	; 0x55
 800503a:	4602      	mov	r2, r0
 800503c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b01      	cmp	r3, #1
 8005044:	f040 80e3 	bne.w	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	212c      	movs	r1, #44	; 0x2c
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	4413      	add	r3, r2
 8005054:	334c      	adds	r3, #76	; 0x4c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80d8 	beq.w	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	212c      	movs	r1, #44	; 0x2c
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	4413      	add	r3, r2
 800506a:	334c      	adds	r3, #76	; 0x4c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	202c      	movs	r0, #44	; 0x2c
 8005074:	fb00 f202 	mul.w	r2, r0, r2
 8005078:	440a      	add	r2, r1
 800507a:	3240      	adds	r2, #64	; 0x40
 800507c:	8812      	ldrh	r2, [r2, #0]
 800507e:	4413      	add	r3, r2
 8005080:	3b01      	subs	r3, #1
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	202c      	movs	r0, #44	; 0x2c
 8005088:	fb00 f202 	mul.w	r2, r0, r2
 800508c:	440a      	add	r2, r1
 800508e:	3240      	adds	r2, #64	; 0x40
 8005090:	8812      	ldrh	r2, [r2, #0]
 8005092:	fbb3 f3f2 	udiv	r3, r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80b5 	beq.w	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	212c      	movs	r1, #44	; 0x2c
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	3355      	adds	r3, #85	; 0x55
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f083 0301 	eor.w	r3, r3, #1
 80050b8:	b2d8      	uxtb	r0, r3
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	212c      	movs	r1, #44	; 0x2c
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	4413      	add	r3, r2
 80050c6:	3355      	adds	r3, #85	; 0x55
 80050c8:	4602      	mov	r2, r0
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	e09f      	b.n	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	212c      	movs	r1, #44	; 0x2c
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	3361      	adds	r3, #97	; 0x61
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d109      	bne.n	80050f6 <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	212c      	movs	r1, #44	; 0x2c
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	3360      	adds	r3, #96	; 0x60
 80050f0:	2202      	movs	r2, #2
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	e08b      	b.n	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	212c      	movs	r1, #44	; 0x2c
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	3361      	adds	r3, #97	; 0x61
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b04      	cmp	r3, #4
 8005108:	d109      	bne.n	800511e <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	212c      	movs	r1, #44	; 0x2c
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	4413      	add	r3, r2
 8005116:	3360      	adds	r3, #96	; 0x60
 8005118:	2202      	movs	r2, #2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e077      	b.n	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	212c      	movs	r1, #44	; 0x2c
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	3361      	adds	r3, #97	; 0x61
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d109      	bne.n	8005146 <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	212c      	movs	r1, #44	; 0x2c
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	4413      	add	r3, r2
 800513e:	3360      	adds	r3, #96	; 0x60
 8005140:	2205      	movs	r2, #5
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e063      	b.n	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	212c      	movs	r1, #44	; 0x2c
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	4413      	add	r3, r2
 8005152:	3361      	adds	r3, #97	; 0x61
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b06      	cmp	r3, #6
 8005158:	d009      	beq.n	800516e <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	212c      	movs	r1, #44	; 0x2c
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	3361      	adds	r3, #97	; 0x61
 8005168:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800516a:	2b08      	cmp	r3, #8
 800516c:	d14f      	bne.n	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	212c      	movs	r1, #44	; 0x2c
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	4413      	add	r3, r2
 800517a:	335c      	adds	r3, #92	; 0x5c
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	202c      	movs	r0, #44	; 0x2c
 8005186:	fb00 f303 	mul.w	r3, r0, r3
 800518a:	440b      	add	r3, r1
 800518c:	335c      	adds	r3, #92	; 0x5c
 800518e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	212c      	movs	r1, #44	; 0x2c
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	4413      	add	r3, r2
 800519c:	335c      	adds	r3, #92	; 0x5c
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d912      	bls.n	80051ca <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	212c      	movs	r1, #44	; 0x2c
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	335c      	adds	r3, #92	; 0x5c
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	212c      	movs	r1, #44	; 0x2c
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	4413      	add	r3, r2
 80051c2:	3360      	adds	r3, #96	; 0x60
 80051c4:	2204      	movs	r2, #4
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e021      	b.n	800520e <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	212c      	movs	r1, #44	; 0x2c
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	3360      	adds	r3, #96	; 0x60
 80051d8:	2202      	movs	r2, #2
 80051da:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051f2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051fa:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	461a      	mov	r2, r3
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	461a      	mov	r2, r3
 800521c:	2302      	movs	r3, #2
 800521e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	b2d9      	uxtb	r1, r3
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	202c      	movs	r0, #44	; 0x2c
 800522a:	fb00 f303 	mul.w	r3, r0, r3
 800522e:	4413      	add	r3, r2
 8005230:	3360      	adds	r3, #96	; 0x60
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f00b fc94 	bl	8010b64 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800523c:	bf00      	nop
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	0c5b      	lsrs	r3, r3, #17
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005278:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d004      	beq.n	800528a <HCD_RXQLVL_IRQHandler+0x46>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b05      	cmp	r3, #5
 8005284:	f000 80a9 	beq.w	80053da <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005288:	e0aa      	b.n	80053e0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80a6 	beq.w	80053de <HCD_RXQLVL_IRQHandler+0x19a>
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	212c      	movs	r1, #44	; 0x2c
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	4413      	add	r3, r2
 800529e:	3344      	adds	r3, #68	; 0x44
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 809b 	beq.w	80053de <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	212c      	movs	r1, #44	; 0x2c
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	3350      	adds	r3, #80	; 0x50
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	441a      	add	r2, r3
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	202c      	movs	r0, #44	; 0x2c
 80052c2:	fb00 f303 	mul.w	r3, r0, r3
 80052c6:	440b      	add	r3, r1
 80052c8:	334c      	adds	r3, #76	; 0x4c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d87a      	bhi.n	80053c6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	212c      	movs	r1, #44	; 0x2c
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	4413      	add	r3, r2
 80052e0:	3344      	adds	r3, #68	; 0x44
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	b292      	uxth	r2, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	f002 fe31 	bl	8007f50 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	212c      	movs	r1, #44	; 0x2c
 80052f4:	fb01 f303 	mul.w	r3, r1, r3
 80052f8:	4413      	add	r3, r2
 80052fa:	3344      	adds	r3, #68	; 0x44
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	441a      	add	r2, r3
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	202c      	movs	r0, #44	; 0x2c
 8005308:	fb00 f303 	mul.w	r3, r0, r3
 800530c:	440b      	add	r3, r1
 800530e:	3344      	adds	r3, #68	; 0x44
 8005310:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	212c      	movs	r1, #44	; 0x2c
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	3350      	adds	r3, #80	; 0x50
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	441a      	add	r2, r3
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	202c      	movs	r0, #44	; 0x2c
 800532c:	fb00 f303 	mul.w	r3, r0, r3
 8005330:	440b      	add	r3, r1
 8005332:	3350      	adds	r3, #80	; 0x50
 8005334:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	4413      	add	r3, r2
 800533e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	0cdb      	lsrs	r3, r3, #19
 8005346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800534a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	212c      	movs	r1, #44	; 0x2c
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	3340      	adds	r3, #64	; 0x40
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4293      	cmp	r3, r2
 8005362:	d13c      	bne.n	80053de <HCD_RXQLVL_IRQHandler+0x19a>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d039      	beq.n	80053de <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005380:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005388:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	4413      	add	r3, r2
 8005392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005396:	461a      	mov	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	212c      	movs	r1, #44	; 0x2c
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	3354      	adds	r3, #84	; 0x54
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	f083 0301 	eor.w	r3, r3, #1
 80053b0:	b2d8      	uxtb	r0, r3
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	212c      	movs	r1, #44	; 0x2c
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	4413      	add	r3, r2
 80053be:	3354      	adds	r3, #84	; 0x54
 80053c0:	4602      	mov	r2, r0
 80053c2:	701a      	strb	r2, [r3, #0]
      break;
 80053c4:	e00b      	b.n	80053de <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	3360      	adds	r3, #96	; 0x60
 80053d4:	2204      	movs	r2, #4
 80053d6:	701a      	strb	r2, [r3, #0]
      break;
 80053d8:	e001      	b.n	80053de <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80053de:	bf00      	nop
  }
}
 80053e0:	bf00      	nop
 80053e2:	3728      	adds	r7, #40	; 0x28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005414:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d10b      	bne.n	8005438 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b01      	cmp	r3, #1
 8005428:	d102      	bne.n	8005430 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f00b fb7e 	bl	8010b2c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f043 0302 	orr.w	r3, r3, #2
 8005436:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b08      	cmp	r3, #8
 8005440:	d132      	bne.n	80054a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f043 0308 	orr.w	r3, r3, #8
 8005448:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b04      	cmp	r3, #4
 8005452:	d126      	bne.n	80054a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d113      	bne.n	8005484 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005466:	d106      	bne.n	8005476 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2102      	movs	r1, #2
 800546e:	4618      	mov	r0, r3
 8005470:	f002 fe9c 	bl	80081ac <USB_InitFSLSPClkSel>
 8005474:	e011      	b.n	800549a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f002 fe95 	bl	80081ac <USB_InitFSLSPClkSel>
 8005482:	e00a      	b.n	800549a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d106      	bne.n	800549a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005492:	461a      	mov	r2, r3
 8005494:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005498:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f00b fb70 	bl	8010b80 <HAL_HCD_PortEnabled_Callback>
 80054a0:	e002      	b.n	80054a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f00b fb7a 	bl	8010b9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d103      	bne.n	80054ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f043 0320 	orr.w	r3, r3, #32
 80054b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054c0:	461a      	mov	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6013      	str	r3, [r2, #0]
}
 80054c6:	bf00      	nop
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054d4:	4b0d      	ldr	r3, [pc, #52]	; (800550c <HAL_PWREx_GetVoltageRange+0x3c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e0:	d102      	bne.n	80054e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80054e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e6:	e00b      	b.n	8005500 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80054e8:	4b08      	ldr	r3, [pc, #32]	; (800550c <HAL_PWREx_GetVoltageRange+0x3c>)
 80054ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f6:	d102      	bne.n	80054fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80054f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054fc:	e000      	b.n	8005500 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80054fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40007000 	.word	0x40007000

08005510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d141      	bne.n	80055a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800551e:	4b4b      	ldr	r3, [pc, #300]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552a:	d131      	bne.n	8005590 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800552c:	4b47      	ldr	r3, [pc, #284]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005532:	4a46      	ldr	r2, [pc, #280]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800553c:	4b43      	ldr	r3, [pc, #268]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005544:	4a41      	ldr	r2, [pc, #260]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800554a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800554c:	4b40      	ldr	r3, [pc, #256]	; (8005650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2232      	movs	r2, #50	; 0x32
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	4a3f      	ldr	r2, [pc, #252]	; (8005654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	0c9b      	lsrs	r3, r3, #18
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005562:	e002      	b.n	800556a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3b01      	subs	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800556a:	4b38      	ldr	r3, [pc, #224]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005576:	d102      	bne.n	800557e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f2      	bne.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800557e:	4b33      	ldr	r3, [pc, #204]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558a:	d158      	bne.n	800563e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e057      	b.n	8005640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005590:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005596:	4a2d      	ldr	r2, [pc, #180]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800559c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055a0:	e04d      	b.n	800563e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a8:	d141      	bne.n	800562e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055aa:	4b28      	ldr	r3, [pc, #160]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b6:	d131      	bne.n	800561c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055b8:	4b24      	ldr	r3, [pc, #144]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055be:	4a23      	ldr	r2, [pc, #140]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055c8:	4b20      	ldr	r3, [pc, #128]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055d0:	4a1e      	ldr	r2, [pc, #120]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80055d8:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2232      	movs	r2, #50	; 0x32
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	0c9b      	lsrs	r3, r3, #18
 80055ea:	3301      	adds	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055ee:	e002      	b.n	80055f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055f6:	4b15      	ldr	r3, [pc, #84]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005602:	d102      	bne.n	800560a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f2      	bne.n	80055f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005616:	d112      	bne.n	800563e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e011      	b.n	8005640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005622:	4a0a      	ldr	r2, [pc, #40]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800562c:	e007      	b.n	800563e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800562e:	4b07      	ldr	r3, [pc, #28]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005636:	4a05      	ldr	r2, [pc, #20]	; (800564c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800563c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40007000 	.word	0x40007000
 8005650:	20000000 	.word	0x20000000
 8005654:	431bde83 	.word	0x431bde83

08005658 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_PWREx_EnableVddUSB+0x1c>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	4a04      	ldr	r2, [pc, #16]	; (8005674 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005666:	6053      	str	r3, [r2, #4]
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40007000 	.word	0x40007000

08005678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	; 0x28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d102      	bne.n	800568c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f000 bc76 	b.w	8005f78 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800568c:	4ba1      	ldr	r3, [pc, #644]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 030c 	and.w	r3, r3, #12
 8005694:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005696:	4b9f      	ldr	r3, [pc, #636]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80e6 	beq.w	800587a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_RCC_OscConfig+0x4c>
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	2b0c      	cmp	r3, #12
 80056b8:	f040 808d 	bne.w	80057d6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	f040 8089 	bne.w	80057d6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056c4:	4b93      	ldr	r3, [pc, #588]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d006      	beq.n	80056de <HAL_RCC_OscConfig+0x66>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f000 bc4d 	b.w	8005f78 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056e2:	4b8c      	ldr	r3, [pc, #560]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <HAL_RCC_OscConfig+0x80>
 80056ee:	4b89      	ldr	r3, [pc, #548]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f6:	e005      	b.n	8005704 <HAL_RCC_OscConfig+0x8c>
 80056f8:	4b86      	ldr	r3, [pc, #536]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80056fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005704:	4293      	cmp	r3, r2
 8005706:	d224      	bcs.n	8005752 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fe5f 	bl	80063d0 <RCC_SetFlashLatencyFromMSIRange>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	f000 bc2d 	b.w	8005f78 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800571e:	4b7d      	ldr	r3, [pc, #500]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a7c      	ldr	r2, [pc, #496]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005724:	f043 0308 	orr.w	r3, r3, #8
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4b7a      	ldr	r3, [pc, #488]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	4977      	ldr	r1, [pc, #476]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800573c:	4b75      	ldr	r3, [pc, #468]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	4972      	ldr	r1, [pc, #456]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800574c:	4313      	orrs	r3, r2
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	e025      	b.n	800579e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005752:	4b70      	ldr	r3, [pc, #448]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6f      	ldr	r2, [pc, #444]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005758:	f043 0308 	orr.w	r3, r3, #8
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	4b6d      	ldr	r3, [pc, #436]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	496a      	ldr	r1, [pc, #424]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005770:	4b68      	ldr	r3, [pc, #416]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	4965      	ldr	r1, [pc, #404]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005780:	4313      	orrs	r3, r2
 8005782:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fe1e 	bl	80063d0 <RCC_SetFlashLatencyFromMSIRange>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e3ec      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800579e:	f000 fd53 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 80057a2:	4602      	mov	r2, r0
 80057a4:	4b5b      	ldr	r3, [pc, #364]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	495a      	ldr	r1, [pc, #360]	; (8005918 <HAL_RCC_OscConfig+0x2a0>)
 80057b0:	5ccb      	ldrb	r3, [r1, r3]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	4a58      	ldr	r2, [pc, #352]	; (800591c <HAL_RCC_OscConfig+0x2a4>)
 80057bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80057be:	4b58      	ldr	r3, [pc, #352]	; (8005920 <HAL_RCC_OscConfig+0x2a8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fc fbd6 	bl	8001f74 <HAL_InitTick>
 80057c8:	4603      	mov	r3, r0
 80057ca:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d052      	beq.n	8005878 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	e3d0      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d032      	beq.n	8005844 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057de:	4b4d      	ldr	r3, [pc, #308]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a4c      	ldr	r2, [pc, #304]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057ea:	f7fc fc13 	bl	8002014 <HAL_GetTick>
 80057ee:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057f2:	f7fc fc0f 	bl	8002014 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e3b9      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005804:	4b43      	ldr	r3, [pc, #268]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005810:	4b40      	ldr	r3, [pc, #256]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a3f      	ldr	r2, [pc, #252]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005816:	f043 0308 	orr.w	r3, r3, #8
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	493a      	ldr	r1, [pc, #232]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800582a:	4313      	orrs	r3, r2
 800582c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800582e:	4b39      	ldr	r3, [pc, #228]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	4935      	ldr	r1, [pc, #212]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	604b      	str	r3, [r1, #4]
 8005842:	e01a      	b.n	800587a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005844:	4b33      	ldr	r3, [pc, #204]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a32      	ldr	r2, [pc, #200]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800584a:	f023 0301 	bic.w	r3, r3, #1
 800584e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005850:	f7fc fbe0 	bl	8002014 <HAL_GetTick>
 8005854:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005858:	f7fc fbdc 	bl	8002014 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e386      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800586a:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x1e0>
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d073      	beq.n	800596e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d005      	beq.n	8005898 <HAL_RCC_OscConfig+0x220>
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d10e      	bne.n	80058b0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d10b      	bne.n	80058b0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005898:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d063      	beq.n	800596c <HAL_RCC_OscConfig+0x2f4>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d15f      	bne.n	800596c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e363      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d106      	bne.n	80058c8 <HAL_RCC_OscConfig+0x250>
 80058ba:	4b16      	ldr	r3, [pc, #88]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a15      	ldr	r2, [pc, #84]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e01d      	b.n	8005904 <HAL_RCC_OscConfig+0x28c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058d0:	d10c      	bne.n	80058ec <HAL_RCC_OscConfig+0x274>
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a0f      	ldr	r2, [pc, #60]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a0c      	ldr	r2, [pc, #48]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e00b      	b.n	8005904 <HAL_RCC_OscConfig+0x28c>
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a08      	ldr	r2, [pc, #32]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	4b06      	ldr	r3, [pc, #24]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a05      	ldr	r2, [pc, #20]	; (8005914 <HAL_RCC_OscConfig+0x29c>)
 80058fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01b      	beq.n	8005944 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fc fb82 	bl	8002014 <HAL_GetTick>
 8005910:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005912:	e010      	b.n	8005936 <HAL_RCC_OscConfig+0x2be>
 8005914:	40021000 	.word	0x40021000
 8005918:	08012a14 	.word	0x08012a14
 800591c:	20000000 	.word	0x20000000
 8005920:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005924:	f7fc fb76 	bl	8002014 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e320      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005936:	4ba0      	ldr	r3, [pc, #640]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x2ac>
 8005942:	e014      	b.n	800596e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fc fb66 	bl	8002014 <HAL_GetTick>
 8005948:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800594c:	f7fc fb62 	bl	8002014 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b64      	cmp	r3, #100	; 0x64
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e30c      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800595e:	4b96      	ldr	r3, [pc, #600]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x2d4>
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800596c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d060      	beq.n	8005a3c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d005      	beq.n	800598c <HAL_RCC_OscConfig+0x314>
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2b0c      	cmp	r3, #12
 8005984:	d119      	bne.n	80059ba <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d116      	bne.n	80059ba <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800598c:	4b8a      	ldr	r3, [pc, #552]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_OscConfig+0x32c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e2e9      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a4:	4b84      	ldr	r3, [pc, #528]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	061b      	lsls	r3, r3, #24
 80059b2:	4981      	ldr	r1, [pc, #516]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b8:	e040      	b.n	8005a3c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d023      	beq.n	8005a0a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c2:	4b7d      	ldr	r3, [pc, #500]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a7c      	ldr	r2, [pc, #496]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ce:	f7fc fb21 	bl	8002014 <HAL_GetTick>
 80059d2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d6:	f7fc fb1d 	bl	8002014 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e2c7      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e8:	4b73      	ldr	r3, [pc, #460]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f4:	4b70      	ldr	r3, [pc, #448]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	061b      	lsls	r3, r3, #24
 8005a02:	496d      	ldr	r1, [pc, #436]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]
 8005a08:	e018      	b.n	8005a3c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0a:	4b6b      	ldr	r3, [pc, #428]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6a      	ldr	r2, [pc, #424]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a16:	f7fc fafd 	bl	8002014 <HAL_GetTick>
 8005a1a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a1e:	f7fc faf9 	bl	8002014 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e2a3      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a30:	4b61      	ldr	r3, [pc, #388]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f0      	bne.n	8005a1e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d07f      	beq.n	8005b48 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d05f      	beq.n	8005b10 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005a50:	4b59      	ldr	r3, [pc, #356]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a56:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d037      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d006      	beq.n	8005a7e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e27c      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8005a88:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a8e:	4a4a      	ldr	r2, [pc, #296]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a98:	f7fc fabc 	bl	8002014 <HAL_GetTick>
 8005a9c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa0:	f7fc fab8 	bl	8002014 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b11      	cmp	r3, #17
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e262      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ab2:	4b41      	ldr	r3, [pc, #260]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1ef      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005ac0:	4b3d      	ldr	r3, [pc, #244]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac6:	f023 0210 	bic.w	r2, r3, #16
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	493a      	ldr	r1, [pc, #232]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ad6:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005adc:	4a36      	ldr	r2, [pc, #216]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fc fa95 	bl	8002014 <HAL_GetTick>
 8005aea:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aee:	f7fc fa91 	bl	8002014 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b11      	cmp	r3, #17
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e23b      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b00:	4b2d      	ldr	r3, [pc, #180]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0ef      	beq.n	8005aee <HAL_RCC_OscConfig+0x476>
 8005b0e:	e01b      	b.n	8005b48 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b10:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b16:	4a28      	ldr	r2, [pc, #160]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b20:	f7fc fa78 	bl	8002014 <HAL_GetTick>
 8005b24:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b28:	f7fc fa74 	bl	8002014 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b11      	cmp	r3, #17
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e21e      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b3a:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1ef      	bne.n	8005b28 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80c1 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b5c:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10e      	bne.n	8005b86 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6c:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b72:	6593      	str	r3, [r2, #88]	; 0x58
 8005b74:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <HAL_RCC_OscConfig+0x540>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <HAL_RCC_OscConfig+0x544>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d11c      	bne.n	8005bcc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <HAL_RCC_OscConfig+0x544>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a09      	ldr	r2, [pc, #36]	; (8005bbc <HAL_RCC_OscConfig+0x544>)
 8005b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9e:	f7fc fa39 	bl	8002014 <HAL_GetTick>
 8005ba2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba4:	e00c      	b.n	8005bc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba6:	f7fc fa35 	bl	8002014 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d905      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e1df      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bc0:	4b99      	ldr	r3, [pc, #612]	; (8005e28 <HAL_RCC_OscConfig+0x7b0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0ec      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02c      	beq.n	8005c32 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005bd8:	4b94      	ldr	r3, [pc, #592]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	4990      	ldr	r1, [pc, #576]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005bfe:	4b8b      	ldr	r3, [pc, #556]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c04:	4a89      	ldr	r2, [pc, #548]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c0e:	4b87      	ldr	r3, [pc, #540]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c14:	4a85      	ldr	r2, [pc, #532]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c16:	f043 0301 	orr.w	r3, r3, #1
 8005c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c1e:	e018      	b.n	8005c52 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c20:	4b82      	ldr	r3, [pc, #520]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	4a81      	ldr	r2, [pc, #516]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c30:	e00f      	b.n	8005c52 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c32:	4b7e      	ldr	r3, [pc, #504]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	4a7c      	ldr	r2, [pc, #496]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005c42:	4b7a      	ldr	r3, [pc, #488]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	4a78      	ldr	r2, [pc, #480]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c4a:	f023 0304 	bic.w	r3, r3, #4
 8005c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fc f9db 	bl	8002014 <HAL_GetTick>
 8005c5e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c60:	e00a      	b.n	8005c78 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7fc f9d7 	bl	8002014 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e17f      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c78:	4b6c      	ldr	r3, [pc, #432]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0ed      	beq.n	8005c62 <HAL_RCC_OscConfig+0x5ea>
 8005c86:	e01d      	b.n	8005cc4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fc f9c4 	bl	8002014 <HAL_GetTick>
 8005c8c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c90:	f7fc f9c0 	bl	8002014 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e168      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ca6:	4b61      	ldr	r3, [pc, #388]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1ed      	bne.n	8005c90 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005cb4:	4b5d      	ldr	r3, [pc, #372]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cba:	4a5c      	ldr	r2, [pc, #368]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ccc:	4b57      	ldr	r3, [pc, #348]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd0:	4a56      	ldr	r2, [pc, #344]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d03c      	beq.n	8005d5e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01c      	beq.n	8005d26 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cec:	4b4f      	ldr	r3, [pc, #316]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cf2:	4a4e      	ldr	r2, [pc, #312]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fc f98a 	bl	8002014 <HAL_GetTick>
 8005d00:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d04:	f7fc f986 	bl	8002014 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e130      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d16:	4b45      	ldr	r3, [pc, #276]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0ef      	beq.n	8005d04 <HAL_RCC_OscConfig+0x68c>
 8005d24:	e01b      	b.n	8005d5e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d26:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d2c:	4a3f      	ldr	r2, [pc, #252]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d36:	f7fc f96d 	bl	8002014 <HAL_GetTick>
 8005d3a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d3e:	f7fc f969 	bl	8002014 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e113      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d50:	4b36      	ldr	r3, [pc, #216]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ef      	bne.n	8005d3e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 8107 	beq.w	8005f76 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	f040 80cf 	bne.w	8005f10 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d72:	4b2e      	ldr	r3, [pc, #184]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 0203 	and.w	r2, r3, #3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d12c      	bne.n	8005de0 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d90:	3b01      	subs	r3, #1
 8005d92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d123      	bne.n	8005de0 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d11b      	bne.n	8005de0 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d113      	bne.n	8005de0 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d109      	bne.n	8005de0 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d071      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d06c      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d105      	bne.n	8005dfe <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0ba      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e02:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <HAL_RCC_OscConfig+0x7b4>)
 8005e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e0e:	f7fc f901 	bl	8002014 <HAL_GetTick>
 8005e12:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e14:	e00c      	b.n	8005e30 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e16:	f7fc f8fd 	bl	8002014 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d905      	bls.n	8005e30 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e0a7      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
 8005e28:	40007000 	.word	0x40007000
 8005e2c:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e30:	4b53      	ldr	r3, [pc, #332]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1ec      	bne.n	8005e16 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e3c:	4b50      	ldr	r3, [pc, #320]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	4b50      	ldr	r3, [pc, #320]	; (8005f84 <HAL_RCC_OscConfig+0x90c>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e4c:	3a01      	subs	r2, #1
 8005e4e:	0112      	lsls	r2, r2, #4
 8005e50:	4311      	orrs	r1, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e56:	0212      	lsls	r2, r2, #8
 8005e58:	4311      	orrs	r1, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e5e:	0852      	lsrs	r2, r2, #1
 8005e60:	3a01      	subs	r2, #1
 8005e62:	0552      	lsls	r2, r2, #21
 8005e64:	4311      	orrs	r1, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e6a:	0852      	lsrs	r2, r2, #1
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	0652      	lsls	r2, r2, #25
 8005e70:	4311      	orrs	r1, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e76:	06d2      	lsls	r2, r2, #27
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	4941      	ldr	r1, [pc, #260]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e80:	4b3f      	ldr	r3, [pc, #252]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a3e      	ldr	r2, [pc, #248]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e8c:	4b3c      	ldr	r3, [pc, #240]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4a3b      	ldr	r2, [pc, #236]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e98:	f7fc f8bc 	bl	8002014 <HAL_GetTick>
 8005e9c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea0:	f7fc f8b8 	bl	8002014 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e062      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eb2:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ebe:	e05a      	b.n	8005f76 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e059      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec4:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d152      	bne.n	8005f76 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ed0:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005edc:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a27      	ldr	r2, [pc, #156]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ee8:	f7fc f894 	bl	8002014 <HAL_GetTick>
 8005eec:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fc f890 	bl	8002014 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e03a      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f02:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x878>
 8005f0e:	e032      	b.n	8005f76 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	2b0c      	cmp	r3, #12
 8005f14:	d02d      	beq.n	8005f72 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f16:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f20:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005f22:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d105      	bne.n	8005f3a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005f2e:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f34:	f023 0303 	bic.w	r3, r3, #3
 8005f38:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4a:	f7fc f863 	bl	8002014 <HAL_GetTick>
 8005f4e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f52:	f7fc f85f 	bl	8002014 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e009      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <HAL_RCC_OscConfig+0x908>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1f0      	bne.n	8005f52 <HAL_RCC_OscConfig+0x8da>
 8005f70:	e001      	b.n	8005f76 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3728      	adds	r7, #40	; 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40021000 	.word	0x40021000
 8005f84:	019d800c 	.word	0x019d800c

08005f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e10f      	b.n	80061c0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa0:	4b89      	ldr	r3, [pc, #548]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d910      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fae:	4b86      	ldr	r3, [pc, #536]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f023 020f 	bic.w	r2, r3, #15
 8005fb6:	4984      	ldr	r1, [pc, #528]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b82      	ldr	r3, [pc, #520]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0f7      	b.n	80061c0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8089 	beq.w	80060f0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d133      	bne.n	800604e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fe6:	4b79      	ldr	r3, [pc, #484]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e0e4      	b.n	80061c0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005ff6:	f000 fa45 	bl	8006484 <RCC_GetSysClockFreqFromPLLSource>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4a74      	ldr	r2, [pc, #464]	; (80061d0 <HAL_RCC_ClockConfig+0x248>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d955      	bls.n	80060ae <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006002:	4b72      	ldr	r3, [pc, #456]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800600e:	4b6f      	ldr	r3, [pc, #444]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006016:	4a6d      	ldr	r2, [pc, #436]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	e044      	b.n	80060ae <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d03e      	beq.n	80060ae <HAL_RCC_ClockConfig+0x126>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d13a      	bne.n	80060ae <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006038:	4b64      	ldr	r3, [pc, #400]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006040:	4a62      	ldr	r2, [pc, #392]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006046:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e02f      	b.n	80060ae <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006056:	4b5d      	ldr	r3, [pc, #372]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d115      	bne.n	800608e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0ac      	b.n	80061c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800606e:	4b57      	ldr	r3, [pc, #348]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0a0      	b.n	80061c0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800607e:	4b53      	ldr	r3, [pc, #332]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e098      	b.n	80061c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800608e:	f000 f8db 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 8006092:	4603      	mov	r3, r0
 8006094:	4a4e      	ldr	r2, [pc, #312]	; (80061d0 <HAL_RCC_ClockConfig+0x248>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d909      	bls.n	80060ae <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800609a:	4b4c      	ldr	r3, [pc, #304]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a2:	4a4a      	ldr	r2, [pc, #296]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80060aa:	2380      	movs	r3, #128	; 0x80
 80060ac:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060ae:	4b47      	ldr	r3, [pc, #284]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f023 0203 	bic.w	r2, r3, #3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	4944      	ldr	r1, [pc, #272]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c0:	f7fb ffa8 	bl	8002014 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c6:	e00a      	b.n	80060de <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c8:	f7fb ffa4 	bl	8002014 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e070      	b.n	80061c0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	4b3b      	ldr	r3, [pc, #236]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 020c 	and.w	r2, r3, #12
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d1eb      	bne.n	80060c8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060fc:	4b33      	ldr	r3, [pc, #204]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4930      	ldr	r1, [pc, #192]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
 800610e:	e008      	b.n	8006122 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d105      	bne.n	8006122 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006116:	4b2d      	ldr	r3, [pc, #180]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	4a2c      	ldr	r2, [pc, #176]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800611c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006120:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006122:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d210      	bcs.n	8006152 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f023 020f 	bic.w	r2, r3, #15
 8006138:	4923      	ldr	r1, [pc, #140]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	4313      	orrs	r3, r2
 800613e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006140:	4b21      	ldr	r3, [pc, #132]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 030f 	and.w	r3, r3, #15
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d001      	beq.n	8006152 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e036      	b.n	80061c0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800615e:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	4918      	ldr	r1, [pc, #96]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800616c:	4313      	orrs	r3, r2
 800616e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d009      	beq.n	8006190 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800617c:	4b13      	ldr	r3, [pc, #76]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4910      	ldr	r1, [pc, #64]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800618c:	4313      	orrs	r3, r2
 800618e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006190:	f000 f85a 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 8006194:	4602      	mov	r2, r0
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	091b      	lsrs	r3, r3, #4
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	490c      	ldr	r1, [pc, #48]	; (80061d4 <HAL_RCC_ClockConfig+0x24c>)
 80061a2:	5ccb      	ldrb	r3, [r1, r3]
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ac:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <HAL_RCC_ClockConfig+0x250>)
 80061ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <HAL_RCC_ClockConfig+0x254>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fb fedd 	bl	8001f74 <HAL_InitTick>
 80061ba:	4603      	mov	r3, r0
 80061bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40022000 	.word	0x40022000
 80061cc:	40021000 	.word	0x40021000
 80061d0:	04c4b400 	.word	0x04c4b400
 80061d4:	08012a14 	.word	0x08012a14
 80061d8:	20000000 	.word	0x20000000
 80061dc:	20000004 	.word	0x20000004

080061e0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80061ec:	4b15      	ldr	r3, [pc, #84]	; (8006244 <HAL_RCC_MCOConfig+0x64>)
 80061ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f0:	4a14      	ldr	r2, [pc, #80]	; (8006244 <HAL_RCC_MCOConfig+0x64>)
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <HAL_RCC_MCOConfig+0x64>)
 80061fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8006204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620a:	2302      	movs	r3, #2
 800620c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800620e:	2302      	movs	r3, #2
 8006210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006216:	2300      	movs	r3, #0
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800621a:	f107 0314 	add.w	r3, r7, #20
 800621e:	4619      	mov	r1, r3
 8006220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006224:	f7fd fbe6 	bl	80039f4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8006228:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_RCC_MCOConfig+0x64>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	430b      	orrs	r3, r1
 8006236:	4903      	ldr	r1, [pc, #12]	; (8006244 <HAL_RCC_MCOConfig+0x64>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]
}
 800623c:	bf00      	nop
 800623e:	3728      	adds	r7, #40	; 0x28
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40021000 	.word	0x40021000

08006248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006248:	b480      	push	{r7}
 800624a:	b089      	sub	sp, #36	; 0x24
 800624c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006256:	4b3e      	ldr	r3, [pc, #248]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 030c 	and.w	r3, r3, #12
 800625e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006260:	4b3b      	ldr	r3, [pc, #236]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_RCC_GetSysClockFreq+0x34>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b0c      	cmp	r3, #12
 8006274:	d121      	bne.n	80062ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d11e      	bne.n	80062ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800627c:	4b34      	ldr	r3, [pc, #208]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d107      	bne.n	8006298 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006288:	4b31      	ldr	r3, [pc, #196]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 800628a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	e005      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006298:	4b2d      	ldr	r3, [pc, #180]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062a4:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <HAL_RCC_GetSysClockFreq+0x10c>)
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10d      	bne.n	80062d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062b8:	e00a      	b.n	80062d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d102      	bne.n	80062c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062c0:	4b25      	ldr	r3, [pc, #148]	; (8006358 <HAL_RCC_GetSysClockFreq+0x110>)
 80062c2:	61bb      	str	r3, [r7, #24]
 80062c4:	e004      	b.n	80062d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d101      	bne.n	80062d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062cc:	4b23      	ldr	r3, [pc, #140]	; (800635c <HAL_RCC_GetSysClockFreq+0x114>)
 80062ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b0c      	cmp	r3, #12
 80062d4:	d134      	bne.n	8006340 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062d6:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d003      	beq.n	80062ee <HAL_RCC_GetSysClockFreq+0xa6>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d003      	beq.n	80062f4 <HAL_RCC_GetSysClockFreq+0xac>
 80062ec:	e005      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80062ee:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <HAL_RCC_GetSysClockFreq+0x110>)
 80062f0:	617b      	str	r3, [r7, #20]
      break;
 80062f2:	e005      	b.n	8006300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80062f4:	4b19      	ldr	r3, [pc, #100]	; (800635c <HAL_RCC_GetSysClockFreq+0x114>)
 80062f6:	617b      	str	r3, [r7, #20]
      break;
 80062f8:	e002      	b.n	8006300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	617b      	str	r3, [r7, #20]
      break;
 80062fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006300:	4b13      	ldr	r3, [pc, #76]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	3301      	adds	r3, #1
 800630c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800630e:	4b10      	ldr	r3, [pc, #64]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	fb02 f203 	mul.w	r2, r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <HAL_RCC_GetSysClockFreq+0x108>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	0e5b      	lsrs	r3, r3, #25
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	3301      	adds	r3, #1
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	fbb2 f3f3 	udiv	r3, r2, r3
 800633e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006340:	69bb      	ldr	r3, [r7, #24]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3724      	adds	r7, #36	; 0x24
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40021000 	.word	0x40021000
 8006354:	08012a2c 	.word	0x08012a2c
 8006358:	00f42400 	.word	0x00f42400
 800635c:	007a1200 	.word	0x007a1200

08006360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006364:	4b03      	ldr	r3, [pc, #12]	; (8006374 <HAL_RCC_GetHCLKFreq+0x14>)
 8006366:	681b      	ldr	r3, [r3, #0]
}
 8006368:	4618      	mov	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000000 	.word	0x20000000

08006378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800637c:	f7ff fff0 	bl	8006360 <HAL_RCC_GetHCLKFreq>
 8006380:	4602      	mov	r2, r0
 8006382:	4b06      	ldr	r3, [pc, #24]	; (800639c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	4904      	ldr	r1, [pc, #16]	; (80063a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800638e:	5ccb      	ldrb	r3, [r1, r3]
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006398:	4618      	mov	r0, r3
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40021000 	.word	0x40021000
 80063a0:	08012a24 	.word	0x08012a24

080063a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063a8:	f7ff ffda 	bl	8006360 <HAL_RCC_GetHCLKFreq>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	0adb      	lsrs	r3, r3, #11
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	4904      	ldr	r1, [pc, #16]	; (80063cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80063ba:	5ccb      	ldrb	r3, [r1, r3]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40021000 	.word	0x40021000
 80063cc:	08012a24 	.word	0x08012a24

080063d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063d8:	2300      	movs	r3, #0
 80063da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063dc:	4b27      	ldr	r3, [pc, #156]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063e8:	f7ff f872 	bl	80054d0 <HAL_PWREx_GetVoltageRange>
 80063ec:	6178      	str	r0, [r7, #20]
 80063ee:	e014      	b.n	800641a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063f0:	4b22      	ldr	r3, [pc, #136]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	4a21      	ldr	r2, [pc, #132]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fa:	6593      	str	r3, [r2, #88]	; 0x58
 80063fc:	4b1f      	ldr	r3, [pc, #124]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006408:	f7ff f862 	bl	80054d0 <HAL_PWREx_GetVoltageRange>
 800640c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800640e:	4b1b      	ldr	r3, [pc, #108]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	4a1a      	ldr	r2, [pc, #104]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006418:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006420:	d10b      	bne.n	800643a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d913      	bls.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2ba0      	cmp	r3, #160	; 0xa0
 800642c:	d902      	bls.n	8006434 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800642e:	2302      	movs	r3, #2
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	e00d      	b.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006434:	2301      	movs	r3, #1
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	e00a      	b.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b7f      	cmp	r3, #127	; 0x7f
 800643e:	d902      	bls.n	8006446 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006440:	2302      	movs	r3, #2
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	e004      	b.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b70      	cmp	r3, #112	; 0x70
 800644a:	d101      	bne.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800644c:	2301      	movs	r3, #1
 800644e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f023 020f 	bic.w	r2, r3, #15
 8006458:	4909      	ldr	r1, [pc, #36]	; (8006480 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	429a      	cmp	r2, r3
 800646c:	d001      	beq.n	8006472 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	40021000 	.word	0x40021000
 8006480:	40022000 	.word	0x40022000

08006484 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800648e:	4b2d      	ldr	r3, [pc, #180]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d118      	bne.n	80064cc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800649a:	4b2a      	ldr	r3, [pc, #168]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d107      	bne.n	80064b6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80064a6:	4b27      	ldr	r3, [pc, #156]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80064a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ac:	0a1b      	lsrs	r3, r3, #8
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e005      	b.n	80064c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80064b6:	4b23      	ldr	r3, [pc, #140]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80064c2:	4a21      	ldr	r2, [pc, #132]	; (8006548 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ca:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064cc:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d003      	beq.n	80064e4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d003      	beq.n	80064ea <RCC_GetSysClockFreqFromPLLSource+0x66>
 80064e2:	e005      	b.n	80064f0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80064e4:	4b19      	ldr	r3, [pc, #100]	; (800654c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80064e6:	613b      	str	r3, [r7, #16]
    break;
 80064e8:	e005      	b.n	80064f6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80064ea:	4b19      	ldr	r3, [pc, #100]	; (8006550 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80064ec:	613b      	str	r3, [r7, #16]
    break;
 80064ee:	e002      	b.n	80064f6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	613b      	str	r3, [r7, #16]
    break;
 80064f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064f6:	4b13      	ldr	r3, [pc, #76]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	3301      	adds	r3, #1
 8006502:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006504:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	fb02 f203 	mul.w	r2, r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	fbb2 f3f3 	udiv	r3, r2, r3
 800651a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	0e5b      	lsrs	r3, r3, #25
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	3301      	adds	r3, #1
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006536:	683b      	ldr	r3, [r7, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	40021000 	.word	0x40021000
 8006548:	08012a2c 	.word	0x08012a2c
 800654c:	00f42400 	.word	0x00f42400
 8006550:	007a1200 	.word	0x007a1200

08006554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800655c:	2300      	movs	r3, #0
 800655e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006560:	2300      	movs	r3, #0
 8006562:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800656c:	2b00      	cmp	r3, #0
 800656e:	d040      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d02a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d825      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800657c:	2b60      	cmp	r3, #96	; 0x60
 800657e:	d026      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006580:	2b60      	cmp	r3, #96	; 0x60
 8006582:	d821      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d006      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d81d      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006590:	2b20      	cmp	r3, #32
 8006592:	d010      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006594:	e018      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006596:	4b89      	ldr	r3, [pc, #548]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	4a88      	ldr	r2, [pc, #544]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800659c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065a2:	e015      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fb4e 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065b4:	e00c      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3320      	adds	r3, #32
 80065ba:	2100      	movs	r1, #0
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fc39 	bl	8006e34 <RCCEx_PLLSAI2_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065c6:	e003      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	74fb      	strb	r3, [r7, #19]
      break;
 80065cc:	e000      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80065ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d0:	7cfb      	ldrb	r3, [r7, #19]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065d6:	4b79      	ldr	r3, [pc, #484]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e4:	4975      	ldr	r1, [pc, #468]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80065ec:	e001      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	7cfb      	ldrb	r3, [r7, #19]
 80065f0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d047      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006606:	d030      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660c:	d82a      	bhi.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800660e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006612:	d02a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006618:	d824      	bhi.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800661a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661e:	d008      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006624:	d81e      	bhi.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d010      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006630:	e018      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006632:	4b62      	ldr	r3, [pc, #392]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a61      	ldr	r2, [pc, #388]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800663c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800663e:	e015      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3304      	adds	r3, #4
 8006644:	2100      	movs	r1, #0
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fb00 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006650:	e00c      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3320      	adds	r3, #32
 8006656:	2100      	movs	r1, #0
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fbeb 	bl	8006e34 <RCCEx_PLLSAI2_Config>
 800665e:	4603      	mov	r3, r0
 8006660:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006662:	e003      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	74fb      	strb	r3, [r7, #19]
      break;
 8006668:	e000      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800666a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800666c:	7cfb      	ldrb	r3, [r7, #19]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006672:	4b52      	ldr	r3, [pc, #328]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006674:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	494e      	ldr	r1, [pc, #312]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006688:	e001      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	7cfb      	ldrb	r3, [r7, #19]
 800668c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 809f 	beq.w	80067da <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800669c:	2300      	movs	r3, #0
 800669e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066a0:	4b46      	ldr	r3, [pc, #280]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80066b0:	2300      	movs	r3, #0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b6:	4b41      	ldr	r3, [pc, #260]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	4a40      	ldr	r2, [pc, #256]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c0:	6593      	str	r3, [r2, #88]	; 0x58
 80066c2:	4b3e      	ldr	r3, [pc, #248]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ca:	60bb      	str	r3, [r7, #8]
 80066cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ce:	2301      	movs	r3, #1
 80066d0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066d2:	4b3b      	ldr	r3, [pc, #236]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a3a      	ldr	r2, [pc, #232]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066de:	f7fb fc99 	bl	8002014 <HAL_GetTick>
 80066e2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066e4:	e009      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e6:	f7fb fc95 	bl	8002014 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d902      	bls.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	74fb      	strb	r3, [r7, #19]
        break;
 80066f8:	e005      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066fa:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0ef      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006706:	7cfb      	ldrb	r3, [r7, #19]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d15b      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800670c:	4b2b      	ldr	r3, [pc, #172]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006716:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01f      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	429a      	cmp	r2, r3
 8006728:	d019      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800672a:	4b24      	ldr	r3, [pc, #144]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006734:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006736:	4b21      	ldr	r3, [pc, #132]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673c:	4a1f      	ldr	r2, [pc, #124]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800673e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006746:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674c:	4a1b      	ldr	r2, [pc, #108]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800674e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006756:	4a19      	ldr	r2, [pc, #100]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d016      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006768:	f7fb fc54 	bl	8002014 <HAL_GetTick>
 800676c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800676e:	e00b      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006770:	f7fb fc50 	bl	8002014 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	f241 3288 	movw	r2, #5000	; 0x1388
 800677e:	4293      	cmp	r3, r2
 8006780:	d902      	bls.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	74fb      	strb	r3, [r7, #19]
            break;
 8006786:	e006      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0ec      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006796:	7cfb      	ldrb	r3, [r7, #19]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10c      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ac:	4903      	ldr	r1, [pc, #12]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067b4:	e008      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067b6:	7cfb      	ldrb	r3, [r7, #19]
 80067b8:	74bb      	strb	r3, [r7, #18]
 80067ba:	e005      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80067bc:	40021000 	.word	0x40021000
 80067c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c4:	7cfb      	ldrb	r3, [r7, #19]
 80067c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067c8:	7c7b      	ldrb	r3, [r7, #17]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d105      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ce:	4ba0      	ldr	r3, [pc, #640]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d2:	4a9f      	ldr	r2, [pc, #636]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067e6:	4b9a      	ldr	r3, [pc, #616]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	f023 0203 	bic.w	r2, r3, #3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	4996      	ldr	r1, [pc, #600]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006808:	4b91      	ldr	r3, [pc, #580]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	f023 020c 	bic.w	r2, r3, #12
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	498e      	ldr	r1, [pc, #568]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006818:	4313      	orrs	r3, r2
 800681a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800682a:	4b89      	ldr	r3, [pc, #548]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800682c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006830:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006838:	4985      	ldr	r1, [pc, #532]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800684c:	4b80      	ldr	r3, [pc, #512]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685a:	497d      	ldr	r1, [pc, #500]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800686e:	4b78      	ldr	r3, [pc, #480]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687c:	4974      	ldr	r1, [pc, #464]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800687e:	4313      	orrs	r3, r2
 8006880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006890:	4b6f      	ldr	r3, [pc, #444]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006896:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689e:	496c      	ldr	r1, [pc, #432]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068b2:	4b67      	ldr	r3, [pc, #412]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c0:	4963      	ldr	r1, [pc, #396]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068d4:	4b5e      	ldr	r3, [pc, #376]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e2:	495b      	ldr	r1, [pc, #364]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068f6:	4b56      	ldr	r3, [pc, #344]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006904:	4952      	ldr	r1, [pc, #328]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006918:	4b4d      	ldr	r3, [pc, #308]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800691a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006926:	494a      	ldr	r1, [pc, #296]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006928:	4313      	orrs	r3, r2
 800692a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800693a:	4b45      	ldr	r3, [pc, #276]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800693c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006940:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006948:	4941      	ldr	r1, [pc, #260]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800695c:	4b3c      	ldr	r3, [pc, #240]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800695e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006962:	f023 0203 	bic.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696a:	4939      	ldr	r1, [pc, #228]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d028      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800697e:	4b34      	ldr	r3, [pc, #208]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006984:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698c:	4930      	ldr	r1, [pc, #192]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800699c:	d106      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800699e:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	4a2b      	ldr	r2, [pc, #172]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069a8:	60d3      	str	r3, [r2, #12]
 80069aa:	e011      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	2101      	movs	r1, #1
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f945 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80069c6:	7cfb      	ldrb	r3, [r7, #19]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80069cc:	7cfb      	ldrb	r3, [r7, #19]
 80069ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d04d      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e4:	d108      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80069e6:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ec:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80069f6:	e012      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80069f8:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069fe:	4a14      	ldr	r2, [pc, #80]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a04:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006a08:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a16:	490e      	ldr	r1, [pc, #56]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a26:	d106      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a28:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4a08      	ldr	r2, [pc, #32]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a32:	60d3      	str	r3, [r2, #12]
 8006a34:	e020      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a3e:	d109      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	4a02      	ldr	r2, [pc, #8]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a4a:	60d3      	str	r3, [r2, #12]
 8006a4c:	e014      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a4e:	bf00      	nop
 8006a50:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	2101      	movs	r1, #1
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f8f1 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a6e:	7cfb      	ldrb	r3, [r7, #19]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006a74:	7cfb      	ldrb	r3, [r7, #19]
 8006a76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d028      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a84:	4b68      	ldr	r3, [pc, #416]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a92:	4965      	ldr	r1, [pc, #404]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa2:	d106      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aa4:	4b60      	ldr	r3, [pc, #384]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4a5f      	ldr	r2, [pc, #380]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aae:	60d3      	str	r3, [r2, #12]
 8006ab0:	e011      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006aba:	d10c      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 f8c2 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006acc:	7cfb      	ldrb	r3, [r7, #19]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006ad2:	7cfb      	ldrb	r3, [r7, #19]
 8006ad4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01e      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ae2:	4b51      	ldr	r3, [pc, #324]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af2:	494d      	ldr	r1, [pc, #308]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b04:	d10c      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 f89d 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b16:	7cfb      	ldrb	r3, [r7, #19]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006b1c:	7cfb      	ldrb	r3, [r7, #19]
 8006b1e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b2c:	4b3e      	ldr	r3, [pc, #248]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b32:	f023 0204 	bic.w	r2, r3, #4
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b3c:	493a      	ldr	r1, [pc, #232]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b50:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b56:	f023 0218 	bic.w	r2, r3, #24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b60:	4931      	ldr	r1, [pc, #196]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d035      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b74:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a2b      	ldr	r2, [pc, #172]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b80:	f7fb fa48 	bl	8002014 <HAL_GetTick>
 8006b84:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b86:	e009      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b88:	f7fb fa44 	bl	8002014 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d902      	bls.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	74fb      	strb	r3, [r7, #19]
        break;
 8006b9a:	e005      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b9c:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1ef      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006ba8:	7cfb      	ldrb	r3, [r7, #19]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d113      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006bae:	4b1e      	ldr	r3, [pc, #120]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbe:	491a      	ldr	r1, [pc, #104]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3320      	adds	r3, #32
 8006bca:	2102      	movs	r1, #2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 f931 	bl	8006e34 <RCCEx_PLLSAI2_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006bdc:	7cfb      	ldrb	r3, [r7, #19]
 8006bde:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d017      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	490a      	ldr	r1, [pc, #40]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c0e:	d105      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4a04      	ldr	r2, [pc, #16]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	40021000 	.word	0x40021000

08006c2c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c36:	f043 0304 	orr.w	r3, r3, #4
 8006c3a:	6013      	str	r3, [r2, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40021000 	.word	0x40021000

08006c4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c5a:	4b72      	ldr	r3, [pc, #456]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c66:	4b6f      	ldr	r3, [pc, #444]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f003 0203 	and.w	r2, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d103      	bne.n	8006c7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
       ||
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d142      	bne.n	8006d04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	73fb      	strb	r3, [r7, #15]
 8006c82:	e03f      	b.n	8006d04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d018      	beq.n	8006cbe <RCCEx_PLLSAI1_Config+0x72>
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d825      	bhi.n	8006cdc <RCCEx_PLLSAI1_Config+0x90>
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d002      	beq.n	8006c9a <RCCEx_PLLSAI1_Config+0x4e>
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d009      	beq.n	8006cac <RCCEx_PLLSAI1_Config+0x60>
 8006c98:	e020      	b.n	8006cdc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c9a:	4b62      	ldr	r3, [pc, #392]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d11d      	bne.n	8006ce2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006caa:	e01a      	b.n	8006ce2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cac:	4b5d      	ldr	r3, [pc, #372]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d116      	bne.n	8006ce6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cbc:	e013      	b.n	8006ce6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cbe:	4b59      	ldr	r3, [pc, #356]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cca:	4b56      	ldr	r3, [pc, #344]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cda:	e006      	b.n	8006cea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce0:	e004      	b.n	8006cec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006cea:	bf00      	nop
    }

    if(status == HAL_OK)
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d108      	bne.n	8006d04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006cf2:	4b4c      	ldr	r3, [pc, #304]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f023 0203 	bic.w	r2, r3, #3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4949      	ldr	r1, [pc, #292]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f040 8086 	bne.w	8006e18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d0c:	4b45      	ldr	r3, [pc, #276]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a44      	ldr	r2, [pc, #272]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d18:	f7fb f97c 	bl	8002014 <HAL_GetTick>
 8006d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d1e:	e009      	b.n	8006d34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d20:	f7fb f978 	bl	8002014 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d902      	bls.n	8006d34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	73fb      	strb	r3, [r7, #15]
        break;
 8006d32:	e005      	b.n	8006d40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d34:	4b3b      	ldr	r3, [pc, #236]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1ef      	bne.n	8006d20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d168      	bne.n	8006e18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d113      	bne.n	8006d74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	4b35      	ldr	r3, [pc, #212]	; (8006e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6892      	ldr	r2, [r2, #8]
 8006d58:	0211      	lsls	r1, r2, #8
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68d2      	ldr	r2, [r2, #12]
 8006d5e:	06d2      	lsls	r2, r2, #27
 8006d60:	4311      	orrs	r1, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6852      	ldr	r2, [r2, #4]
 8006d66:	3a01      	subs	r2, #1
 8006d68:	0112      	lsls	r2, r2, #4
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	492d      	ldr	r1, [pc, #180]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	610b      	str	r3, [r1, #16]
 8006d72:	e02d      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d115      	bne.n	8006da6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d7a:	4b2a      	ldr	r3, [pc, #168]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6892      	ldr	r2, [r2, #8]
 8006d86:	0211      	lsls	r1, r2, #8
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6912      	ldr	r2, [r2, #16]
 8006d8c:	0852      	lsrs	r2, r2, #1
 8006d8e:	3a01      	subs	r2, #1
 8006d90:	0552      	lsls	r2, r2, #21
 8006d92:	4311      	orrs	r1, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6852      	ldr	r2, [r2, #4]
 8006d98:	3a01      	subs	r2, #1
 8006d9a:	0112      	lsls	r2, r2, #4
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	4921      	ldr	r1, [pc, #132]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	610b      	str	r3, [r1, #16]
 8006da4:	e014      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006da6:	4b1f      	ldr	r3, [pc, #124]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006da8:	691a      	ldr	r2, [r3, #16]
 8006daa:	4b21      	ldr	r3, [pc, #132]	; (8006e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6892      	ldr	r2, [r2, #8]
 8006db2:	0211      	lsls	r1, r2, #8
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6952      	ldr	r2, [r2, #20]
 8006db8:	0852      	lsrs	r2, r2, #1
 8006dba:	3a01      	subs	r2, #1
 8006dbc:	0652      	lsls	r2, r2, #25
 8006dbe:	4311      	orrs	r1, r2
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6852      	ldr	r2, [r2, #4]
 8006dc4:	3a01      	subs	r2, #1
 8006dc6:	0112      	lsls	r2, r2, #4
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	4916      	ldr	r1, [pc, #88]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006dd0:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ddc:	f7fb f91a 	bl	8002014 <HAL_GetTick>
 8006de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006de2:	e009      	b.n	8006df8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006de4:	f7fb f916 	bl	8002014 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d902      	bls.n	8006df8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	73fb      	strb	r3, [r7, #15]
          break;
 8006df6:	e005      	b.n	8006e04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0ef      	beq.n	8006de4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e0a:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	4904      	ldr	r1, [pc, #16]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	40021000 	.word	0x40021000
 8006e28:	07ff800f 	.word	0x07ff800f
 8006e2c:	ff9f800f 	.word	0xff9f800f
 8006e30:	f9ff800f 	.word	0xf9ff800f

08006e34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e42:	4b72      	ldr	r3, [pc, #456]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00e      	beq.n	8006e6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e4e:	4b6f      	ldr	r3, [pc, #444]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0203 	and.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d103      	bne.n	8006e66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
       ||
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d142      	bne.n	8006eec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e03f      	b.n	8006eec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d018      	beq.n	8006ea6 <RCCEx_PLLSAI2_Config+0x72>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d825      	bhi.n	8006ec4 <RCCEx_PLLSAI2_Config+0x90>
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d002      	beq.n	8006e82 <RCCEx_PLLSAI2_Config+0x4e>
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d009      	beq.n	8006e94 <RCCEx_PLLSAI2_Config+0x60>
 8006e80:	e020      	b.n	8006ec4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e82:	4b62      	ldr	r3, [pc, #392]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d11d      	bne.n	8006eca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e92:	e01a      	b.n	8006eca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e94:	4b5d      	ldr	r3, [pc, #372]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d116      	bne.n	8006ece <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ea4:	e013      	b.n	8006ece <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ea6:	4b59      	ldr	r3, [pc, #356]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10f      	bne.n	8006ed2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006eb2:	4b56      	ldr	r3, [pc, #344]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ec2:	e006      	b.n	8006ed2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec8:	e004      	b.n	8006ed4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006eca:	bf00      	nop
 8006ecc:	e002      	b.n	8006ed4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ece:	bf00      	nop
 8006ed0:	e000      	b.n	8006ed4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ed2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d108      	bne.n	8006eec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006eda:	4b4c      	ldr	r3, [pc, #304]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f023 0203 	bic.w	r2, r3, #3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4949      	ldr	r1, [pc, #292]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 8086 	bne.w	8007000 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ef4:	4b45      	ldr	r3, [pc, #276]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a44      	ldr	r2, [pc, #272]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f00:	f7fb f888 	bl	8002014 <HAL_GetTick>
 8006f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f06:	e009      	b.n	8006f1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f08:	f7fb f884 	bl	8002014 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d902      	bls.n	8006f1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	73fb      	strb	r3, [r7, #15]
        break;
 8006f1a:	e005      	b.n	8006f28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f1c:	4b3b      	ldr	r3, [pc, #236]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1ef      	bne.n	8006f08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d168      	bne.n	8007000 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d113      	bne.n	8006f5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f34:	4b35      	ldr	r3, [pc, #212]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f36:	695a      	ldr	r2, [r3, #20]
 8006f38:	4b35      	ldr	r3, [pc, #212]	; (8007010 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6892      	ldr	r2, [r2, #8]
 8006f40:	0211      	lsls	r1, r2, #8
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	68d2      	ldr	r2, [r2, #12]
 8006f46:	06d2      	lsls	r2, r2, #27
 8006f48:	4311      	orrs	r1, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6852      	ldr	r2, [r2, #4]
 8006f4e:	3a01      	subs	r2, #1
 8006f50:	0112      	lsls	r2, r2, #4
 8006f52:	430a      	orrs	r2, r1
 8006f54:	492d      	ldr	r1, [pc, #180]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	614b      	str	r3, [r1, #20]
 8006f5a:	e02d      	b.n	8006fb8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d115      	bne.n	8006f8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f62:	4b2a      	ldr	r3, [pc, #168]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	4b2b      	ldr	r3, [pc, #172]	; (8007014 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6892      	ldr	r2, [r2, #8]
 8006f6e:	0211      	lsls	r1, r2, #8
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6912      	ldr	r2, [r2, #16]
 8006f74:	0852      	lsrs	r2, r2, #1
 8006f76:	3a01      	subs	r2, #1
 8006f78:	0552      	lsls	r2, r2, #21
 8006f7a:	4311      	orrs	r1, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6852      	ldr	r2, [r2, #4]
 8006f80:	3a01      	subs	r2, #1
 8006f82:	0112      	lsls	r2, r2, #4
 8006f84:	430a      	orrs	r2, r1
 8006f86:	4921      	ldr	r1, [pc, #132]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	614b      	str	r3, [r1, #20]
 8006f8c:	e014      	b.n	8006fb8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f8e:	4b1f      	ldr	r3, [pc, #124]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	4b21      	ldr	r3, [pc, #132]	; (8007018 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6892      	ldr	r2, [r2, #8]
 8006f9a:	0211      	lsls	r1, r2, #8
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6952      	ldr	r2, [r2, #20]
 8006fa0:	0852      	lsrs	r2, r2, #1
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	0652      	lsls	r2, r2, #25
 8006fa6:	4311      	orrs	r1, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6852      	ldr	r2, [r2, #4]
 8006fac:	3a01      	subs	r2, #1
 8006fae:	0112      	lsls	r2, r2, #4
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	4916      	ldr	r1, [pc, #88]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006fb8:	4b14      	ldr	r3, [pc, #80]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a13      	ldr	r2, [pc, #76]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc4:	f7fb f826 	bl	8002014 <HAL_GetTick>
 8006fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fca:	e009      	b.n	8006fe0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fcc:	f7fb f822 	bl	8002014 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d902      	bls.n	8006fe0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8006fde:	e005      	b.n	8006fec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0ef      	beq.n	8006fcc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ff2:	4b06      	ldr	r3, [pc, #24]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	4904      	ldr	r1, [pc, #16]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40021000 	.word	0x40021000
 8007010:	07ff800f 	.word	0x07ff800f
 8007014:	ff9f800f 	.word	0xff9f800f
 8007018:	f9ff800f 	.word	0xf9ff800f

0800701c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e042      	b.n	80070b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7fa fd61 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2224      	movs	r2, #36	; 0x24
 800704a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f8c2 	bl	80071e8 <UART_SetConfig>
 8007064:	4603      	mov	r3, r0
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e022      	b.n	80070b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fb7e 	bl	8007778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800708a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800709a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fc05 	bl	80078bc <UART_CheckIdleState>
 80070b2:	4603      	mov	r3, r0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	; 0x28
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	f040 8083 	bne.w	80071de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <HAL_UART_Transmit+0x28>
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e07b      	b.n	80071e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_UART_Transmit+0x3a>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e074      	b.n	80071e0 <HAL_UART_Transmit+0x124>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2221      	movs	r2, #33	; 0x21
 800710a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800710e:	f7fa ff81 	bl	8002014 <HAL_GetTick>
 8007112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	88fa      	ldrh	r2, [r7, #6]
 8007120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712c:	d108      	bne.n	8007140 <HAL_UART_Transmit+0x84>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d104      	bne.n	8007140 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	e003      	b.n	8007148 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007144:	2300      	movs	r3, #0
 8007146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007150:	e02c      	b.n	80071ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2200      	movs	r2, #0
 800715a:	2180      	movs	r1, #128	; 0x80
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 fbf8 	bl	8007952 <UART_WaitOnFlagUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e039      	b.n	80071e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	3302      	adds	r3, #2
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	e007      	b.n	800719a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	3301      	adds	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1cc      	bne.n	8007152 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	2140      	movs	r1, #64	; 0x40
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fbc5 	bl	8007952 <UART_WaitOnFlagUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e006      	b.n	80071e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80071de:	2302      	movs	r3, #2
  }
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e8:	b5b0      	push	{r4, r5, r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	4313      	orrs	r3, r2
 800720a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4bb1      	ldr	r3, [pc, #708]	; (80074d8 <UART_SetConfig+0x2f0>)
 8007214:	4013      	ands	r3, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	69f9      	ldr	r1, [r7, #28]
 800721c:	430b      	orrs	r3, r1
 800721e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4aa6      	ldr	r2, [pc, #664]	; (80074dc <UART_SetConfig+0x2f4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	4313      	orrs	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800725a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	69f9      	ldr	r1, [r7, #28]
 8007264:	430b      	orrs	r3, r1
 8007266:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	f023 010f 	bic.w	r1, r3, #15
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a97      	ldr	r2, [pc, #604]	; (80074e0 <UART_SetConfig+0x2f8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d120      	bne.n	80072ca <UART_SetConfig+0xe2>
 8007288:	4b96      	ldr	r3, [pc, #600]	; (80074e4 <UART_SetConfig+0x2fc>)
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	2b03      	cmp	r3, #3
 8007294:	d816      	bhi.n	80072c4 <UART_SetConfig+0xdc>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <UART_SetConfig+0xb4>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072ad 	.word	0x080072ad
 80072a0:	080072b9 	.word	0x080072b9
 80072a4:	080072b3 	.word	0x080072b3
 80072a8:	080072bf 	.word	0x080072bf
 80072ac:	2301      	movs	r3, #1
 80072ae:	76fb      	strb	r3, [r7, #27]
 80072b0:	e0e7      	b.n	8007482 <UART_SetConfig+0x29a>
 80072b2:	2302      	movs	r3, #2
 80072b4:	76fb      	strb	r3, [r7, #27]
 80072b6:	e0e4      	b.n	8007482 <UART_SetConfig+0x29a>
 80072b8:	2304      	movs	r3, #4
 80072ba:	76fb      	strb	r3, [r7, #27]
 80072bc:	e0e1      	b.n	8007482 <UART_SetConfig+0x29a>
 80072be:	2308      	movs	r3, #8
 80072c0:	76fb      	strb	r3, [r7, #27]
 80072c2:	e0de      	b.n	8007482 <UART_SetConfig+0x29a>
 80072c4:	2310      	movs	r3, #16
 80072c6:	76fb      	strb	r3, [r7, #27]
 80072c8:	e0db      	b.n	8007482 <UART_SetConfig+0x29a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a86      	ldr	r2, [pc, #536]	; (80074e8 <UART_SetConfig+0x300>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d132      	bne.n	800733a <UART_SetConfig+0x152>
 80072d4:	4b83      	ldr	r3, [pc, #524]	; (80074e4 <UART_SetConfig+0x2fc>)
 80072d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072da:	f003 030c 	and.w	r3, r3, #12
 80072de:	2b0c      	cmp	r3, #12
 80072e0:	d828      	bhi.n	8007334 <UART_SetConfig+0x14c>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <UART_SetConfig+0x100>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	0800731d 	.word	0x0800731d
 80072ec:	08007335 	.word	0x08007335
 80072f0:	08007335 	.word	0x08007335
 80072f4:	08007335 	.word	0x08007335
 80072f8:	08007329 	.word	0x08007329
 80072fc:	08007335 	.word	0x08007335
 8007300:	08007335 	.word	0x08007335
 8007304:	08007335 	.word	0x08007335
 8007308:	08007323 	.word	0x08007323
 800730c:	08007335 	.word	0x08007335
 8007310:	08007335 	.word	0x08007335
 8007314:	08007335 	.word	0x08007335
 8007318:	0800732f 	.word	0x0800732f
 800731c:	2300      	movs	r3, #0
 800731e:	76fb      	strb	r3, [r7, #27]
 8007320:	e0af      	b.n	8007482 <UART_SetConfig+0x29a>
 8007322:	2302      	movs	r3, #2
 8007324:	76fb      	strb	r3, [r7, #27]
 8007326:	e0ac      	b.n	8007482 <UART_SetConfig+0x29a>
 8007328:	2304      	movs	r3, #4
 800732a:	76fb      	strb	r3, [r7, #27]
 800732c:	e0a9      	b.n	8007482 <UART_SetConfig+0x29a>
 800732e:	2308      	movs	r3, #8
 8007330:	76fb      	strb	r3, [r7, #27]
 8007332:	e0a6      	b.n	8007482 <UART_SetConfig+0x29a>
 8007334:	2310      	movs	r3, #16
 8007336:	76fb      	strb	r3, [r7, #27]
 8007338:	e0a3      	b.n	8007482 <UART_SetConfig+0x29a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a6b      	ldr	r2, [pc, #428]	; (80074ec <UART_SetConfig+0x304>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d120      	bne.n	8007386 <UART_SetConfig+0x19e>
 8007344:	4b67      	ldr	r3, [pc, #412]	; (80074e4 <UART_SetConfig+0x2fc>)
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800734e:	2b30      	cmp	r3, #48	; 0x30
 8007350:	d013      	beq.n	800737a <UART_SetConfig+0x192>
 8007352:	2b30      	cmp	r3, #48	; 0x30
 8007354:	d814      	bhi.n	8007380 <UART_SetConfig+0x198>
 8007356:	2b20      	cmp	r3, #32
 8007358:	d009      	beq.n	800736e <UART_SetConfig+0x186>
 800735a:	2b20      	cmp	r3, #32
 800735c:	d810      	bhi.n	8007380 <UART_SetConfig+0x198>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <UART_SetConfig+0x180>
 8007362:	2b10      	cmp	r3, #16
 8007364:	d006      	beq.n	8007374 <UART_SetConfig+0x18c>
 8007366:	e00b      	b.n	8007380 <UART_SetConfig+0x198>
 8007368:	2300      	movs	r3, #0
 800736a:	76fb      	strb	r3, [r7, #27]
 800736c:	e089      	b.n	8007482 <UART_SetConfig+0x29a>
 800736e:	2302      	movs	r3, #2
 8007370:	76fb      	strb	r3, [r7, #27]
 8007372:	e086      	b.n	8007482 <UART_SetConfig+0x29a>
 8007374:	2304      	movs	r3, #4
 8007376:	76fb      	strb	r3, [r7, #27]
 8007378:	e083      	b.n	8007482 <UART_SetConfig+0x29a>
 800737a:	2308      	movs	r3, #8
 800737c:	76fb      	strb	r3, [r7, #27]
 800737e:	e080      	b.n	8007482 <UART_SetConfig+0x29a>
 8007380:	2310      	movs	r3, #16
 8007382:	76fb      	strb	r3, [r7, #27]
 8007384:	e07d      	b.n	8007482 <UART_SetConfig+0x29a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a59      	ldr	r2, [pc, #356]	; (80074f0 <UART_SetConfig+0x308>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d120      	bne.n	80073d2 <UART_SetConfig+0x1ea>
 8007390:	4b54      	ldr	r3, [pc, #336]	; (80074e4 <UART_SetConfig+0x2fc>)
 8007392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007396:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800739a:	2bc0      	cmp	r3, #192	; 0xc0
 800739c:	d013      	beq.n	80073c6 <UART_SetConfig+0x1de>
 800739e:	2bc0      	cmp	r3, #192	; 0xc0
 80073a0:	d814      	bhi.n	80073cc <UART_SetConfig+0x1e4>
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d009      	beq.n	80073ba <UART_SetConfig+0x1d2>
 80073a6:	2b80      	cmp	r3, #128	; 0x80
 80073a8:	d810      	bhi.n	80073cc <UART_SetConfig+0x1e4>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <UART_SetConfig+0x1cc>
 80073ae:	2b40      	cmp	r3, #64	; 0x40
 80073b0:	d006      	beq.n	80073c0 <UART_SetConfig+0x1d8>
 80073b2:	e00b      	b.n	80073cc <UART_SetConfig+0x1e4>
 80073b4:	2300      	movs	r3, #0
 80073b6:	76fb      	strb	r3, [r7, #27]
 80073b8:	e063      	b.n	8007482 <UART_SetConfig+0x29a>
 80073ba:	2302      	movs	r3, #2
 80073bc:	76fb      	strb	r3, [r7, #27]
 80073be:	e060      	b.n	8007482 <UART_SetConfig+0x29a>
 80073c0:	2304      	movs	r3, #4
 80073c2:	76fb      	strb	r3, [r7, #27]
 80073c4:	e05d      	b.n	8007482 <UART_SetConfig+0x29a>
 80073c6:	2308      	movs	r3, #8
 80073c8:	76fb      	strb	r3, [r7, #27]
 80073ca:	e05a      	b.n	8007482 <UART_SetConfig+0x29a>
 80073cc:	2310      	movs	r3, #16
 80073ce:	76fb      	strb	r3, [r7, #27]
 80073d0:	e057      	b.n	8007482 <UART_SetConfig+0x29a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a47      	ldr	r2, [pc, #284]	; (80074f4 <UART_SetConfig+0x30c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d125      	bne.n	8007428 <UART_SetConfig+0x240>
 80073dc:	4b41      	ldr	r3, [pc, #260]	; (80074e4 <UART_SetConfig+0x2fc>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ea:	d017      	beq.n	800741c <UART_SetConfig+0x234>
 80073ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f0:	d817      	bhi.n	8007422 <UART_SetConfig+0x23a>
 80073f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f6:	d00b      	beq.n	8007410 <UART_SetConfig+0x228>
 80073f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fc:	d811      	bhi.n	8007422 <UART_SetConfig+0x23a>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <UART_SetConfig+0x222>
 8007402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007406:	d006      	beq.n	8007416 <UART_SetConfig+0x22e>
 8007408:	e00b      	b.n	8007422 <UART_SetConfig+0x23a>
 800740a:	2300      	movs	r3, #0
 800740c:	76fb      	strb	r3, [r7, #27]
 800740e:	e038      	b.n	8007482 <UART_SetConfig+0x29a>
 8007410:	2302      	movs	r3, #2
 8007412:	76fb      	strb	r3, [r7, #27]
 8007414:	e035      	b.n	8007482 <UART_SetConfig+0x29a>
 8007416:	2304      	movs	r3, #4
 8007418:	76fb      	strb	r3, [r7, #27]
 800741a:	e032      	b.n	8007482 <UART_SetConfig+0x29a>
 800741c:	2308      	movs	r3, #8
 800741e:	76fb      	strb	r3, [r7, #27]
 8007420:	e02f      	b.n	8007482 <UART_SetConfig+0x29a>
 8007422:	2310      	movs	r3, #16
 8007424:	76fb      	strb	r3, [r7, #27]
 8007426:	e02c      	b.n	8007482 <UART_SetConfig+0x29a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a2b      	ldr	r2, [pc, #172]	; (80074dc <UART_SetConfig+0x2f4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d125      	bne.n	800747e <UART_SetConfig+0x296>
 8007432:	4b2c      	ldr	r3, [pc, #176]	; (80074e4 <UART_SetConfig+0x2fc>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800743c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007440:	d017      	beq.n	8007472 <UART_SetConfig+0x28a>
 8007442:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007446:	d817      	bhi.n	8007478 <UART_SetConfig+0x290>
 8007448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800744c:	d00b      	beq.n	8007466 <UART_SetConfig+0x27e>
 800744e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007452:	d811      	bhi.n	8007478 <UART_SetConfig+0x290>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <UART_SetConfig+0x278>
 8007458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745c:	d006      	beq.n	800746c <UART_SetConfig+0x284>
 800745e:	e00b      	b.n	8007478 <UART_SetConfig+0x290>
 8007460:	2300      	movs	r3, #0
 8007462:	76fb      	strb	r3, [r7, #27]
 8007464:	e00d      	b.n	8007482 <UART_SetConfig+0x29a>
 8007466:	2302      	movs	r3, #2
 8007468:	76fb      	strb	r3, [r7, #27]
 800746a:	e00a      	b.n	8007482 <UART_SetConfig+0x29a>
 800746c:	2304      	movs	r3, #4
 800746e:	76fb      	strb	r3, [r7, #27]
 8007470:	e007      	b.n	8007482 <UART_SetConfig+0x29a>
 8007472:	2308      	movs	r3, #8
 8007474:	76fb      	strb	r3, [r7, #27]
 8007476:	e004      	b.n	8007482 <UART_SetConfig+0x29a>
 8007478:	2310      	movs	r3, #16
 800747a:	76fb      	strb	r3, [r7, #27]
 800747c:	e001      	b.n	8007482 <UART_SetConfig+0x29a>
 800747e:	2310      	movs	r3, #16
 8007480:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <UART_SetConfig+0x2f4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	f040 809f 	bne.w	80075cc <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800748e:	7efb      	ldrb	r3, [r7, #27]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d837      	bhi.n	8007504 <UART_SetConfig+0x31c>
 8007494:	a201      	add	r2, pc, #4	; (adr r2, 800749c <UART_SetConfig+0x2b4>)
 8007496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749a:	bf00      	nop
 800749c:	080074c1 	.word	0x080074c1
 80074a0:	08007505 	.word	0x08007505
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	08007505 	.word	0x08007505
 80074ac:	080074cf 	.word	0x080074cf
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007505 	.word	0x08007505
 80074b8:	08007505 	.word	0x08007505
 80074bc:	080074fd 	.word	0x080074fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c0:	f7fe ff5a 	bl	8006378 <HAL_RCC_GetPCLK1Freq>
 80074c4:	6178      	str	r0, [r7, #20]
        break;
 80074c6:	e022      	b.n	800750e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c8:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <UART_SetConfig+0x310>)
 80074ca:	617b      	str	r3, [r7, #20]
        break;
 80074cc:	e01f      	b.n	800750e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ce:	f7fe febb 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 80074d2:	6178      	str	r0, [r7, #20]
        break;
 80074d4:	e01b      	b.n	800750e <UART_SetConfig+0x326>
 80074d6:	bf00      	nop
 80074d8:	cfff69f3 	.word	0xcfff69f3
 80074dc:	40008000 	.word	0x40008000
 80074e0:	40013800 	.word	0x40013800
 80074e4:	40021000 	.word	0x40021000
 80074e8:	40004400 	.word	0x40004400
 80074ec:	40004800 	.word	0x40004800
 80074f0:	40004c00 	.word	0x40004c00
 80074f4:	40005000 	.word	0x40005000
 80074f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007500:	617b      	str	r3, [r7, #20]
        break;
 8007502:	e004      	b.n	800750e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	76bb      	strb	r3, [r7, #26]
        break;
 800750c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 8119 	beq.w	8007748 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	4a95      	ldr	r2, [pc, #596]	; (8007770 <UART_SetConfig+0x588>)
 800751c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007520:	461a      	mov	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	fbb3 f3f2 	udiv	r3, r3, r2
 8007528:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	429a      	cmp	r2, r3
 8007538:	d305      	bcc.n	8007546 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	429a      	cmp	r2, r3
 8007544:	d902      	bls.n	800754c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	76bb      	strb	r3, [r7, #26]
 800754a:	e0fd      	b.n	8007748 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	4618      	mov	r0, r3
 8007550:	f04f 0100 	mov.w	r1, #0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	4a85      	ldr	r2, [pc, #532]	; (8007770 <UART_SetConfig+0x588>)
 800755a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800755e:	b29a      	uxth	r2, r3
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	f7f9 f9ba 	bl	80008dc <__aeabi_uldivmod>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4610      	mov	r0, r2
 800756e:	4619      	mov	r1, r3
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	020b      	lsls	r3, r1, #8
 800757a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800757e:	0202      	lsls	r2, r0, #8
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	6849      	ldr	r1, [r1, #4]
 8007584:	0849      	lsrs	r1, r1, #1
 8007586:	4608      	mov	r0, r1
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	1814      	adds	r4, r2, r0
 800758e:	eb43 0501 	adc.w	r5, r3, r1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	461a      	mov	r2, r3
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f9 f99c 	bl	80008dc <__aeabi_uldivmod>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4613      	mov	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b2:	d308      	bcc.n	80075c6 <UART_SetConfig+0x3de>
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ba:	d204      	bcs.n	80075c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	60da      	str	r2, [r3, #12]
 80075c4:	e0c0      	b.n	8007748 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	76bb      	strb	r3, [r7, #26]
 80075ca:	e0bd      	b.n	8007748 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d4:	d164      	bne.n	80076a0 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80075d6:	7efb      	ldrb	r3, [r7, #27]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d828      	bhi.n	800762e <UART_SetConfig+0x446>
 80075dc:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <UART_SetConfig+0x3fc>)
 80075de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	08007609 	.word	0x08007609
 80075e8:	08007611 	.word	0x08007611
 80075ec:	08007619 	.word	0x08007619
 80075f0:	0800762f 	.word	0x0800762f
 80075f4:	0800761f 	.word	0x0800761f
 80075f8:	0800762f 	.word	0x0800762f
 80075fc:	0800762f 	.word	0x0800762f
 8007600:	0800762f 	.word	0x0800762f
 8007604:	08007627 	.word	0x08007627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fe feb6 	bl	8006378 <HAL_RCC_GetPCLK1Freq>
 800760c:	6178      	str	r0, [r7, #20]
        break;
 800760e:	e013      	b.n	8007638 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007610:	f7fe fec8 	bl	80063a4 <HAL_RCC_GetPCLK2Freq>
 8007614:	6178      	str	r0, [r7, #20]
        break;
 8007616:	e00f      	b.n	8007638 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007618:	4b56      	ldr	r3, [pc, #344]	; (8007774 <UART_SetConfig+0x58c>)
 800761a:	617b      	str	r3, [r7, #20]
        break;
 800761c:	e00c      	b.n	8007638 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800761e:	f7fe fe13 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 8007622:	6178      	str	r0, [r7, #20]
        break;
 8007624:	e008      	b.n	8007638 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762a:	617b      	str	r3, [r7, #20]
        break;
 800762c:	e004      	b.n	8007638 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	76bb      	strb	r3, [r7, #26]
        break;
 8007636:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 8084 	beq.w	8007748 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	4a4a      	ldr	r2, [pc, #296]	; (8007770 <UART_SetConfig+0x588>)
 8007646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800764a:	461a      	mov	r2, r3
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007652:	005a      	lsls	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	441a      	add	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b0f      	cmp	r3, #15
 800766a:	d916      	bls.n	800769a <UART_SetConfig+0x4b2>
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007672:	d212      	bcs.n	800769a <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	b29b      	uxth	r3, r3
 8007678:	f023 030f 	bic.w	r3, r3, #15
 800767c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	b29b      	uxth	r3, r3
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	b29a      	uxth	r2, r3
 800768a:	89fb      	ldrh	r3, [r7, #14]
 800768c:	4313      	orrs	r3, r2
 800768e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	89fa      	ldrh	r2, [r7, #14]
 8007696:	60da      	str	r2, [r3, #12]
 8007698:	e056      	b.n	8007748 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	76bb      	strb	r3, [r7, #26]
 800769e:	e053      	b.n	8007748 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076a0:	7efb      	ldrb	r3, [r7, #27]
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d827      	bhi.n	80076f6 <UART_SetConfig+0x50e>
 80076a6:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <UART_SetConfig+0x4c4>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d9 	.word	0x080076d9
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076f7 	.word	0x080076f7
 80076bc:	080076e7 	.word	0x080076e7
 80076c0:	080076f7 	.word	0x080076f7
 80076c4:	080076f7 	.word	0x080076f7
 80076c8:	080076f7 	.word	0x080076f7
 80076cc:	080076ef 	.word	0x080076ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d0:	f7fe fe52 	bl	8006378 <HAL_RCC_GetPCLK1Freq>
 80076d4:	6178      	str	r0, [r7, #20]
        break;
 80076d6:	e013      	b.n	8007700 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d8:	f7fe fe64 	bl	80063a4 <HAL_RCC_GetPCLK2Freq>
 80076dc:	6178      	str	r0, [r7, #20]
        break;
 80076de:	e00f      	b.n	8007700 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e0:	4b24      	ldr	r3, [pc, #144]	; (8007774 <UART_SetConfig+0x58c>)
 80076e2:	617b      	str	r3, [r7, #20]
        break;
 80076e4:	e00c      	b.n	8007700 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076e6:	f7fe fdaf 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 80076ea:	6178      	str	r0, [r7, #20]
        break;
 80076ec:	e008      	b.n	8007700 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f2:	617b      	str	r3, [r7, #20]
        break;
 80076f4:	e004      	b.n	8007700 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	76bb      	strb	r3, [r7, #26]
        break;
 80076fe:	bf00      	nop
    }

    if (pclk != 0U)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d020      	beq.n	8007748 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	4a19      	ldr	r2, [pc, #100]	; (8007770 <UART_SetConfig+0x588>)
 800770c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007710:	461a      	mov	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	fbb3 f2f2 	udiv	r2, r3, r2
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	441a      	add	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	fbb2 f3f3 	udiv	r3, r2, r3
 8007728:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d909      	bls.n	8007744 <UART_SetConfig+0x55c>
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007736:	d205      	bcs.n	8007744 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	e001      	b.n	8007748 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007764:	7ebb      	ldrb	r3, [r7, #26]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bdb0      	pop	{r4, r5, r7, pc}
 800776e:	bf00      	nop
 8007770:	08012a5c 	.word	0x08012a5c
 8007774:	00f42400 	.word	0x00f42400

08007778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	f003 0310 	and.w	r3, r3, #16
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00a      	beq.n	800782a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01a      	beq.n	800788e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007876:	d10a      	bne.n	800788e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	605a      	str	r2, [r3, #4]
  }
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078cc:	f7fa fba2 	bl	8002014 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d10e      	bne.n	80078fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f82f 	bl	8007952 <UART_WaitOnFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e025      	b.n	800794a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b04      	cmp	r3, #4
 800790a:	d10e      	bne.n	800792a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800790c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f819 	bl	8007952 <UART_WaitOnFlagUntilTimeout>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e00f      	b.n	800794a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b09c      	sub	sp, #112	; 0x70
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	4613      	mov	r3, r2
 8007960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007962:	e0a9      	b.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796a:	f000 80a5 	beq.w	8007ab8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796e:	f7fa fb51 	bl	8002014 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800797a:	429a      	cmp	r2, r3
 800797c:	d302      	bcc.n	8007984 <UART_WaitOnFlagUntilTimeout+0x32>
 800797e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007980:	2b00      	cmp	r3, #0
 8007982:	d140      	bne.n	8007a06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007998:	667b      	str	r3, [r7, #100]	; 0x64
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e6      	bne.n	8007984 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3308      	adds	r3, #8
 80079bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	f023 0301 	bic.w	r3, r3, #1
 80079cc:	663b      	str	r3, [r7, #96]	; 0x60
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80079d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e5      	bne.n	80079b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e069      	b.n	8007ada <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d051      	beq.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a22:	d149      	bne.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3308      	adds	r3, #8
 8007a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f023 0301 	bic.w	r3, r3, #1
 8007a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a80:	623a      	str	r2, [r7, #32]
 8007a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	69f9      	ldr	r1, [r7, #28]
 8007a86:	6a3a      	ldr	r2, [r7, #32]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e5      	bne.n	8007a60 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e010      	b.n	8007ada <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69da      	ldr	r2, [r3, #28]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2301      	moveq	r3, #1
 8007aca:	2300      	movne	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	f43f af46 	beq.w	8007964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3770      	adds	r7, #112	; 0x70
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e027      	b.n	8007b48 <HAL_UARTEx_DisableFifoMode+0x66>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2224      	movs	r2, #36	; 0x24
 8007b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0201 	bic.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e02d      	b.n	8007bc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2224      	movs	r2, #36	; 0x24
 8007b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0201 	bic.w	r2, r2, #1
 8007b92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f84f 	bl	8007c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e02d      	b.n	8007c44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2224      	movs	r2, #36	; 0x24
 8007bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0201 	bic.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f811 	bl	8007c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d108      	bne.n	8007c6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c6c:	e031      	b.n	8007cd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c6e:	2308      	movs	r3, #8
 8007c70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c72:	2308      	movs	r3, #8
 8007c74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	0e5b      	lsrs	r3, r3, #25
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	0f5b      	lsrs	r3, r3, #29
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	7b3a      	ldrb	r2, [r7, #12]
 8007c9a:	4911      	ldr	r1, [pc, #68]	; (8007ce0 <UARTEx_SetNbDataToProcess+0x94>)
 8007c9c:	5c8a      	ldrb	r2, [r1, r2]
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ca2:	7b3a      	ldrb	r2, [r7, #12]
 8007ca4:	490f      	ldr	r1, [pc, #60]	; (8007ce4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ca6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ca8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	7b7a      	ldrb	r2, [r7, #13]
 8007cb8:	4909      	ldr	r1, [pc, #36]	; (8007ce0 <UARTEx_SetNbDataToProcess+0x94>)
 8007cba:	5c8a      	ldrb	r2, [r1, r2]
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cc0:	7b7a      	ldrb	r2, [r7, #13]
 8007cc2:	4908      	ldr	r1, [pc, #32]	; (8007ce4 <UARTEx_SetNbDataToProcess+0x98>)
 8007cc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	08012a74 	.word	0x08012a74
 8007ce4:	08012a7c 	.word	0x08012a7c

08007ce8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ce8:	b084      	sub	sp, #16
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	f107 001c 	add.w	r0, r7, #28
 8007cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f99c 	bl	8008044 <USB_CoreReset>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
 8007d22:	e005      	b.n	8007d30 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d3c:	b004      	add	sp, #16
 8007d3e:	4770      	bx	lr

08007d40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f043 0201 	orr.w	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f023 0201 	bic.w	r2, r3, #1
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d115      	bne.n	8007dd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007db2:	2001      	movs	r0, #1
 8007db4:	f7fa f93a 	bl	800202c <HAL_Delay>
      ms++;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f931 	bl	8008026 <USB_GetMode>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d01e      	beq.n	8007e08 <USB_SetCurrentMode+0x84>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b31      	cmp	r3, #49	; 0x31
 8007dce:	d9f0      	bls.n	8007db2 <USB_SetCurrentMode+0x2e>
 8007dd0:	e01a      	b.n	8007e08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d115      	bne.n	8007e04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007de4:	2001      	movs	r0, #1
 8007de6:	f7fa f921 	bl	800202c <HAL_Delay>
      ms++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f918 	bl	8008026 <USB_GetMode>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <USB_SetCurrentMode+0x84>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b31      	cmp	r3, #49	; 0x31
 8007e00:	d9f0      	bls.n	8007de4 <USB_SetCurrentMode+0x60>
 8007e02:	e001      	b.n	8007e08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e005      	b.n	8007e14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b32      	cmp	r3, #50	; 0x32
 8007e0c:	d101      	bne.n	8007e12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <USB_FlushTxFifo+0x60>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d901      	bls.n	8007e3a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e01a      	b.n	8007e70 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	daf3      	bge.n	8007e2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	019b      	lsls	r3, r3, #6
 8007e4a:	f043 0220 	orr.w	r2, r3, #32
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <USB_FlushTxFifo+0x60>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d901      	bls.n	8007e62 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e006      	b.n	8007e70 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d0f1      	beq.n	8007e52 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	00030d40 	.word	0x00030d40

08007e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	4a11      	ldr	r2, [pc, #68]	; (8007ed8 <USB_FlushRxFifo+0x58>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d901      	bls.n	8007e9c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e017      	b.n	8007ecc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	daf3      	bge.n	8007e8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2210      	movs	r2, #16
 8007eac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	4a08      	ldr	r2, [pc, #32]	; (8007ed8 <USB_FlushRxFifo+0x58>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d901      	bls.n	8007ebe <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e006      	b.n	8007ecc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b10      	cmp	r3, #16
 8007ec8:	d0f1      	beq.n	8007eae <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	00030d40 	.word	0x00030d40

08007edc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b089      	sub	sp, #36	; 0x24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	461a      	mov	r2, r3
 8007eea:	460b      	mov	r3, r1
 8007eec:	71fb      	strb	r3, [r7, #7]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007efa:	88bb      	ldrh	r3, [r7, #4]
 8007efc:	3303      	adds	r3, #3
 8007efe:	089b      	lsrs	r3, r3, #2
 8007f00:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007f02:	2300      	movs	r3, #0
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	e018      	b.n	8007f3a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	031a      	lsls	r2, r3, #12
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f14:	461a      	mov	r2, r3
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	3301      	adds	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	3301      	adds	r3, #1
 8007f32:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	3301      	adds	r3, #1
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d3e2      	bcc.n	8007f08 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3724      	adds	r7, #36	; 0x24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b08b      	sub	sp, #44	; 0x2c
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	089b      	lsrs	r3, r3, #2
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f76:	2300      	movs	r3, #0
 8007f78:	623b      	str	r3, [r7, #32]
 8007f7a:	e014      	b.n	8007fa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	3301      	adds	r3, #1
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	3301      	adds	r3, #1
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	623b      	str	r3, [r7, #32]
 8007fa6:	6a3a      	ldr	r2, [r7, #32]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d3e6      	bcc.n	8007f7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fae:	8bfb      	ldrh	r3, [r7, #30]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01e      	beq.n	8007ff2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f107 0310 	add.w	r3, r7, #16
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	701a      	strb	r2, [r3, #0]
      i++;
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007fe6:	8bfb      	ldrh	r3, [r7, #30]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fec:	8bfb      	ldrh	r3, [r7, #30]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1ea      	bne.n	8007fc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	372c      	adds	r7, #44	; 0x2c
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4013      	ands	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008018:	68fb      	ldr	r3, [r7, #12]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	f003 0301 	and.w	r3, r3, #1
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	4a13      	ldr	r2, [pc, #76]	; (80080a4 <USB_CoreReset+0x60>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d901      	bls.n	8008060 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e01a      	b.n	8008096 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	daf3      	bge.n	8008050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	f043 0201 	orr.w	r2, r3, #1
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3301      	adds	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <USB_CoreReset+0x60>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d901      	bls.n	8008088 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e006      	b.n	8008096 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b01      	cmp	r3, #1
 8008092:	d0f1      	beq.n	8008078 <USB_CoreReset+0x34>

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	00030d40 	.word	0x00030d40

080080a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a8:	b084      	sub	sp, #16
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080c8:	461a      	mov	r2, r3
 80080ca:	2300      	movs	r3, #0
 80080cc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080f4:	f023 0304 	bic.w	r3, r3, #4
 80080f8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080fa:	2110      	movs	r1, #16
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff fe8d 	bl	8007e1c <USB_FlushTxFifo>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff feb7 	bl	8007e80 <USB_FlushRxFifo>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	e015      	b.n	800814e <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800812e:	461a      	mov	r2, r3
 8008130:	f04f 33ff 	mov.w	r3, #4294967295
 8008134:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008142:	461a      	mov	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3301      	adds	r3, #1
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	429a      	cmp	r2, r3
 8008154:	d3e5      	bcc.n	8008122 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f04f 32ff 	mov.w	r2, #4294967295
 8008162:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2280      	movs	r2, #128	; 0x80
 8008168:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a0c      	ldr	r2, [pc, #48]	; (80081a0 <USB_HostInit+0xf8>)
 800816e:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a0c      	ldr	r2, [pc, #48]	; (80081a4 <USB_HostInit+0xfc>)
 8008174:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	f043 0210 	orr.w	r2, r3, #16
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699a      	ldr	r2, [r3, #24]
 8008188:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <USB_HostInit+0x100>)
 800818a:	4313      	orrs	r3, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800819c:	b004      	add	sp, #16
 800819e:	4770      	bx	lr
 80081a0:	00600080 	.word	0x00600080
 80081a4:	004000e0 	.word	0x004000e0
 80081a8:	a3200008 	.word	0xa3200008

080081ac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	f003 0303 	and.w	r3, r3, #3
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081e4:	4313      	orrs	r3, r2
 80081e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d107      	bne.n	80081fe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081f4:	461a      	mov	r2, r3
 80081f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80081fa:	6053      	str	r3, [r2, #4]
 80081fc:	e009      	b.n	8008212 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	2b02      	cmp	r3, #2
 8008202:	d106      	bne.n	8008212 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800820a:	461a      	mov	r2, r3
 800820c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008210:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008240:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800824a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008250:	2064      	movs	r0, #100	; 0x64
 8008252:	f7f9 feeb 	bl	800202c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800825e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008262:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008264:	200a      	movs	r0, #10
 8008266:	f7f9 fee1 	bl	800202c <HAL_Delay>

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008298:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <USB_DriveVbus+0x44>
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d106      	bne.n	80082b8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80082b6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c2:	d109      	bne.n	80082d8 <USB_DriveVbus+0x64>
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082d6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	0c5b      	lsrs	r3, r3, #17
 8008304:	f003 0303 	and.w	r3, r3, #3
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	b29b      	uxth	r3, r3
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
	...

08008338 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	4608      	mov	r0, r1
 8008342:	4611      	mov	r1, r2
 8008344:	461a      	mov	r2, r3
 8008346:	4603      	mov	r3, r0
 8008348:	70fb      	strb	r3, [r7, #3]
 800834a:	460b      	mov	r3, r1
 800834c:	70bb      	strb	r3, [r7, #2]
 800834e:	4613      	mov	r3, r2
 8008350:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	4413      	add	r3, r2
 8008362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008366:	461a      	mov	r2, r3
 8008368:	f04f 33ff 	mov.w	r3, #4294967295
 800836c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800836e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008372:	2b03      	cmp	r3, #3
 8008374:	d867      	bhi.n	8008446 <USB_HC_Init+0x10e>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USB_HC_Init+0x44>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	0800838d 	.word	0x0800838d
 8008380:	08008409 	.word	0x08008409
 8008384:	0800838d 	.word	0x0800838d
 8008388:	080083cb 	.word	0x080083cb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4413      	add	r3, r2
 8008394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008398:	461a      	mov	r2, r3
 800839a:	f240 439d 	movw	r3, #1181	; 0x49d
 800839e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80083a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da51      	bge.n	800844c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	78fa      	ldrb	r2, [r7, #3]
 80083b8:	0151      	lsls	r1, r2, #5
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	440a      	add	r2, r1
 80083be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80083c8:	e040      	b.n	800844c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d6:	461a      	mov	r2, r3
 80083d8:	f240 639d 	movw	r3, #1693	; 0x69d
 80083dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80083de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da34      	bge.n	8008450 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008404:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008406:	e023      	b.n	8008450 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	4413      	add	r3, r2
 8008410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008414:	461a      	mov	r2, r3
 8008416:	f240 2325 	movw	r3, #549	; 0x225
 800841a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800841c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008420:	2b00      	cmp	r3, #0
 8008422:	da17      	bge.n	8008454 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4413      	add	r3, r2
 800842c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	78fa      	ldrb	r2, [r7, #3]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	440a      	add	r2, r1
 800843a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800843e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008442:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008444:	e006      	b.n	8008454 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	77fb      	strb	r3, [r7, #31]
      break;
 800844a:	e004      	b.n	8008456 <USB_HC_Init+0x11e>
      break;
 800844c:	bf00      	nop
 800844e:	e002      	b.n	8008456 <USB_HC_Init+0x11e>
      break;
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <USB_HC_Init+0x11e>
      break;
 8008454:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	440a      	add	r2, r1
 800846c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008470:	f043 0302 	orr.w	r3, r3, #2
 8008474:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	2101      	movs	r1, #1
 8008486:	fa01 f303 	lsl.w	r3, r1, r3
 800848a:	6939      	ldr	r1, [r7, #16]
 800848c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008490:	4313      	orrs	r3, r2
 8008492:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80084a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	da03      	bge.n	80084b0 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80084a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	e001      	b.n	80084b4 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ff16 	bl	80082e6 <USB_GetHostSpeed>
 80084ba:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80084bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d106      	bne.n	80084d2 <USB_HC_Init+0x19a>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d003      	beq.n	80084d2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80084ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	e001      	b.n	80084d6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084d6:	787b      	ldrb	r3, [r7, #1]
 80084d8:	059b      	lsls	r3, r3, #22
 80084da:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084de:	78bb      	ldrb	r3, [r7, #2]
 80084e0:	02db      	lsls	r3, r3, #11
 80084e2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084e6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084ec:	049b      	lsls	r3, r3, #18
 80084ee:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80084f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084fa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	0159      	lsls	r1, r3, #5
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	440b      	add	r3, r1
 8008508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008512:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008514:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008518:	2b03      	cmp	r3, #3
 800851a:	d10f      	bne.n	800853c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	4413      	add	r3, r2
 8008524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	440a      	add	r2, r1
 8008532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800853a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800853c:	7ffb      	ldrb	r3, [r7, #31]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop

08008548 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b088      	sub	sp, #32
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800855c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008560:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d018      	beq.n	800859c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	8912      	ldrh	r2, [r2, #8]
 8008572:	4413      	add	r3, r2
 8008574:	3b01      	subs	r3, #1
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	8912      	ldrh	r2, [r2, #8]
 800857a:	fbb3 f3f2 	udiv	r3, r3, r2
 800857e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8008580:	8bfa      	ldrh	r2, [r7, #30]
 8008582:	8a7b      	ldrh	r3, [r7, #18]
 8008584:	429a      	cmp	r2, r3
 8008586:	d90b      	bls.n	80085a0 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8008588:	8a7b      	ldrh	r3, [r7, #18]
 800858a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800858c:	8bfb      	ldrh	r3, [r7, #30]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	8912      	ldrh	r2, [r2, #8]
 8008592:	fb02 f203 	mul.w	r2, r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	611a      	str	r2, [r3, #16]
 800859a:	e001      	b.n	80085a0 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800859c:	2301      	movs	r3, #1
 800859e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	78db      	ldrb	r3, [r3, #3]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80085a8:	8bfb      	ldrh	r3, [r7, #30]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	8912      	ldrh	r2, [r2, #8]
 80085ae:	fb02 f203 	mul.w	r2, r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	611a      	str	r2, [r3, #16]
 80085b6:	e003      	b.n	80085c0 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	695a      	ldr	r2, [r3, #20]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085c8:	8bfb      	ldrh	r3, [r7, #30]
 80085ca:	04d9      	lsls	r1, r3, #19
 80085cc:	4b59      	ldr	r3, [pc, #356]	; (8008734 <USB_HC_StartXfer+0x1ec>)
 80085ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80085d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	7a9b      	ldrb	r3, [r3, #10]
 80085d6:	075b      	lsls	r3, r3, #29
 80085d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80085dc:	6979      	ldr	r1, [r7, #20]
 80085de:	0148      	lsls	r0, r1, #5
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	4401      	add	r1, r0
 80085e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80085ea:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf0c      	ite	eq
 80085fc:	2301      	moveq	r3, #1
 80085fe:	2300      	movne	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	4413      	add	r3, r2
 800860c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	0151      	lsls	r1, r2, #5
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	440a      	add	r2, r1
 800861a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800861e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008622:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	4413      	add	r3, r2
 800862c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	7c7b      	ldrb	r3, [r7, #17]
 8008634:	075b      	lsls	r3, r3, #29
 8008636:	6979      	ldr	r1, [r7, #20]
 8008638:	0148      	lsls	r0, r1, #5
 800863a:	69b9      	ldr	r1, [r7, #24]
 800863c:	4401      	add	r1, r0
 800863e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008642:	4313      	orrs	r3, r2
 8008644:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	4413      	add	r3, r2
 800864e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800865c:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	78db      	ldrb	r3, [r3, #3]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800866c:	60bb      	str	r3, [r7, #8]
 800866e:	e003      	b.n	8008678 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008676:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800867e:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	4413      	add	r3, r2
 8008688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868c:	461a      	mov	r2, r3
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	78db      	ldrb	r3, [r3, #3]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d147      	bne.n	800872a <USB_HC_StartXfer+0x1e2>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d043      	beq.n	800872a <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	79db      	ldrb	r3, [r3, #7]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d830      	bhi.n	800870c <USB_HC_StartXfer+0x1c4>
 80086aa:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <USB_HC_StartXfer+0x168>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086c1 	.word	0x080086c1
 80086b4:	080086e5 	.word	0x080086e5
 80086b8:	080086c1 	.word	0x080086c1
 80086bc:	080086e5 	.word	0x080086e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	3303      	adds	r3, #3
 80086c6:	089b      	lsrs	r3, r3, #2
 80086c8:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80086ca:	89fa      	ldrh	r2, [r7, #14]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d91c      	bls.n	8008710 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f043 0220 	orr.w	r2, r3, #32
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80086e2:	e015      	b.n	8008710 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	3303      	adds	r3, #3
 80086ea:	089b      	lsrs	r3, r3, #2
 80086ec:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80086ee:	89fa      	ldrh	r2, [r7, #14]
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d90a      	bls.n	8008714 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	619a      	str	r2, [r3, #24]
        }
        break;
 800870a:	e003      	b.n	8008714 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 800870c:	bf00      	nop
 800870e:	e002      	b.n	8008716 <USB_HC_StartXfer+0x1ce>
        break;
 8008710:	bf00      	nop
 8008712:	e000      	b.n	8008716 <USB_HC_StartXfer+0x1ce>
        break;
 8008714:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68d9      	ldr	r1, [r3, #12]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	785a      	ldrb	r2, [r3, #1]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	b29b      	uxth	r3, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff fbd9 	bl	8007edc <USB_WritePacket>
  }

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	1ff80000 	.word	0x1ff80000

08008738 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	b29b      	uxth	r3, r3
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800875a:	b480      	push	{r7}
 800875c:	b089      	sub	sp, #36	; 0x24
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	0c9b      	lsrs	r3, r3, #18
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	4413      	add	r3, r2
 8008790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	0fdb      	lsrs	r3, r3, #31
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b20      	cmp	r3, #32
 80087a8:	d104      	bne.n	80087b4 <USB_HC_Halt+0x5a>
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	e0c6      	b.n	8008942 <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <USB_HC_Halt+0x66>
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d162      	bne.n	8008886 <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	0151      	lsls	r1, r2, #5
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	440a      	add	r2, r1
 80087d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f040 80a9 	bne.w	8008940 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d132      	bne.n	8008860 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	440a      	add	r2, r1
 8008810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008818:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	440a      	add	r2, r1
 8008830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008838:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008844:	d81d      	bhi.n	8008882 <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	4413      	add	r3, r2
 800884e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800885c:	d0ed      	beq.n	800883a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800885e:	e06f      	b.n	8008940 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	69fa      	ldr	r2, [r7, #28]
 8008874:	440a      	add	r2, r1
 8008876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800887a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800887e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008880:	e05e      	b.n	8008940 <USB_HC_Halt+0x1e6>
            break;
 8008882:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008884:	e05c      	b.n	8008940 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	440a      	add	r2, r1
 800889c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d132      	bne.n	800891c <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088f4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008900:	d81d      	bhi.n	800893e <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	4413      	add	r3, r2
 800890a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008918:	d0ed      	beq.n	80088f6 <USB_HC_Halt+0x19c>
 800891a:	e011      	b.n	8008940 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	4413      	add	r3, r2
 8008924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	0151      	lsls	r1, r2, #5
 800892e:	69fa      	ldr	r2, [r7, #28]
 8008930:	440a      	add	r2, r1
 8008932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	e000      	b.n	8008940 <USB_HC_Halt+0x1e6>
          break;
 800893e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3724      	adds	r7, #36	; 0x24
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b088      	sub	sp, #32
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff f9fd 	bl	8007d62 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008968:	2110      	movs	r1, #16
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff fa56 	bl	8007e1c <USB_FlushTxFifo>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7ff fa80 	bl	8007e80 <USB_FlushRxFifo>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800898a:	2300      	movs	r3, #0
 800898c:	61bb      	str	r3, [r7, #24]
 800898e:	e01f      	b.n	80089d0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	4413      	add	r3, r2
 8008998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089a6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089ae:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089b6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c4:	461a      	mov	r2, r3
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	3301      	adds	r3, #1
 80089ce:	61bb      	str	r3, [r7, #24]
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b0f      	cmp	r3, #15
 80089d4:	d9dc      	bls.n	8008990 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089d6:	2300      	movs	r3, #0
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	e033      	b.n	8008a44 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089fa:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a02:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a10:	461a      	mov	r2, r3
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a20:	d80c      	bhi.n	8008a3c <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a38:	d0ed      	beq.n	8008a16 <USB_StopHost+0xc8>
 8008a3a:	e000      	b.n	8008a3e <USB_StopHost+0xf0>
        break;
 8008a3c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	3301      	adds	r3, #1
 8008a42:	61bb      	str	r3, [r7, #24]
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	2b0f      	cmp	r3, #15
 8008a48:	d9c8      	bls.n	80089dc <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a50:	461a      	mov	r2, r3
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff f96d 	bl	8007d40 <USB_EnableGlobalInt>

  return ret;
 8008a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3720      	adds	r7, #32
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008a74:	4904      	ldr	r1, [pc, #16]	; (8008a88 <MX_FATFS_Init+0x18>)
 8008a76:	4805      	ldr	r0, [pc, #20]	; (8008a8c <MX_FATFS_Init+0x1c>)
 8008a78:	f007 ff0e 	bl	8010898 <FATFS_LinkDriver>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	461a      	mov	r2, r3
 8008a80:	4b03      	ldr	r3, [pc, #12]	; (8008a90 <MX_FATFS_Init+0x20>)
 8008a82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008a84:	bf00      	nop
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	20000b60 	.word	0x20000b60
 8008a8c:	08012a84 	.word	0x08012a84
 8008a90:	20002bfc 	.word	0x20002bfc

08008a94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008a98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	4619      	mov	r1, r3
 8008ace:	4808      	ldr	r0, [pc, #32]	; (8008af0 <USBH_status+0x34>)
 8008ad0:	f000 fe1a 	bl	8009708 <USBH_MSC_UnitIsReady>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <USBH_status+0x24>
  {
    res = RES_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]
 8008ade:	e001      	b.n	8008ae4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20000784 	.word	0x20000784

08008af4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b094      	sub	sp, #80	; 0x50
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008b0a:	7bf9      	ldrb	r1, [r7, #15]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	4813      	ldr	r0, [pc, #76]	; (8008b64 <USBH_read+0x70>)
 8008b16:	f000 fe41 	bl	800979c <USBH_MSC_Read>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d103      	bne.n	8008b28 <USBH_read+0x34>
  {
    res = RES_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b26:	e017      	b.n	8008b58 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008b28:	f107 0210 	add.w	r2, r7, #16
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	480c      	ldr	r0, [pc, #48]	; (8008b64 <USBH_read+0x70>)
 8008b32:	f000 fe0f 	bl	8009754 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008b36:	7f7b      	ldrb	r3, [r7, #29]
 8008b38:	2b3a      	cmp	r3, #58	; 0x3a
 8008b3a:	d005      	beq.n	8008b48 <USBH_read+0x54>
 8008b3c:	2b3a      	cmp	r3, #58	; 0x3a
 8008b3e:	dc07      	bgt.n	8008b50 <USBH_read+0x5c>
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d001      	beq.n	8008b48 <USBH_read+0x54>
 8008b44:	2b28      	cmp	r3, #40	; 0x28
 8008b46:	d103      	bne.n	8008b50 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b4e:	e003      	b.n	8008b58 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b56:	bf00      	nop
    }
  }

  return res;
 8008b58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3748      	adds	r7, #72	; 0x48
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000784 	.word	0x20000784

08008b68 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b094      	sub	sp, #80	; 0x50
 8008b6c:	af02      	add	r7, sp, #8
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008b7e:	7bf9      	ldrb	r1, [r7, #15]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4817      	ldr	r0, [pc, #92]	; (8008be8 <USBH_write+0x80>)
 8008b8a:	f000 fe70 	bl	800986e <USBH_MSC_Write>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d103      	bne.n	8008b9c <USBH_write+0x34>
  {
    res = RES_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b9a:	e01f      	b.n	8008bdc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008b9c:	f107 0210 	add.w	r2, r7, #16
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4810      	ldr	r0, [pc, #64]	; (8008be8 <USBH_write+0x80>)
 8008ba6:	f000 fdd5 	bl	8009754 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008baa:	7f7b      	ldrb	r3, [r7, #29]
 8008bac:	2b3a      	cmp	r3, #58	; 0x3a
 8008bae:	d00d      	beq.n	8008bcc <USBH_write+0x64>
 8008bb0:	2b3a      	cmp	r3, #58	; 0x3a
 8008bb2:	dc0f      	bgt.n	8008bd4 <USBH_write+0x6c>
 8008bb4:	2b28      	cmp	r3, #40	; 0x28
 8008bb6:	d009      	beq.n	8008bcc <USBH_write+0x64>
 8008bb8:	2b28      	cmp	r3, #40	; 0x28
 8008bba:	dc0b      	bgt.n	8008bd4 <USBH_write+0x6c>
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d005      	beq.n	8008bcc <USBH_write+0x64>
 8008bc0:	2b27      	cmp	r3, #39	; 0x27
 8008bc2:	d107      	bne.n	8008bd4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bca:	e007      	b.n	8008bdc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bd2:	e003      	b.n	8008bdc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bda:	bf00      	nop
    }
  }

  return res;
 8008bdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3748      	adds	r7, #72	; 0x48
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20000784 	.word	0x20000784

08008bec <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b090      	sub	sp, #64	; 0x40
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	603a      	str	r2, [r7, #0]
 8008bf6:	71fb      	strb	r3, [r7, #7]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008c02:	79bb      	ldrb	r3, [r7, #6]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d852      	bhi.n	8008cae <USBH_ioctl+0xc2>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <USBH_ioctl+0x24>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c29 	.word	0x08008c29
 8008c18:	08008c53 	.word	0x08008c53
 8008c1c:	08008c7f 	.word	0x08008c7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c26:	e045      	b.n	8008cb4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c28:	f107 0208 	add.w	r2, r7, #8
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4823      	ldr	r0, [pc, #140]	; (8008cc0 <USBH_ioctl+0xd4>)
 8008c32:	f000 fd8f 	bl	8009754 <USBH_MSC_GetLUNInfo>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d106      	bne.n	8008c4a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008c48:	e034      	b.n	8008cb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c50:	e030      	b.n	8008cb4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c52:	f107 0208 	add.w	r2, r7, #8
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4819      	ldr	r0, [pc, #100]	; (8008cc0 <USBH_ioctl+0xd4>)
 8008c5c:	f000 fd7a 	bl	8009754 <USBH_MSC_GetLUNInfo>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d107      	bne.n	8008c76 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008c66:	8a3b      	ldrh	r3, [r7, #16]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008c74:	e01e      	b.n	8008cb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c7c:	e01a      	b.n	8008cb4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c7e:	f107 0208 	add.w	r2, r7, #8
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	4619      	mov	r1, r3
 8008c86:	480e      	ldr	r0, [pc, #56]	; (8008cc0 <USBH_ioctl+0xd4>)
 8008c88:	f000 fd64 	bl	8009754 <USBH_MSC_GetLUNInfo>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008c92:	8a3b      	ldrh	r3, [r7, #16]
 8008c94:	0a5b      	lsrs	r3, r3, #9
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ca4:	e006      	b.n	8008cb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008cac:	e002      	b.n	8008cb4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008cae:	2304      	movs	r3, #4
 8008cb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008cb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3740      	adds	r7, #64	; 0x40
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000784 	.word	0x20000784

08008cc4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008cc4:	b590      	push	{r4, r7, lr}
 8008cc6:	b089      	sub	sp, #36	; 0x24
 8008cc8:	af04      	add	r7, sp, #16
 8008cca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cd2:	7919      	ldrb	r1, [r3, #4]
 8008cd4:	2350      	movs	r3, #80	; 0x50
 8008cd6:	2206      	movs	r2, #6
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 fc53 	bl	800a584 <USBH_FindInterface>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2bff      	cmp	r3, #255	; 0xff
 8008ce6:	d002      	beq.n	8008cee <USBH_MSC_InterfaceInit+0x2a>
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d901      	bls.n	8008cf2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e0ef      	b.n	8008ed2 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 fc28 	bl	800a54c <USBH_SelectInterface>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008d06:	2302      	movs	r3, #2
 8008d08:	e0e3      	b.n	8008ed2 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008d10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008d14:	f008 f97a 	bl	801100c <malloc>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e0d0      	b.n	8008ed2 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d34:	2100      	movs	r1, #0
 8008d36:	68b8      	ldr	r0, [r7, #8]
 8008d38:	f008 f986 	bl	8011048 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	211a      	movs	r1, #26
 8008d42:	fb01 f303 	mul.w	r3, r1, r3
 8008d46:	4413      	add	r3, r2
 8008d48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b25b      	sxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	da16      	bge.n	8008d82 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	211a      	movs	r1, #26
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	4413      	add	r3, r2
 8008d60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	211a      	movs	r1, #26
 8008d70:	fb01 f303 	mul.w	r3, r1, r3
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d7a:	881a      	ldrh	r2, [r3, #0]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	815a      	strh	r2, [r3, #10]
 8008d80:	e015      	b.n	8008dae <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	211a      	movs	r1, #26
 8008d88:	fb01 f303 	mul.w	r3, r1, r3
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d92:	781a      	ldrb	r2, [r3, #0]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	211a      	movs	r1, #26
 8008d9e:	fb01 f303 	mul.w	r3, r1, r3
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008da8:	881a      	ldrh	r2, [r3, #0]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	211a      	movs	r1, #26
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	4413      	add	r3, r2
 8008dba:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	b25b      	sxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da16      	bge.n	8008df4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	211a      	movs	r1, #26
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	211a      	movs	r1, #26
 8008de2:	fb01 f303 	mul.w	r3, r1, r3
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008dec:	881a      	ldrh	r2, [r3, #0]
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	815a      	strh	r2, [r3, #10]
 8008df2:	e015      	b.n	8008e20 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	211a      	movs	r1, #26
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e04:	781a      	ldrb	r2, [r3, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	211a      	movs	r1, #26
 8008e10:	fb01 f303 	mul.w	r3, r1, r3
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e1a:	881a      	ldrh	r2, [r3, #0]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2200      	movs	r2, #0
 8008e24:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	799b      	ldrb	r3, [r3, #6]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f002 fdc4 	bl	800b9c6 <USBH_AllocPipe>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	461a      	mov	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	79db      	ldrb	r3, [r3, #7]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f002 fdba 	bl	800b9c6 <USBH_AllocPipe>
 8008e52:	4603      	mov	r3, r0
 8008e54:	461a      	mov	r2, r3
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fdac 	bl	80099b8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	7959      	ldrb	r1, [r3, #5]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	7998      	ldrb	r0, [r3, #6]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	8912      	ldrh	r2, [r2, #8]
 8008e78:	9202      	str	r2, [sp, #8]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	9201      	str	r2, [sp, #4]
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	4623      	mov	r3, r4
 8008e82:	4602      	mov	r2, r0
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f002 fd6f 	bl	800b968 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	7919      	ldrb	r1, [r3, #4]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	79d8      	ldrb	r0, [r3, #7]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	8952      	ldrh	r2, [r2, #10]
 8008ea2:	9202      	str	r2, [sp, #8]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	9201      	str	r2, [sp, #4]
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	4623      	mov	r3, r4
 8008eac:	4602      	mov	r2, r0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f002 fd5a 	bl	800b968 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	791b      	ldrb	r3, [r3, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f007 ffe4 	bl	8010e8a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	795b      	ldrb	r3, [r3, #5]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f007 ffdd 	bl	8010e8a <USBH_LL_SetToggle>

  return USBH_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd90      	pop	{r4, r7, pc}

08008eda <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	795b      	ldrb	r3, [r3, #5]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00e      	beq.n	8008f12 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	795b      	ldrb	r3, [r3, #5]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f002 fd53 	bl	800b9a6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	795b      	ldrb	r3, [r3, #5]
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f002 fd7e 	bl	800ba08 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	791b      	ldrb	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00e      	beq.n	8008f38 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	791b      	ldrb	r3, [r3, #4]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f002 fd40 	bl	800b9a6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	791b      	ldrb	r3, [r3, #4]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f002 fd6b 	bl	800ba08 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f008 f865 	bl	801101c <free>
    phost->pActiveClass->pData = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f58:	2200      	movs	r2, #0
 8008f5a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	7b9b      	ldrb	r3, [r3, #14]
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d041      	beq.n	8009008 <USBH_MSC_ClassRequest+0xa2>
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	dc4b      	bgt.n	8009020 <USBH_MSC_ClassRequest+0xba>
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <USBH_MSC_ClassRequest+0x2a>
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d147      	bne.n	8009020 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fcf0 	bl	800997a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d104      	bne.n	8008fae <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d137      	bne.n	8009024 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d804      	bhi.n	8008fc6 <USBH_MSC_ClassRequest+0x60>
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	e000      	b.n	8008fc8 <USBH_MSC_ClassRequest+0x62>
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73bb      	strb	r3, [r7, #14]
 8008fd0:	e014      	b.n	8008ffc <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	2134      	movs	r1, #52	; 0x34
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	4413      	add	r3, r2
 8008fde:	3392      	adds	r3, #146	; 0x92
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	2134      	movs	r1, #52	; 0x34
 8008fea:	fb01 f303 	mul.w	r3, r1, r3
 8008fee:	4413      	add	r3, r2
 8008ff0:	33c1      	adds	r3, #193	; 0xc1
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	73bb      	strb	r3, [r7, #14]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	7bba      	ldrb	r2, [r7, #14]
 8009002:	429a      	cmp	r2, r3
 8009004:	d3e5      	bcc.n	8008fd2 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009006:	e00d      	b.n	8009024 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009008:	2100      	movs	r1, #0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f002 f87b 	bl	800b106 <USBH_ClrFeature>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d108      	bne.n	8009028 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	7bda      	ldrb	r2, [r3, #15]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800901e:	e003      	b.n	8009028 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009020:	bf00      	nop
 8009022:	e002      	b.n	800902a <USBH_MSC_ClassRequest+0xc4>
      break;
 8009024:	bf00      	nop
 8009026:	e000      	b.n	800902a <USBH_MSC_ClassRequest+0xc4>
      break;
 8009028:	bf00      	nop
  }

  return status;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800904a:	2301      	movs	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800904e:	2301      	movs	r3, #1
 8009050:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	7b1b      	ldrb	r3, [r3, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <USBH_MSC_Process+0x2e>
 800905a:	2b01      	cmp	r3, #1
 800905c:	f000 8271 	beq.w	8009542 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009060:	e272      	b.n	8009548 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	b29b      	uxth	r3, r3
 800906e:	429a      	cmp	r2, r3
 8009070:	f080 824f 	bcs.w	8009512 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800907a:	4619      	mov	r1, r3
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	2334      	movs	r3, #52	; 0x34
 8009080:	fb03 f301 	mul.w	r3, r3, r1
 8009084:	4413      	add	r3, r2
 8009086:	3391      	adds	r3, #145	; 0x91
 8009088:	2201      	movs	r2, #1
 800908a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009092:	4619      	mov	r1, r3
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	2334      	movs	r3, #52	; 0x34
 8009098:	fb03 f301 	mul.w	r3, r3, r1
 800909c:	4413      	add	r3, r2
 800909e:	3390      	adds	r3, #144	; 0x90
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	f200 8243 	bhi.w	800952e <USBH_MSC_Process+0x4fa>
 80090a8:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <USBH_MSC_Process+0x7c>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090d5 	.word	0x080090d5
 80090b4:	0800952f 	.word	0x0800952f
 80090b8:	0800919d 	.word	0x0800919d
 80090bc:	08009321 	.word	0x08009321
 80090c0:	080090fb 	.word	0x080090fb
 80090c4:	080093ed 	.word	0x080093ed
 80090c8:	0800952f 	.word	0x0800952f
 80090cc:	0800952f 	.word	0x0800952f
 80090d0:	08009501 	.word	0x08009501
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090da:	4619      	mov	r1, r3
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	2334      	movs	r3, #52	; 0x34
 80090e0:	fb03 f301 	mul.w	r3, r3, r1
 80090e4:	4413      	add	r3, r2
 80090e6:	3390      	adds	r3, #144	; 0x90
 80090e8:	2204      	movs	r2, #4
 80090ea:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80090f8:	e222      	b.n	8009540 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009100:	b2d9      	uxtb	r1, r3
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009108:	461a      	mov	r2, r3
 800910a:	2334      	movs	r3, #52	; 0x34
 800910c:	fb03 f302 	mul.w	r3, r3, r2
 8009110:	3398      	adds	r3, #152	; 0x98
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4413      	add	r3, r2
 8009116:	3307      	adds	r3, #7
 8009118:	461a      	mov	r2, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 ff6a 	bl	8009ff4 <USBH_MSC_SCSI_Inquiry>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009130:	4619      	mov	r1, r3
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	2334      	movs	r3, #52	; 0x34
 8009136:	fb03 f301 	mul.w	r3, r3, r1
 800913a:	4413      	add	r3, r2
 800913c:	3390      	adds	r3, #144	; 0x90
 800913e:	2202      	movs	r2, #2
 8009140:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d10c      	bne.n	8009162 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800914e:	4619      	mov	r1, r3
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	2334      	movs	r3, #52	; 0x34
 8009154:	fb03 f301 	mul.w	r3, r3, r1
 8009158:	4413      	add	r3, r2
 800915a:	3390      	adds	r3, #144	; 0x90
 800915c:	2205      	movs	r2, #5
 800915e:	701a      	strb	r2, [r3, #0]
            break;
 8009160:	e1e7      	b.n	8009532 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	2b04      	cmp	r3, #4
 8009166:	f040 81e4 	bne.w	8009532 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009170:	4619      	mov	r1, r3
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	2334      	movs	r3, #52	; 0x34
 8009176:	fb03 f301 	mul.w	r3, r3, r1
 800917a:	4413      	add	r3, r2
 800917c:	3390      	adds	r3, #144	; 0x90
 800917e:	2201      	movs	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009188:	4619      	mov	r1, r3
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	2334      	movs	r3, #52	; 0x34
 800918e:	fb03 f301 	mul.w	r3, r3, r1
 8009192:	4413      	add	r3, r2
 8009194:	3391      	adds	r3, #145	; 0x91
 8009196:	2202      	movs	r2, #2
 8009198:	701a      	strb	r2, [r3, #0]
            break;
 800919a:	e1ca      	b.n	8009532 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fe66 	bl	8009e78 <USBH_MSC_SCSI_TestUnitReady>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d149      	bne.n	800924a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091bc:	4619      	mov	r1, r3
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	2334      	movs	r3, #52	; 0x34
 80091c2:	fb03 f301 	mul.w	r3, r3, r1
 80091c6:	4413      	add	r3, r2
 80091c8:	3392      	adds	r3, #146	; 0x92
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00c      	beq.n	80091ea <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091d6:	4619      	mov	r1, r3
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	2334      	movs	r3, #52	; 0x34
 80091dc:	fb03 f301 	mul.w	r3, r3, r1
 80091e0:	4413      	add	r3, r2
 80091e2:	33c1      	adds	r3, #193	; 0xc1
 80091e4:	2201      	movs	r2, #1
 80091e6:	701a      	strb	r2, [r3, #0]
 80091e8:	e00b      	b.n	8009202 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091f0:	4619      	mov	r1, r3
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	2334      	movs	r3, #52	; 0x34
 80091f6:	fb03 f301 	mul.w	r3, r3, r1
 80091fa:	4413      	add	r3, r2
 80091fc:	33c1      	adds	r3, #193	; 0xc1
 80091fe:	2200      	movs	r2, #0
 8009200:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009208:	4619      	mov	r1, r3
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	2334      	movs	r3, #52	; 0x34
 800920e:	fb03 f301 	mul.w	r3, r3, r1
 8009212:	4413      	add	r3, r2
 8009214:	3390      	adds	r3, #144	; 0x90
 8009216:	2203      	movs	r2, #3
 8009218:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009220:	4619      	mov	r1, r3
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	2334      	movs	r3, #52	; 0x34
 8009226:	fb03 f301 	mul.w	r3, r3, r1
 800922a:	4413      	add	r3, r2
 800922c:	3391      	adds	r3, #145	; 0x91
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009238:	4619      	mov	r1, r3
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	2334      	movs	r3, #52	; 0x34
 800923e:	fb03 f301 	mul.w	r3, r3, r1
 8009242:	4413      	add	r3, r2
 8009244:	3392      	adds	r3, #146	; 0x92
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d14a      	bne.n	80092e6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009256:	4619      	mov	r1, r3
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	2334      	movs	r3, #52	; 0x34
 800925c:	fb03 f301 	mul.w	r3, r3, r1
 8009260:	4413      	add	r3, r2
 8009262:	3392      	adds	r3, #146	; 0x92
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b02      	cmp	r3, #2
 8009268:	d00c      	beq.n	8009284 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009270:	4619      	mov	r1, r3
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	2334      	movs	r3, #52	; 0x34
 8009276:	fb03 f301 	mul.w	r3, r3, r1
 800927a:	4413      	add	r3, r2
 800927c:	33c1      	adds	r3, #193	; 0xc1
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	e00b      	b.n	800929c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800928a:	4619      	mov	r1, r3
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	2334      	movs	r3, #52	; 0x34
 8009290:	fb03 f301 	mul.w	r3, r3, r1
 8009294:	4413      	add	r3, r2
 8009296:	33c1      	adds	r3, #193	; 0xc1
 8009298:	2200      	movs	r2, #0
 800929a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a2:	4619      	mov	r1, r3
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	2334      	movs	r3, #52	; 0x34
 80092a8:	fb03 f301 	mul.w	r3, r3, r1
 80092ac:	4413      	add	r3, r2
 80092ae:	3390      	adds	r3, #144	; 0x90
 80092b0:	2205      	movs	r2, #5
 80092b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ba:	4619      	mov	r1, r3
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	2334      	movs	r3, #52	; 0x34
 80092c0:	fb03 f301 	mul.w	r3, r3, r1
 80092c4:	4413      	add	r3, r2
 80092c6:	3391      	adds	r3, #145	; 0x91
 80092c8:	2201      	movs	r2, #1
 80092ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d2:	4619      	mov	r1, r3
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	2334      	movs	r3, #52	; 0x34
 80092d8:	fb03 f301 	mul.w	r3, r3, r1
 80092dc:	4413      	add	r3, r2
 80092de:	3392      	adds	r3, #146	; 0x92
 80092e0:	2202      	movs	r2, #2
 80092e2:	701a      	strb	r2, [r3, #0]
            break;
 80092e4:	e127      	b.n	8009536 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	f040 8124 	bne.w	8009536 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092f4:	4619      	mov	r1, r3
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	2334      	movs	r3, #52	; 0x34
 80092fa:	fb03 f301 	mul.w	r3, r3, r1
 80092fe:	4413      	add	r3, r2
 8009300:	3390      	adds	r3, #144	; 0x90
 8009302:	2201      	movs	r2, #1
 8009304:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800930c:	4619      	mov	r1, r3
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	2334      	movs	r3, #52	; 0x34
 8009312:	fb03 f301 	mul.w	r3, r3, r1
 8009316:	4413      	add	r3, r2
 8009318:	3391      	adds	r3, #145	; 0x91
 800931a:	2202      	movs	r2, #2
 800931c:	701a      	strb	r2, [r3, #0]
            break;
 800931e:	e10a      	b.n	8009536 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009326:	b2d9      	uxtb	r1, r3
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800932e:	461a      	mov	r2, r3
 8009330:	2334      	movs	r3, #52	; 0x34
 8009332:	fb03 f302 	mul.w	r3, r3, r2
 8009336:	3390      	adds	r3, #144	; 0x90
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4413      	add	r3, r2
 800933c:	3304      	adds	r3, #4
 800933e:	461a      	mov	r2, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fddc 	bl	8009efe <USBH_MSC_SCSI_ReadCapacity>
 8009346:	4603      	mov	r3, r0
 8009348:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800934a:	7bfb      	ldrb	r3, [r7, #15]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d120      	bne.n	8009392 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009356:	4619      	mov	r1, r3
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	2334      	movs	r3, #52	; 0x34
 800935c:	fb03 f301 	mul.w	r3, r3, r1
 8009360:	4413      	add	r3, r2
 8009362:	3390      	adds	r3, #144	; 0x90
 8009364:	2201      	movs	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800936e:	4619      	mov	r1, r3
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	2334      	movs	r3, #52	; 0x34
 8009374:	fb03 f301 	mul.w	r3, r3, r1
 8009378:	4413      	add	r3, r2
 800937a:	3391      	adds	r3, #145	; 0x91
 800937c:	2200      	movs	r2, #0
 800937e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009386:	3301      	adds	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009390:	e0d3      	b.n	800953a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d10c      	bne.n	80093b2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939e:	4619      	mov	r1, r3
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	2334      	movs	r3, #52	; 0x34
 80093a4:	fb03 f301 	mul.w	r3, r3, r1
 80093a8:	4413      	add	r3, r2
 80093aa:	3390      	adds	r3, #144	; 0x90
 80093ac:	2205      	movs	r2, #5
 80093ae:	701a      	strb	r2, [r3, #0]
            break;
 80093b0:	e0c3      	b.n	800953a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	f040 80c0 	bne.w	800953a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093c0:	4619      	mov	r1, r3
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	2334      	movs	r3, #52	; 0x34
 80093c6:	fb03 f301 	mul.w	r3, r3, r1
 80093ca:	4413      	add	r3, r2
 80093cc:	3390      	adds	r3, #144	; 0x90
 80093ce:	2201      	movs	r2, #1
 80093d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093d8:	4619      	mov	r1, r3
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	2334      	movs	r3, #52	; 0x34
 80093de:	fb03 f301 	mul.w	r3, r3, r1
 80093e2:	4413      	add	r3, r2
 80093e4:	3391      	adds	r3, #145	; 0x91
 80093e6:	2202      	movs	r2, #2
 80093e8:	701a      	strb	r2, [r3, #0]
            break;
 80093ea:	e0a6      	b.n	800953a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093f2:	b2d9      	uxtb	r1, r3
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093fa:	461a      	mov	r2, r3
 80093fc:	2334      	movs	r3, #52	; 0x34
 80093fe:	fb03 f302 	mul.w	r3, r3, r2
 8009402:	3398      	adds	r3, #152	; 0x98
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4413      	add	r3, r2
 8009408:	3304      	adds	r3, #4
 800940a:	461a      	mov	r2, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fe96 	bl	800a13e <USBH_MSC_SCSI_RequestSense>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d145      	bne.n	80094a8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009422:	4619      	mov	r1, r3
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	2334      	movs	r3, #52	; 0x34
 8009428:	fb03 f301 	mul.w	r3, r3, r1
 800942c:	4413      	add	r3, r2
 800942e:	339c      	adds	r3, #156	; 0x9c
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b06      	cmp	r3, #6
 8009434:	d00c      	beq.n	8009450 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800943c:	4619      	mov	r1, r3
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	2334      	movs	r3, #52	; 0x34
 8009442:	fb03 f301 	mul.w	r3, r3, r1
 8009446:	4413      	add	r3, r2
 8009448:	339c      	adds	r3, #156	; 0x9c
 800944a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800944c:	2b02      	cmp	r3, #2
 800944e:	d117      	bne.n	8009480 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009462:	4293      	cmp	r3, r2
 8009464:	d80c      	bhi.n	8009480 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800946c:	4619      	mov	r1, r3
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	2334      	movs	r3, #52	; 0x34
 8009472:	fb03 f301 	mul.w	r3, r3, r1
 8009476:	4413      	add	r3, r2
 8009478:	3390      	adds	r3, #144	; 0x90
 800947a:	2202      	movs	r2, #2
 800947c:	701a      	strb	r2, [r3, #0]
                  break;
 800947e:	e05f      	b.n	8009540 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009486:	4619      	mov	r1, r3
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	2334      	movs	r3, #52	; 0x34
 800948c:	fb03 f301 	mul.w	r3, r3, r1
 8009490:	4413      	add	r3, r2
 8009492:	3390      	adds	r3, #144	; 0x90
 8009494:	2201      	movs	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800949e:	3301      	adds	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d10c      	bne.n	80094c8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094b4:	4619      	mov	r1, r3
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	2334      	movs	r3, #52	; 0x34
 80094ba:	fb03 f301 	mul.w	r3, r3, r1
 80094be:	4413      	add	r3, r2
 80094c0:	3390      	adds	r3, #144	; 0x90
 80094c2:	2208      	movs	r2, #8
 80094c4:	701a      	strb	r2, [r3, #0]
            break;
 80094c6:	e03a      	b.n	800953e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	d137      	bne.n	800953e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094d4:	4619      	mov	r1, r3
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	2334      	movs	r3, #52	; 0x34
 80094da:	fb03 f301 	mul.w	r3, r3, r1
 80094de:	4413      	add	r3, r2
 80094e0:	3390      	adds	r3, #144	; 0x90
 80094e2:	2201      	movs	r2, #1
 80094e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ec:	4619      	mov	r1, r3
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	2334      	movs	r3, #52	; 0x34
 80094f2:	fb03 f301 	mul.w	r3, r3, r1
 80094f6:	4413      	add	r3, r2
 80094f8:	3391      	adds	r3, #145	; 0x91
 80094fa:	2202      	movs	r2, #2
 80094fc:	701a      	strb	r2, [r3, #0]
            break;
 80094fe:	e01e      	b.n	800953e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009506:	3301      	adds	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009510:	e016      	b.n	8009540 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2200      	movs	r2, #0
 8009516:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	2201      	movs	r2, #1
 800951e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009526:	2102      	movs	r1, #2
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	4798      	blx	r3
      break;
 800952c:	e00c      	b.n	8009548 <USBH_MSC_Process+0x514>
            break;
 800952e:	bf00      	nop
 8009530:	e00a      	b.n	8009548 <USBH_MSC_Process+0x514>
            break;
 8009532:	bf00      	nop
 8009534:	e008      	b.n	8009548 <USBH_MSC_Process+0x514>
            break;
 8009536:	bf00      	nop
 8009538:	e006      	b.n	8009548 <USBH_MSC_Process+0x514>
            break;
 800953a:	bf00      	nop
 800953c:	e004      	b.n	8009548 <USBH_MSC_Process+0x514>
            break;
 800953e:	bf00      	nop
      break;
 8009540:	e002      	b.n	8009548 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]
      break;
 8009546:	bf00      	nop
  }
  return error;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop

08009554 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b088      	sub	sp, #32
 800956e:	af02      	add	r7, sp, #8
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	460b      	mov	r3, r1
 8009574:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009580:	2301      	movs	r3, #1
 8009582:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009584:	2301      	movs	r3, #1
 8009586:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	2134      	movs	r1, #52	; 0x34
 800958e:	fb01 f303 	mul.w	r3, r1, r3
 8009592:	4413      	add	r3, r2
 8009594:	3390      	adds	r3, #144	; 0x90
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b07      	cmp	r3, #7
 800959a:	d03c      	beq.n	8009616 <USBH_MSC_RdWrProcess+0xac>
 800959c:	2b07      	cmp	r3, #7
 800959e:	f300 80a7 	bgt.w	80096f0 <USBH_MSC_RdWrProcess+0x186>
 80095a2:	2b05      	cmp	r3, #5
 80095a4:	d06c      	beq.n	8009680 <USBH_MSC_RdWrProcess+0x116>
 80095a6:	2b06      	cmp	r3, #6
 80095a8:	f040 80a2 	bne.w	80096f0 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80095ac:	78f9      	ldrb	r1, [r7, #3]
 80095ae:	2300      	movs	r3, #0
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	2300      	movs	r3, #0
 80095b4:	2200      	movs	r2, #0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fea5 	bl	800a306 <USBH_MSC_SCSI_Read>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	2134      	movs	r1, #52	; 0x34
 80095cc:	fb01 f303 	mul.w	r3, r1, r3
 80095d0:	4413      	add	r3, r2
 80095d2:	3390      	adds	r3, #144	; 0x90
 80095d4:	2201      	movs	r2, #1
 80095d6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095dc:	e08a      	b.n	80096f4 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d109      	bne.n	80095f8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	2134      	movs	r1, #52	; 0x34
 80095ea:	fb01 f303 	mul.w	r3, r1, r3
 80095ee:	4413      	add	r3, r2
 80095f0:	3390      	adds	r3, #144	; 0x90
 80095f2:	2205      	movs	r2, #5
 80095f4:	701a      	strb	r2, [r3, #0]
      break;
 80095f6:	e07d      	b.n	80096f4 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	d17a      	bne.n	80096f4 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80095fe:	78fb      	ldrb	r3, [r7, #3]
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	2134      	movs	r1, #52	; 0x34
 8009604:	fb01 f303 	mul.w	r3, r1, r3
 8009608:	4413      	add	r3, r2
 800960a:	3390      	adds	r3, #144	; 0x90
 800960c:	2208      	movs	r2, #8
 800960e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009610:	2302      	movs	r3, #2
 8009612:	75fb      	strb	r3, [r7, #23]
      break;
 8009614:	e06e      	b.n	80096f4 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009616:	78f9      	ldrb	r1, [r7, #3]
 8009618:	2300      	movs	r3, #0
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	2300      	movs	r3, #0
 800961e:	2200      	movs	r2, #0
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fe05 	bl	800a230 <USBH_MSC_SCSI_Write>
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10b      	bne.n	8009648 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	2134      	movs	r1, #52	; 0x34
 8009636:	fb01 f303 	mul.w	r3, r1, r3
 800963a:	4413      	add	r3, r2
 800963c:	3390      	adds	r3, #144	; 0x90
 800963e:	2201      	movs	r2, #1
 8009640:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009646:	e057      	b.n	80096f8 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d109      	bne.n	8009662 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	2134      	movs	r1, #52	; 0x34
 8009654:	fb01 f303 	mul.w	r3, r1, r3
 8009658:	4413      	add	r3, r2
 800965a:	3390      	adds	r3, #144	; 0x90
 800965c:	2205      	movs	r2, #5
 800965e:	701a      	strb	r2, [r3, #0]
      break;
 8009660:	e04a      	b.n	80096f8 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b04      	cmp	r3, #4
 8009666:	d147      	bne.n	80096f8 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	2134      	movs	r1, #52	; 0x34
 800966e:	fb01 f303 	mul.w	r3, r1, r3
 8009672:	4413      	add	r3, r2
 8009674:	3390      	adds	r3, #144	; 0x90
 8009676:	2208      	movs	r2, #8
 8009678:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800967a:	2302      	movs	r3, #2
 800967c:	75fb      	strb	r3, [r7, #23]
      break;
 800967e:	e03b      	b.n	80096f8 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	2234      	movs	r2, #52	; 0x34
 8009684:	fb02 f303 	mul.w	r3, r2, r3
 8009688:	3398      	adds	r3, #152	; 0x98
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	4413      	add	r3, r2
 800968e:	1d1a      	adds	r2, r3, #4
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fd52 	bl	800a13e <USBH_MSC_SCSI_RequestSense>
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d113      	bne.n	80096cc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	2134      	movs	r1, #52	; 0x34
 80096aa:	fb01 f303 	mul.w	r3, r1, r3
 80096ae:	4413      	add	r3, r2
 80096b0:	3390      	adds	r3, #144	; 0x90
 80096b2:	2201      	movs	r2, #1
 80096b4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80096b6:	78fb      	ldrb	r3, [r7, #3]
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	2134      	movs	r1, #52	; 0x34
 80096bc:	fb01 f303 	mul.w	r3, r1, r3
 80096c0:	4413      	add	r3, r2
 80096c2:	3391      	adds	r3, #145	; 0x91
 80096c4:	2202      	movs	r2, #2
 80096c6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80096c8:	2302      	movs	r3, #2
 80096ca:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d014      	beq.n	80096fc <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d111      	bne.n	80096fc <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	2134      	movs	r1, #52	; 0x34
 80096de:	fb01 f303 	mul.w	r3, r1, r3
 80096e2:	4413      	add	r3, r2
 80096e4:	3390      	adds	r3, #144	; 0x90
 80096e6:	2208      	movs	r2, #8
 80096e8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80096ea:	2302      	movs	r3, #2
 80096ec:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096ee:	e005      	b.n	80096fc <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80096f0:	bf00      	nop
 80096f2:	e004      	b.n	80096fe <USBH_MSC_RdWrProcess+0x194>
      break;
 80096f4:	bf00      	nop
 80096f6:	e002      	b.n	80096fe <USBH_MSC_RdWrProcess+0x194>
      break;
 80096f8:	bf00      	nop
 80096fa:	e000      	b.n	80096fe <USBH_MSC_RdWrProcess+0x194>
      break;
 80096fc:	bf00      	nop

  }
  return error;
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3718      	adds	r7, #24
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b0b      	cmp	r3, #11
 8009726:	d10c      	bne.n	8009742 <USBH_MSC_UnitIsReady+0x3a>
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	2134      	movs	r1, #52	; 0x34
 800972e:	fb01 f303 	mul.w	r3, r1, r3
 8009732:	4413      	add	r3, r2
 8009734:	3391      	adds	r3, #145	; 0x91
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800973c:	2301      	movs	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
 8009740:	e001      	b.n	8009746 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	460b      	mov	r3, r1
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b0b      	cmp	r3, #11
 8009774:	d10d      	bne.n	8009792 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009776:	7afb      	ldrb	r3, [r7, #11]
 8009778:	2234      	movs	r2, #52	; 0x34
 800977a:	fb02 f303 	mul.w	r3, r2, r3
 800977e:	3390      	adds	r3, #144	; 0x90
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	4413      	add	r3, r2
 8009784:	2234      	movs	r2, #52	; 0x34
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f007 fc4f 	bl	801102c <memcpy>
    return USBH_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	e000      	b.n	8009794 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009792:	2302      	movs	r3, #2
  }
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	607a      	str	r2, [r7, #4]
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	460b      	mov	r3, r1
 80097aa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00e      	beq.n	80097e0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80097c8:	2b0b      	cmp	r3, #11
 80097ca:	d109      	bne.n	80097e0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	2134      	movs	r1, #52	; 0x34
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	3390      	adds	r3, #144	; 0x90
 80097da:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d001      	beq.n	80097e4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80097e0:	2302      	movs	r3, #2
 80097e2:	e040      	b.n	8009866 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	2206      	movs	r2, #6
 80097e8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	2134      	movs	r1, #52	; 0x34
 80097f0:	fb01 f303 	mul.w	r3, r1, r3
 80097f4:	4413      	add	r3, r2
 80097f6:	3390      	adds	r3, #144	; 0x90
 80097f8:	2206      	movs	r2, #6
 80097fa:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	b29a      	uxth	r2, r3
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009806:	7af9      	ldrb	r1, [r7, #11]
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 fd78 	bl	800a306 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800981c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800981e:	e016      	b.n	800984e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	1ad2      	subs	r2, r2, r3
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009830:	fb01 f303 	mul.w	r3, r1, r3
 8009834:	429a      	cmp	r2, r3
 8009836:	d805      	bhi.n	8009844 <USBH_MSC_Read+0xa8>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d104      	bne.n	800984e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2201      	movs	r2, #1
 8009848:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800984a:	2302      	movs	r3, #2
 800984c:	e00b      	b.n	8009866 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	4619      	mov	r1, r3
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff fe89 	bl	800956a <USBH_MSC_RdWrProcess>
 8009858:	4603      	mov	r3, r0
 800985a:	2b01      	cmp	r3, #1
 800985c:	d0e0      	beq.n	8009820 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2201      	movs	r2, #1
 8009862:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b088      	sub	sp, #32
 8009872:	af02      	add	r7, sp, #8
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
 800987a:	460b      	mov	r3, r1
 800987c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00e      	beq.n	80098b2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800989a:	2b0b      	cmp	r3, #11
 800989c:	d109      	bne.n	80098b2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800989e:	7afb      	ldrb	r3, [r7, #11]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	2134      	movs	r1, #52	; 0x34
 80098a4:	fb01 f303 	mul.w	r3, r1, r3
 80098a8:	4413      	add	r3, r2
 80098aa:	3390      	adds	r3, #144	; 0x90
 80098ac:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d001      	beq.n	80098b6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80098b2:	2302      	movs	r3, #2
 80098b4:	e040      	b.n	8009938 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2207      	movs	r2, #7
 80098ba:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80098bc:	7afb      	ldrb	r3, [r7, #11]
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	2134      	movs	r1, #52	; 0x34
 80098c2:	fb01 f303 	mul.w	r3, r1, r3
 80098c6:	4413      	add	r3, r2
 80098c8:	3390      	adds	r3, #144	; 0x90
 80098ca:	2207      	movs	r2, #7
 80098cc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80098ce:	7afb      	ldrb	r3, [r7, #11]
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80098d8:	7af9      	ldrb	r1, [r7, #11]
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fca4 	bl	800a230 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098ee:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098f0:	e016      	b.n	8009920 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	1ad2      	subs	r2, r2, r3
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	f242 7110 	movw	r1, #10000	; 0x2710
 8009902:	fb01 f303 	mul.w	r3, r1, r3
 8009906:	429a      	cmp	r2, r3
 8009908:	d805      	bhi.n	8009916 <USBH_MSC_Write+0xa8>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d104      	bne.n	8009920 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2201      	movs	r2, #1
 800991a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800991c:	2302      	movs	r3, #2
 800991e:	e00b      	b.n	8009938 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	4619      	mov	r1, r3
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff fe20 	bl	800956a <USBH_MSC_RdWrProcess>
 800992a:	4603      	mov	r3, r0
 800992c:	2b01      	cmp	r3, #1
 800992e:	d0e0      	beq.n	80098f2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	2201      	movs	r2, #1
 8009934:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2221      	movs	r2, #33	; 0x21
 800994c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	22ff      	movs	r2, #255	; 0xff
 8009952:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 fdab 	bl	800b4c6 <USBH_CtlReq>
 8009970:	4603      	mov	r3, r0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	22a1      	movs	r2, #161	; 0xa1
 8009988:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	22fe      	movs	r2, #254	; 0xfe
 800998e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80099a2:	2201      	movs	r2, #1
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fd8d 	bl	800b4c6 <USBH_CtlReq>
 80099ac:	4603      	mov	r3, r0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	4a09      	ldr	r2, [pc, #36]	; (80099f4 <USBH_MSC_BOT_Init+0x3c>)
 80099ce:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a09      	ldr	r2, [pc, #36]	; (80099f8 <USBH_MSC_BOT_Init+0x40>)
 80099d4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	43425355 	.word	0x43425355
 80099f8:	20304050 	.word	0x20304050

080099fc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009a10:	2301      	movs	r3, #1
 8009a12:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	2b0a      	cmp	r3, #10
 8009a30:	f200 819e 	bhi.w	8009d70 <USBH_MSC_BOT_Process+0x374>
 8009a34:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <USBH_MSC_BOT_Process+0x40>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009a69 	.word	0x08009a69
 8009a40:	08009a91 	.word	0x08009a91
 8009a44:	08009afb 	.word	0x08009afb
 8009a48:	08009b19 	.word	0x08009b19
 8009a4c:	08009b9d 	.word	0x08009b9d
 8009a50:	08009bbf 	.word	0x08009bbf
 8009a54:	08009c57 	.word	0x08009c57
 8009a58:	08009c73 	.word	0x08009c73
 8009a5c:	08009cc5 	.word	0x08009cc5
 8009a60:	08009cf5 	.word	0x08009cf5
 8009a64:	08009d57 	.word	0x08009d57
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	78fa      	ldrb	r2, [r7, #3]
 8009a6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	795b      	ldrb	r3, [r3, #5]
 8009a82:	2201      	movs	r2, #1
 8009a84:	9200      	str	r2, [sp, #0]
 8009a86:	221f      	movs	r2, #31
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 ff2a 	bl	800b8e2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009a8e:	e17e      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	795b      	ldrb	r3, [r3, #5]
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f007 f9d6 	bl	8010e48 <USBH_LL_GetURBState>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009aa0:	7d3b      	ldrb	r3, [r7, #20]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d118      	bne.n	8009ad8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00f      	beq.n	8009ace <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009ab4:	b25b      	sxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	da04      	bge.n	8009ac4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2203      	movs	r2, #3
 8009abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ac2:	e157      	b.n	8009d74 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2205      	movs	r2, #5
 8009ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009acc:	e152      	b.n	8009d74 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2207      	movs	r2, #7
 8009ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ad6:	e14d      	b.n	8009d74 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ad8:	7d3b      	ldrb	r3, [r7, #20]
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d104      	bne.n	8009ae8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ae6:	e145      	b.n	8009d74 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009ae8:	7d3b      	ldrb	r3, [r7, #20]
 8009aea:	2b05      	cmp	r3, #5
 8009aec:	f040 8142 	bne.w	8009d74 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	220a      	movs	r2, #10
 8009af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009af8:	e13c      	b.n	8009d74 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	895a      	ldrh	r2, [r3, #10]
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	791b      	ldrb	r3, [r3, #4]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 ff0f 	bl	800b92c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	2204      	movs	r2, #4
 8009b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009b16:	e13a      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	791b      	ldrb	r3, [r3, #4]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f007 f992 	bl	8010e48 <USBH_LL_GetURBState>
 8009b24:	4603      	mov	r3, r0
 8009b26:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b28:	7d3b      	ldrb	r3, [r7, #20]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d12d      	bne.n	8009b8a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	8952      	ldrh	r2, [r2, #10]
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d910      	bls.n	8009b5c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	8952      	ldrh	r2, [r2, #10]
 8009b44:	441a      	add	r2, r3
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	8952      	ldrh	r2, [r2, #10]
 8009b54:	1a9a      	subs	r2, r3, r2
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b5a:	e002      	b.n	8009b62 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	895a      	ldrh	r2, [r3, #10]
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	791b      	ldrb	r3, [r3, #4]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 fed7 	bl	800b92c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009b7e:	e0fb      	b.n	8009d78 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2207      	movs	r2, #7
 8009b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b88:	e0f6      	b.n	8009d78 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009b8a:	7d3b      	ldrb	r3, [r7, #20]
 8009b8c:	2b05      	cmp	r3, #5
 8009b8e:	f040 80f3 	bne.w	8009d78 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2209      	movs	r2, #9
 8009b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b9a:	e0ed      	b.n	8009d78 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	891a      	ldrh	r2, [r3, #8]
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	795b      	ldrb	r3, [r3, #5]
 8009baa:	2001      	movs	r0, #1
 8009bac:	9000      	str	r0, [sp, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 fe97 	bl	800b8e2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2206      	movs	r2, #6
 8009bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bbc:	e0e7      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	795b      	ldrb	r3, [r3, #5]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f007 f93f 	bl	8010e48 <USBH_LL_GetURBState>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009bce:	7d3b      	ldrb	r3, [r7, #20]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d12f      	bne.n	8009c34 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	8912      	ldrh	r2, [r2, #8]
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d910      	bls.n	8009c02 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	8912      	ldrh	r2, [r2, #8]
 8009bea:	441a      	add	r2, r3
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	8912      	ldrh	r2, [r2, #8]
 8009bfa:	1a9a      	subs	r2, r3, r2
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c00:	e002      	b.n	8009c08 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2200      	movs	r2, #0
 8009c06:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00c      	beq.n	8009c2a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	891a      	ldrh	r2, [r3, #8]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	795b      	ldrb	r3, [r3, #5]
 8009c1e:	2001      	movs	r0, #1
 8009c20:	9000      	str	r0, [sp, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 fe5d 	bl	800b8e2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009c28:	e0a8      	b.n	8009d7c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2207      	movs	r2, #7
 8009c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c32:	e0a3      	b.n	8009d7c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c34:	7d3b      	ldrb	r3, [r7, #20]
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d104      	bne.n	8009c44 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2205      	movs	r2, #5
 8009c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c42:	e09b      	b.n	8009d7c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009c44:	7d3b      	ldrb	r3, [r7, #20]
 8009c46:	2b05      	cmp	r3, #5
 8009c48:	f040 8098 	bne.w	8009d7c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	220a      	movs	r2, #10
 8009c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c54:	e092      	b.n	8009d7c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	791b      	ldrb	r3, [r3, #4]
 8009c60:	220d      	movs	r2, #13
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 fe62 	bl	800b92c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	2208      	movs	r2, #8
 8009c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c70:	e08d      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	791b      	ldrb	r3, [r3, #4]
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f007 f8e5 	bl	8010e48 <USBH_LL_GetURBState>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009c82:	7d3b      	ldrb	r3, [r7, #20]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d115      	bne.n	8009cb4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f8a9 	bl	8009df0 <USBH_MSC_DecodeCSW>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009ca2:	7d7b      	ldrb	r3, [r7, #21]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d102      	bne.n	8009cae <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009cac:	e068      	b.n	8009d80 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009cae:	2302      	movs	r3, #2
 8009cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb2:	e065      	b.n	8009d80 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009cb4:	7d3b      	ldrb	r3, [r7, #20]
 8009cb6:	2b05      	cmp	r3, #5
 8009cb8:	d162      	bne.n	8009d80 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	2209      	movs	r2, #9
 8009cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cc2:	e05d      	b.n	8009d80 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f864 	bl	8009d98 <USBH_MSC_BOT_Abort>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009cd4:	7dbb      	ldrb	r3, [r7, #22]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2207      	movs	r2, #7
 8009cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009ce2:	e04f      	b.n	8009d84 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009ce4:	7dbb      	ldrb	r3, [r7, #22]
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	d14c      	bne.n	8009d84 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	220b      	movs	r2, #11
 8009cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cf2:	e047      	b.n	8009d84 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009cf4:	78fb      	ldrb	r3, [r7, #3]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f84c 	bl	8009d98 <USBH_MSC_BOT_Abort>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009d04:	7dbb      	ldrb	r3, [r7, #22]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d11d      	bne.n	8009d46 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	795b      	ldrb	r3, [r3, #5]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f007 f8ea 	bl	8010eea <USBH_LL_GetToggle>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	7959      	ldrb	r1, [r3, #5]
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	f1c3 0301 	rsb	r3, r3, #1
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f007 f8ae 	bl	8010e8a <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	791b      	ldrb	r3, [r3, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f007 f8a7 	bl	8010e8a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	2209      	movs	r2, #9
 8009d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009d44:	e020      	b.n	8009d88 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009d46:	7dbb      	ldrb	r3, [r7, #22]
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d11d      	bne.n	8009d88 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	220b      	movs	r2, #11
 8009d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d54:	e018      	b.n	8009d88 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff fdf2 	bl	8009940 <USBH_MSC_BOT_REQ_Reset>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d112      	bne.n	8009d8c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009d6e:	e00d      	b.n	8009d8c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009d70:	bf00      	nop
 8009d72:	e00c      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d74:	bf00      	nop
 8009d76:	e00a      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d78:	bf00      	nop
 8009d7a:	e008      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d7c:	bf00      	nop
 8009d7e:	e006      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d80:	bf00      	nop
 8009d82:	e004      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d84:	bf00      	nop
 8009d86:	e002      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d88:	bf00      	nop
 8009d8a:	e000      	b.n	8009d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d8c:	bf00      	nop
  }
  return status;
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
 8009da4:	4613      	mov	r3, r2
 8009da6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009da8:	2302      	movs	r3, #2
 8009daa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009db6:	78bb      	ldrb	r3, [r7, #2]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <USBH_MSC_BOT_Abort+0x2a>
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d009      	beq.n	8009dd4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009dc0:	e011      	b.n	8009de6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	79db      	ldrb	r3, [r3, #7]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 f99c 	bl	800b106 <USBH_ClrFeature>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009dd2:	e008      	b.n	8009de6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	799b      	ldrb	r3, [r3, #6]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 f993 	bl	800b106 <USBH_ClrFeature>
 8009de0:	4603      	mov	r3, r0
 8009de2:	73fb      	strb	r3, [r7, #15]
      break;
 8009de4:	bf00      	nop
  }
  return status;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009e02:	2301      	movs	r3, #1
 8009e04:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	791b      	ldrb	r3, [r3, #4]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f006 ff89 	bl	8010d24 <USBH_LL_GetLastXferSize>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b0d      	cmp	r3, #13
 8009e16:	d002      	beq.n	8009e1e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	73fb      	strb	r3, [r7, #15]
 8009e1c:	e024      	b.n	8009e68 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e22:	4a14      	ldr	r2, [pc, #80]	; (8009e74 <USBH_MSC_DecodeCSW+0x84>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d11d      	bne.n	8009e64 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d119      	bne.n	8009e68 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d102      	bne.n	8009e44 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73fb      	strb	r3, [r7, #15]
 8009e42:	e011      	b.n	8009e68 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d102      	bne.n	8009e54 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	73fb      	strb	r3, [r7, #15]
 8009e52:	e009      	b.n	8009e68 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d104      	bne.n	8009e68 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009e5e:	2302      	movs	r3, #2
 8009e60:	73fb      	strb	r3, [r7, #15]
 8009e62:	e001      	b.n	8009e68 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009e64:	2302      	movs	r3, #2
 8009e66:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	53425355 	.word	0x53425355

08009e78 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e84:	2302      	movs	r3, #2
 8009e86:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d002      	beq.n	8009ea2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d021      	beq.n	8009ee4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009ea0:	e028      	b.n	8009ef4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	220a      	movs	r2, #10
 8009eb4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3363      	adds	r3, #99	; 0x63
 8009ebc:	2210      	movs	r2, #16
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f007 f8c1 	bl	8011048 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ee2:	e007      	b.n	8009ef4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fd87 	bl	80099fc <USBH_MSC_BOT_Process>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef2:	bf00      	nop
  }

  return error;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b086      	sub	sp, #24
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	460b      	mov	r3, r1
 8009f08:	607a      	str	r2, [r7, #4]
 8009f0a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f16:	69db      	ldr	r3, [r3, #28]
 8009f18:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d002      	beq.n	8009f2a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d027      	beq.n	8009f78 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009f28:	e05f      	b.n	8009fea <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2280      	movs	r2, #128	; 0x80
 8009f34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	220a      	movs	r2, #10
 8009f3c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	3363      	adds	r3, #99	; 0x63
 8009f44:	2210      	movs	r2, #16
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f007 f87d 	bl	8011048 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	2225      	movs	r2, #37	; 0x25
 8009f52:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2202      	movs	r2, #2
 8009f62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f103 0210 	add.w	r2, r3, #16
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f72:	2301      	movs	r3, #1
 8009f74:	75fb      	strb	r3, [r7, #23]
      break;
 8009f76:	e038      	b.n	8009fea <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f78:	7afb      	ldrb	r3, [r7, #11]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7ff fd3d 	bl	80099fc <USBH_MSC_BOT_Process>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d12d      	bne.n	8009fe8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f92:	3303      	adds	r3, #3
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f9e:	3302      	adds	r3, #2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fac:	3301      	adds	r3, #1
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009fb2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	061b      	lsls	r3, r3, #24
 8009fbe:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fca:	3307      	adds	r3, #7
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd6:	3306      	adds	r3, #6
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	021b      	lsls	r3, r3, #8
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	809a      	strh	r2, [r3, #4]
      break;
 8009fe8:	bf00      	nop
  }

  return error;
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a002:	2302      	movs	r3, #2
 800a004:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a016:	2b01      	cmp	r3, #1
 800a018:	d002      	beq.n	800a020 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d03d      	beq.n	800a09a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a01e:	e089      	b.n	800a134 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2224      	movs	r2, #36	; 0x24
 800a024:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2280      	movs	r2, #128	; 0x80
 800a02a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	220a      	movs	r2, #10
 800a032:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	3363      	adds	r3, #99	; 0x63
 800a03a:	220a      	movs	r2, #10
 800a03c:	2100      	movs	r1, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f007 f802 	bl	8011048 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2212      	movs	r2, #18
 800a048:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	015b      	lsls	r3, r3, #5
 800a050:	b2da      	uxtb	r2, r3
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	2224      	movs	r2, #36	; 0x24
 800a06c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	2202      	movs	r2, #2
 800a084:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	f103 0210 	add.w	r2, r3, #16
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a094:	2301      	movs	r3, #1
 800a096:	75fb      	strb	r3, [r7, #23]
      break;
 800a098:	e04c      	b.n	800a134 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a09a:	7afb      	ldrb	r3, [r7, #11]
 800a09c:	4619      	mov	r1, r3
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7ff fcac 	bl	80099fc <USBH_MSC_BOT_Process>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d141      	bne.n	800a132 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a0ae:	2222      	movs	r2, #34	; 0x22
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f006 ffc8 	bl	8011048 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f003 031f 	and.w	r3, r3, #31
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	095b      	lsrs	r3, r3, #5
 800a0d4:	b2da      	uxtb	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	b25b      	sxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	da03      	bge.n	800a0f2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	709a      	strb	r2, [r3, #2]
 800a0f0:	e002      	b.n	800a0f8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	1cd8      	adds	r0, r3, #3
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a102:	3308      	adds	r3, #8
 800a104:	2208      	movs	r2, #8
 800a106:	4619      	mov	r1, r3
 800a108:	f006 ff90 	bl	801102c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f103 000c 	add.w	r0, r3, #12
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a118:	3310      	adds	r3, #16
 800a11a:	2210      	movs	r2, #16
 800a11c:	4619      	mov	r1, r3
 800a11e:	f006 ff85 	bl	801102c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	331d      	adds	r3, #29
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a12c:	3220      	adds	r2, #32
 800a12e:	6812      	ldr	r2, [r2, #0]
 800a130:	601a      	str	r2, [r3, #0]
      break;
 800a132:	bf00      	nop
  }

  return error;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b086      	sub	sp, #24
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	460b      	mov	r3, r1
 800a148:	607a      	str	r2, [r7, #4]
 800a14a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a14c:	2302      	movs	r3, #2
 800a14e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a160:	2b01      	cmp	r3, #1
 800a162:	d002      	beq.n	800a16a <USBH_MSC_SCSI_RequestSense+0x2c>
 800a164:	2b02      	cmp	r3, #2
 800a166:	d03d      	beq.n	800a1e4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a168:	e05d      	b.n	800a226 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	220e      	movs	r2, #14
 800a16e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2280      	movs	r2, #128	; 0x80
 800a174:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	220a      	movs	r2, #10
 800a17c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	3363      	adds	r3, #99	; 0x63
 800a184:	2210      	movs	r2, #16
 800a186:	2100      	movs	r1, #0
 800a188:	4618      	mov	r0, r3
 800a18a:	f006 ff5d 	bl	8011048 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2203      	movs	r2, #3
 800a192:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	015b      	lsls	r3, r3, #5
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	220e      	movs	r2, #14
 800a1b6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f103 0210 	add.w	r2, r3, #16
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e2:	e020      	b.n	800a226 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff fc07 	bl	80099fc <USBH_MSC_BOT_Process>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a1f2:	7dfb      	ldrb	r3, [r7, #23]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d115      	bne.n	800a224 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1fe:	3302      	adds	r3, #2
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	f003 030f 	and.w	r3, r3, #15
 800a206:	b2da      	uxtb	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a212:	7b1a      	ldrb	r2, [r3, #12]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a21e:	7b5a      	ldrb	r2, [r3, #13]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	709a      	strb	r2, [r3, #2]
      break;
 800a224:	bf00      	nop
  }

  return error;
 800a226:	7dfb      	ldrb	r3, [r7, #23]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	603b      	str	r3, [r7, #0]
 800a23c:	460b      	mov	r3, r1
 800a23e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a240:	2302      	movs	r3, #2
 800a242:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a254:	2b01      	cmp	r3, #1
 800a256:	d002      	beq.n	800a25e <USBH_MSC_SCSI_Write+0x2e>
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d047      	beq.n	800a2ec <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a25c:	e04e      	b.n	800a2fc <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a264:	461a      	mov	r2, r3
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	fb03 f202 	mul.w	r2, r3, r2
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	220a      	movs	r2, #10
 800a27c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	3363      	adds	r3, #99	; 0x63
 800a284:	2210      	movs	r2, #16
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f006 fedd 	bl	8011048 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	222a      	movs	r2, #42	; 0x2a
 800a292:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a296:	79fa      	ldrb	r2, [r7, #7]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a29e:	79ba      	ldrb	r2, [r7, #6]
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a2a6:	797a      	ldrb	r2, [r7, #5]
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a2ae:	1d3b      	adds	r3, r7, #4
 800a2b0:	781a      	ldrb	r2, [r3, #0]
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a2b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a2c2:	f107 0320 	add.w	r3, r7, #32
 800a2c6:	781a      	ldrb	r2, [r3, #0]
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ea:	e007      	b.n	800a2fc <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff fb83 	bl	80099fc <USBH_MSC_BOT_Process>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2fa:	bf00      	nop
  }

  return error;
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b086      	sub	sp, #24
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	603b      	str	r3, [r7, #0]
 800a312:	460b      	mov	r3, r1
 800a314:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a316:	2302      	movs	r3, #2
 800a318:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d002      	beq.n	800a334 <USBH_MSC_SCSI_Read+0x2e>
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d047      	beq.n	800a3c2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a332:	e04e      	b.n	800a3d2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a33a:	461a      	mov	r2, r3
 800a33c:	6a3b      	ldr	r3, [r7, #32]
 800a33e:	fb03 f202 	mul.w	r2, r3, r2
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2280      	movs	r2, #128	; 0x80
 800a34a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	220a      	movs	r2, #10
 800a352:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	3363      	adds	r3, #99	; 0x63
 800a35a:	2210      	movs	r2, #16
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f006 fe72 	bl	8011048 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2228      	movs	r2, #40	; 0x28
 800a368:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a36c:	79fa      	ldrb	r2, [r7, #7]
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a374:	79ba      	ldrb	r2, [r7, #6]
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a37c:	797a      	ldrb	r2, [r7, #5]
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a384:	1d3b      	adds	r3, r7, #4
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a38e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a398:	f107 0320 	add.w	r3, r7, #32
 800a39c:	781a      	ldrb	r2, [r3, #0]
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c0:	e007      	b.n	800a3d2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff fb18 	bl	80099fc <USBH_MSC_BOT_Process>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d0:	bf00      	nop
  }

  return error;
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e029      	b.n	800a448 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	79fa      	ldrb	r2, [r7, #7]
 800a3f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f000 f81f 	bl	800a450 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d003      	beq.n	800a440 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f006 fbb9 	bl	8010bb8 <USBH_LL_Init>

  return USBH_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a45c:	2300      	movs	r3, #0
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	e009      	b.n	800a476 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	33e0      	adds	r3, #224	; 0xe0
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	2200      	movs	r2, #0
 800a46e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3301      	adds	r3, #1
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b0e      	cmp	r3, #14
 800a47a:	d9f2      	bls.n	800a462 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	e009      	b.n	800a496 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4413      	add	r3, r2
 800a488:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3301      	adds	r3, #1
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a49c:	d3f1      	bcc.n	800a482 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2240      	movs	r2, #64	; 0x40
 800a4c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d016      	beq.n	800a53a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10e      	bne.n	800a534 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a51c:	1c59      	adds	r1, r3, #1
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	33de      	adds	r3, #222	; 0xde
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	73fb      	strb	r3, [r7, #15]
 800a532:	e004      	b.n	800a53e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a534:	2302      	movs	r3, #2
 800a536:	73fb      	strb	r3, [r7, #15]
 800a538:	e001      	b.n	800a53e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a53a:	2302      	movs	r3, #2
 800a53c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a562:	78fa      	ldrb	r2, [r7, #3]
 800a564:	429a      	cmp	r2, r3
 800a566:	d204      	bcs.n	800a572 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	78fa      	ldrb	r2, [r7, #3]
 800a56c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a570:	e001      	b.n	800a576 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a572:	2302      	movs	r3, #2
 800a574:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a576:	7bfb      	ldrb	r3, [r7, #15]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	4608      	mov	r0, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	461a      	mov	r2, r3
 800a592:	4603      	mov	r3, r0
 800a594:	70fb      	strb	r3, [r7, #3]
 800a596:	460b      	mov	r3, r1
 800a598:	70bb      	strb	r3, [r7, #2]
 800a59a:	4613      	mov	r3, r2
 800a59c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a5ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a5ae:	e025      	b.n	800a5fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	221a      	movs	r2, #26
 800a5b4:	fb02 f303 	mul.w	r3, r2, r3
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	3302      	adds	r3, #2
 800a5c0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	795b      	ldrb	r3, [r3, #5]
 800a5c6:	78fa      	ldrb	r2, [r7, #3]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d002      	beq.n	800a5d2 <USBH_FindInterface+0x4e>
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	2bff      	cmp	r3, #255	; 0xff
 800a5d0:	d111      	bne.n	800a5f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a5d6:	78ba      	ldrb	r2, [r7, #2]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d002      	beq.n	800a5e2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5dc:	78bb      	ldrb	r3, [r7, #2]
 800a5de:	2bff      	cmp	r3, #255	; 0xff
 800a5e0:	d109      	bne.n	800a5f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5e6:	787a      	ldrb	r2, [r7, #1]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d002      	beq.n	800a5f2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a5ec:	787b      	ldrb	r3, [r7, #1]
 800a5ee:	2bff      	cmp	r3, #255	; 0xff
 800a5f0:	d101      	bne.n	800a5f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	e006      	b.n	800a604 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a5fc:	7dfb      	ldrb	r3, [r7, #23]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d9d6      	bls.n	800a5b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a602:	23ff      	movs	r3, #255	; 0xff
}
 800a604:	4618      	mov	r0, r3
 800a606:	371c      	adds	r7, #28
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f006 fb0b 	bl	8010c34 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a61e:	2101      	movs	r1, #1
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f006 fc24 	bl	8010e6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b088      	sub	sp, #32
 800a634:	af04      	add	r7, sp, #16
 800a636:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a638:	2302      	movs	r3, #2
 800a63a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d102      	bne.n	800a652 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2203      	movs	r2, #3
 800a650:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b0b      	cmp	r3, #11
 800a65a:	f200 81b3 	bhi.w	800a9c4 <USBH_Process+0x394>
 800a65e:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <USBH_Process+0x34>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a695 	.word	0x0800a695
 800a668:	0800a6c7 	.word	0x0800a6c7
 800a66c:	0800a72f 	.word	0x0800a72f
 800a670:	0800a95f 	.word	0x0800a95f
 800a674:	0800a9c5 	.word	0x0800a9c5
 800a678:	0800a7d3 	.word	0x0800a7d3
 800a67c:	0800a905 	.word	0x0800a905
 800a680:	0800a809 	.word	0x0800a809
 800a684:	0800a829 	.word	0x0800a829
 800a688:	0800a849 	.word	0x0800a849
 800a68c:	0800a877 	.word	0x0800a877
 800a690:	0800a947 	.word	0x0800a947
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f000 8193 	beq.w	800a9c8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a6a8:	20c8      	movs	r0, #200	; 0xc8
 800a6aa:	f006 fc4e 	bl	8010f4a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f006 fb1d 	bl	8010cee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a6c4:	e180      	b.n	800a9c8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d107      	bne.n	800a6e0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6de:	e182      	b.n	800a9e6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a6e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6ea:	d914      	bls.n	800a716 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a702:	2b03      	cmp	r3, #3
 800a704:	d903      	bls.n	800a70e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	220d      	movs	r2, #13
 800a70a:	701a      	strb	r2, [r3, #0]
      break;
 800a70c:	e16b      	b.n	800a9e6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	701a      	strb	r2, [r3, #0]
      break;
 800a714:	e167      	b.n	800a9e6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a71c:	f103 020a 	add.w	r2, r3, #10
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a726:	200a      	movs	r0, #10
 800a728:	f006 fc0f 	bl	8010f4a <USBH_Delay>
      break;
 800a72c:	e15b      	b.n	800a9e6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a73e:	2104      	movs	r1, #4
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a744:	2064      	movs	r0, #100	; 0x64
 800a746:	f006 fc00 	bl	8010f4a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f006 faa8 	bl	8010ca0 <USBH_LL_GetSpeed>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2205      	movs	r2, #5
 800a75e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f92f 	bl	800b9c6 <USBH_AllocPipe>
 800a768:	4603      	mov	r3, r0
 800a76a:	461a      	mov	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a770:	2180      	movs	r1, #128	; 0x80
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 f927 	bl	800b9c6 <USBH_AllocPipe>
 800a778:	4603      	mov	r3, r0
 800a77a:	461a      	mov	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	7919      	ldrb	r1, [r3, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a794:	b292      	uxth	r2, r2
 800a796:	9202      	str	r2, [sp, #8]
 800a798:	2200      	movs	r2, #0
 800a79a:	9201      	str	r2, [sp, #4]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2280      	movs	r2, #128	; 0x80
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 f8e0 	bl	800b968 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	7959      	ldrb	r1, [r3, #5]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a7bc:	b292      	uxth	r2, r2
 800a7be:	9202      	str	r2, [sp, #8]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	9201      	str	r2, [sp, #4]
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f001 f8cc 	bl	800b968 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7d0:	e109      	b.n	800a9e6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f90c 	bl	800a9f0 <USBH_HandleEnum>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f040 80f3 	bne.w	800a9cc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d103      	bne.n	800a800 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2208      	movs	r2, #8
 800a7fc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a7fe:	e0e5      	b.n	800a9cc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2207      	movs	r2, #7
 800a804:	701a      	strb	r2, [r3, #0]
      break;
 800a806:	e0e1      	b.n	800a9cc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 80de 	beq.w	800a9d0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a81a:	2101      	movs	r1, #1
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2208      	movs	r2, #8
 800a824:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a826:	e0d3      	b.n	800a9d0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a82e:	b29b      	uxth	r3, r3
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fc20 	bl	800b078 <USBH_SetCfg>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f040 80ca 	bne.w	800a9d4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2209      	movs	r2, #9
 800a844:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a846:	e0c5      	b.n	800a9d4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a856:	2101      	movs	r1, #1
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fc30 	bl	800b0be <USBH_SetFeature>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	f040 80b9 	bne.w	800a9d8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	220a      	movs	r2, #10
 800a86a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a86c:	e0b4      	b.n	800a9d8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	220a      	movs	r2, #10
 800a872:	701a      	strb	r2, [r3, #0]
      break;
 800a874:	e0b0      	b.n	800a9d8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 80ad 	beq.w	800a9dc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]
 800a88e:	e016      	b.n	800a8be <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a890:	7bfa      	ldrb	r2, [r7, #15]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	32de      	adds	r2, #222	; 0xde
 800a896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89a:	791a      	ldrb	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d108      	bne.n	800a8b8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a8a6:	7bfa      	ldrb	r2, [r7, #15]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	32de      	adds	r2, #222	; 0xde
 800a8ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a8b6:	e005      	b.n	800a8c4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	73fb      	strb	r3, [r7, #15]
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0e5      	beq.n	800a890 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d016      	beq.n	800a8fc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	4798      	blx	r3
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d109      	bne.n	800a8f4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2206      	movs	r2, #6
 800a8e4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ec:	2103      	movs	r1, #3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8f2:	e073      	b.n	800a9dc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	220d      	movs	r2, #13
 800a8f8:	701a      	strb	r2, [r3, #0]
      break;
 800a8fa:	e06f      	b.n	800a9dc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	220d      	movs	r2, #13
 800a900:	701a      	strb	r2, [r3, #0]
      break;
 800a902:	e06b      	b.n	800a9dc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d017      	beq.n	800a93e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	4798      	blx	r3
 800a91a:	4603      	mov	r3, r0
 800a91c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a91e:	7bbb      	ldrb	r3, [r7, #14]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d103      	bne.n	800a92e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	220b      	movs	r2, #11
 800a92a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a92c:	e058      	b.n	800a9e0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b02      	cmp	r3, #2
 800a934:	d154      	bne.n	800a9e0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	220d      	movs	r2, #13
 800a93a:	701a      	strb	r2, [r3, #0]
      break;
 800a93c:	e050      	b.n	800a9e0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	220d      	movs	r2, #13
 800a942:	701a      	strb	r2, [r3, #0]
      break;
 800a944:	e04c      	b.n	800a9e0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d049      	beq.n	800a9e4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	4798      	blx	r3
      }
      break;
 800a95c:	e042      	b.n	800a9e4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff fd72 	bl	800a450 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d009      	beq.n	800a98a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a99a:	2105      	movs	r1, #5
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d107      	bne.n	800a9bc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff fe2b 	bl	800a610 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9ba:	e014      	b.n	800a9e6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f006 f939 	bl	8010c34 <USBH_LL_Start>
      break;
 800a9c2:	e010      	b.n	800a9e6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a9c4:	bf00      	nop
 800a9c6:	e00e      	b.n	800a9e6 <USBH_Process+0x3b6>
      break;
 800a9c8:	bf00      	nop
 800a9ca:	e00c      	b.n	800a9e6 <USBH_Process+0x3b6>
      break;
 800a9cc:	bf00      	nop
 800a9ce:	e00a      	b.n	800a9e6 <USBH_Process+0x3b6>
    break;
 800a9d0:	bf00      	nop
 800a9d2:	e008      	b.n	800a9e6 <USBH_Process+0x3b6>
      break;
 800a9d4:	bf00      	nop
 800a9d6:	e006      	b.n	800a9e6 <USBH_Process+0x3b6>
      break;
 800a9d8:	bf00      	nop
 800a9da:	e004      	b.n	800a9e6 <USBH_Process+0x3b6>
      break;
 800a9dc:	bf00      	nop
 800a9de:	e002      	b.n	800a9e6 <USBH_Process+0x3b6>
      break;
 800a9e0:	bf00      	nop
 800a9e2:	e000      	b.n	800a9e6 <USBH_Process+0x3b6>
      break;
 800a9e4:	bf00      	nop
  }
  return USBH_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b088      	sub	sp, #32
 800a9f4:	af04      	add	r7, sp, #16
 800a9f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	785b      	ldrb	r3, [r3, #1]
 800aa04:	2b07      	cmp	r3, #7
 800aa06:	f200 81c1 	bhi.w	800ad8c <USBH_HandleEnum+0x39c>
 800aa0a:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <USBH_HandleEnum+0x20>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aa31 	.word	0x0800aa31
 800aa14:	0800aaef 	.word	0x0800aaef
 800aa18:	0800ab59 	.word	0x0800ab59
 800aa1c:	0800abe7 	.word	0x0800abe7
 800aa20:	0800ac51 	.word	0x0800ac51
 800aa24:	0800acc1 	.word	0x0800acc1
 800aa28:	0800ad07 	.word	0x0800ad07
 800aa2c:	0800ad4d 	.word	0x0800ad4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aa30:	2108      	movs	r1, #8
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa50 	bl	800aed8 <USBH_Get_DevDesc>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d130      	bne.n	800aaa4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	7919      	ldrb	r1, [r3, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aa66:	b292      	uxth	r2, r2
 800aa68:	9202      	str	r2, [sp, #8]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	9201      	str	r2, [sp, #4]
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	4603      	mov	r3, r0
 800aa72:	2280      	movs	r2, #128	; 0x80
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 ff77 	bl	800b968 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	7959      	ldrb	r1, [r3, #5]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa8e:	b292      	uxth	r2, r2
 800aa90:	9202      	str	r2, [sp, #8]
 800aa92:	2200      	movs	r2, #0
 800aa94:	9201      	str	r2, [sp, #4]
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 ff63 	bl	800b968 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aaa2:	e175      	b.n	800ad90 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	f040 8172 	bne.w	800ad90 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aab2:	3301      	adds	r3, #1
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d903      	bls.n	800aace <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	220d      	movs	r2, #13
 800aaca:	701a      	strb	r2, [r3, #0]
      break;
 800aacc:	e160      	b.n	800ad90 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	795b      	ldrb	r3, [r3, #5]
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 ff97 	bl	800ba08 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	791b      	ldrb	r3, [r3, #4]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 ff91 	bl	800ba08 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	701a      	strb	r2, [r3, #0]
      break;
 800aaec:	e150      	b.n	800ad90 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aaee:	2112      	movs	r1, #18
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f9f1 	bl	800aed8 <USBH_Get_DevDesc>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d103      	bne.n	800ab08 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2202      	movs	r2, #2
 800ab04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab06:	e145      	b.n	800ad94 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	f040 8142 	bne.w	800ad94 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab16:	3301      	adds	r3, #1
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d903      	bls.n	800ab32 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	220d      	movs	r2, #13
 800ab2e:	701a      	strb	r2, [r3, #0]
      break;
 800ab30:	e130      	b.n	800ad94 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	795b      	ldrb	r3, [r3, #5]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 ff65 	bl	800ba08 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	791b      	ldrb	r3, [r3, #4]
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 ff5f 	bl	800ba08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	701a      	strb	r2, [r3, #0]
      break;
 800ab56:	e11d      	b.n	800ad94 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ab58:	2101      	movs	r1, #1
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fa68 	bl	800b030 <USBH_SetAddress>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d132      	bne.n	800abd0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ab6a:	2002      	movs	r0, #2
 800ab6c:	f006 f9ed 	bl	8010f4a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2203      	movs	r2, #3
 800ab7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	7919      	ldrb	r1, [r3, #4]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ab92:	b292      	uxth	r2, r2
 800ab94:	9202      	str	r2, [sp, #8]
 800ab96:	2200      	movs	r2, #0
 800ab98:	9201      	str	r2, [sp, #4]
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2280      	movs	r2, #128	; 0x80
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fee1 	bl	800b968 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	7959      	ldrb	r1, [r3, #5]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abba:	b292      	uxth	r2, r2
 800abbc:	9202      	str	r2, [sp, #8]
 800abbe:	2200      	movs	r2, #0
 800abc0:	9201      	str	r2, [sp, #4]
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	4603      	mov	r3, r0
 800abc6:	2200      	movs	r2, #0
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fecd 	bl	800b968 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800abce:	e0e3      	b.n	800ad98 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abd0:	7bbb      	ldrb	r3, [r7, #14]
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	f040 80e0 	bne.w	800ad98 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	220d      	movs	r2, #13
 800abdc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	705a      	strb	r2, [r3, #1]
      break;
 800abe4:	e0d8      	b.n	800ad98 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800abe6:	2109      	movs	r1, #9
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f99d 	bl	800af28 <USBH_Get_CfgDesc>
 800abee:	4603      	mov	r3, r0
 800abf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d103      	bne.n	800ac00 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2204      	movs	r2, #4
 800abfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abfe:	e0cd      	b.n	800ad9c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	f040 80ca 	bne.w	800ad9c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac0e:	3301      	adds	r3, #1
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d903      	bls.n	800ac2a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	220d      	movs	r2, #13
 800ac26:	701a      	strb	r2, [r3, #0]
      break;
 800ac28:	e0b8      	b.n	800ad9c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	795b      	ldrb	r3, [r3, #5]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fee9 	bl	800ba08 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	791b      	ldrb	r3, [r3, #4]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fee3 	bl	800ba08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	701a      	strb	r2, [r3, #0]
      break;
 800ac4e:	e0a5      	b.n	800ad9c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f965 	bl	800af28 <USBH_Get_CfgDesc>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d103      	bne.n	800ac70 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2205      	movs	r2, #5
 800ac6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac6e:	e097      	b.n	800ada0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac70:	7bbb      	ldrb	r3, [r7, #14]
 800ac72:	2b03      	cmp	r3, #3
 800ac74:	f040 8094 	bne.w	800ada0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac7e:	3301      	adds	r3, #1
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d903      	bls.n	800ac9a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	220d      	movs	r2, #13
 800ac96:	701a      	strb	r2, [r3, #0]
      break;
 800ac98:	e082      	b.n	800ada0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	795b      	ldrb	r3, [r3, #5]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 feb1 	bl	800ba08 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	791b      	ldrb	r3, [r3, #4]
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 feab 	bl	800ba08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	701a      	strb	r2, [r3, #0]
      break;
 800acbe:	e06f      	b.n	800ada0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d019      	beq.n	800acfe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800acd6:	23ff      	movs	r3, #255	; 0xff
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f949 	bl	800af70 <USBH_Get_StringDesc>
 800acde:	4603      	mov	r3, r0
 800ace0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ace2:	7bbb      	ldrb	r3, [r7, #14]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d103      	bne.n	800acf0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2206      	movs	r2, #6
 800acec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800acee:	e059      	b.n	800ada4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d156      	bne.n	800ada4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2206      	movs	r2, #6
 800acfa:	705a      	strb	r2, [r3, #1]
      break;
 800acfc:	e052      	b.n	800ada4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2206      	movs	r2, #6
 800ad02:	705a      	strb	r2, [r3, #1]
      break;
 800ad04:	e04e      	b.n	800ada4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d019      	beq.n	800ad44 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad1c:	23ff      	movs	r3, #255	; 0xff
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f926 	bl	800af70 <USBH_Get_StringDesc>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d103      	bne.n	800ad36 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2207      	movs	r2, #7
 800ad32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad34:	e038      	b.n	800ada8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad36:	7bbb      	ldrb	r3, [r7, #14]
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d135      	bne.n	800ada8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2207      	movs	r2, #7
 800ad40:	705a      	strb	r2, [r3, #1]
      break;
 800ad42:	e031      	b.n	800ada8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2207      	movs	r2, #7
 800ad48:	705a      	strb	r2, [r3, #1]
      break;
 800ad4a:	e02d      	b.n	800ada8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d017      	beq.n	800ad86 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad62:	23ff      	movs	r3, #255	; 0xff
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f903 	bl	800af70 <USBH_Get_StringDesc>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ad78:	e018      	b.n	800adac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad7a:	7bbb      	ldrb	r3, [r7, #14]
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	d115      	bne.n	800adac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73fb      	strb	r3, [r7, #15]
      break;
 800ad84:	e012      	b.n	800adac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
      break;
 800ad8a:	e00f      	b.n	800adac <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ad8c:	bf00      	nop
 800ad8e:	e00e      	b.n	800adae <USBH_HandleEnum+0x3be>
      break;
 800ad90:	bf00      	nop
 800ad92:	e00c      	b.n	800adae <USBH_HandleEnum+0x3be>
      break;
 800ad94:	bf00      	nop
 800ad96:	e00a      	b.n	800adae <USBH_HandleEnum+0x3be>
      break;
 800ad98:	bf00      	nop
 800ad9a:	e008      	b.n	800adae <USBH_HandleEnum+0x3be>
      break;
 800ad9c:	bf00      	nop
 800ad9e:	e006      	b.n	800adae <USBH_HandleEnum+0x3be>
      break;
 800ada0:	bf00      	nop
 800ada2:	e004      	b.n	800adae <USBH_HandleEnum+0x3be>
      break;
 800ada4:	bf00      	nop
 800ada6:	e002      	b.n	800adae <USBH_HandleEnum+0x3be>
      break;
 800ada8:	bf00      	nop
 800adaa:	e000      	b.n	800adae <USBH_HandleEnum+0x3be>
      break;
 800adac:	bf00      	nop
  }
  return Status;
 800adae:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800adca:	bf00      	nop
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f804 	bl	800adfa <USBH_HandleSof>
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b082      	sub	sp, #8
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b0b      	cmp	r3, #11
 800ae0a:	d10a      	bne.n	800ae22 <USBH_HandleSof+0x28>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d005      	beq.n	800ae22 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	4798      	blx	r3
  }
}
 800ae22:	bf00      	nop
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ae3a:	bf00      	nop
}
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ae56:	bf00      	nop
}
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f005 feda 	bl	8010c6a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	791b      	ldrb	r3, [r3, #4]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fda3 	bl	800ba08 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	795b      	ldrb	r3, [r3, #5]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fd9d 	bl	800ba08 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af02      	add	r7, sp, #8
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	4613      	mov	r3, r2
 800aef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aef6:	2100      	movs	r1, #0
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f864 	bl	800afc6 <USBH_GetDescriptor>
 800aefe:	4603      	mov	r3, r0
 800af00:	73fb      	strb	r3, [r7, #15]
 800af02:	7bfb      	ldrb	r3, [r7, #15]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af14:	78fa      	ldrb	r2, [r7, #3]
 800af16:	b292      	uxth	r2, r2
 800af18:	4619      	mov	r1, r3
 800af1a:	f000 f918 	bl	800b14e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	331c      	adds	r3, #28
 800af38:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800af3a:	887b      	ldrh	r3, [r7, #2]
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af44:	2100      	movs	r1, #0
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f83d 	bl	800afc6 <USBH_GetDescriptor>
 800af4c:	4603      	mov	r3, r0
 800af4e:	72fb      	strb	r3, [r7, #11]
 800af50:	7afb      	ldrb	r3, [r7, #11]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d107      	bne.n	800af66 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800af5c:	887a      	ldrh	r2, [r7, #2]
 800af5e:	68f9      	ldr	r1, [r7, #12]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f964 	bl	800b22e <USBH_ParseCfgDesc>
  }

  return status;
 800af66:	7afb      	ldrb	r3, [r7, #11]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af02      	add	r7, sp, #8
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	607a      	str	r2, [r7, #4]
 800af7a:	461a      	mov	r2, r3
 800af7c:	460b      	mov	r3, r1
 800af7e:	72fb      	strb	r3, [r7, #11]
 800af80:	4613      	mov	r3, r2
 800af82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	b29b      	uxth	r3, r3
 800af88:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800af8c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af94:	893b      	ldrh	r3, [r7, #8]
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	460b      	mov	r3, r1
 800af9a:	2100      	movs	r1, #0
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 f812 	bl	800afc6 <USBH_GetDescriptor>
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d107      	bne.n	800afbc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800afb2:	893a      	ldrh	r2, [r7, #8]
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fa37 	bl	800b42a <USBH_ParseStringDesc>
  }

  return status;
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3718      	adds	r7, #24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	607b      	str	r3, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	72fb      	strb	r3, [r7, #11]
 800afd4:	4613      	mov	r3, r2
 800afd6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	789b      	ldrb	r3, [r3, #2]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d11c      	bne.n	800b01a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800afe0:	7afb      	ldrb	r3, [r7, #11]
 800afe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2206      	movs	r2, #6
 800aff0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	893a      	ldrh	r2, [r7, #8]
 800aff6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aff8:	893b      	ldrh	r3, [r7, #8]
 800affa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800affe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b002:	d104      	bne.n	800b00e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f240 4209 	movw	r2, #1033	; 0x409
 800b00a:	829a      	strh	r2, [r3, #20]
 800b00c:	e002      	b.n	800b014 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	8b3a      	ldrh	r2, [r7, #24]
 800b018:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b01a:	8b3b      	ldrh	r3, [r7, #24]
 800b01c:	461a      	mov	r2, r3
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 fa50 	bl	800b4c6 <USBH_CtlReq>
 800b026:	4603      	mov	r3, r0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	789b      	ldrb	r3, [r3, #2]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d10f      	bne.n	800b064 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2205      	movs	r2, #5
 800b04e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	b29a      	uxth	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b064:	2200      	movs	r2, #0
 800b066:	2100      	movs	r1, #0
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fa2c 	bl	800b4c6 <USBH_CtlReq>
 800b06e:	4603      	mov	r3, r0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	789b      	ldrb	r3, [r3, #2]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d10e      	bne.n	800b0aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2209      	movs	r2, #9
 800b096:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	887a      	ldrh	r2, [r7, #2]
 800b09c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fa09 	bl	800b4c6 <USBH_CtlReq>
 800b0b4:	4603      	mov	r3, r0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	789b      	ldrb	r3, [r3, #2]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d10f      	bne.n	800b0f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2203      	movs	r2, #3
 800b0dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b0de:	78fb      	ldrb	r3, [r7, #3]
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f9e5 	bl	800b4c6 <USBH_CtlReq>
 800b0fc:	4603      	mov	r3, r0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	789b      	ldrb	r3, [r3, #2]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d10f      	bne.n	800b13a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2202      	movs	r2, #2
 800b11e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b12c:	78fb      	ldrb	r3, [r7, #3]
 800b12e:	b29a      	uxth	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b13a:	2200      	movs	r2, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f9c1 	bl	800b4c6 <USBH_CtlReq>
 800b144:	4603      	mov	r3, r0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b14e:	b480      	push	{r7}
 800b150:	b085      	sub	sp, #20
 800b152:	af00      	add	r7, sp, #0
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	4613      	mov	r3, r2
 800b15a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	781a      	ldrb	r2, [r3, #0]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	785a      	ldrb	r2, [r3, #1]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	3302      	adds	r3, #2
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	b29a      	uxth	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3303      	adds	r3, #3
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	b29a      	uxth	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	791a      	ldrb	r2, [r3, #4]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	795a      	ldrb	r2, [r3, #5]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	799a      	ldrb	r2, [r3, #6]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	79da      	ldrb	r2, [r3, #7]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b1a8:	88fb      	ldrh	r3, [r7, #6]
 800b1aa:	2b08      	cmp	r3, #8
 800b1ac:	d939      	bls.n	800b222 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	3309      	adds	r3, #9
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	330a      	adds	r3, #10
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	330b      	adds	r3, #11
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	330c      	adds	r3, #12
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	330d      	adds	r3, #13
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	7b9a      	ldrb	r2, [r3, #14]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	7bda      	ldrb	r2, [r3, #15]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	7c1a      	ldrb	r2, [r3, #16]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	7c5a      	ldrb	r2, [r3, #17]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	745a      	strb	r2, [r3, #17]
  }
}
 800b222:	bf00      	nop
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b08a      	sub	sp, #40	; 0x28
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	4613      	mov	r3, r2
 800b23a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	781a      	ldrb	r2, [r3, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	785a      	ldrb	r2, [r3, #1]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	3302      	adds	r3, #2
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	b29a      	uxth	r2, r3
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3303      	adds	r3, #3
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	021b      	lsls	r3, r3, #8
 800b272:	b29b      	uxth	r3, r3
 800b274:	4313      	orrs	r3, r2
 800b276:	b29a      	uxth	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	791a      	ldrb	r2, [r3, #4]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	795a      	ldrb	r2, [r3, #5]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	799a      	ldrb	r2, [r3, #6]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	79da      	ldrb	r2, [r3, #7]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	7a1a      	ldrb	r2, [r3, #8]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b2a4:	88fb      	ldrh	r3, [r7, #6]
 800b2a6:	2b09      	cmp	r3, #9
 800b2a8:	d95f      	bls.n	800b36a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b2aa:	2309      	movs	r3, #9
 800b2ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b2b2:	e051      	b.n	800b358 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2b4:	f107 0316 	add.w	r3, r7, #22
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2bc:	f000 f8e8 	bl	800b490 <USBH_GetNextDesc>
 800b2c0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	785b      	ldrb	r3, [r3, #1]
 800b2c6:	2b04      	cmp	r3, #4
 800b2c8:	d146      	bne.n	800b358 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b2ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2ce:	221a      	movs	r2, #26
 800b2d0:	fb02 f303 	mul.w	r3, r2, r3
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	4413      	add	r3, r2
 800b2da:	3302      	adds	r3, #2
 800b2dc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b2de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2e0:	69f8      	ldr	r0, [r7, #28]
 800b2e2:	f000 f846 	bl	800b372 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2f0:	e022      	b.n	800b338 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2f2:	f107 0316 	add.w	r3, r7, #22
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2fa:	f000 f8c9 	bl	800b490 <USBH_GetNextDesc>
 800b2fe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	785b      	ldrb	r3, [r3, #1]
 800b304:	2b05      	cmp	r3, #5
 800b306:	d117      	bne.n	800b338 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b30c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b310:	3201      	adds	r2, #1
 800b312:	00d2      	lsls	r2, r2, #3
 800b314:	211a      	movs	r1, #26
 800b316:	fb01 f303 	mul.w	r3, r1, r3
 800b31a:	4413      	add	r3, r2
 800b31c:	3308      	adds	r3, #8
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	4413      	add	r3, r2
 800b322:	3304      	adds	r3, #4
 800b324:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b328:	69b8      	ldr	r0, [r7, #24]
 800b32a:	f000 f851 	bl	800b3d0 <USBH_ParseEPDesc>
            ep_ix++;
 800b32e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b332:	3301      	adds	r3, #1
 800b334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	791b      	ldrb	r3, [r3, #4]
 800b33c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b340:	429a      	cmp	r2, r3
 800b342:	d204      	bcs.n	800b34e <USBH_ParseCfgDesc+0x120>
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	885a      	ldrh	r2, [r3, #2]
 800b348:	8afb      	ldrh	r3, [r7, #22]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d8d1      	bhi.n	800b2f2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b34e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b352:	3301      	adds	r3, #1
 800b354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d804      	bhi.n	800b36a <USBH_ParseCfgDesc+0x13c>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	885a      	ldrh	r2, [r3, #2]
 800b364:	8afb      	ldrh	r3, [r7, #22]
 800b366:	429a      	cmp	r2, r3
 800b368:	d8a4      	bhi.n	800b2b4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b36a:	bf00      	nop
 800b36c:	3728      	adds	r7, #40	; 0x28
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	781a      	ldrb	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	785a      	ldrb	r2, [r3, #1]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	789a      	ldrb	r2, [r3, #2]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	78da      	ldrb	r2, [r3, #3]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	791a      	ldrb	r2, [r3, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	795a      	ldrb	r2, [r3, #5]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	799a      	ldrb	r2, [r3, #6]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	79da      	ldrb	r2, [r3, #7]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	7a1a      	ldrb	r2, [r3, #8]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	721a      	strb	r2, [r3, #8]
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781a      	ldrb	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	785a      	ldrb	r2, [r3, #1]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	789a      	ldrb	r2, [r3, #2]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	78da      	ldrb	r2, [r3, #3]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	b29a      	uxth	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	3305      	adds	r3, #5
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	021b      	lsls	r3, r3, #8
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4313      	orrs	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	799a      	ldrb	r2, [r3, #6]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	719a      	strb	r2, [r3, #6]
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b087      	sub	sp, #28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	4613      	mov	r3, r2
 800b436:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3301      	adds	r3, #1
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d120      	bne.n	800b484 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	1e9a      	subs	r2, r3, #2
 800b448:	88fb      	ldrh	r3, [r7, #6]
 800b44a:	4293      	cmp	r3, r2
 800b44c:	bf28      	it	cs
 800b44e:	4613      	movcs	r3, r2
 800b450:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3302      	adds	r3, #2
 800b456:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b458:	2300      	movs	r3, #0
 800b45a:	82fb      	strh	r3, [r7, #22]
 800b45c:	e00b      	b.n	800b476 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b45e:	8afb      	ldrh	r3, [r7, #22]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	781a      	ldrb	r2, [r3, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3301      	adds	r3, #1
 800b46e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b470:	8afb      	ldrh	r3, [r7, #22]
 800b472:	3302      	adds	r3, #2
 800b474:	82fb      	strh	r3, [r7, #22]
 800b476:	8afa      	ldrh	r2, [r7, #22]
 800b478:	8abb      	ldrh	r3, [r7, #20]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d3ef      	bcc.n	800b45e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
  }
}
 800b484:	bf00      	nop
 800b486:	371c      	adds	r7, #28
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	881a      	ldrh	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4413      	add	r3, r2
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b086      	sub	sp, #24
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	60f8      	str	r0, [r7, #12]
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	789b      	ldrb	r3, [r3, #2]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d002      	beq.n	800b4e6 <USBH_CtlReq+0x20>
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d00f      	beq.n	800b504 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b4e4:	e027      	b.n	800b536 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	88fa      	ldrh	r2, [r7, #6]
 800b4f0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b4fe:	2301      	movs	r3, #1
 800b500:	75fb      	strb	r3, [r7, #23]
      break;
 800b502:	e018      	b.n	800b536 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 f81b 	bl	800b540 <USBH_HandleControl>
 800b50a:	4603      	mov	r3, r0
 800b50c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <USBH_CtlReq+0x54>
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	2b03      	cmp	r3, #3
 800b518:	d106      	bne.n	800b528 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2201      	movs	r2, #1
 800b51e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	761a      	strb	r2, [r3, #24]
      break;
 800b526:	e005      	b.n	800b534 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b528:	7dfb      	ldrb	r3, [r7, #23]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d102      	bne.n	800b534 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2201      	movs	r2, #1
 800b532:	709a      	strb	r2, [r3, #2]
      break;
 800b534:	bf00      	nop
  }
  return status;
 800b536:	7dfb      	ldrb	r3, [r7, #23]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af02      	add	r7, sp, #8
 800b546:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	7e1b      	ldrb	r3, [r3, #24]
 800b554:	3b01      	subs	r3, #1
 800b556:	2b0a      	cmp	r3, #10
 800b558:	f200 8156 	bhi.w	800b808 <USBH_HandleControl+0x2c8>
 800b55c:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <USBH_HandleControl+0x24>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b591 	.word	0x0800b591
 800b568:	0800b5ab 	.word	0x0800b5ab
 800b56c:	0800b615 	.word	0x0800b615
 800b570:	0800b63b 	.word	0x0800b63b
 800b574:	0800b673 	.word	0x0800b673
 800b578:	0800b69d 	.word	0x0800b69d
 800b57c:	0800b6ef 	.word	0x0800b6ef
 800b580:	0800b711 	.word	0x0800b711
 800b584:	0800b74d 	.word	0x0800b74d
 800b588:	0800b773 	.word	0x0800b773
 800b58c:	0800b7b1 	.word	0x0800b7b1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f103 0110 	add.w	r1, r3, #16
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	795b      	ldrb	r3, [r3, #5]
 800b59a:	461a      	mov	r2, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 f943 	bl	800b828 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	761a      	strb	r2, [r3, #24]
      break;
 800b5a8:	e139      	b.n	800b81e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	795b      	ldrb	r3, [r3, #5]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f005 fc49 	bl	8010e48 <USBH_LL_GetURBState>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d11e      	bne.n	800b5fe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	7c1b      	ldrb	r3, [r3, #16]
 800b5c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8adb      	ldrh	r3, [r3, #22]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b5d2:	7b7b      	ldrb	r3, [r7, #13]
 800b5d4:	2b80      	cmp	r3, #128	; 0x80
 800b5d6:	d103      	bne.n	800b5e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2203      	movs	r2, #3
 800b5dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5de:	e115      	b.n	800b80c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2205      	movs	r2, #5
 800b5e4:	761a      	strb	r2, [r3, #24]
      break;
 800b5e6:	e111      	b.n	800b80c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b5e8:	7b7b      	ldrb	r3, [r7, #13]
 800b5ea:	2b80      	cmp	r3, #128	; 0x80
 800b5ec:	d103      	bne.n	800b5f6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2209      	movs	r2, #9
 800b5f2:	761a      	strb	r2, [r3, #24]
      break;
 800b5f4:	e10a      	b.n	800b80c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2207      	movs	r2, #7
 800b5fa:	761a      	strb	r2, [r3, #24]
      break;
 800b5fc:	e106      	b.n	800b80c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b5fe:	7bbb      	ldrb	r3, [r7, #14]
 800b600:	2b04      	cmp	r3, #4
 800b602:	d003      	beq.n	800b60c <USBH_HandleControl+0xcc>
 800b604:	7bbb      	ldrb	r3, [r7, #14]
 800b606:	2b02      	cmp	r3, #2
 800b608:	f040 8100 	bne.w	800b80c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	220b      	movs	r2, #11
 800b610:	761a      	strb	r2, [r3, #24]
      break;
 800b612:	e0fb      	b.n	800b80c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6899      	ldr	r1, [r3, #8]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	899a      	ldrh	r2, [r3, #12]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	791b      	ldrb	r3, [r3, #4]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f93a 	bl	800b8a6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2204      	movs	r2, #4
 800b636:	761a      	strb	r2, [r3, #24]
      break;
 800b638:	e0f1      	b.n	800b81e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	791b      	ldrb	r3, [r3, #4]
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f005 fc01 	bl	8010e48 <USBH_LL_GetURBState>
 800b646:	4603      	mov	r3, r0
 800b648:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b64a:	7bbb      	ldrb	r3, [r7, #14]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d102      	bne.n	800b656 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2209      	movs	r2, #9
 800b654:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b656:	7bbb      	ldrb	r3, [r7, #14]
 800b658:	2b05      	cmp	r3, #5
 800b65a:	d102      	bne.n	800b662 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b65c:	2303      	movs	r3, #3
 800b65e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b660:	e0d6      	b.n	800b810 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	2b04      	cmp	r3, #4
 800b666:	f040 80d3 	bne.w	800b810 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	220b      	movs	r2, #11
 800b66e:	761a      	strb	r2, [r3, #24]
      break;
 800b670:	e0ce      	b.n	800b810 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6899      	ldr	r1, [r3, #8]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	899a      	ldrh	r2, [r3, #12]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	795b      	ldrb	r3, [r3, #5]
 800b67e:	2001      	movs	r0, #1
 800b680:	9000      	str	r0, [sp, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f8ea 	bl	800b85c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b68e:	b29a      	uxth	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2206      	movs	r2, #6
 800b698:	761a      	strb	r2, [r3, #24]
      break;
 800b69a:	e0c0      	b.n	800b81e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	795b      	ldrb	r3, [r3, #5]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f005 fbd0 	bl	8010e48 <USBH_LL_GetURBState>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b6ac:	7bbb      	ldrb	r3, [r7, #14]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d103      	bne.n	800b6ba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2207      	movs	r2, #7
 800b6b6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b6b8:	e0ac      	b.n	800b814 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b6ba:	7bbb      	ldrb	r3, [r7, #14]
 800b6bc:	2b05      	cmp	r3, #5
 800b6be:	d105      	bne.n	800b6cc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	220c      	movs	r2, #12
 800b6c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ca:	e0a3      	b.n	800b814 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d103      	bne.n	800b6da <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2205      	movs	r2, #5
 800b6d6:	761a      	strb	r2, [r3, #24]
      break;
 800b6d8:	e09c      	b.n	800b814 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
 800b6dc:	2b04      	cmp	r3, #4
 800b6de:	f040 8099 	bne.w	800b814 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	220b      	movs	r2, #11
 800b6e6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ec:	e092      	b.n	800b814 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	791b      	ldrb	r3, [r3, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f8d5 	bl	800b8a6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b702:	b29a      	uxth	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2208      	movs	r2, #8
 800b70c:	761a      	strb	r2, [r3, #24]

      break;
 800b70e:	e086      	b.n	800b81e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	791b      	ldrb	r3, [r3, #4]
 800b714:	4619      	mov	r1, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f005 fb96 	bl	8010e48 <USBH_LL_GetURBState>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d105      	bne.n	800b732 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	220d      	movs	r2, #13
 800b72a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b730:	e072      	b.n	800b818 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b732:	7bbb      	ldrb	r3, [r7, #14]
 800b734:	2b04      	cmp	r3, #4
 800b736:	d103      	bne.n	800b740 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	220b      	movs	r2, #11
 800b73c:	761a      	strb	r2, [r3, #24]
      break;
 800b73e:	e06b      	b.n	800b818 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b740:	7bbb      	ldrb	r3, [r7, #14]
 800b742:	2b05      	cmp	r3, #5
 800b744:	d168      	bne.n	800b818 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b746:	2303      	movs	r3, #3
 800b748:	73fb      	strb	r3, [r7, #15]
      break;
 800b74a:	e065      	b.n	800b818 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	795b      	ldrb	r3, [r3, #5]
 800b750:	2201      	movs	r2, #1
 800b752:	9200      	str	r2, [sp, #0]
 800b754:	2200      	movs	r2, #0
 800b756:	2100      	movs	r1, #0
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f87f 	bl	800b85c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b764:	b29a      	uxth	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	220a      	movs	r2, #10
 800b76e:	761a      	strb	r2, [r3, #24]
      break;
 800b770:	e055      	b.n	800b81e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	795b      	ldrb	r3, [r3, #5]
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f005 fb65 	bl	8010e48 <USBH_LL_GetURBState>
 800b77e:	4603      	mov	r3, r0
 800b780:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d105      	bne.n	800b794 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	220d      	movs	r2, #13
 800b790:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b792:	e043      	b.n	800b81c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b794:	7bbb      	ldrb	r3, [r7, #14]
 800b796:	2b02      	cmp	r3, #2
 800b798:	d103      	bne.n	800b7a2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2209      	movs	r2, #9
 800b79e:	761a      	strb	r2, [r3, #24]
      break;
 800b7a0:	e03c      	b.n	800b81c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	d139      	bne.n	800b81c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	220b      	movs	r2, #11
 800b7ac:	761a      	strb	r2, [r3, #24]
      break;
 800b7ae:	e035      	b.n	800b81c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	7e5b      	ldrb	r3, [r3, #25]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	765a      	strb	r2, [r3, #25]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	7e5b      	ldrb	r3, [r3, #25]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d806      	bhi.n	800b7d2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b7d0:	e025      	b.n	800b81e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7d8:	2106      	movs	r1, #6
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	795b      	ldrb	r3, [r3, #5]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f90c 	bl	800ba08 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	791b      	ldrb	r3, [r3, #4]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f906 	bl	800ba08 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b802:	2302      	movs	r3, #2
 800b804:	73fb      	strb	r3, [r7, #15]
      break;
 800b806:	e00a      	b.n	800b81e <USBH_HandleControl+0x2de>

    default:
      break;
 800b808:	bf00      	nop
 800b80a:	e008      	b.n	800b81e <USBH_HandleControl+0x2de>
      break;
 800b80c:	bf00      	nop
 800b80e:	e006      	b.n	800b81e <USBH_HandleControl+0x2de>
      break;
 800b810:	bf00      	nop
 800b812:	e004      	b.n	800b81e <USBH_HandleControl+0x2de>
      break;
 800b814:	bf00      	nop
 800b816:	e002      	b.n	800b81e <USBH_HandleControl+0x2de>
      break;
 800b818:	bf00      	nop
 800b81a:	e000      	b.n	800b81e <USBH_HandleControl+0x2de>
      break;
 800b81c:	bf00      	nop
  }

  return status;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af04      	add	r7, sp, #16
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	4613      	mov	r3, r2
 800b834:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b836:	79f9      	ldrb	r1, [r7, #7]
 800b838:	2300      	movs	r3, #0
 800b83a:	9303      	str	r3, [sp, #12]
 800b83c:	2308      	movs	r3, #8
 800b83e:	9302      	str	r3, [sp, #8]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	2300      	movs	r3, #0
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	2300      	movs	r3, #0
 800b84a:	2200      	movs	r2, #0
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f005 faca 	bl	8010de6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af04      	add	r7, sp, #16
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4611      	mov	r1, r2
 800b868:	461a      	mov	r2, r3
 800b86a:	460b      	mov	r3, r1
 800b86c:	80fb      	strh	r3, [r7, #6]
 800b86e:	4613      	mov	r3, r2
 800b870:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b87c:	2300      	movs	r3, #0
 800b87e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b880:	7979      	ldrb	r1, [r7, #5]
 800b882:	7e3b      	ldrb	r3, [r7, #24]
 800b884:	9303      	str	r3, [sp, #12]
 800b886:	88fb      	ldrh	r3, [r7, #6]
 800b888:	9302      	str	r3, [sp, #8]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	2301      	movs	r3, #1
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	2300      	movs	r3, #0
 800b894:	2200      	movs	r2, #0
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f005 faa5 	bl	8010de6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b088      	sub	sp, #32
 800b8aa:	af04      	add	r7, sp, #16
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	80fb      	strh	r3, [r7, #6]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8bc:	7979      	ldrb	r1, [r7, #5]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	9303      	str	r3, [sp, #12]
 800b8c2:	88fb      	ldrh	r3, [r7, #6]
 800b8c4:	9302      	str	r3, [sp, #8]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f005 fa87 	bl	8010de6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b8d8:	2300      	movs	r3, #0

}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af04      	add	r7, sp, #16
 800b8e8:	60f8      	str	r0, [r7, #12]
 800b8ea:	60b9      	str	r1, [r7, #8]
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	80fb      	strh	r3, [r7, #6]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b902:	2300      	movs	r3, #0
 800b904:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b906:	7979      	ldrb	r1, [r7, #5]
 800b908:	7e3b      	ldrb	r3, [r7, #24]
 800b90a:	9303      	str	r3, [sp, #12]
 800b90c:	88fb      	ldrh	r3, [r7, #6]
 800b90e:	9302      	str	r3, [sp, #8]
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	9301      	str	r3, [sp, #4]
 800b914:	2301      	movs	r3, #1
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	2302      	movs	r3, #2
 800b91a:	2200      	movs	r2, #0
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f005 fa62 	bl	8010de6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af04      	add	r7, sp, #16
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	4611      	mov	r1, r2
 800b938:	461a      	mov	r2, r3
 800b93a:	460b      	mov	r3, r1
 800b93c:	80fb      	strh	r3, [r7, #6]
 800b93e:	4613      	mov	r3, r2
 800b940:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b942:	7979      	ldrb	r1, [r7, #5]
 800b944:	2300      	movs	r3, #0
 800b946:	9303      	str	r3, [sp, #12]
 800b948:	88fb      	ldrh	r3, [r7, #6]
 800b94a:	9302      	str	r3, [sp, #8]
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	2301      	movs	r3, #1
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	2302      	movs	r3, #2
 800b956:	2201      	movs	r2, #1
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f005 fa44 	bl	8010de6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af04      	add	r7, sp, #16
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	4608      	mov	r0, r1
 800b972:	4611      	mov	r1, r2
 800b974:	461a      	mov	r2, r3
 800b976:	4603      	mov	r3, r0
 800b978:	70fb      	strb	r3, [r7, #3]
 800b97a:	460b      	mov	r3, r1
 800b97c:	70bb      	strb	r3, [r7, #2]
 800b97e:	4613      	mov	r3, r2
 800b980:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b982:	7878      	ldrb	r0, [r7, #1]
 800b984:	78ba      	ldrb	r2, [r7, #2]
 800b986:	78f9      	ldrb	r1, [r7, #3]
 800b988:	8b3b      	ldrh	r3, [r7, #24]
 800b98a:	9302      	str	r3, [sp, #8]
 800b98c:	7d3b      	ldrb	r3, [r7, #20]
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	7c3b      	ldrb	r3, [r7, #16]
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	4603      	mov	r3, r0
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f005 f9d7 	bl	8010d4a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b082      	sub	sp, #8
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f005 f9f6 	bl	8010da8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f836 	bl	800ba44 <USBH_GetFreePipe>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b9dc:	89fb      	ldrh	r3, [r7, #14]
 800b9de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d00a      	beq.n	800b9fc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b9e6:	78fa      	ldrb	r2, [r7, #3]
 800b9e8:	89fb      	ldrh	r3, [r7, #14]
 800b9ea:	f003 030f 	and.w	r3, r3, #15
 800b9ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9f2:	6879      	ldr	r1, [r7, #4]
 800b9f4:	33e0      	adds	r3, #224	; 0xe0
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	440b      	add	r3, r1
 800b9fa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b9fc:	89fb      	ldrh	r3, [r7, #14]
 800b9fe:	b2db      	uxtb	r3, r3
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ba14:	78fb      	ldrb	r3, [r7, #3]
 800ba16:	2b0a      	cmp	r3, #10
 800ba18:	d80d      	bhi.n	800ba36 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ba1a:	78fb      	ldrb	r3, [r7, #3]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	33e0      	adds	r3, #224	; 0xe0
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	78fb      	ldrb	r3, [r7, #3]
 800ba28:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ba2c:	6879      	ldr	r1, [r7, #4]
 800ba2e:	33e0      	adds	r3, #224	; 0xe0
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	440b      	add	r3, r1
 800ba34:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]
 800ba54:	e00f      	b.n	800ba76 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	33e0      	adds	r3, #224	; 0xe0
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ba6a:	7bfb      	ldrb	r3, [r7, #15]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	e007      	b.n	800ba80 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	3301      	adds	r3, #1
 800ba74:	73fb      	strb	r3, [r7, #15]
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
 800ba78:	2b0a      	cmp	r3, #10
 800ba7a:	d9ec      	bls.n	800ba56 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ba7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	4603      	mov	r3, r0
 800ba94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	4a08      	ldr	r2, [pc, #32]	; (800babc <disk_status+0x30>)
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	79fa      	ldrb	r2, [r7, #7]
 800baa4:	4905      	ldr	r1, [pc, #20]	; (800babc <disk_status+0x30>)
 800baa6:	440a      	add	r2, r1
 800baa8:	7a12      	ldrb	r2, [r2, #8]
 800baaa:	4610      	mov	r0, r2
 800baac:	4798      	blx	r3
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	2000053c 	.word	0x2000053c

0800bac0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bace:	79fb      	ldrb	r3, [r7, #7]
 800bad0:	4a0d      	ldr	r2, [pc, #52]	; (800bb08 <disk_initialize+0x48>)
 800bad2:	5cd3      	ldrb	r3, [r2, r3]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d111      	bne.n	800bafc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	4a0b      	ldr	r2, [pc, #44]	; (800bb08 <disk_initialize+0x48>)
 800badc:	2101      	movs	r1, #1
 800bade:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	4a09      	ldr	r2, [pc, #36]	; (800bb08 <disk_initialize+0x48>)
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	79fa      	ldrb	r2, [r7, #7]
 800baee:	4906      	ldr	r1, [pc, #24]	; (800bb08 <disk_initialize+0x48>)
 800baf0:	440a      	add	r2, r1
 800baf2:	7a12      	ldrb	r2, [r2, #8]
 800baf4:	4610      	mov	r0, r2
 800baf6:	4798      	blx	r3
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2000053c 	.word	0x2000053c

0800bb0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60b9      	str	r1, [r7, #8]
 800bb14:	607a      	str	r2, [r7, #4]
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bb1c:	7bfb      	ldrb	r3, [r7, #15]
 800bb1e:	4a0a      	ldr	r2, [pc, #40]	; (800bb48 <disk_read+0x3c>)
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	689c      	ldr	r4, [r3, #8]
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	4a07      	ldr	r2, [pc, #28]	; (800bb48 <disk_read+0x3c>)
 800bb2c:	4413      	add	r3, r2
 800bb2e:	7a18      	ldrb	r0, [r3, #8]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	68b9      	ldr	r1, [r7, #8]
 800bb36:	47a0      	blx	r4
 800bb38:	4603      	mov	r3, r0
 800bb3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd90      	pop	{r4, r7, pc}
 800bb46:	bf00      	nop
 800bb48:	2000053c 	.word	0x2000053c

0800bb4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bb4c:	b590      	push	{r4, r7, lr}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60b9      	str	r1, [r7, #8]
 800bb54:	607a      	str	r2, [r7, #4]
 800bb56:	603b      	str	r3, [r7, #0]
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	4a0a      	ldr	r2, [pc, #40]	; (800bb88 <disk_write+0x3c>)
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	68dc      	ldr	r4, [r3, #12]
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	4a07      	ldr	r2, [pc, #28]	; (800bb88 <disk_write+0x3c>)
 800bb6c:	4413      	add	r3, r2
 800bb6e:	7a18      	ldrb	r0, [r3, #8]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	68b9      	ldr	r1, [r7, #8]
 800bb76:	47a0      	blx	r4
 800bb78:	4603      	mov	r3, r0
 800bb7a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	371c      	adds	r7, #28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd90      	pop	{r4, r7, pc}
 800bb86:	bf00      	nop
 800bb88:	2000053c 	.word	0x2000053c

0800bb8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	603a      	str	r2, [r7, #0]
 800bb96:	71fb      	strb	r3, [r7, #7]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bb9c:	79fb      	ldrb	r3, [r7, #7]
 800bb9e:	4a09      	ldr	r2, [pc, #36]	; (800bbc4 <disk_ioctl+0x38>)
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	79fa      	ldrb	r2, [r7, #7]
 800bbaa:	4906      	ldr	r1, [pc, #24]	; (800bbc4 <disk_ioctl+0x38>)
 800bbac:	440a      	add	r2, r1
 800bbae:	7a10      	ldrb	r0, [r2, #8]
 800bbb0:	79b9      	ldrb	r1, [r7, #6]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	4798      	blx	r3
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]
  return res;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	2000053c 	.word	0x2000053c

0800bbc8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bbd8:	89fb      	ldrh	r3, [r7, #14]
 800bbda:	021b      	lsls	r3, r3, #8
 800bbdc:	b21a      	sxth	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	b21b      	sxth	r3, r3
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	b21b      	sxth	r3, r3
 800bbe8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bbea:	89fb      	ldrh	r3, [r7, #14]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3303      	adds	r3, #3
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	021b      	lsls	r3, r3, #8
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	3202      	adds	r2, #2
 800bc10:	7812      	ldrb	r2, [r2, #0]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	021b      	lsls	r3, r3, #8
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	3201      	adds	r2, #1
 800bc1e:	7812      	ldrb	r2, [r2, #0]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	021b      	lsls	r3, r3, #8
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	7812      	ldrb	r2, [r2, #0]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc30:	68fb      	ldr	r3, [r7, #12]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800bc3e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bc42:	b08d      	sub	sp, #52	; 0x34
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	3307      	adds	r3, #7
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	f04f 0300 	mov.w	r3, #0
 800bc54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 800bc58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc5c:	f04f 0000 	mov.w	r0, #0
 800bc60:	f04f 0100 	mov.w	r1, #0
 800bc64:	0219      	lsls	r1, r3, #8
 800bc66:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bc6a:	0210      	lsls	r0, r2, #8
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	3306      	adds	r3, #6
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	f04f 0300 	mov.w	r3, #0
 800bc78:	ea40 0402 	orr.w	r4, r0, r2
 800bc7c:	ea41 0503 	orr.w	r5, r1, r3
 800bc80:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 800bc84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc88:	f04f 0000 	mov.w	r0, #0
 800bc8c:	f04f 0100 	mov.w	r1, #0
 800bc90:	0219      	lsls	r1, r3, #8
 800bc92:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bc96:	0210      	lsls	r0, r2, #8
 800bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9a:	3305      	adds	r3, #5
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	f04f 0300 	mov.w	r3, #0
 800bca4:	ea40 0802 	orr.w	r8, r0, r2
 800bca8:	ea41 0903 	orr.w	r9, r1, r3
 800bcac:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 800bcb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bcb4:	f04f 0000 	mov.w	r0, #0
 800bcb8:	f04f 0100 	mov.w	r1, #0
 800bcbc:	0219      	lsls	r1, r3, #8
 800bcbe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bcc2:	0210      	lsls	r0, r2, #8
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	f04f 0300 	mov.w	r3, #0
 800bcd0:	ea40 0402 	orr.w	r4, r0, r2
 800bcd4:	61bc      	str	r4, [r7, #24]
 800bcd6:	430b      	orrs	r3, r1
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bcde:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 800bce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bce6:	f04f 0200 	mov.w	r2, #0
 800bcea:	f04f 0300 	mov.w	r3, #0
 800bcee:	020b      	lsls	r3, r1, #8
 800bcf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bcf4:	0202      	lsls	r2, r0, #8
 800bcf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcf8:	3103      	adds	r1, #3
 800bcfa:	7809      	ldrb	r1, [r1, #0]
 800bcfc:	b2c8      	uxtb	r0, r1
 800bcfe:	f04f 0100 	mov.w	r1, #0
 800bd02:	ea42 0400 	orr.w	r4, r2, r0
 800bd06:	613c      	str	r4, [r7, #16]
 800bd08:	430b      	orrs	r3, r1
 800bd0a:	617b      	str	r3, [r7, #20]
 800bd0c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bd10:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 800bd14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	f04f 0300 	mov.w	r3, #0
 800bd20:	020b      	lsls	r3, r1, #8
 800bd22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd26:	0202      	lsls	r2, r0, #8
 800bd28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd2a:	3102      	adds	r1, #2
 800bd2c:	7809      	ldrb	r1, [r1, #0]
 800bd2e:	b2c8      	uxtb	r0, r1
 800bd30:	f04f 0100 	mov.w	r1, #0
 800bd34:	ea42 0400 	orr.w	r4, r2, r0
 800bd38:	60bc      	str	r4, [r7, #8]
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	60fb      	str	r3, [r7, #12]
 800bd3e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800bd42:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 800bd46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bd4a:	f04f 0200 	mov.w	r2, #0
 800bd4e:	f04f 0300 	mov.w	r3, #0
 800bd52:	020b      	lsls	r3, r1, #8
 800bd54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd58:	0202      	lsls	r2, r0, #8
 800bd5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd5c:	3101      	adds	r1, #1
 800bd5e:	7809      	ldrb	r1, [r1, #0]
 800bd60:	b2c8      	uxtb	r0, r1
 800bd62:	f04f 0100 	mov.w	r1, #0
 800bd66:	ea42 0400 	orr.w	r4, r2, r0
 800bd6a:	603c      	str	r4, [r7, #0]
 800bd6c:	430b      	orrs	r3, r1
 800bd6e:	607b      	str	r3, [r7, #4]
 800bd70:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bd74:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 800bd78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	f04f 0300 	mov.w	r3, #0
 800bd84:	020b      	lsls	r3, r1, #8
 800bd86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd8a:	0202      	lsls	r2, r0, #8
 800bd8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd8e:	7809      	ldrb	r1, [r1, #0]
 800bd90:	b2c8      	uxtb	r0, r1
 800bd92:	f04f 0100 	mov.w	r1, #0
 800bd96:	ea42 0a00 	orr.w	sl, r2, r0
 800bd9a:	ea43 0b01 	orr.w	fp, r3, r1
 800bd9e:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 800bda2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800bda6:	4610      	mov	r0, r2
 800bda8:	4619      	mov	r1, r3
 800bdaa:	3734      	adds	r7, #52	; 0x34
 800bdac:	46bd      	mov	sp, r7
 800bdae:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bdb2:	4770      	bx	lr

0800bdb4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	1c5a      	adds	r2, r3, #1
 800bdc4:	607a      	str	r2, [r7, #4]
 800bdc6:	887a      	ldrh	r2, [r7, #2]
 800bdc8:	b2d2      	uxtb	r2, r2
 800bdca:	701a      	strb	r2, [r3, #0]
 800bdcc:	887b      	ldrh	r3, [r7, #2]
 800bdce:	0a1b      	lsrs	r3, r3, #8
 800bdd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	607a      	str	r2, [r7, #4]
 800bdd8:	887a      	ldrh	r2, [r7, #2]
 800bdda:	b2d2      	uxtb	r2, r2
 800bddc:	701a      	strb	r2, [r3, #0]
}
 800bdde:	bf00      	nop
 800bde0:	370c      	adds	r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bdea:	b480      	push	{r7}
 800bdec:	b083      	sub	sp, #12
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	607a      	str	r2, [r7, #4]
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	b2d2      	uxtb	r2, r2
 800bdfe:	701a      	strb	r2, [r3, #0]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	0a1b      	lsrs	r3, r3, #8
 800be04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	1c5a      	adds	r2, r3, #1
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	b2d2      	uxtb	r2, r2
 800be10:	701a      	strb	r2, [r3, #0]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	0a1b      	lsrs	r3, r3, #8
 800be16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	701a      	strb	r2, [r3, #0]
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	0a1b      	lsrs	r3, r3, #8
 800be28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	1c5a      	adds	r2, r3, #1
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	683a      	ldr	r2, [r7, #0]
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	701a      	strb	r2, [r3, #0]
}
 800be36:	bf00      	nop
 800be38:	370c      	adds	r7, #12
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800be42:	b480      	push	{r7}
 800be44:	b085      	sub	sp, #20
 800be46:	af00      	add	r7, sp, #0
 800be48:	60f8      	str	r0, [r7, #12]
 800be4a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	1c5a      	adds	r2, r3, #1
 800be52:	60fa      	str	r2, [r7, #12]
 800be54:	783a      	ldrb	r2, [r7, #0]
 800be56:	701a      	strb	r2, [r3, #0]
 800be58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800be5c:	f04f 0200 	mov.w	r2, #0
 800be60:	f04f 0300 	mov.w	r3, #0
 800be64:	0a02      	lsrs	r2, r0, #8
 800be66:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800be6a:	0a0b      	lsrs	r3, r1, #8
 800be6c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	60fa      	str	r2, [r7, #12]
 800be76:	783a      	ldrb	r2, [r7, #0]
 800be78:	701a      	strb	r2, [r3, #0]
 800be7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800be7e:	f04f 0200 	mov.w	r2, #0
 800be82:	f04f 0300 	mov.w	r3, #0
 800be86:	0a02      	lsrs	r2, r0, #8
 800be88:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800be8c:	0a0b      	lsrs	r3, r1, #8
 800be8e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	1c5a      	adds	r2, r3, #1
 800be96:	60fa      	str	r2, [r7, #12]
 800be98:	783a      	ldrb	r2, [r7, #0]
 800be9a:	701a      	strb	r2, [r3, #0]
 800be9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	0a02      	lsrs	r2, r0, #8
 800beaa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800beae:	0a0b      	lsrs	r3, r1, #8
 800beb0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	1c5a      	adds	r2, r3, #1
 800beb8:	60fa      	str	r2, [r7, #12]
 800beba:	783a      	ldrb	r2, [r7, #0]
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bec2:	f04f 0200 	mov.w	r2, #0
 800bec6:	f04f 0300 	mov.w	r3, #0
 800beca:	0a02      	lsrs	r2, r0, #8
 800becc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bed0:	0a0b      	lsrs	r3, r1, #8
 800bed2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	1c5a      	adds	r2, r3, #1
 800beda:	60fa      	str	r2, [r7, #12]
 800bedc:	783a      	ldrb	r2, [r7, #0]
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	f04f 0300 	mov.w	r3, #0
 800beec:	0a02      	lsrs	r2, r0, #8
 800beee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bef2:	0a0b      	lsrs	r3, r1, #8
 800bef4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	60fa      	str	r2, [r7, #12]
 800befe:	783a      	ldrb	r2, [r7, #0]
 800bf00:	701a      	strb	r2, [r3, #0]
 800bf02:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf06:	f04f 0200 	mov.w	r2, #0
 800bf0a:	f04f 0300 	mov.w	r3, #0
 800bf0e:	0a02      	lsrs	r2, r0, #8
 800bf10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bf14:	0a0b      	lsrs	r3, r1, #8
 800bf16:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	60fa      	str	r2, [r7, #12]
 800bf20:	783a      	ldrb	r2, [r7, #0]
 800bf22:	701a      	strb	r2, [r3, #0]
 800bf24:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf28:	f04f 0200 	mov.w	r2, #0
 800bf2c:	f04f 0300 	mov.w	r3, #0
 800bf30:	0a02      	lsrs	r2, r0, #8
 800bf32:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bf36:	0a0b      	lsrs	r3, r1, #8
 800bf38:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	60fa      	str	r2, [r7, #12]
 800bf42:	783a      	ldrb	r2, [r7, #0]
 800bf44:	701a      	strb	r2, [r3, #0]
}
 800bf46:	bf00      	nop
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bf52:	b480      	push	{r7}
 800bf54:	b087      	sub	sp, #28
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00d      	beq.n	800bf88 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	1c53      	adds	r3, r2, #1
 800bf70:	613b      	str	r3, [r7, #16]
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	1c59      	adds	r1, r3, #1
 800bf76:	6179      	str	r1, [r7, #20]
 800bf78:	7812      	ldrb	r2, [r2, #0]
 800bf7a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	607b      	str	r3, [r7, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1f1      	bne.n	800bf6c <mem_cpy+0x1a>
	}
}
 800bf88:	bf00      	nop
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf94:	b480      	push	{r7}
 800bf96:	b087      	sub	sp, #28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	617a      	str	r2, [r7, #20]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	b2d2      	uxtb	r2, r2
 800bfae:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	607b      	str	r3, [r7, #4]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1f3      	bne.n	800bfa4 <mem_set+0x10>
}
 800bfbc:	bf00      	nop
 800bfbe:	bf00      	nop
 800bfc0:	371c      	adds	r7, #28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr

0800bfca <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bfca:	b480      	push	{r7}
 800bfcc:	b089      	sub	sp, #36	; 0x24
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	60f8      	str	r0, [r7, #12]
 800bfd2:	60b9      	str	r1, [r7, #8]
 800bfd4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	61fb      	str	r3, [r7, #28]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	61fa      	str	r2, [r7, #28]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	4619      	mov	r1, r3
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	61ba      	str	r2, [r7, #24]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	1acb      	subs	r3, r1, r3
 800bff6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	607b      	str	r3, [r7, #4]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <mem_cmp+0x40>
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0eb      	beq.n	800bfe2 <mem_cmp+0x18>

	return r;
 800c00a:	697b      	ldr	r3, [r7, #20]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3724      	adds	r7, #36	; 0x24
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c022:	e002      	b.n	800c02a <chk_chr+0x12>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3301      	adds	r3, #1
 800c028:	607b      	str	r3, [r7, #4]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d005      	beq.n	800c03e <chk_chr+0x26>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d1f2      	bne.n	800c024 <chk_chr+0xc>
	return *str;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	781b      	ldrb	r3, [r3, #0]
}
 800c042:	4618      	mov	r0, r3
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
	...

0800c050 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c05a:	2300      	movs	r3, #0
 800c05c:	60bb      	str	r3, [r7, #8]
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	60fb      	str	r3, [r7, #12]
 800c062:	e029      	b.n	800c0b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c064:	4a27      	ldr	r2, [pc, #156]	; (800c104 <chk_lock+0xb4>)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	4413      	add	r3, r2
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d01d      	beq.n	800c0ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c072:	4a24      	ldr	r2, [pc, #144]	; (800c104 <chk_lock+0xb4>)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	011b      	lsls	r3, r3, #4
 800c078:	4413      	add	r3, r2
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	429a      	cmp	r2, r3
 800c082:	d116      	bne.n	800c0b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c084:	4a1f      	ldr	r2, [pc, #124]	; (800c104 <chk_lock+0xb4>)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	011b      	lsls	r3, r3, #4
 800c08a:	4413      	add	r3, r2
 800c08c:	3304      	adds	r3, #4
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c094:	429a      	cmp	r2, r3
 800c096:	d10c      	bne.n	800c0b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c098:	4a1a      	ldr	r2, [pc, #104]	; (800c104 <chk_lock+0xb4>)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	011b      	lsls	r3, r3, #4
 800c09e:	4413      	add	r3, r2
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d102      	bne.n	800c0b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0ac:	e007      	b.n	800c0be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d9d2      	bls.n	800c064 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d109      	bne.n	800c0d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d102      	bne.n	800c0d0 <chk_lock+0x80>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d101      	bne.n	800c0d4 <chk_lock+0x84>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e010      	b.n	800c0f6 <chk_lock+0xa6>
 800c0d4:	2312      	movs	r3, #18
 800c0d6:	e00e      	b.n	800c0f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d108      	bne.n	800c0f0 <chk_lock+0xa0>
 800c0de:	4a09      	ldr	r2, [pc, #36]	; (800c104 <chk_lock+0xb4>)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	011b      	lsls	r3, r3, #4
 800c0e4:	4413      	add	r3, r2
 800c0e6:	330c      	adds	r3, #12
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ee:	d101      	bne.n	800c0f4 <chk_lock+0xa4>
 800c0f0:	2310      	movs	r3, #16
 800c0f2:	e000      	b.n	800c0f6 <chk_lock+0xa6>
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3714      	adds	r7, #20
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	200000bc 	.word	0x200000bc

0800c108 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c10e:	2300      	movs	r3, #0
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	e002      	b.n	800c11a <enq_lock+0x12>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3301      	adds	r3, #1
 800c118:	607b      	str	r3, [r7, #4]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d806      	bhi.n	800c12e <enq_lock+0x26>
 800c120:	4a09      	ldr	r2, [pc, #36]	; (800c148 <enq_lock+0x40>)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	011b      	lsls	r3, r3, #4
 800c126:	4413      	add	r3, r2
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1f2      	bne.n	800c114 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b02      	cmp	r3, #2
 800c132:	bf14      	ite	ne
 800c134:	2301      	movne	r3, #1
 800c136:	2300      	moveq	r3, #0
 800c138:	b2db      	uxtb	r3, r3
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	200000bc 	.word	0x200000bc

0800c14c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	e01f      	b.n	800c19c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c15c:	4a41      	ldr	r2, [pc, #260]	; (800c264 <inc_lock+0x118>)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	011b      	lsls	r3, r3, #4
 800c162:	4413      	add	r3, r2
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d113      	bne.n	800c196 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c16e:	4a3d      	ldr	r2, [pc, #244]	; (800c264 <inc_lock+0x118>)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	011b      	lsls	r3, r3, #4
 800c174:	4413      	add	r3, r2
 800c176:	3304      	adds	r3, #4
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c17e:	429a      	cmp	r2, r3
 800c180:	d109      	bne.n	800c196 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c182:	4a38      	ldr	r2, [pc, #224]	; (800c264 <inc_lock+0x118>)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	011b      	lsls	r3, r3, #4
 800c188:	4413      	add	r3, r2
 800c18a:	3308      	adds	r3, #8
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800c192:	429a      	cmp	r2, r3
 800c194:	d006      	beq.n	800c1a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3301      	adds	r3, #1
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d9dc      	bls.n	800c15c <inc_lock+0x10>
 800c1a2:	e000      	b.n	800c1a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c1a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d132      	bne.n	800c212 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	60fb      	str	r3, [r7, #12]
 800c1b0:	e002      	b.n	800c1b8 <inc_lock+0x6c>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d806      	bhi.n	800c1cc <inc_lock+0x80>
 800c1be:	4a29      	ldr	r2, [pc, #164]	; (800c264 <inc_lock+0x118>)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	011b      	lsls	r3, r3, #4
 800c1c4:	4413      	add	r3, r2
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1f2      	bne.n	800c1b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d101      	bne.n	800c1d6 <inc_lock+0x8a>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e040      	b.n	800c258 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	4922      	ldr	r1, [pc, #136]	; (800c264 <inc_lock+0x118>)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	011b      	lsls	r3, r3, #4
 800c1e0:	440b      	add	r3, r1
 800c1e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	689a      	ldr	r2, [r3, #8]
 800c1e8:	491e      	ldr	r1, [pc, #120]	; (800c264 <inc_lock+0x118>)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	011b      	lsls	r3, r3, #4
 800c1ee:	440b      	add	r3, r1
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1f8:	491a      	ldr	r1, [pc, #104]	; (800c264 <inc_lock+0x118>)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	011b      	lsls	r3, r3, #4
 800c1fe:	440b      	add	r3, r1
 800c200:	3308      	adds	r3, #8
 800c202:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c204:	4a17      	ldr	r2, [pc, #92]	; (800c264 <inc_lock+0x118>)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	011b      	lsls	r3, r3, #4
 800c20a:	4413      	add	r3, r2
 800c20c:	330c      	adds	r3, #12
 800c20e:	2200      	movs	r2, #0
 800c210:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d009      	beq.n	800c22c <inc_lock+0xe0>
 800c218:	4a12      	ldr	r2, [pc, #72]	; (800c264 <inc_lock+0x118>)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	011b      	lsls	r3, r3, #4
 800c21e:	4413      	add	r3, r2
 800c220:	330c      	adds	r3, #12
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <inc_lock+0xe0>
 800c228:	2300      	movs	r3, #0
 800c22a:	e015      	b.n	800c258 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d108      	bne.n	800c244 <inc_lock+0xf8>
 800c232:	4a0c      	ldr	r2, [pc, #48]	; (800c264 <inc_lock+0x118>)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	011b      	lsls	r3, r3, #4
 800c238:	4413      	add	r3, r2
 800c23a:	330c      	adds	r3, #12
 800c23c:	881b      	ldrh	r3, [r3, #0]
 800c23e:	3301      	adds	r3, #1
 800c240:	b29a      	uxth	r2, r3
 800c242:	e001      	b.n	800c248 <inc_lock+0xfc>
 800c244:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c248:	4906      	ldr	r1, [pc, #24]	; (800c264 <inc_lock+0x118>)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	011b      	lsls	r3, r3, #4
 800c24e:	440b      	add	r3, r1
 800c250:	330c      	adds	r3, #12
 800c252:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3301      	adds	r3, #1
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	200000bc 	.word	0x200000bc

0800c268 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3b01      	subs	r3, #1
 800c274:	607b      	str	r3, [r7, #4]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d825      	bhi.n	800c2c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800c27c:	4a17      	ldr	r2, [pc, #92]	; (800c2dc <dec_lock+0x74>)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	011b      	lsls	r3, r3, #4
 800c282:	4413      	add	r3, r2
 800c284:	330c      	adds	r3, #12
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c28a:	89fb      	ldrh	r3, [r7, #14]
 800c28c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c290:	d101      	bne.n	800c296 <dec_lock+0x2e>
 800c292:	2300      	movs	r3, #0
 800c294:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c296:	89fb      	ldrh	r3, [r7, #14]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <dec_lock+0x3a>
 800c29c:	89fb      	ldrh	r3, [r7, #14]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c2a2:	4a0e      	ldr	r2, [pc, #56]	; (800c2dc <dec_lock+0x74>)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	011b      	lsls	r3, r3, #4
 800c2a8:	4413      	add	r3, r2
 800c2aa:	330c      	adds	r3, #12
 800c2ac:	89fa      	ldrh	r2, [r7, #14]
 800c2ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c2b0:	89fb      	ldrh	r3, [r7, #14]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d105      	bne.n	800c2c2 <dec_lock+0x5a>
 800c2b6:	4a09      	ldr	r2, [pc, #36]	; (800c2dc <dec_lock+0x74>)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	4413      	add	r3, r2
 800c2be:	2200      	movs	r2, #0
 800c2c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	737b      	strb	r3, [r7, #13]
 800c2c6:	e001      	b.n	800c2cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c2cc:	7b7b      	ldrb	r3, [r7, #13]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	200000bc 	.word	0x200000bc

0800c2e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	e010      	b.n	800c310 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c2ee:	4a0d      	ldr	r2, [pc, #52]	; (800c324 <clear_lock+0x44>)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	011b      	lsls	r3, r3, #4
 800c2f4:	4413      	add	r3, r2
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d105      	bne.n	800c30a <clear_lock+0x2a>
 800c2fe:	4a09      	ldr	r2, [pc, #36]	; (800c324 <clear_lock+0x44>)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	011b      	lsls	r3, r3, #4
 800c304:	4413      	add	r3, r2
 800c306:	2200      	movs	r2, #0
 800c308:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3301      	adds	r3, #1
 800c30e:	60fb      	str	r3, [r7, #12]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d9eb      	bls.n	800c2ee <clear_lock+0xe>
	}
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	3714      	adds	r7, #20
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	200000bc 	.word	0x200000bc

0800c328 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	78db      	ldrb	r3, [r3, #3]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d034      	beq.n	800c3a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c340:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	7858      	ldrb	r0, [r3, #1]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c34c:	2301      	movs	r3, #1
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	f7ff fbfc 	bl	800bb4c <disk_write>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d002      	beq.n	800c360 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	73fb      	strb	r3, [r7, #15]
 800c35e:	e022      	b.n	800c3a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	1ad2      	subs	r2, r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	429a      	cmp	r2, r3
 800c374:	d217      	bcs.n	800c3a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	789b      	ldrb	r3, [r3, #2]
 800c37a:	613b      	str	r3, [r7, #16]
 800c37c:	e010      	b.n	800c3a0 <sync_window+0x78>
					wsect += fs->fsize;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	4413      	add	r3, r2
 800c386:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	7858      	ldrb	r0, [r3, #1]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c392:	2301      	movs	r3, #1
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	f7ff fbd9 	bl	800bb4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	613b      	str	r3, [r7, #16]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d8eb      	bhi.n	800c37e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3718      	adds	r7, #24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d01b      	beq.n	800c400 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7ff ffad 	bl	800c328 <sync_window>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d113      	bne.n	800c400 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	7858      	ldrb	r0, [r3, #1]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	f7ff fb91 	bl	800bb0c <disk_read>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
	...

0800c40c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff ff87 	bl	800c328 <sync_window>
 800c41a:	4603      	mov	r3, r0
 800c41c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c41e:	7bfb      	ldrb	r3, [r7, #15]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d159      	bne.n	800c4d8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	2b03      	cmp	r3, #3
 800c42a:	d149      	bne.n	800c4c0 <sync_fs+0xb4>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	791b      	ldrb	r3, [r3, #4]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d145      	bne.n	800c4c0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	899b      	ldrh	r3, [r3, #12]
 800c43e:	461a      	mov	r2, r3
 800c440:	2100      	movs	r1, #0
 800c442:	f7ff fda7 	bl	800bf94 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	333c      	adds	r3, #60	; 0x3c
 800c44a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c44e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fcae 	bl	800bdb4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	333c      	adds	r3, #60	; 0x3c
 800c45c:	4921      	ldr	r1, [pc, #132]	; (800c4e4 <sync_fs+0xd8>)
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff fcc3 	bl	800bdea <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	333c      	adds	r3, #60	; 0x3c
 800c468:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c46c:	491e      	ldr	r1, [pc, #120]	; (800c4e8 <sync_fs+0xdc>)
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff fcbb 	bl	800bdea <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	333c      	adds	r3, #60	; 0x3c
 800c478:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	69db      	ldr	r3, [r3, #28]
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	f7ff fcb1 	bl	800bdea <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	333c      	adds	r3, #60	; 0x3c
 800c48c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	4619      	mov	r1, r3
 800c496:	4610      	mov	r0, r2
 800c498:	f7ff fca7 	bl	800bdea <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	7858      	ldrb	r0, [r3, #1]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	f7ff fb49 	bl	800bb4c <disk_write>
			fs->fsi_flag = 0;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	785b      	ldrb	r3, [r3, #1]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7ff fb5f 	bl	800bb8c <disk_ioctl>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <sync_fs+0xcc>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	41615252 	.word	0x41615252
 800c4e8:	61417272 	.word	0x61417272

0800c4ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	3b02      	subs	r3, #2
 800c4fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	3b02      	subs	r3, #2
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	429a      	cmp	r2, r3
 800c506:	d301      	bcc.n	800c50c <clust2sect+0x20>
 800c508:	2300      	movs	r3, #0
 800c50a:	e008      	b.n	800c51e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	895b      	ldrh	r3, [r3, #10]
 800c510:	461a      	mov	r2, r3
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	fb03 f202 	mul.w	r2, r3, r2
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c51c:	4413      	add	r3, r2
}
 800c51e:	4618      	mov	r0, r3
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
	...

0800c52c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c52c:	b5b0      	push	{r4, r5, r7, lr}
 800c52e:	b088      	sub	sp, #32
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d904      	bls.n	800c54c <get_fat+0x20>
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d302      	bcc.n	800c552 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c54c:	2301      	movs	r3, #1
 800c54e:	61fb      	str	r3, [r7, #28]
 800c550:	e139      	b.n	800c7c6 <get_fat+0x29a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c552:	f04f 33ff 	mov.w	r3, #4294967295
 800c556:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	2b03      	cmp	r3, #3
 800c560:	f200 8125 	bhi.w	800c7ae <get_fat+0x282>
 800c564:	a201      	add	r2, pc, #4	; (adr r2, 800c56c <get_fat+0x40>)
 800c566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56a:	bf00      	nop
 800c56c:	0800c57d 	.word	0x0800c57d
 800c570:	0800c62b 	.word	0x0800c62b
 800c574:	0800c677 	.word	0x0800c677
 800c578:	0800c6c7 	.word	0x0800c6c7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	085b      	lsrs	r3, r3, #1
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	4413      	add	r3, r2
 800c588:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	899b      	ldrh	r3, [r3, #12]
 800c592:	4619      	mov	r1, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	fbb3 f3f1 	udiv	r3, r3, r1
 800c59a:	4413      	add	r3, r2
 800c59c:	4619      	mov	r1, r3
 800c59e:	69b8      	ldr	r0, [r7, #24]
 800c5a0:	f7ff ff06 	bl	800c3b0 <move_window>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f040 8104 	bne.w	800c7b4 <get_fat+0x288>
			wc = fs->win[bc++ % SS(fs)];
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	60fa      	str	r2, [r7, #12]
 800c5b2:	69ba      	ldr	r2, [r7, #24]
 800c5b4:	8992      	ldrh	r2, [r2, #12]
 800c5b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5ba:	fb02 f201 	mul.w	r2, r2, r1
 800c5be:	1a9b      	subs	r3, r3, r2
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	899b      	ldrh	r3, [r3, #12]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5da:	4413      	add	r3, r2
 800c5dc:	4619      	mov	r1, r3
 800c5de:	69b8      	ldr	r0, [r7, #24]
 800c5e0:	f7ff fee6 	bl	800c3b0 <move_window>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f040 80e6 	bne.w	800c7b8 <get_fat+0x28c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	899b      	ldrh	r3, [r3, #12]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5f8:	fb02 f201 	mul.w	r2, r2, r1
 800c5fc:	1a9b      	subs	r3, r3, r2
 800c5fe:	69ba      	ldr	r2, [r7, #24]
 800c600:	4413      	add	r3, r2
 800c602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c606:	021b      	lsls	r3, r3, #8
 800c608:	461a      	mov	r2, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <get_fat+0xf4>
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	091b      	lsrs	r3, r3, #4
 800c61e:	e002      	b.n	800c626 <get_fat+0xfa>
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c626:	61fb      	str	r3, [r7, #28]
			break;
 800c628:	e0cd      	b.n	800c7c6 <get_fat+0x29a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	899b      	ldrh	r3, [r3, #12]
 800c632:	085b      	lsrs	r3, r3, #1
 800c634:	b29b      	uxth	r3, r3
 800c636:	4619      	mov	r1, r3
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c63e:	4413      	add	r3, r2
 800c640:	4619      	mov	r1, r3
 800c642:	69b8      	ldr	r0, [r7, #24]
 800c644:	f7ff feb4 	bl	800c3b0 <move_window>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f040 80b6 	bne.w	800c7bc <get_fat+0x290>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	69ba      	ldr	r2, [r7, #24]
 800c65c:	8992      	ldrh	r2, [r2, #12]
 800c65e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c662:	fb02 f200 	mul.w	r2, r2, r0
 800c666:	1a9b      	subs	r3, r3, r2
 800c668:	440b      	add	r3, r1
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff faac 	bl	800bbc8 <ld_word>
 800c670:	4603      	mov	r3, r0
 800c672:	61fb      	str	r3, [r7, #28]
			break;
 800c674:	e0a7      	b.n	800c7c6 <get_fat+0x29a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	899b      	ldrh	r3, [r3, #12]
 800c67e:	089b      	lsrs	r3, r3, #2
 800c680:	b29b      	uxth	r3, r3
 800c682:	4619      	mov	r1, r3
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	fbb3 f3f1 	udiv	r3, r3, r1
 800c68a:	4413      	add	r3, r2
 800c68c:	4619      	mov	r1, r3
 800c68e:	69b8      	ldr	r0, [r7, #24]
 800c690:	f7ff fe8e 	bl	800c3b0 <move_window>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	f040 8092 	bne.w	800c7c0 <get_fat+0x294>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	69ba      	ldr	r2, [r7, #24]
 800c6a8:	8992      	ldrh	r2, [r2, #12]
 800c6aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6ae:	fb02 f200 	mul.w	r2, r2, r0
 800c6b2:	1a9b      	subs	r3, r3, r2
 800c6b4:	440b      	add	r3, r1
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff fa9e 	bl	800bbf8 <ld_dword>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c6c2:	61fb      	str	r3, [r7, #28]
			break;
 800c6c4:	e07f      	b.n	800c7c6 <get_fat+0x29a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	d06e      	beq.n	800c7ae <get_fat+0x282>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c6e0:	f112 34ff 	adds.w	r4, r2, #4294967295
 800c6e4:	f143 35ff 	adc.w	r5, r3, #4294967295
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	899b      	ldrh	r3, [r3, #12]
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	f04f 0300 	mov.w	r3, #0
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f7f4 f8f1 	bl	80008dc <__aeabi_uldivmod>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	895b      	ldrh	r3, [r3, #10]
 800c702:	fbb2 f3f3 	udiv	r3, r2, r3
 800c706:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	79db      	ldrb	r3, [r3, #7]
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d10e      	bne.n	800c72e <get_fat+0x202>
					if (cofs <= clen) {
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	429a      	cmp	r2, r3
 800c716:	d80a      	bhi.n	800c72e <get_fat+0x202>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d002      	beq.n	800c726 <get_fat+0x1fa>
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	3301      	adds	r3, #1
 800c724:	e001      	b.n	800c72a <get_fat+0x1fe>
 800c726:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c72a:	61fb      	str	r3, [r7, #28]
						break;
 800c72c:	e04b      	b.n	800c7c6 <get_fat+0x29a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	79db      	ldrb	r3, [r3, #7]
 800c732:	2b03      	cmp	r3, #3
 800c734:	d108      	bne.n	800c748 <get_fat+0x21c>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d203      	bcs.n	800c748 <get_fat+0x21c>
					val = clst + 1; 	/* Generate the value */
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	3301      	adds	r3, #1
 800c744:	61fb      	str	r3, [r7, #28]
					break;
 800c746:	e03e      	b.n	800c7c6 <get_fat+0x29a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	79db      	ldrb	r3, [r3, #7]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d02e      	beq.n	800c7ae <get_fat+0x282>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	69db      	ldr	r3, [r3, #28]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d003      	beq.n	800c760 <get_fat+0x234>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800c758:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c75c:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800c75e:	e032      	b.n	800c7c6 <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	899b      	ldrh	r3, [r3, #12]
 800c768:	089b      	lsrs	r3, r3, #2
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	4619      	mov	r1, r3
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	fbb3 f3f1 	udiv	r3, r3, r1
 800c774:	4413      	add	r3, r2
 800c776:	4619      	mov	r1, r3
 800c778:	69b8      	ldr	r0, [r7, #24]
 800c77a:	f7ff fe19 	bl	800c3b0 <move_window>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d11f      	bne.n	800c7c4 <get_fat+0x298>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	69ba      	ldr	r2, [r7, #24]
 800c790:	8992      	ldrh	r2, [r2, #12]
 800c792:	fbb3 f0f2 	udiv	r0, r3, r2
 800c796:	fb02 f200 	mul.w	r2, r2, r0
 800c79a:	1a9b      	subs	r3, r3, r2
 800c79c:	440b      	add	r3, r1
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff fa2a 	bl	800bbf8 <ld_dword>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7aa:	61fb      	str	r3, [r7, #28]
					break;
 800c7ac:	e00b      	b.n	800c7c6 <get_fat+0x29a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	61fb      	str	r3, [r7, #28]
 800c7b2:	e008      	b.n	800c7c6 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7b4:	bf00      	nop
 800c7b6:	e006      	b.n	800c7c6 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7b8:	bf00      	nop
 800c7ba:	e004      	b.n	800c7c6 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7bc:	bf00      	nop
 800c7be:	e002      	b.n	800c7c6 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7c0:	bf00      	nop
 800c7c2:	e000      	b.n	800c7c6 <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7c4:	bf00      	nop
		}
	}

	return val;
 800c7c6:	69fb      	ldr	r3, [r7, #28]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3720      	adds	r7, #32
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bdb0      	pop	{r4, r5, r7, pc}

0800c7d0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c7d0:	b590      	push	{r4, r7, lr}
 800c7d2:	b089      	sub	sp, #36	; 0x24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c7dc:	2302      	movs	r3, #2
 800c7de:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	f240 8106 	bls.w	800c9f4 <put_fat+0x224>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6a1b      	ldr	r3, [r3, #32]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	f080 8100 	bcs.w	800c9f4 <put_fat+0x224>
		switch (fs->fs_type) {
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	2b04      	cmp	r3, #4
 800c7fa:	f300 8104 	bgt.w	800ca06 <put_fat+0x236>
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	f280 80b3 	bge.w	800c96a <put_fat+0x19a>
 800c804:	2b01      	cmp	r3, #1
 800c806:	d003      	beq.n	800c810 <put_fat+0x40>
 800c808:	2b02      	cmp	r3, #2
 800c80a:	f000 8083 	beq.w	800c914 <put_fat+0x144>
 800c80e:	e0fa      	b.n	800ca06 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	61bb      	str	r3, [r7, #24]
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	085b      	lsrs	r3, r3, #1
 800c818:	69ba      	ldr	r2, [r7, #24]
 800c81a:	4413      	add	r3, r2
 800c81c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	899b      	ldrh	r3, [r3, #12]
 800c826:	4619      	mov	r1, r3
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c82e:	4413      	add	r3, r2
 800c830:	4619      	mov	r1, r3
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7ff fdbc 	bl	800c3b0 <move_window>
 800c838:	4603      	mov	r3, r0
 800c83a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c83c:	7ffb      	ldrb	r3, [r7, #31]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f040 80da 	bne.w	800c9f8 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	1c5a      	adds	r2, r3, #1
 800c84e:	61ba      	str	r2, [r7, #24]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	8992      	ldrh	r2, [r2, #12]
 800c854:	fbb3 f0f2 	udiv	r0, r3, r2
 800c858:	fb02 f200 	mul.w	r2, r2, r0
 800c85c:	1a9b      	subs	r3, r3, r2
 800c85e:	440b      	add	r3, r1
 800c860:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00d      	beq.n	800c888 <put_fat+0xb8>
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	b25b      	sxtb	r3, r3
 800c872:	f003 030f 	and.w	r3, r3, #15
 800c876:	b25a      	sxtb	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	b25b      	sxtb	r3, r3
 800c880:	4313      	orrs	r3, r2
 800c882:	b25b      	sxtb	r3, r3
 800c884:	b2db      	uxtb	r3, r3
 800c886:	e001      	b.n	800c88c <put_fat+0xbc>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2201      	movs	r2, #1
 800c894:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	899b      	ldrh	r3, [r3, #12]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8a6:	4413      	add	r3, r2
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f7ff fd80 	bl	800c3b0 <move_window>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8b4:	7ffb      	ldrb	r3, [r7, #31]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f040 80a0 	bne.w	800c9fc <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	899b      	ldrh	r3, [r3, #12]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8ce:	fb02 f200 	mul.w	r2, r2, r0
 800c8d2:	1a9b      	subs	r3, r3, r2
 800c8d4:	440b      	add	r3, r1
 800c8d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	f003 0301 	and.w	r3, r3, #1
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d003      	beq.n	800c8ea <put_fat+0x11a>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	091b      	lsrs	r3, r3, #4
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	e00e      	b.n	800c908 <put_fat+0x138>
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	b25b      	sxtb	r3, r3
 800c8f0:	f023 030f 	bic.w	r3, r3, #15
 800c8f4:	b25a      	sxtb	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	0a1b      	lsrs	r3, r3, #8
 800c8fa:	b25b      	sxtb	r3, r3
 800c8fc:	f003 030f 	and.w	r3, r3, #15
 800c900:	b25b      	sxtb	r3, r3
 800c902:	4313      	orrs	r3, r2
 800c904:	b25b      	sxtb	r3, r3
 800c906:	b2db      	uxtb	r3, r3
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2201      	movs	r2, #1
 800c910:	70da      	strb	r2, [r3, #3]
			break;
 800c912:	e078      	b.n	800ca06 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	899b      	ldrh	r3, [r3, #12]
 800c91c:	085b      	lsrs	r3, r3, #1
 800c91e:	b29b      	uxth	r3, r3
 800c920:	4619      	mov	r1, r3
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	fbb3 f3f1 	udiv	r3, r3, r1
 800c928:	4413      	add	r3, r2
 800c92a:	4619      	mov	r1, r3
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f7ff fd3f 	bl	800c3b0 <move_window>
 800c932:	4603      	mov	r3, r0
 800c934:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c936:	7ffb      	ldrb	r3, [r7, #31]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d161      	bne.n	800ca00 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	005b      	lsls	r3, r3, #1
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	8992      	ldrh	r2, [r2, #12]
 800c94a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c94e:	fb02 f200 	mul.w	r2, r2, r0
 800c952:	1a9b      	subs	r3, r3, r2
 800c954:	440b      	add	r3, r1
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	b292      	uxth	r2, r2
 800c95a:	4611      	mov	r1, r2
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff fa29 	bl	800bdb4 <st_word>
			fs->wflag = 1;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2201      	movs	r2, #1
 800c966:	70da      	strb	r2, [r3, #3]
			break;
 800c968:	e04d      	b.n	800ca06 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	899b      	ldrh	r3, [r3, #12]
 800c972:	089b      	lsrs	r3, r3, #2
 800c974:	b29b      	uxth	r3, r3
 800c976:	4619      	mov	r1, r3
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c97e:	4413      	add	r3, r2
 800c980:	4619      	mov	r1, r3
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7ff fd14 	bl	800c3b0 <move_window>
 800c988:	4603      	mov	r3, r0
 800c98a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c98c:	7ffb      	ldrb	r3, [r7, #31]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d138      	bne.n	800ca04 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b04      	cmp	r3, #4
 800c998:	d017      	beq.n	800c9ca <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	8992      	ldrh	r2, [r2, #12]
 800c9ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9b2:	fb02 f200 	mul.w	r2, r2, r0
 800c9b6:	1a9b      	subs	r3, r3, r2
 800c9b8:	440b      	add	r3, r1
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff f91c 	bl	800bbf8 <ld_dword>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9c6:	4323      	orrs	r3, r4
 800c9c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	8992      	ldrh	r2, [r2, #12]
 800c9d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9dc:	fb02 f200 	mul.w	r2, r2, r0
 800c9e0:	1a9b      	subs	r3, r3, r2
 800c9e2:	440b      	add	r3, r1
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7ff f9ff 	bl	800bdea <st_dword>
			fs->wflag = 1;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	70da      	strb	r2, [r3, #3]
			break;
 800c9f2:	e008      	b.n	800ca06 <put_fat+0x236>
		}
	}
 800c9f4:	bf00      	nop
 800c9f6:	e006      	b.n	800ca06 <put_fat+0x236>
			if (res != FR_OK) break;
 800c9f8:	bf00      	nop
 800c9fa:	e004      	b.n	800ca06 <put_fat+0x236>
			if (res != FR_OK) break;
 800c9fc:	bf00      	nop
 800c9fe:	e002      	b.n	800ca06 <put_fat+0x236>
			if (res != FR_OK) break;
 800ca00:	bf00      	nop
 800ca02:	e000      	b.n	800ca06 <put_fat+0x236>
			if (res != FR_OK) break;
 800ca04:	bf00      	nop
	return res;
 800ca06:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3724      	adds	r7, #36	; 0x24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd90      	pop	{r4, r7, pc}

0800ca10 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08a      	sub	sp, #40	; 0x28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	3b02      	subs	r3, #2
 800ca20:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	3b02      	subs	r3, #2
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d301      	bcc.n	800ca32 <find_bitmap+0x22>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	61fb      	str	r3, [r7, #28]
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	61bb      	str	r3, [r7, #24]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	08db      	lsrs	r3, r3, #3
 800ca46:	68f9      	ldr	r1, [r7, #12]
 800ca48:	8989      	ldrh	r1, [r1, #12]
 800ca4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca4e:	4413      	add	r3, r2
 800ca50:	4619      	mov	r1, r3
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f7ff fcac 	bl	800c3b0 <move_window>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d002      	beq.n	800ca64 <find_bitmap+0x54>
 800ca5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca62:	e058      	b.n	800cb16 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	08db      	lsrs	r3, r3, #3
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	8992      	ldrh	r2, [r2, #12]
 800ca6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca70:	fb02 f201 	mul.w	r2, r2, r1
 800ca74:	1a9b      	subs	r3, r3, r2
 800ca76:	623b      	str	r3, [r7, #32]
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	f003 0307 	and.w	r3, r3, #7
 800ca7e:	2201      	movs	r2, #1
 800ca80:	fa02 f303 	lsl.w	r3, r2, r3
 800ca84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	6a3b      	ldr	r3, [r7, #32]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	333c      	adds	r3, #60	; 0x3c
 800ca90:	781a      	ldrb	r2, [r3, #0]
 800ca92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca96:	4013      	ands	r3, r2
 800ca98:	74fb      	strb	r3, [r7, #19]
 800ca9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca9e:	005b      	lsls	r3, r3, #1
 800caa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	3301      	adds	r3, #1
 800caa8:	61fb      	str	r3, [r7, #28]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	3b02      	subs	r3, #2
 800cab0:	69fa      	ldr	r2, [r7, #28]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d307      	bcc.n	800cac6 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800cab6:	2300      	movs	r3, #0
 800cab8:	61fb      	str	r3, [r7, #28]
 800caba:	2300      	movs	r3, #0
 800cabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	899b      	ldrh	r3, [r3, #12]
 800cac4:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800cac6:	7cfb      	ldrb	r3, [r7, #19]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d109      	bne.n	800cae0 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	3301      	adds	r3, #1
 800cad0:	617b      	str	r3, [r7, #20]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d106      	bne.n	800cae8 <find_bitmap+0xd8>
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	3302      	adds	r3, #2
 800cade:	e01a      	b.n	800cb16 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	61bb      	str	r3, [r7, #24]
 800cae4:	2300      	movs	r3, #0
 800cae6:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800cae8:	69fa      	ldr	r2, [r7, #28]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	429a      	cmp	r2, r3
 800caee:	d101      	bne.n	800caf4 <find_bitmap+0xe4>
 800caf0:	2300      	movs	r3, #0
 800caf2:	e010      	b.n	800cb16 <find_bitmap+0x106>
			} while (bm);
 800caf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1c5      	bne.n	800ca88 <find_bitmap+0x78>
			bm = 1;
 800cafc:	2301      	movs	r3, #1
 800cafe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	3301      	adds	r3, #1
 800cb06:	623b      	str	r3, [r7, #32]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	899b      	ldrh	r3, [r3, #12]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d3b9      	bcc.n	800ca88 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800cb14:	e793      	b.n	800ca3e <find_bitmap+0x2e>
	}
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3728      	adds	r7, #40	; 0x28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b088      	sub	sp, #32
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	60b9      	str	r1, [r7, #8]
 800cb28:	607a      	str	r2, [r7, #4]
 800cb2a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	3b02      	subs	r3, #2
 800cb30:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	08db      	lsrs	r3, r3, #3
 800cb3a:	68f9      	ldr	r1, [r7, #12]
 800cb3c:	8989      	ldrh	r1, [r1, #12]
 800cb3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb42:	4413      	add	r3, r2
 800cb44:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	08db      	lsrs	r3, r3, #3
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	8992      	ldrh	r2, [r2, #12]
 800cb4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb52:	fb02 f201 	mul.w	r2, r2, r1
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	f003 0307 	and.w	r3, r3, #7
 800cb60:	2201      	movs	r2, #1
 800cb62:	fa02 f303 	lsl.w	r3, r2, r3
 800cb66:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	1c5a      	adds	r2, r3, #1
 800cb6c:	617a      	str	r2, [r7, #20]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7ff fc1d 	bl	800c3b0 <move_window>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <change_bitmap+0x62>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e03f      	b.n	800cc00 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	4413      	add	r3, r2
 800cb86:	333c      	adds	r3, #60	; 0x3c
 800cb88:	781a      	ldrb	r2, [r3, #0]
 800cb8a:	7ffb      	ldrb	r3, [r7, #31]
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	bf14      	ite	ne
 800cb94:	2301      	movne	r3, #1
 800cb96:	2300      	moveq	r3, #0
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d101      	bne.n	800cba6 <change_bitmap+0x88>
 800cba2:	2302      	movs	r3, #2
 800cba4:	e02c      	b.n	800cc00 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	4413      	add	r3, r2
 800cbac:	333c      	adds	r3, #60	; 0x3c
 800cbae:	781a      	ldrb	r2, [r3, #0]
 800cbb0:	7ffb      	ldrb	r3, [r7, #31]
 800cbb2:	4053      	eors	r3, r2
 800cbb4:	b2d9      	uxtb	r1, r3
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	4413      	add	r3, r2
 800cbbc:	333c      	adds	r3, #60	; 0x3c
 800cbbe:	460a      	mov	r2, r1
 800cbc0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d101      	bne.n	800cbd8 <change_bitmap+0xba>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	e013      	b.n	800cc00 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800cbd8:	7ffb      	ldrb	r3, [r7, #31]
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	77fb      	strb	r3, [r7, #31]
 800cbde:	7ffb      	ldrb	r3, [r7, #31]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1cd      	bne.n	800cb80 <change_bitmap+0x62>
			bm = 1;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	3301      	adds	r3, #1
 800cbec:	61bb      	str	r3, [r7, #24]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	899b      	ldrh	r3, [r3, #12]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d3c2      	bcc.n	800cb80 <change_bitmap+0x62>
		i = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cbfe:	e7b3      	b.n	800cb68 <change_bitmap+0x4a>
	}
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3720      	adds	r7, #32
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	79db      	ldrb	r3, [r3, #7]
 800cc14:	2b03      	cmp	r3, #3
 800cc16:	d121      	bne.n	800cc5c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	617b      	str	r3, [r7, #20]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	613b      	str	r3, [r7, #16]
 800cc24:	e014      	b.n	800cc50 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6818      	ldr	r0, [r3, #0]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6979      	ldr	r1, [r7, #20]
 800cc32:	f7ff fdcd 	bl	800c7d0 <put_fat>
 800cc36:	4603      	mov	r3, r0
 800cc38:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <fill_first_frag+0x3c>
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	e00c      	b.n	800cc5e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	3301      	adds	r3, #1
 800cc48:	617b      	str	r3, [r7, #20]
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	613b      	str	r3, [r7, #16]
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1e7      	bne.n	800cc26 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b086      	sub	sp, #24
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	60f8      	str	r0, [r7, #12]
 800cc6e:	60b9      	str	r1, [r7, #8]
 800cc70:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800cc72:	e020      	b.n	800ccb6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6818      	ldr	r0, [r3, #0]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	69db      	ldr	r3, [r3, #28]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	1c59      	adds	r1, r3, #1
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	69db      	ldr	r3, [r3, #28]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d905      	bls.n	800cc96 <fill_last_frag+0x30>
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	3302      	adds	r3, #2
 800cc94:	e000      	b.n	800cc98 <fill_last_frag+0x32>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	f7ff fd99 	bl	800c7d0 <put_fat>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <fill_last_frag+0x46>
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	e009      	b.n	800ccc0 <fill_last_frag+0x5a>
		obj->n_frag--;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	69db      	ldr	r3, [r3, #28]
 800ccb0:	1e5a      	subs	r2, r3, #1
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1da      	bne.n	800cc74 <fill_last_frag+0xe>
	}
	return FR_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3718      	adds	r7, #24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	; 0x28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d904      	bls.n	800ccf6 <remove_chain+0x2e>
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	6a1b      	ldr	r3, [r3, #32]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d301      	bcc.n	800ccfa <remove_chain+0x32>
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	e096      	b.n	800ce28 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d014      	beq.n	800cd2a <remove_chain+0x62>
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b04      	cmp	r3, #4
 800cd06:	d103      	bne.n	800cd10 <remove_chain+0x48>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	79db      	ldrb	r3, [r3, #7]
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d00c      	beq.n	800cd2a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cd10:	f04f 32ff 	mov.w	r2, #4294967295
 800cd14:	6879      	ldr	r1, [r7, #4]
 800cd16:	69b8      	ldr	r0, [r7, #24]
 800cd18:	f7ff fd5a 	bl	800c7d0 <put_fat>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cd20:	7ffb      	ldrb	r3, [r7, #31]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <remove_chain+0x62>
 800cd26:	7ffb      	ldrb	r3, [r7, #31]
 800cd28:	e07e      	b.n	800ce28 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7ff fbfd 	bl	800c52c <get_fat>
 800cd32:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d055      	beq.n	800cde6 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d101      	bne.n	800cd44 <remove_chain+0x7c>
 800cd40:	2302      	movs	r3, #2
 800cd42:	e071      	b.n	800ce28 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4a:	d101      	bne.n	800cd50 <remove_chain+0x88>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e06b      	b.n	800ce28 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	2b04      	cmp	r3, #4
 800cd56:	d00b      	beq.n	800cd70 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cd58:	2200      	movs	r2, #0
 800cd5a:	68b9      	ldr	r1, [r7, #8]
 800cd5c:	69b8      	ldr	r0, [r7, #24]
 800cd5e:	f7ff fd37 	bl	800c7d0 <put_fat>
 800cd62:	4603      	mov	r3, r0
 800cd64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd66:	7ffb      	ldrb	r3, [r7, #31]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <remove_chain+0xa8>
 800cd6c:	7ffb      	ldrb	r3, [r7, #31]
 800cd6e:	e05b      	b.n	800ce28 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	69da      	ldr	r2, [r3, #28]
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	6a1b      	ldr	r3, [r3, #32]
 800cd78:	3b02      	subs	r3, #2
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d20b      	bcs.n	800cd96 <remove_chain+0xce>
			fs->free_clst++;
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	69db      	ldr	r3, [r3, #28]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	791b      	ldrb	r3, [r3, #4]
 800cd8c:	f043 0301 	orr.w	r3, r3, #1
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	697a      	ldr	r2, [r7, #20]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d102      	bne.n	800cda6 <remove_chain+0xde>
			ecl = nxt;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	623b      	str	r3, [r7, #32]
 800cda4:	e017      	b.n	800cdd6 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b04      	cmp	r3, #4
 800cdac:	d10f      	bne.n	800cdce <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800cdae:	6a3a      	ldr	r2, [r7, #32]
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	1c5a      	adds	r2, r3, #1
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdba:	69b8      	ldr	r0, [r7, #24]
 800cdbc:	f7ff feaf 	bl	800cb1e <change_bitmap>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800cdc4:	7ffb      	ldrb	r3, [r7, #31]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d001      	beq.n	800cdce <remove_chain+0x106>
 800cdca:	7ffb      	ldrb	r3, [r7, #31]
 800cdcc:	e02c      	b.n	800ce28 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	623b      	str	r3, [r7, #32]
 800cdd2:	6a3b      	ldr	r3, [r7, #32]
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	6a1b      	ldr	r3, [r3, #32]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d3a2      	bcc.n	800cd2a <remove_chain+0x62>
 800cde4:	e000      	b.n	800cde8 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800cde6:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b04      	cmp	r3, #4
 800cdee:	d11a      	bne.n	800ce26 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d103      	bne.n	800cdfe <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	71da      	strb	r2, [r3, #7]
 800cdfc:	e013      	b.n	800ce26 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	79db      	ldrb	r3, [r3, #7]
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d10f      	bne.n	800ce26 <remove_chain+0x15e>
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d30a      	bcc.n	800ce26 <remove_chain+0x15e>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	699b      	ldr	r3, [r3, #24]
 800ce18:	4413      	add	r3, r2
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d802      	bhi.n	800ce26 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2202      	movs	r2, #2
 800ce24:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3728      	adds	r7, #40	; 0x28
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10d      	bne.n	800ce62 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	699b      	ldr	r3, [r3, #24]
 800ce4a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d004      	beq.n	800ce5c <create_chain+0x2c>
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d31b      	bcc.n	800ce94 <create_chain+0x64>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	61bb      	str	r3, [r7, #24]
 800ce60:	e018      	b.n	800ce94 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff fb61 	bl	800c52c <get_fat>
 800ce6a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d801      	bhi.n	800ce76 <create_chain+0x46>
 800ce72:	2301      	movs	r3, #1
 800ce74:	e0d9      	b.n	800d02a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7c:	d101      	bne.n	800ce82 <create_chain+0x52>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	e0d3      	b.n	800d02a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d201      	bcs.n	800ce90 <create_chain+0x60>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	e0cc      	b.n	800d02a <create_chain+0x1fa>
		scl = clst;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b04      	cmp	r3, #4
 800ce9a:	d164      	bne.n	800cf66 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	69b9      	ldr	r1, [r7, #24]
 800cea0:	6938      	ldr	r0, [r7, #16]
 800cea2:	f7ff fdb5 	bl	800ca10 <find_bitmap>
 800cea6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <create_chain+0x86>
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb4:	d101      	bne.n	800ceba <create_chain+0x8a>
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	e0b7      	b.n	800d02a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800ceba:	2301      	movs	r3, #1
 800cebc:	2201      	movs	r2, #1
 800cebe:	69f9      	ldr	r1, [r7, #28]
 800cec0:	6938      	ldr	r0, [r7, #16]
 800cec2:	f7ff fe2c 	bl	800cb1e <change_bitmap>
 800cec6:	4603      	mov	r3, r0
 800cec8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d101      	bne.n	800ced4 <create_chain+0xa4>
 800ced0:	2301      	movs	r3, #1
 800ced2:	e0aa      	b.n	800d02a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d102      	bne.n	800cee0 <create_chain+0xb0>
 800ceda:	f04f 33ff 	mov.w	r3, #4294967295
 800cede:	e0a4      	b.n	800d02a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d103      	bne.n	800ceee <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2202      	movs	r2, #2
 800ceea:	71da      	strb	r2, [r3, #7]
 800ceec:	e011      	b.n	800cf12 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	79db      	ldrb	r3, [r3, #7]
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d10d      	bne.n	800cf12 <create_chain+0xe2>
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	3301      	adds	r3, #1
 800cefa:	69fa      	ldr	r2, [r7, #28]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d008      	beq.n	800cf12 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	69ba      	ldr	r2, [r7, #24]
 800cf06:	1ad2      	subs	r2, r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2203      	movs	r2, #3
 800cf10:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	79db      	ldrb	r3, [r3, #7]
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	d064      	beq.n	800cfe4 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	69fa      	ldr	r2, [r7, #28]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d10b      	bne.n	800cf3c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	69db      	ldr	r3, [r3, #28]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <create_chain+0x104>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	69db      	ldr	r3, [r3, #28]
 800cf30:	3301      	adds	r3, #1
 800cf32:	e000      	b.n	800cf36 <create_chain+0x106>
 800cf34:	2302      	movs	r3, #2
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	61d3      	str	r3, [r2, #28]
 800cf3a:	e053      	b.n	800cfe4 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	69db      	ldr	r3, [r3, #28]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <create_chain+0x11a>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800cf4a:	69fa      	ldr	r2, [r7, #28]
 800cf4c:	6839      	ldr	r1, [r7, #0]
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff fe89 	bl	800cc66 <fill_last_frag>
 800cf54:	4603      	mov	r3, r0
 800cf56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800cf58:	7dfb      	ldrb	r3, [r7, #23]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d142      	bne.n	800cfe4 <create_chain+0x1b4>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	61da      	str	r2, [r3, #28]
 800cf64:	e03e      	b.n	800cfe4 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	6a1b      	ldr	r3, [r3, #32]
 800cf74:	69fa      	ldr	r2, [r7, #28]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d307      	bcc.n	800cf8a <create_chain+0x15a>
				ncl = 2;
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cf7e:	69fa      	ldr	r2, [r7, #28]
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d901      	bls.n	800cf8a <create_chain+0x15a>
 800cf86:	2300      	movs	r3, #0
 800cf88:	e04f      	b.n	800d02a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cf8a:	69f9      	ldr	r1, [r7, #28]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff facd 	bl	800c52c <get_fat>
 800cf92:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00e      	beq.n	800cfb8 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d003      	beq.n	800cfa8 <create_chain+0x178>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa6:	d101      	bne.n	800cfac <create_chain+0x17c>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	e03e      	b.n	800d02a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800cfac:	69fa      	ldr	r2, [r7, #28]
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d1da      	bne.n	800cf6a <create_chain+0x13a>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e038      	b.n	800d02a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800cfb8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cfba:	f04f 32ff 	mov.w	r2, #4294967295
 800cfbe:	69f9      	ldr	r1, [r7, #28]
 800cfc0:	6938      	ldr	r0, [r7, #16]
 800cfc2:	f7ff fc05 	bl	800c7d0 <put_fat>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cfca:	7dfb      	ldrb	r3, [r7, #23]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d109      	bne.n	800cfe4 <create_chain+0x1b4>
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d006      	beq.n	800cfe4 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cfd6:	69fa      	ldr	r2, [r7, #28]
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6938      	ldr	r0, [r7, #16]
 800cfdc:	f7ff fbf8 	bl	800c7d0 <put_fat>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cfe4:	7dfb      	ldrb	r3, [r7, #23]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d116      	bne.n	800d018 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	69fa      	ldr	r2, [r7, #28]
 800cfee:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	69da      	ldr	r2, [r3, #28]
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	6a1b      	ldr	r3, [r3, #32]
 800cff8:	3b02      	subs	r3, #2
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d804      	bhi.n	800d008 <create_chain+0x1d8>
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	69db      	ldr	r3, [r3, #28]
 800d002:	1e5a      	subs	r2, r3, #1
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	791b      	ldrb	r3, [r3, #4]
 800d00c:	f043 0301 	orr.w	r3, r3, #1
 800d010:	b2da      	uxtb	r2, r3
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	711a      	strb	r2, [r3, #4]
 800d016:	e007      	b.n	800d028 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d018:	7dfb      	ldrb	r3, [r7, #23]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d102      	bne.n	800d024 <create_chain+0x1f4>
 800d01e:	f04f 33ff 	mov.w	r3, #4294967295
 800d022:	e000      	b.n	800d026 <create_chain+0x1f6>
 800d024:	2301      	movs	r3, #1
 800d026:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d028:	69fb      	ldr	r3, [r7, #28]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3720      	adds	r7, #32
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b088      	sub	sp, #32
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d048:	3304      	adds	r3, #4
 800d04a:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	899b      	ldrh	r3, [r3, #12]
 800d050:	b29a      	uxth	r2, r3
 800d052:	f04f 0300 	mov.w	r3, #0
 800d056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d05a:	f7f3 fc3f 	bl	80008dc <__aeabi_uldivmod>
 800d05e:	4602      	mov	r2, r0
 800d060:	460b      	mov	r3, r1
 800d062:	4610      	mov	r0, r2
 800d064:	4619      	mov	r1, r3
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	895b      	ldrh	r3, [r3, #10]
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	f04f 0300 	mov.w	r3, #0
 800d070:	f7f3 fc34 	bl	80008dc <__aeabi_uldivmod>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	4613      	mov	r3, r2
 800d07a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	1d1a      	adds	r2, r3, #4
 800d080:	61ba      	str	r2, [r7, #24]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <clmt_clust+0x5e>
 800d08c:	2300      	movs	r3, #0
 800d08e:	e010      	b.n	800d0b2 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800d090:	69fa      	ldr	r2, [r7, #28]
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	429a      	cmp	r2, r3
 800d096:	d307      	bcc.n	800d0a8 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800d098:	69fa      	ldr	r2, [r7, #28]
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	61fb      	str	r3, [r7, #28]
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d0a6:	e7e9      	b.n	800d07c <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800d0a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	4413      	add	r3, r2
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3720      	adds	r7, #32
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b086      	sub	sp, #24
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	d102      	bne.n	800d0d8 <dir_sdi+0x1e>
 800d0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d6:	e001      	b.n	800d0dc <dir_sdi+0x22>
 800d0d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d904      	bls.n	800d0ec <dir_sdi+0x32>
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	f003 031f 	and.w	r3, r3, #31
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <dir_sdi+0x36>
		return FR_INT_ERR;
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	e074      	b.n	800d1da <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d109      	bne.n	800d116 <dir_sdi+0x5c>
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b02      	cmp	r3, #2
 800d108:	d905      	bls.n	800d116 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d10e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10c      	bne.n	800d136 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	095b      	lsrs	r3, r3, #5
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	8912      	ldrh	r2, [r2, #8]
 800d124:	4293      	cmp	r3, r2
 800d126:	d301      	bcc.n	800d12c <dir_sdi+0x72>
 800d128:	2302      	movs	r3, #2
 800d12a:	e056      	b.n	800d1da <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	639a      	str	r2, [r3, #56]	; 0x38
 800d134:	e02d      	b.n	800d192 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	895b      	ldrh	r3, [r3, #10]
 800d13a:	461a      	mov	r2, r3
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	899b      	ldrh	r3, [r3, #12]
 800d140:	fb03 f302 	mul.w	r3, r3, r2
 800d144:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d146:	e019      	b.n	800d17c <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6979      	ldr	r1, [r7, #20]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7ff f9ed 	bl	800c52c <get_fat>
 800d152:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15a:	d101      	bne.n	800d160 <dir_sdi+0xa6>
 800d15c:	2301      	movs	r3, #1
 800d15e:	e03c      	b.n	800d1da <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d904      	bls.n	800d170 <dir_sdi+0xb6>
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	697a      	ldr	r2, [r7, #20]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d301      	bcc.n	800d174 <dir_sdi+0xba>
 800d170:	2302      	movs	r3, #2
 800d172:	e032      	b.n	800d1da <dir_sdi+0x120>
			ofs -= csz;
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d17c:	683a      	ldr	r2, [r7, #0]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	429a      	cmp	r2, r3
 800d182:	d2e1      	bcs.n	800d148 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800d184:	6979      	ldr	r1, [r7, #20]
 800d186:	6938      	ldr	r0, [r7, #16]
 800d188:	f7ff f9b0 	bl	800c4ec <clust2sect>
 800d18c:	4602      	mov	r2, r0
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	697a      	ldr	r2, [r7, #20]
 800d196:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <dir_sdi+0xea>
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	e01a      	b.n	800d1da <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	899b      	ldrh	r3, [r3, #12]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1b4:	441a      	add	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	899b      	ldrh	r3, [r3, #12]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1cc:	fb02 f200 	mul.w	r2, r2, r0
 800d1d0:	1a9b      	subs	r3, r3, r2
 800d1d2:	18ca      	adds	r2, r1, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3718      	adds	r7, #24
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b086      	sub	sp, #24
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f6:	3320      	adds	r3, #32
 800d1f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00b      	beq.n	800d21a <dir_next+0x38>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b04      	cmp	r3, #4
 800d208:	d102      	bne.n	800d210 <dir_next+0x2e>
 800d20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d20e:	e001      	b.n	800d214 <dir_next+0x32>
 800d210:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	429a      	cmp	r2, r3
 800d218:	d801      	bhi.n	800d21e <dir_next+0x3c>
 800d21a:	2304      	movs	r3, #4
 800d21c:	e0c3      	b.n	800d3a6 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	899b      	ldrh	r3, [r3, #12]
 800d222:	461a      	mov	r2, r3
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	fbb3 f1f2 	udiv	r1, r3, r2
 800d22a:	fb02 f201 	mul.w	r2, r2, r1
 800d22e:	1a9b      	subs	r3, r3, r2
 800d230:	2b00      	cmp	r3, #0
 800d232:	f040 80a5 	bne.w	800d380 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23a:	1c5a      	adds	r2, r3, #1
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10b      	bne.n	800d260 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	095b      	lsrs	r3, r3, #5
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	8912      	ldrh	r2, [r2, #8]
 800d250:	4293      	cmp	r3, r2
 800d252:	f0c0 8095 	bcc.w	800d380 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38
 800d25c:	2304      	movs	r3, #4
 800d25e:	e0a2      	b.n	800d3a6 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	899b      	ldrh	r3, [r3, #12]
 800d264:	461a      	mov	r2, r3
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	fbb3 f3f2 	udiv	r3, r3, r2
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	8952      	ldrh	r2, [r2, #10]
 800d270:	3a01      	subs	r2, #1
 800d272:	4013      	ands	r3, r2
 800d274:	2b00      	cmp	r3, #0
 800d276:	f040 8083 	bne.w	800d380 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d280:	4619      	mov	r1, r3
 800d282:	4610      	mov	r0, r2
 800d284:	f7ff f952 	bl	800c52c <get_fat>
 800d288:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d801      	bhi.n	800d294 <dir_next+0xb2>
 800d290:	2302      	movs	r3, #2
 800d292:	e088      	b.n	800d3a6 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29a:	d101      	bne.n	800d2a0 <dir_next+0xbe>
 800d29c:	2301      	movs	r3, #1
 800d29e:	e082      	b.n	800d3a6 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	697a      	ldr	r2, [r7, #20]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d360      	bcc.n	800d36c <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d104      	bne.n	800d2ba <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	639a      	str	r2, [r3, #56]	; 0x38
 800d2b6:	2304      	movs	r3, #4
 800d2b8:	e075      	b.n	800d3a6 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	4610      	mov	r0, r2
 800d2c4:	f7ff fdb4 	bl	800ce30 <create_chain>
 800d2c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <dir_next+0xf2>
 800d2d0:	2307      	movs	r3, #7
 800d2d2:	e068      	b.n	800d3a6 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d101      	bne.n	800d2de <dir_next+0xfc>
 800d2da:	2302      	movs	r3, #2
 800d2dc:	e063      	b.n	800d3a6 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e4:	d101      	bne.n	800d2ea <dir_next+0x108>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e05d      	b.n	800d3a6 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	79db      	ldrb	r3, [r3, #7]
 800d2ee:	f043 0304 	orr.w	r3, r3, #4
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f7ff f815 	bl	800c328 <sync_window>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d001      	beq.n	800d308 <dir_next+0x126>
 800d304:	2301      	movs	r3, #1
 800d306:	e04e      	b.n	800d3a6 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	899b      	ldrh	r3, [r3, #12]
 800d312:	461a      	mov	r2, r3
 800d314:	2100      	movs	r1, #0
 800d316:	f7fe fe3d 	bl	800bf94 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d31a:	2300      	movs	r3, #0
 800d31c:	613b      	str	r3, [r7, #16]
 800d31e:	6979      	ldr	r1, [r7, #20]
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f7ff f8e3 	bl	800c4ec <clust2sect>
 800d326:	4602      	mov	r2, r0
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	639a      	str	r2, [r3, #56]	; 0x38
 800d32c:	e012      	b.n	800d354 <dir_next+0x172>
						fs->wflag = 1;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2201      	movs	r2, #1
 800d332:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f7fe fff7 	bl	800c328 <sync_window>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <dir_next+0x162>
 800d340:	2301      	movs	r3, #1
 800d342:	e030      	b.n	800d3a6 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	3301      	adds	r3, #1
 800d348:	613b      	str	r3, [r7, #16]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	639a      	str	r2, [r3, #56]	; 0x38
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	895b      	ldrh	r3, [r3, #10]
 800d358:	461a      	mov	r2, r3
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d3e6      	bcc.n	800d32e <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	1ad2      	subs	r2, r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d372:	6979      	ldr	r1, [r7, #20]
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f7ff f8b9 	bl	800c4ec <clust2sect>
 800d37a:	4602      	mov	r2, r0
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	899b      	ldrh	r3, [r3, #12]
 800d390:	461a      	mov	r2, r3
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	fbb3 f0f2 	udiv	r0, r3, r2
 800d398:	fb02 f200 	mul.w	r2, r2, r0
 800d39c:	1a9b      	subs	r3, r3, r2
 800d39e:	18ca      	adds	r2, r1, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3718      	adds	r7, #24
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b086      	sub	sp, #24
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d3be:	2100      	movs	r1, #0
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7ff fe7a 	bl	800d0ba <dir_sdi>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d140      	bne.n	800d452 <dir_alloc+0xa4>
		n = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d8:	4619      	mov	r1, r3
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f7fe ffe8 	bl	800c3b0 <move_window>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d132      	bne.n	800d450 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	2b04      	cmp	r3, #4
 800d3f0:	d108      	bne.n	800d404 <dir_alloc+0x56>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	b25b      	sxtb	r3, r3
 800d3fa:	43db      	mvns	r3, r3
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	09db      	lsrs	r3, r3, #7
 800d400:	b2db      	uxtb	r3, r3
 800d402:	e00f      	b.n	800d424 <dir_alloc+0x76>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	2be5      	cmp	r3, #229	; 0xe5
 800d40c:	d004      	beq.n	800d418 <dir_alloc+0x6a>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <dir_alloc+0x6e>
 800d418:	2301      	movs	r3, #1
 800d41a:	e000      	b.n	800d41e <dir_alloc+0x70>
 800d41c:	2300      	movs	r3, #0
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b00      	cmp	r3, #0
 800d426:	d007      	beq.n	800d438 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	3301      	adds	r3, #1
 800d42c:	613b      	str	r3, [r7, #16]
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d102      	bne.n	800d43c <dir_alloc+0x8e>
 800d436:	e00c      	b.n	800d452 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d438:	2300      	movs	r3, #0
 800d43a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d43c:	2101      	movs	r1, #1
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff fecf 	bl	800d1e2 <dir_next>
 800d444:	4603      	mov	r3, r0
 800d446:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d448:	7dfb      	ldrb	r3, [r7, #23]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d0c2      	beq.n	800d3d4 <dir_alloc+0x26>
 800d44e:	e000      	b.n	800d452 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800d450:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d452:	7dfb      	ldrb	r3, [r7, #23]
 800d454:	2b04      	cmp	r3, #4
 800d456:	d101      	bne.n	800d45c <dir_alloc+0xae>
 800d458:	2307      	movs	r3, #7
 800d45a:	75fb      	strb	r3, [r7, #23]
	return res;
 800d45c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	331a      	adds	r3, #26
 800d474:	4618      	mov	r0, r3
 800d476:	f7fe fba7 	bl	800bbc8 <ld_word>
 800d47a:	4603      	mov	r3, r0
 800d47c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b03      	cmp	r3, #3
 800d484:	d109      	bne.n	800d49a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	3314      	adds	r3, #20
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe fb9c 	bl	800bbc8 <ld_word>
 800d490:	4603      	mov	r3, r0
 800d492:	041b      	lsls	r3, r3, #16
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	4313      	orrs	r3, r2
 800d498:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d49a:	68fb      	ldr	r3, [r7, #12]
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	331a      	adds	r3, #26
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	b292      	uxth	r2, r2
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fe fc7a 	bl	800bdb4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d109      	bne.n	800d4dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	f103 0214 	add.w	r2, r3, #20
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	0c1b      	lsrs	r3, r3, #16
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	4610      	mov	r0, r2
 800d4d8:	f7fe fc6c 	bl	800bdb4 <st_word>
	}
}
 800d4dc:	bf00      	nop
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d4e4:	b590      	push	{r4, r7, lr}
 800d4e6:	b087      	sub	sp, #28
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	331a      	adds	r3, #26
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe fb68 	bl	800bbc8 <ld_word>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <cmp_lfn+0x1e>
 800d4fe:	2300      	movs	r3, #0
 800d500:	e059      	b.n	800d5b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d50a:	1e5a      	subs	r2, r3, #1
 800d50c:	4613      	mov	r3, r2
 800d50e:	005b      	lsls	r3, r3, #1
 800d510:	4413      	add	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d518:	2301      	movs	r3, #1
 800d51a:	81fb      	strh	r3, [r7, #14]
 800d51c:	2300      	movs	r3, #0
 800d51e:	613b      	str	r3, [r7, #16]
 800d520:	e033      	b.n	800d58a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d522:	4a27      	ldr	r2, [pc, #156]	; (800d5c0 <cmp_lfn+0xdc>)
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	4413      	add	r3, r2
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	4413      	add	r3, r2
 800d530:	4618      	mov	r0, r3
 800d532:	f7fe fb49 	bl	800bbc8 <ld_word>
 800d536:	4603      	mov	r3, r0
 800d538:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d53a:	89fb      	ldrh	r3, [r7, #14]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d01a      	beq.n	800d576 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2bfe      	cmp	r3, #254	; 0xfe
 800d544:	d812      	bhi.n	800d56c <cmp_lfn+0x88>
 800d546:	89bb      	ldrh	r3, [r7, #12]
 800d548:	4618      	mov	r0, r3
 800d54a:	f003 f9f1 	bl	8010930 <ff_wtoupper>
 800d54e:	4603      	mov	r3, r0
 800d550:	461c      	mov	r4, r3
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	617a      	str	r2, [r7, #20]
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	4413      	add	r3, r2
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	4618      	mov	r0, r3
 800d562:	f003 f9e5 	bl	8010930 <ff_wtoupper>
 800d566:	4603      	mov	r3, r0
 800d568:	429c      	cmp	r4, r3
 800d56a:	d001      	beq.n	800d570 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d56c:	2300      	movs	r3, #0
 800d56e:	e022      	b.n	800d5b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d570:	89bb      	ldrh	r3, [r7, #12]
 800d572:	81fb      	strh	r3, [r7, #14]
 800d574:	e006      	b.n	800d584 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d576:	89bb      	ldrh	r3, [r7, #12]
 800d578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d001      	beq.n	800d584 <cmp_lfn+0xa0>
 800d580:	2300      	movs	r3, #0
 800d582:	e018      	b.n	800d5b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	3301      	adds	r3, #1
 800d588:	613b      	str	r3, [r7, #16]
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	2b0c      	cmp	r3, #12
 800d58e:	d9c8      	bls.n	800d522 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00b      	beq.n	800d5b4 <cmp_lfn+0xd0>
 800d59c:	89fb      	ldrh	r3, [r7, #14]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d008      	beq.n	800d5b4 <cmp_lfn+0xd0>
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <cmp_lfn+0xd0>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	e000      	b.n	800d5b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d5b4:	2301      	movs	r3, #1
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	371c      	adds	r7, #28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd90      	pop	{r4, r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	08012b18 	.word	0x08012b18

0800d5c4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	331a      	adds	r3, #26
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe faf8 	bl	800bbc8 <ld_word>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <pick_lfn+0x1e>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e04d      	b.n	800d67e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5ea:	1e5a      	subs	r2, r3, #1
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	005b      	lsls	r3, r3, #1
 800d5f0:	4413      	add	r3, r2
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	4413      	add	r3, r2
 800d5f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	81fb      	strh	r3, [r7, #14]
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	613b      	str	r3, [r7, #16]
 800d600:	e028      	b.n	800d654 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d602:	4a21      	ldr	r2, [pc, #132]	; (800d688 <pick_lfn+0xc4>)
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	4413      	add	r3, r2
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	4413      	add	r3, r2
 800d610:	4618      	mov	r0, r3
 800d612:	f7fe fad9 	bl	800bbc8 <ld_word>
 800d616:	4603      	mov	r3, r0
 800d618:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d61a:	89fb      	ldrh	r3, [r7, #14]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00f      	beq.n	800d640 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2bfe      	cmp	r3, #254	; 0xfe
 800d624:	d901      	bls.n	800d62a <pick_lfn+0x66>
 800d626:	2300      	movs	r3, #0
 800d628:	e029      	b.n	800d67e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d62a:	89bb      	ldrh	r3, [r7, #12]
 800d62c:	81fb      	strh	r3, [r7, #14]
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	1c5a      	adds	r2, r3, #1
 800d632:	617a      	str	r2, [r7, #20]
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	4413      	add	r3, r2
 800d63a:	89fa      	ldrh	r2, [r7, #14]
 800d63c:	801a      	strh	r2, [r3, #0]
 800d63e:	e006      	b.n	800d64e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d640:	89bb      	ldrh	r3, [r7, #12]
 800d642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d646:	4293      	cmp	r3, r2
 800d648:	d001      	beq.n	800d64e <pick_lfn+0x8a>
 800d64a:	2300      	movs	r3, #0
 800d64c:	e017      	b.n	800d67e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	3301      	adds	r3, #1
 800d652:	613b      	str	r3, [r7, #16]
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	2b0c      	cmp	r3, #12
 800d658:	d9d3      	bls.n	800d602 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00a      	beq.n	800d67c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2bfe      	cmp	r3, #254	; 0xfe
 800d66a:	d901      	bls.n	800d670 <pick_lfn+0xac>
 800d66c:	2300      	movs	r3, #0
 800d66e:	e006      	b.n	800d67e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	4413      	add	r3, r2
 800d678:	2200      	movs	r2, #0
 800d67a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d67c:	2301      	movs	r3, #1
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	08012b18 	.word	0x08012b18

0800d68c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b088      	sub	sp, #32
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	4611      	mov	r1, r2
 800d698:	461a      	mov	r2, r3
 800d69a:	460b      	mov	r3, r1
 800d69c:	71fb      	strb	r3, [r7, #7]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	330d      	adds	r3, #13
 800d6a6:	79ba      	ldrb	r2, [r7, #6]
 800d6a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	330b      	adds	r3, #11
 800d6ae:	220f      	movs	r2, #15
 800d6b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	330c      	adds	r3, #12
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	331a      	adds	r3, #26
 800d6be:	2100      	movs	r1, #0
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe fb77 	bl	800bdb4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	1e5a      	subs	r2, r3, #1
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	005b      	lsls	r3, r3, #1
 800d6ce:	4413      	add	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	4413      	add	r3, r2
 800d6d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	82fb      	strh	r3, [r7, #22]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d6de:	8afb      	ldrh	r3, [r7, #22]
 800d6e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d007      	beq.n	800d6f8 <put_lfn+0x6c>
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	61fa      	str	r2, [r7, #28]
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	881b      	ldrh	r3, [r3, #0]
 800d6f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d6f8:	4a17      	ldr	r2, [pc, #92]	; (800d758 <put_lfn+0xcc>)
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	4413      	add	r3, r2
 800d706:	8afa      	ldrh	r2, [r7, #22]
 800d708:	4611      	mov	r1, r2
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fe fb52 	bl	800bdb4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d710:	8afb      	ldrh	r3, [r7, #22]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d102      	bne.n	800d71c <put_lfn+0x90>
 800d716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d71a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	3301      	adds	r3, #1
 800d720:	61bb      	str	r3, [r7, #24]
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	2b0c      	cmp	r3, #12
 800d726:	d9da      	bls.n	800d6de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d728:	8afb      	ldrh	r3, [r7, #22]
 800d72a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d72e:	4293      	cmp	r3, r2
 800d730:	d006      	beq.n	800d740 <put_lfn+0xb4>
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	4413      	add	r3, r2
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d103      	bne.n	800d748 <put_lfn+0xbc>
 800d740:	79fb      	ldrb	r3, [r7, #7]
 800d742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d746:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	79fa      	ldrb	r2, [r7, #7]
 800d74c:	701a      	strb	r2, [r3, #0]
}
 800d74e:	bf00      	nop
 800d750:	3720      	adds	r7, #32
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	08012b18 	.word	0x08012b18

0800d75c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08c      	sub	sp, #48	; 0x30
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
 800d768:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d76a:	220b      	movs	r2, #11
 800d76c:	68b9      	ldr	r1, [r7, #8]
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f7fe fbef 	bl	800bf52 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	2b05      	cmp	r3, #5
 800d778:	d92b      	bls.n	800d7d2 <gen_numname+0x76>
		sr = seq;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d77e:	e022      	b.n	800d7c6 <gen_numname+0x6a>
			wc = *lfn++;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	1c9a      	adds	r2, r3, #2
 800d784:	607a      	str	r2, [r7, #4]
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d78a:	2300      	movs	r3, #0
 800d78c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d78e:	e017      	b.n	800d7c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	005a      	lsls	r2, r3, #1
 800d794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d796:	f003 0301 	and.w	r3, r3, #1
 800d79a:	4413      	add	r3, r2
 800d79c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d79e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7a0:	085b      	lsrs	r3, r3, #1
 800d7a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d005      	beq.n	800d7ba <gen_numname+0x5e>
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d7b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d7b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7bc:	3301      	adds	r3, #1
 800d7be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	2b0f      	cmp	r3, #15
 800d7c4:	d9e4      	bls.n	800d790 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1d8      	bne.n	800d780 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d7d2:	2307      	movs	r3, #7
 800d7d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	f003 030f 	and.w	r3, r3, #15
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	3330      	adds	r3, #48	; 0x30
 800d7e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d7e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ea:	2b39      	cmp	r3, #57	; 0x39
 800d7ec:	d904      	bls.n	800d7f8 <gen_numname+0x9c>
 800d7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7f2:	3307      	adds	r3, #7
 800d7f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	1e5a      	subs	r2, r3, #1
 800d7fc:	62ba      	str	r2, [r7, #40]	; 0x28
 800d7fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d802:	4413      	add	r3, r2
 800d804:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d808:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	091b      	lsrs	r3, r3, #4
 800d810:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1de      	bne.n	800d7d6 <gen_numname+0x7a>
	ns[i] = '~';
 800d818:	f107 0214 	add.w	r2, r7, #20
 800d81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81e:	4413      	add	r3, r2
 800d820:	227e      	movs	r2, #126	; 0x7e
 800d822:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d824:	2300      	movs	r3, #0
 800d826:	627b      	str	r3, [r7, #36]	; 0x24
 800d828:	e002      	b.n	800d830 <gen_numname+0xd4>
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	3301      	adds	r3, #1
 800d82e:	627b      	str	r3, [r7, #36]	; 0x24
 800d830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d834:	429a      	cmp	r2, r3
 800d836:	d205      	bcs.n	800d844 <gen_numname+0xe8>
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	4413      	add	r3, r2
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	2b20      	cmp	r3, #32
 800d842:	d1f2      	bne.n	800d82a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	2b07      	cmp	r3, #7
 800d848:	d808      	bhi.n	800d85c <gen_numname+0x100>
 800d84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84c:	1c5a      	adds	r2, r3, #1
 800d84e:	62ba      	str	r2, [r7, #40]	; 0x28
 800d850:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d854:	4413      	add	r3, r2
 800d856:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d85a:	e000      	b.n	800d85e <gen_numname+0x102>
 800d85c:	2120      	movs	r1, #32
 800d85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d860:	1c5a      	adds	r2, r3, #1
 800d862:	627a      	str	r2, [r7, #36]	; 0x24
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	4413      	add	r3, r2
 800d868:	460a      	mov	r2, r1
 800d86a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	2b07      	cmp	r3, #7
 800d870:	d9e8      	bls.n	800d844 <gen_numname+0xe8>
}
 800d872:	bf00      	nop
 800d874:	bf00      	nop
 800d876:	3730      	adds	r7, #48	; 0x30
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d888:	230b      	movs	r3, #11
 800d88a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	0852      	lsrs	r2, r2, #1
 800d892:	01db      	lsls	r3, r3, #7
 800d894:	4313      	orrs	r3, r2
 800d896:	b2da      	uxtb	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	1c59      	adds	r1, r3, #1
 800d89c:	6079      	str	r1, [r7, #4]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	60bb      	str	r3, [r7, #8]
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1ed      	bne.n	800d88c <sum_sfn+0x10>
	return sum;
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800d8be:	b480      	push	{r7}
 800d8c0:	b087      	sub	sp, #28
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	015b      	lsls	r3, r3, #5
 800d8d0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	827b      	strh	r3, [r7, #18]
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	e018      	b.n	800d90e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d103      	bne.n	800d8ea <xdir_sum+0x2c>
			i++;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	617b      	str	r3, [r7, #20]
 800d8e8:	e00e      	b.n	800d908 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d8ea:	8a7b      	ldrh	r3, [r7, #18]
 800d8ec:	03db      	lsls	r3, r3, #15
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	8a7b      	ldrh	r3, [r7, #18]
 800d8f2:	085b      	lsrs	r3, r3, #1
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	4413      	add	r3, r2
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	440b      	add	r3, r1
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	b29b      	uxth	r3, r3
 800d904:	4413      	add	r3, r2
 800d906:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	3301      	adds	r3, #1
 800d90c:	617b      	str	r3, [r7, #20]
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	429a      	cmp	r2, r3
 800d914:	d3e2      	bcc.n	800d8dc <xdir_sum+0x1e>
		}
	}
	return sum;
 800d916:	8a7b      	ldrh	r3, [r7, #18]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	371c      	adds	r7, #28
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800d930:	e01f      	b.n	800d972 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800d932:	89bb      	ldrh	r3, [r7, #12]
 800d934:	4618      	mov	r0, r3
 800d936:	f002 fffb 	bl	8010930 <ff_wtoupper>
 800d93a:	4603      	mov	r3, r0
 800d93c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d93e:	89fb      	ldrh	r3, [r7, #14]
 800d940:	03db      	lsls	r3, r3, #15
 800d942:	b29a      	uxth	r2, r3
 800d944:	89fb      	ldrh	r3, [r7, #14]
 800d946:	085b      	lsrs	r3, r3, #1
 800d948:	b29b      	uxth	r3, r3
 800d94a:	4413      	add	r3, r2
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	89bb      	ldrh	r3, [r7, #12]
 800d950:	b2db      	uxtb	r3, r3
 800d952:	b29b      	uxth	r3, r3
 800d954:	4413      	add	r3, r2
 800d956:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d958:	89fb      	ldrh	r3, [r7, #14]
 800d95a:	03db      	lsls	r3, r3, #15
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	89fb      	ldrh	r3, [r7, #14]
 800d960:	085b      	lsrs	r3, r3, #1
 800d962:	b29b      	uxth	r3, r3
 800d964:	4413      	add	r3, r2
 800d966:	b29a      	uxth	r2, r3
 800d968:	89bb      	ldrh	r3, [r7, #12]
 800d96a:	0a1b      	lsrs	r3, r3, #8
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	4413      	add	r3, r2
 800d970:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	1c9a      	adds	r2, r3, #2
 800d976:	607a      	str	r2, [r7, #4]
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	81bb      	strh	r3, [r7, #12]
 800d97c:	89bb      	ldrh	r3, [r7, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1d7      	bne.n	800d932 <xname_sum+0xe>
	}
	return sum;
 800d982:	89fb      	ldrh	r3, [r7, #14]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800d99a:	2340      	movs	r3, #64	; 0x40
 800d99c:	613b      	str	r3, [r7, #16]
 800d99e:	2300      	movs	r3, #0
 800d9a0:	60fb      	str	r3, [r7, #12]
 800d9a2:	e02c      	b.n	800d9fe <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	f003 031f 	and.w	r3, r3, #31
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d102      	bne.n	800d9b4 <get_xdir_info+0x28>
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	3302      	adds	r3, #2
 800d9b2:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fe f904 	bl	800bbc8 <ld_word>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f002 ff77 	bl	80108b8 <ff_convert>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800d9ce:	897b      	ldrh	r3, [r7, #10]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <get_xdir_info+0x4e>
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	2bfe      	cmp	r3, #254	; 0xfe
 800d9d8:	d902      	bls.n	800d9e0 <get_xdir_info+0x54>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	617b      	str	r3, [r7, #20]
 800d9de:	e015      	b.n	800da0c <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	617a      	str	r2, [r7, #20]
 800d9e6:	897a      	ldrh	r2, [r7, #10]
 800d9e8:	b2d1      	uxtb	r1, r2
 800d9ea:	683a      	ldr	r2, [r7, #0]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	460a      	mov	r2, r1
 800d9f0:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	3302      	adds	r3, #2
 800d9f6:	613b      	str	r3, [r7, #16]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	3323      	adds	r3, #35	; 0x23
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	461a      	mov	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	4293      	cmp	r3, r2
 800da0a:	d3cb      	bcc.n	800d9a4 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d106      	bne.n	800da20 <get_xdir_info+0x94>
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	1c5a      	adds	r2, r3, #1
 800da16:	617a      	str	r2, [r7, #20]
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	4413      	add	r3, r2
 800da1c:	223f      	movs	r2, #63	; 0x3f
 800da1e:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	4413      	add	r3, r2
 800da26:	331a      	adds	r3, #26
 800da28:	2200      	movs	r2, #0
 800da2a:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2200      	movs	r2, #0
 800da30:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	791a      	ldrb	r2, [r3, #4]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	7b1b      	ldrb	r3, [r3, #12]
 800da3e:	f003 0310 	and.w	r3, r3, #16
 800da42:	2b00      	cmp	r3, #0
 800da44:	d107      	bne.n	800da56 <get_xdir_info+0xca>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	3338      	adds	r3, #56	; 0x38
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe f8f7 	bl	800bc3e <ld_qword>
 800da50:	4602      	mov	r2, r0
 800da52:	460b      	mov	r3, r1
 800da54:	e003      	b.n	800da5e <get_xdir_info+0xd2>
 800da56:	f04f 0200 	mov.w	r2, #0
 800da5a:	f04f 0300 	mov.w	r3, #0
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	330c      	adds	r3, #12
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe f8ad 	bl	800bbc8 <ld_word>
 800da6e:	4603      	mov	r3, r0
 800da70:	461a      	mov	r2, r3
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	330e      	adds	r3, #14
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe f8a4 	bl	800bbc8 <ld_word>
 800da80:	4603      	mov	r3, r0
 800da82:	461a      	mov	r2, r3
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	811a      	strh	r2, [r3, #8]
}
 800da88:	bf00      	nop
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800da90:	b590      	push	{r4, r7, lr}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa8:	4619      	mov	r1, r3
 800daaa:	4610      	mov	r0, r2
 800daac:	f7fe fc80 	bl	800c3b0 <move_window>
 800dab0:	4603      	mov	r3, r0
 800dab2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d001      	beq.n	800dabe <load_xdir+0x2e>
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	e09f      	b.n	800dbfe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2b85      	cmp	r3, #133	; 0x85
 800dac6:	d001      	beq.n	800dacc <load_xdir+0x3c>
 800dac8:	2302      	movs	r3, #2
 800daca:	e098      	b.n	800dbfe <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad0:	2220      	movs	r2, #32
 800dad2:	4619      	mov	r1, r3
 800dad4:	6938      	ldr	r0, [r7, #16]
 800dad6:	f7fe fa3c 	bl	800bf52 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	3301      	adds	r3, #1
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	3301      	adds	r3, #1
 800dae2:	015b      	lsls	r3, r3, #5
 800dae4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2b5f      	cmp	r3, #95	; 0x5f
 800daea:	d903      	bls.n	800daf4 <load_xdir+0x64>
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800daf2:	d901      	bls.n	800daf8 <load_xdir+0x68>
 800daf4:	2302      	movs	r3, #2
 800daf6:	e082      	b.n	800dbfe <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800daf8:	2100      	movs	r1, #0
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7ff fb71 	bl	800d1e2 <dir_next>
 800db00:	4603      	mov	r3, r0
 800db02:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800db04:	7bfb      	ldrb	r3, [r7, #15]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <load_xdir+0x7e>
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	e077      	b.n	800dbfe <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db16:	4619      	mov	r1, r3
 800db18:	4610      	mov	r0, r2
 800db1a:	f7fe fc49 	bl	800c3b0 <move_window>
 800db1e:	4603      	mov	r3, r0
 800db20:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800db22:	7bfb      	ldrb	r3, [r7, #15]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <load_xdir+0x9c>
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	e068      	b.n	800dbfe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2bc0      	cmp	r3, #192	; 0xc0
 800db34:	d001      	beq.n	800db3a <load_xdir+0xaa>
 800db36:	2302      	movs	r3, #2
 800db38:	e061      	b.n	800dbfe <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	f103 0020 	add.w	r0, r3, #32
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db44:	2220      	movs	r2, #32
 800db46:	4619      	mov	r1, r3
 800db48:	f7fe fa03 	bl	800bf52 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	3323      	adds	r3, #35	; 0x23
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	332c      	adds	r3, #44	; 0x2c
 800db54:	4a2c      	ldr	r2, [pc, #176]	; (800dc08 <load_xdir+0x178>)
 800db56:	fba2 2303 	umull	r2, r3, r2, r3
 800db5a:	08db      	lsrs	r3, r3, #3
 800db5c:	015b      	lsls	r3, r3, #5
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	429a      	cmp	r2, r3
 800db62:	d201      	bcs.n	800db68 <load_xdir+0xd8>
 800db64:	2302      	movs	r3, #2
 800db66:	e04a      	b.n	800dbfe <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800db68:	2340      	movs	r3, #64	; 0x40
 800db6a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800db6c:	2100      	movs	r1, #0
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff fb37 	bl	800d1e2 <dir_next>
 800db74:	4603      	mov	r3, r0
 800db76:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800db78:	7bfb      	ldrb	r3, [r7, #15]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d001      	beq.n	800db82 <load_xdir+0xf2>
 800db7e:	7bfb      	ldrb	r3, [r7, #15]
 800db80:	e03d      	b.n	800dbfe <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8a:	4619      	mov	r1, r3
 800db8c:	4610      	mov	r0, r2
 800db8e:	f7fe fc0f 	bl	800c3b0 <move_window>
 800db92:	4603      	mov	r3, r0
 800db94:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <load_xdir+0x110>
 800db9c:	7bfb      	ldrb	r3, [r7, #15]
 800db9e:	e02e      	b.n	800dbfe <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	2bc1      	cmp	r3, #193	; 0xc1
 800dba8:	d001      	beq.n	800dbae <load_xdir+0x11e>
 800dbaa:	2302      	movs	r3, #2
 800dbac:	e027      	b.n	800dbfe <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800dbb4:	d208      	bcs.n	800dbc8 <load_xdir+0x138>
 800dbb6:	693a      	ldr	r2, [r7, #16]
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	18d0      	adds	r0, r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbc0:	2220      	movs	r2, #32
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	f7fe f9c5 	bl	800bf52 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	3320      	adds	r3, #32
 800dbcc:	617b      	str	r3, [r7, #20]
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d3ca      	bcc.n	800db6c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800dbdc:	d80e      	bhi.n	800dbfc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800dbde:	6938      	ldr	r0, [r7, #16]
 800dbe0:	f7ff fe6d 	bl	800d8be <xdir_sum>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	461c      	mov	r4, r3
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	3302      	adds	r3, #2
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fd ffeb 	bl	800bbc8 <ld_word>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	429c      	cmp	r4, r3
 800dbf6:	d001      	beq.n	800dbfc <load_xdir+0x16c>
 800dbf8:	2302      	movs	r3, #2
 800dbfa:	e000      	b.n	800dbfe <load_xdir+0x16e>
	}
	return FR_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	371c      	adds	r7, #28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd90      	pop	{r4, r7, pc}
 800dc06:	bf00      	nop
 800dc08:	88888889 	.word	0x88888889

0800dc0c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800dc0c:	b5b0      	push	{r4, r5, r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	6808      	ldr	r0, [r1, #0]
 800dc1a:	6879      	ldr	r1, [r7, #4]
 800dc1c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	6a08      	ldr	r0, [r1, #32]
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800dc2a:	b2c8      	uxtb	r0, r1
 800dc2c:	6879      	ldr	r1, [r7, #4]
 800dc2e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800dc30:	6839      	ldr	r1, [r7, #0]
 800dc32:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800dc34:	4608      	mov	r0, r1
 800dc36:	f04f 0100 	mov.w	r1, #0
 800dc3a:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800dc3e:	f04f 0500 	mov.w	r5, #0
 800dc42:	ea00 0204 	and.w	r2, r0, r4
 800dc46:	ea01 0305 	and.w	r3, r1, r5
 800dc4a:	6879      	ldr	r1, [r7, #4]
 800dc4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7ff fa2b 	bl	800d0ba <dir_sdi>
 800dc64:	4603      	mov	r3, r0
 800dc66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d104      	bne.n	800dc78 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7ff ff0e 	bl	800da90 <load_xdir>
 800dc74:	4603      	mov	r3, r0
 800dc76:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bdb0      	pop	{r4, r5, r7, pc}

0800dc82 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800dc82:	b590      	push	{r4, r7, lr}
 800dc84:	b087      	sub	sp, #28
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	695b      	ldr	r3, [r3, #20]
 800dc90:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	1c9c      	adds	r4, r3, #2
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7ff fe11 	bl	800d8be <xdir_sum>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4620      	mov	r0, r4
 800dca2:	f7fe f887 	bl	800bdb4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	3301      	adds	r3, #1
 800dcae:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff f9ff 	bl	800d0ba <dir_sdi>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800dcc0:	e026      	b.n	800dd10 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcca:	4619      	mov	r1, r3
 800dccc:	4610      	mov	r0, r2
 800dcce:	f7fe fb6f 	bl	800c3b0 <move_window>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d11d      	bne.n	800dd18 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dce0:	2220      	movs	r2, #32
 800dce2:	68f9      	ldr	r1, [r7, #12]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fe f934 	bl	800bf52 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	613b      	str	r3, [r7, #16]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00e      	beq.n	800dd1c <store_xdir+0x9a>
		dirb += SZDIRE;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	3320      	adds	r3, #32
 800dd02:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800dd04:	2100      	movs	r1, #0
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7ff fa6b 	bl	800d1e2 <dir_next>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d0d5      	beq.n	800dcc2 <store_xdir+0x40>
 800dd16:	e002      	b.n	800dd1e <store_xdir+0x9c>
		if (res != FR_OK) break;
 800dd18:	bf00      	nop
 800dd1a:	e000      	b.n	800dd1e <store_xdir+0x9c>
		if (--nent == 0) break;
 800dd1c:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800dd1e:	7dfb      	ldrb	r3, [r7, #23]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <store_xdir+0xa8>
 800dd24:	7dfb      	ldrb	r3, [r7, #23]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d101      	bne.n	800dd2e <store_xdir+0xac>
 800dd2a:	7dfb      	ldrb	r3, [r7, #23]
 800dd2c:	e000      	b.n	800dd30 <store_xdir+0xae>
 800dd2e:	2302      	movs	r3, #2
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	371c      	adds	r7, #28
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd90      	pop	{r4, r7, pc}

0800dd38 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800dd38:	b590      	push	{r4, r7, lr}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800dd42:	2240      	movs	r2, #64	; 0x40
 800dd44:	2100      	movs	r1, #0
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7fe f924 	bl	800bf94 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2285      	movs	r2, #133	; 0x85
 800dd50:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	3320      	adds	r3, #32
 800dd56:	22c0      	movs	r2, #192	; 0xc0
 800dd58:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	72bb      	strb	r3, [r7, #10]
 800dd5e:	2301      	movs	r3, #1
 800dd60:	72fb      	strb	r3, [r7, #11]
 800dd62:	2301      	movs	r3, #1
 800dd64:	813b      	strh	r3, [r7, #8]
 800dd66:	2340      	movs	r3, #64	; 0x40
 800dd68:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	60fa      	str	r2, [r7, #12]
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	4413      	add	r3, r2
 800dd74:	22c1      	movs	r2, #193	; 0xc1
 800dd76:	701a      	strb	r2, [r3, #0]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	1c5a      	adds	r2, r3, #1
 800dd7c:	60fa      	str	r2, [r7, #12]
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	4413      	add	r3, r2
 800dd82:	2200      	movs	r2, #0
 800dd84:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800dd86:	893b      	ldrh	r3, [r7, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00b      	beq.n	800dda4 <create_xdir+0x6c>
 800dd8c:	7abb      	ldrb	r3, [r7, #10]
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	4413      	add	r3, r2
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	813b      	strh	r3, [r7, #8]
 800dd98:	893b      	ldrh	r3, [r7, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d002      	beq.n	800dda4 <create_xdir+0x6c>
 800dd9e:	7abb      	ldrb	r3, [r7, #10]
 800dda0:	3301      	adds	r3, #1
 800dda2:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	4413      	add	r3, r2
 800ddaa:	893a      	ldrh	r2, [r7, #8]
 800ddac:	4611      	mov	r1, r2
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe f800 	bl	800bdb4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	3302      	adds	r3, #2
 800ddb8:	60fb      	str	r3, [r7, #12]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f003 031f 	and.w	r3, r3, #31
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d1e0      	bne.n	800dd86 <create_xdir+0x4e>
		nb++;
 800ddc4:	7afb      	ldrb	r3, [r7, #11]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800ddca:	7abb      	ldrb	r3, [r7, #10]
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1c8      	bne.n	800dd6a <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	3323      	adds	r3, #35	; 0x23
 800dddc:	7aba      	ldrb	r2, [r7, #10]
 800ddde:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3301      	adds	r3, #1
 800dde4:	7afa      	ldrb	r2, [r7, #11]
 800dde6:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800ddee:	6838      	ldr	r0, [r7, #0]
 800ddf0:	f7ff fd98 	bl	800d924 <xname_sum>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f7fd ffdb 	bl	800bdb4 <st_word>
}
 800ddfe:	bf00      	nop
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	bd90      	pop	{r4, r7, pc}

0800de06 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b086      	sub	sp, #24
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800de10:	2304      	movs	r3, #4
 800de12:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800de1a:	23ff      	movs	r3, #255	; 0xff
 800de1c:	757b      	strb	r3, [r7, #21]
 800de1e:	23ff      	movs	r3, #255	; 0xff
 800de20:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800de22:	e09f      	b.n	800df64 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de28:	4619      	mov	r1, r3
 800de2a:	6938      	ldr	r0, [r7, #16]
 800de2c:	f7fe fac0 	bl	800c3b0 <move_window>
 800de30:	4603      	mov	r3, r0
 800de32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800de34:	7dfb      	ldrb	r3, [r7, #23]
 800de36:	2b00      	cmp	r3, #0
 800de38:	f040 809a 	bne.w	800df70 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800de44:	7dbb      	ldrb	r3, [r7, #22]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d102      	bne.n	800de50 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800de4a:	2304      	movs	r3, #4
 800de4c:	75fb      	strb	r3, [r7, #23]
 800de4e:	e096      	b.n	800df7e <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	2b04      	cmp	r3, #4
 800de56:	d118      	bne.n	800de8a <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800de58:	7dbb      	ldrb	r3, [r7, #22]
 800de5a:	2b85      	cmp	r3, #133	; 0x85
 800de5c:	d179      	bne.n	800df52 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7ff fe12 	bl	800da90 <load_xdir>
 800de6c:	4603      	mov	r3, r0
 800de6e:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800de70:	7dfb      	ldrb	r3, [r7, #23]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d17e      	bne.n	800df74 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	3304      	adds	r3, #4
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de82:	b2da      	uxtb	r2, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	719a      	strb	r2, [r3, #6]
					}
					break;
 800de88:	e074      	b.n	800df74 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de8e:	330b      	adds	r3, #11
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de96:	73fb      	strb	r3, [r7, #15]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7bfa      	ldrb	r2, [r7, #15]
 800de9c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800de9e:	7dbb      	ldrb	r3, [r7, #22]
 800dea0:	2be5      	cmp	r3, #229	; 0xe5
 800dea2:	d00e      	beq.n	800dec2 <dir_read+0xbc>
 800dea4:	7dbb      	ldrb	r3, [r7, #22]
 800dea6:	2b2e      	cmp	r3, #46	; 0x2e
 800dea8:	d00b      	beq.n	800dec2 <dir_read+0xbc>
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
 800deac:	f023 0320 	bic.w	r3, r3, #32
 800deb0:	2b08      	cmp	r3, #8
 800deb2:	bf0c      	ite	eq
 800deb4:	2301      	moveq	r3, #1
 800deb6:	2300      	movne	r3, #0
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	461a      	mov	r2, r3
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	4293      	cmp	r3, r2
 800dec0:	d002      	beq.n	800dec8 <dir_read+0xc2>
				ord = 0xFF;
 800dec2:	23ff      	movs	r3, #255	; 0xff
 800dec4:	757b      	strb	r3, [r7, #21]
 800dec6:	e044      	b.n	800df52 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
 800deca:	2b0f      	cmp	r3, #15
 800decc:	d12f      	bne.n	800df2e <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800dece:	7dbb      	ldrb	r3, [r7, #22]
 800ded0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d00d      	beq.n	800def4 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dedc:	7b5b      	ldrb	r3, [r3, #13]
 800dede:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800dee0:	7dbb      	ldrb	r3, [r7, #22]
 800dee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dee6:	75bb      	strb	r3, [r7, #22]
 800dee8:	7dbb      	ldrb	r3, [r7, #22]
 800deea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800def4:	7dba      	ldrb	r2, [r7, #22]
 800def6:	7d7b      	ldrb	r3, [r7, #21]
 800def8:	429a      	cmp	r2, r3
 800defa:	d115      	bne.n	800df28 <dir_read+0x122>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df00:	330d      	adds	r3, #13
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	7d3a      	ldrb	r2, [r7, #20]
 800df06:	429a      	cmp	r2, r3
 800df08:	d10e      	bne.n	800df28 <dir_read+0x122>
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	691a      	ldr	r2, [r3, #16]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df12:	4619      	mov	r1, r3
 800df14:	4610      	mov	r0, r2
 800df16:	f7ff fb55 	bl	800d5c4 <pick_lfn>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d003      	beq.n	800df28 <dir_read+0x122>
 800df20:	7d7b      	ldrb	r3, [r7, #21]
 800df22:	3b01      	subs	r3, #1
 800df24:	b2db      	uxtb	r3, r3
 800df26:	e000      	b.n	800df2a <dir_read+0x124>
 800df28:	23ff      	movs	r3, #255	; 0xff
 800df2a:	757b      	strb	r3, [r7, #21]
 800df2c:	e011      	b.n	800df52 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800df2e:	7d7b      	ldrb	r3, [r7, #21]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d109      	bne.n	800df48 <dir_read+0x142>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff fc9f 	bl	800d87c <sum_sfn>
 800df3e:	4603      	mov	r3, r0
 800df40:	461a      	mov	r2, r3
 800df42:	7d3b      	ldrb	r3, [r7, #20]
 800df44:	4293      	cmp	r3, r2
 800df46:	d017      	beq.n	800df78 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f04f 32ff 	mov.w	r2, #4294967295
 800df4e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800df50:	e012      	b.n	800df78 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800df52:	2100      	movs	r1, #0
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff f944 	bl	800d1e2 <dir_next>
 800df5a:	4603      	mov	r3, r0
 800df5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800df5e:	7dfb      	ldrb	r3, [r7, #23]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10b      	bne.n	800df7c <dir_read+0x176>
	while (dp->sect) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f47f af5b 	bne.w	800de24 <dir_read+0x1e>
 800df6e:	e006      	b.n	800df7e <dir_read+0x178>
		if (res != FR_OK) break;
 800df70:	bf00      	nop
 800df72:	e004      	b.n	800df7e <dir_read+0x178>
					break;
 800df74:	bf00      	nop
 800df76:	e002      	b.n	800df7e <dir_read+0x178>
					break;
 800df78:	bf00      	nop
 800df7a:	e000      	b.n	800df7e <dir_read+0x178>
		if (res != FR_OK) break;
 800df7c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800df7e:	7dfb      	ldrb	r3, [r7, #23]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d002      	beq.n	800df8a <dir_read+0x184>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800df8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3718      	adds	r7, #24
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800df94:	b590      	push	{r4, r7, lr}
 800df96:	b089      	sub	sp, #36	; 0x24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f7ff f888 	bl	800d0ba <dir_sdi>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800dfae:	7ffb      	ldrb	r3, [r7, #31]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <dir_find+0x24>
 800dfb4:	7ffb      	ldrb	r3, [r7, #31]
 800dfb6:	e112      	b.n	800e1de <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b04      	cmp	r3, #4
 800dfbe:	d164      	bne.n	800e08a <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	691b      	ldr	r3, [r3, #16]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7ff fcad 	bl	800d924 <xname_sum>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800dfce:	e04f      	b.n	800e070 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	695b      	ldr	r3, [r3, #20]
 800dfd4:	3324      	adds	r3, #36	; 0x24
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fd fdf6 	bl	800bbc8 <ld_word>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	461a      	mov	r2, r3
 800dfe0:	893b      	ldrh	r3, [r7, #8]
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d000      	beq.n	800dfe8 <dir_find+0x54>
 800dfe6:	e043      	b.n	800e070 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800dff0:	76fb      	strb	r3, [r7, #27]
 800dff2:	2340      	movs	r3, #64	; 0x40
 800dff4:	617b      	str	r3, [r7, #20]
 800dff6:	2300      	movs	r3, #0
 800dff8:	613b      	str	r3, [r7, #16]
 800dffa:	e029      	b.n	800e050 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	f003 031f 	and.w	r3, r3, #31
 800e002:	2b00      	cmp	r3, #0
 800e004:	d102      	bne.n	800e00c <dir_find+0x78>
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	3302      	adds	r3, #2
 800e00a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	695a      	ldr	r2, [r3, #20]
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	4413      	add	r3, r2
 800e014:	4618      	mov	r0, r3
 800e016:	f7fd fdd7 	bl	800bbc8 <ld_word>
 800e01a:	4603      	mov	r3, r0
 800e01c:	4618      	mov	r0, r3
 800e01e:	f002 fc87 	bl	8010930 <ff_wtoupper>
 800e022:	4603      	mov	r3, r0
 800e024:	461c      	mov	r4, r3
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	691a      	ldr	r2, [r3, #16]
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	005b      	lsls	r3, r3, #1
 800e02e:	4413      	add	r3, r2
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	4618      	mov	r0, r3
 800e034:	f002 fc7c 	bl	8010930 <ff_wtoupper>
 800e038:	4603      	mov	r3, r0
 800e03a:	429c      	cmp	r4, r3
 800e03c:	d10c      	bne.n	800e058 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e03e:	7efb      	ldrb	r3, [r7, #27]
 800e040:	3b01      	subs	r3, #1
 800e042:	76fb      	strb	r3, [r7, #27]
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	3302      	adds	r3, #2
 800e048:	617b      	str	r3, [r7, #20]
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	3301      	adds	r3, #1
 800e04e:	613b      	str	r3, [r7, #16]
 800e050:	7efb      	ldrb	r3, [r7, #27]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1d2      	bne.n	800dffc <dir_find+0x68>
 800e056:	e000      	b.n	800e05a <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e058:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e05a:	7efb      	ldrb	r3, [r7, #27]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d107      	bne.n	800e070 <dir_find+0xdc>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	691a      	ldr	r2, [r3, #16]
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	881b      	ldrh	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d009      	beq.n	800e084 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e070:	2100      	movs	r1, #0
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff fec7 	bl	800de06 <dir_read>
 800e078:	4603      	mov	r3, r0
 800e07a:	77fb      	strb	r3, [r7, #31]
 800e07c:	7ffb      	ldrb	r3, [r7, #31]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d0a6      	beq.n	800dfd0 <dir_find+0x3c>
 800e082:	e000      	b.n	800e086 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e084:	bf00      	nop
		}
		return res;
 800e086:	7ffb      	ldrb	r3, [r7, #31]
 800e088:	e0a9      	b.n	800e1de <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e08a:	23ff      	movs	r3, #255	; 0xff
 800e08c:	773b      	strb	r3, [r7, #28]
 800e08e:	7f3b      	ldrb	r3, [r7, #28]
 800e090:	777b      	strb	r3, [r7, #29]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f04f 32ff 	mov.w	r2, #4294967295
 800e098:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e09e:	4619      	mov	r1, r3
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f7fe f985 	bl	800c3b0 <move_window>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800e0aa:	7ffb      	ldrb	r3, [r7, #31]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f040 8090 	bne.w	800e1d2 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e0ba:	7fbb      	ldrb	r3, [r7, #30]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d102      	bne.n	800e0c6 <dir_find+0x132>
 800e0c0:	2304      	movs	r3, #4
 800e0c2:	77fb      	strb	r3, [r7, #31]
 800e0c4:	e08a      	b.n	800e1dc <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ca:	330b      	adds	r3, #11
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0d2:	72fb      	strb	r3, [r7, #11]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	7afa      	ldrb	r2, [r7, #11]
 800e0d8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e0da:	7fbb      	ldrb	r3, [r7, #30]
 800e0dc:	2be5      	cmp	r3, #229	; 0xe5
 800e0de:	d007      	beq.n	800e0f0 <dir_find+0x15c>
 800e0e0:	7afb      	ldrb	r3, [r7, #11]
 800e0e2:	f003 0308 	and.w	r3, r3, #8
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d009      	beq.n	800e0fe <dir_find+0x16a>
 800e0ea:	7afb      	ldrb	r3, [r7, #11]
 800e0ec:	2b0f      	cmp	r3, #15
 800e0ee:	d006      	beq.n	800e0fe <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e0f0:	23ff      	movs	r3, #255	; 0xff
 800e0f2:	777b      	strb	r3, [r7, #29]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fa:	64da      	str	r2, [r3, #76]	; 0x4c
 800e0fc:	e05e      	b.n	800e1bc <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e0fe:	7afb      	ldrb	r3, [r7, #11]
 800e100:	2b0f      	cmp	r3, #15
 800e102:	d136      	bne.n	800e172 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d154      	bne.n	800e1bc <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e112:	7fbb      	ldrb	r3, [r7, #30]
 800e114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00d      	beq.n	800e138 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e120:	7b5b      	ldrb	r3, [r3, #13]
 800e122:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e124:	7fbb      	ldrb	r3, [r7, #30]
 800e126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e12a:	77bb      	strb	r3, [r7, #30]
 800e12c:	7fbb      	ldrb	r3, [r7, #30]
 800e12e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e138:	7fba      	ldrb	r2, [r7, #30]
 800e13a:	7f7b      	ldrb	r3, [r7, #29]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d115      	bne.n	800e16c <dir_find+0x1d8>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e144:	330d      	adds	r3, #13
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	7f3a      	ldrb	r2, [r7, #28]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d10e      	bne.n	800e16c <dir_find+0x1d8>
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	691a      	ldr	r2, [r3, #16]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e156:	4619      	mov	r1, r3
 800e158:	4610      	mov	r0, r2
 800e15a:	f7ff f9c3 	bl	800d4e4 <cmp_lfn>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d003      	beq.n	800e16c <dir_find+0x1d8>
 800e164:	7f7b      	ldrb	r3, [r7, #29]
 800e166:	3b01      	subs	r3, #1
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	e000      	b.n	800e16e <dir_find+0x1da>
 800e16c:	23ff      	movs	r3, #255	; 0xff
 800e16e:	777b      	strb	r3, [r7, #29]
 800e170:	e024      	b.n	800e1bc <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e172:	7f7b      	ldrb	r3, [r7, #29]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d109      	bne.n	800e18c <dir_find+0x1f8>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff fb7d 	bl	800d87c <sum_sfn>
 800e182:	4603      	mov	r3, r0
 800e184:	461a      	mov	r2, r3
 800e186:	7f3b      	ldrb	r3, [r7, #28]
 800e188:	4293      	cmp	r3, r2
 800e18a:	d024      	beq.n	800e1d6 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e192:	f003 0301 	and.w	r3, r3, #1
 800e196:	2b00      	cmp	r3, #0
 800e198:	d10a      	bne.n	800e1b0 <dir_find+0x21c>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	3340      	adds	r3, #64	; 0x40
 800e1a2:	220b      	movs	r2, #11
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	f7fd ff10 	bl	800bfca <mem_cmp>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d014      	beq.n	800e1da <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e1b0:	23ff      	movs	r3, #255	; 0xff
 800e1b2:	777b      	strb	r3, [r7, #29]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ba:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e1bc:	2100      	movs	r1, #0
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff f80f 	bl	800d1e2 <dir_next>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800e1c8:	7ffb      	ldrb	r3, [r7, #31]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f43f af65 	beq.w	800e09a <dir_find+0x106>
 800e1d0:	e004      	b.n	800e1dc <dir_find+0x248>
		if (res != FR_OK) break;
 800e1d2:	bf00      	nop
 800e1d4:	e002      	b.n	800e1dc <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e1d6:	bf00      	nop
 800e1d8:	e000      	b.n	800e1dc <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e1da:	bf00      	nop

	return res;
 800e1dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3724      	adds	r7, #36	; 0x24
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd90      	pop	{r4, r7, pc}
	...

0800e1e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e1e8:	b5b0      	push	{r4, r5, r7, lr}
 800e1ea:	b0a0      	sub	sp, #128	; 0x80
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e1fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d001      	beq.n	800e208 <dir_register+0x20>
 800e204:	2306      	movs	r3, #6
 800e206:	e18c      	b.n	800e522 <dir_register+0x33a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e208:	2300      	movs	r3, #0
 800e20a:	677b      	str	r3, [r7, #116]	; 0x74
 800e20c:	e002      	b.n	800e214 <dir_register+0x2c>
 800e20e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e210:	3301      	adds	r3, #1
 800e212:	677b      	str	r3, [r7, #116]	; 0x74
 800e214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e216:	691a      	ldr	r2, [r3, #16]
 800e218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	4413      	add	r3, r2
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d1f4      	bne.n	800e20e <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	2b04      	cmp	r3, #4
 800e22a:	f040 80a2 	bne.w	800e372 <dir_register+0x18a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e22e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e230:	330e      	adds	r3, #14
 800e232:	4abe      	ldr	r2, [pc, #760]	; (800e52c <dir_register+0x344>)
 800e234:	fba2 2303 	umull	r2, r3, r2, r3
 800e238:	08db      	lsrs	r3, r3, #3
 800e23a:	3302      	adds	r3, #2
 800e23c:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e23e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff f8b4 	bl	800d3ae <dir_alloc>
 800e246:	4603      	mov	r3, r0
 800e248:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800e24c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <dir_register+0x72>
 800e254:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e258:	e163      	b.n	800e522 <dir_register+0x33a>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e25e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e260:	3b01      	subs	r3, #1
 800e262:	015b      	lsls	r3, r3, #5
 800e264:	1ad2      	subs	r2, r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d075      	beq.n	800e35e <dir_register+0x176>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	79db      	ldrb	r3, [r3, #7]
 800e276:	f003 0304 	and.w	r3, r3, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d06f      	beq.n	800e35e <dir_register+0x176>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e286:	895b      	ldrh	r3, [r3, #10]
 800e288:	461a      	mov	r2, r3
 800e28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e28c:	899b      	ldrh	r3, [r3, #12]
 800e28e:	fb03 f302 	mul.w	r3, r3, r2
 800e292:	461a      	mov	r2, r3
 800e294:	f04f 0300 	mov.w	r3, #0
 800e298:	1884      	adds	r4, r0, r2
 800e29a:	eb41 0503 	adc.w	r5, r1, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe fcae 	bl	800cc08 <fill_first_frag>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e2b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <dir_register+0xd8>
 800e2ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2be:	e130      	b.n	800e522 <dir_register+0x33a>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f7fe fccb 	bl	800cc66 <fill_last_frag>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e2d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d002      	beq.n	800e2e4 <dir_register+0xfc>
 800e2de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2e2:	e11e      	b.n	800e522 <dir_register+0x33a>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	f107 0308 	add.w	r3, r7, #8
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7ff fc8d 	bl	800dc0c <load_obj_dir>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e2f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d002      	beq.n	800e306 <dir_register+0x11e>
 800e300:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e304:	e10d      	b.n	800e522 <dir_register+0x33a>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800e306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e308:	695b      	ldr	r3, [r3, #20]
 800e30a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e314:	4608      	mov	r0, r1
 800e316:	f7fd fd94 	bl	800be42 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e31c:	695b      	ldr	r3, [r3, #20]
 800e31e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e328:	4608      	mov	r0, r1
 800e32a:	f7fd fd8a 	bl	800be42 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	79da      	ldrb	r2, [r3, #7]
 800e332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	3321      	adds	r3, #33	; 0x21
 800e338:	f042 0201 	orr.w	r2, r2, #1
 800e33c:	b2d2      	uxtb	r2, r2
 800e33e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800e340:	f107 0308 	add.w	r3, r7, #8
 800e344:	4618      	mov	r0, r3
 800e346:	f7ff fc9c 	bl	800dc82 <store_xdir>
 800e34a:	4603      	mov	r3, r0
 800e34c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e350:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e354:	2b00      	cmp	r3, #0
 800e356:	d002      	beq.n	800e35e <dir_register+0x176>
 800e358:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e35c:	e0e1      	b.n	800e522 <dir_register+0x33a>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e360:	695a      	ldr	r2, [r3, #20]
 800e362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e364:	691b      	ldr	r3, [r3, #16]
 800e366:	4619      	mov	r1, r3
 800e368:	4610      	mov	r0, r2
 800e36a:	f7ff fce5 	bl	800dd38 <create_xdir>
		return FR_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	e0d7      	b.n	800e522 <dir_register+0x33a>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e378:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e37c:	220c      	movs	r2, #12
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fd fde7 	bl	800bf52 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e384:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d033      	beq.n	800e3f8 <dir_register+0x210>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2240      	movs	r2, #64	; 0x40
 800e394:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800e398:	2301      	movs	r3, #1
 800e39a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e39c:	e016      	b.n	800e3cc <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e3a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3a6:	691a      	ldr	r2, [r3, #16]
 800e3a8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e3ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3ae:	f7ff f9d5 	bl	800d75c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7ff fdee 	bl	800df94 <dir_find>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800e3be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <dir_register+0x1ec>
		for (n = 1; n < 100; n++) {
 800e3c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800e3cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3ce:	2b63      	cmp	r3, #99	; 0x63
 800e3d0:	d9e5      	bls.n	800e39e <dir_register+0x1b6>
 800e3d2:	e000      	b.n	800e3d6 <dir_register+0x1ee>
			if (res != FR_OK) break;
 800e3d4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e3d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3d8:	2b64      	cmp	r3, #100	; 0x64
 800e3da:	d101      	bne.n	800e3e0 <dir_register+0x1f8>
 800e3dc:	2307      	movs	r3, #7
 800e3de:	e0a0      	b.n	800e522 <dir_register+0x33a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e3e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	d002      	beq.n	800e3ee <dir_register+0x206>
 800e3e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e3ec:	e099      	b.n	800e522 <dir_register+0x33a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e3ee:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e3f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3fc:	f003 0302 	and.w	r3, r3, #2
 800e400:	2b00      	cmp	r3, #0
 800e402:	d007      	beq.n	800e414 <dir_register+0x22c>
 800e404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e406:	330c      	adds	r3, #12
 800e408:	4a49      	ldr	r2, [pc, #292]	; (800e530 <dir_register+0x348>)
 800e40a:	fba2 2303 	umull	r2, r3, r2, r3
 800e40e:	089b      	lsrs	r3, r3, #2
 800e410:	3301      	adds	r3, #1
 800e412:	e000      	b.n	800e416 <dir_register+0x22e>
 800e414:	2301      	movs	r3, #1
 800e416:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e418:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7fe ffc7 	bl	800d3ae <dir_alloc>
 800e420:	4603      	mov	r3, r0
 800e422:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e426:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d14a      	bne.n	800e4c4 <dir_register+0x2dc>
 800e42e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e430:	3b01      	subs	r3, #1
 800e432:	673b      	str	r3, [r7, #112]	; 0x70
 800e434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e436:	2b00      	cmp	r3, #0
 800e438:	d044      	beq.n	800e4c4 <dir_register+0x2dc>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e43e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e440:	015b      	lsls	r3, r3, #5
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	4619      	mov	r1, r3
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f7fe fe37 	bl	800d0ba <dir_sdi>
 800e44c:	4603      	mov	r3, r0
 800e44e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e452:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e456:	2b00      	cmp	r3, #0
 800e458:	d134      	bne.n	800e4c4 <dir_register+0x2dc>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	3340      	adds	r3, #64	; 0x40
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff fa0c 	bl	800d87c <sum_sfn>
 800e464:	4603      	mov	r3, r0
 800e466:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e46e:	4619      	mov	r1, r3
 800e470:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e472:	f7fd ff9d 	bl	800c3b0 <move_window>
 800e476:	4603      	mov	r3, r0
 800e478:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800e47c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e480:	2b00      	cmp	r3, #0
 800e482:	d11e      	bne.n	800e4c2 <dir_register+0x2da>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e486:	6918      	ldr	r0, [r3, #16]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e48c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e494:	f7ff f8fa 	bl	800d68c <put_lfn>
				fs->wflag = 1;
 800e498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e49a:	2201      	movs	r2, #1
 800e49c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e49e:	2100      	movs	r1, #0
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7fe fe9e 	bl	800d1e2 <dir_next>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800e4ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d107      	bne.n	800e4c4 <dir_register+0x2dc>
 800e4b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	673b      	str	r3, [r7, #112]	; 0x70
 800e4ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1d4      	bne.n	800e46a <dir_register+0x282>
 800e4c0:	e000      	b.n	800e4c4 <dir_register+0x2dc>
				if (res != FR_OK) break;
 800e4c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e4c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d128      	bne.n	800e51e <dir_register+0x336>
		res = move_window(fs, dp->sect);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e4d4:	f7fd ff6c 	bl	800c3b0 <move_window>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e4de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d11b      	bne.n	800e51e <dir_register+0x336>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ea:	2220      	movs	r2, #32
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fd fd50 	bl	800bf94 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	3340      	adds	r3, #64	; 0x40
 800e4fc:	220b      	movs	r2, #11
 800e4fe:	4619      	mov	r1, r3
 800e500:	f7fd fd27 	bl	800bf52 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e50e:	330c      	adds	r3, #12
 800e510:	f002 0218 	and.w	r2, r2, #24
 800e514:	b2d2      	uxtb	r2, r2
 800e516:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e51a:	2201      	movs	r2, #1
 800e51c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e51e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e522:	4618      	mov	r0, r3
 800e524:	3780      	adds	r7, #128	; 0x80
 800e526:	46bd      	mov	sp, r7
 800e528:	bdb0      	pop	{r4, r5, r7, pc}
 800e52a:	bf00      	nop
 800e52c:	88888889 	.word	0x88888889
 800e530:	4ec4ec4f 	.word	0x4ec4ec4f

0800e534 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b088      	sub	sp, #32
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2200      	movs	r2, #0
 800e548:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 80d8 	beq.w	800e704 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	2b04      	cmp	r3, #4
 800e55a:	d106      	bne.n	800e56a <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	4618      	mov	r0, r3
 800e564:	f7ff fa12 	bl	800d98c <get_xdir_info>
		return;
 800e568:	e0cd      	b.n	800e706 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e572:	d032      	beq.n	800e5da <get_fileinfo+0xa6>
			i = j = 0;
 800e574:	2300      	movs	r3, #0
 800e576:	61bb      	str	r3, [r7, #24]
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e57c:	e01b      	b.n	800e5b6 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e57e:	89fb      	ldrh	r3, [r7, #14]
 800e580:	2100      	movs	r1, #0
 800e582:	4618      	mov	r0, r3
 800e584:	f002 f998 	bl	80108b8 <ff_convert>
 800e588:	4603      	mov	r3, r0
 800e58a:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e58c:	89fb      	ldrh	r3, [r7, #14]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d102      	bne.n	800e598 <get_fileinfo+0x64>
 800e592:	2300      	movs	r3, #0
 800e594:	61fb      	str	r3, [r7, #28]
 800e596:	e01a      	b.n	800e5ce <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	2bfe      	cmp	r3, #254	; 0xfe
 800e59c:	d902      	bls.n	800e5a4 <get_fileinfo+0x70>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	61fb      	str	r3, [r7, #28]
 800e5a2:	e014      	b.n	800e5ce <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	1c5a      	adds	r2, r3, #1
 800e5a8:	61fa      	str	r2, [r7, #28]
 800e5aa:	89fa      	ldrh	r2, [r7, #14]
 800e5ac:	b2d1      	uxtb	r1, r2
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	460a      	mov	r2, r1
 800e5b4:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	691a      	ldr	r2, [r3, #16]
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	1c59      	adds	r1, r3, #1
 800e5be:	61b9      	str	r1, [r7, #24]
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	4413      	add	r3, r2
 800e5c4:	881b      	ldrh	r3, [r3, #0]
 800e5c6:	81fb      	strh	r3, [r7, #14]
 800e5c8:	89fb      	ldrh	r3, [r7, #14]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1d7      	bne.n	800e57e <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	331a      	adds	r3, #26
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	61bb      	str	r3, [r7, #24]
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e5e2:	683a      	ldr	r2, [r7, #0]
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	331a      	adds	r3, #26
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e5ee:	e04c      	b.n	800e68a <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	1c59      	adds	r1, r3, #1
 800e5f8:	61f9      	str	r1, [r7, #28]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e600:	7dfb      	ldrb	r3, [r7, #23]
 800e602:	2b20      	cmp	r3, #32
 800e604:	d100      	bne.n	800e608 <get_fileinfo+0xd4>
 800e606:	e040      	b.n	800e68a <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e608:	7dfb      	ldrb	r3, [r7, #23]
 800e60a:	2b05      	cmp	r3, #5
 800e60c:	d101      	bne.n	800e612 <get_fileinfo+0xde>
 800e60e:	23e5      	movs	r3, #229	; 0xe5
 800e610:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	2b09      	cmp	r3, #9
 800e616:	d10f      	bne.n	800e638 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800e618:	89bb      	ldrh	r3, [r7, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d105      	bne.n	800e62a <get_fileinfo+0xf6>
 800e61e:	683a      	ldr	r2, [r7, #0]
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	4413      	add	r3, r2
 800e624:	331a      	adds	r3, #26
 800e626:	222e      	movs	r2, #46	; 0x2e
 800e628:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	1c5a      	adds	r2, r3, #1
 800e62e:	61ba      	str	r2, [r7, #24]
 800e630:	683a      	ldr	r2, [r7, #0]
 800e632:	4413      	add	r3, r2
 800e634:	222e      	movs	r2, #46	; 0x2e
 800e636:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e638:	683a      	ldr	r2, [r7, #0]
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	4413      	add	r3, r2
 800e63e:	330d      	adds	r3, #13
 800e640:	7dfa      	ldrb	r2, [r7, #23]
 800e642:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e644:	89bb      	ldrh	r3, [r7, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d11c      	bne.n	800e684 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	2b40      	cmp	r3, #64	; 0x40
 800e64e:	d913      	bls.n	800e678 <get_fileinfo+0x144>
 800e650:	7dfb      	ldrb	r3, [r7, #23]
 800e652:	2b5a      	cmp	r3, #90	; 0x5a
 800e654:	d810      	bhi.n	800e678 <get_fileinfo+0x144>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e65a:	330c      	adds	r3, #12
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	461a      	mov	r2, r3
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	2b08      	cmp	r3, #8
 800e664:	d901      	bls.n	800e66a <get_fileinfo+0x136>
 800e666:	2310      	movs	r3, #16
 800e668:	e000      	b.n	800e66c <get_fileinfo+0x138>
 800e66a:	2308      	movs	r3, #8
 800e66c:	4013      	ands	r3, r2
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d002      	beq.n	800e678 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800e672:	7dfb      	ldrb	r3, [r7, #23]
 800e674:	3320      	adds	r3, #32
 800e676:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e678:	683a      	ldr	r2, [r7, #0]
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	4413      	add	r3, r2
 800e67e:	331a      	adds	r3, #26
 800e680:	7dfa      	ldrb	r2, [r7, #23]
 800e682:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	3301      	adds	r3, #1
 800e688:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	2b0a      	cmp	r3, #10
 800e68e:	d9af      	bls.n	800e5f0 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800e690:	89bb      	ldrh	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10d      	bne.n	800e6b2 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	4413      	add	r3, r2
 800e69c:	331a      	adds	r3, #26
 800e69e:	2200      	movs	r2, #0
 800e6a0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6a6:	330c      	adds	r3, #12
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d101      	bne.n	800e6b2 <get_fileinfo+0x17e>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e6b2:	683a      	ldr	r2, [r7, #0]
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	330d      	adds	r3, #13
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c2:	7ada      	ldrb	r2, [r3, #11]
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6cc:	331c      	adds	r3, #28
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fd fa92 	bl	800bbf8 <ld_dword>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	f04f 0300 	mov.w	r3, #0
 800e6dc:	6839      	ldr	r1, [r7, #0]
 800e6de:	e9c1 2300 	strd	r2, r3, [r1]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6e6:	3316      	adds	r3, #22
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fd fa85 	bl	800bbf8 <ld_dword>
 800e6ee:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	815a      	strh	r2, [r3, #10]
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	0c1b      	lsrs	r3, r3, #16
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	811a      	strh	r2, [r3, #8]
 800e702:	e000      	b.n	800e706 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e704:	bf00      	nop
}
 800e706:	3720      	adds	r7, #32
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08a      	sub	sp, #40	; 0x28
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	613b      	str	r3, [r7, #16]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	2300      	movs	r3, #0
 800e726:	617b      	str	r3, [r7, #20]
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	61ba      	str	r2, [r7, #24]
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	4413      	add	r3, r2
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e73a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e73c:	2b1f      	cmp	r3, #31
 800e73e:	d940      	bls.n	800e7c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e742:	2b2f      	cmp	r3, #47	; 0x2f
 800e744:	d006      	beq.n	800e754 <create_name+0x48>
 800e746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e748:	2b5c      	cmp	r3, #92	; 0x5c
 800e74a:	d110      	bne.n	800e76e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e74c:	e002      	b.n	800e754 <create_name+0x48>
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	3301      	adds	r3, #1
 800e752:	61bb      	str	r3, [r7, #24]
 800e754:	693a      	ldr	r2, [r7, #16]
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	4413      	add	r3, r2
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	2b2f      	cmp	r3, #47	; 0x2f
 800e75e:	d0f6      	beq.n	800e74e <create_name+0x42>
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	4413      	add	r3, r2
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	2b5c      	cmp	r3, #92	; 0x5c
 800e76a:	d0f0      	beq.n	800e74e <create_name+0x42>
			break;
 800e76c:	e02a      	b.n	800e7c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2bfe      	cmp	r3, #254	; 0xfe
 800e772:	d901      	bls.n	800e778 <create_name+0x6c>
 800e774:	2306      	movs	r3, #6
 800e776:	e177      	b.n	800ea68 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e77e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e780:	2101      	movs	r1, #1
 800e782:	4618      	mov	r0, r3
 800e784:	f002 f898 	bl	80108b8 <ff_convert>
 800e788:	4603      	mov	r3, r0
 800e78a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <create_name+0x8a>
 800e792:	2306      	movs	r3, #6
 800e794:	e168      	b.n	800ea68 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e798:	2b7f      	cmp	r3, #127	; 0x7f
 800e79a:	d809      	bhi.n	800e7b0 <create_name+0xa4>
 800e79c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e79e:	4619      	mov	r1, r3
 800e7a0:	48b3      	ldr	r0, [pc, #716]	; (800ea70 <create_name+0x364>)
 800e7a2:	f7fd fc39 	bl	800c018 <chk_chr>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d001      	beq.n	800e7b0 <create_name+0xa4>
 800e7ac:	2306      	movs	r3, #6
 800e7ae:	e15b      	b.n	800ea68 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	1c5a      	adds	r2, r3, #1
 800e7b4:	617a      	str	r2, [r7, #20]
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e7c0:	e7b4      	b.n	800e72c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e7c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	441a      	add	r2, r3
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e7ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7d0:	2b1f      	cmp	r3, #31
 800e7d2:	d801      	bhi.n	800e7d8 <create_name+0xcc>
 800e7d4:	2304      	movs	r3, #4
 800e7d6:	e000      	b.n	800e7da <create_name+0xce>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e7de:	e011      	b.n	800e804 <create_name+0xf8>
		w = lfn[di - 1];
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	005b      	lsls	r3, r3, #1
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7f4:	2b20      	cmp	r3, #32
 800e7f6:	d002      	beq.n	800e7fe <create_name+0xf2>
 800e7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e7fc:	d106      	bne.n	800e80c <create_name+0x100>
		di--;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	3b01      	subs	r3, #1
 800e802:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1ea      	bne.n	800e7e0 <create_name+0xd4>
 800e80a:	e000      	b.n	800e80e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e80c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	005b      	lsls	r3, r3, #1
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	4413      	add	r3, r2
 800e816:	2200      	movs	r2, #0
 800e818:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <create_name+0x118>
 800e820:	2306      	movs	r3, #6
 800e822:	e121      	b.n	800ea68 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	3340      	adds	r3, #64	; 0x40
 800e828:	220b      	movs	r2, #11
 800e82a:	2120      	movs	r1, #32
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fd fbb1 	bl	800bf94 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e832:	2300      	movs	r3, #0
 800e834:	61bb      	str	r3, [r7, #24]
 800e836:	e002      	b.n	800e83e <create_name+0x132>
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	3301      	adds	r3, #1
 800e83c:	61bb      	str	r3, [r7, #24]
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	4413      	add	r3, r2
 800e846:	881b      	ldrh	r3, [r3, #0]
 800e848:	2b20      	cmp	r3, #32
 800e84a:	d0f5      	beq.n	800e838 <create_name+0x12c>
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	4413      	add	r3, r2
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	2b2e      	cmp	r3, #46	; 0x2e
 800e858:	d0ee      	beq.n	800e838 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d009      	beq.n	800e874 <create_name+0x168>
 800e860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e864:	f043 0303 	orr.w	r3, r3, #3
 800e868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e86c:	e002      	b.n	800e874 <create_name+0x168>
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	3b01      	subs	r3, #1
 800e872:	617b      	str	r3, [r7, #20]
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d009      	beq.n	800e88e <create_name+0x182>
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e880:	3b01      	subs	r3, #1
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	4413      	add	r3, r2
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	2b2e      	cmp	r3, #46	; 0x2e
 800e88c:	d1ef      	bne.n	800e86e <create_name+0x162>

	i = b = 0; ni = 8;
 800e88e:	2300      	movs	r3, #0
 800e890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e894:	2300      	movs	r3, #0
 800e896:	623b      	str	r3, [r7, #32]
 800e898:	2308      	movs	r3, #8
 800e89a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	1c5a      	adds	r2, r3, #1
 800e8a0:	61ba      	str	r2, [r7, #24]
 800e8a2:	005b      	lsls	r3, r3, #1
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e8ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f000 8090 	beq.w	800e9d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8b6:	2b20      	cmp	r3, #32
 800e8b8:	d006      	beq.n	800e8c8 <create_name+0x1bc>
 800e8ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800e8be:	d10a      	bne.n	800e8d6 <create_name+0x1ca>
 800e8c0:	69ba      	ldr	r2, [r7, #24]
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d006      	beq.n	800e8d6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8cc:	f043 0303 	orr.w	r3, r3, #3
 800e8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8d4:	e07d      	b.n	800e9d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e8d6:	6a3a      	ldr	r2, [r7, #32]
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d203      	bcs.n	800e8e6 <create_name+0x1da>
 800e8de:	69ba      	ldr	r2, [r7, #24]
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d123      	bne.n	800e92e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	2b0b      	cmp	r3, #11
 800e8ea:	d106      	bne.n	800e8fa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8f0:	f043 0303 	orr.w	r3, r3, #3
 800e8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8f8:	e06f      	b.n	800e9da <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e8fa:	69ba      	ldr	r2, [r7, #24]
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d005      	beq.n	800e90e <create_name+0x202>
 800e902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e906:	f043 0303 	orr.w	r3, r3, #3
 800e90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e90e:	69ba      	ldr	r2, [r7, #24]
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	429a      	cmp	r2, r3
 800e914:	d860      	bhi.n	800e9d8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	61bb      	str	r3, [r7, #24]
 800e91a:	2308      	movs	r3, #8
 800e91c:	623b      	str	r3, [r7, #32]
 800e91e:	230b      	movs	r3, #11
 800e920:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e922:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e92c:	e051      	b.n	800e9d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e92e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e930:	2b7f      	cmp	r3, #127	; 0x7f
 800e932:	d914      	bls.n	800e95e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e936:	2100      	movs	r1, #0
 800e938:	4618      	mov	r0, r3
 800e93a:	f001 ffbd 	bl	80108b8 <ff_convert>
 800e93e:	4603      	mov	r3, r0
 800e940:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e944:	2b00      	cmp	r3, #0
 800e946:	d004      	beq.n	800e952 <create_name+0x246>
 800e948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e94a:	3b80      	subs	r3, #128	; 0x80
 800e94c:	4a49      	ldr	r2, [pc, #292]	; (800ea74 <create_name+0x368>)
 800e94e:	5cd3      	ldrb	r3, [r2, r3]
 800e950:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e956:	f043 0302 	orr.w	r3, r3, #2
 800e95a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e95e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e960:	2b00      	cmp	r3, #0
 800e962:	d007      	beq.n	800e974 <create_name+0x268>
 800e964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e966:	4619      	mov	r1, r3
 800e968:	4843      	ldr	r0, [pc, #268]	; (800ea78 <create_name+0x36c>)
 800e96a:	f7fd fb55 	bl	800c018 <chk_chr>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d008      	beq.n	800e986 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e974:	235f      	movs	r3, #95	; 0x5f
 800e976:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e97c:	f043 0303 	orr.w	r3, r3, #3
 800e980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e984:	e01b      	b.n	800e9be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e988:	2b40      	cmp	r3, #64	; 0x40
 800e98a:	d909      	bls.n	800e9a0 <create_name+0x294>
 800e98c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e98e:	2b5a      	cmp	r3, #90	; 0x5a
 800e990:	d806      	bhi.n	800e9a0 <create_name+0x294>
					b |= 2;
 800e992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e996:	f043 0302 	orr.w	r3, r3, #2
 800e99a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e99e:	e00e      	b.n	800e9be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e9a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9a2:	2b60      	cmp	r3, #96	; 0x60
 800e9a4:	d90b      	bls.n	800e9be <create_name+0x2b2>
 800e9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9a8:	2b7a      	cmp	r3, #122	; 0x7a
 800e9aa:	d808      	bhi.n	800e9be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e9ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9b0:	f043 0301 	orr.w	r3, r3, #1
 800e9b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ba:	3b20      	subs	r3, #32
 800e9bc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e9be:	6a3b      	ldr	r3, [r7, #32]
 800e9c0:	1c5a      	adds	r2, r3, #1
 800e9c2:	623a      	str	r2, [r7, #32]
 800e9c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9c6:	b2d1      	uxtb	r1, r2
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	460a      	mov	r2, r1
 800e9ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800e9d2:	e763      	b.n	800e89c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e9d4:	bf00      	nop
 800e9d6:	e000      	b.n	800e9da <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800e9d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e9e0:	2be5      	cmp	r3, #229	; 0xe5
 800e9e2:	d103      	bne.n	800e9ec <create_name+0x2e0>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2205      	movs	r2, #5
 800e9e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	2b08      	cmp	r3, #8
 800e9f0:	d104      	bne.n	800e9fc <create_name+0x2f0>
 800e9f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e9fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea00:	f003 030c 	and.w	r3, r3, #12
 800ea04:	2b0c      	cmp	r3, #12
 800ea06:	d005      	beq.n	800ea14 <create_name+0x308>
 800ea08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea0c:	f003 0303 	and.w	r3, r3, #3
 800ea10:	2b03      	cmp	r3, #3
 800ea12:	d105      	bne.n	800ea20 <create_name+0x314>
 800ea14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea18:	f043 0302 	orr.w	r3, r3, #2
 800ea1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ea20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea24:	f003 0302 	and.w	r3, r3, #2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d117      	bne.n	800ea5c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ea2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea30:	f003 0303 	and.w	r3, r3, #3
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d105      	bne.n	800ea44 <create_name+0x338>
 800ea38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea3c:	f043 0310 	orr.w	r3, r3, #16
 800ea40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ea44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea48:	f003 030c 	and.w	r3, r3, #12
 800ea4c:	2b04      	cmp	r3, #4
 800ea4e:	d105      	bne.n	800ea5c <create_name+0x350>
 800ea50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea54:	f043 0308 	orr.w	r3, r3, #8
 800ea58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ea62:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800ea66:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3728      	adds	r7, #40	; 0x28
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	080129c0 	.word	0x080129c0
 800ea74:	08012a98 	.word	0x08012a98
 800ea78:	080129cc 	.word	0x080129cc

0800ea7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ea90:	e002      	b.n	800ea98 <follow_path+0x1c>
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	3301      	adds	r3, #1
 800ea96:	603b      	str	r3, [r7, #0]
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	2b2f      	cmp	r3, #47	; 0x2f
 800ea9e:	d0f8      	beq.n	800ea92 <follow_path+0x16>
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	2b5c      	cmp	r3, #92	; 0x5c
 800eaa6:	d0f4      	beq.n	800ea92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	2200      	movs	r2, #0
 800eab2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	2b1f      	cmp	r3, #31
 800eaba:	d80a      	bhi.n	800ead2 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2280      	movs	r2, #128	; 0x80
 800eac0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800eac4:	2100      	movs	r1, #0
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7fe faf7 	bl	800d0ba <dir_sdi>
 800eacc:	4603      	mov	r3, r0
 800eace:	75fb      	strb	r3, [r7, #23]
 800ead0:	e07d      	b.n	800ebce <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ead2:	463b      	mov	r3, r7
 800ead4:	4619      	mov	r1, r3
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7ff fe18 	bl	800e70c <create_name>
 800eadc:	4603      	mov	r3, r0
 800eade:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d16e      	bne.n	800ebc4 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff fa54 	bl	800df94 <dir_find>
 800eaec:	4603      	mov	r3, r0
 800eaee:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800eaf6:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eaf8:	7dfb      	ldrb	r3, [r7, #23]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d00a      	beq.n	800eb14 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eafe:	7dfb      	ldrb	r3, [r7, #23]
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	d161      	bne.n	800ebc8 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eb04:	7afb      	ldrb	r3, [r7, #11]
 800eb06:	f003 0304 	and.w	r3, r3, #4
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d15c      	bne.n	800ebc8 <follow_path+0x14c>
 800eb0e:	2305      	movs	r3, #5
 800eb10:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eb12:	e059      	b.n	800ebc8 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb14:	7afb      	ldrb	r3, [r7, #11]
 800eb16:	f003 0304 	and.w	r3, r3, #4
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d156      	bne.n	800ebcc <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	799b      	ldrb	r3, [r3, #6]
 800eb22:	f003 0310 	and.w	r3, r3, #16
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d102      	bne.n	800eb30 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800eb2a:	2305      	movs	r3, #5
 800eb2c:	75fb      	strb	r3, [r7, #23]
 800eb2e:	e04e      	b.n	800ebce <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2b04      	cmp	r3, #4
 800eb36:	d130      	bne.n	800eb9a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	689a      	ldr	r2, [r3, #8]
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eb46:	4613      	mov	r3, r2
 800eb48:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800eb4c:	693a      	ldr	r2, [r7, #16]
 800eb4e:	79d2      	ldrb	r2, [r2, #7]
 800eb50:	431a      	orrs	r2, r3
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	3334      	adds	r3, #52	; 0x34
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fd f847 	bl	800bbf8 <ld_dword>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	3321      	adds	r3, #33	; 0x21
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	f003 0302 	and.w	r3, r3, #2
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	695b      	ldr	r3, [r3, #20]
 800eb86:	3338      	adds	r3, #56	; 0x38
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fd f858 	bl	800bc3e <ld_qword>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	6939      	ldr	r1, [r7, #16]
 800eb94:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800eb98:	e79b      	b.n	800ead2 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba4:	68fa      	ldr	r2, [r7, #12]
 800eba6:	8992      	ldrh	r2, [r2, #12]
 800eba8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebac:	fb02 f200 	mul.w	r2, r2, r0
 800ebb0:	1a9b      	subs	r3, r3, r2
 800ebb2:	440b      	add	r3, r1
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f7fe fc55 	bl	800d466 <ld_clust>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ebc2:	e786      	b.n	800ead2 <follow_path+0x56>
			if (res != FR_OK) break;
 800ebc4:	bf00      	nop
 800ebc6:	e002      	b.n	800ebce <follow_path+0x152>
				break;
 800ebc8:	bf00      	nop
 800ebca:	e000      	b.n	800ebce <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ebcc:	bf00      	nop
			}
		}
	}

	return res;
 800ebce:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b087      	sub	sp, #28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ebe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d031      	beq.n	800ec52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	617b      	str	r3, [r7, #20]
 800ebf4:	e002      	b.n	800ebfc <get_ldnumber+0x24>
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	617b      	str	r3, [r7, #20]
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	2b1f      	cmp	r3, #31
 800ec02:	d903      	bls.n	800ec0c <get_ldnumber+0x34>
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b3a      	cmp	r3, #58	; 0x3a
 800ec0a:	d1f4      	bne.n	800ebf6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	2b3a      	cmp	r3, #58	; 0x3a
 800ec12:	d11c      	bne.n	800ec4e <get_ldnumber+0x76>
			tp = *path;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	1c5a      	adds	r2, r3, #1
 800ec1e:	60fa      	str	r2, [r7, #12]
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	3b30      	subs	r3, #48	; 0x30
 800ec24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	2b09      	cmp	r3, #9
 800ec2a:	d80e      	bhi.n	800ec4a <get_ldnumber+0x72>
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d10a      	bne.n	800ec4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d107      	bne.n	800ec4a <get_ldnumber+0x72>
					vol = (int)i;
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	3301      	adds	r3, #1
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	697a      	ldr	r2, [r7, #20]
 800ec48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	e002      	b.n	800ec54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ec4e:	2300      	movs	r3, #0
 800ec50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ec52:	693b      	ldr	r3, [r7, #16]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	371c      	adds	r7, #28
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	70da      	strb	r2, [r3, #3]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f04f 32ff 	mov.w	r2, #4294967295
 800ec76:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7fd fb98 	bl	800c3b0 <move_window>
 800ec80:	4603      	mov	r3, r0
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d001      	beq.n	800ec8a <check_fs+0x2a>
 800ec86:	2304      	movs	r3, #4
 800ec88:	e044      	b.n	800ed14 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	333c      	adds	r3, #60	; 0x3c
 800ec8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fc ff98 	bl	800bbc8 <ld_word>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d001      	beq.n	800eca8 <check_fs+0x48>
 800eca4:	2303      	movs	r3, #3
 800eca6:	e035      	b.n	800ed14 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecae:	2be9      	cmp	r3, #233	; 0xe9
 800ecb0:	d009      	beq.n	800ecc6 <check_fs+0x66>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecb8:	2beb      	cmp	r3, #235	; 0xeb
 800ecba:	d11e      	bne.n	800ecfa <check_fs+0x9a>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ecc2:	2b90      	cmp	r3, #144	; 0x90
 800ecc4:	d119      	bne.n	800ecfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	333c      	adds	r3, #60	; 0x3c
 800ecca:	3336      	adds	r3, #54	; 0x36
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fc ff93 	bl	800bbf8 <ld_dword>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ecd8:	4a10      	ldr	r2, [pc, #64]	; (800ed1c <check_fs+0xbc>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d101      	bne.n	800ece2 <check_fs+0x82>
 800ecde:	2300      	movs	r3, #0
 800ece0:	e018      	b.n	800ed14 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	333c      	adds	r3, #60	; 0x3c
 800ece6:	3352      	adds	r3, #82	; 0x52
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fc ff85 	bl	800bbf8 <ld_dword>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	4a0b      	ldr	r2, [pc, #44]	; (800ed20 <check_fs+0xc0>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d101      	bne.n	800ecfa <check_fs+0x9a>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	e00c      	b.n	800ed14 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	333c      	adds	r3, #60	; 0x3c
 800ecfe:	220b      	movs	r2, #11
 800ed00:	4908      	ldr	r1, [pc, #32]	; (800ed24 <check_fs+0xc4>)
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fd f961 	bl	800bfca <mem_cmp>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d101      	bne.n	800ed12 <check_fs+0xb2>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e000      	b.n	800ed14 <check_fs+0xb4>
#endif
	return 2;
 800ed12:	2302      	movs	r3, #2
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3708      	adds	r7, #8
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	00544146 	.word	0x00544146
 800ed20:	33544146 	.word	0x33544146
 800ed24:	080129d4 	.word	0x080129d4

0800ed28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ed28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ed2c:	b098      	sub	sp, #96	; 0x60
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	60f8      	str	r0, [r7, #12]
 800ed32:	60b9      	str	r1, [r7, #8]
 800ed34:	4613      	mov	r3, r2
 800ed36:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f7ff ff4a 	bl	800ebd8 <get_ldnumber>
 800ed44:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	da01      	bge.n	800ed50 <find_volume+0x28>
 800ed4c:	230b      	movs	r3, #11
 800ed4e:	e36b      	b.n	800f428 <find_volume+0x700>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ed50:	4aa9      	ldr	r2, [pc, #676]	; (800eff8 <find_volume+0x2d0>)
 800ed52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed58:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ed5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d101      	bne.n	800ed64 <find_volume+0x3c>
 800ed60:	230c      	movs	r3, #12
 800ed62:	e361      	b.n	800f428 <find_volume+0x700>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed68:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ed6a:	79fb      	ldrb	r3, [r7, #7]
 800ed6c:	f023 0301 	bic.w	r3, r3, #1
 800ed70:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ed72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d01a      	beq.n	800edb0 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800ed7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed7c:	785b      	ldrb	r3, [r3, #1]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fc fe84 	bl	800ba8c <disk_status>
 800ed84:	4603      	mov	r3, r0
 800ed86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ed8e:	f003 0301 	and.w	r3, r3, #1
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10c      	bne.n	800edb0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ed96:	79fb      	ldrb	r3, [r7, #7]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d007      	beq.n	800edac <find_volume+0x84>
 800ed9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eda0:	f003 0304 	and.w	r3, r3, #4
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d001      	beq.n	800edac <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800eda8:	230a      	movs	r3, #10
 800edaa:	e33d      	b.n	800f428 <find_volume+0x700>
			}
			return FR_OK;				/* The file system object is valid */
 800edac:	2300      	movs	r3, #0
 800edae:	e33b      	b.n	800f428 <find_volume+0x700>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800edb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb2:	2200      	movs	r2, #0
 800edb4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800edb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edb8:	b2da      	uxtb	r2, r3
 800edba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edbc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800edbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc0:	785b      	ldrb	r3, [r3, #1]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fc fe7c 	bl	800bac0 <disk_initialize>
 800edc8:	4603      	mov	r3, r0
 800edca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800edce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800edd2:	f003 0301 	and.w	r3, r3, #1
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d001      	beq.n	800edde <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800edda:	2303      	movs	r3, #3
 800eddc:	e324      	b.n	800f428 <find_volume+0x700>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800edde:	79fb      	ldrb	r3, [r7, #7]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d007      	beq.n	800edf4 <find_volume+0xcc>
 800ede4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ede8:	f003 0304 	and.w	r3, r3, #4
 800edec:	2b00      	cmp	r3, #0
 800edee:	d001      	beq.n	800edf4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800edf0:	230a      	movs	r3, #10
 800edf2:	e319      	b.n	800f428 <find_volume+0x700>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800edf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf6:	7858      	ldrb	r0, [r3, #1]
 800edf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edfa:	330c      	adds	r3, #12
 800edfc:	461a      	mov	r2, r3
 800edfe:	2102      	movs	r1, #2
 800ee00:	f7fc fec4 	bl	800bb8c <disk_ioctl>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d001      	beq.n	800ee0e <find_volume+0xe6>
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e30c      	b.n	800f428 <find_volume+0x700>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ee0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee10:	899b      	ldrh	r3, [r3, #12]
 800ee12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee16:	d80d      	bhi.n	800ee34 <find_volume+0x10c>
 800ee18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee1a:	899b      	ldrh	r3, [r3, #12]
 800ee1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee20:	d308      	bcc.n	800ee34 <find_volume+0x10c>
 800ee22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee24:	899b      	ldrh	r3, [r3, #12]
 800ee26:	461a      	mov	r2, r3
 800ee28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee2a:	899b      	ldrh	r3, [r3, #12]
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	4013      	ands	r3, r2
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <find_volume+0x110>
 800ee34:	2301      	movs	r3, #1
 800ee36:	e2f7      	b.n	800f428 <find_volume+0x700>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ee3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ee40:	f7ff ff0e 	bl	800ec60 <check_fs>
 800ee44:	4603      	mov	r3, r0
 800ee46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ee4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	d14b      	bne.n	800eeea <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee52:	2300      	movs	r3, #0
 800ee54:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee56:	e01f      	b.n	800ee98 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ee58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee5a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ee5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee60:	011b      	lsls	r3, r3, #4
 800ee62:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ee66:	4413      	add	r3, r2
 800ee68:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d006      	beq.n	800ee82 <find_volume+0x15a>
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	3308      	adds	r3, #8
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fc febd 	bl	800bbf8 <ld_dword>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	e000      	b.n	800ee84 <find_volume+0x15c>
 800ee82:	2200      	movs	r2, #0
 800ee84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ee8c:	440b      	add	r3, r1
 800ee8e:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee94:	3301      	adds	r3, #1
 800ee96:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee9a:	2b03      	cmp	r3, #3
 800ee9c:	d9dc      	bls.n	800ee58 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ee9e:	2300      	movs	r3, #0
 800eea0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800eea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <find_volume+0x186>
 800eea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800eeae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800eebc:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d005      	beq.n	800eed0 <find_volume+0x1a8>
 800eec4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eec6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eec8:	f7ff feca 	bl	800ec60 <check_fs>
 800eecc:	4603      	mov	r3, r0
 800eece:	e000      	b.n	800eed2 <find_volume+0x1aa>
 800eed0:	2303      	movs	r3, #3
 800eed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800eed6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d905      	bls.n	800eeea <find_volume+0x1c2>
 800eede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eee0:	3301      	adds	r3, #1
 800eee2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d9e1      	bls.n	800eeae <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eeea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eeee:	2b04      	cmp	r3, #4
 800eef0:	d101      	bne.n	800eef6 <find_volume+0x1ce>
 800eef2:	2301      	movs	r3, #1
 800eef4:	e298      	b.n	800f428 <find_volume+0x700>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d901      	bls.n	800ef02 <find_volume+0x1da>
 800eefe:	230d      	movs	r3, #13
 800ef00:	e292      	b.n	800f428 <find_volume+0x700>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ef02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	f040 80fe 	bne.w	800f108 <find_volume+0x3e0>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ef0c:	230b      	movs	r3, #11
 800ef0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef10:	e002      	b.n	800ef18 <find_volume+0x1f0>
 800ef12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef14:	3301      	adds	r3, #1
 800ef16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef1a:	2b3f      	cmp	r3, #63	; 0x3f
 800ef1c:	d806      	bhi.n	800ef2c <find_volume+0x204>
 800ef1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef22:	4413      	add	r3, r2
 800ef24:	333c      	adds	r3, #60	; 0x3c
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d0f2      	beq.n	800ef12 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ef2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef2e:	2b3f      	cmp	r3, #63	; 0x3f
 800ef30:	d801      	bhi.n	800ef36 <find_volume+0x20e>
 800ef32:	230d      	movs	r3, #13
 800ef34:	e278      	b.n	800f428 <find_volume+0x700>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ef36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef38:	333c      	adds	r3, #60	; 0x3c
 800ef3a:	3368      	adds	r3, #104	; 0x68
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fc fe43 	bl	800bbc8 <ld_word>
 800ef42:	4603      	mov	r3, r0
 800ef44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef48:	d001      	beq.n	800ef4e <find_volume+0x226>
 800ef4a:	230d      	movs	r3, #13
 800ef4c:	e26c      	b.n	800f428 <find_volume+0x700>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ef4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef50:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800ef54:	461a      	mov	r2, r3
 800ef56:	2301      	movs	r3, #1
 800ef58:	4093      	lsls	r3, r2
 800ef5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef5c:	8992      	ldrh	r2, [r2, #12]
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d001      	beq.n	800ef66 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800ef62:	230d      	movs	r3, #13
 800ef64:	e260      	b.n	800f428 <find_volume+0x700>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ef66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef68:	333c      	adds	r3, #60	; 0x3c
 800ef6a:	3348      	adds	r3, #72	; 0x48
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fc fe66 	bl	800bc3e <ld_qword>
 800ef72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef74:	461a      	mov	r2, r3
 800ef76:	f04f 0300 	mov.w	r3, #0
 800ef7a:	eb10 0802 	adds.w	r8, r0, r2
 800ef7e:	eb41 0903 	adc.w	r9, r1, r3
 800ef82:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ef86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	bf08      	it	eq
 800ef8e:	2a00      	cmpeq	r2, #0
 800ef90:	d301      	bcc.n	800ef96 <find_volume+0x26e>
 800ef92:	230d      	movs	r3, #13
 800ef94:	e248      	b.n	800f428 <find_volume+0x700>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ef96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef98:	333c      	adds	r3, #60	; 0x3c
 800ef9a:	3354      	adds	r3, #84	; 0x54
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fc fe2b 	bl	800bbf8 <ld_dword>
 800efa2:	4602      	mov	r2, r0
 800efa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa6:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800efa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efaa:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800efae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800efb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb4:	789b      	ldrb	r3, [r3, #2]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d001      	beq.n	800efbe <find_volume+0x296>
 800efba:	230d      	movs	r3, #13
 800efbc:	e234      	b.n	800f428 <find_volume+0x700>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800efbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efc0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800efc4:	461a      	mov	r2, r3
 800efc6:	2301      	movs	r3, #1
 800efc8:	4093      	lsls	r3, r2
 800efca:	b29a      	uxth	r2, r3
 800efcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efce:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800efd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efd2:	895b      	ldrh	r3, [r3, #10]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <find_volume+0x2b4>
 800efd8:	230d      	movs	r3, #13
 800efda:	e225      	b.n	800f428 <find_volume+0x700>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800efdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efde:	333c      	adds	r3, #60	; 0x3c
 800efe0:	335c      	adds	r3, #92	; 0x5c
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fc fe08 	bl	800bbf8 <ld_dword>
 800efe8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800efea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efec:	4a03      	ldr	r2, [pc, #12]	; (800effc <find_volume+0x2d4>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d906      	bls.n	800f000 <find_volume+0x2d8>
 800eff2:	230d      	movs	r3, #13
 800eff4:	e218      	b.n	800f428 <find_volume+0x700>
 800eff6:	bf00      	nop
 800eff8:	200000b4 	.word	0x200000b4
 800effc:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800f000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f002:	1c9a      	adds	r2, r3, #2
 800f004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f006:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f00a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f00c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f010:	333c      	adds	r3, #60	; 0x3c
 800f012:	3358      	adds	r3, #88	; 0x58
 800f014:	4618      	mov	r0, r3
 800f016:	f7fc fdef 	bl	800bbf8 <ld_dword>
 800f01a:	4602      	mov	r2, r0
 800f01c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f01e:	441a      	add	r2, r3
 800f020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f022:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f026:	333c      	adds	r3, #60	; 0x3c
 800f028:	3350      	adds	r3, #80	; 0x50
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fc fde4 	bl	800bbf8 <ld_dword>
 800f030:	4602      	mov	r2, r0
 800f032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f034:	441a      	add	r2, r3
 800f036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f038:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f03a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03e:	4618      	mov	r0, r3
 800f040:	f04f 0100 	mov.w	r1, #0
 800f044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f046:	895b      	ldrh	r3, [r3, #10]
 800f048:	461a      	mov	r2, r3
 800f04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04c:	fb03 f302 	mul.w	r3, r3, r2
 800f050:	461a      	mov	r2, r3
 800f052:	f04f 0300 	mov.w	r3, #0
 800f056:	1884      	adds	r4, r0, r2
 800f058:	eb41 0503 	adc.w	r5, r1, r3
 800f05c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f060:	42ab      	cmp	r3, r5
 800f062:	bf08      	it	eq
 800f064:	42a2      	cmpeq	r2, r4
 800f066:	d201      	bcs.n	800f06c <find_volume+0x344>
 800f068:	230d      	movs	r3, #13
 800f06a:	e1dd      	b.n	800f428 <find_volume+0x700>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f06e:	333c      	adds	r3, #60	; 0x3c
 800f070:	3360      	adds	r3, #96	; 0x60
 800f072:	4618      	mov	r0, r3
 800f074:	f7fc fdc0 	bl	800bbf8 <ld_dword>
 800f078:	4602      	mov	r2, r0
 800f07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f07c:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f082:	4619      	mov	r1, r3
 800f084:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f086:	f7fd fa31 	bl	800c4ec <clust2sect>
 800f08a:	4603      	mov	r3, r0
 800f08c:	4619      	mov	r1, r3
 800f08e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f090:	f7fd f98e 	bl	800c3b0 <move_window>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d001      	beq.n	800f09e <find_volume+0x376>
 800f09a:	2301      	movs	r3, #1
 800f09c:	e1c4      	b.n	800f428 <find_volume+0x700>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f09e:	2300      	movs	r3, #0
 800f0a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0a2:	e015      	b.n	800f0d0 <find_volume+0x3a8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f0a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0a8:	4413      	add	r3, r2
 800f0aa:	333c      	adds	r3, #60	; 0x3c
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2b81      	cmp	r3, #129	; 0x81
 800f0b0:	d10b      	bne.n	800f0ca <find_volume+0x3a2>
 800f0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0b4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0ba:	3314      	adds	r3, #20
 800f0bc:	4413      	add	r3, r2
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fc fd9a 	bl	800bbf8 <ld_dword>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d009      	beq.n	800f0de <find_volume+0x3b6>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0cc:	3320      	adds	r3, #32
 800f0ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0d2:	899b      	ldrh	r3, [r3, #12]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d3e3      	bcc.n	800f0a4 <find_volume+0x37c>
 800f0dc:	e000      	b.n	800f0e0 <find_volume+0x3b8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f0de:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800f0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0e2:	899b      	ldrh	r3, [r3, #12]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d101      	bne.n	800f0f0 <find_volume+0x3c8>
 800f0ec:	230d      	movs	r3, #13
 800f0ee:	e19b      	b.n	800f428 <find_volume+0x700>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f6:	61da      	str	r2, [r3, #28]
 800f0f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0fa:	69da      	ldr	r2, [r3, #28]
 800f0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0fe:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800f100:	2304      	movs	r3, #4
 800f102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f106:	e177      	b.n	800f3f8 <find_volume+0x6d0>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f10a:	333c      	adds	r3, #60	; 0x3c
 800f10c:	330b      	adds	r3, #11
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fc fd5a 	bl	800bbc8 <ld_word>
 800f114:	4603      	mov	r3, r0
 800f116:	461a      	mov	r2, r3
 800f118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f11a:	899b      	ldrh	r3, [r3, #12]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d001      	beq.n	800f124 <find_volume+0x3fc>
 800f120:	230d      	movs	r3, #13
 800f122:	e181      	b.n	800f428 <find_volume+0x700>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f126:	333c      	adds	r3, #60	; 0x3c
 800f128:	3316      	adds	r3, #22
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fc fd4c 	bl	800bbc8 <ld_word>
 800f130:	4603      	mov	r3, r0
 800f132:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f136:	2b00      	cmp	r3, #0
 800f138:	d106      	bne.n	800f148 <find_volume+0x420>
 800f13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f13c:	333c      	adds	r3, #60	; 0x3c
 800f13e:	3324      	adds	r3, #36	; 0x24
 800f140:	4618      	mov	r0, r3
 800f142:	f7fc fd59 	bl	800bbf8 <ld_dword>
 800f146:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800f148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f14a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f14c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f14e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f150:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f156:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f15a:	789b      	ldrb	r3, [r3, #2]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d005      	beq.n	800f16c <find_volume+0x444>
 800f160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f162:	789b      	ldrb	r3, [r3, #2]
 800f164:	2b02      	cmp	r3, #2
 800f166:	d001      	beq.n	800f16c <find_volume+0x444>
 800f168:	230d      	movs	r3, #13
 800f16a:	e15d      	b.n	800f428 <find_volume+0x700>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f16e:	789b      	ldrb	r3, [r3, #2]
 800f170:	461a      	mov	r2, r3
 800f172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f174:	fb02 f303 	mul.w	r3, r2, r3
 800f178:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f17a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f17c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f180:	b29a      	uxth	r2, r3
 800f182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f184:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f188:	895b      	ldrh	r3, [r3, #10]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d008      	beq.n	800f1a0 <find_volume+0x478>
 800f18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f190:	895b      	ldrh	r3, [r3, #10]
 800f192:	461a      	mov	r2, r3
 800f194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f196:	895b      	ldrh	r3, [r3, #10]
 800f198:	3b01      	subs	r3, #1
 800f19a:	4013      	ands	r3, r2
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d001      	beq.n	800f1a4 <find_volume+0x47c>
 800f1a0:	230d      	movs	r3, #13
 800f1a2:	e141      	b.n	800f428 <find_volume+0x700>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1a6:	333c      	adds	r3, #60	; 0x3c
 800f1a8:	3311      	adds	r3, #17
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fc fd0c 	bl	800bbc8 <ld_word>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ba:	891b      	ldrh	r3, [r3, #8]
 800f1bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1be:	8992      	ldrh	r2, [r2, #12]
 800f1c0:	0952      	lsrs	r2, r2, #5
 800f1c2:	b292      	uxth	r2, r2
 800f1c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1c8:	fb02 f201 	mul.w	r2, r2, r1
 800f1cc:	1a9b      	subs	r3, r3, r2
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <find_volume+0x4b0>
 800f1d4:	230d      	movs	r3, #13
 800f1d6:	e127      	b.n	800f428 <find_volume+0x700>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1da:	333c      	adds	r3, #60	; 0x3c
 800f1dc:	3313      	adds	r3, #19
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fc fcf2 	bl	800bbc8 <ld_word>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <find_volume+0x4d4>
 800f1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1f0:	333c      	adds	r3, #60	; 0x3c
 800f1f2:	3320      	adds	r3, #32
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fc fcff 	bl	800bbf8 <ld_dword>
 800f1fa:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1fe:	333c      	adds	r3, #60	; 0x3c
 800f200:	330e      	adds	r3, #14
 800f202:	4618      	mov	r0, r3
 800f204:	f7fc fce0 	bl	800bbc8 <ld_word>
 800f208:	4603      	mov	r3, r0
 800f20a:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f20c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d101      	bne.n	800f216 <find_volume+0x4ee>
 800f212:	230d      	movs	r3, #13
 800f214:	e108      	b.n	800f428 <find_volume+0x700>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f216:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f21a:	4413      	add	r3, r2
 800f21c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f21e:	8911      	ldrh	r1, [r2, #8]
 800f220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f222:	8992      	ldrh	r2, [r2, #12]
 800f224:	0952      	lsrs	r2, r2, #5
 800f226:	b292      	uxth	r2, r2
 800f228:	fbb1 f2f2 	udiv	r2, r1, r2
 800f22c:	b292      	uxth	r2, r2
 800f22e:	4413      	add	r3, r2
 800f230:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f232:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f236:	429a      	cmp	r2, r3
 800f238:	d201      	bcs.n	800f23e <find_volume+0x516>
 800f23a:	230d      	movs	r3, #13
 800f23c:	e0f4      	b.n	800f428 <find_volume+0x700>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f23e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f242:	1ad3      	subs	r3, r2, r3
 800f244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f246:	8952      	ldrh	r2, [r2, #10]
 800f248:	fbb3 f3f2 	udiv	r3, r3, r2
 800f24c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	2b00      	cmp	r3, #0
 800f252:	d101      	bne.n	800f258 <find_volume+0x530>
 800f254:	230d      	movs	r3, #13
 800f256:	e0e7      	b.n	800f428 <find_volume+0x700>
		fmt = FS_FAT32;
 800f258:	2303      	movs	r3, #3
 800f25a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f264:	4293      	cmp	r3, r2
 800f266:	d802      	bhi.n	800f26e <find_volume+0x546>
 800f268:	2302      	movs	r3, #2
 800f26a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f270:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f274:	4293      	cmp	r3, r2
 800f276:	d802      	bhi.n	800f27e <find_volume+0x556>
 800f278:	2301      	movs	r3, #1
 800f27a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	1c9a      	adds	r2, r3, #2
 800f282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f284:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f28a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f28c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f28e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f290:	441a      	add	r2, r3
 800f292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f294:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	441a      	add	r2, r3
 800f29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f29e:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f2a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f2a4:	2b03      	cmp	r3, #3
 800f2a6:	d11e      	bne.n	800f2e6 <find_volume+0x5be>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2aa:	333c      	adds	r3, #60	; 0x3c
 800f2ac:	332a      	adds	r3, #42	; 0x2a
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fc fc8a 	bl	800bbc8 <ld_word>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <find_volume+0x596>
 800f2ba:	230d      	movs	r3, #13
 800f2bc:	e0b4      	b.n	800f428 <find_volume+0x700>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c0:	891b      	ldrh	r3, [r3, #8]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <find_volume+0x5a2>
 800f2c6:	230d      	movs	r3, #13
 800f2c8:	e0ae      	b.n	800f428 <find_volume+0x700>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2cc:	333c      	adds	r3, #60	; 0x3c
 800f2ce:	332c      	adds	r3, #44	; 0x2c
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fc fc91 	bl	800bbf8 <ld_dword>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2da:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2de:	6a1b      	ldr	r3, [r3, #32]
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2e4:	e01f      	b.n	800f326 <find_volume+0x5fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2e8:	891b      	ldrh	r3, [r3, #8]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d101      	bne.n	800f2f2 <find_volume+0x5ca>
 800f2ee:	230d      	movs	r3, #13
 800f2f0:	e09a      	b.n	800f428 <find_volume+0x700>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2f8:	441a      	add	r2, r3
 800f2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2fc:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f2fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f302:	2b02      	cmp	r3, #2
 800f304:	d103      	bne.n	800f30e <find_volume+0x5e6>
 800f306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	005b      	lsls	r3, r3, #1
 800f30c:	e00a      	b.n	800f324 <find_volume+0x5fc>
 800f30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f310:	6a1a      	ldr	r2, [r3, #32]
 800f312:	4613      	mov	r3, r2
 800f314:	005b      	lsls	r3, r3, #1
 800f316:	4413      	add	r3, r2
 800f318:	085a      	lsrs	r2, r3, #1
 800f31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f31c:	6a1b      	ldr	r3, [r3, #32]
 800f31e:	f003 0301 	and.w	r3, r3, #1
 800f322:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f324:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f32a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f32c:	899b      	ldrh	r3, [r3, #12]
 800f32e:	4619      	mov	r1, r3
 800f330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f332:	440b      	add	r3, r1
 800f334:	3b01      	subs	r3, #1
 800f336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f338:	8989      	ldrh	r1, [r1, #12]
 800f33a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f33e:	429a      	cmp	r2, r3
 800f340:	d201      	bcs.n	800f346 <find_volume+0x61e>
 800f342:	230d      	movs	r3, #13
 800f344:	e070      	b.n	800f428 <find_volume+0x700>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f348:	f04f 32ff 	mov.w	r2, #4294967295
 800f34c:	61da      	str	r2, [r3, #28]
 800f34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f350:	69da      	ldr	r2, [r3, #28]
 800f352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f354:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f358:	2280      	movs	r2, #128	; 0x80
 800f35a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f35c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f360:	2b03      	cmp	r3, #3
 800f362:	d149      	bne.n	800f3f8 <find_volume+0x6d0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f366:	333c      	adds	r3, #60	; 0x3c
 800f368:	3330      	adds	r3, #48	; 0x30
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fc fc2c 	bl	800bbc8 <ld_word>
 800f370:	4603      	mov	r3, r0
 800f372:	2b01      	cmp	r3, #1
 800f374:	d140      	bne.n	800f3f8 <find_volume+0x6d0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f378:	3301      	adds	r3, #1
 800f37a:	4619      	mov	r1, r3
 800f37c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f37e:	f7fd f817 	bl	800c3b0 <move_window>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d137      	bne.n	800f3f8 <find_volume+0x6d0>
		{
			fs->fsi_flag = 0;
 800f388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f38a:	2200      	movs	r2, #0
 800f38c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f38e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f390:	333c      	adds	r3, #60	; 0x3c
 800f392:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f396:	4618      	mov	r0, r3
 800f398:	f7fc fc16 	bl	800bbc8 <ld_word>
 800f39c:	4603      	mov	r3, r0
 800f39e:	461a      	mov	r2, r3
 800f3a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d127      	bne.n	800f3f8 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f3a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3aa:	333c      	adds	r3, #60	; 0x3c
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fc fc23 	bl	800bbf8 <ld_dword>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	4a1f      	ldr	r2, [pc, #124]	; (800f434 <find_volume+0x70c>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d11e      	bne.n	800f3f8 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3bc:	333c      	adds	r3, #60	; 0x3c
 800f3be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fc fc18 	bl	800bbf8 <ld_dword>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	4a1b      	ldr	r2, [pc, #108]	; (800f438 <find_volume+0x710>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d113      	bne.n	800f3f8 <find_volume+0x6d0>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3d2:	333c      	adds	r3, #60	; 0x3c
 800f3d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7fc fc0d 	bl	800bbf8 <ld_dword>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e2:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e6:	333c      	adds	r3, #60	; 0x3c
 800f3e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fc fc03 	bl	800bbf8 <ld_dword>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3f6:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3fa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f3fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f400:	4b0e      	ldr	r3, [pc, #56]	; (800f43c <find_volume+0x714>)
 800f402:	881b      	ldrh	r3, [r3, #0]
 800f404:	3301      	adds	r3, #1
 800f406:	b29a      	uxth	r2, r3
 800f408:	4b0c      	ldr	r3, [pc, #48]	; (800f43c <find_volume+0x714>)
 800f40a:	801a      	strh	r2, [r3, #0]
 800f40c:	4b0b      	ldr	r3, [pc, #44]	; (800f43c <find_volume+0x714>)
 800f40e:	881a      	ldrh	r2, [r3, #0]
 800f410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f412:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f416:	4a0a      	ldr	r2, [pc, #40]	; (800f440 <find_volume+0x718>)
 800f418:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800f41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f41c:	4a09      	ldr	r2, [pc, #36]	; (800f444 <find_volume+0x71c>)
 800f41e:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f420:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f422:	f7fc ff5d 	bl	800c2e0 <clear_lock>
#endif
	return FR_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3760      	adds	r7, #96	; 0x60
 800f42c:	46bd      	mov	sp, r7
 800f42e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f432:	bf00      	nop
 800f434:	41615252 	.word	0x41615252
 800f438:	61417272 	.word	0x61417272
 800f43c:	200000b8 	.word	0x200000b8
 800f440:	2000033c 	.word	0x2000033c
 800f444:	200000dc 	.word	0x200000dc

0800f448 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f452:	2309      	movs	r3, #9
 800f454:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d01c      	beq.n	800f496 <validate+0x4e>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d018      	beq.n	800f496 <validate+0x4e>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d013      	beq.n	800f496 <validate+0x4e>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	889a      	ldrh	r2, [r3, #4]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	88db      	ldrh	r3, [r3, #6]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d10c      	bne.n	800f496 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	785b      	ldrb	r3, [r3, #1]
 800f482:	4618      	mov	r0, r3
 800f484:	f7fc fb02 	bl	800ba8c <disk_status>
 800f488:	4603      	mov	r3, r0
 800f48a:	f003 0301 	and.w	r3, r3, #1
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d101      	bne.n	800f496 <validate+0x4e>
			res = FR_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d102      	bne.n	800f4a2 <validate+0x5a>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	e000      	b.n	800f4a4 <validate+0x5c>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	683a      	ldr	r2, [r7, #0]
 800f4a6:	6013      	str	r3, [r2, #0]
	return res;
 800f4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
	...

0800f4b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b088      	sub	sp, #32
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	4613      	mov	r3, r2
 800f4c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f4c6:	f107 0310 	add.w	r3, r7, #16
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7ff fb84 	bl	800ebd8 <get_ldnumber>
 800f4d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	da01      	bge.n	800f4dc <f_mount+0x28>
 800f4d8:	230b      	movs	r3, #11
 800f4da:	e02b      	b.n	800f534 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f4dc:	4a17      	ldr	r2, [pc, #92]	; (800f53c <f_mount+0x88>)
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d005      	beq.n	800f4f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f4ec:	69b8      	ldr	r0, [r7, #24]
 800f4ee:	f7fc fef7 	bl	800c2e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2200      	movs	r2, #0
 800f502:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	490d      	ldr	r1, [pc, #52]	; (800f53c <f_mount+0x88>)
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d002      	beq.n	800f51a <f_mount+0x66>
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	2b01      	cmp	r3, #1
 800f518:	d001      	beq.n	800f51e <f_mount+0x6a>
 800f51a:	2300      	movs	r3, #0
 800f51c:	e00a      	b.n	800f534 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f51e:	f107 010c 	add.w	r1, r7, #12
 800f522:	f107 0308 	add.w	r3, r7, #8
 800f526:	2200      	movs	r2, #0
 800f528:	4618      	mov	r0, r3
 800f52a:	f7ff fbfd 	bl	800ed28 <find_volume>
 800f52e:	4603      	mov	r3, r0
 800f530:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f532:	7dfb      	ldrb	r3, [r7, #23]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3720      	adds	r7, #32
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	200000b4 	.word	0x200000b4

0800f540 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f540:	b5b0      	push	{r4, r5, r7, lr}
 800f542:	b0a2      	sub	sp, #136	; 0x88
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	4613      	mov	r3, r2
 800f54c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d101      	bne.n	800f558 <f_open+0x18>
 800f554:	2309      	movs	r3, #9
 800f556:	e2a0      	b.n	800fa9a <f_open+0x55a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f558:	79fb      	ldrb	r3, [r7, #7]
 800f55a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f55e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f560:	79fa      	ldrb	r2, [r7, #7]
 800f562:	f107 0114 	add.w	r1, r7, #20
 800f566:	f107 0308 	add.w	r3, r7, #8
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7ff fbdc 	bl	800ed28 <find_volume>
 800f570:	4603      	mov	r3, r0
 800f572:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 800f576:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f040 8284 	bne.w	800fa88 <f_open+0x548>
		dj.obj.fs = fs;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	f107 0318 	add.w	r3, r7, #24
 800f58a:	4611      	mov	r1, r2
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7ff fa75 	bl	800ea7c <follow_path>
 800f592:	4603      	mov	r3, r0
 800f594:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f598:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d11a      	bne.n	800f5d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f5a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800f5a4:	b25b      	sxtb	r3, r3
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	da03      	bge.n	800f5b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f5aa:	2306      	movs	r3, #6
 800f5ac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f5b0:	e011      	b.n	800f5d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f5b2:	79fb      	ldrb	r3, [r7, #7]
 800f5b4:	f023 0301 	bic.w	r3, r3, #1
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	bf14      	ite	ne
 800f5bc:	2301      	movne	r3, #1
 800f5be:	2300      	moveq	r3, #0
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	f107 0318 	add.w	r3, r7, #24
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fc fd40 	bl	800c050 <chk_lock>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f5d6:	79fb      	ldrb	r3, [r7, #7]
 800f5d8:	f003 031c 	and.w	r3, r3, #28
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 8109 	beq.w	800f7f4 <f_open+0x2b4>
			if (res != FR_OK) {					/* No file, create new */
 800f5e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d017      	beq.n	800f61a <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f5ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f5ee:	2b04      	cmp	r3, #4
 800f5f0:	d10e      	bne.n	800f610 <f_open+0xd0>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f5f2:	f7fc fd89 	bl	800c108 <enq_lock>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d006      	beq.n	800f60a <f_open+0xca>
 800f5fc:	f107 0318 	add.w	r3, r7, #24
 800f600:	4618      	mov	r0, r3
 800f602:	f7fe fdf1 	bl	800e1e8 <dir_register>
 800f606:	4603      	mov	r3, r0
 800f608:	e000      	b.n	800f60c <f_open+0xcc>
 800f60a:	2312      	movs	r3, #18
 800f60c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f610:	79fb      	ldrb	r3, [r7, #7]
 800f612:	f043 0308 	orr.w	r3, r3, #8
 800f616:	71fb      	strb	r3, [r7, #7]
 800f618:	e010      	b.n	800f63c <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f61a:	7fbb      	ldrb	r3, [r7, #30]
 800f61c:	f003 0311 	and.w	r3, r3, #17
 800f620:	2b00      	cmp	r3, #0
 800f622:	d003      	beq.n	800f62c <f_open+0xec>
					res = FR_DENIED;
 800f624:	2307      	movs	r3, #7
 800f626:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f62a:	e007      	b.n	800f63c <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f62c:	79fb      	ldrb	r3, [r7, #7]
 800f62e:	f003 0304 	and.w	r3, r3, #4
 800f632:	2b00      	cmp	r3, #0
 800f634:	d002      	beq.n	800f63c <f_open+0xfc>
 800f636:	2308      	movs	r3, #8
 800f638:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f63c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f640:	2b00      	cmp	r3, #0
 800f642:	f040 80f1 	bne.w	800f828 <f_open+0x2e8>
 800f646:	79fb      	ldrb	r3, [r7, #7]
 800f648:	f003 0308 	and.w	r3, r3, #8
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f000 80eb 	beq.w	800f828 <f_open+0x2e8>
				dw = GET_FATTIME();
 800f652:	f7f9 fa1f 	bl	8008a94 <get_fattime>
 800f656:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	f040 8082 	bne.w	800f766 <f_open+0x226>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800f662:	697a      	ldr	r2, [r7, #20]
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	695b      	ldr	r3, [r3, #20]
 800f66c:	3334      	adds	r3, #52	; 0x34
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fc fac2 	bl	800bbf8 <ld_dword>
 800f674:	4602      	mov	r2, r0
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	695b      	ldr	r3, [r3, #20]
 800f67e:	3338      	adds	r3, #56	; 0x38
 800f680:	4618      	mov	r0, r3
 800f682:	f7fc fadc 	bl	800bc3e <ld_qword>
 800f686:	4602      	mov	r2, r0
 800f688:	460b      	mov	r3, r1
 800f68a:	68f9      	ldr	r1, [r7, #12]
 800f68c:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	695b      	ldr	r3, [r3, #20]
 800f694:	3321      	adds	r3, #33	; 0x21
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	f003 0302 	and.w	r3, r3, #2
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	695b      	ldr	r3, [r3, #20]
 800f6ac:	3308      	adds	r3, #8
 800f6ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fc fb9a 	bl	800bdea <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	695b      	ldr	r3, [r3, #20]
 800f6ba:	3314      	adds	r3, #20
 800f6bc:	2200      	movs	r2, #0
 800f6be:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	695b      	ldr	r3, [r3, #20]
 800f6c4:	330c      	adds	r3, #12
 800f6c6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fc fb8e 	bl	800bdea <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	3315      	adds	r3, #21
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	695b      	ldr	r3, [r3, #20]
 800f6dc:	3304      	adds	r3, #4
 800f6de:	2220      	movs	r2, #32
 800f6e0:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	695b      	ldr	r3, [r3, #20]
 800f6e6:	3334      	adds	r3, #52	; 0x34
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fc fb7d 	bl	800bdea <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	695b      	ldr	r3, [r3, #20]
 800f6f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f6f8:	f04f 0200 	mov.w	r2, #0
 800f6fc:	f04f 0300 	mov.w	r3, #0
 800f700:	4608      	mov	r0, r1
 800f702:	f7fc fb9e 	bl	800be42 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f70e:	f04f 0200 	mov.w	r2, #0
 800f712:	f04f 0300 	mov.w	r3, #0
 800f716:	4608      	mov	r0, r1
 800f718:	f7fc fb93 	bl	800be42 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	695b      	ldr	r3, [r3, #20]
 800f720:	3321      	adds	r3, #33	; 0x21
 800f722:	2201      	movs	r2, #1
 800f724:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f726:	f107 0318 	add.w	r3, r7, #24
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fe faa9 	bl	800dc82 <store_xdir>
 800f730:	4603      	mov	r3, r0
 800f732:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800f736:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d174      	bne.n	800f828 <f_open+0x2e8>
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	689b      	ldr	r3, [r3, #8]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d070      	beq.n	800f828 <f_open+0x2e8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	2200      	movs	r2, #0
 800f74e:	4619      	mov	r1, r3
 800f750:	f7fd faba 	bl	800ccc8 <remove_chain>
 800f754:	4603      	mov	r3, r0
 800f756:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	689a      	ldr	r2, [r3, #8]
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	3a01      	subs	r2, #1
 800f762:	619a      	str	r2, [r3, #24]
 800f764:	e060      	b.n	800f828 <f_open+0x2e8>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f768:	330e      	adds	r3, #14
 800f76a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fc fb3c 	bl	800bdea <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f774:	3316      	adds	r3, #22
 800f776:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fc fb36 	bl	800bdea <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f77e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f780:	330b      	adds	r3, #11
 800f782:	2220      	movs	r2, #32
 800f784:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f78a:	4611      	mov	r1, r2
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fd fe6a 	bl	800d466 <ld_clust>
 800f792:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f798:	2200      	movs	r2, #0
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7fd fe82 	bl	800d4a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7a2:	331c      	adds	r3, #28
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fc fb1f 	bl	800bdea <st_dword>
					fs->wflag = 1;
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f7b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d037      	beq.n	800f828 <f_open+0x2e8>
						dw = fs->winsect;
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7bc:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 800f7be:	f107 0318 	add.w	r3, r7, #24
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7fd fa7e 	bl	800ccc8 <remove_chain>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800f7d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d126      	bne.n	800f828 <f_open+0x2e8>
							res = move_window(fs, dw);
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fc fde6 	bl	800c3b0 <move_window>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f7ee:	3a01      	subs	r2, #1
 800f7f0:	619a      	str	r2, [r3, #24]
 800f7f2:	e019      	b.n	800f828 <f_open+0x2e8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f7f4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d115      	bne.n	800f828 <f_open+0x2e8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f7fc:	7fbb      	ldrb	r3, [r7, #30]
 800f7fe:	f003 0310 	and.w	r3, r3, #16
 800f802:	2b00      	cmp	r3, #0
 800f804:	d003      	beq.n	800f80e <f_open+0x2ce>
					res = FR_NO_FILE;
 800f806:	2304      	movs	r3, #4
 800f808:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f80c:	e00c      	b.n	800f828 <f_open+0x2e8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	f003 0302 	and.w	r3, r3, #2
 800f814:	2b00      	cmp	r3, #0
 800f816:	d007      	beq.n	800f828 <f_open+0x2e8>
 800f818:	7fbb      	ldrb	r3, [r7, #30]
 800f81a:	f003 0301 	and.w	r3, r3, #1
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d002      	beq.n	800f828 <f_open+0x2e8>
						res = FR_DENIED;
 800f822:	2307      	movs	r3, #7
 800f824:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 800f828:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d128      	bne.n	800f882 <f_open+0x342>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	f003 0308 	and.w	r3, r3, #8
 800f836:	2b00      	cmp	r3, #0
 800f838:	d003      	beq.n	800f842 <f_open+0x302>
				mode |= FA_MODIFIED;
 800f83a:	79fb      	ldrb	r3, [r7, #7]
 800f83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f840:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800f84a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f850:	79fb      	ldrb	r3, [r7, #7]
 800f852:	f023 0301 	bic.w	r3, r3, #1
 800f856:	2b00      	cmp	r3, #0
 800f858:	bf14      	ite	ne
 800f85a:	2301      	movne	r3, #1
 800f85c:	2300      	moveq	r3, #0
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	461a      	mov	r2, r3
 800f862:	f107 0318 	add.w	r3, r7, #24
 800f866:	4611      	mov	r1, r2
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fc fc6f 	bl	800c14c <inc_lock>
 800f86e:	4602      	mov	r2, r0
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d102      	bne.n	800f882 <f_open+0x342>
 800f87c:	2302      	movs	r3, #2
 800f87e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f882:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f886:	2b00      	cmp	r3, #0
 800f888:	f040 80fe 	bne.w	800fa88 <f_open+0x548>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	2b04      	cmp	r3, #4
 800f892:	d12c      	bne.n	800f8ee <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800f894:	6a3a      	ldr	r2, [r7, #32]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800f89a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f89e:	4613      	mov	r3, r2
 800f8a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f8a4:	7ffa      	ldrb	r2, [r7, #31]
 800f8a6:	431a      	orrs	r2, r3
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800f8ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	695b      	ldr	r3, [r3, #20]
 800f8b6:	3334      	adds	r3, #52	; 0x34
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fc f99d 	bl	800bbf8 <ld_dword>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	695b      	ldr	r3, [r3, #20]
 800f8c8:	3338      	adds	r3, #56	; 0x38
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fc f9b7 	bl	800bc3e <ld_qword>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	68f9      	ldr	r1, [r7, #12]
 800f8d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	695b      	ldr	r3, [r3, #20]
 800f8de:	3321      	adds	r3, #33	; 0x21
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	f003 0302 	and.w	r3, r3, #2
 800f8e6:	b2da      	uxtb	r2, r3
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	71da      	strb	r2, [r3, #7]
 800f8ec:	e014      	b.n	800f918 <f_open+0x3d8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7fd fdb6 	bl	800d466 <ld_clust>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f902:	331c      	adds	r3, #28
 800f904:	4618      	mov	r0, r3
 800f906:	f7fc f977 	bl	800bbf8 <ld_dword>
 800f90a:	4603      	mov	r3, r0
 800f90c:	461a      	mov	r2, r3
 800f90e:	f04f 0300 	mov.w	r3, #0
 800f912:	68f9      	ldr	r1, [r7, #12]
 800f914:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2200      	movs	r2, #0
 800f91c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f91e:	697a      	ldr	r2, [r7, #20]
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	88da      	ldrh	r2, [r3, #6]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	79fa      	ldrb	r2, [r7, #7]
 800f930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2200      	movs	r2, #0
 800f940:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f942:	68f9      	ldr	r1, [r7, #12]
 800f944:	f04f 0200 	mov.w	r2, #0
 800f948:	f04f 0300 	mov.w	r3, #0
 800f94c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	3354      	adds	r3, #84	; 0x54
 800f954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f958:	2100      	movs	r1, #0
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7fc fb1a 	bl	800bf94 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f960:	79fb      	ldrb	r3, [r7, #7]
 800f962:	f003 0320 	and.w	r3, r3, #32
 800f966:	2b00      	cmp	r3, #0
 800f968:	f000 808e 	beq.w	800fa88 <f_open+0x548>
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f972:	4313      	orrs	r3, r2
 800f974:	f000 8088 	beq.w	800fa88 <f_open+0x548>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f97e:	68f9      	ldr	r1, [r7, #12]
 800f980:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	895b      	ldrh	r3, [r3, #10]
 800f988:	461a      	mov	r2, r3
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	fb03 f302 	mul.w	r3, r3, r2
 800f992:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f9a2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800f9a6:	e021      	b.n	800f9ec <f_open+0x4ac>
					clst = get_fat(&fp->obj, clst);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fc fdbc 	bl	800c52c <get_fat>
 800f9b4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 800f9b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d802      	bhi.n	800f9c6 <f_open+0x486>
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f9c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ce:	d102      	bne.n	800f9d6 <f_open+0x496>
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9d8:	461a      	mov	r2, r3
 800f9da:	f04f 0300 	mov.w	r3, #0
 800f9de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800f9e2:	1a84      	subs	r4, r0, r2
 800f9e4:	eb61 0503 	sbc.w	r5, r1, r3
 800f9e8:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
 800f9ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d109      	bne.n	800fa08 <f_open+0x4c8>
 800f9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f04f 0100 	mov.w	r1, #0
 800f9fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fa00:	4299      	cmp	r1, r3
 800fa02:	bf08      	it	eq
 800fa04:	4290      	cmpeq	r0, r2
 800fa06:	d3cf      	bcc.n	800f9a8 <f_open+0x468>
				}
				fp->clust = clst;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa0e:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fa10:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d137      	bne.n	800fa88 <f_open+0x548>
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	899b      	ldrh	r3, [r3, #12]
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	f04f 0300 	mov.w	r3, #0
 800fa22:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800fa26:	f7f0 ff59 	bl	80008dc <__aeabi_uldivmod>
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	d02c      	beq.n	800fa88 <f_open+0x548>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fc fd59 	bl	800c4ec <clust2sect>
 800fa3a:	66b8      	str	r0, [r7, #104]	; 0x68
 800fa3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d103      	bne.n	800fa4a <f_open+0x50a>
						res = FR_INT_ERR;
 800fa42:	2302      	movs	r3, #2
 800fa44:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800fa48:	e01e      	b.n	800fa88 <f_open+0x548>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	899b      	ldrh	r3, [r3, #12]
 800fa4e:	b29a      	uxth	r2, r3
 800fa50:	f04f 0300 	mov.w	r3, #0
 800fa54:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800fa58:	f7f0 ff40 	bl	80008dc <__aeabi_uldivmod>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa62:	441a      	add	r2, r3
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	7858      	ldrb	r0, [r3, #1]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa76:	2301      	movs	r3, #1
 800fa78:	f7fc f848 	bl	800bb0c <disk_read>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <f_open+0x548>
 800fa82:	2301      	movs	r3, #1
 800fa84:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fa88:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d002      	beq.n	800fa96 <f_open+0x556>
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2200      	movs	r2, #0
 800fa94:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fa96:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3788      	adds	r7, #136	; 0x88
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bdb0      	pop	{r4, r5, r7, pc}

0800faa2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800faa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faa4:	b08d      	sub	sp, #52	; 0x34
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	60f8      	str	r0, [r7, #12]
 800faaa:	60b9      	str	r1, [r7, #8]
 800faac:	607a      	str	r2, [r7, #4]
 800faae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	2200      	movs	r2, #0
 800fab8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f107 0210 	add.w	r2, r7, #16
 800fac0:	4611      	mov	r1, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7ff fcc0 	bl	800f448 <validate>
 800fac8:	4603      	mov	r3, r0
 800faca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800face:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d108      	bne.n	800fae8 <f_write+0x46>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fadc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d002      	beq.n	800faee <f_write+0x4c>
 800fae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800faec:	e1a1      	b.n	800fe32 <f_write+0x390>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800faf4:	f003 0302 	and.w	r3, r3, #2
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d101      	bne.n	800fb00 <f_write+0x5e>
 800fafc:	2307      	movs	r3, #7
 800fafe:	e198      	b.n	800fe32 <f_write+0x390>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	2b04      	cmp	r3, #4
 800fb06:	f000 8184 	beq.w	800fe12 <f_write+0x370>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	18d1      	adds	r1, r2, r3
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	4299      	cmp	r1, r3
 800fb1e:	f080 8178 	bcs.w	800fe12 <f_write+0x370>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fb28:	4613      	mov	r3, r2
 800fb2a:	43db      	mvns	r3, r3
 800fb2c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fb2e:	e170      	b.n	800fe12 <f_write+0x370>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	899b      	ldrh	r3, [r3, #12]
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	f04f 0300 	mov.w	r3, #0
 800fb40:	f7f0 fecc 	bl	80008dc <__aeabi_uldivmod>
 800fb44:	4313      	orrs	r3, r2
 800fb46:	f040 8107 	bne.w	800fd58 <f_write+0x2b6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	899b      	ldrh	r3, [r3, #12]
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	f04f 0300 	mov.w	r3, #0
 800fb5a:	f7f0 febf 	bl	80008dc <__aeabi_uldivmod>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	460b      	mov	r3, r1
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	895b      	ldrh	r3, [r3, #10]
 800fb66:	3b01      	subs	r3, #1
 800fb68:	4013      	ands	r3, r2
 800fb6a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d146      	bne.n	800fc00 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	d10c      	bne.n	800fb96 <f_write+0xf4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d11a      	bne.n	800fbbe <f_write+0x11c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fd f94f 	bl	800ce30 <create_chain>
 800fb92:	62b8      	str	r0, [r7, #40]	; 0x28
 800fb94:	e013      	b.n	800fbbe <f_write+0x11c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d007      	beq.n	800fbae <f_write+0x10c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f7fd fa44 	bl	800d032 <clmt_clust>
 800fbaa:	62b8      	str	r0, [r7, #40]	; 0x28
 800fbac:	e007      	b.n	800fbbe <f_write+0x11c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	4610      	mov	r0, r2
 800fbb8:	f7fd f93a 	bl	800ce30 <create_chain>
 800fbbc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 812b 	beq.w	800fe1c <f_write+0x37a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d105      	bne.n	800fbd8 <f_write+0x136>
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2202      	movs	r2, #2
 800fbd0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fbd4:	2302      	movs	r3, #2
 800fbd6:	e12c      	b.n	800fe32 <f_write+0x390>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbde:	d105      	bne.n	800fbec <f_write+0x14a>
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e122      	b.n	800fe32 <f_write+0x390>
				fp->clust = clst;			/* Update current cluster */
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbf0:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d102      	bne.n	800fc00 <f_write+0x15e>
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbfe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc06:	b25b      	sxtb	r3, r3
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	da1b      	bge.n	800fc44 <f_write+0x1a2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	7858      	ldrb	r0, [r3, #1]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	f7fb ff96 	bl	800bb4c <disk_write>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d005      	beq.n	800fc32 <f_write+0x190>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e0ff      	b.n	800fe32 <f_write+0x390>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc3c:	b2da      	uxtb	r2, r3
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	4610      	mov	r0, r2
 800fc4e:	f7fc fc4d 	bl	800c4ec <clust2sect>
 800fc52:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d105      	bne.n	800fc66 <f_write+0x1c4>
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2202      	movs	r2, #2
 800fc5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fc62:	2302      	movs	r3, #2
 800fc64:	e0e5      	b.n	800fe32 <f_write+0x390>
			sect += csect;
 800fc66:	697a      	ldr	r2, [r7, #20]
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	899b      	ldrh	r3, [r3, #12]
 800fc72:	461a      	mov	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc7a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fc7c:	6a3b      	ldr	r3, [r7, #32]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d046      	beq.n	800fd10 <f_write+0x26e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fc82:	69ba      	ldr	r2, [r7, #24]
 800fc84:	6a3b      	ldr	r3, [r7, #32]
 800fc86:	4413      	add	r3, r2
 800fc88:	693a      	ldr	r2, [r7, #16]
 800fc8a:	8952      	ldrh	r2, [r2, #10]
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d905      	bls.n	800fc9c <f_write+0x1fa>
					cc = fs->csize - csect;
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	895b      	ldrh	r3, [r3, #10]
 800fc94:	461a      	mov	r2, r3
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	7858      	ldrb	r0, [r3, #1]
 800fca0:	6a3b      	ldr	r3, [r7, #32]
 800fca2:	697a      	ldr	r2, [r7, #20]
 800fca4:	69f9      	ldr	r1, [r7, #28]
 800fca6:	f7fb ff51 	bl	800bb4c <disk_write>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d005      	beq.n	800fcbc <f_write+0x21a>
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fcb8:	2301      	movs	r3, #1
 800fcba:	e0ba      	b.n	800fe32 <f_write+0x390>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	1ad3      	subs	r3, r2, r3
 800fcc4:	6a3a      	ldr	r2, [r7, #32]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d91a      	bls.n	800fd00 <f_write+0x25e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	8992      	ldrh	r2, [r2, #12]
 800fcdc:	fb02 f303 	mul.w	r3, r2, r3
 800fce0:	69fa      	ldr	r2, [r7, #28]
 800fce2:	18d1      	adds	r1, r2, r3
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	899b      	ldrh	r3, [r3, #12]
 800fce8:	461a      	mov	r2, r3
 800fcea:	f7fc f932 	bl	800bf52 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcf8:	b2da      	uxtb	r2, r3
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	899b      	ldrh	r3, [r3, #12]
 800fd04:	461a      	mov	r2, r3
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	fb02 f303 	mul.w	r3, r2, r3
 800fd0c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fd0e:	e056      	b.n	800fdbe <f_write+0x31c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd14:	697a      	ldr	r2, [r7, #20]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d01b      	beq.n	800fd52 <f_write+0x2b0>
				fp->fptr < fp->obj.objsize &&
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fd26:	4299      	cmp	r1, r3
 800fd28:	bf08      	it	eq
 800fd2a:	4290      	cmpeq	r0, r2
 800fd2c:	d211      	bcs.n	800fd52 <f_write+0x2b0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	7858      	ldrb	r0, [r3, #1]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fd38:	2301      	movs	r3, #1
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	f7fb fee6 	bl	800bb0c <disk_read>
 800fd40:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d005      	beq.n	800fd52 <f_write+0x2b0>
					ABORT(fs, FR_DISK_ERR);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2201      	movs	r2, #1
 800fd4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e06f      	b.n	800fe32 <f_write+0x390>
			}
#endif
			fp->sect = sect;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	697a      	ldr	r2, [r7, #20]
 800fd56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	899b      	ldrh	r3, [r3, #12]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd64:	4613      	mov	r3, r2
 800fd66:	693a      	ldr	r2, [r7, #16]
 800fd68:	8992      	ldrh	r2, [r2, #12]
 800fd6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd6e:	fb02 f201 	mul.w	r2, r2, r1
 800fd72:	1a9b      	subs	r3, r3, r2
 800fd74:	1ac3      	subs	r3, r0, r3
 800fd76:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d901      	bls.n	800fd84 <f_write+0x2e2>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f103 0654 	add.w	r6, r3, #84	; 0x54
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	899b      	ldrh	r3, [r3, #12]
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	f04f 0300 	mov.w	r3, #0
 800fd9a:	f7f0 fd9f 	bl	80008dc <__aeabi_uldivmod>
 800fd9e:	4613      	mov	r3, r2
 800fda0:	4433      	add	r3, r6
 800fda2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fda4:	69f9      	ldr	r1, [r7, #28]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fc f8d3 	bl	800bf52 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fdbe:	69fa      	ldr	r2, [r7, #28]
 800fdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc2:	4413      	add	r3, r2
 800fdc4:	61fb      	str	r3, [r7, #28]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	461a      	mov	r2, r3
 800fdd0:	f04f 0300 	mov.w	r3, #0
 800fdd4:	1884      	adds	r4, r0, r2
 800fdd6:	eb41 0503 	adc.w	r5, r1, r3
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fde6:	68f9      	ldr	r1, [r7, #12]
 800fde8:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800fdec:	428b      	cmp	r3, r1
 800fdee:	bf08      	it	eq
 800fdf0:	4282      	cmpeq	r2, r0
 800fdf2:	d201      	bcs.n	800fdf8 <f_write+0x356>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	68f9      	ldr	r1, [r7, #12]
 800fdfa:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe04:	441a      	add	r2, r3
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	601a      	str	r2, [r3, #0]
 800fe0a:	687a      	ldr	r2, [r7, #4]
 800fe0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f47f ae8b 	bne.w	800fb30 <f_write+0x8e>
 800fe1a:	e000      	b.n	800fe1e <f_write+0x37c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fe1c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe28:	b2da      	uxtb	r2, r3
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800fe30:	2300      	movs	r3, #0
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3734      	adds	r7, #52	; 0x34
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b09a      	sub	sp, #104	; 0x68
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fe48:	4611      	mov	r1, r2
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7ff fafc 	bl	800f448 <validate>
 800fe50:	4603      	mov	r3, r0
 800fe52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800fe56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	f040 8105 	bne.w	801006a <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f000 80fd 	beq.w	801006a <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe76:	b25b      	sxtb	r3, r3
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	da17      	bge.n	800feac <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fe7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe7e:	7858      	ldrb	r0, [r3, #1]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	f7fb fe5e 	bl	800bb4c <disk_write>
 800fe90:	4603      	mov	r3, r0
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d001      	beq.n	800fe9a <f_sync+0x60>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e0e9      	b.n	801006e <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800feac:	f7f8 fdf2 	bl	8008a94 <get_fattime>
 800feb0:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800feb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	2b04      	cmp	r3, #4
 800feb8:	f040 808c 	bne.w	800ffd4 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fc fea2 	bl	800cc08 <fill_first_frag>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800feca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d10a      	bne.n	800fee8 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fed8:	f04f 32ff 	mov.w	r2, #4294967295
 800fedc:	4619      	mov	r1, r3
 800fede:	f7fc fec2 	bl	800cc66 <fill_last_frag>
 800fee2:	4603      	mov	r3, r0
 800fee4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800fee8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800feec:	2b00      	cmp	r3, #0
 800feee:	f040 80bc 	bne.w	801006a <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	f107 0308 	add.w	r3, r7, #8
 800fef8:	4611      	mov	r1, r2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fd fe86 	bl	800dc0c <load_obj_dir>
 800ff00:	4603      	mov	r3, r0
 800ff02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800ff06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	f040 80ad 	bne.w	801006a <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800ff10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff12:	695b      	ldr	r3, [r3, #20]
 800ff14:	3304      	adds	r3, #4
 800ff16:	781a      	ldrb	r2, [r3, #0]
 800ff18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff1a:	695b      	ldr	r3, [r3, #20]
 800ff1c:	3304      	adds	r3, #4
 800ff1e:	f042 0220 	orr.w	r2, r2, #32
 800ff22:	b2d2      	uxtb	r2, r2
 800ff24:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	79da      	ldrb	r2, [r3, #7]
 800ff2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff2c:	695b      	ldr	r3, [r3, #20]
 800ff2e:	3321      	adds	r3, #33	; 0x21
 800ff30:	f042 0201 	orr.w	r2, r2, #1
 800ff34:	b2d2      	uxtb	r2, r2
 800ff36:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800ff38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff3a:	695b      	ldr	r3, [r3, #20]
 800ff3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	4619      	mov	r1, r3
 800ff46:	4610      	mov	r0, r2
 800ff48:	f7fb ff4f 	bl	800bdea <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800ff4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff4e:	695b      	ldr	r3, [r3, #20]
 800ff50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ff5a:	4608      	mov	r0, r1
 800ff5c:	f7fb ff71 	bl	800be42 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800ff60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff62:	695b      	ldr	r3, [r3, #20]
 800ff64:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ff6e:	4608      	mov	r0, r1
 800ff70:	f7fb ff67 	bl	800be42 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800ff74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff76:	695b      	ldr	r3, [r3, #20]
 800ff78:	330c      	adds	r3, #12
 800ff7a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fb ff34 	bl	800bdea <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800ff82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff84:	695b      	ldr	r3, [r3, #20]
 800ff86:	3315      	adds	r3, #21
 800ff88:	2200      	movs	r2, #0
 800ff8a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800ff8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff8e:	695b      	ldr	r3, [r3, #20]
 800ff90:	3310      	adds	r3, #16
 800ff92:	2100      	movs	r1, #0
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fb ff28 	bl	800bdea <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800ff9a:	f107 0308 	add.w	r3, r7, #8
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fd fe6f 	bl	800dc82 <store_xdir>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ffaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d15b      	bne.n	801006a <f_sync+0x230>
							res = sync_fs(fs);
 800ffb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fc fa29 	bl	800c40c <sync_fs>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffca:	b2da      	uxtb	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ffd2:	e04a      	b.n	801006a <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ffd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4610      	mov	r0, r2
 800ffde:	f7fc f9e7 	bl	800c3b0 <move_window>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800ffe8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d13c      	bne.n	801006a <f_sync+0x230>
					dir = fp->dir_ptr;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fff4:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fff8:	330b      	adds	r3, #11
 800fffa:	781a      	ldrb	r2, [r3, #0]
 800fffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fffe:	330b      	adds	r3, #11
 8010000:	f042 0220 	orr.w	r2, r2, #32
 8010004:	b2d2      	uxtb	r2, r2
 8010006:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	689b      	ldr	r3, [r3, #8]
 8010010:	461a      	mov	r2, r3
 8010012:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010014:	f7fd fa46 	bl	800d4a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801001a:	f103 001c 	add.w	r0, r3, #28
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010024:	4613      	mov	r3, r2
 8010026:	4619      	mov	r1, r3
 8010028:	f7fb fedf 	bl	800bdea <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801002c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801002e:	3316      	adds	r3, #22
 8010030:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010032:	4618      	mov	r0, r3
 8010034:	f7fb fed9 	bl	800bdea <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801003a:	3312      	adds	r3, #18
 801003c:	2100      	movs	r1, #0
 801003e:	4618      	mov	r0, r3
 8010040:	f7fb feb8 	bl	800bdb4 <st_word>
					fs->wflag = 1;
 8010044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010046:	2201      	movs	r2, #1
 8010048:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801004a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801004c:	4618      	mov	r0, r3
 801004e:	f7fc f9dd 	bl	800c40c <sync_fs>
 8010052:	4603      	mov	r3, r0
 8010054:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801005e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010062:	b2da      	uxtb	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801006a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801006e:	4618      	mov	r0, r3
 8010070:	3768      	adds	r7, #104	; 0x68
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010076:	b580      	push	{r7, lr}
 8010078:	b084      	sub	sp, #16
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f7ff fedb 	bl	800fe3a <f_sync>
 8010084:	4603      	mov	r3, r0
 8010086:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010088:	7bfb      	ldrb	r3, [r7, #15]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d118      	bne.n	80100c0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f107 0208 	add.w	r2, r7, #8
 8010094:	4611      	mov	r1, r2
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff f9d6 	bl	800f448 <validate>
 801009c:	4603      	mov	r3, r0
 801009e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80100a0:	7bfb      	ldrb	r3, [r7, #15]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d10c      	bne.n	80100c0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fc f8dc 	bl	800c268 <dec_lock>
 80100b0:	4603      	mov	r3, r0
 80100b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d102      	bne.n	80100c0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80100c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}

080100ca <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b086      	sub	sp, #24
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
 80100d2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d101      	bne.n	80100de <f_opendir+0x14>
 80100da:	2309      	movs	r3, #9
 80100dc:	e09a      	b.n	8010214 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80100e2:	f107 010c 	add.w	r1, r7, #12
 80100e6:	463b      	mov	r3, r7
 80100e8:	2200      	movs	r2, #0
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fe fe1c 	bl	800ed28 <find_volume>
 80100f0:	4603      	mov	r3, r0
 80100f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100f4:	7dfb      	ldrb	r3, [r7, #23]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	f040 8085 	bne.w	8010206 <f_opendir+0x13c>
		obj->fs = fs;
 80100fc:	68fa      	ldr	r2, [r7, #12]
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	4619      	mov	r1, r3
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7fe fcb8 	bl	800ea7c <follow_path>
 801010c:	4603      	mov	r3, r0
 801010e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010110:	7dfb      	ldrb	r3, [r7, #23]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d172      	bne.n	80101fc <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801011c:	b25b      	sxtb	r3, r3
 801011e:	2b00      	cmp	r3, #0
 8010120:	db47      	blt.n	80101b2 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	799b      	ldrb	r3, [r3, #6]
 8010126:	f003 0310 	and.w	r3, r3, #16
 801012a:	2b00      	cmp	r3, #0
 801012c:	d03f      	beq.n	80101ae <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	2b04      	cmp	r3, #4
 8010134:	d130      	bne.n	8010198 <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	689a      	ldr	r2, [r3, #8]
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010144:	4613      	mov	r3, r2
 8010146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801014a:	693a      	ldr	r2, [r7, #16]
 801014c:	79d2      	ldrb	r2, [r2, #7]
 801014e:	431a      	orrs	r2, r3
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	695b      	ldr	r3, [r3, #20]
 8010160:	3334      	adds	r3, #52	; 0x34
 8010162:	4618      	mov	r0, r3
 8010164:	f7fb fd48 	bl	800bbf8 <ld_dword>
 8010168:	4602      	mov	r2, r0
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	695b      	ldr	r3, [r3, #20]
 8010172:	3338      	adds	r3, #56	; 0x38
 8010174:	4618      	mov	r0, r3
 8010176:	f7fb fd62 	bl	800bc3e <ld_qword>
 801017a:	4602      	mov	r2, r0
 801017c:	460b      	mov	r3, r1
 801017e:	6939      	ldr	r1, [r7, #16]
 8010180:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	695b      	ldr	r3, [r3, #20]
 8010188:	3321      	adds	r3, #33	; 0x21
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	f003 0302 	and.w	r3, r3, #2
 8010190:	b2da      	uxtb	r2, r3
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	71da      	strb	r2, [r3, #7]
 8010196:	e00c      	b.n	80101b2 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801019e:	4619      	mov	r1, r3
 80101a0:	4610      	mov	r0, r2
 80101a2:	f7fd f960 	bl	800d466 <ld_clust>
 80101a6:	4602      	mov	r2, r0
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	609a      	str	r2, [r3, #8]
 80101ac:	e001      	b.n	80101b2 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80101ae:	2305      	movs	r3, #5
 80101b0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80101b2:	7dfb      	ldrb	r3, [r7, #23]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d121      	bne.n	80101fc <f_opendir+0x132>
				obj->id = fs->id;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	88da      	ldrh	r2, [r3, #6]
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80101c0:	2100      	movs	r1, #0
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7fc ff79 	bl	800d0ba <dir_sdi>
 80101c8:	4603      	mov	r3, r0
 80101ca:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80101cc:	7dfb      	ldrb	r3, [r7, #23]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d114      	bne.n	80101fc <f_opendir+0x132>
					if (obj->sclust) {
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00d      	beq.n	80101f6 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80101da:	2100      	movs	r1, #0
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7fb ffb5 	bl	800c14c <inc_lock>
 80101e2:	4602      	mov	r2, r0
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d105      	bne.n	80101fc <f_opendir+0x132>
 80101f0:	2312      	movs	r3, #18
 80101f2:	75fb      	strb	r3, [r7, #23]
 80101f4:	e002      	b.n	80101fc <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	2200      	movs	r2, #0
 80101fa:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80101fc:	7dfb      	ldrb	r3, [r7, #23]
 80101fe:	2b04      	cmp	r3, #4
 8010200:	d101      	bne.n	8010206 <f_opendir+0x13c>
 8010202:	2305      	movs	r3, #5
 8010204:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010206:	7dfb      	ldrb	r3, [r7, #23]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d002      	beq.n	8010212 <f_opendir+0x148>
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	2200      	movs	r2, #0
 8010210:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010212:	7dfb      	ldrb	r3, [r7, #23]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3718      	adds	r7, #24
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f107 0208 	add.w	r2, r7, #8
 801022a:	4611      	mov	r1, r2
 801022c:	4618      	mov	r0, r3
 801022e:	f7ff f90b 	bl	800f448 <validate>
 8010232:	4603      	mov	r3, r0
 8010234:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010236:	7bfb      	ldrb	r3, [r7, #15]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d110      	bne.n	801025e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010240:	2b00      	cmp	r3, #0
 8010242:	d006      	beq.n	8010252 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010248:	4618      	mov	r0, r3
 801024a:	f7fc f80d 	bl	800c268 <dec_lock>
 801024e:	4603      	mov	r3, r0
 8010250:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010252:	7bfb      	ldrb	r3, [r7, #15]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d102      	bne.n	801025e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3710      	adds	r7, #16
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f107 0208 	add.w	r2, r7, #8
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f7ff f8e4 	bl	800f448 <validate>
 8010280:	4603      	mov	r3, r0
 8010282:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010284:	7bfb      	ldrb	r3, [r7, #15]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d126      	bne.n	80102d8 <f_readdir+0x70>
		if (!fno) {
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d106      	bne.n	801029e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010290:	2100      	movs	r1, #0
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f7fc ff11 	bl	800d0ba <dir_sdi>
 8010298:	4603      	mov	r3, r0
 801029a:	73fb      	strb	r3, [r7, #15]
 801029c:	e01c      	b.n	80102d8 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801029e:	2100      	movs	r1, #0
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7fd fdb0 	bl	800de06 <dir_read>
 80102a6:	4603      	mov	r3, r0
 80102a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80102aa:	7bfb      	ldrb	r3, [r7, #15]
 80102ac:	2b04      	cmp	r3, #4
 80102ae:	d101      	bne.n	80102b4 <f_readdir+0x4c>
 80102b0:	2300      	movs	r3, #0
 80102b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80102b4:	7bfb      	ldrb	r3, [r7, #15]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d10e      	bne.n	80102d8 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7fe f939 	bl	800e534 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80102c2:	2100      	movs	r1, #0
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f7fc ff8c 	bl	800d1e2 <dir_next>
 80102ca:	4603      	mov	r3, r0
 80102cc:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80102ce:	7bfb      	ldrb	r3, [r7, #15]
 80102d0:	2b04      	cmp	r3, #4
 80102d2:	d101      	bne.n	80102d8 <f_readdir+0x70>
 80102d4:	2300      	movs	r3, #0
 80102d6:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80102d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b098      	sub	sp, #96	; 0x60
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
 80102ea:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80102ec:	f107 0108 	add.w	r1, r7, #8
 80102f0:	1d3b      	adds	r3, r7, #4
 80102f2:	2200      	movs	r2, #0
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7fe fd17 	bl	800ed28 <find_volume>
 80102fa:	4603      	mov	r3, r0
 80102fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010304:	2b00      	cmp	r3, #0
 8010306:	d11f      	bne.n	8010348 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	f107 0308 	add.w	r3, r7, #8
 801030e:	4611      	mov	r1, r2
 8010310:	4618      	mov	r0, r3
 8010312:	f7fe fbb3 	bl	800ea7c <follow_path>
 8010316:	4603      	mov	r3, r0
 8010318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 801031c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010320:	2b00      	cmp	r3, #0
 8010322:	d111      	bne.n	8010348 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8010324:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8010328:	b25b      	sxtb	r3, r3
 801032a:	2b00      	cmp	r3, #0
 801032c:	da03      	bge.n	8010336 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801032e:	2306      	movs	r3, #6
 8010330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010334:	e008      	b.n	8010348 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d005      	beq.n	8010348 <f_stat+0x66>
 801033c:	f107 0308 	add.w	r3, r7, #8
 8010340:	6839      	ldr	r1, [r7, #0]
 8010342:	4618      	mov	r0, r3
 8010344:	f7fe f8f6 	bl	800e534 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8010348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801034c:	4618      	mov	r0, r3
 801034e:	3760      	adds	r7, #96	; 0x60
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b09a      	sub	sp, #104	; 0x68
 8010358:	af00      	add	r7, sp, #0
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010360:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010364:	f107 030c 	add.w	r3, r7, #12
 8010368:	2200      	movs	r2, #0
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe fcdc 	bl	800ed28 <find_volume>
 8010370:	4603      	mov	r3, r0
 8010372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801037a:	2b00      	cmp	r3, #0
 801037c:	f040 80eb 	bne.w	8010556 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 8010380:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010388:	69da      	ldr	r2, [r3, #28]
 801038a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801038c:	6a1b      	ldr	r3, [r3, #32]
 801038e:	3b02      	subs	r3, #2
 8010390:	429a      	cmp	r2, r3
 8010392:	d804      	bhi.n	801039e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010396:	69da      	ldr	r2, [r3, #28]
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	601a      	str	r2, [r3, #0]
 801039c:	e0db      	b.n	8010556 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801039e:	2300      	movs	r3, #0
 80103a0:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80103a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d128      	bne.n	80103fc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80103aa:	2302      	movs	r3, #2
 80103ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b0:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 80103b2:	f107 0310 	add.w	r3, r7, #16
 80103b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fc f8b7 	bl	800c52c <get_fat>
 80103be:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80103c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c6:	d103      	bne.n	80103d0 <f_getfree+0x7c>
 80103c8:	2301      	movs	r3, #1
 80103ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103ce:	e0b5      	b.n	801053c <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80103d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d103      	bne.n	80103de <f_getfree+0x8a>
 80103d6:	2302      	movs	r3, #2
 80103d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103dc:	e0ae      	b.n	801053c <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 80103de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d102      	bne.n	80103ea <f_getfree+0x96>
 80103e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103e6:	3301      	adds	r3, #1
 80103e8:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 80103ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ec:	3301      	adds	r3, #1
 80103ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103f2:	6a1b      	ldr	r3, [r3, #32]
 80103f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d3db      	bcc.n	80103b2 <f_getfree+0x5e>
 80103fa:	e09f      	b.n	801053c <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 80103fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	2b04      	cmp	r3, #4
 8010402:	d14b      	bne.n	801049c <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 8010404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010406:	6a1b      	ldr	r3, [r3, #32]
 8010408:	3b02      	subs	r3, #2
 801040a:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 801040c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801040e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010410:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 8010412:	2300      	movs	r3, #0
 8010414:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8010416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010418:	2b00      	cmp	r3, #0
 801041a:	d10d      	bne.n	8010438 <f_getfree+0xe4>
 801041c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801041e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010420:	1c5a      	adds	r2, r3, #1
 8010422:	65ba      	str	r2, [r7, #88]	; 0x58
 8010424:	4619      	mov	r1, r3
 8010426:	f7fb ffc3 	bl	800c3b0 <move_window>
 801042a:	4603      	mov	r3, r0
 801042c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010430:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010434:	2b00      	cmp	r3, #0
 8010436:	d17e      	bne.n	8010536 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8010438:	2308      	movs	r3, #8
 801043a:	64bb      	str	r3, [r7, #72]	; 0x48
 801043c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801043e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010440:	4413      	add	r3, r2
 8010442:	333c      	adds	r3, #60	; 0x3c
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801044a:	e013      	b.n	8010474 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 801044c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010450:	f003 0301 	and.w	r3, r3, #1
 8010454:	2b00      	cmp	r3, #0
 8010456:	d102      	bne.n	801045e <f_getfree+0x10a>
 8010458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801045a:	3301      	adds	r3, #1
 801045c:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 801045e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010462:	085b      	lsrs	r3, r3, #1
 8010464:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8010468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801046a:	3b01      	subs	r3, #1
 801046c:	64bb      	str	r3, [r7, #72]	; 0x48
 801046e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010470:	3b01      	subs	r3, #1
 8010472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010476:	2b00      	cmp	r3, #0
 8010478:	d002      	beq.n	8010480 <f_getfree+0x12c>
 801047a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801047c:	2b00      	cmp	r3, #0
 801047e:	d1e5      	bne.n	801044c <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 8010480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010482:	3301      	adds	r3, #1
 8010484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010486:	8992      	ldrh	r2, [r2, #12]
 8010488:	fbb3 f1f2 	udiv	r1, r3, r2
 801048c:	fb02 f201 	mul.w	r2, r2, r1
 8010490:	1a9b      	subs	r3, r3, r2
 8010492:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 8010494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010496:	2b00      	cmp	r3, #0
 8010498:	d1bd      	bne.n	8010416 <f_getfree+0xc2>
 801049a:	e04f      	b.n	801053c <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801049c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801049e:	6a1b      	ldr	r3, [r3, #32]
 80104a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80104a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a6:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 80104a8:	2300      	movs	r3, #0
 80104aa:	657b      	str	r3, [r7, #84]	; 0x54
 80104ac:	2300      	movs	r3, #0
 80104ae:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 80104b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d113      	bne.n	80104de <f_getfree+0x18a>
							res = move_window(fs, sect++);
 80104b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80104b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104ba:	1c5a      	adds	r2, r3, #1
 80104bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80104be:	4619      	mov	r1, r3
 80104c0:	f7fb ff76 	bl	800c3b0 <move_window>
 80104c4:	4603      	mov	r3, r0
 80104c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 80104ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d133      	bne.n	801053a <f_getfree+0x1e6>
							p = fs->win;
 80104d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104d4:	333c      	adds	r3, #60	; 0x3c
 80104d6:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 80104d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104da:	899b      	ldrh	r3, [r3, #12]
 80104dc:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 80104de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	2b02      	cmp	r3, #2
 80104e4:	d10f      	bne.n	8010506 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 80104e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80104e8:	f7fb fb6e 	bl	800bbc8 <ld_word>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d102      	bne.n	80104f8 <f_getfree+0x1a4>
 80104f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104f4:	3301      	adds	r3, #1
 80104f6:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 80104f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104fa:	3302      	adds	r3, #2
 80104fc:	653b      	str	r3, [r7, #80]	; 0x50
 80104fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010500:	3b02      	subs	r3, #2
 8010502:	657b      	str	r3, [r7, #84]	; 0x54
 8010504:	e010      	b.n	8010528 <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010506:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010508:	f7fb fb76 	bl	800bbf8 <ld_dword>
 801050c:	4603      	mov	r3, r0
 801050e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010512:	2b00      	cmp	r3, #0
 8010514:	d102      	bne.n	801051c <f_getfree+0x1c8>
 8010516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010518:	3301      	adds	r3, #1
 801051a:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 801051c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801051e:	3304      	adds	r3, #4
 8010520:	653b      	str	r3, [r7, #80]	; 0x50
 8010522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010524:	3b04      	subs	r3, #4
 8010526:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 8010528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801052a:	3b01      	subs	r3, #1
 801052c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801052e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1bd      	bne.n	80104b0 <f_getfree+0x15c>
 8010534:	e002      	b.n	801053c <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8010536:	bf00      	nop
 8010538:	e000      	b.n	801053c <f_getfree+0x1e8>
							if (res != FR_OK) break;
 801053a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010540:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010546:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801054a:	791a      	ldrb	r2, [r3, #4]
 801054c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801054e:	f042 0201 	orr.w	r2, r2, #1
 8010552:	b2d2      	uxtb	r2, r2
 8010554:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010556:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801055a:	4618      	mov	r0, r3
 801055c:	3768      	adds	r7, #104	; 0x68
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b0a0      	sub	sp, #128	; 0x80
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801056a:	f107 010c 	add.w	r1, r7, #12
 801056e:	1d3b      	adds	r3, r7, #4
 8010570:	2202      	movs	r2, #2
 8010572:	4618      	mov	r0, r3
 8010574:	f7fe fbd8 	bl	800ed28 <find_volume>
 8010578:	4603      	mov	r3, r0
 801057a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8010582:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010586:	2b00      	cmp	r3, #0
 8010588:	f040 8133 	bne.w	80107f2 <f_mkdir+0x290>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	f107 0310 	add.w	r3, r7, #16
 8010592:	4611      	mov	r1, r2
 8010594:	4618      	mov	r0, r3
 8010596:	f7fe fa71 	bl	800ea7c <follow_path>
 801059a:	4603      	mov	r3, r0
 801059c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80105a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d102      	bne.n	80105ae <f_mkdir+0x4c>
 80105a8:	2308      	movs	r3, #8
 80105aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80105ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105b2:	2b04      	cmp	r3, #4
 80105b4:	f040 811d 	bne.w	80107f2 <f_mkdir+0x290>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80105b8:	f107 0310 	add.w	r3, r7, #16
 80105bc:	2100      	movs	r1, #0
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fc fc36 	bl	800ce30 <create_chain>
 80105c4:	66f8      	str	r0, [r7, #108]	; 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	895b      	ldrh	r3, [r3, #10]
 80105ca:	461a      	mov	r2, r3
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	899b      	ldrh	r3, [r3, #12]
 80105d0:	fb03 f302 	mul.w	r3, r3, r2
 80105d4:	461a      	mov	r2, r3
 80105d6:	f04f 0300 	mov.w	r3, #0
 80105da:	e9c7 2308 	strd	r2, r3, [r7, #32]
			res = FR_OK;
 80105de:	2300      	movs	r3, #0
 80105e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80105e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d102      	bne.n	80105f0 <f_mkdir+0x8e>
 80105ea:	2307      	movs	r3, #7
 80105ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 80105f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105f2:	2b01      	cmp	r3, #1
 80105f4:	d102      	bne.n	80105fc <f_mkdir+0x9a>
 80105f6:	2302      	movs	r3, #2
 80105f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80105fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010602:	d102      	bne.n	801060a <f_mkdir+0xa8>
 8010604:	2301      	movs	r3, #1
 8010606:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801060a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <f_mkdir+0xbe>
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	4618      	mov	r0, r3
 8010616:	f7fb fe87 	bl	800c328 <sync_window>
 801061a:	4603      	mov	r3, r0
 801061c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 8010620:	f7f8 fa38 	bl	8008a94 <get_fattime>
 8010624:	66b8      	str	r0, [r7, #104]	; 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010626:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801062a:	2b00      	cmp	r3, #0
 801062c:	d170      	bne.n	8010710 <f_mkdir+0x1ae>
				dsc = clust2sect(fs, dcl);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010632:	4618      	mov	r0, r3
 8010634:	f7fb ff5a 	bl	800c4ec <clust2sect>
 8010638:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	333c      	adds	r3, #60	; 0x3c
 801063e:	667b      	str	r3, [r7, #100]	; 0x64
				mem_set(dir, 0, SS(fs));
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	899b      	ldrh	r3, [r3, #12]
 8010644:	461a      	mov	r2, r3
 8010646:	2100      	movs	r1, #0
 8010648:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801064a:	f7fb fca3 	bl	800bf94 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	2b04      	cmp	r3, #4
 8010654:	d036      	beq.n	80106c4 <f_mkdir+0x162>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010656:	220b      	movs	r2, #11
 8010658:	2120      	movs	r1, #32
 801065a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801065c:	f7fb fc9a 	bl	800bf94 <mem_set>
					dir[DIR_Name] = '.';
 8010660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010662:	222e      	movs	r2, #46	; 0x2e
 8010664:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010668:	330b      	adds	r3, #11
 801066a:	2210      	movs	r2, #16
 801066c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801066e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010670:	3316      	adds	r3, #22
 8010672:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010674:	4618      	mov	r0, r3
 8010676:	f7fb fbb8 	bl	800bdea <st_dword>
					st_clust(fs, dir, dcl);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801067e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010680:	4618      	mov	r0, r3
 8010682:	f7fc ff0f 	bl	800d4a4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010688:	3320      	adds	r3, #32
 801068a:	2220      	movs	r2, #32
 801068c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801068e:	4618      	mov	r0, r3
 8010690:	f7fb fc5f 	bl	800bf52 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010696:	3321      	adds	r3, #33	; 0x21
 8010698:	222e      	movs	r2, #46	; 0x2e
 801069a:	701a      	strb	r2, [r3, #0]
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	2b03      	cmp	r3, #3
 80106a6:	d106      	bne.n	80106b6 <f_mkdir+0x154>
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d101      	bne.n	80106b6 <f_mkdir+0x154>
 80106b2:	2300      	movs	r3, #0
 80106b4:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106ba:	3320      	adds	r3, #32
 80106bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80106be:	4619      	mov	r1, r3
 80106c0:	f7fc fef0 	bl	800d4a4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	895b      	ldrh	r3, [r3, #10]
 80106c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80106ca:	e01c      	b.n	8010706 <f_mkdir+0x1a4>
					fs->winsect = dsc++;
 80106cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	677a      	str	r2, [r7, #116]	; 0x74
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2201      	movs	r2, #1
 80106da:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fb fe22 	bl	800c328 <sync_window>
 80106e4:	4603      	mov	r3, r0
 80106e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 80106ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d10d      	bne.n	801070e <f_mkdir+0x1ac>
					mem_set(dir, 0, SS(fs));
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	899b      	ldrh	r3, [r3, #12]
 80106f6:	461a      	mov	r2, r3
 80106f8:	2100      	movs	r1, #0
 80106fa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80106fc:	f7fb fc4a 	bl	800bf94 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010702:	3b01      	subs	r3, #1
 8010704:	67bb      	str	r3, [r7, #120]	; 0x78
 8010706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010708:	2b00      	cmp	r3, #0
 801070a:	d1df      	bne.n	80106cc <f_mkdir+0x16a>
 801070c:	e000      	b.n	8010710 <f_mkdir+0x1ae>
					if (res != FR_OK) break;
 801070e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010710:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010714:	2b00      	cmp	r3, #0
 8010716:	d107      	bne.n	8010728 <f_mkdir+0x1c6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010718:	f107 0310 	add.w	r3, r7, #16
 801071c:	4618      	mov	r0, r3
 801071e:	f7fd fd63 	bl	800e1e8 <dir_register>
 8010722:	4603      	mov	r3, r0
 8010724:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 8010728:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801072c:	2b00      	cmp	r3, #0
 801072e:	d159      	bne.n	80107e4 <f_mkdir+0x282>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	2b04      	cmp	r3, #4
 8010736:	d134      	bne.n	80107a2 <f_mkdir+0x240>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	695b      	ldr	r3, [r3, #20]
 801073c:	330c      	adds	r3, #12
 801073e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010740:	4618      	mov	r0, r3
 8010742:	f7fb fb52 	bl	800bdea <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	695b      	ldr	r3, [r3, #20]
 801074a:	3334      	adds	r3, #52	; 0x34
 801074c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801074e:	4618      	mov	r0, r3
 8010750:	f7fb fb4b 	bl	800bdea <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	695b      	ldr	r3, [r3, #20]
 8010758:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801075c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010760:	4613      	mov	r3, r2
 8010762:	4619      	mov	r1, r3
 8010764:	f7fb fb41 	bl	800bdea <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	695b      	ldr	r3, [r3, #20]
 801076c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8010770:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010774:	4613      	mov	r3, r2
 8010776:	4619      	mov	r1, r3
 8010778:	f7fb fb37 	bl	800bdea <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	695b      	ldr	r3, [r3, #20]
 8010780:	3321      	adds	r3, #33	; 0x21
 8010782:	2203      	movs	r2, #3
 8010784:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	695b      	ldr	r3, [r3, #20]
 801078a:	3304      	adds	r3, #4
 801078c:	2210      	movs	r2, #16
 801078e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010790:	f107 0310 	add.w	r3, r7, #16
 8010794:	4618      	mov	r0, r3
 8010796:	f7fd fa74 	bl	800dc82 <store_xdir>
 801079a:	4603      	mov	r3, r0
 801079c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80107a0:	e014      	b.n	80107cc <f_mkdir+0x26a>
				} else
#endif
				{
					dir = dj.dir;
 80107a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a4:	667b      	str	r3, [r7, #100]	; 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80107a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107a8:	3316      	adds	r3, #22
 80107aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fb fb1c 	bl	800bdea <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80107b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7fc fe73 	bl	800d4a4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80107be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107c0:	330b      	adds	r3, #11
 80107c2:	2210      	movs	r2, #16
 80107c4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2201      	movs	r2, #1
 80107ca:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80107cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d10e      	bne.n	80107f2 <f_mkdir+0x290>
					res = sync_fs(fs);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fb fe18 	bl	800c40c <sync_fs>
 80107dc:	4603      	mov	r3, r0
 80107de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80107e2:	e006      	b.n	80107f2 <f_mkdir+0x290>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80107e4:	f107 0310 	add.w	r3, r7, #16
 80107e8:	2200      	movs	r2, #0
 80107ea:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fc fa6b 	bl	800ccc8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80107f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3780      	adds	r7, #128	; 0x80
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
	...

08010800 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010800:	b480      	push	{r7}
 8010802:	b087      	sub	sp, #28
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	4613      	mov	r3, r2
 801080c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801080e:	2301      	movs	r3, #1
 8010810:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010812:	2300      	movs	r3, #0
 8010814:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010816:	4b1f      	ldr	r3, [pc, #124]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 8010818:	7a5b      	ldrb	r3, [r3, #9]
 801081a:	b2db      	uxtb	r3, r3
 801081c:	2b00      	cmp	r3, #0
 801081e:	d131      	bne.n	8010884 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010820:	4b1c      	ldr	r3, [pc, #112]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 8010822:	7a5b      	ldrb	r3, [r3, #9]
 8010824:	b2db      	uxtb	r3, r3
 8010826:	461a      	mov	r2, r3
 8010828:	4b1a      	ldr	r3, [pc, #104]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 801082a:	2100      	movs	r1, #0
 801082c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801082e:	4b19      	ldr	r3, [pc, #100]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 8010830:	7a5b      	ldrb	r3, [r3, #9]
 8010832:	b2db      	uxtb	r3, r3
 8010834:	4a17      	ldr	r2, [pc, #92]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	4413      	add	r3, r2
 801083a:	68fa      	ldr	r2, [r7, #12]
 801083c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801083e:	4b15      	ldr	r3, [pc, #84]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 8010840:	7a5b      	ldrb	r3, [r3, #9]
 8010842:	b2db      	uxtb	r3, r3
 8010844:	461a      	mov	r2, r3
 8010846:	4b13      	ldr	r3, [pc, #76]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 8010848:	4413      	add	r3, r2
 801084a:	79fa      	ldrb	r2, [r7, #7]
 801084c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801084e:	4b11      	ldr	r3, [pc, #68]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 8010850:	7a5b      	ldrb	r3, [r3, #9]
 8010852:	b2db      	uxtb	r3, r3
 8010854:	1c5a      	adds	r2, r3, #1
 8010856:	b2d1      	uxtb	r1, r2
 8010858:	4a0e      	ldr	r2, [pc, #56]	; (8010894 <FATFS_LinkDriverEx+0x94>)
 801085a:	7251      	strb	r1, [r2, #9]
 801085c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801085e:	7dbb      	ldrb	r3, [r7, #22]
 8010860:	3330      	adds	r3, #48	; 0x30
 8010862:	b2da      	uxtb	r2, r3
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	3301      	adds	r3, #1
 801086c:	223a      	movs	r2, #58	; 0x3a
 801086e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	3302      	adds	r3, #2
 8010874:	222f      	movs	r2, #47	; 0x2f
 8010876:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	3303      	adds	r3, #3
 801087c:	2200      	movs	r2, #0
 801087e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010880:	2300      	movs	r3, #0
 8010882:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010884:	7dfb      	ldrb	r3, [r7, #23]
}
 8010886:	4618      	mov	r0, r3
 8010888:	371c      	adds	r7, #28
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop
 8010894:	2000053c 	.word	0x2000053c

08010898 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80108a2:	2200      	movs	r2, #0
 80108a4:	6839      	ldr	r1, [r7, #0]
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7ff ffaa 	bl	8010800 <FATFS_LinkDriverEx>
 80108ac:	4603      	mov	r3, r0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3708      	adds	r7, #8
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
	...

080108b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	4603      	mov	r3, r0
 80108c0:	6039      	str	r1, [r7, #0]
 80108c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80108c4:	88fb      	ldrh	r3, [r7, #6]
 80108c6:	2b7f      	cmp	r3, #127	; 0x7f
 80108c8:	d802      	bhi.n	80108d0 <ff_convert+0x18>
		c = chr;
 80108ca:	88fb      	ldrh	r3, [r7, #6]
 80108cc:	81fb      	strh	r3, [r7, #14]
 80108ce:	e025      	b.n	801091c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00b      	beq.n	80108ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80108d6:	88fb      	ldrh	r3, [r7, #6]
 80108d8:	2bff      	cmp	r3, #255	; 0xff
 80108da:	d805      	bhi.n	80108e8 <ff_convert+0x30>
 80108dc:	88fb      	ldrh	r3, [r7, #6]
 80108de:	3b80      	subs	r3, #128	; 0x80
 80108e0:	4a12      	ldr	r2, [pc, #72]	; (801092c <ff_convert+0x74>)
 80108e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108e6:	e000      	b.n	80108ea <ff_convert+0x32>
 80108e8:	2300      	movs	r3, #0
 80108ea:	81fb      	strh	r3, [r7, #14]
 80108ec:	e016      	b.n	801091c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80108ee:	2300      	movs	r3, #0
 80108f0:	81fb      	strh	r3, [r7, #14]
 80108f2:	e009      	b.n	8010908 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80108f4:	89fb      	ldrh	r3, [r7, #14]
 80108f6:	4a0d      	ldr	r2, [pc, #52]	; (801092c <ff_convert+0x74>)
 80108f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108fc:	88fa      	ldrh	r2, [r7, #6]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d006      	beq.n	8010910 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010902:	89fb      	ldrh	r3, [r7, #14]
 8010904:	3301      	adds	r3, #1
 8010906:	81fb      	strh	r3, [r7, #14]
 8010908:	89fb      	ldrh	r3, [r7, #14]
 801090a:	2b7f      	cmp	r3, #127	; 0x7f
 801090c:	d9f2      	bls.n	80108f4 <ff_convert+0x3c>
 801090e:	e000      	b.n	8010912 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010910:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010912:	89fb      	ldrh	r3, [r7, #14]
 8010914:	3380      	adds	r3, #128	; 0x80
 8010916:	b29b      	uxth	r3, r3
 8010918:	b2db      	uxtb	r3, r3
 801091a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801091c:	89fb      	ldrh	r3, [r7, #14]
}
 801091e:	4618      	mov	r0, r3
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop
 801092c:	08012b28 	.word	0x08012b28

08010930 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010930:	b480      	push	{r7}
 8010932:	b087      	sub	sp, #28
 8010934:	af00      	add	r7, sp, #0
 8010936:	4603      	mov	r3, r0
 8010938:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801093a:	88fb      	ldrh	r3, [r7, #6]
 801093c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010940:	d201      	bcs.n	8010946 <ff_wtoupper+0x16>
 8010942:	4b3e      	ldr	r3, [pc, #248]	; (8010a3c <ff_wtoupper+0x10c>)
 8010944:	e000      	b.n	8010948 <ff_wtoupper+0x18>
 8010946:	4b3e      	ldr	r3, [pc, #248]	; (8010a40 <ff_wtoupper+0x110>)
 8010948:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	1c9a      	adds	r2, r3, #2
 801094e:	617a      	str	r2, [r7, #20]
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010954:	8a7b      	ldrh	r3, [r7, #18]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d068      	beq.n	8010a2c <ff_wtoupper+0xfc>
 801095a:	88fa      	ldrh	r2, [r7, #6]
 801095c:	8a7b      	ldrh	r3, [r7, #18]
 801095e:	429a      	cmp	r2, r3
 8010960:	d364      	bcc.n	8010a2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	1c9a      	adds	r2, r3, #2
 8010966:	617a      	str	r2, [r7, #20]
 8010968:	881b      	ldrh	r3, [r3, #0]
 801096a:	823b      	strh	r3, [r7, #16]
 801096c:	8a3b      	ldrh	r3, [r7, #16]
 801096e:	0a1b      	lsrs	r3, r3, #8
 8010970:	81fb      	strh	r3, [r7, #14]
 8010972:	8a3b      	ldrh	r3, [r7, #16]
 8010974:	b2db      	uxtb	r3, r3
 8010976:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010978:	88fa      	ldrh	r2, [r7, #6]
 801097a:	8a79      	ldrh	r1, [r7, #18]
 801097c:	8a3b      	ldrh	r3, [r7, #16]
 801097e:	440b      	add	r3, r1
 8010980:	429a      	cmp	r2, r3
 8010982:	da49      	bge.n	8010a18 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010984:	89fb      	ldrh	r3, [r7, #14]
 8010986:	2b08      	cmp	r3, #8
 8010988:	d84f      	bhi.n	8010a2a <ff_wtoupper+0xfa>
 801098a:	a201      	add	r2, pc, #4	; (adr r2, 8010990 <ff_wtoupper+0x60>)
 801098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010990:	080109b5 	.word	0x080109b5
 8010994:	080109c7 	.word	0x080109c7
 8010998:	080109dd 	.word	0x080109dd
 801099c:	080109e5 	.word	0x080109e5
 80109a0:	080109ed 	.word	0x080109ed
 80109a4:	080109f5 	.word	0x080109f5
 80109a8:	080109fd 	.word	0x080109fd
 80109ac:	08010a05 	.word	0x08010a05
 80109b0:	08010a0d 	.word	0x08010a0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80109b4:	88fa      	ldrh	r2, [r7, #6]
 80109b6:	8a7b      	ldrh	r3, [r7, #18]
 80109b8:	1ad3      	subs	r3, r2, r3
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	697a      	ldr	r2, [r7, #20]
 80109be:	4413      	add	r3, r2
 80109c0:	881b      	ldrh	r3, [r3, #0]
 80109c2:	80fb      	strh	r3, [r7, #6]
 80109c4:	e027      	b.n	8010a16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80109c6:	88fa      	ldrh	r2, [r7, #6]
 80109c8:	8a7b      	ldrh	r3, [r7, #18]
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	f003 0301 	and.w	r3, r3, #1
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	88fa      	ldrh	r2, [r7, #6]
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	80fb      	strh	r3, [r7, #6]
 80109da:	e01c      	b.n	8010a16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80109dc:	88fb      	ldrh	r3, [r7, #6]
 80109de:	3b10      	subs	r3, #16
 80109e0:	80fb      	strh	r3, [r7, #6]
 80109e2:	e018      	b.n	8010a16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80109e4:	88fb      	ldrh	r3, [r7, #6]
 80109e6:	3b20      	subs	r3, #32
 80109e8:	80fb      	strh	r3, [r7, #6]
 80109ea:	e014      	b.n	8010a16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80109ec:	88fb      	ldrh	r3, [r7, #6]
 80109ee:	3b30      	subs	r3, #48	; 0x30
 80109f0:	80fb      	strh	r3, [r7, #6]
 80109f2:	e010      	b.n	8010a16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80109f4:	88fb      	ldrh	r3, [r7, #6]
 80109f6:	3b1a      	subs	r3, #26
 80109f8:	80fb      	strh	r3, [r7, #6]
 80109fa:	e00c      	b.n	8010a16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80109fc:	88fb      	ldrh	r3, [r7, #6]
 80109fe:	3308      	adds	r3, #8
 8010a00:	80fb      	strh	r3, [r7, #6]
 8010a02:	e008      	b.n	8010a16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010a04:	88fb      	ldrh	r3, [r7, #6]
 8010a06:	3b50      	subs	r3, #80	; 0x50
 8010a08:	80fb      	strh	r3, [r7, #6]
 8010a0a:	e004      	b.n	8010a16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010a0c:	88fb      	ldrh	r3, [r7, #6]
 8010a0e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010a12:	80fb      	strh	r3, [r7, #6]
 8010a14:	bf00      	nop
			}
			break;
 8010a16:	e008      	b.n	8010a2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010a18:	89fb      	ldrh	r3, [r7, #14]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d195      	bne.n	801094a <ff_wtoupper+0x1a>
 8010a1e:	8a3b      	ldrh	r3, [r7, #16]
 8010a20:	005b      	lsls	r3, r3, #1
 8010a22:	697a      	ldr	r2, [r7, #20]
 8010a24:	4413      	add	r3, r2
 8010a26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010a28:	e78f      	b.n	801094a <ff_wtoupper+0x1a>
			break;
 8010a2a:	bf00      	nop
	}

	return chr;
 8010a2c:	88fb      	ldrh	r3, [r7, #6]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	371c      	adds	r7, #28
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	08012c28 	.word	0x08012c28
 8010a40:	08012e1c 	.word	0x08012e1c

08010a44 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b08a      	sub	sp, #40	; 0x28
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a4c:	f107 0314 	add.w	r3, r7, #20
 8010a50:	2200      	movs	r2, #0
 8010a52:	601a      	str	r2, [r3, #0]
 8010a54:	605a      	str	r2, [r3, #4]
 8010a56:	609a      	str	r2, [r3, #8]
 8010a58:	60da      	str	r2, [r3, #12]
 8010a5a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a64:	d14e      	bne.n	8010b04 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a66:	4b29      	ldr	r3, [pc, #164]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a6a:	4a28      	ldr	r2, [pc, #160]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010a6c:	f043 0301 	orr.w	r3, r3, #1
 8010a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010a72:	4b26      	ldr	r3, [pc, #152]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a76:	f003 0301 	and.w	r3, r3, #1
 8010a7a:	613b      	str	r3, [r7, #16]
 8010a7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010a7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a84:	2302      	movs	r3, #2
 8010a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a8c:	2303      	movs	r3, #3
 8010a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010a90:	230a      	movs	r3, #10
 8010a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a94:	f107 0314 	add.w	r3, r7, #20
 8010a98:	4619      	mov	r1, r3
 8010a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010a9e:	f7f2 ffa9 	bl	80039f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010aa2:	4b1a      	ldr	r3, [pc, #104]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010aa6:	4a19      	ldr	r2, [pc, #100]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010aa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010aae:	4b17      	ldr	r3, [pc, #92]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ab6:	60fb      	str	r3, [r7, #12]
 8010ab8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010aba:	4b14      	ldr	r3, [pc, #80]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d114      	bne.n	8010af0 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010ac6:	4b11      	ldr	r3, [pc, #68]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010aca:	4a10      	ldr	r2, [pc, #64]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8010ad2:	4b0e      	ldr	r3, [pc, #56]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ada:	60bb      	str	r3, [r7, #8]
 8010adc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8010ade:	f7f4 fdbb 	bl	8005658 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010ae2:	4b0a      	ldr	r3, [pc, #40]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ae6:	4a09      	ldr	r2, [pc, #36]	; (8010b0c <HAL_HCD_MspInit+0xc8>)
 8010ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010aec:	6593      	str	r3, [r2, #88]	; 0x58
 8010aee:	e001      	b.n	8010af4 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010af0:	f7f4 fdb2 	bl	8005658 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010af4:	2200      	movs	r2, #0
 8010af6:	2100      	movs	r1, #0
 8010af8:	2043      	movs	r0, #67	; 0x43
 8010afa:	f7f2 ff44 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010afe:	2043      	movs	r0, #67	; 0x43
 8010b00:	f7f2 ff5d 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b04:	bf00      	nop
 8010b06:	3728      	adds	r7, #40	; 0x28
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	40021000 	.word	0x40021000

08010b10 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fa f959 	bl	800add6 <USBH_LL_IncTimer>
}
 8010b24:	bf00      	nop
 8010b26:	3708      	adds	r7, #8
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fa f991 	bl	800ae62 <USBH_LL_Connect>
}
 8010b40:	bf00      	nop
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fa f99a 	bl	800ae90 <USBH_LL_Disconnect>
}
 8010b5c:	bf00      	nop
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	70fb      	strb	r3, [r7, #3]
 8010b70:	4613      	mov	r3, r2
 8010b72:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010b74:	bf00      	nop
 8010b76:	370c      	adds	r7, #12
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr

08010b80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fa f94b 	bl	800ae2a <USBH_LL_PortEnabled>
}
 8010b94:	bf00      	nop
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7fa f94b 	bl	800ae46 <USBH_LL_PortDisabled>
}
 8010bb0:	bf00      	nop
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d12d      	bne.n	8010c26 <USBH_LL_Init+0x6e>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010bca:	4a19      	ldr	r2, [pc, #100]	; (8010c30 <USBH_LL_Init+0x78>)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4a16      	ldr	r2, [pc, #88]	; (8010c30 <USBH_LL_Init+0x78>)
 8010bd6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010bda:	4b15      	ldr	r3, [pc, #84]	; (8010c30 <USBH_LL_Init+0x78>)
 8010bdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010be0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8010be2:	4b13      	ldr	r3, [pc, #76]	; (8010c30 <USBH_LL_Init+0x78>)
 8010be4:	220c      	movs	r2, #12
 8010be6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 8010be8:	4b11      	ldr	r3, [pc, #68]	; (8010c30 <USBH_LL_Init+0x78>)
 8010bea:	2203      	movs	r2, #3
 8010bec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010bee:	4b10      	ldr	r3, [pc, #64]	; (8010c30 <USBH_LL_Init+0x78>)
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010bf4:	4b0e      	ldr	r3, [pc, #56]	; (8010c30 <USBH_LL_Init+0x78>)
 8010bf6:	2202      	movs	r2, #2
 8010bf8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010bfa:	4b0d      	ldr	r3, [pc, #52]	; (8010c30 <USBH_LL_Init+0x78>)
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010c00:	4b0b      	ldr	r3, [pc, #44]	; (8010c30 <USBH_LL_Init+0x78>)
 8010c02:	2200      	movs	r2, #0
 8010c04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010c06:	480a      	ldr	r0, [pc, #40]	; (8010c30 <USBH_LL_Init+0x78>)
 8010c08:	f7f3 f8b8 	bl	8003d7c <HAL_HCD_Init>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d001      	beq.n	8010c16 <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 8010c12:	f7f0 fef7 	bl	8001a04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010c16:	4806      	ldr	r0, [pc, #24]	; (8010c30 <USBH_LL_Init+0x78>)
 8010c18:	f7f3 fc97 	bl	800454a <HAL_HCD_GetCurrentFrame>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	4619      	mov	r1, r3
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7fa f8c9 	bl	800adb8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	20002c00 	.word	0x20002c00

08010c34 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7f3 fc07 	bl	800445e <HAL_HCD_Start>
 8010c50:	4603      	mov	r3, r0
 8010c52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c54:	7bfb      	ldrb	r3, [r7, #15]
 8010c56:	4618      	mov	r0, r3
 8010c58:	f000 f982 	bl	8010f60 <USBH_Get_USB_Status>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3710      	adds	r7, #16
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}

08010c6a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010c6a:	b580      	push	{r7, lr}
 8010c6c:	b084      	sub	sp, #16
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c72:	2300      	movs	r3, #0
 8010c74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c76:	2300      	movs	r3, #0
 8010c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7f3 fc0f 	bl	80044a4 <HAL_HCD_Stop>
 8010c86:	4603      	mov	r3, r0
 8010c88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c8a:	7bfb      	ldrb	r3, [r7, #15]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f000 f967 	bl	8010f60 <USBH_Get_USB_Status>
 8010c92:	4603      	mov	r3, r0
 8010c94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7f3 fc57 	bl	8004566 <HAL_HCD_GetCurrentSpeed>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b02      	cmp	r3, #2
 8010cbc:	d00c      	beq.n	8010cd8 <USBH_LL_GetSpeed+0x38>
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d80d      	bhi.n	8010cde <USBH_LL_GetSpeed+0x3e>
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d002      	beq.n	8010ccc <USBH_LL_GetSpeed+0x2c>
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d003      	beq.n	8010cd2 <USBH_LL_GetSpeed+0x32>
 8010cca:	e008      	b.n	8010cde <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	73fb      	strb	r3, [r7, #15]
    break;
 8010cd0:	e008      	b.n	8010ce4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8010cd6:	e005      	b.n	8010ce4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010cd8:	2302      	movs	r3, #2
 8010cda:	73fb      	strb	r3, [r7, #15]
    break;
 8010cdc:	e002      	b.n	8010ce4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010cde:	2301      	movs	r3, #1
 8010ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ce2:	bf00      	nop
  }
  return  speed;
 8010ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3710      	adds	r7, #16
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}

08010cee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010cee:	b580      	push	{r7, lr}
 8010cf0:	b084      	sub	sp, #16
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7f3 fbea 	bl	80044de <HAL_HCD_ResetPort>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d0e:	7bfb      	ldrb	r3, [r7, #15]
 8010d10:	4618      	mov	r0, r3
 8010d12:	f000 f925 	bl	8010f60 <USBH_Get_USB_Status>
 8010d16:	4603      	mov	r3, r0
 8010d18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d36:	78fa      	ldrb	r2, [r7, #3]
 8010d38:	4611      	mov	r1, r2
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7f3 fbf1 	bl	8004522 <HAL_HCD_HC_GetXferCount>
 8010d40:	4603      	mov	r3, r0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}

08010d4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010d4a:	b590      	push	{r4, r7, lr}
 8010d4c:	b089      	sub	sp, #36	; 0x24
 8010d4e:	af04      	add	r7, sp, #16
 8010d50:	6078      	str	r0, [r7, #4]
 8010d52:	4608      	mov	r0, r1
 8010d54:	4611      	mov	r1, r2
 8010d56:	461a      	mov	r2, r3
 8010d58:	4603      	mov	r3, r0
 8010d5a:	70fb      	strb	r3, [r7, #3]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	70bb      	strb	r3, [r7, #2]
 8010d60:	4613      	mov	r3, r2
 8010d62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d64:	2300      	movs	r3, #0
 8010d66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010d72:	787c      	ldrb	r4, [r7, #1]
 8010d74:	78ba      	ldrb	r2, [r7, #2]
 8010d76:	78f9      	ldrb	r1, [r7, #3]
 8010d78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010d7a:	9302      	str	r3, [sp, #8]
 8010d7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d80:	9301      	str	r3, [sp, #4]
 8010d82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d86:	9300      	str	r3, [sp, #0]
 8010d88:	4623      	mov	r3, r4
 8010d8a:	f7f3 f859 	bl	8003e40 <HAL_HCD_HC_Init>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d92:	7bfb      	ldrb	r3, [r7, #15]
 8010d94:	4618      	mov	r0, r3
 8010d96:	f000 f8e3 	bl	8010f60 <USBH_Get_USB_Status>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3714      	adds	r7, #20
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd90      	pop	{r4, r7, pc}

08010da8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	460b      	mov	r3, r1
 8010db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010db4:	2300      	movs	r3, #0
 8010db6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010db8:	2300      	movs	r3, #0
 8010dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010dc2:	78fa      	ldrb	r2, [r7, #3]
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7f3 f8c9 	bl	8003f5e <HAL_HCD_HC_Halt>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010dd0:	7bfb      	ldrb	r3, [r7, #15]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f000 f8c4 	bl	8010f60 <USBH_Get_USB_Status>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ddc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}

08010de6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010de6:	b590      	push	{r4, r7, lr}
 8010de8:	b089      	sub	sp, #36	; 0x24
 8010dea:	af04      	add	r7, sp, #16
 8010dec:	6078      	str	r0, [r7, #4]
 8010dee:	4608      	mov	r0, r1
 8010df0:	4611      	mov	r1, r2
 8010df2:	461a      	mov	r2, r3
 8010df4:	4603      	mov	r3, r0
 8010df6:	70fb      	strb	r3, [r7, #3]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	70bb      	strb	r3, [r7, #2]
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e00:	2300      	movs	r3, #0
 8010e02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e04:	2300      	movs	r3, #0
 8010e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010e0e:	787c      	ldrb	r4, [r7, #1]
 8010e10:	78ba      	ldrb	r2, [r7, #2]
 8010e12:	78f9      	ldrb	r1, [r7, #3]
 8010e14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e18:	9303      	str	r3, [sp, #12]
 8010e1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010e1c:	9302      	str	r3, [sp, #8]
 8010e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e20:	9301      	str	r3, [sp, #4]
 8010e22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e26:	9300      	str	r3, [sp, #0]
 8010e28:	4623      	mov	r3, r4
 8010e2a:	f7f3 f8bb 	bl	8003fa4 <HAL_HCD_HC_SubmitRequest>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e32:	7bfb      	ldrb	r3, [r7, #15]
 8010e34:	4618      	mov	r0, r3
 8010e36:	f000 f893 	bl	8010f60 <USBH_Get_USB_Status>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3714      	adds	r7, #20
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd90      	pop	{r4, r7, pc}

08010e48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	460b      	mov	r3, r1
 8010e52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e5a:	78fa      	ldrb	r2, [r7, #3]
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7f3 fb4b 	bl	80044fa <HAL_HCD_HC_GetURBState>
 8010e64:	4603      	mov	r3, r0
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3708      	adds	r7, #8
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b082      	sub	sp, #8
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
 8010e76:	460b      	mov	r3, r1
 8010e78:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8010e7a:	20c8      	movs	r0, #200	; 0xc8
 8010e7c:	f7f1 f8d6 	bl	800202c <HAL_Delay>
  return USBH_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010e8a:	b480      	push	{r7}
 8010e8c:	b085      	sub	sp, #20
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	460b      	mov	r3, r1
 8010e94:	70fb      	strb	r3, [r7, #3]
 8010e96:	4613      	mov	r3, r2
 8010e98:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ea0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010ea2:	78fb      	ldrb	r3, [r7, #3]
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	212c      	movs	r1, #44	; 0x2c
 8010ea8:	fb01 f303 	mul.w	r3, r1, r3
 8010eac:	4413      	add	r3, r2
 8010eae:	333b      	adds	r3, #59	; 0x3b
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d009      	beq.n	8010eca <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010eb6:	78fb      	ldrb	r3, [r7, #3]
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	212c      	movs	r1, #44	; 0x2c
 8010ebc:	fb01 f303 	mul.w	r3, r1, r3
 8010ec0:	4413      	add	r3, r2
 8010ec2:	3354      	adds	r3, #84	; 0x54
 8010ec4:	78ba      	ldrb	r2, [r7, #2]
 8010ec6:	701a      	strb	r2, [r3, #0]
 8010ec8:	e008      	b.n	8010edc <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010eca:	78fb      	ldrb	r3, [r7, #3]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	212c      	movs	r1, #44	; 0x2c
 8010ed0:	fb01 f303 	mul.w	r3, r1, r3
 8010ed4:	4413      	add	r3, r2
 8010ed6:	3355      	adds	r3, #85	; 0x55
 8010ed8:	78ba      	ldrb	r2, [r7, #2]
 8010eda:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3714      	adds	r7, #20
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010eea:	b480      	push	{r7}
 8010eec:	b085      	sub	sp, #20
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f00:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010f02:	78fb      	ldrb	r3, [r7, #3]
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	212c      	movs	r1, #44	; 0x2c
 8010f08:	fb01 f303 	mul.w	r3, r1, r3
 8010f0c:	4413      	add	r3, r2
 8010f0e:	333b      	adds	r3, #59	; 0x3b
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d009      	beq.n	8010f2a <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010f16:	78fb      	ldrb	r3, [r7, #3]
 8010f18:	68ba      	ldr	r2, [r7, #8]
 8010f1a:	212c      	movs	r1, #44	; 0x2c
 8010f1c:	fb01 f303 	mul.w	r3, r1, r3
 8010f20:	4413      	add	r3, r2
 8010f22:	3354      	adds	r3, #84	; 0x54
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	73fb      	strb	r3, [r7, #15]
 8010f28:	e008      	b.n	8010f3c <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010f2a:	78fb      	ldrb	r3, [r7, #3]
 8010f2c:	68ba      	ldr	r2, [r7, #8]
 8010f2e:	212c      	movs	r1, #44	; 0x2c
 8010f30:	fb01 f303 	mul.w	r3, r1, r3
 8010f34:	4413      	add	r3, r2
 8010f36:	3355      	adds	r3, #85	; 0x55
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3714      	adds	r7, #20
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr

08010f4a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	b082      	sub	sp, #8
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7f1 f86a 	bl	800202c <HAL_Delay>
}
 8010f58:	bf00      	nop
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	4603      	mov	r3, r0
 8010f68:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010f6e:	79fb      	ldrb	r3, [r7, #7]
 8010f70:	2b03      	cmp	r3, #3
 8010f72:	d817      	bhi.n	8010fa4 <USBH_Get_USB_Status+0x44>
 8010f74:	a201      	add	r2, pc, #4	; (adr r2, 8010f7c <USBH_Get_USB_Status+0x1c>)
 8010f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7a:	bf00      	nop
 8010f7c:	08010f8d 	.word	0x08010f8d
 8010f80:	08010f93 	.word	0x08010f93
 8010f84:	08010f99 	.word	0x08010f99
 8010f88:	08010f9f 	.word	0x08010f9f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8010f90:	e00b      	b.n	8010faa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010f92:	2302      	movs	r3, #2
 8010f94:	73fb      	strb	r3, [r7, #15]
    break;
 8010f96:	e008      	b.n	8010faa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8010f9c:	e005      	b.n	8010faa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010f9e:	2302      	movs	r3, #2
 8010fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8010fa2:	e002      	b.n	8010faa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010fa4:	2302      	movs	r3, #2
 8010fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8010fa8:	bf00      	nop
  }
  return usb_status;
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3714      	adds	r7, #20
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <__errno>:
 8010fb8:	4b01      	ldr	r3, [pc, #4]	; (8010fc0 <__errno+0x8>)
 8010fba:	6818      	ldr	r0, [r3, #0]
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	2000002c 	.word	0x2000002c

08010fc4 <__libc_init_array>:
 8010fc4:	b570      	push	{r4, r5, r6, lr}
 8010fc6:	4d0d      	ldr	r5, [pc, #52]	; (8010ffc <__libc_init_array+0x38>)
 8010fc8:	4c0d      	ldr	r4, [pc, #52]	; (8011000 <__libc_init_array+0x3c>)
 8010fca:	1b64      	subs	r4, r4, r5
 8010fcc:	10a4      	asrs	r4, r4, #2
 8010fce:	2600      	movs	r6, #0
 8010fd0:	42a6      	cmp	r6, r4
 8010fd2:	d109      	bne.n	8010fe8 <__libc_init_array+0x24>
 8010fd4:	4d0b      	ldr	r5, [pc, #44]	; (8011004 <__libc_init_array+0x40>)
 8010fd6:	4c0c      	ldr	r4, [pc, #48]	; (8011008 <__libc_init_array+0x44>)
 8010fd8:	f001 f9ce 	bl	8012378 <_init>
 8010fdc:	1b64      	subs	r4, r4, r5
 8010fde:	10a4      	asrs	r4, r4, #2
 8010fe0:	2600      	movs	r6, #0
 8010fe2:	42a6      	cmp	r6, r4
 8010fe4:	d105      	bne.n	8010ff2 <__libc_init_array+0x2e>
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fec:	4798      	blx	r3
 8010fee:	3601      	adds	r6, #1
 8010ff0:	e7ee      	b.n	8010fd0 <__libc_init_array+0xc>
 8010ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ff6:	4798      	blx	r3
 8010ff8:	3601      	adds	r6, #1
 8010ffa:	e7f2      	b.n	8010fe2 <__libc_init_array+0x1e>
 8010ffc:	08012f78 	.word	0x08012f78
 8011000:	08012f78 	.word	0x08012f78
 8011004:	08012f78 	.word	0x08012f78
 8011008:	08012f7c 	.word	0x08012f7c

0801100c <malloc>:
 801100c:	4b02      	ldr	r3, [pc, #8]	; (8011018 <malloc+0xc>)
 801100e:	4601      	mov	r1, r0
 8011010:	6818      	ldr	r0, [r3, #0]
 8011012:	f000 b871 	b.w	80110f8 <_malloc_r>
 8011016:	bf00      	nop
 8011018:	2000002c 	.word	0x2000002c

0801101c <free>:
 801101c:	4b02      	ldr	r3, [pc, #8]	; (8011028 <free+0xc>)
 801101e:	4601      	mov	r1, r0
 8011020:	6818      	ldr	r0, [r3, #0]
 8011022:	f000 b819 	b.w	8011058 <_free_r>
 8011026:	bf00      	nop
 8011028:	2000002c 	.word	0x2000002c

0801102c <memcpy>:
 801102c:	440a      	add	r2, r1
 801102e:	4291      	cmp	r1, r2
 8011030:	f100 33ff 	add.w	r3, r0, #4294967295
 8011034:	d100      	bne.n	8011038 <memcpy+0xc>
 8011036:	4770      	bx	lr
 8011038:	b510      	push	{r4, lr}
 801103a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801103e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011042:	4291      	cmp	r1, r2
 8011044:	d1f9      	bne.n	801103a <memcpy+0xe>
 8011046:	bd10      	pop	{r4, pc}

08011048 <memset>:
 8011048:	4402      	add	r2, r0
 801104a:	4603      	mov	r3, r0
 801104c:	4293      	cmp	r3, r2
 801104e:	d100      	bne.n	8011052 <memset+0xa>
 8011050:	4770      	bx	lr
 8011052:	f803 1b01 	strb.w	r1, [r3], #1
 8011056:	e7f9      	b.n	801104c <memset+0x4>

08011058 <_free_r>:
 8011058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801105a:	2900      	cmp	r1, #0
 801105c:	d048      	beq.n	80110f0 <_free_r+0x98>
 801105e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011062:	9001      	str	r0, [sp, #4]
 8011064:	2b00      	cmp	r3, #0
 8011066:	f1a1 0404 	sub.w	r4, r1, #4
 801106a:	bfb8      	it	lt
 801106c:	18e4      	addlt	r4, r4, r3
 801106e:	f000 fc39 	bl	80118e4 <__malloc_lock>
 8011072:	4a20      	ldr	r2, [pc, #128]	; (80110f4 <_free_r+0x9c>)
 8011074:	9801      	ldr	r0, [sp, #4]
 8011076:	6813      	ldr	r3, [r2, #0]
 8011078:	4615      	mov	r5, r2
 801107a:	b933      	cbnz	r3, 801108a <_free_r+0x32>
 801107c:	6063      	str	r3, [r4, #4]
 801107e:	6014      	str	r4, [r2, #0]
 8011080:	b003      	add	sp, #12
 8011082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011086:	f000 bc33 	b.w	80118f0 <__malloc_unlock>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d90b      	bls.n	80110a6 <_free_r+0x4e>
 801108e:	6821      	ldr	r1, [r4, #0]
 8011090:	1862      	adds	r2, r4, r1
 8011092:	4293      	cmp	r3, r2
 8011094:	bf04      	itt	eq
 8011096:	681a      	ldreq	r2, [r3, #0]
 8011098:	685b      	ldreq	r3, [r3, #4]
 801109a:	6063      	str	r3, [r4, #4]
 801109c:	bf04      	itt	eq
 801109e:	1852      	addeq	r2, r2, r1
 80110a0:	6022      	streq	r2, [r4, #0]
 80110a2:	602c      	str	r4, [r5, #0]
 80110a4:	e7ec      	b.n	8011080 <_free_r+0x28>
 80110a6:	461a      	mov	r2, r3
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	b10b      	cbz	r3, 80110b0 <_free_r+0x58>
 80110ac:	42a3      	cmp	r3, r4
 80110ae:	d9fa      	bls.n	80110a6 <_free_r+0x4e>
 80110b0:	6811      	ldr	r1, [r2, #0]
 80110b2:	1855      	adds	r5, r2, r1
 80110b4:	42a5      	cmp	r5, r4
 80110b6:	d10b      	bne.n	80110d0 <_free_r+0x78>
 80110b8:	6824      	ldr	r4, [r4, #0]
 80110ba:	4421      	add	r1, r4
 80110bc:	1854      	adds	r4, r2, r1
 80110be:	42a3      	cmp	r3, r4
 80110c0:	6011      	str	r1, [r2, #0]
 80110c2:	d1dd      	bne.n	8011080 <_free_r+0x28>
 80110c4:	681c      	ldr	r4, [r3, #0]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	6053      	str	r3, [r2, #4]
 80110ca:	4421      	add	r1, r4
 80110cc:	6011      	str	r1, [r2, #0]
 80110ce:	e7d7      	b.n	8011080 <_free_r+0x28>
 80110d0:	d902      	bls.n	80110d8 <_free_r+0x80>
 80110d2:	230c      	movs	r3, #12
 80110d4:	6003      	str	r3, [r0, #0]
 80110d6:	e7d3      	b.n	8011080 <_free_r+0x28>
 80110d8:	6825      	ldr	r5, [r4, #0]
 80110da:	1961      	adds	r1, r4, r5
 80110dc:	428b      	cmp	r3, r1
 80110de:	bf04      	itt	eq
 80110e0:	6819      	ldreq	r1, [r3, #0]
 80110e2:	685b      	ldreq	r3, [r3, #4]
 80110e4:	6063      	str	r3, [r4, #4]
 80110e6:	bf04      	itt	eq
 80110e8:	1949      	addeq	r1, r1, r5
 80110ea:	6021      	streq	r1, [r4, #0]
 80110ec:	6054      	str	r4, [r2, #4]
 80110ee:	e7c7      	b.n	8011080 <_free_r+0x28>
 80110f0:	b003      	add	sp, #12
 80110f2:	bd30      	pop	{r4, r5, pc}
 80110f4:	20000548 	.word	0x20000548

080110f8 <_malloc_r>:
 80110f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fa:	1ccd      	adds	r5, r1, #3
 80110fc:	f025 0503 	bic.w	r5, r5, #3
 8011100:	3508      	adds	r5, #8
 8011102:	2d0c      	cmp	r5, #12
 8011104:	bf38      	it	cc
 8011106:	250c      	movcc	r5, #12
 8011108:	2d00      	cmp	r5, #0
 801110a:	4606      	mov	r6, r0
 801110c:	db01      	blt.n	8011112 <_malloc_r+0x1a>
 801110e:	42a9      	cmp	r1, r5
 8011110:	d903      	bls.n	801111a <_malloc_r+0x22>
 8011112:	230c      	movs	r3, #12
 8011114:	6033      	str	r3, [r6, #0]
 8011116:	2000      	movs	r0, #0
 8011118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801111a:	f000 fbe3 	bl	80118e4 <__malloc_lock>
 801111e:	4921      	ldr	r1, [pc, #132]	; (80111a4 <_malloc_r+0xac>)
 8011120:	680a      	ldr	r2, [r1, #0]
 8011122:	4614      	mov	r4, r2
 8011124:	b99c      	cbnz	r4, 801114e <_malloc_r+0x56>
 8011126:	4f20      	ldr	r7, [pc, #128]	; (80111a8 <_malloc_r+0xb0>)
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	b923      	cbnz	r3, 8011136 <_malloc_r+0x3e>
 801112c:	4621      	mov	r1, r4
 801112e:	4630      	mov	r0, r6
 8011130:	f000 f8ca 	bl	80112c8 <_sbrk_r>
 8011134:	6038      	str	r0, [r7, #0]
 8011136:	4629      	mov	r1, r5
 8011138:	4630      	mov	r0, r6
 801113a:	f000 f8c5 	bl	80112c8 <_sbrk_r>
 801113e:	1c43      	adds	r3, r0, #1
 8011140:	d123      	bne.n	801118a <_malloc_r+0x92>
 8011142:	230c      	movs	r3, #12
 8011144:	6033      	str	r3, [r6, #0]
 8011146:	4630      	mov	r0, r6
 8011148:	f000 fbd2 	bl	80118f0 <__malloc_unlock>
 801114c:	e7e3      	b.n	8011116 <_malloc_r+0x1e>
 801114e:	6823      	ldr	r3, [r4, #0]
 8011150:	1b5b      	subs	r3, r3, r5
 8011152:	d417      	bmi.n	8011184 <_malloc_r+0x8c>
 8011154:	2b0b      	cmp	r3, #11
 8011156:	d903      	bls.n	8011160 <_malloc_r+0x68>
 8011158:	6023      	str	r3, [r4, #0]
 801115a:	441c      	add	r4, r3
 801115c:	6025      	str	r5, [r4, #0]
 801115e:	e004      	b.n	801116a <_malloc_r+0x72>
 8011160:	6863      	ldr	r3, [r4, #4]
 8011162:	42a2      	cmp	r2, r4
 8011164:	bf0c      	ite	eq
 8011166:	600b      	streq	r3, [r1, #0]
 8011168:	6053      	strne	r3, [r2, #4]
 801116a:	4630      	mov	r0, r6
 801116c:	f000 fbc0 	bl	80118f0 <__malloc_unlock>
 8011170:	f104 000b 	add.w	r0, r4, #11
 8011174:	1d23      	adds	r3, r4, #4
 8011176:	f020 0007 	bic.w	r0, r0, #7
 801117a:	1ac2      	subs	r2, r0, r3
 801117c:	d0cc      	beq.n	8011118 <_malloc_r+0x20>
 801117e:	1a1b      	subs	r3, r3, r0
 8011180:	50a3      	str	r3, [r4, r2]
 8011182:	e7c9      	b.n	8011118 <_malloc_r+0x20>
 8011184:	4622      	mov	r2, r4
 8011186:	6864      	ldr	r4, [r4, #4]
 8011188:	e7cc      	b.n	8011124 <_malloc_r+0x2c>
 801118a:	1cc4      	adds	r4, r0, #3
 801118c:	f024 0403 	bic.w	r4, r4, #3
 8011190:	42a0      	cmp	r0, r4
 8011192:	d0e3      	beq.n	801115c <_malloc_r+0x64>
 8011194:	1a21      	subs	r1, r4, r0
 8011196:	4630      	mov	r0, r6
 8011198:	f000 f896 	bl	80112c8 <_sbrk_r>
 801119c:	3001      	adds	r0, #1
 801119e:	d1dd      	bne.n	801115c <_malloc_r+0x64>
 80111a0:	e7cf      	b.n	8011142 <_malloc_r+0x4a>
 80111a2:	bf00      	nop
 80111a4:	20000548 	.word	0x20000548
 80111a8:	2000054c 	.word	0x2000054c

080111ac <iprintf>:
 80111ac:	b40f      	push	{r0, r1, r2, r3}
 80111ae:	4b0a      	ldr	r3, [pc, #40]	; (80111d8 <iprintf+0x2c>)
 80111b0:	b513      	push	{r0, r1, r4, lr}
 80111b2:	681c      	ldr	r4, [r3, #0]
 80111b4:	b124      	cbz	r4, 80111c0 <iprintf+0x14>
 80111b6:	69a3      	ldr	r3, [r4, #24]
 80111b8:	b913      	cbnz	r3, 80111c0 <iprintf+0x14>
 80111ba:	4620      	mov	r0, r4
 80111bc:	f000 fa8e 	bl	80116dc <__sinit>
 80111c0:	ab05      	add	r3, sp, #20
 80111c2:	9a04      	ldr	r2, [sp, #16]
 80111c4:	68a1      	ldr	r1, [r4, #8]
 80111c6:	9301      	str	r3, [sp, #4]
 80111c8:	4620      	mov	r0, r4
 80111ca:	f000 fd1d 	bl	8011c08 <_vfiprintf_r>
 80111ce:	b002      	add	sp, #8
 80111d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111d4:	b004      	add	sp, #16
 80111d6:	4770      	bx	lr
 80111d8:	2000002c 	.word	0x2000002c

080111dc <_puts_r>:
 80111dc:	b570      	push	{r4, r5, r6, lr}
 80111de:	460e      	mov	r6, r1
 80111e0:	4605      	mov	r5, r0
 80111e2:	b118      	cbz	r0, 80111ec <_puts_r+0x10>
 80111e4:	6983      	ldr	r3, [r0, #24]
 80111e6:	b90b      	cbnz	r3, 80111ec <_puts_r+0x10>
 80111e8:	f000 fa78 	bl	80116dc <__sinit>
 80111ec:	69ab      	ldr	r3, [r5, #24]
 80111ee:	68ac      	ldr	r4, [r5, #8]
 80111f0:	b913      	cbnz	r3, 80111f8 <_puts_r+0x1c>
 80111f2:	4628      	mov	r0, r5
 80111f4:	f000 fa72 	bl	80116dc <__sinit>
 80111f8:	4b2c      	ldr	r3, [pc, #176]	; (80112ac <_puts_r+0xd0>)
 80111fa:	429c      	cmp	r4, r3
 80111fc:	d120      	bne.n	8011240 <_puts_r+0x64>
 80111fe:	686c      	ldr	r4, [r5, #4]
 8011200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011202:	07db      	lsls	r3, r3, #31
 8011204:	d405      	bmi.n	8011212 <_puts_r+0x36>
 8011206:	89a3      	ldrh	r3, [r4, #12]
 8011208:	0598      	lsls	r0, r3, #22
 801120a:	d402      	bmi.n	8011212 <_puts_r+0x36>
 801120c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801120e:	f000 fb03 	bl	8011818 <__retarget_lock_acquire_recursive>
 8011212:	89a3      	ldrh	r3, [r4, #12]
 8011214:	0719      	lsls	r1, r3, #28
 8011216:	d51d      	bpl.n	8011254 <_puts_r+0x78>
 8011218:	6923      	ldr	r3, [r4, #16]
 801121a:	b1db      	cbz	r3, 8011254 <_puts_r+0x78>
 801121c:	3e01      	subs	r6, #1
 801121e:	68a3      	ldr	r3, [r4, #8]
 8011220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011224:	3b01      	subs	r3, #1
 8011226:	60a3      	str	r3, [r4, #8]
 8011228:	bb39      	cbnz	r1, 801127a <_puts_r+0x9e>
 801122a:	2b00      	cmp	r3, #0
 801122c:	da38      	bge.n	80112a0 <_puts_r+0xc4>
 801122e:	4622      	mov	r2, r4
 8011230:	210a      	movs	r1, #10
 8011232:	4628      	mov	r0, r5
 8011234:	f000 f878 	bl	8011328 <__swbuf_r>
 8011238:	3001      	adds	r0, #1
 801123a:	d011      	beq.n	8011260 <_puts_r+0x84>
 801123c:	250a      	movs	r5, #10
 801123e:	e011      	b.n	8011264 <_puts_r+0x88>
 8011240:	4b1b      	ldr	r3, [pc, #108]	; (80112b0 <_puts_r+0xd4>)
 8011242:	429c      	cmp	r4, r3
 8011244:	d101      	bne.n	801124a <_puts_r+0x6e>
 8011246:	68ac      	ldr	r4, [r5, #8]
 8011248:	e7da      	b.n	8011200 <_puts_r+0x24>
 801124a:	4b1a      	ldr	r3, [pc, #104]	; (80112b4 <_puts_r+0xd8>)
 801124c:	429c      	cmp	r4, r3
 801124e:	bf08      	it	eq
 8011250:	68ec      	ldreq	r4, [r5, #12]
 8011252:	e7d5      	b.n	8011200 <_puts_r+0x24>
 8011254:	4621      	mov	r1, r4
 8011256:	4628      	mov	r0, r5
 8011258:	f000 f8b8 	bl	80113cc <__swsetup_r>
 801125c:	2800      	cmp	r0, #0
 801125e:	d0dd      	beq.n	801121c <_puts_r+0x40>
 8011260:	f04f 35ff 	mov.w	r5, #4294967295
 8011264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011266:	07da      	lsls	r2, r3, #31
 8011268:	d405      	bmi.n	8011276 <_puts_r+0x9a>
 801126a:	89a3      	ldrh	r3, [r4, #12]
 801126c:	059b      	lsls	r3, r3, #22
 801126e:	d402      	bmi.n	8011276 <_puts_r+0x9a>
 8011270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011272:	f000 fad2 	bl	801181a <__retarget_lock_release_recursive>
 8011276:	4628      	mov	r0, r5
 8011278:	bd70      	pop	{r4, r5, r6, pc}
 801127a:	2b00      	cmp	r3, #0
 801127c:	da04      	bge.n	8011288 <_puts_r+0xac>
 801127e:	69a2      	ldr	r2, [r4, #24]
 8011280:	429a      	cmp	r2, r3
 8011282:	dc06      	bgt.n	8011292 <_puts_r+0xb6>
 8011284:	290a      	cmp	r1, #10
 8011286:	d004      	beq.n	8011292 <_puts_r+0xb6>
 8011288:	6823      	ldr	r3, [r4, #0]
 801128a:	1c5a      	adds	r2, r3, #1
 801128c:	6022      	str	r2, [r4, #0]
 801128e:	7019      	strb	r1, [r3, #0]
 8011290:	e7c5      	b.n	801121e <_puts_r+0x42>
 8011292:	4622      	mov	r2, r4
 8011294:	4628      	mov	r0, r5
 8011296:	f000 f847 	bl	8011328 <__swbuf_r>
 801129a:	3001      	adds	r0, #1
 801129c:	d1bf      	bne.n	801121e <_puts_r+0x42>
 801129e:	e7df      	b.n	8011260 <_puts_r+0x84>
 80112a0:	6823      	ldr	r3, [r4, #0]
 80112a2:	250a      	movs	r5, #10
 80112a4:	1c5a      	adds	r2, r3, #1
 80112a6:	6022      	str	r2, [r4, #0]
 80112a8:	701d      	strb	r5, [r3, #0]
 80112aa:	e7db      	b.n	8011264 <_puts_r+0x88>
 80112ac:	08012efc 	.word	0x08012efc
 80112b0:	08012f1c 	.word	0x08012f1c
 80112b4:	08012edc 	.word	0x08012edc

080112b8 <puts>:
 80112b8:	4b02      	ldr	r3, [pc, #8]	; (80112c4 <puts+0xc>)
 80112ba:	4601      	mov	r1, r0
 80112bc:	6818      	ldr	r0, [r3, #0]
 80112be:	f7ff bf8d 	b.w	80111dc <_puts_r>
 80112c2:	bf00      	nop
 80112c4:	2000002c 	.word	0x2000002c

080112c8 <_sbrk_r>:
 80112c8:	b538      	push	{r3, r4, r5, lr}
 80112ca:	4d06      	ldr	r5, [pc, #24]	; (80112e4 <_sbrk_r+0x1c>)
 80112cc:	2300      	movs	r3, #0
 80112ce:	4604      	mov	r4, r0
 80112d0:	4608      	mov	r0, r1
 80112d2:	602b      	str	r3, [r5, #0]
 80112d4:	f7f0 fcfc 	bl	8001cd0 <_sbrk>
 80112d8:	1c43      	adds	r3, r0, #1
 80112da:	d102      	bne.n	80112e2 <_sbrk_r+0x1a>
 80112dc:	682b      	ldr	r3, [r5, #0]
 80112de:	b103      	cbz	r3, 80112e2 <_sbrk_r+0x1a>
 80112e0:	6023      	str	r3, [r4, #0]
 80112e2:	bd38      	pop	{r3, r4, r5, pc}
 80112e4:	20002f10 	.word	0x20002f10

080112e8 <siprintf>:
 80112e8:	b40e      	push	{r1, r2, r3}
 80112ea:	b500      	push	{lr}
 80112ec:	b09c      	sub	sp, #112	; 0x70
 80112ee:	ab1d      	add	r3, sp, #116	; 0x74
 80112f0:	9002      	str	r0, [sp, #8]
 80112f2:	9006      	str	r0, [sp, #24]
 80112f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80112f8:	4809      	ldr	r0, [pc, #36]	; (8011320 <siprintf+0x38>)
 80112fa:	9107      	str	r1, [sp, #28]
 80112fc:	9104      	str	r1, [sp, #16]
 80112fe:	4909      	ldr	r1, [pc, #36]	; (8011324 <siprintf+0x3c>)
 8011300:	f853 2b04 	ldr.w	r2, [r3], #4
 8011304:	9105      	str	r1, [sp, #20]
 8011306:	6800      	ldr	r0, [r0, #0]
 8011308:	9301      	str	r3, [sp, #4]
 801130a:	a902      	add	r1, sp, #8
 801130c:	f000 fb52 	bl	80119b4 <_svfiprintf_r>
 8011310:	9b02      	ldr	r3, [sp, #8]
 8011312:	2200      	movs	r2, #0
 8011314:	701a      	strb	r2, [r3, #0]
 8011316:	b01c      	add	sp, #112	; 0x70
 8011318:	f85d eb04 	ldr.w	lr, [sp], #4
 801131c:	b003      	add	sp, #12
 801131e:	4770      	bx	lr
 8011320:	2000002c 	.word	0x2000002c
 8011324:	ffff0208 	.word	0xffff0208

08011328 <__swbuf_r>:
 8011328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132a:	460e      	mov	r6, r1
 801132c:	4614      	mov	r4, r2
 801132e:	4605      	mov	r5, r0
 8011330:	b118      	cbz	r0, 801133a <__swbuf_r+0x12>
 8011332:	6983      	ldr	r3, [r0, #24]
 8011334:	b90b      	cbnz	r3, 801133a <__swbuf_r+0x12>
 8011336:	f000 f9d1 	bl	80116dc <__sinit>
 801133a:	4b21      	ldr	r3, [pc, #132]	; (80113c0 <__swbuf_r+0x98>)
 801133c:	429c      	cmp	r4, r3
 801133e:	d12b      	bne.n	8011398 <__swbuf_r+0x70>
 8011340:	686c      	ldr	r4, [r5, #4]
 8011342:	69a3      	ldr	r3, [r4, #24]
 8011344:	60a3      	str	r3, [r4, #8]
 8011346:	89a3      	ldrh	r3, [r4, #12]
 8011348:	071a      	lsls	r2, r3, #28
 801134a:	d52f      	bpl.n	80113ac <__swbuf_r+0x84>
 801134c:	6923      	ldr	r3, [r4, #16]
 801134e:	b36b      	cbz	r3, 80113ac <__swbuf_r+0x84>
 8011350:	6923      	ldr	r3, [r4, #16]
 8011352:	6820      	ldr	r0, [r4, #0]
 8011354:	1ac0      	subs	r0, r0, r3
 8011356:	6963      	ldr	r3, [r4, #20]
 8011358:	b2f6      	uxtb	r6, r6
 801135a:	4283      	cmp	r3, r0
 801135c:	4637      	mov	r7, r6
 801135e:	dc04      	bgt.n	801136a <__swbuf_r+0x42>
 8011360:	4621      	mov	r1, r4
 8011362:	4628      	mov	r0, r5
 8011364:	f000 f926 	bl	80115b4 <_fflush_r>
 8011368:	bb30      	cbnz	r0, 80113b8 <__swbuf_r+0x90>
 801136a:	68a3      	ldr	r3, [r4, #8]
 801136c:	3b01      	subs	r3, #1
 801136e:	60a3      	str	r3, [r4, #8]
 8011370:	6823      	ldr	r3, [r4, #0]
 8011372:	1c5a      	adds	r2, r3, #1
 8011374:	6022      	str	r2, [r4, #0]
 8011376:	701e      	strb	r6, [r3, #0]
 8011378:	6963      	ldr	r3, [r4, #20]
 801137a:	3001      	adds	r0, #1
 801137c:	4283      	cmp	r3, r0
 801137e:	d004      	beq.n	801138a <__swbuf_r+0x62>
 8011380:	89a3      	ldrh	r3, [r4, #12]
 8011382:	07db      	lsls	r3, r3, #31
 8011384:	d506      	bpl.n	8011394 <__swbuf_r+0x6c>
 8011386:	2e0a      	cmp	r6, #10
 8011388:	d104      	bne.n	8011394 <__swbuf_r+0x6c>
 801138a:	4621      	mov	r1, r4
 801138c:	4628      	mov	r0, r5
 801138e:	f000 f911 	bl	80115b4 <_fflush_r>
 8011392:	b988      	cbnz	r0, 80113b8 <__swbuf_r+0x90>
 8011394:	4638      	mov	r0, r7
 8011396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011398:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <__swbuf_r+0x9c>)
 801139a:	429c      	cmp	r4, r3
 801139c:	d101      	bne.n	80113a2 <__swbuf_r+0x7a>
 801139e:	68ac      	ldr	r4, [r5, #8]
 80113a0:	e7cf      	b.n	8011342 <__swbuf_r+0x1a>
 80113a2:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <__swbuf_r+0xa0>)
 80113a4:	429c      	cmp	r4, r3
 80113a6:	bf08      	it	eq
 80113a8:	68ec      	ldreq	r4, [r5, #12]
 80113aa:	e7ca      	b.n	8011342 <__swbuf_r+0x1a>
 80113ac:	4621      	mov	r1, r4
 80113ae:	4628      	mov	r0, r5
 80113b0:	f000 f80c 	bl	80113cc <__swsetup_r>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d0cb      	beq.n	8011350 <__swbuf_r+0x28>
 80113b8:	f04f 37ff 	mov.w	r7, #4294967295
 80113bc:	e7ea      	b.n	8011394 <__swbuf_r+0x6c>
 80113be:	bf00      	nop
 80113c0:	08012efc 	.word	0x08012efc
 80113c4:	08012f1c 	.word	0x08012f1c
 80113c8:	08012edc 	.word	0x08012edc

080113cc <__swsetup_r>:
 80113cc:	4b32      	ldr	r3, [pc, #200]	; (8011498 <__swsetup_r+0xcc>)
 80113ce:	b570      	push	{r4, r5, r6, lr}
 80113d0:	681d      	ldr	r5, [r3, #0]
 80113d2:	4606      	mov	r6, r0
 80113d4:	460c      	mov	r4, r1
 80113d6:	b125      	cbz	r5, 80113e2 <__swsetup_r+0x16>
 80113d8:	69ab      	ldr	r3, [r5, #24]
 80113da:	b913      	cbnz	r3, 80113e2 <__swsetup_r+0x16>
 80113dc:	4628      	mov	r0, r5
 80113de:	f000 f97d 	bl	80116dc <__sinit>
 80113e2:	4b2e      	ldr	r3, [pc, #184]	; (801149c <__swsetup_r+0xd0>)
 80113e4:	429c      	cmp	r4, r3
 80113e6:	d10f      	bne.n	8011408 <__swsetup_r+0x3c>
 80113e8:	686c      	ldr	r4, [r5, #4]
 80113ea:	89a3      	ldrh	r3, [r4, #12]
 80113ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113f0:	0719      	lsls	r1, r3, #28
 80113f2:	d42c      	bmi.n	801144e <__swsetup_r+0x82>
 80113f4:	06dd      	lsls	r5, r3, #27
 80113f6:	d411      	bmi.n	801141c <__swsetup_r+0x50>
 80113f8:	2309      	movs	r3, #9
 80113fa:	6033      	str	r3, [r6, #0]
 80113fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011400:	81a3      	strh	r3, [r4, #12]
 8011402:	f04f 30ff 	mov.w	r0, #4294967295
 8011406:	e03e      	b.n	8011486 <__swsetup_r+0xba>
 8011408:	4b25      	ldr	r3, [pc, #148]	; (80114a0 <__swsetup_r+0xd4>)
 801140a:	429c      	cmp	r4, r3
 801140c:	d101      	bne.n	8011412 <__swsetup_r+0x46>
 801140e:	68ac      	ldr	r4, [r5, #8]
 8011410:	e7eb      	b.n	80113ea <__swsetup_r+0x1e>
 8011412:	4b24      	ldr	r3, [pc, #144]	; (80114a4 <__swsetup_r+0xd8>)
 8011414:	429c      	cmp	r4, r3
 8011416:	bf08      	it	eq
 8011418:	68ec      	ldreq	r4, [r5, #12]
 801141a:	e7e6      	b.n	80113ea <__swsetup_r+0x1e>
 801141c:	0758      	lsls	r0, r3, #29
 801141e:	d512      	bpl.n	8011446 <__swsetup_r+0x7a>
 8011420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011422:	b141      	cbz	r1, 8011436 <__swsetup_r+0x6a>
 8011424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011428:	4299      	cmp	r1, r3
 801142a:	d002      	beq.n	8011432 <__swsetup_r+0x66>
 801142c:	4630      	mov	r0, r6
 801142e:	f7ff fe13 	bl	8011058 <_free_r>
 8011432:	2300      	movs	r3, #0
 8011434:	6363      	str	r3, [r4, #52]	; 0x34
 8011436:	89a3      	ldrh	r3, [r4, #12]
 8011438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801143c:	81a3      	strh	r3, [r4, #12]
 801143e:	2300      	movs	r3, #0
 8011440:	6063      	str	r3, [r4, #4]
 8011442:	6923      	ldr	r3, [r4, #16]
 8011444:	6023      	str	r3, [r4, #0]
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	f043 0308 	orr.w	r3, r3, #8
 801144c:	81a3      	strh	r3, [r4, #12]
 801144e:	6923      	ldr	r3, [r4, #16]
 8011450:	b94b      	cbnz	r3, 8011466 <__swsetup_r+0x9a>
 8011452:	89a3      	ldrh	r3, [r4, #12]
 8011454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801145c:	d003      	beq.n	8011466 <__swsetup_r+0x9a>
 801145e:	4621      	mov	r1, r4
 8011460:	4630      	mov	r0, r6
 8011462:	f000 f9ff 	bl	8011864 <__smakebuf_r>
 8011466:	89a0      	ldrh	r0, [r4, #12]
 8011468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801146c:	f010 0301 	ands.w	r3, r0, #1
 8011470:	d00a      	beq.n	8011488 <__swsetup_r+0xbc>
 8011472:	2300      	movs	r3, #0
 8011474:	60a3      	str	r3, [r4, #8]
 8011476:	6963      	ldr	r3, [r4, #20]
 8011478:	425b      	negs	r3, r3
 801147a:	61a3      	str	r3, [r4, #24]
 801147c:	6923      	ldr	r3, [r4, #16]
 801147e:	b943      	cbnz	r3, 8011492 <__swsetup_r+0xc6>
 8011480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011484:	d1ba      	bne.n	80113fc <__swsetup_r+0x30>
 8011486:	bd70      	pop	{r4, r5, r6, pc}
 8011488:	0781      	lsls	r1, r0, #30
 801148a:	bf58      	it	pl
 801148c:	6963      	ldrpl	r3, [r4, #20]
 801148e:	60a3      	str	r3, [r4, #8]
 8011490:	e7f4      	b.n	801147c <__swsetup_r+0xb0>
 8011492:	2000      	movs	r0, #0
 8011494:	e7f7      	b.n	8011486 <__swsetup_r+0xba>
 8011496:	bf00      	nop
 8011498:	2000002c 	.word	0x2000002c
 801149c:	08012efc 	.word	0x08012efc
 80114a0:	08012f1c 	.word	0x08012f1c
 80114a4:	08012edc 	.word	0x08012edc

080114a8 <__sflush_r>:
 80114a8:	898a      	ldrh	r2, [r1, #12]
 80114aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114ae:	4605      	mov	r5, r0
 80114b0:	0710      	lsls	r0, r2, #28
 80114b2:	460c      	mov	r4, r1
 80114b4:	d458      	bmi.n	8011568 <__sflush_r+0xc0>
 80114b6:	684b      	ldr	r3, [r1, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	dc05      	bgt.n	80114c8 <__sflush_r+0x20>
 80114bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80114be:	2b00      	cmp	r3, #0
 80114c0:	dc02      	bgt.n	80114c8 <__sflush_r+0x20>
 80114c2:	2000      	movs	r0, #0
 80114c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114ca:	2e00      	cmp	r6, #0
 80114cc:	d0f9      	beq.n	80114c2 <__sflush_r+0x1a>
 80114ce:	2300      	movs	r3, #0
 80114d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114d4:	682f      	ldr	r7, [r5, #0]
 80114d6:	602b      	str	r3, [r5, #0]
 80114d8:	d032      	beq.n	8011540 <__sflush_r+0x98>
 80114da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80114dc:	89a3      	ldrh	r3, [r4, #12]
 80114de:	075a      	lsls	r2, r3, #29
 80114e0:	d505      	bpl.n	80114ee <__sflush_r+0x46>
 80114e2:	6863      	ldr	r3, [r4, #4]
 80114e4:	1ac0      	subs	r0, r0, r3
 80114e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114e8:	b10b      	cbz	r3, 80114ee <__sflush_r+0x46>
 80114ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114ec:	1ac0      	subs	r0, r0, r3
 80114ee:	2300      	movs	r3, #0
 80114f0:	4602      	mov	r2, r0
 80114f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114f4:	6a21      	ldr	r1, [r4, #32]
 80114f6:	4628      	mov	r0, r5
 80114f8:	47b0      	blx	r6
 80114fa:	1c43      	adds	r3, r0, #1
 80114fc:	89a3      	ldrh	r3, [r4, #12]
 80114fe:	d106      	bne.n	801150e <__sflush_r+0x66>
 8011500:	6829      	ldr	r1, [r5, #0]
 8011502:	291d      	cmp	r1, #29
 8011504:	d82c      	bhi.n	8011560 <__sflush_r+0xb8>
 8011506:	4a2a      	ldr	r2, [pc, #168]	; (80115b0 <__sflush_r+0x108>)
 8011508:	40ca      	lsrs	r2, r1
 801150a:	07d6      	lsls	r6, r2, #31
 801150c:	d528      	bpl.n	8011560 <__sflush_r+0xb8>
 801150e:	2200      	movs	r2, #0
 8011510:	6062      	str	r2, [r4, #4]
 8011512:	04d9      	lsls	r1, r3, #19
 8011514:	6922      	ldr	r2, [r4, #16]
 8011516:	6022      	str	r2, [r4, #0]
 8011518:	d504      	bpl.n	8011524 <__sflush_r+0x7c>
 801151a:	1c42      	adds	r2, r0, #1
 801151c:	d101      	bne.n	8011522 <__sflush_r+0x7a>
 801151e:	682b      	ldr	r3, [r5, #0]
 8011520:	b903      	cbnz	r3, 8011524 <__sflush_r+0x7c>
 8011522:	6560      	str	r0, [r4, #84]	; 0x54
 8011524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011526:	602f      	str	r7, [r5, #0]
 8011528:	2900      	cmp	r1, #0
 801152a:	d0ca      	beq.n	80114c2 <__sflush_r+0x1a>
 801152c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011530:	4299      	cmp	r1, r3
 8011532:	d002      	beq.n	801153a <__sflush_r+0x92>
 8011534:	4628      	mov	r0, r5
 8011536:	f7ff fd8f 	bl	8011058 <_free_r>
 801153a:	2000      	movs	r0, #0
 801153c:	6360      	str	r0, [r4, #52]	; 0x34
 801153e:	e7c1      	b.n	80114c4 <__sflush_r+0x1c>
 8011540:	6a21      	ldr	r1, [r4, #32]
 8011542:	2301      	movs	r3, #1
 8011544:	4628      	mov	r0, r5
 8011546:	47b0      	blx	r6
 8011548:	1c41      	adds	r1, r0, #1
 801154a:	d1c7      	bne.n	80114dc <__sflush_r+0x34>
 801154c:	682b      	ldr	r3, [r5, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d0c4      	beq.n	80114dc <__sflush_r+0x34>
 8011552:	2b1d      	cmp	r3, #29
 8011554:	d001      	beq.n	801155a <__sflush_r+0xb2>
 8011556:	2b16      	cmp	r3, #22
 8011558:	d101      	bne.n	801155e <__sflush_r+0xb6>
 801155a:	602f      	str	r7, [r5, #0]
 801155c:	e7b1      	b.n	80114c2 <__sflush_r+0x1a>
 801155e:	89a3      	ldrh	r3, [r4, #12]
 8011560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011564:	81a3      	strh	r3, [r4, #12]
 8011566:	e7ad      	b.n	80114c4 <__sflush_r+0x1c>
 8011568:	690f      	ldr	r7, [r1, #16]
 801156a:	2f00      	cmp	r7, #0
 801156c:	d0a9      	beq.n	80114c2 <__sflush_r+0x1a>
 801156e:	0793      	lsls	r3, r2, #30
 8011570:	680e      	ldr	r6, [r1, #0]
 8011572:	bf08      	it	eq
 8011574:	694b      	ldreq	r3, [r1, #20]
 8011576:	600f      	str	r7, [r1, #0]
 8011578:	bf18      	it	ne
 801157a:	2300      	movne	r3, #0
 801157c:	eba6 0807 	sub.w	r8, r6, r7
 8011580:	608b      	str	r3, [r1, #8]
 8011582:	f1b8 0f00 	cmp.w	r8, #0
 8011586:	dd9c      	ble.n	80114c2 <__sflush_r+0x1a>
 8011588:	6a21      	ldr	r1, [r4, #32]
 801158a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801158c:	4643      	mov	r3, r8
 801158e:	463a      	mov	r2, r7
 8011590:	4628      	mov	r0, r5
 8011592:	47b0      	blx	r6
 8011594:	2800      	cmp	r0, #0
 8011596:	dc06      	bgt.n	80115a6 <__sflush_r+0xfe>
 8011598:	89a3      	ldrh	r3, [r4, #12]
 801159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801159e:	81a3      	strh	r3, [r4, #12]
 80115a0:	f04f 30ff 	mov.w	r0, #4294967295
 80115a4:	e78e      	b.n	80114c4 <__sflush_r+0x1c>
 80115a6:	4407      	add	r7, r0
 80115a8:	eba8 0800 	sub.w	r8, r8, r0
 80115ac:	e7e9      	b.n	8011582 <__sflush_r+0xda>
 80115ae:	bf00      	nop
 80115b0:	20400001 	.word	0x20400001

080115b4 <_fflush_r>:
 80115b4:	b538      	push	{r3, r4, r5, lr}
 80115b6:	690b      	ldr	r3, [r1, #16]
 80115b8:	4605      	mov	r5, r0
 80115ba:	460c      	mov	r4, r1
 80115bc:	b913      	cbnz	r3, 80115c4 <_fflush_r+0x10>
 80115be:	2500      	movs	r5, #0
 80115c0:	4628      	mov	r0, r5
 80115c2:	bd38      	pop	{r3, r4, r5, pc}
 80115c4:	b118      	cbz	r0, 80115ce <_fflush_r+0x1a>
 80115c6:	6983      	ldr	r3, [r0, #24]
 80115c8:	b90b      	cbnz	r3, 80115ce <_fflush_r+0x1a>
 80115ca:	f000 f887 	bl	80116dc <__sinit>
 80115ce:	4b14      	ldr	r3, [pc, #80]	; (8011620 <_fflush_r+0x6c>)
 80115d0:	429c      	cmp	r4, r3
 80115d2:	d11b      	bne.n	801160c <_fflush_r+0x58>
 80115d4:	686c      	ldr	r4, [r5, #4]
 80115d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d0ef      	beq.n	80115be <_fflush_r+0xa>
 80115de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115e0:	07d0      	lsls	r0, r2, #31
 80115e2:	d404      	bmi.n	80115ee <_fflush_r+0x3a>
 80115e4:	0599      	lsls	r1, r3, #22
 80115e6:	d402      	bmi.n	80115ee <_fflush_r+0x3a>
 80115e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115ea:	f000 f915 	bl	8011818 <__retarget_lock_acquire_recursive>
 80115ee:	4628      	mov	r0, r5
 80115f0:	4621      	mov	r1, r4
 80115f2:	f7ff ff59 	bl	80114a8 <__sflush_r>
 80115f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115f8:	07da      	lsls	r2, r3, #31
 80115fa:	4605      	mov	r5, r0
 80115fc:	d4e0      	bmi.n	80115c0 <_fflush_r+0xc>
 80115fe:	89a3      	ldrh	r3, [r4, #12]
 8011600:	059b      	lsls	r3, r3, #22
 8011602:	d4dd      	bmi.n	80115c0 <_fflush_r+0xc>
 8011604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011606:	f000 f908 	bl	801181a <__retarget_lock_release_recursive>
 801160a:	e7d9      	b.n	80115c0 <_fflush_r+0xc>
 801160c:	4b05      	ldr	r3, [pc, #20]	; (8011624 <_fflush_r+0x70>)
 801160e:	429c      	cmp	r4, r3
 8011610:	d101      	bne.n	8011616 <_fflush_r+0x62>
 8011612:	68ac      	ldr	r4, [r5, #8]
 8011614:	e7df      	b.n	80115d6 <_fflush_r+0x22>
 8011616:	4b04      	ldr	r3, [pc, #16]	; (8011628 <_fflush_r+0x74>)
 8011618:	429c      	cmp	r4, r3
 801161a:	bf08      	it	eq
 801161c:	68ec      	ldreq	r4, [r5, #12]
 801161e:	e7da      	b.n	80115d6 <_fflush_r+0x22>
 8011620:	08012efc 	.word	0x08012efc
 8011624:	08012f1c 	.word	0x08012f1c
 8011628:	08012edc 	.word	0x08012edc

0801162c <std>:
 801162c:	2300      	movs	r3, #0
 801162e:	b510      	push	{r4, lr}
 8011630:	4604      	mov	r4, r0
 8011632:	e9c0 3300 	strd	r3, r3, [r0]
 8011636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801163a:	6083      	str	r3, [r0, #8]
 801163c:	8181      	strh	r1, [r0, #12]
 801163e:	6643      	str	r3, [r0, #100]	; 0x64
 8011640:	81c2      	strh	r2, [r0, #14]
 8011642:	6183      	str	r3, [r0, #24]
 8011644:	4619      	mov	r1, r3
 8011646:	2208      	movs	r2, #8
 8011648:	305c      	adds	r0, #92	; 0x5c
 801164a:	f7ff fcfd 	bl	8011048 <memset>
 801164e:	4b05      	ldr	r3, [pc, #20]	; (8011664 <std+0x38>)
 8011650:	6263      	str	r3, [r4, #36]	; 0x24
 8011652:	4b05      	ldr	r3, [pc, #20]	; (8011668 <std+0x3c>)
 8011654:	62a3      	str	r3, [r4, #40]	; 0x28
 8011656:	4b05      	ldr	r3, [pc, #20]	; (801166c <std+0x40>)
 8011658:	62e3      	str	r3, [r4, #44]	; 0x2c
 801165a:	4b05      	ldr	r3, [pc, #20]	; (8011670 <std+0x44>)
 801165c:	6224      	str	r4, [r4, #32]
 801165e:	6323      	str	r3, [r4, #48]	; 0x30
 8011660:	bd10      	pop	{r4, pc}
 8011662:	bf00      	nop
 8011664:	08012191 	.word	0x08012191
 8011668:	080121b3 	.word	0x080121b3
 801166c:	080121eb 	.word	0x080121eb
 8011670:	0801220f 	.word	0x0801220f

08011674 <_cleanup_r>:
 8011674:	4901      	ldr	r1, [pc, #4]	; (801167c <_cleanup_r+0x8>)
 8011676:	f000 b8af 	b.w	80117d8 <_fwalk_reent>
 801167a:	bf00      	nop
 801167c:	080115b5 	.word	0x080115b5

08011680 <__sfmoreglue>:
 8011680:	b570      	push	{r4, r5, r6, lr}
 8011682:	1e4a      	subs	r2, r1, #1
 8011684:	2568      	movs	r5, #104	; 0x68
 8011686:	4355      	muls	r5, r2
 8011688:	460e      	mov	r6, r1
 801168a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801168e:	f7ff fd33 	bl	80110f8 <_malloc_r>
 8011692:	4604      	mov	r4, r0
 8011694:	b140      	cbz	r0, 80116a8 <__sfmoreglue+0x28>
 8011696:	2100      	movs	r1, #0
 8011698:	e9c0 1600 	strd	r1, r6, [r0]
 801169c:	300c      	adds	r0, #12
 801169e:	60a0      	str	r0, [r4, #8]
 80116a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116a4:	f7ff fcd0 	bl	8011048 <memset>
 80116a8:	4620      	mov	r0, r4
 80116aa:	bd70      	pop	{r4, r5, r6, pc}

080116ac <__sfp_lock_acquire>:
 80116ac:	4801      	ldr	r0, [pc, #4]	; (80116b4 <__sfp_lock_acquire+0x8>)
 80116ae:	f000 b8b3 	b.w	8011818 <__retarget_lock_acquire_recursive>
 80116b2:	bf00      	nop
 80116b4:	20002f0c 	.word	0x20002f0c

080116b8 <__sfp_lock_release>:
 80116b8:	4801      	ldr	r0, [pc, #4]	; (80116c0 <__sfp_lock_release+0x8>)
 80116ba:	f000 b8ae 	b.w	801181a <__retarget_lock_release_recursive>
 80116be:	bf00      	nop
 80116c0:	20002f0c 	.word	0x20002f0c

080116c4 <__sinit_lock_acquire>:
 80116c4:	4801      	ldr	r0, [pc, #4]	; (80116cc <__sinit_lock_acquire+0x8>)
 80116c6:	f000 b8a7 	b.w	8011818 <__retarget_lock_acquire_recursive>
 80116ca:	bf00      	nop
 80116cc:	20002f07 	.word	0x20002f07

080116d0 <__sinit_lock_release>:
 80116d0:	4801      	ldr	r0, [pc, #4]	; (80116d8 <__sinit_lock_release+0x8>)
 80116d2:	f000 b8a2 	b.w	801181a <__retarget_lock_release_recursive>
 80116d6:	bf00      	nop
 80116d8:	20002f07 	.word	0x20002f07

080116dc <__sinit>:
 80116dc:	b510      	push	{r4, lr}
 80116de:	4604      	mov	r4, r0
 80116e0:	f7ff fff0 	bl	80116c4 <__sinit_lock_acquire>
 80116e4:	69a3      	ldr	r3, [r4, #24]
 80116e6:	b11b      	cbz	r3, 80116f0 <__sinit+0x14>
 80116e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116ec:	f7ff bff0 	b.w	80116d0 <__sinit_lock_release>
 80116f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80116f4:	6523      	str	r3, [r4, #80]	; 0x50
 80116f6:	4b13      	ldr	r3, [pc, #76]	; (8011744 <__sinit+0x68>)
 80116f8:	4a13      	ldr	r2, [pc, #76]	; (8011748 <__sinit+0x6c>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80116fe:	42a3      	cmp	r3, r4
 8011700:	bf04      	itt	eq
 8011702:	2301      	moveq	r3, #1
 8011704:	61a3      	streq	r3, [r4, #24]
 8011706:	4620      	mov	r0, r4
 8011708:	f000 f820 	bl	801174c <__sfp>
 801170c:	6060      	str	r0, [r4, #4]
 801170e:	4620      	mov	r0, r4
 8011710:	f000 f81c 	bl	801174c <__sfp>
 8011714:	60a0      	str	r0, [r4, #8]
 8011716:	4620      	mov	r0, r4
 8011718:	f000 f818 	bl	801174c <__sfp>
 801171c:	2200      	movs	r2, #0
 801171e:	60e0      	str	r0, [r4, #12]
 8011720:	2104      	movs	r1, #4
 8011722:	6860      	ldr	r0, [r4, #4]
 8011724:	f7ff ff82 	bl	801162c <std>
 8011728:	68a0      	ldr	r0, [r4, #8]
 801172a:	2201      	movs	r2, #1
 801172c:	2109      	movs	r1, #9
 801172e:	f7ff ff7d 	bl	801162c <std>
 8011732:	68e0      	ldr	r0, [r4, #12]
 8011734:	2202      	movs	r2, #2
 8011736:	2112      	movs	r1, #18
 8011738:	f7ff ff78 	bl	801162c <std>
 801173c:	2301      	movs	r3, #1
 801173e:	61a3      	str	r3, [r4, #24]
 8011740:	e7d2      	b.n	80116e8 <__sinit+0xc>
 8011742:	bf00      	nop
 8011744:	08012ed8 	.word	0x08012ed8
 8011748:	08011675 	.word	0x08011675

0801174c <__sfp>:
 801174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801174e:	4607      	mov	r7, r0
 8011750:	f7ff ffac 	bl	80116ac <__sfp_lock_acquire>
 8011754:	4b1e      	ldr	r3, [pc, #120]	; (80117d0 <__sfp+0x84>)
 8011756:	681e      	ldr	r6, [r3, #0]
 8011758:	69b3      	ldr	r3, [r6, #24]
 801175a:	b913      	cbnz	r3, 8011762 <__sfp+0x16>
 801175c:	4630      	mov	r0, r6
 801175e:	f7ff ffbd 	bl	80116dc <__sinit>
 8011762:	3648      	adds	r6, #72	; 0x48
 8011764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011768:	3b01      	subs	r3, #1
 801176a:	d503      	bpl.n	8011774 <__sfp+0x28>
 801176c:	6833      	ldr	r3, [r6, #0]
 801176e:	b30b      	cbz	r3, 80117b4 <__sfp+0x68>
 8011770:	6836      	ldr	r6, [r6, #0]
 8011772:	e7f7      	b.n	8011764 <__sfp+0x18>
 8011774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011778:	b9d5      	cbnz	r5, 80117b0 <__sfp+0x64>
 801177a:	4b16      	ldr	r3, [pc, #88]	; (80117d4 <__sfp+0x88>)
 801177c:	60e3      	str	r3, [r4, #12]
 801177e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011782:	6665      	str	r5, [r4, #100]	; 0x64
 8011784:	f000 f847 	bl	8011816 <__retarget_lock_init_recursive>
 8011788:	f7ff ff96 	bl	80116b8 <__sfp_lock_release>
 801178c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011794:	6025      	str	r5, [r4, #0]
 8011796:	61a5      	str	r5, [r4, #24]
 8011798:	2208      	movs	r2, #8
 801179a:	4629      	mov	r1, r5
 801179c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117a0:	f7ff fc52 	bl	8011048 <memset>
 80117a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117ac:	4620      	mov	r0, r4
 80117ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117b0:	3468      	adds	r4, #104	; 0x68
 80117b2:	e7d9      	b.n	8011768 <__sfp+0x1c>
 80117b4:	2104      	movs	r1, #4
 80117b6:	4638      	mov	r0, r7
 80117b8:	f7ff ff62 	bl	8011680 <__sfmoreglue>
 80117bc:	4604      	mov	r4, r0
 80117be:	6030      	str	r0, [r6, #0]
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d1d5      	bne.n	8011770 <__sfp+0x24>
 80117c4:	f7ff ff78 	bl	80116b8 <__sfp_lock_release>
 80117c8:	230c      	movs	r3, #12
 80117ca:	603b      	str	r3, [r7, #0]
 80117cc:	e7ee      	b.n	80117ac <__sfp+0x60>
 80117ce:	bf00      	nop
 80117d0:	08012ed8 	.word	0x08012ed8
 80117d4:	ffff0001 	.word	0xffff0001

080117d8 <_fwalk_reent>:
 80117d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117dc:	4606      	mov	r6, r0
 80117de:	4688      	mov	r8, r1
 80117e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80117e4:	2700      	movs	r7, #0
 80117e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80117ea:	f1b9 0901 	subs.w	r9, r9, #1
 80117ee:	d505      	bpl.n	80117fc <_fwalk_reent+0x24>
 80117f0:	6824      	ldr	r4, [r4, #0]
 80117f2:	2c00      	cmp	r4, #0
 80117f4:	d1f7      	bne.n	80117e6 <_fwalk_reent+0xe>
 80117f6:	4638      	mov	r0, r7
 80117f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117fc:	89ab      	ldrh	r3, [r5, #12]
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d907      	bls.n	8011812 <_fwalk_reent+0x3a>
 8011802:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011806:	3301      	adds	r3, #1
 8011808:	d003      	beq.n	8011812 <_fwalk_reent+0x3a>
 801180a:	4629      	mov	r1, r5
 801180c:	4630      	mov	r0, r6
 801180e:	47c0      	blx	r8
 8011810:	4307      	orrs	r7, r0
 8011812:	3568      	adds	r5, #104	; 0x68
 8011814:	e7e9      	b.n	80117ea <_fwalk_reent+0x12>

08011816 <__retarget_lock_init_recursive>:
 8011816:	4770      	bx	lr

08011818 <__retarget_lock_acquire_recursive>:
 8011818:	4770      	bx	lr

0801181a <__retarget_lock_release_recursive>:
 801181a:	4770      	bx	lr

0801181c <__swhatbuf_r>:
 801181c:	b570      	push	{r4, r5, r6, lr}
 801181e:	460e      	mov	r6, r1
 8011820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011824:	2900      	cmp	r1, #0
 8011826:	b096      	sub	sp, #88	; 0x58
 8011828:	4614      	mov	r4, r2
 801182a:	461d      	mov	r5, r3
 801182c:	da07      	bge.n	801183e <__swhatbuf_r+0x22>
 801182e:	2300      	movs	r3, #0
 8011830:	602b      	str	r3, [r5, #0]
 8011832:	89b3      	ldrh	r3, [r6, #12]
 8011834:	061a      	lsls	r2, r3, #24
 8011836:	d410      	bmi.n	801185a <__swhatbuf_r+0x3e>
 8011838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801183c:	e00e      	b.n	801185c <__swhatbuf_r+0x40>
 801183e:	466a      	mov	r2, sp
 8011840:	f000 fd0c 	bl	801225c <_fstat_r>
 8011844:	2800      	cmp	r0, #0
 8011846:	dbf2      	blt.n	801182e <__swhatbuf_r+0x12>
 8011848:	9a01      	ldr	r2, [sp, #4]
 801184a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801184e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011852:	425a      	negs	r2, r3
 8011854:	415a      	adcs	r2, r3
 8011856:	602a      	str	r2, [r5, #0]
 8011858:	e7ee      	b.n	8011838 <__swhatbuf_r+0x1c>
 801185a:	2340      	movs	r3, #64	; 0x40
 801185c:	2000      	movs	r0, #0
 801185e:	6023      	str	r3, [r4, #0]
 8011860:	b016      	add	sp, #88	; 0x58
 8011862:	bd70      	pop	{r4, r5, r6, pc}

08011864 <__smakebuf_r>:
 8011864:	898b      	ldrh	r3, [r1, #12]
 8011866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011868:	079d      	lsls	r5, r3, #30
 801186a:	4606      	mov	r6, r0
 801186c:	460c      	mov	r4, r1
 801186e:	d507      	bpl.n	8011880 <__smakebuf_r+0x1c>
 8011870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	6123      	str	r3, [r4, #16]
 8011878:	2301      	movs	r3, #1
 801187a:	6163      	str	r3, [r4, #20]
 801187c:	b002      	add	sp, #8
 801187e:	bd70      	pop	{r4, r5, r6, pc}
 8011880:	ab01      	add	r3, sp, #4
 8011882:	466a      	mov	r2, sp
 8011884:	f7ff ffca 	bl	801181c <__swhatbuf_r>
 8011888:	9900      	ldr	r1, [sp, #0]
 801188a:	4605      	mov	r5, r0
 801188c:	4630      	mov	r0, r6
 801188e:	f7ff fc33 	bl	80110f8 <_malloc_r>
 8011892:	b948      	cbnz	r0, 80118a8 <__smakebuf_r+0x44>
 8011894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011898:	059a      	lsls	r2, r3, #22
 801189a:	d4ef      	bmi.n	801187c <__smakebuf_r+0x18>
 801189c:	f023 0303 	bic.w	r3, r3, #3
 80118a0:	f043 0302 	orr.w	r3, r3, #2
 80118a4:	81a3      	strh	r3, [r4, #12]
 80118a6:	e7e3      	b.n	8011870 <__smakebuf_r+0xc>
 80118a8:	4b0d      	ldr	r3, [pc, #52]	; (80118e0 <__smakebuf_r+0x7c>)
 80118aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80118ac:	89a3      	ldrh	r3, [r4, #12]
 80118ae:	6020      	str	r0, [r4, #0]
 80118b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118b4:	81a3      	strh	r3, [r4, #12]
 80118b6:	9b00      	ldr	r3, [sp, #0]
 80118b8:	6163      	str	r3, [r4, #20]
 80118ba:	9b01      	ldr	r3, [sp, #4]
 80118bc:	6120      	str	r0, [r4, #16]
 80118be:	b15b      	cbz	r3, 80118d8 <__smakebuf_r+0x74>
 80118c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118c4:	4630      	mov	r0, r6
 80118c6:	f000 fcdb 	bl	8012280 <_isatty_r>
 80118ca:	b128      	cbz	r0, 80118d8 <__smakebuf_r+0x74>
 80118cc:	89a3      	ldrh	r3, [r4, #12]
 80118ce:	f023 0303 	bic.w	r3, r3, #3
 80118d2:	f043 0301 	orr.w	r3, r3, #1
 80118d6:	81a3      	strh	r3, [r4, #12]
 80118d8:	89a0      	ldrh	r0, [r4, #12]
 80118da:	4305      	orrs	r5, r0
 80118dc:	81a5      	strh	r5, [r4, #12]
 80118de:	e7cd      	b.n	801187c <__smakebuf_r+0x18>
 80118e0:	08011675 	.word	0x08011675

080118e4 <__malloc_lock>:
 80118e4:	4801      	ldr	r0, [pc, #4]	; (80118ec <__malloc_lock+0x8>)
 80118e6:	f7ff bf97 	b.w	8011818 <__retarget_lock_acquire_recursive>
 80118ea:	bf00      	nop
 80118ec:	20002f08 	.word	0x20002f08

080118f0 <__malloc_unlock>:
 80118f0:	4801      	ldr	r0, [pc, #4]	; (80118f8 <__malloc_unlock+0x8>)
 80118f2:	f7ff bf92 	b.w	801181a <__retarget_lock_release_recursive>
 80118f6:	bf00      	nop
 80118f8:	20002f08 	.word	0x20002f08

080118fc <__ssputs_r>:
 80118fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011900:	688e      	ldr	r6, [r1, #8]
 8011902:	429e      	cmp	r6, r3
 8011904:	4682      	mov	sl, r0
 8011906:	460c      	mov	r4, r1
 8011908:	4690      	mov	r8, r2
 801190a:	461f      	mov	r7, r3
 801190c:	d838      	bhi.n	8011980 <__ssputs_r+0x84>
 801190e:	898a      	ldrh	r2, [r1, #12]
 8011910:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011914:	d032      	beq.n	801197c <__ssputs_r+0x80>
 8011916:	6825      	ldr	r5, [r4, #0]
 8011918:	6909      	ldr	r1, [r1, #16]
 801191a:	eba5 0901 	sub.w	r9, r5, r1
 801191e:	6965      	ldr	r5, [r4, #20]
 8011920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011928:	3301      	adds	r3, #1
 801192a:	444b      	add	r3, r9
 801192c:	106d      	asrs	r5, r5, #1
 801192e:	429d      	cmp	r5, r3
 8011930:	bf38      	it	cc
 8011932:	461d      	movcc	r5, r3
 8011934:	0553      	lsls	r3, r2, #21
 8011936:	d531      	bpl.n	801199c <__ssputs_r+0xa0>
 8011938:	4629      	mov	r1, r5
 801193a:	f7ff fbdd 	bl	80110f8 <_malloc_r>
 801193e:	4606      	mov	r6, r0
 8011940:	b950      	cbnz	r0, 8011958 <__ssputs_r+0x5c>
 8011942:	230c      	movs	r3, #12
 8011944:	f8ca 3000 	str.w	r3, [sl]
 8011948:	89a3      	ldrh	r3, [r4, #12]
 801194a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801194e:	81a3      	strh	r3, [r4, #12]
 8011950:	f04f 30ff 	mov.w	r0, #4294967295
 8011954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011958:	6921      	ldr	r1, [r4, #16]
 801195a:	464a      	mov	r2, r9
 801195c:	f7ff fb66 	bl	801102c <memcpy>
 8011960:	89a3      	ldrh	r3, [r4, #12]
 8011962:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801196a:	81a3      	strh	r3, [r4, #12]
 801196c:	6126      	str	r6, [r4, #16]
 801196e:	6165      	str	r5, [r4, #20]
 8011970:	444e      	add	r6, r9
 8011972:	eba5 0509 	sub.w	r5, r5, r9
 8011976:	6026      	str	r6, [r4, #0]
 8011978:	60a5      	str	r5, [r4, #8]
 801197a:	463e      	mov	r6, r7
 801197c:	42be      	cmp	r6, r7
 801197e:	d900      	bls.n	8011982 <__ssputs_r+0x86>
 8011980:	463e      	mov	r6, r7
 8011982:	4632      	mov	r2, r6
 8011984:	6820      	ldr	r0, [r4, #0]
 8011986:	4641      	mov	r1, r8
 8011988:	f000 fc9c 	bl	80122c4 <memmove>
 801198c:	68a3      	ldr	r3, [r4, #8]
 801198e:	6822      	ldr	r2, [r4, #0]
 8011990:	1b9b      	subs	r3, r3, r6
 8011992:	4432      	add	r2, r6
 8011994:	60a3      	str	r3, [r4, #8]
 8011996:	6022      	str	r2, [r4, #0]
 8011998:	2000      	movs	r0, #0
 801199a:	e7db      	b.n	8011954 <__ssputs_r+0x58>
 801199c:	462a      	mov	r2, r5
 801199e:	f000 fcab 	bl	80122f8 <_realloc_r>
 80119a2:	4606      	mov	r6, r0
 80119a4:	2800      	cmp	r0, #0
 80119a6:	d1e1      	bne.n	801196c <__ssputs_r+0x70>
 80119a8:	6921      	ldr	r1, [r4, #16]
 80119aa:	4650      	mov	r0, sl
 80119ac:	f7ff fb54 	bl	8011058 <_free_r>
 80119b0:	e7c7      	b.n	8011942 <__ssputs_r+0x46>
	...

080119b4 <_svfiprintf_r>:
 80119b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b8:	4698      	mov	r8, r3
 80119ba:	898b      	ldrh	r3, [r1, #12]
 80119bc:	061b      	lsls	r3, r3, #24
 80119be:	b09d      	sub	sp, #116	; 0x74
 80119c0:	4607      	mov	r7, r0
 80119c2:	460d      	mov	r5, r1
 80119c4:	4614      	mov	r4, r2
 80119c6:	d50e      	bpl.n	80119e6 <_svfiprintf_r+0x32>
 80119c8:	690b      	ldr	r3, [r1, #16]
 80119ca:	b963      	cbnz	r3, 80119e6 <_svfiprintf_r+0x32>
 80119cc:	2140      	movs	r1, #64	; 0x40
 80119ce:	f7ff fb93 	bl	80110f8 <_malloc_r>
 80119d2:	6028      	str	r0, [r5, #0]
 80119d4:	6128      	str	r0, [r5, #16]
 80119d6:	b920      	cbnz	r0, 80119e2 <_svfiprintf_r+0x2e>
 80119d8:	230c      	movs	r3, #12
 80119da:	603b      	str	r3, [r7, #0]
 80119dc:	f04f 30ff 	mov.w	r0, #4294967295
 80119e0:	e0d1      	b.n	8011b86 <_svfiprintf_r+0x1d2>
 80119e2:	2340      	movs	r3, #64	; 0x40
 80119e4:	616b      	str	r3, [r5, #20]
 80119e6:	2300      	movs	r3, #0
 80119e8:	9309      	str	r3, [sp, #36]	; 0x24
 80119ea:	2320      	movs	r3, #32
 80119ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80119f4:	2330      	movs	r3, #48	; 0x30
 80119f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011ba0 <_svfiprintf_r+0x1ec>
 80119fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119fe:	f04f 0901 	mov.w	r9, #1
 8011a02:	4623      	mov	r3, r4
 8011a04:	469a      	mov	sl, r3
 8011a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a0a:	b10a      	cbz	r2, 8011a10 <_svfiprintf_r+0x5c>
 8011a0c:	2a25      	cmp	r2, #37	; 0x25
 8011a0e:	d1f9      	bne.n	8011a04 <_svfiprintf_r+0x50>
 8011a10:	ebba 0b04 	subs.w	fp, sl, r4
 8011a14:	d00b      	beq.n	8011a2e <_svfiprintf_r+0x7a>
 8011a16:	465b      	mov	r3, fp
 8011a18:	4622      	mov	r2, r4
 8011a1a:	4629      	mov	r1, r5
 8011a1c:	4638      	mov	r0, r7
 8011a1e:	f7ff ff6d 	bl	80118fc <__ssputs_r>
 8011a22:	3001      	adds	r0, #1
 8011a24:	f000 80aa 	beq.w	8011b7c <_svfiprintf_r+0x1c8>
 8011a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a2a:	445a      	add	r2, fp
 8011a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	f000 80a2 	beq.w	8011b7c <_svfiprintf_r+0x1c8>
 8011a38:	2300      	movs	r3, #0
 8011a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a42:	f10a 0a01 	add.w	sl, sl, #1
 8011a46:	9304      	str	r3, [sp, #16]
 8011a48:	9307      	str	r3, [sp, #28]
 8011a4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a4e:	931a      	str	r3, [sp, #104]	; 0x68
 8011a50:	4654      	mov	r4, sl
 8011a52:	2205      	movs	r2, #5
 8011a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a58:	4851      	ldr	r0, [pc, #324]	; (8011ba0 <_svfiprintf_r+0x1ec>)
 8011a5a:	f7ee fbe9 	bl	8000230 <memchr>
 8011a5e:	9a04      	ldr	r2, [sp, #16]
 8011a60:	b9d8      	cbnz	r0, 8011a9a <_svfiprintf_r+0xe6>
 8011a62:	06d0      	lsls	r0, r2, #27
 8011a64:	bf44      	itt	mi
 8011a66:	2320      	movmi	r3, #32
 8011a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a6c:	0711      	lsls	r1, r2, #28
 8011a6e:	bf44      	itt	mi
 8011a70:	232b      	movmi	r3, #43	; 0x2b
 8011a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a76:	f89a 3000 	ldrb.w	r3, [sl]
 8011a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8011a7c:	d015      	beq.n	8011aaa <_svfiprintf_r+0xf6>
 8011a7e:	9a07      	ldr	r2, [sp, #28]
 8011a80:	4654      	mov	r4, sl
 8011a82:	2000      	movs	r0, #0
 8011a84:	f04f 0c0a 	mov.w	ip, #10
 8011a88:	4621      	mov	r1, r4
 8011a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a8e:	3b30      	subs	r3, #48	; 0x30
 8011a90:	2b09      	cmp	r3, #9
 8011a92:	d94e      	bls.n	8011b32 <_svfiprintf_r+0x17e>
 8011a94:	b1b0      	cbz	r0, 8011ac4 <_svfiprintf_r+0x110>
 8011a96:	9207      	str	r2, [sp, #28]
 8011a98:	e014      	b.n	8011ac4 <_svfiprintf_r+0x110>
 8011a9a:	eba0 0308 	sub.w	r3, r0, r8
 8011a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8011aa2:	4313      	orrs	r3, r2
 8011aa4:	9304      	str	r3, [sp, #16]
 8011aa6:	46a2      	mov	sl, r4
 8011aa8:	e7d2      	b.n	8011a50 <_svfiprintf_r+0x9c>
 8011aaa:	9b03      	ldr	r3, [sp, #12]
 8011aac:	1d19      	adds	r1, r3, #4
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	9103      	str	r1, [sp, #12]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	bfbb      	ittet	lt
 8011ab6:	425b      	neglt	r3, r3
 8011ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8011abc:	9307      	strge	r3, [sp, #28]
 8011abe:	9307      	strlt	r3, [sp, #28]
 8011ac0:	bfb8      	it	lt
 8011ac2:	9204      	strlt	r2, [sp, #16]
 8011ac4:	7823      	ldrb	r3, [r4, #0]
 8011ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8011ac8:	d10c      	bne.n	8011ae4 <_svfiprintf_r+0x130>
 8011aca:	7863      	ldrb	r3, [r4, #1]
 8011acc:	2b2a      	cmp	r3, #42	; 0x2a
 8011ace:	d135      	bne.n	8011b3c <_svfiprintf_r+0x188>
 8011ad0:	9b03      	ldr	r3, [sp, #12]
 8011ad2:	1d1a      	adds	r2, r3, #4
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	9203      	str	r2, [sp, #12]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	bfb8      	it	lt
 8011adc:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ae0:	3402      	adds	r4, #2
 8011ae2:	9305      	str	r3, [sp, #20]
 8011ae4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011bb0 <_svfiprintf_r+0x1fc>
 8011ae8:	7821      	ldrb	r1, [r4, #0]
 8011aea:	2203      	movs	r2, #3
 8011aec:	4650      	mov	r0, sl
 8011aee:	f7ee fb9f 	bl	8000230 <memchr>
 8011af2:	b140      	cbz	r0, 8011b06 <_svfiprintf_r+0x152>
 8011af4:	2340      	movs	r3, #64	; 0x40
 8011af6:	eba0 000a 	sub.w	r0, r0, sl
 8011afa:	fa03 f000 	lsl.w	r0, r3, r0
 8011afe:	9b04      	ldr	r3, [sp, #16]
 8011b00:	4303      	orrs	r3, r0
 8011b02:	3401      	adds	r4, #1
 8011b04:	9304      	str	r3, [sp, #16]
 8011b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b0a:	4826      	ldr	r0, [pc, #152]	; (8011ba4 <_svfiprintf_r+0x1f0>)
 8011b0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b10:	2206      	movs	r2, #6
 8011b12:	f7ee fb8d 	bl	8000230 <memchr>
 8011b16:	2800      	cmp	r0, #0
 8011b18:	d038      	beq.n	8011b8c <_svfiprintf_r+0x1d8>
 8011b1a:	4b23      	ldr	r3, [pc, #140]	; (8011ba8 <_svfiprintf_r+0x1f4>)
 8011b1c:	bb1b      	cbnz	r3, 8011b66 <_svfiprintf_r+0x1b2>
 8011b1e:	9b03      	ldr	r3, [sp, #12]
 8011b20:	3307      	adds	r3, #7
 8011b22:	f023 0307 	bic.w	r3, r3, #7
 8011b26:	3308      	adds	r3, #8
 8011b28:	9303      	str	r3, [sp, #12]
 8011b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b2c:	4433      	add	r3, r6
 8011b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b30:	e767      	b.n	8011a02 <_svfiprintf_r+0x4e>
 8011b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b36:	460c      	mov	r4, r1
 8011b38:	2001      	movs	r0, #1
 8011b3a:	e7a5      	b.n	8011a88 <_svfiprintf_r+0xd4>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	3401      	adds	r4, #1
 8011b40:	9305      	str	r3, [sp, #20]
 8011b42:	4619      	mov	r1, r3
 8011b44:	f04f 0c0a 	mov.w	ip, #10
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b4e:	3a30      	subs	r2, #48	; 0x30
 8011b50:	2a09      	cmp	r2, #9
 8011b52:	d903      	bls.n	8011b5c <_svfiprintf_r+0x1a8>
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d0c5      	beq.n	8011ae4 <_svfiprintf_r+0x130>
 8011b58:	9105      	str	r1, [sp, #20]
 8011b5a:	e7c3      	b.n	8011ae4 <_svfiprintf_r+0x130>
 8011b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b60:	4604      	mov	r4, r0
 8011b62:	2301      	movs	r3, #1
 8011b64:	e7f0      	b.n	8011b48 <_svfiprintf_r+0x194>
 8011b66:	ab03      	add	r3, sp, #12
 8011b68:	9300      	str	r3, [sp, #0]
 8011b6a:	462a      	mov	r2, r5
 8011b6c:	4b0f      	ldr	r3, [pc, #60]	; (8011bac <_svfiprintf_r+0x1f8>)
 8011b6e:	a904      	add	r1, sp, #16
 8011b70:	4638      	mov	r0, r7
 8011b72:	f3af 8000 	nop.w
 8011b76:	1c42      	adds	r2, r0, #1
 8011b78:	4606      	mov	r6, r0
 8011b7a:	d1d6      	bne.n	8011b2a <_svfiprintf_r+0x176>
 8011b7c:	89ab      	ldrh	r3, [r5, #12]
 8011b7e:	065b      	lsls	r3, r3, #25
 8011b80:	f53f af2c 	bmi.w	80119dc <_svfiprintf_r+0x28>
 8011b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b86:	b01d      	add	sp, #116	; 0x74
 8011b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b8c:	ab03      	add	r3, sp, #12
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	462a      	mov	r2, r5
 8011b92:	4b06      	ldr	r3, [pc, #24]	; (8011bac <_svfiprintf_r+0x1f8>)
 8011b94:	a904      	add	r1, sp, #16
 8011b96:	4638      	mov	r0, r7
 8011b98:	f000 f9d4 	bl	8011f44 <_printf_i>
 8011b9c:	e7eb      	b.n	8011b76 <_svfiprintf_r+0x1c2>
 8011b9e:	bf00      	nop
 8011ba0:	08012f3c 	.word	0x08012f3c
 8011ba4:	08012f46 	.word	0x08012f46
 8011ba8:	00000000 	.word	0x00000000
 8011bac:	080118fd 	.word	0x080118fd
 8011bb0:	08012f42 	.word	0x08012f42

08011bb4 <__sfputc_r>:
 8011bb4:	6893      	ldr	r3, [r2, #8]
 8011bb6:	3b01      	subs	r3, #1
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	b410      	push	{r4}
 8011bbc:	6093      	str	r3, [r2, #8]
 8011bbe:	da08      	bge.n	8011bd2 <__sfputc_r+0x1e>
 8011bc0:	6994      	ldr	r4, [r2, #24]
 8011bc2:	42a3      	cmp	r3, r4
 8011bc4:	db01      	blt.n	8011bca <__sfputc_r+0x16>
 8011bc6:	290a      	cmp	r1, #10
 8011bc8:	d103      	bne.n	8011bd2 <__sfputc_r+0x1e>
 8011bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bce:	f7ff bbab 	b.w	8011328 <__swbuf_r>
 8011bd2:	6813      	ldr	r3, [r2, #0]
 8011bd4:	1c58      	adds	r0, r3, #1
 8011bd6:	6010      	str	r0, [r2, #0]
 8011bd8:	7019      	strb	r1, [r3, #0]
 8011bda:	4608      	mov	r0, r1
 8011bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011be0:	4770      	bx	lr

08011be2 <__sfputs_r>:
 8011be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be4:	4606      	mov	r6, r0
 8011be6:	460f      	mov	r7, r1
 8011be8:	4614      	mov	r4, r2
 8011bea:	18d5      	adds	r5, r2, r3
 8011bec:	42ac      	cmp	r4, r5
 8011bee:	d101      	bne.n	8011bf4 <__sfputs_r+0x12>
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	e007      	b.n	8011c04 <__sfputs_r+0x22>
 8011bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bf8:	463a      	mov	r2, r7
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f7ff ffda 	bl	8011bb4 <__sfputc_r>
 8011c00:	1c43      	adds	r3, r0, #1
 8011c02:	d1f3      	bne.n	8011bec <__sfputs_r+0xa>
 8011c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c08 <_vfiprintf_r>:
 8011c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c0c:	460d      	mov	r5, r1
 8011c0e:	b09d      	sub	sp, #116	; 0x74
 8011c10:	4614      	mov	r4, r2
 8011c12:	4698      	mov	r8, r3
 8011c14:	4606      	mov	r6, r0
 8011c16:	b118      	cbz	r0, 8011c20 <_vfiprintf_r+0x18>
 8011c18:	6983      	ldr	r3, [r0, #24]
 8011c1a:	b90b      	cbnz	r3, 8011c20 <_vfiprintf_r+0x18>
 8011c1c:	f7ff fd5e 	bl	80116dc <__sinit>
 8011c20:	4b89      	ldr	r3, [pc, #548]	; (8011e48 <_vfiprintf_r+0x240>)
 8011c22:	429d      	cmp	r5, r3
 8011c24:	d11b      	bne.n	8011c5e <_vfiprintf_r+0x56>
 8011c26:	6875      	ldr	r5, [r6, #4]
 8011c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c2a:	07d9      	lsls	r1, r3, #31
 8011c2c:	d405      	bmi.n	8011c3a <_vfiprintf_r+0x32>
 8011c2e:	89ab      	ldrh	r3, [r5, #12]
 8011c30:	059a      	lsls	r2, r3, #22
 8011c32:	d402      	bmi.n	8011c3a <_vfiprintf_r+0x32>
 8011c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c36:	f7ff fdef 	bl	8011818 <__retarget_lock_acquire_recursive>
 8011c3a:	89ab      	ldrh	r3, [r5, #12]
 8011c3c:	071b      	lsls	r3, r3, #28
 8011c3e:	d501      	bpl.n	8011c44 <_vfiprintf_r+0x3c>
 8011c40:	692b      	ldr	r3, [r5, #16]
 8011c42:	b9eb      	cbnz	r3, 8011c80 <_vfiprintf_r+0x78>
 8011c44:	4629      	mov	r1, r5
 8011c46:	4630      	mov	r0, r6
 8011c48:	f7ff fbc0 	bl	80113cc <__swsetup_r>
 8011c4c:	b1c0      	cbz	r0, 8011c80 <_vfiprintf_r+0x78>
 8011c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c50:	07dc      	lsls	r4, r3, #31
 8011c52:	d50e      	bpl.n	8011c72 <_vfiprintf_r+0x6a>
 8011c54:	f04f 30ff 	mov.w	r0, #4294967295
 8011c58:	b01d      	add	sp, #116	; 0x74
 8011c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5e:	4b7b      	ldr	r3, [pc, #492]	; (8011e4c <_vfiprintf_r+0x244>)
 8011c60:	429d      	cmp	r5, r3
 8011c62:	d101      	bne.n	8011c68 <_vfiprintf_r+0x60>
 8011c64:	68b5      	ldr	r5, [r6, #8]
 8011c66:	e7df      	b.n	8011c28 <_vfiprintf_r+0x20>
 8011c68:	4b79      	ldr	r3, [pc, #484]	; (8011e50 <_vfiprintf_r+0x248>)
 8011c6a:	429d      	cmp	r5, r3
 8011c6c:	bf08      	it	eq
 8011c6e:	68f5      	ldreq	r5, [r6, #12]
 8011c70:	e7da      	b.n	8011c28 <_vfiprintf_r+0x20>
 8011c72:	89ab      	ldrh	r3, [r5, #12]
 8011c74:	0598      	lsls	r0, r3, #22
 8011c76:	d4ed      	bmi.n	8011c54 <_vfiprintf_r+0x4c>
 8011c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c7a:	f7ff fdce 	bl	801181a <__retarget_lock_release_recursive>
 8011c7e:	e7e9      	b.n	8011c54 <_vfiprintf_r+0x4c>
 8011c80:	2300      	movs	r3, #0
 8011c82:	9309      	str	r3, [sp, #36]	; 0x24
 8011c84:	2320      	movs	r3, #32
 8011c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c8e:	2330      	movs	r3, #48	; 0x30
 8011c90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011e54 <_vfiprintf_r+0x24c>
 8011c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c98:	f04f 0901 	mov.w	r9, #1
 8011c9c:	4623      	mov	r3, r4
 8011c9e:	469a      	mov	sl, r3
 8011ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ca4:	b10a      	cbz	r2, 8011caa <_vfiprintf_r+0xa2>
 8011ca6:	2a25      	cmp	r2, #37	; 0x25
 8011ca8:	d1f9      	bne.n	8011c9e <_vfiprintf_r+0x96>
 8011caa:	ebba 0b04 	subs.w	fp, sl, r4
 8011cae:	d00b      	beq.n	8011cc8 <_vfiprintf_r+0xc0>
 8011cb0:	465b      	mov	r3, fp
 8011cb2:	4622      	mov	r2, r4
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	4630      	mov	r0, r6
 8011cb8:	f7ff ff93 	bl	8011be2 <__sfputs_r>
 8011cbc:	3001      	adds	r0, #1
 8011cbe:	f000 80aa 	beq.w	8011e16 <_vfiprintf_r+0x20e>
 8011cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cc4:	445a      	add	r2, fp
 8011cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8011cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f000 80a2 	beq.w	8011e16 <_vfiprintf_r+0x20e>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cdc:	f10a 0a01 	add.w	sl, sl, #1
 8011ce0:	9304      	str	r3, [sp, #16]
 8011ce2:	9307      	str	r3, [sp, #28]
 8011ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8011cea:	4654      	mov	r4, sl
 8011cec:	2205      	movs	r2, #5
 8011cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cf2:	4858      	ldr	r0, [pc, #352]	; (8011e54 <_vfiprintf_r+0x24c>)
 8011cf4:	f7ee fa9c 	bl	8000230 <memchr>
 8011cf8:	9a04      	ldr	r2, [sp, #16]
 8011cfa:	b9d8      	cbnz	r0, 8011d34 <_vfiprintf_r+0x12c>
 8011cfc:	06d1      	lsls	r1, r2, #27
 8011cfe:	bf44      	itt	mi
 8011d00:	2320      	movmi	r3, #32
 8011d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d06:	0713      	lsls	r3, r2, #28
 8011d08:	bf44      	itt	mi
 8011d0a:	232b      	movmi	r3, #43	; 0x2b
 8011d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d10:	f89a 3000 	ldrb.w	r3, [sl]
 8011d14:	2b2a      	cmp	r3, #42	; 0x2a
 8011d16:	d015      	beq.n	8011d44 <_vfiprintf_r+0x13c>
 8011d18:	9a07      	ldr	r2, [sp, #28]
 8011d1a:	4654      	mov	r4, sl
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	f04f 0c0a 	mov.w	ip, #10
 8011d22:	4621      	mov	r1, r4
 8011d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d28:	3b30      	subs	r3, #48	; 0x30
 8011d2a:	2b09      	cmp	r3, #9
 8011d2c:	d94e      	bls.n	8011dcc <_vfiprintf_r+0x1c4>
 8011d2e:	b1b0      	cbz	r0, 8011d5e <_vfiprintf_r+0x156>
 8011d30:	9207      	str	r2, [sp, #28]
 8011d32:	e014      	b.n	8011d5e <_vfiprintf_r+0x156>
 8011d34:	eba0 0308 	sub.w	r3, r0, r8
 8011d38:	fa09 f303 	lsl.w	r3, r9, r3
 8011d3c:	4313      	orrs	r3, r2
 8011d3e:	9304      	str	r3, [sp, #16]
 8011d40:	46a2      	mov	sl, r4
 8011d42:	e7d2      	b.n	8011cea <_vfiprintf_r+0xe2>
 8011d44:	9b03      	ldr	r3, [sp, #12]
 8011d46:	1d19      	adds	r1, r3, #4
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	9103      	str	r1, [sp, #12]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	bfbb      	ittet	lt
 8011d50:	425b      	neglt	r3, r3
 8011d52:	f042 0202 	orrlt.w	r2, r2, #2
 8011d56:	9307      	strge	r3, [sp, #28]
 8011d58:	9307      	strlt	r3, [sp, #28]
 8011d5a:	bfb8      	it	lt
 8011d5c:	9204      	strlt	r2, [sp, #16]
 8011d5e:	7823      	ldrb	r3, [r4, #0]
 8011d60:	2b2e      	cmp	r3, #46	; 0x2e
 8011d62:	d10c      	bne.n	8011d7e <_vfiprintf_r+0x176>
 8011d64:	7863      	ldrb	r3, [r4, #1]
 8011d66:	2b2a      	cmp	r3, #42	; 0x2a
 8011d68:	d135      	bne.n	8011dd6 <_vfiprintf_r+0x1ce>
 8011d6a:	9b03      	ldr	r3, [sp, #12]
 8011d6c:	1d1a      	adds	r2, r3, #4
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	9203      	str	r2, [sp, #12]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	bfb8      	it	lt
 8011d76:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d7a:	3402      	adds	r4, #2
 8011d7c:	9305      	str	r3, [sp, #20]
 8011d7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011e64 <_vfiprintf_r+0x25c>
 8011d82:	7821      	ldrb	r1, [r4, #0]
 8011d84:	2203      	movs	r2, #3
 8011d86:	4650      	mov	r0, sl
 8011d88:	f7ee fa52 	bl	8000230 <memchr>
 8011d8c:	b140      	cbz	r0, 8011da0 <_vfiprintf_r+0x198>
 8011d8e:	2340      	movs	r3, #64	; 0x40
 8011d90:	eba0 000a 	sub.w	r0, r0, sl
 8011d94:	fa03 f000 	lsl.w	r0, r3, r0
 8011d98:	9b04      	ldr	r3, [sp, #16]
 8011d9a:	4303      	orrs	r3, r0
 8011d9c:	3401      	adds	r4, #1
 8011d9e:	9304      	str	r3, [sp, #16]
 8011da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011da4:	482c      	ldr	r0, [pc, #176]	; (8011e58 <_vfiprintf_r+0x250>)
 8011da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011daa:	2206      	movs	r2, #6
 8011dac:	f7ee fa40 	bl	8000230 <memchr>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d03f      	beq.n	8011e34 <_vfiprintf_r+0x22c>
 8011db4:	4b29      	ldr	r3, [pc, #164]	; (8011e5c <_vfiprintf_r+0x254>)
 8011db6:	bb1b      	cbnz	r3, 8011e00 <_vfiprintf_r+0x1f8>
 8011db8:	9b03      	ldr	r3, [sp, #12]
 8011dba:	3307      	adds	r3, #7
 8011dbc:	f023 0307 	bic.w	r3, r3, #7
 8011dc0:	3308      	adds	r3, #8
 8011dc2:	9303      	str	r3, [sp, #12]
 8011dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dc6:	443b      	add	r3, r7
 8011dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8011dca:	e767      	b.n	8011c9c <_vfiprintf_r+0x94>
 8011dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dd0:	460c      	mov	r4, r1
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	e7a5      	b.n	8011d22 <_vfiprintf_r+0x11a>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	3401      	adds	r4, #1
 8011dda:	9305      	str	r3, [sp, #20]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	f04f 0c0a 	mov.w	ip, #10
 8011de2:	4620      	mov	r0, r4
 8011de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011de8:	3a30      	subs	r2, #48	; 0x30
 8011dea:	2a09      	cmp	r2, #9
 8011dec:	d903      	bls.n	8011df6 <_vfiprintf_r+0x1ee>
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d0c5      	beq.n	8011d7e <_vfiprintf_r+0x176>
 8011df2:	9105      	str	r1, [sp, #20]
 8011df4:	e7c3      	b.n	8011d7e <_vfiprintf_r+0x176>
 8011df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e7f0      	b.n	8011de2 <_vfiprintf_r+0x1da>
 8011e00:	ab03      	add	r3, sp, #12
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	462a      	mov	r2, r5
 8011e06:	4b16      	ldr	r3, [pc, #88]	; (8011e60 <_vfiprintf_r+0x258>)
 8011e08:	a904      	add	r1, sp, #16
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	f3af 8000 	nop.w
 8011e10:	4607      	mov	r7, r0
 8011e12:	1c78      	adds	r0, r7, #1
 8011e14:	d1d6      	bne.n	8011dc4 <_vfiprintf_r+0x1bc>
 8011e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e18:	07d9      	lsls	r1, r3, #31
 8011e1a:	d405      	bmi.n	8011e28 <_vfiprintf_r+0x220>
 8011e1c:	89ab      	ldrh	r3, [r5, #12]
 8011e1e:	059a      	lsls	r2, r3, #22
 8011e20:	d402      	bmi.n	8011e28 <_vfiprintf_r+0x220>
 8011e22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e24:	f7ff fcf9 	bl	801181a <__retarget_lock_release_recursive>
 8011e28:	89ab      	ldrh	r3, [r5, #12]
 8011e2a:	065b      	lsls	r3, r3, #25
 8011e2c:	f53f af12 	bmi.w	8011c54 <_vfiprintf_r+0x4c>
 8011e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e32:	e711      	b.n	8011c58 <_vfiprintf_r+0x50>
 8011e34:	ab03      	add	r3, sp, #12
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	462a      	mov	r2, r5
 8011e3a:	4b09      	ldr	r3, [pc, #36]	; (8011e60 <_vfiprintf_r+0x258>)
 8011e3c:	a904      	add	r1, sp, #16
 8011e3e:	4630      	mov	r0, r6
 8011e40:	f000 f880 	bl	8011f44 <_printf_i>
 8011e44:	e7e4      	b.n	8011e10 <_vfiprintf_r+0x208>
 8011e46:	bf00      	nop
 8011e48:	08012efc 	.word	0x08012efc
 8011e4c:	08012f1c 	.word	0x08012f1c
 8011e50:	08012edc 	.word	0x08012edc
 8011e54:	08012f3c 	.word	0x08012f3c
 8011e58:	08012f46 	.word	0x08012f46
 8011e5c:	00000000 	.word	0x00000000
 8011e60:	08011be3 	.word	0x08011be3
 8011e64:	08012f42 	.word	0x08012f42

08011e68 <_printf_common>:
 8011e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e6c:	4616      	mov	r6, r2
 8011e6e:	4699      	mov	r9, r3
 8011e70:	688a      	ldr	r2, [r1, #8]
 8011e72:	690b      	ldr	r3, [r1, #16]
 8011e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	bfb8      	it	lt
 8011e7c:	4613      	movlt	r3, r2
 8011e7e:	6033      	str	r3, [r6, #0]
 8011e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e84:	4607      	mov	r7, r0
 8011e86:	460c      	mov	r4, r1
 8011e88:	b10a      	cbz	r2, 8011e8e <_printf_common+0x26>
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	6033      	str	r3, [r6, #0]
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	0699      	lsls	r1, r3, #26
 8011e92:	bf42      	ittt	mi
 8011e94:	6833      	ldrmi	r3, [r6, #0]
 8011e96:	3302      	addmi	r3, #2
 8011e98:	6033      	strmi	r3, [r6, #0]
 8011e9a:	6825      	ldr	r5, [r4, #0]
 8011e9c:	f015 0506 	ands.w	r5, r5, #6
 8011ea0:	d106      	bne.n	8011eb0 <_printf_common+0x48>
 8011ea2:	f104 0a19 	add.w	sl, r4, #25
 8011ea6:	68e3      	ldr	r3, [r4, #12]
 8011ea8:	6832      	ldr	r2, [r6, #0]
 8011eaa:	1a9b      	subs	r3, r3, r2
 8011eac:	42ab      	cmp	r3, r5
 8011eae:	dc26      	bgt.n	8011efe <_printf_common+0x96>
 8011eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011eb4:	1e13      	subs	r3, r2, #0
 8011eb6:	6822      	ldr	r2, [r4, #0]
 8011eb8:	bf18      	it	ne
 8011eba:	2301      	movne	r3, #1
 8011ebc:	0692      	lsls	r2, r2, #26
 8011ebe:	d42b      	bmi.n	8011f18 <_printf_common+0xb0>
 8011ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ec4:	4649      	mov	r1, r9
 8011ec6:	4638      	mov	r0, r7
 8011ec8:	47c0      	blx	r8
 8011eca:	3001      	adds	r0, #1
 8011ecc:	d01e      	beq.n	8011f0c <_printf_common+0xa4>
 8011ece:	6823      	ldr	r3, [r4, #0]
 8011ed0:	68e5      	ldr	r5, [r4, #12]
 8011ed2:	6832      	ldr	r2, [r6, #0]
 8011ed4:	f003 0306 	and.w	r3, r3, #6
 8011ed8:	2b04      	cmp	r3, #4
 8011eda:	bf08      	it	eq
 8011edc:	1aad      	subeq	r5, r5, r2
 8011ede:	68a3      	ldr	r3, [r4, #8]
 8011ee0:	6922      	ldr	r2, [r4, #16]
 8011ee2:	bf0c      	ite	eq
 8011ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ee8:	2500      	movne	r5, #0
 8011eea:	4293      	cmp	r3, r2
 8011eec:	bfc4      	itt	gt
 8011eee:	1a9b      	subgt	r3, r3, r2
 8011ef0:	18ed      	addgt	r5, r5, r3
 8011ef2:	2600      	movs	r6, #0
 8011ef4:	341a      	adds	r4, #26
 8011ef6:	42b5      	cmp	r5, r6
 8011ef8:	d11a      	bne.n	8011f30 <_printf_common+0xc8>
 8011efa:	2000      	movs	r0, #0
 8011efc:	e008      	b.n	8011f10 <_printf_common+0xa8>
 8011efe:	2301      	movs	r3, #1
 8011f00:	4652      	mov	r2, sl
 8011f02:	4649      	mov	r1, r9
 8011f04:	4638      	mov	r0, r7
 8011f06:	47c0      	blx	r8
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d103      	bne.n	8011f14 <_printf_common+0xac>
 8011f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f14:	3501      	adds	r5, #1
 8011f16:	e7c6      	b.n	8011ea6 <_printf_common+0x3e>
 8011f18:	18e1      	adds	r1, r4, r3
 8011f1a:	1c5a      	adds	r2, r3, #1
 8011f1c:	2030      	movs	r0, #48	; 0x30
 8011f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f22:	4422      	add	r2, r4
 8011f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f2c:	3302      	adds	r3, #2
 8011f2e:	e7c7      	b.n	8011ec0 <_printf_common+0x58>
 8011f30:	2301      	movs	r3, #1
 8011f32:	4622      	mov	r2, r4
 8011f34:	4649      	mov	r1, r9
 8011f36:	4638      	mov	r0, r7
 8011f38:	47c0      	blx	r8
 8011f3a:	3001      	adds	r0, #1
 8011f3c:	d0e6      	beq.n	8011f0c <_printf_common+0xa4>
 8011f3e:	3601      	adds	r6, #1
 8011f40:	e7d9      	b.n	8011ef6 <_printf_common+0x8e>
	...

08011f44 <_printf_i>:
 8011f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f48:	460c      	mov	r4, r1
 8011f4a:	4691      	mov	r9, r2
 8011f4c:	7e27      	ldrb	r7, [r4, #24]
 8011f4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f50:	2f78      	cmp	r7, #120	; 0x78
 8011f52:	4680      	mov	r8, r0
 8011f54:	469a      	mov	sl, r3
 8011f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f5a:	d807      	bhi.n	8011f6c <_printf_i+0x28>
 8011f5c:	2f62      	cmp	r7, #98	; 0x62
 8011f5e:	d80a      	bhi.n	8011f76 <_printf_i+0x32>
 8011f60:	2f00      	cmp	r7, #0
 8011f62:	f000 80d8 	beq.w	8012116 <_printf_i+0x1d2>
 8011f66:	2f58      	cmp	r7, #88	; 0x58
 8011f68:	f000 80a3 	beq.w	80120b2 <_printf_i+0x16e>
 8011f6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f74:	e03a      	b.n	8011fec <_printf_i+0xa8>
 8011f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f7a:	2b15      	cmp	r3, #21
 8011f7c:	d8f6      	bhi.n	8011f6c <_printf_i+0x28>
 8011f7e:	a001      	add	r0, pc, #4	; (adr r0, 8011f84 <_printf_i+0x40>)
 8011f80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011f84:	08011fdd 	.word	0x08011fdd
 8011f88:	08011ff1 	.word	0x08011ff1
 8011f8c:	08011f6d 	.word	0x08011f6d
 8011f90:	08011f6d 	.word	0x08011f6d
 8011f94:	08011f6d 	.word	0x08011f6d
 8011f98:	08011f6d 	.word	0x08011f6d
 8011f9c:	08011ff1 	.word	0x08011ff1
 8011fa0:	08011f6d 	.word	0x08011f6d
 8011fa4:	08011f6d 	.word	0x08011f6d
 8011fa8:	08011f6d 	.word	0x08011f6d
 8011fac:	08011f6d 	.word	0x08011f6d
 8011fb0:	080120fd 	.word	0x080120fd
 8011fb4:	08012021 	.word	0x08012021
 8011fb8:	080120df 	.word	0x080120df
 8011fbc:	08011f6d 	.word	0x08011f6d
 8011fc0:	08011f6d 	.word	0x08011f6d
 8011fc4:	0801211f 	.word	0x0801211f
 8011fc8:	08011f6d 	.word	0x08011f6d
 8011fcc:	08012021 	.word	0x08012021
 8011fd0:	08011f6d 	.word	0x08011f6d
 8011fd4:	08011f6d 	.word	0x08011f6d
 8011fd8:	080120e7 	.word	0x080120e7
 8011fdc:	680b      	ldr	r3, [r1, #0]
 8011fde:	1d1a      	adds	r2, r3, #4
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	600a      	str	r2, [r1, #0]
 8011fe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fec:	2301      	movs	r3, #1
 8011fee:	e0a3      	b.n	8012138 <_printf_i+0x1f4>
 8011ff0:	6825      	ldr	r5, [r4, #0]
 8011ff2:	6808      	ldr	r0, [r1, #0]
 8011ff4:	062e      	lsls	r6, r5, #24
 8011ff6:	f100 0304 	add.w	r3, r0, #4
 8011ffa:	d50a      	bpl.n	8012012 <_printf_i+0xce>
 8011ffc:	6805      	ldr	r5, [r0, #0]
 8011ffe:	600b      	str	r3, [r1, #0]
 8012000:	2d00      	cmp	r5, #0
 8012002:	da03      	bge.n	801200c <_printf_i+0xc8>
 8012004:	232d      	movs	r3, #45	; 0x2d
 8012006:	426d      	negs	r5, r5
 8012008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801200c:	485e      	ldr	r0, [pc, #376]	; (8012188 <_printf_i+0x244>)
 801200e:	230a      	movs	r3, #10
 8012010:	e019      	b.n	8012046 <_printf_i+0x102>
 8012012:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012016:	6805      	ldr	r5, [r0, #0]
 8012018:	600b      	str	r3, [r1, #0]
 801201a:	bf18      	it	ne
 801201c:	b22d      	sxthne	r5, r5
 801201e:	e7ef      	b.n	8012000 <_printf_i+0xbc>
 8012020:	680b      	ldr	r3, [r1, #0]
 8012022:	6825      	ldr	r5, [r4, #0]
 8012024:	1d18      	adds	r0, r3, #4
 8012026:	6008      	str	r0, [r1, #0]
 8012028:	0628      	lsls	r0, r5, #24
 801202a:	d501      	bpl.n	8012030 <_printf_i+0xec>
 801202c:	681d      	ldr	r5, [r3, #0]
 801202e:	e002      	b.n	8012036 <_printf_i+0xf2>
 8012030:	0669      	lsls	r1, r5, #25
 8012032:	d5fb      	bpl.n	801202c <_printf_i+0xe8>
 8012034:	881d      	ldrh	r5, [r3, #0]
 8012036:	4854      	ldr	r0, [pc, #336]	; (8012188 <_printf_i+0x244>)
 8012038:	2f6f      	cmp	r7, #111	; 0x6f
 801203a:	bf0c      	ite	eq
 801203c:	2308      	moveq	r3, #8
 801203e:	230a      	movne	r3, #10
 8012040:	2100      	movs	r1, #0
 8012042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012046:	6866      	ldr	r6, [r4, #4]
 8012048:	60a6      	str	r6, [r4, #8]
 801204a:	2e00      	cmp	r6, #0
 801204c:	bfa2      	ittt	ge
 801204e:	6821      	ldrge	r1, [r4, #0]
 8012050:	f021 0104 	bicge.w	r1, r1, #4
 8012054:	6021      	strge	r1, [r4, #0]
 8012056:	b90d      	cbnz	r5, 801205c <_printf_i+0x118>
 8012058:	2e00      	cmp	r6, #0
 801205a:	d04d      	beq.n	80120f8 <_printf_i+0x1b4>
 801205c:	4616      	mov	r6, r2
 801205e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012062:	fb03 5711 	mls	r7, r3, r1, r5
 8012066:	5dc7      	ldrb	r7, [r0, r7]
 8012068:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801206c:	462f      	mov	r7, r5
 801206e:	42bb      	cmp	r3, r7
 8012070:	460d      	mov	r5, r1
 8012072:	d9f4      	bls.n	801205e <_printf_i+0x11a>
 8012074:	2b08      	cmp	r3, #8
 8012076:	d10b      	bne.n	8012090 <_printf_i+0x14c>
 8012078:	6823      	ldr	r3, [r4, #0]
 801207a:	07df      	lsls	r7, r3, #31
 801207c:	d508      	bpl.n	8012090 <_printf_i+0x14c>
 801207e:	6923      	ldr	r3, [r4, #16]
 8012080:	6861      	ldr	r1, [r4, #4]
 8012082:	4299      	cmp	r1, r3
 8012084:	bfde      	ittt	le
 8012086:	2330      	movle	r3, #48	; 0x30
 8012088:	f806 3c01 	strble.w	r3, [r6, #-1]
 801208c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012090:	1b92      	subs	r2, r2, r6
 8012092:	6122      	str	r2, [r4, #16]
 8012094:	f8cd a000 	str.w	sl, [sp]
 8012098:	464b      	mov	r3, r9
 801209a:	aa03      	add	r2, sp, #12
 801209c:	4621      	mov	r1, r4
 801209e:	4640      	mov	r0, r8
 80120a0:	f7ff fee2 	bl	8011e68 <_printf_common>
 80120a4:	3001      	adds	r0, #1
 80120a6:	d14c      	bne.n	8012142 <_printf_i+0x1fe>
 80120a8:	f04f 30ff 	mov.w	r0, #4294967295
 80120ac:	b004      	add	sp, #16
 80120ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120b2:	4835      	ldr	r0, [pc, #212]	; (8012188 <_printf_i+0x244>)
 80120b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80120b8:	6823      	ldr	r3, [r4, #0]
 80120ba:	680e      	ldr	r6, [r1, #0]
 80120bc:	061f      	lsls	r7, r3, #24
 80120be:	f856 5b04 	ldr.w	r5, [r6], #4
 80120c2:	600e      	str	r6, [r1, #0]
 80120c4:	d514      	bpl.n	80120f0 <_printf_i+0x1ac>
 80120c6:	07d9      	lsls	r1, r3, #31
 80120c8:	bf44      	itt	mi
 80120ca:	f043 0320 	orrmi.w	r3, r3, #32
 80120ce:	6023      	strmi	r3, [r4, #0]
 80120d0:	b91d      	cbnz	r5, 80120da <_printf_i+0x196>
 80120d2:	6823      	ldr	r3, [r4, #0]
 80120d4:	f023 0320 	bic.w	r3, r3, #32
 80120d8:	6023      	str	r3, [r4, #0]
 80120da:	2310      	movs	r3, #16
 80120dc:	e7b0      	b.n	8012040 <_printf_i+0xfc>
 80120de:	6823      	ldr	r3, [r4, #0]
 80120e0:	f043 0320 	orr.w	r3, r3, #32
 80120e4:	6023      	str	r3, [r4, #0]
 80120e6:	2378      	movs	r3, #120	; 0x78
 80120e8:	4828      	ldr	r0, [pc, #160]	; (801218c <_printf_i+0x248>)
 80120ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120ee:	e7e3      	b.n	80120b8 <_printf_i+0x174>
 80120f0:	065e      	lsls	r6, r3, #25
 80120f2:	bf48      	it	mi
 80120f4:	b2ad      	uxthmi	r5, r5
 80120f6:	e7e6      	b.n	80120c6 <_printf_i+0x182>
 80120f8:	4616      	mov	r6, r2
 80120fa:	e7bb      	b.n	8012074 <_printf_i+0x130>
 80120fc:	680b      	ldr	r3, [r1, #0]
 80120fe:	6826      	ldr	r6, [r4, #0]
 8012100:	6960      	ldr	r0, [r4, #20]
 8012102:	1d1d      	adds	r5, r3, #4
 8012104:	600d      	str	r5, [r1, #0]
 8012106:	0635      	lsls	r5, r6, #24
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	d501      	bpl.n	8012110 <_printf_i+0x1cc>
 801210c:	6018      	str	r0, [r3, #0]
 801210e:	e002      	b.n	8012116 <_printf_i+0x1d2>
 8012110:	0671      	lsls	r1, r6, #25
 8012112:	d5fb      	bpl.n	801210c <_printf_i+0x1c8>
 8012114:	8018      	strh	r0, [r3, #0]
 8012116:	2300      	movs	r3, #0
 8012118:	6123      	str	r3, [r4, #16]
 801211a:	4616      	mov	r6, r2
 801211c:	e7ba      	b.n	8012094 <_printf_i+0x150>
 801211e:	680b      	ldr	r3, [r1, #0]
 8012120:	1d1a      	adds	r2, r3, #4
 8012122:	600a      	str	r2, [r1, #0]
 8012124:	681e      	ldr	r6, [r3, #0]
 8012126:	6862      	ldr	r2, [r4, #4]
 8012128:	2100      	movs	r1, #0
 801212a:	4630      	mov	r0, r6
 801212c:	f7ee f880 	bl	8000230 <memchr>
 8012130:	b108      	cbz	r0, 8012136 <_printf_i+0x1f2>
 8012132:	1b80      	subs	r0, r0, r6
 8012134:	6060      	str	r0, [r4, #4]
 8012136:	6863      	ldr	r3, [r4, #4]
 8012138:	6123      	str	r3, [r4, #16]
 801213a:	2300      	movs	r3, #0
 801213c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012140:	e7a8      	b.n	8012094 <_printf_i+0x150>
 8012142:	6923      	ldr	r3, [r4, #16]
 8012144:	4632      	mov	r2, r6
 8012146:	4649      	mov	r1, r9
 8012148:	4640      	mov	r0, r8
 801214a:	47d0      	blx	sl
 801214c:	3001      	adds	r0, #1
 801214e:	d0ab      	beq.n	80120a8 <_printf_i+0x164>
 8012150:	6823      	ldr	r3, [r4, #0]
 8012152:	079b      	lsls	r3, r3, #30
 8012154:	d413      	bmi.n	801217e <_printf_i+0x23a>
 8012156:	68e0      	ldr	r0, [r4, #12]
 8012158:	9b03      	ldr	r3, [sp, #12]
 801215a:	4298      	cmp	r0, r3
 801215c:	bfb8      	it	lt
 801215e:	4618      	movlt	r0, r3
 8012160:	e7a4      	b.n	80120ac <_printf_i+0x168>
 8012162:	2301      	movs	r3, #1
 8012164:	4632      	mov	r2, r6
 8012166:	4649      	mov	r1, r9
 8012168:	4640      	mov	r0, r8
 801216a:	47d0      	blx	sl
 801216c:	3001      	adds	r0, #1
 801216e:	d09b      	beq.n	80120a8 <_printf_i+0x164>
 8012170:	3501      	adds	r5, #1
 8012172:	68e3      	ldr	r3, [r4, #12]
 8012174:	9903      	ldr	r1, [sp, #12]
 8012176:	1a5b      	subs	r3, r3, r1
 8012178:	42ab      	cmp	r3, r5
 801217a:	dcf2      	bgt.n	8012162 <_printf_i+0x21e>
 801217c:	e7eb      	b.n	8012156 <_printf_i+0x212>
 801217e:	2500      	movs	r5, #0
 8012180:	f104 0619 	add.w	r6, r4, #25
 8012184:	e7f5      	b.n	8012172 <_printf_i+0x22e>
 8012186:	bf00      	nop
 8012188:	08012f4d 	.word	0x08012f4d
 801218c:	08012f5e 	.word	0x08012f5e

08012190 <__sread>:
 8012190:	b510      	push	{r4, lr}
 8012192:	460c      	mov	r4, r1
 8012194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012198:	f000 f8d4 	bl	8012344 <_read_r>
 801219c:	2800      	cmp	r0, #0
 801219e:	bfab      	itete	ge
 80121a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121a2:	89a3      	ldrhlt	r3, [r4, #12]
 80121a4:	181b      	addge	r3, r3, r0
 80121a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121aa:	bfac      	ite	ge
 80121ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80121ae:	81a3      	strhlt	r3, [r4, #12]
 80121b0:	bd10      	pop	{r4, pc}

080121b2 <__swrite>:
 80121b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121b6:	461f      	mov	r7, r3
 80121b8:	898b      	ldrh	r3, [r1, #12]
 80121ba:	05db      	lsls	r3, r3, #23
 80121bc:	4605      	mov	r5, r0
 80121be:	460c      	mov	r4, r1
 80121c0:	4616      	mov	r6, r2
 80121c2:	d505      	bpl.n	80121d0 <__swrite+0x1e>
 80121c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121c8:	2302      	movs	r3, #2
 80121ca:	2200      	movs	r2, #0
 80121cc:	f000 f868 	bl	80122a0 <_lseek_r>
 80121d0:	89a3      	ldrh	r3, [r4, #12]
 80121d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121da:	81a3      	strh	r3, [r4, #12]
 80121dc:	4632      	mov	r2, r6
 80121de:	463b      	mov	r3, r7
 80121e0:	4628      	mov	r0, r5
 80121e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121e6:	f000 b817 	b.w	8012218 <_write_r>

080121ea <__sseek>:
 80121ea:	b510      	push	{r4, lr}
 80121ec:	460c      	mov	r4, r1
 80121ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121f2:	f000 f855 	bl	80122a0 <_lseek_r>
 80121f6:	1c43      	adds	r3, r0, #1
 80121f8:	89a3      	ldrh	r3, [r4, #12]
 80121fa:	bf15      	itete	ne
 80121fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80121fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012206:	81a3      	strheq	r3, [r4, #12]
 8012208:	bf18      	it	ne
 801220a:	81a3      	strhne	r3, [r4, #12]
 801220c:	bd10      	pop	{r4, pc}

0801220e <__sclose>:
 801220e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012212:	f000 b813 	b.w	801223c <_close_r>
	...

08012218 <_write_r>:
 8012218:	b538      	push	{r3, r4, r5, lr}
 801221a:	4d07      	ldr	r5, [pc, #28]	; (8012238 <_write_r+0x20>)
 801221c:	4604      	mov	r4, r0
 801221e:	4608      	mov	r0, r1
 8012220:	4611      	mov	r1, r2
 8012222:	2200      	movs	r2, #0
 8012224:	602a      	str	r2, [r5, #0]
 8012226:	461a      	mov	r2, r3
 8012228:	f7ef f98c 	bl	8001544 <_write>
 801222c:	1c43      	adds	r3, r0, #1
 801222e:	d102      	bne.n	8012236 <_write_r+0x1e>
 8012230:	682b      	ldr	r3, [r5, #0]
 8012232:	b103      	cbz	r3, 8012236 <_write_r+0x1e>
 8012234:	6023      	str	r3, [r4, #0]
 8012236:	bd38      	pop	{r3, r4, r5, pc}
 8012238:	20002f10 	.word	0x20002f10

0801223c <_close_r>:
 801223c:	b538      	push	{r3, r4, r5, lr}
 801223e:	4d06      	ldr	r5, [pc, #24]	; (8012258 <_close_r+0x1c>)
 8012240:	2300      	movs	r3, #0
 8012242:	4604      	mov	r4, r0
 8012244:	4608      	mov	r0, r1
 8012246:	602b      	str	r3, [r5, #0]
 8012248:	f7ef fd0d 	bl	8001c66 <_close>
 801224c:	1c43      	adds	r3, r0, #1
 801224e:	d102      	bne.n	8012256 <_close_r+0x1a>
 8012250:	682b      	ldr	r3, [r5, #0]
 8012252:	b103      	cbz	r3, 8012256 <_close_r+0x1a>
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	bd38      	pop	{r3, r4, r5, pc}
 8012258:	20002f10 	.word	0x20002f10

0801225c <_fstat_r>:
 801225c:	b538      	push	{r3, r4, r5, lr}
 801225e:	4d07      	ldr	r5, [pc, #28]	; (801227c <_fstat_r+0x20>)
 8012260:	2300      	movs	r3, #0
 8012262:	4604      	mov	r4, r0
 8012264:	4608      	mov	r0, r1
 8012266:	4611      	mov	r1, r2
 8012268:	602b      	str	r3, [r5, #0]
 801226a:	f7ef fd08 	bl	8001c7e <_fstat>
 801226e:	1c43      	adds	r3, r0, #1
 8012270:	d102      	bne.n	8012278 <_fstat_r+0x1c>
 8012272:	682b      	ldr	r3, [r5, #0]
 8012274:	b103      	cbz	r3, 8012278 <_fstat_r+0x1c>
 8012276:	6023      	str	r3, [r4, #0]
 8012278:	bd38      	pop	{r3, r4, r5, pc}
 801227a:	bf00      	nop
 801227c:	20002f10 	.word	0x20002f10

08012280 <_isatty_r>:
 8012280:	b538      	push	{r3, r4, r5, lr}
 8012282:	4d06      	ldr	r5, [pc, #24]	; (801229c <_isatty_r+0x1c>)
 8012284:	2300      	movs	r3, #0
 8012286:	4604      	mov	r4, r0
 8012288:	4608      	mov	r0, r1
 801228a:	602b      	str	r3, [r5, #0]
 801228c:	f7ef fd07 	bl	8001c9e <_isatty>
 8012290:	1c43      	adds	r3, r0, #1
 8012292:	d102      	bne.n	801229a <_isatty_r+0x1a>
 8012294:	682b      	ldr	r3, [r5, #0]
 8012296:	b103      	cbz	r3, 801229a <_isatty_r+0x1a>
 8012298:	6023      	str	r3, [r4, #0]
 801229a:	bd38      	pop	{r3, r4, r5, pc}
 801229c:	20002f10 	.word	0x20002f10

080122a0 <_lseek_r>:
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	4d07      	ldr	r5, [pc, #28]	; (80122c0 <_lseek_r+0x20>)
 80122a4:	4604      	mov	r4, r0
 80122a6:	4608      	mov	r0, r1
 80122a8:	4611      	mov	r1, r2
 80122aa:	2200      	movs	r2, #0
 80122ac:	602a      	str	r2, [r5, #0]
 80122ae:	461a      	mov	r2, r3
 80122b0:	f7ef fd00 	bl	8001cb4 <_lseek>
 80122b4:	1c43      	adds	r3, r0, #1
 80122b6:	d102      	bne.n	80122be <_lseek_r+0x1e>
 80122b8:	682b      	ldr	r3, [r5, #0]
 80122ba:	b103      	cbz	r3, 80122be <_lseek_r+0x1e>
 80122bc:	6023      	str	r3, [r4, #0]
 80122be:	bd38      	pop	{r3, r4, r5, pc}
 80122c0:	20002f10 	.word	0x20002f10

080122c4 <memmove>:
 80122c4:	4288      	cmp	r0, r1
 80122c6:	b510      	push	{r4, lr}
 80122c8:	eb01 0402 	add.w	r4, r1, r2
 80122cc:	d902      	bls.n	80122d4 <memmove+0x10>
 80122ce:	4284      	cmp	r4, r0
 80122d0:	4623      	mov	r3, r4
 80122d2:	d807      	bhi.n	80122e4 <memmove+0x20>
 80122d4:	1e43      	subs	r3, r0, #1
 80122d6:	42a1      	cmp	r1, r4
 80122d8:	d008      	beq.n	80122ec <memmove+0x28>
 80122da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122e2:	e7f8      	b.n	80122d6 <memmove+0x12>
 80122e4:	4402      	add	r2, r0
 80122e6:	4601      	mov	r1, r0
 80122e8:	428a      	cmp	r2, r1
 80122ea:	d100      	bne.n	80122ee <memmove+0x2a>
 80122ec:	bd10      	pop	{r4, pc}
 80122ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122f6:	e7f7      	b.n	80122e8 <memmove+0x24>

080122f8 <_realloc_r>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	4607      	mov	r7, r0
 80122fc:	4614      	mov	r4, r2
 80122fe:	460e      	mov	r6, r1
 8012300:	b921      	cbnz	r1, 801230c <_realloc_r+0x14>
 8012302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012306:	4611      	mov	r1, r2
 8012308:	f7fe bef6 	b.w	80110f8 <_malloc_r>
 801230c:	b922      	cbnz	r2, 8012318 <_realloc_r+0x20>
 801230e:	f7fe fea3 	bl	8011058 <_free_r>
 8012312:	4625      	mov	r5, r4
 8012314:	4628      	mov	r0, r5
 8012316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012318:	f000 f826 	bl	8012368 <_malloc_usable_size_r>
 801231c:	42a0      	cmp	r0, r4
 801231e:	d20f      	bcs.n	8012340 <_realloc_r+0x48>
 8012320:	4621      	mov	r1, r4
 8012322:	4638      	mov	r0, r7
 8012324:	f7fe fee8 	bl	80110f8 <_malloc_r>
 8012328:	4605      	mov	r5, r0
 801232a:	2800      	cmp	r0, #0
 801232c:	d0f2      	beq.n	8012314 <_realloc_r+0x1c>
 801232e:	4631      	mov	r1, r6
 8012330:	4622      	mov	r2, r4
 8012332:	f7fe fe7b 	bl	801102c <memcpy>
 8012336:	4631      	mov	r1, r6
 8012338:	4638      	mov	r0, r7
 801233a:	f7fe fe8d 	bl	8011058 <_free_r>
 801233e:	e7e9      	b.n	8012314 <_realloc_r+0x1c>
 8012340:	4635      	mov	r5, r6
 8012342:	e7e7      	b.n	8012314 <_realloc_r+0x1c>

08012344 <_read_r>:
 8012344:	b538      	push	{r3, r4, r5, lr}
 8012346:	4d07      	ldr	r5, [pc, #28]	; (8012364 <_read_r+0x20>)
 8012348:	4604      	mov	r4, r0
 801234a:	4608      	mov	r0, r1
 801234c:	4611      	mov	r1, r2
 801234e:	2200      	movs	r2, #0
 8012350:	602a      	str	r2, [r5, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	f7ef fc6a 	bl	8001c2c <_read>
 8012358:	1c43      	adds	r3, r0, #1
 801235a:	d102      	bne.n	8012362 <_read_r+0x1e>
 801235c:	682b      	ldr	r3, [r5, #0]
 801235e:	b103      	cbz	r3, 8012362 <_read_r+0x1e>
 8012360:	6023      	str	r3, [r4, #0]
 8012362:	bd38      	pop	{r3, r4, r5, pc}
 8012364:	20002f10 	.word	0x20002f10

08012368 <_malloc_usable_size_r>:
 8012368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801236c:	1f18      	subs	r0, r3, #4
 801236e:	2b00      	cmp	r3, #0
 8012370:	bfbc      	itt	lt
 8012372:	580b      	ldrlt	r3, [r1, r0]
 8012374:	18c0      	addlt	r0, r0, r3
 8012376:	4770      	bx	lr

08012378 <_init>:
 8012378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801237a:	bf00      	nop
 801237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801237e:	bc08      	pop	{r3}
 8012380:	469e      	mov	lr, r3
 8012382:	4770      	bx	lr

08012384 <_fini>:
 8012384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012386:	bf00      	nop
 8012388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801238a:	bc08      	pop	{r3}
 801238c:	469e      	mov	lr, r3
 801238e:	4770      	bx	lr
