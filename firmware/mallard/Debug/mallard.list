
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b438  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b714  0800b714  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800b714  0800b714  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b714  0800b714  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b714  0800b714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b718  0800b718  0001b718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002894  20000090  0800b7ac  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002924  0800b7ac  00022924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029cb3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fbf  00000000  00000000  00049d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0004ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  00050260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007135  00000000  00000000  00051590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5d7  00000000  00000000  000586c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122dab  00000000  00000000  00074c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197a47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e40  00000000  00000000  00197a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000090 	.word	0x20000090
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b5e0 	.word	0x0800b5e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000094 	.word	0x20000094
 80001fc:	0800b5e0 	.word	0x0800b5e0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <blinky>:
/* USER CODE BEGIN 0 */
// ************************************************* START FUNCTIONS HERE ***************************************

// Blinky!!
void blinky(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e011      	b.n	80002d0 <blinky+0x30>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <blinky+0x40>)
 80002b0:	f002 f97a 	bl	80025a8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80002b4:	2064      	movs	r0, #100	; 0x64
 80002b6:	f000 fc87 	bl	8000bc8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80002ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002be:	4808      	ldr	r0, [pc, #32]	; (80002e0 <blinky+0x40>)
 80002c0:	f002 f972 	bl	80025a8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80002c4:	2064      	movs	r0, #100	; 0x64
 80002c6:	f000 fc7f 	bl	8000bc8 <HAL_Delay>
	for(int i = 0; i < 2; i ++)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	3301      	adds	r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	ddea      	ble.n	80002ac <blinky+0xc>
	}
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	48000400 	.word	0x48000400

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ea:	f000 fbf8 	bl	8000ade <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ee:	f000 f82f 	bl	8000350 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002f2:	f000 f886 	bl	8000402 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f6:	f000 f975 	bl	80005e4 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80002fa:	f009 fe8f 	bl	800a01c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80002fe:	f000 f8af 	bl	8000460 <MX_ADC1_Init>
  MX_USART1_Init();
 8000302:	f000 f923 	bl	800054c <MX_USART1_Init>
  MX_FATFS_Init();
 8000306:	f006 fe27 	bl	8006f58 <MX_FATFS_Init>
  // ************************************************* START BEFORE WHILE CODE HERE ***************************************

  // Bootup Blinkys
  // These are put in place to allow programming before the microcontroller enters its sleep loop, currently its set to wait 5 seconds before entering sleep mode

  printf("System Starting!");
 800030a:	480f      	ldr	r0, [pc, #60]	; (8000348 <main+0x64>)
 800030c:	f00a fabc 	bl	800a888 <iprintf>

  blinky();
 8000310:	f7ff ffc6 	bl	80002a0 <blinky>
  HAL_Delay(5000);
 8000314:	f241 3088 	movw	r0, #5000	; 0x1388
 8000318:	f000 fc56 	bl	8000bc8 <HAL_Delay>
  blinky();
 800031c:	f7ff ffc0 	bl	80002a0 <blinky>
  //Assign ADC Variable
  uint16_t ADC_READING = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000324:	f009 fea0 	bl	800a068 <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */


    // ************************************************* START WHILE CODE HERE ***************************************
    //Start ADC Conversion
    HAL_ADC_Start(&hadc1);
 8000328:	4808      	ldr	r0, [pc, #32]	; (800034c <main+0x68>)
 800032a:	f000 ffb9 	bl	80012a0 <HAL_ADC_Start>

    //Poll ADC 1 Periferal and Timeout 1ms
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800032e:	f04f 31ff 	mov.w	r1, #4294967295
 8000332:	4806      	ldr	r0, [pc, #24]	; (800034c <main+0x68>)
 8000334:	f001 f86e 	bl	8001414 <HAL_ADC_PollForConversion>

    //Store ADC Value in ADC_Reading
    ADC_READING = HAL_ADC_GetValue(&hadc1);
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <main+0x68>)
 800033a:	f001 f943 	bl	80015c4 <HAL_ADC_GetValue>
 800033e:	4603      	mov	r3, r0
 8000340:	80fb      	strh	r3, [r7, #6]

    // Enter sleep mode using RTC wakeup functions
    // enterSleepMode(3); // Parameter depicts how long the sleep cycle is (currently its set to 3 seconds)
    blinky();
 8000342:	f7ff ffad 	bl	80002a0 <blinky>
    MX_USB_HOST_Process();
 8000346:	e7ed      	b.n	8000324 <main+0x40>
 8000348:	0800b5f8 	.word	0x0800b5f8
 800034c:	200000c8 	.word	0x200000c8

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b098      	sub	sp, #96	; 0x60
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	2248      	movs	r2, #72	; 0x48
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f00a f9e0 	bl	800a724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000372:	2000      	movs	r0, #0
 8000374:	f003 fcfc 	bl	8003d70 <HAL_PWREx_ControlVoltageScaling>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800037e:	f000 f999 	bl	80006b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000382:	2310      	movs	r3, #16
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000396:	2301      	movs	r3, #1
 8000398:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800039a:	2301      	movs	r3, #1
 800039c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800039e:	233c      	movs	r3, #60	; 0x3c
 80003a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003a2:	2302      	movs	r3, #2
 80003a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003aa:	2302      	movs	r3, #2
 80003ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 fd90 	bl	8003ed8 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003be:	f000 f979 	bl	80006b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2303      	movs	r3, #3
 80003c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2105      	movs	r1, #5
 80003da:	4618      	mov	r0, r3
 80003dc:	f004 fa04 	bl	80047e8 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e6:	f000 f965 	bl	80006b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80003f0:	2000      	movs	r0, #0
 80003f2:	f004 fb25 	bl	8004a40 <HAL_RCC_MCOConfig>
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80003f6:	f005 f849 	bl	800548c <HAL_RCCEx_EnableMSIPLLMode>
}
 80003fa:	bf00      	nop
 80003fc:	3760      	adds	r7, #96	; 0x60
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b0a6      	sub	sp, #152	; 0x98
 8000406:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000408:	463b      	mov	r3, r7
 800040a:	2298      	movs	r2, #152	; 0x98
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f00a f988 	bl	800a724 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000414:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000418:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800041a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800041e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000422:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000426:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000428:	2301      	movs	r3, #1
 800042a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800042c:	2301      	movs	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000430:	2318      	movs	r3, #24
 8000432:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000434:	2302      	movs	r3, #2
 8000436:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000438:	2302      	movs	r3, #2
 800043a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800043c:	2302      	movs	r3, #2
 800043e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000440:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000444:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	4618      	mov	r0, r3
 800044a:	f004 fcb3 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000454:	f000 f92e 	bl	80006b4 <Error_Handler>
  }
}
 8000458:	bf00      	nop
 800045a:	3798      	adds	r7, #152	; 0x98
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000466:	f107 031c 	add.w	r3, r7, #28
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
 8000480:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000482:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <MX_ADC1_Init+0xe0>)
 8000484:	4a2f      	ldr	r2, [pc, #188]	; (8000544 <MX_ADC1_Init+0xe4>)
 8000486:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000488:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <MX_ADC1_Init+0xe0>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800048e:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <MX_ADC1_Init+0xe0>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000494:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <MX_ADC1_Init+0xe0>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800049a:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_ADC1_Init+0xe0>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004a0:	4b27      	ldr	r3, [pc, #156]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004a6:	4b26      	ldr	r3, [pc, #152]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ac:	4b24      	ldr	r3, [pc, #144]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004b8:	4b21      	ldr	r3, [pc, #132]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c6:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d4:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004da:	4b19      	ldr	r3, [pc, #100]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e2:	4817      	ldr	r0, [pc, #92]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004e4:	f000 fd8a 	bl	8000ffc <HAL_ADC_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80004ee:	f000 f8e1 	bl	80006b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	4619      	mov	r1, r3
 80004fc:	4810      	ldr	r0, [pc, #64]	; (8000540 <MX_ADC1_Init+0xe0>)
 80004fe:	f001 fcf3 	bl	8001ee8 <HAL_ADCEx_MultiModeConfigChannel>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000508:	f000 f8d4 	bl	80006b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_ADC1_Init+0xe8>)
 800050e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000510:	2306      	movs	r3, #6
 8000512:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000518:	237f      	movs	r3, #127	; 0x7f
 800051a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800051c:	2304      	movs	r3, #4
 800051e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_ADC1_Init+0xe0>)
 800052a:	f001 f859 	bl	80015e0 <HAL_ADC_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000534:	f000 f8be 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	3728      	adds	r7, #40	; 0x28
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000c8 	.word	0x200000c8
 8000544:	50040000 	.word	0x50040000
 8000548:	43210000 	.word	0x43210000

0800054c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <MX_USART1_Init+0x90>)
 8000552:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <MX_USART1_Init+0x94>)
 8000554:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_USART1_Init+0x90>)
 8000558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800055c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <MX_USART1_Init+0x90>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MX_USART1_Init+0x90>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_USART1_Init+0x90>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_USART1_Init+0x90>)
 8000572:	220c      	movs	r2, #12
 8000574:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_USART1_Init+0x90>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_USART1_Init+0x90>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_USART1_Init+0x90>)
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_USART1_Init+0x90>)
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_USART1_Init+0x90>)
 8000590:	2200      	movs	r2, #0
 8000592:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <MX_USART1_Init+0x90>)
 8000596:	f005 f971 	bl	800587c <HAL_USART_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80005a0:	f000 f888 	bl	80006b4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005a4:	2100      	movs	r1, #0
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_USART1_Init+0x90>)
 80005a8:	f005 fd4c 	bl	8006044 <HAL_USARTEx_SetTxFifoThreshold>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80005b2:	f000 f87f 	bl	80006b4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <MX_USART1_Init+0x90>)
 80005ba:	f005 fd81 	bl	80060c0 <HAL_USARTEx_SetRxFifoThreshold>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80005c4:	f000 f876 	bl	80006b4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_USART1_Init+0x90>)
 80005ca:	f005 fd02 	bl	8005fd2 <HAL_USARTEx_DisableFifoMode>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 80005d4:	f000 f86e 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000130 	.word	0x20000130
 80005e0:	40013800 	.word	0x40013800

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_GPIO_Init+0xc8>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a2b      	ldr	r2, [pc, #172]	; (80006ac <MX_GPIO_Init+0xc8>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_GPIO_Init+0xc8>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_GPIO_Init+0xc8>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a25      	ldr	r2, [pc, #148]	; (80006ac <MX_GPIO_Init+0xc8>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_GPIO_Init+0xc8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800062a:	2200      	movs	r2, #0
 800062c:	21f8      	movs	r1, #248	; 0xf8
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f001 ffa1 	bl	8002578 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Charge_Enable_Pin|GPIO_PIN_12|GPIO_PIN_13
 8000636:	2200      	movs	r2, #0
 8000638:	f247 4101 	movw	r1, #29697	; 0x7401
 800063c:	481c      	ldr	r0, [pc, #112]	; (80006b0 <MX_GPIO_Init+0xcc>)
 800063e:	f001 ff9b 	bl	8002578 <HAL_GPIO_WritePin>
                          |_5V_SHDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000642:	23f8      	movs	r3, #248	; 0xf8
 8000644:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4619      	mov	r1, r3
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f001 fdfa 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Charge_Enable_Pin PB12 PB13
                           _5V_SHDN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Charge_Enable_Pin|GPIO_PIN_12|GPIO_PIN_13
 8000660:	f247 4301 	movw	r3, #29697	; 0x7401
 8000664:	60fb      	str	r3, [r7, #12]
                          |_5V_SHDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_GPIO_Init+0xcc>)
 800067a:	f001 fdeb 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800067e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f001 fdd9 	bl	8002254 <HAL_GPIO_Init>

}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_MspInit+0x44>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6613      	str	r3, [r2, #96]	; 0x60
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_MspInit+0x44>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_MspInit+0x44>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_MspInit+0x44>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_ADC_MspInit+0xa4>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d13c      	bne.n	80007a4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 8000730:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_ADC_MspInit+0xa8>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000772:	2307      	movs	r3, #7
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000776:	230b      	movs	r3, #11
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f001 fd64 	bl	8002254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800078c:	2302      	movs	r3, #2
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000790:	230b      	movs	r3, #11
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <HAL_ADC_MspInit+0xac>)
 80007a0:	f001 fd58 	bl	8002254 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	50040000 	.word	0x50040000
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000400 	.word	0x48000400

080007b8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0b0      	sub	sp, #192	; 0xc0
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2298      	movs	r2, #152	; 0x98
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f009 ffa3 	bl	800a724 <memset>
  if(husart->Instance==USART1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a32      	ldr	r2, [pc, #200]	; (80008ac <HAL_USART_MspInit+0xf4>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d15d      	bne.n	80008a4 <HAL_USART_MspInit+0xec>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007ec:	2300      	movs	r3, #0
 80007ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 fadd 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000800:	f7ff ff58 	bl	80006b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 8000806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000808:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080e:	6613      	str	r3, [r2, #96]	; 0x60
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 8000812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 800083a:	f043 0302 	orr.w	r3, r3, #2
 800083e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <HAL_USART_MspInit+0xf8>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB5     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800084c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000866:	2307      	movs	r3, #7
 8000868:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f001 fced 	bl	8002254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800087a:	2320      	movs	r3, #32
 800087c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000892:	2307      	movs	r3, #7
 8000894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800089c:	4619      	mov	r1, r3
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_USART_MspInit+0xfc>)
 80008a0:	f001 fcd8 	bl	8002254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a4:	bf00      	nop
 80008a6:	37c0      	adds	r7, #192	; 0xc0
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48000400 	.word	0x48000400

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f940 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <OTG_FS_IRQHandler+0x10>)
 8000912:	f002 f8c9 	bl	8002aa8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20002610 	.word	0x20002610

08000920 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e00a      	b.n	8000948 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000932:	f3af 8000 	nop.w
 8000936:	4601      	mov	r1, r0
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	b2ca      	uxtb	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf0      	blt.n	8000932 <_read+0x12>
	}

return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e009      	b.n	8000980 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbf1      	blt.n	800096c <_write+0x12>
	}
	return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_close>:

int _close(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	return -1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ba:	605a      	str	r2, [r3, #4]
	return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <_isatty>:

int _isatty(int file)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	return 1;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f009 fe32 	bl	800a694 <__errno>
 8000a30:	4603      	mov	r3, r0
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20050000 	.word	0x20050000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	200000ac 	.word	0x200000ac
 8000a64:	20002928 	.word	0x20002928

08000a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a90:	f7ff ffea 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopForever+0xe>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopForever+0x16>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aba:	f009 fdf1 	bl	800a6a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000abe:	f7ff fc11 	bl	80002e4 <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ad0:	0800b71c 	.word	0x0800b71c
  ldr r2, =_sbss
 8000ad4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ad8:	20002924 	.word	0x20002924

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>

08000ade <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f001 fb71 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aee:	200f      	movs	r0, #15
 8000af0:	f000 f80e 	bl	8000b10 <HAL_InitTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	e001      	b.n	8000b04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b00:	f7ff fdde 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_InitTick+0x6c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d023      	beq.n	8000b6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_InitTick+0x70>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fb7d 	bl	800223a <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10f      	bne.n	8000b66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d809      	bhi.n	8000b60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f001 fb47 	bl	80021e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_InitTick+0x74>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e007      	b.n	8000b70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e004      	b.n	8000b70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e001      	b.n	8000b70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000190 	.word	0x20000190

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000190 	.word	0x20000190

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	431a      	orrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	609a      	str	r2, [r3, #8]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3360      	adds	r3, #96	; 0x60
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <LL_ADC_SetOffset+0x44>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cb0:	bf00      	nop
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	03fff000 	.word	0x03fff000

08000cc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3360      	adds	r3, #96	; 0x60
 8000cce:	461a      	mov	r2, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3360      	adds	r3, #96	; 0x60
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d16:	bf00      	nop
 8000d18:	371c      	adds	r7, #28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	615a      	str	r2, [r3, #20]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b087      	sub	sp, #28
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3330      	adds	r3, #48	; 0x30
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	0a1b      	lsrs	r3, r3, #8
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	4413      	add	r3, r2
 8000d8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f003 031f 	and.w	r3, r3, #31
 8000d98:	211f      	movs	r1, #31
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	401a      	ands	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	0e9b      	lsrs	r3, r3, #26
 8000da6:	f003 011f 	and.w	r1, r3, #31
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	431a      	orrs	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dba:	bf00      	nop
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b087      	sub	sp, #28
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3314      	adds	r3, #20
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	0e5b      	lsrs	r3, r3, #25
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	4413      	add	r3, r2
 8000de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	0d1b      	lsrs	r3, r3, #20
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	2107      	movs	r1, #7
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	0d1b      	lsrs	r3, r3, #20
 8000e00:	f003 031f 	and.w	r3, r3, #31
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e10:	bf00      	nop
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e34:	43db      	mvns	r3, r3
 8000e36:	401a      	ands	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0318 	and.w	r3, r3, #24
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e40:	40d9      	lsrs	r1, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	400b      	ands	r3, r1
 8000e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	0007ffff 	.word	0x0007ffff

08000e64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 031f 	and.w	r3, r3, #31
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6093      	str	r3, [r2, #8]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ed4:	d101      	bne.n	8000eda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000efc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f24:	d101      	bne.n	8000f2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f4c:	f043 0201 	orr.w	r2, r3, #1
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <LL_ADC_IsEnabled+0x18>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <LL_ADC_IsEnabled+0x1a>
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f9a:	f043 0204 	orr.w	r2, r3, #4
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d101      	bne.n	8000fc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d101      	bne.n	8000fec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e134      	b.n	8001280 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fb6f 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff3f 	bl	8000ec0 <LL_ADC_IsDeepPowerDownEnabled>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff25 	bl	8000e9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff5a 	bl	8000f10 <LL_ADC_IsInternalRegulatorEnabled>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d115      	bne.n	800108e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff3e 	bl	8000ee8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800106c:	4b86      	ldr	r3, [pc, #536]	; (8001288 <HAL_ADC_Init+0x28c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	099b      	lsrs	r3, r3, #6
 8001072:	4a86      	ldr	r2, [pc, #536]	; (800128c <HAL_ADC_Init+0x290>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	099b      	lsrs	r3, r3, #6
 800107a:	3301      	adds	r3, #1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001080:	e002      	b.n	8001088 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	3b01      	subs	r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f9      	bne.n	8001082 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff3c 	bl	8000f10 <LL_ADC_IsInternalRegulatorEnabled>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10d      	bne.n	80010ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f043 0210 	orr.w	r2, r3, #16
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ae:	f043 0201 	orr.w	r2, r3, #1
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff75 	bl	8000fae <LL_ADC_REG_IsConversionOngoing>
 80010c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f040 80cd 	bne.w	800126e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f040 80c9 	bne.w	800126e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010e4:	f043 0202 	orr.w	r2, r3, #2
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff35 	bl	8000f60 <LL_ADC_IsEnabled>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d110      	bne.n	800111e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010fc:	4864      	ldr	r0, [pc, #400]	; (8001290 <HAL_ADC_Init+0x294>)
 80010fe:	f7ff ff2f 	bl	8000f60 <LL_ADC_IsEnabled>
 8001102:	4604      	mov	r4, r0
 8001104:	4863      	ldr	r0, [pc, #396]	; (8001294 <HAL_ADC_Init+0x298>)
 8001106:	f7ff ff2b 	bl	8000f60 <LL_ADC_IsEnabled>
 800110a:	4603      	mov	r3, r0
 800110c:	4323      	orrs	r3, r4
 800110e:	2b00      	cmp	r3, #0
 8001110:	d105      	bne.n	800111e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4619      	mov	r1, r3
 8001118:	485f      	ldr	r0, [pc, #380]	; (8001298 <HAL_ADC_Init+0x29c>)
 800111a:	f7ff fd79 	bl	8000c10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7e5b      	ldrb	r3, [r3, #25]
 8001122:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001128:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800112e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001134:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800113c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d106      	bne.n	800115a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	3b01      	subs	r3, #1
 8001152:	045b      	lsls	r3, r3, #17
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_ADC_Init+0x2a0>)
 800117e:	4013      	ands	r3, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	69b9      	ldr	r1, [r7, #24]
 8001186:	430b      	orrs	r3, r1
 8001188:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff0d 	bl	8000fae <LL_ADC_REG_IsConversionOngoing>
 8001194:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff1a 	bl	8000fd4 <LL_ADC_INJ_IsConversionOngoing>
 80011a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d140      	bne.n	800122a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d13d      	bne.n	800122a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7e1b      	ldrb	r3, [r3, #24]
 80011b6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011b8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011d0:	f023 0306 	bic.w	r3, r3, #6
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	69b9      	ldr	r1, [r7, #24]
 80011da:	430b      	orrs	r3, r1
 80011dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d118      	bne.n	800121a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011f2:	f023 0304 	bic.w	r3, r3, #4
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011fe:	4311      	orrs	r1, r2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001204:	4311      	orrs	r1, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800120a:	430a      	orrs	r2, r1
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	e007      	b.n	800122a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10c      	bne.n	800124c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	f023 010f 	bic.w	r1, r3, #15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
 800124a:	e007      	b.n	800125c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 020f 	bic.w	r2, r2, #15
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001260:	f023 0303 	bic.w	r3, r3, #3
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	659a      	str	r2, [r3, #88]	; 0x58
 800126c:	e007      	b.n	800127e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	f043 0210 	orr.w	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800127e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3724      	adds	r7, #36	; 0x24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	053e2d63 	.word	0x053e2d63
 8001290:	50040000 	.word	0x50040000
 8001294:	50040100 	.word	0x50040100
 8001298:	50040300 	.word	0x50040300
 800129c:	fff0c007 	.word	0xfff0c007

080012a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012a8:	4857      	ldr	r0, [pc, #348]	; (8001408 <HAL_ADC_Start+0x168>)
 80012aa:	f7ff fddb 	bl	8000e64 <LL_ADC_GetMultimode>
 80012ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe7a 	bl	8000fae <LL_ADC_REG_IsConversionOngoing>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f040 809c 	bne.w	80013fa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_ADC_Start+0x30>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e097      	b.n	8001400 <HAL_ADC_Start+0x160>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fd7d 	bl	8001dd8 <ADC_Enable>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f040 8083 	bne.w	80013f0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a42      	ldr	r2, [pc, #264]	; (800140c <HAL_ADC_Start+0x16c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d002      	beq.n	800130e <HAL_ADC_Start+0x6e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	e000      	b.n	8001310 <HAL_ADC_Start+0x70>
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <HAL_ADC_Start+0x170>)
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4293      	cmp	r3, r2
 8001316:	d002      	beq.n	800131e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001336:	d106      	bne.n	8001346 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133c:	f023 0206 	bic.w	r2, r3, #6
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	65da      	str	r2, [r3, #92]	; 0x5c
 8001344:	e002      	b.n	800134c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	221c      	movs	r2, #28
 8001352:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2a      	ldr	r2, [pc, #168]	; (800140c <HAL_ADC_Start+0x16c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d002      	beq.n	800136c <HAL_ADC_Start+0xcc>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e000      	b.n	800136e <HAL_ADC_Start+0xce>
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_ADC_Start+0x170>)
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	4293      	cmp	r3, r2
 8001374:	d008      	beq.n	8001388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b05      	cmp	r3, #5
 8001380:	d002      	beq.n	8001388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b09      	cmp	r3, #9
 8001386:	d114      	bne.n	80013b2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800139e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fdeb 	bl	8000f86 <LL_ADC_REG_StartConversion>
 80013b0:	e025      	b.n	80013fe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_ADC_Start+0x16c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d002      	beq.n	80013ce <HAL_ADC_Start+0x12e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Start+0x130>
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_ADC_Start+0x170>)
 80013d0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00f      	beq.n	80013fe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	659a      	str	r2, [r3, #88]	; 0x58
 80013ee:	e006      	b.n	80013fe <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80013f8:	e001      	b.n	80013fe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013fa:	2302      	movs	r3, #2
 80013fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	50040300 	.word	0x50040300
 800140c:	50040100 	.word	0x50040100
 8001410:	50040000 	.word	0x50040000

08001414 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800141e:	4866      	ldr	r0, [pc, #408]	; (80015b8 <HAL_ADC_PollForConversion+0x1a4>)
 8001420:	f7ff fd20 	bl	8000e64 <LL_ADC_GetMultimode>
 8001424:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b08      	cmp	r3, #8
 800142c:	d102      	bne.n	8001434 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800142e:	2308      	movs	r3, #8
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e02a      	b.n	800148a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b05      	cmp	r3, #5
 800143e:	d002      	beq.n	8001446 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b09      	cmp	r3, #9
 8001444:	d111      	bne.n	800146a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	f043 0220 	orr.w	r2, r3, #32
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0a4      	b.n	80015ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001464:	2304      	movs	r3, #4
 8001466:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001468:	e00f      	b.n	800148a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800146a:	4853      	ldr	r0, [pc, #332]	; (80015b8 <HAL_ADC_PollForConversion+0x1a4>)
 800146c:	f7ff fd08 	bl	8000e80 <LL_ADC_GetMultiDMATransfer>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	f043 0220 	orr.w	r2, r3, #32
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e093      	b.n	80015ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001486:	2304      	movs	r3, #4
 8001488:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800148a:	f7ff fb91 	bl	8000bb0 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001490:	e021      	b.n	80014d6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d01d      	beq.n	80014d6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800149a:	f7ff fb89 	bl	8000bb0 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d302      	bcc.n	80014b0 <HAL_ADC_PollForConversion+0x9c>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d112      	bne.n	80014d6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10b      	bne.n	80014d6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f043 0204 	orr.w	r2, r3, #4
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e06b      	b.n	80015ae <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0d6      	beq.n	8001492 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fc27 	bl	8000d48 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01c      	beq.n	800153a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e5b      	ldrb	r3, [r3, #25]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d118      	bne.n	800153a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b08      	cmp	r3, #8
 8001514:	d111      	bne.n	800153a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_ADC_PollForConversion+0x1a8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d002      	beq.n	800154a <HAL_ADC_PollForConversion+0x136>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	e000      	b.n	800154c <HAL_ADC_PollForConversion+0x138>
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_ADC_PollForConversion+0x1ac>)
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	4293      	cmp	r3, r2
 8001552:	d008      	beq.n	8001566 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b05      	cmp	r3, #5
 800155e:	d002      	beq.n	8001566 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b09      	cmp	r3, #9
 8001564:	d104      	bne.n	8001570 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	e00c      	b.n	800158a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_ADC_PollForConversion+0x1a8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d002      	beq.n	8001580 <HAL_ADC_PollForConversion+0x16c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	e000      	b.n	8001582 <HAL_ADC_PollForConversion+0x16e>
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_ADC_PollForConversion+0x1ac>)
 8001582:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	2b08      	cmp	r3, #8
 800158e:	d104      	bne.n	800159a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2208      	movs	r2, #8
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e008      	b.n	80015ac <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	220c      	movs	r2, #12
 80015aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	50040300 	.word	0x50040300
 80015bc:	50040100 	.word	0x50040100
 80015c0:	50040000 	.word	0x50040000

080015c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0b6      	sub	sp, #216	; 0xd8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x22>
 80015fe:	2302      	movs	r3, #2
 8001600:	e3d5      	b.n	8001dae <HAL_ADC_ConfigChannel+0x7ce>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fccd 	bl	8000fae <LL_ADC_REG_IsConversionOngoing>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 83ba 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d824      	bhi.n	800166e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	3b02      	subs	r3, #2
 800162a:	2b03      	cmp	r3, #3
 800162c:	d81b      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x86>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <HAL_ADC_ConfigChannel+0x54>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001645 	.word	0x08001645
 8001638:	0800164d 	.word	0x0800164d
 800163c:	08001655 	.word	0x08001655
 8001640:	0800165d 	.word	0x0800165d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	220c      	movs	r2, #12
 8001648:	605a      	str	r2, [r3, #4]
          break;
 800164a:	e011      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2212      	movs	r2, #18
 8001650:	605a      	str	r2, [r3, #4]
          break;
 8001652:	e00d      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2218      	movs	r2, #24
 8001658:	605a      	str	r2, [r3, #4]
          break;
 800165a:	e009      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001662:	605a      	str	r2, [r3, #4]
          break;
 8001664:	e004      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2206      	movs	r2, #6
 800166a:	605a      	str	r2, [r3, #4]
          break;
 800166c:	e000      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800166e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	f7ff fb76 	bl	8000d6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fc91 	bl	8000fae <LL_ADC_REG_IsConversionOngoing>
 800168c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fc9d 	bl	8000fd4 <LL_ADC_INJ_IsConversionOngoing>
 800169a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800169e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 81c1 	bne.w	8001a2a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 81bc 	bne.w	8001a2a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016ba:	d10f      	bne.n	80016dc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff fb7d 	bl	8000dc6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fb24 	bl	8000d22 <LL_ADC_SetSamplingTimeCommonConfig>
 80016da:	e00e      	b.n	80016fa <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fb6c 	bl	8000dc6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fb14 	bl	8000d22 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d00a      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6919      	ldr	r1, [r3, #16]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800172c:	f7ff faa4 	bl	8000c78 <LL_ADC_SetOffset>
 8001730:	e17b      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fac1 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10a      	bne.n	800175e <HAL_ADC_ConfigChannel+0x17e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fab6 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	0e9b      	lsrs	r3, r3, #26
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	e01e      	b.n	800179c <HAL_ADC_ConfigChannel+0x1bc>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff faab 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800177c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800178c:	2320      	movs	r3, #32
 800178e:	e004      	b.n	800179a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1d4>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0e9b      	lsrs	r3, r3, #26
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	e018      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x206>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80017d8:	2320      	movs	r3, #32
 80017da:	e004      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80017dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d106      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fa7a 	bl	8000cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fa5e 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10a      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x244>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fa53 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	0e9b      	lsrs	r3, r3, #26
 800181e:	f003 021f 	and.w	r2, r3, #31
 8001822:	e01e      	b.n	8001862 <HAL_ADC_ConfigChannel+0x282>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fa48 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800184a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001852:	2320      	movs	r3, #32
 8001854:	e004      	b.n	8001860 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_ADC_ConfigChannel+0x29a>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0e9b      	lsrs	r3, r3, #26
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	e018      	b.n	80018ac <HAL_ADC_ConfigChannel+0x2cc>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800188e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001896:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800189e:	2320      	movs	r3, #32
 80018a0:	e004      	b.n	80018ac <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80018a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa17 	bl	8000cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2102      	movs	r1, #2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f9fb 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x30a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2102      	movs	r1, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9f0 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	0e9b      	lsrs	r3, r3, #26
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	e01e      	b.n	8001928 <HAL_ADC_ConfigChannel+0x348>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2102      	movs	r1, #2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f9e5 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800190c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001910:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001918:	2320      	movs	r3, #32
 800191a:	e004      	b.n	8001926 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800191c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x360>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	e016      	b.n	800196e <HAL_ADC_ConfigChannel+0x38e>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e004      	b.n	800196e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800196e:	429a      	cmp	r2, r3
 8001970:	d106      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	2102      	movs	r1, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f9b6 	bl	8000cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2103      	movs	r1, #3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f99a 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10a      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x3cc>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2103      	movs	r1, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f98f 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	f003 021f 	and.w	r2, r3, #31
 80019aa:	e017      	b.n	80019dc <HAL_ADC_ConfigChannel+0x3fc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2103      	movs	r1, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f984 	bl	8000cc0 <LL_ADC_GetOffsetChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80019ce:	2320      	movs	r3, #32
 80019d0:	e003      	b.n	80019da <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80019d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x414>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	e011      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x438>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	e003      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2103      	movs	r1, #3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f961 	bl	8000cec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fa96 	bl	8000f60 <LL_ADC_IsEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 8140 	bne.w	8001cbc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f7ff f9e7 	bl	8000e1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	4a8f      	ldr	r2, [pc, #572]	; (8001c90 <HAL_ADC_ConfigChannel+0x6b0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	f040 8131 	bne.w	8001cbc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10b      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x4a2>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0e9b      	lsrs	r3, r3, #26
 8001a70:	3301      	adds	r3, #1
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2b09      	cmp	r3, #9
 8001a78:	bf94      	ite	ls
 8001a7a:	2301      	movls	r3, #1
 8001a7c:	2300      	movhi	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	e019      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x4d6>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a92:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e003      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2b09      	cmp	r3, #9
 8001aae:	bf94      	ite	ls
 8001ab0:	2301      	movls	r3, #1
 8001ab2:	2300      	movhi	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d079      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x4f6>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0e9b      	lsrs	r3, r3, #26
 8001acc:	3301      	adds	r3, #1
 8001ace:	069b      	lsls	r3, r3, #26
 8001ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ad4:	e015      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x522>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001aee:	2320      	movs	r3, #32
 8001af0:	e003      	b.n	8001afa <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	069b      	lsls	r3, r3, #26
 8001afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x542>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	3301      	adds	r3, #1
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	e017      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x572>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	ea42 0103 	orr.w	r1, r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x598>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f003 021f 	and.w	r2, r3, #31
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	051b      	lsls	r3, r3, #20
 8001b76:	e018      	b.n	8001baa <HAL_ADC_ConfigChannel+0x5ca>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001b90:	2320      	movs	r3, #32
 8001b92:	e003      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f003 021f 	and.w	r2, r3, #31
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001baa:	430b      	orrs	r3, r1
 8001bac:	e081      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d107      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x5ea>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	069b      	lsls	r3, r3, #26
 8001bc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bc8:	e015      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x616>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e003      	b.n	8001bee <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	069b      	lsls	r3, r3, #26
 8001bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x636>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	e017      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x666>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	61fb      	str	r3, [r7, #28]
  return result;
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	ea42 0103 	orr.w	r1, r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x692>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0e9b      	lsrs	r3, r3, #26
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f003 021f 	and.w	r2, r3, #31
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	3b1e      	subs	r3, #30
 8001c6a:	051b      	lsls	r3, r3, #20
 8001c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c70:	e01e      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x6d0>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	613b      	str	r3, [r7, #16]
  return result;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d104      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e006      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x6bc>
 8001c8e:	bf00      	nop
 8001c90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f003 021f 	and.w	r2, r3, #31
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b1e      	subs	r3, #30
 8001caa:	051b      	lsls	r3, r3, #20
 8001cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	6892      	ldr	r2, [r2, #8]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7ff f885 	bl	8000dc6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d06c      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc8:	483c      	ldr	r0, [pc, #240]	; (8001dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001cca:	f7fe ffc7 	bl	8000c5c <LL_ADC_GetCommonPathInternalCh>
 8001cce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a3a      	ldr	r2, [pc, #232]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d127      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d121      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a35      	ldr	r2, [pc, #212]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d157      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	482f      	ldr	r0, [pc, #188]	; (8001dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001cfe:	f7fe ff9a 	bl	8000c36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <HAL_ADC_ConfigChannel+0x7ec>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d2a:	e03a      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d113      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x77e>
 8001d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10d      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d12a      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d54:	4619      	mov	r1, r3
 8001d56:	4819      	ldr	r0, [pc, #100]	; (8001dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001d58:	f7fe ff6d 	bl	8000c36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d5c:	e021      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d11c      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d116      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d111      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d86:	4619      	mov	r1, r3
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001d8a:	f7fe ff54 	bl	8000c36 <LL_ADC_SetCommonPathInternalCh>
 8001d8e:	e008      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001daa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	37d8      	adds	r7, #216	; 0xd8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	80080000 	.word	0x80080000
 8001dbc:	50040300 	.word	0x50040300
 8001dc0:	c7520000 	.word	0xc7520000
 8001dc4:	50040000 	.word	0x50040000
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	053e2d63 	.word	0x053e2d63
 8001dd0:	cb840000 	.word	0xcb840000
 8001dd4:	80000001 	.word	0x80000001

08001dd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f8bb 	bl	8000f60 <LL_ADC_IsEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d14d      	bne.n	8001e8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <ADC_Enable+0xc0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00d      	beq.n	8001e1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	f043 0210 	orr.w	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e039      	b.n	8001e8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f88a 	bl	8000f38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e24:	f7fe fec4 	bl	8000bb0 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e2a:	e028      	b.n	8001e7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f895 	bl	8000f60 <LL_ADC_IsEnabled>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f879 	bl	8000f38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e46:	f7fe feb3 	bl	8000bb0 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d914      	bls.n	8001e7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d00d      	beq.n	8001e7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e007      	b.n	8001e8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d1cf      	bne.n	8001e2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	8000003f 	.word	0x8000003f

08001e9c <LL_ADC_IsEnabled>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <LL_ADC_IsEnabled+0x18>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_ADC_IsEnabled+0x1a>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b0a1      	sub	sp, #132	; 0x84
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e089      	b.n	800201a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001f12:	2300      	movs	r3, #0
 8001f14:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a42      	ldr	r2, [pc, #264]	; (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d102      	bne.n	8001f26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f20:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e001      	b.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10b      	bne.n	8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e068      	b.n	800201a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ffb9 	bl	8001ec2 <LL_ADC_REG_IsConversionOngoing>
 8001f50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ffb3 	bl	8001ec2 <LL_ADC_REG_IsConversionOngoing>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d14a      	bne.n	8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d147      	bne.n	8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f68:	4b30      	ldr	r3, [pc, #192]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001f6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d027      	beq.n	8001fc4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f86:	035b      	lsls	r3, r3, #13
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f90:	4824      	ldr	r0, [pc, #144]	; (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f92:	f7ff ff83 	bl	8001e9c <LL_ADC_IsEnabled>
 8001f96:	4604      	mov	r4, r0
 8001f98:	4823      	ldr	r0, [pc, #140]	; (8002028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f9a:	f7ff ff7f 	bl	8001e9c <LL_ADC_IsEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4323      	orrs	r3, r4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d132      	bne.n	800200c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fae:	f023 030f 	bic.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6892      	ldr	r2, [r2, #8]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc2:	e023      	b.n	800200c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fd0:	4814      	ldr	r0, [pc, #80]	; (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001fd2:	f7ff ff63 	bl	8001e9c <LL_ADC_IsEnabled>
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001fda:	f7ff ff5f 	bl	8001e9c <LL_ADC_IsEnabled>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4323      	orrs	r3, r4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d112      	bne.n	800200c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fee:	f023 030f 	bic.w	r3, r3, #15
 8001ff2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ff4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ff6:	e009      	b.n	800200c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800200a:	e000      	b.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800200c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002016:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800201a:	4618      	mov	r0, r3
 800201c:	3784      	adds	r7, #132	; 0x84
 800201e:	46bd      	mov	sp, r7
 8002020:	bd90      	pop	{r4, r7, pc}
 8002022:	bf00      	nop
 8002024:	50040000 	.word	0x50040000
 8002028:	50040100 	.word	0x50040100
 800202c:	50040300 	.word	0x50040300

08002030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4907      	ldr	r1, [pc, #28]	; (80020cc <__NVIC_EnableIRQ+0x38>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0a      	blt.n	80020fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	490c      	ldr	r1, [pc, #48]	; (800211c <__NVIC_SetPriority+0x4c>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f8:	e00a      	b.n	8002110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4908      	ldr	r1, [pc, #32]	; (8002120 <__NVIC_SetPriority+0x50>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3b04      	subs	r3, #4
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	440b      	add	r3, r1
 800210e:	761a      	strb	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f1c3 0307 	rsb	r3, r3, #7
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf28      	it	cs
 8002142:	2304      	movcs	r3, #4
 8002144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3304      	adds	r3, #4
 800214a:	2b06      	cmp	r3, #6
 800214c:	d902      	bls.n	8002154 <NVIC_EncodePriority+0x30>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3b03      	subs	r3, #3
 8002152:	e000      	b.n	8002156 <NVIC_EncodePriority+0x32>
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43d9      	mvns	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	4313      	orrs	r3, r2
         );
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f7ff ff8e 	bl	80020d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ba:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff29 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f8:	f7ff ff3e 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80021fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f7ff ff8e 	bl	8002124 <NVIC_EncodePriority>
 8002208:	4602      	mov	r2, r0
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff5d 	bl	80020d0 <__NVIC_SetPriority>
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff31 	bl	8002094 <__NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ffa2 	bl	800218c <SysTick_Config>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002262:	e166      	b.n	8002532 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8158 	beq.w	800252c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d005      	beq.n	8002294 <HAL_GPIO_Init+0x40>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d130      	bne.n	80022f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ca:	2201      	movs	r2, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f003 0201 	and.w	r2, r3, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d017      	beq.n	8002332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d123      	bne.n	8002386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3208      	adds	r2, #8
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0203 	and.w	r2, r3, #3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80b2 	beq.w	800252c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_GPIO_Init+0x2fc>)
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	4a60      	ldr	r2, [pc, #384]	; (8002550 <HAL_GPIO_Init+0x2fc>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6613      	str	r3, [r2, #96]	; 0x60
 80023d4:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <HAL_GPIO_Init+0x2fc>)
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023e0:	4a5c      	ldr	r2, [pc, #368]	; (8002554 <HAL_GPIO_Init+0x300>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800240a:	d02b      	beq.n	8002464 <HAL_GPIO_Init+0x210>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_Init+0x304>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d025      	beq.n	8002460 <HAL_GPIO_Init+0x20c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a51      	ldr	r2, [pc, #324]	; (800255c <HAL_GPIO_Init+0x308>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d01f      	beq.n	800245c <HAL_GPIO_Init+0x208>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a50      	ldr	r2, [pc, #320]	; (8002560 <HAL_GPIO_Init+0x30c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d019      	beq.n	8002458 <HAL_GPIO_Init+0x204>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a4f      	ldr	r2, [pc, #316]	; (8002564 <HAL_GPIO_Init+0x310>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d013      	beq.n	8002454 <HAL_GPIO_Init+0x200>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a4e      	ldr	r2, [pc, #312]	; (8002568 <HAL_GPIO_Init+0x314>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00d      	beq.n	8002450 <HAL_GPIO_Init+0x1fc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a4d      	ldr	r2, [pc, #308]	; (800256c <HAL_GPIO_Init+0x318>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <HAL_GPIO_Init+0x1f8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <HAL_GPIO_Init+0x31c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_GPIO_Init+0x1f4>
 8002444:	2307      	movs	r3, #7
 8002446:	e00e      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002448:	2308      	movs	r3, #8
 800244a:	e00c      	b.n	8002466 <HAL_GPIO_Init+0x212>
 800244c:	2306      	movs	r3, #6
 800244e:	e00a      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002450:	2305      	movs	r3, #5
 8002452:	e008      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002454:	2304      	movs	r3, #4
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002458:	2303      	movs	r3, #3
 800245a:	e004      	b.n	8002466 <HAL_GPIO_Init+0x212>
 800245c:	2302      	movs	r3, #2
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002464:	2300      	movs	r3, #0
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	f002 0203 	and.w	r2, r2, #3
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	4093      	lsls	r3, r2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002476:	4937      	ldr	r1, [pc, #220]	; (8002554 <HAL_GPIO_Init+0x300>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002484:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_GPIO_Init+0x320>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a8:	4a32      	ldr	r2, [pc, #200]	; (8002574 <HAL_GPIO_Init+0x320>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_GPIO_Init+0x320>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024d2:	4a28      	ldr	r2, [pc, #160]	; (8002574 <HAL_GPIO_Init+0x320>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024d8:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_GPIO_Init+0x320>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_GPIO_Init+0x320>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <HAL_GPIO_Init+0x320>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002526:	4a13      	ldr	r2, [pc, #76]	; (8002574 <HAL_GPIO_Init+0x320>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae91 	bne.w	8002264 <HAL_GPIO_Init+0x10>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000
 8002558:	48000400 	.word	0x48000400
 800255c:	48000800 	.word	0x48000800
 8002560:	48000c00 	.word	0x48000c00
 8002564:	48001000 	.word	0x48001000
 8002568:	48001400 	.word	0x48001400
 800256c:	48001800 	.word	0x48001800
 8002570:	48001c00 	.word	0x48001c00
 8002574:	40010400 	.word	0x40010400

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002594:	e002      	b.n	800259c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43d9      	mvns	r1, r3
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	400b      	ands	r3, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b08f      	sub	sp, #60	; 0x3c
 80025e0:	af0a      	add	r7, sp, #40	; 0x28
 80025e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e054      	b.n	8002698 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f007 fd65 	bl	800a0d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2203      	movs	r2, #3
 8002612:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 fe0c 	bl	800624a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	687e      	ldr	r6, [r7, #4]
 800263a:	466d      	mov	r5, sp
 800263c:	f106 0410 	add.w	r4, r6, #16
 8002640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002648:	e894 0003 	ldmia.w	r4, {r0, r1}
 800264c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002650:	1d33      	adds	r3, r6, #4
 8002652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002654:	6838      	ldr	r0, [r7, #0]
 8002656:	f003 fdbb 	bl	80061d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fe03 	bl	800626c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	687e      	ldr	r6, [r7, #4]
 800266e:	466d      	mov	r5, sp
 8002670:	f106 0410 	add.w	r4, r6, #16
 8002674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002680:	e885 0003 	stmia.w	r5, {r0, r1}
 8002684:	1d33      	adds	r3, r6, #4
 8002686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002688:	6838      	ldr	r0, [r7, #0]
 800268a:	f003 ff81 	bl	8006590 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026a0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af04      	add	r7, sp, #16
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	70fb      	strb	r3, [r7, #3]
 80026b2:	460b      	mov	r3, r1
 80026b4:	70bb      	strb	r3, [r7, #2]
 80026b6:	4613      	mov	r3, r2
 80026b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_HCD_HC_Init+0x28>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e076      	b.n	80027b6 <HAL_HCD_HC_Init+0x116>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	333d      	adds	r3, #61	; 0x3d
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3338      	adds	r3, #56	; 0x38
 80026f0:	787a      	ldrb	r2, [r7, #1]
 80026f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3340      	adds	r3, #64	; 0x40
 8002702:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002704:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3339      	adds	r3, #57	; 0x39
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	333f      	adds	r3, #63	; 0x3f
 8002726:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800272a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	78ba      	ldrb	r2, [r7, #2]
 8002730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002734:	b2d0      	uxtb	r0, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	333a      	adds	r3, #58	; 0x3a
 8002742:	4602      	mov	r2, r0
 8002744:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800274a:	2b00      	cmp	r3, #0
 800274c:	da09      	bge.n	8002762 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	333b      	adds	r3, #59	; 0x3b
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e008      	b.n	8002774 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	333b      	adds	r3, #59	; 0x3b
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	333c      	adds	r3, #60	; 0x3c
 8002782:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002786:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	787c      	ldrb	r4, [r7, #1]
 800278e:	78ba      	ldrb	r2, [r7, #2]
 8002790:	78f9      	ldrb	r1, [r7, #3]
 8002792:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002794:	9302      	str	r3, [sp, #8]
 8002796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4623      	mov	r3, r4
 80027a4:	f004 f83c 	bl	8006820 <USB_HC_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}

080027be <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_HCD_HC_Halt+0x1e>
 80027d8:	2302      	movs	r3, #2
 80027da:	e00f      	b.n	80027fc <HAL_HCD_HC_Halt+0x3e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 fa28 	bl	8006c42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	70fb      	strb	r3, [r7, #3]
 8002816:	460b      	mov	r3, r1
 8002818:	70bb      	strb	r3, [r7, #2]
 800281a:	4613      	mov	r3, r2
 800281c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	333b      	adds	r3, #59	; 0x3b
 800282c:	78ba      	ldrb	r2, [r7, #2]
 800282e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	333f      	adds	r3, #63	; 0x3f
 800283e:	787a      	ldrb	r2, [r7, #1]
 8002840:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002842:	7c3b      	ldrb	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d112      	bne.n	800286e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3342      	adds	r3, #66	; 0x42
 8002856:	2203      	movs	r2, #3
 8002858:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	333d      	adds	r3, #61	; 0x3d
 8002868:	7f3a      	ldrb	r2, [r7, #28]
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	e008      	b.n	8002880 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3342      	adds	r3, #66	; 0x42
 800287c:	2202      	movs	r2, #2
 800287e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b03      	cmp	r3, #3
 8002884:	f200 80c6 	bhi.w	8002a14 <HAL_HCD_HC_SubmitRequest+0x210>
 8002888:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800288a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288e:	bf00      	nop
 8002890:	080028a1 	.word	0x080028a1
 8002894:	08002a01 	.word	0x08002a01
 8002898:	08002905 	.word	0x08002905
 800289c:	08002983 	.word	0x08002983
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028a0:	7c3b      	ldrb	r3, [r7, #16]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 80b8 	bne.w	8002a18 <HAL_HCD_HC_SubmitRequest+0x214>
 80028a8:	78bb      	ldrb	r3, [r7, #2]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 80b4 	bne.w	8002a18 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80028b0:	8b3b      	ldrh	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d108      	bne.n	80028c8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	3355      	adds	r3, #85	; 0x55
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3355      	adds	r3, #85	; 0x55
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3342      	adds	r3, #66	; 0x42
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028ee:	e093      	b.n	8002a18 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3342      	adds	r3, #66	; 0x42
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
      break;
 8002902:	e089      	b.n	8002a18 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002904:	78bb      	ldrb	r3, [r7, #2]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d11d      	bne.n	8002946 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3355      	adds	r3, #85	; 0x55
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	3342      	adds	r3, #66	; 0x42
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002930:	e073      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3342      	adds	r3, #66	; 0x42
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
      break;
 8002944:	e069      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3354      	adds	r3, #84	; 0x54
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3342      	adds	r3, #66	; 0x42
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
      break;
 800296c:	e055      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3342      	adds	r3, #66	; 0x42
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
      break;
 8002980:	e04b      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002982:	78bb      	ldrb	r3, [r7, #2]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d11d      	bne.n	80029c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3355      	adds	r3, #85	; 0x55
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3342      	adds	r3, #66	; 0x42
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029ae:	e034      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3342      	adds	r3, #66	; 0x42
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
      break;
 80029c2:	e02a      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3354      	adds	r3, #84	; 0x54
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3342      	adds	r3, #66	; 0x42
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
      break;
 80029ea:	e016      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3342      	adds	r3, #66	; 0x42
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
      break;
 80029fe:	e00c      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3342      	adds	r3, #66	; 0x42
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002a14:	bf00      	nop
 8002a16:	e000      	b.n	8002a1a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002a18:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3344      	adds	r3, #68	; 0x44
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	8b3a      	ldrh	r2, [r7, #24]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	202c      	movs	r0, #44	; 0x2c
 8002a34:	fb00 f303 	mul.w	r3, r0, r3
 8002a38:	440b      	add	r3, r1
 8002a3a:	334c      	adds	r3, #76	; 0x4c
 8002a3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3360      	adds	r3, #96	; 0x60
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3350      	adds	r3, #80	; 0x50
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3339      	adds	r3, #57	; 0x39
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	222c      	movs	r2, #44	; 0x2c
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	3338      	adds	r3, #56	; 0x38
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f003 ffc9 	bl	8006a30 <USB_HC_StartXfer>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fd25 	bl	800650e <USB_GetMode>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	f040 80f6 	bne.w	8002cb8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f003 fd09 	bl	80064e8 <USB_ReadInterrupts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80ec 	beq.w	8002cb6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 fd00 	bl	80064e8 <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af2:	d104      	bne.n	8002afe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002afc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 fcf0 	bl	80064e8 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b12:	d104      	bne.n	8002b1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 fce0 	bl	80064e8 <USB_ReadInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b32:	d104      	bne.n	8002b3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fcd0 	bl	80064e8 <USB_ReadInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d103      	bne.n	8002b5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2202      	movs	r2, #2
 8002b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 fcc2 	bl	80064e8 <USB_ReadInterrupts>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b6e:	d11c      	bne.n	8002baa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	6938      	ldr	r0, [r7, #16]
 8002b8e:	f003 fbb9 	bl	8006304 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b92:	6938      	ldr	r0, [r7, #16]
 8002b94:	f003 fbe8 	bl	8006368 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 fd78 	bl	8006694 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f007 fb19 	bl	800a1dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fc9a 	bl	80064e8 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bbe:	d102      	bne.n	8002bc6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f001 f841 	bl	8003c48 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fc8c 	bl	80064e8 <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d106      	bne.n	8002be8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f007 fae2 	bl	800a1a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2208      	movs	r2, #8
 8002be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fc7b 	bl	80064e8 <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d101      	bne.n	8002c00 <HAL_HCD_IRQHandler+0x158>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_HCD_IRQHandler+0x15a>
 8002c00:	2300      	movs	r3, #0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0210 	bic.w	r2, r2, #16
 8002c14:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 ff44 	bl	8003aa4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0210 	orr.w	r2, r2, #16
 8002c2a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fc59 	bl	80064e8 <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c40:	d13a      	bne.n	8002cb8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 ffea 	bl	8006c20 <USB_HC_ReadInterrupt>
 8002c4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e025      	b.n	8002ca0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d018      	beq.n	8002c9a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7e:	d106      	bne.n	8002c8e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8ab 	bl	8002de2 <HCD_HC_IN_IRQHandler>
 8002c8c:	e005      	b.n	8002c9a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fc03 	bl	80034a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3d4      	bcc.n	8002c54 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb2:	615a      	str	r2, [r3, #20]
 8002cb4:	e000      	b.n	8002cb8 <HAL_HCD_IRQHandler+0x210>
      return;
 8002cb6:	bf00      	nop
    }
  }
}
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_HCD_Start+0x16>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e013      	b.n	8002cfc <HAL_HCD_Start+0x3e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 fd3a 	bl	800675c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fa9b 	bl	8006228 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_HCD_Stop+0x16>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e00d      	b.n	8002d36 <HAL_HCD_Stop+0x32>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 f885 	bl	8006e36 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 fcdc 	bl	8006708 <USB_ResetPort>
 8002d50:	4603      	mov	r3, r0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3360      	adds	r3, #96	; 0x60
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3350      	adds	r3, #80	; 0x50
 8002d9c:	681b      	ldr	r3, [r3, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fd20 	bl	80067fc <USB_GetCurrentFrame>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fcfb 	bl	80067ce <USB_GetHostSpeed>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d11a      	bne.n	8002e48 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2304      	movs	r3, #4
 8002e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3361      	adds	r3, #97	; 0x61
 8002e32:	2206      	movs	r2, #6
 8002e34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fefe 	bl	8006c42 <USB_HC_Halt>
 8002e46:	e0af      	b.n	8002fa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5e:	d11b      	bne.n	8002e98 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3361      	adds	r3, #97	; 0x61
 8002e82:	2207      	movs	r2, #7
 8002e84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fed6 	bl	8006c42 <USB_HC_Halt>
 8002e96:	e087      	b.n	8002fa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d109      	bne.n	8002ec2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	6093      	str	r3, [r2, #8]
 8002ec0:	e072      	b.n	8002fa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d11a      	bne.n	8002f0e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3361      	adds	r3, #97	; 0x61
 8002ef8:	2205      	movs	r2, #5
 8002efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fe9b 	bl	8006c42 <USB_HC_Halt>
 8002f0c:	e04c      	b.n	8002fa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f24:	d11b      	bne.n	8002f5e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3361      	adds	r3, #97	; 0x61
 8002f48:	2208      	movs	r2, #8
 8002f4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fe73 	bl	8006c42 <USB_HC_Halt>
 8002f5c:	e024      	b.n	8002fa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d119      	bne.n	8002fa8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	461a      	mov	r2, r3
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3361      	adds	r3, #97	; 0x61
 8002f94:	2206      	movs	r2, #6
 8002f96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fe4d 	bl	8006c42 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fbe:	d112      	bne.n	8002fe6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fe39 	bl	8006c42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002fe4:	e258      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f040 80ed 	bne.w	80031d8 <HCD_HC_IN_IRQHandler+0x3f6>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3361      	adds	r3, #97	; 0x61
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	335c      	adds	r3, #92	; 0x5c
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	461a      	mov	r2, r3
 8003030:	2301      	movs	r3, #1
 8003032:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	333f      	adds	r3, #63	; 0x3f
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	333f      	adds	r3, #63	; 0x3f
 8003056:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003058:	2b02      	cmp	r3, #2
 800305a:	d111      	bne.n	8003080 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fdeb 	bl	8006c42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	461a      	mov	r2, r3
 800307a:	2310      	movs	r3, #16
 800307c:	6093      	str	r3, [r2, #8]
 800307e:	e066      	b.n	800314e <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	333f      	adds	r3, #63	; 0x3f
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d127      	bne.n	80030e4 <HCD_HC_IN_IRQHandler+0x302>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	0151      	lsls	r1, r2, #5
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	440a      	add	r2, r1
 80030aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3360      	adds	r3, #96	; 0x60
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	b2d9      	uxtb	r1, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	202c      	movs	r0, #44	; 0x2c
 80030d0:	fb00 f303 	mul.w	r3, r0, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	3360      	adds	r3, #96	; 0x60
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f007 f88b 	bl	800a1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030e2:	e034      	b.n	800314e <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	333f      	adds	r3, #63	; 0x3f
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d12a      	bne.n	800314e <HCD_HC_IN_IRQHandler+0x36c>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3360      	adds	r3, #96	; 0x60
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	3354      	adds	r3, #84	; 0x54
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2d8      	uxtb	r0, r3
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3354      	adds	r3, #84	; 0x54
 800312e:	4602      	mov	r2, r0
 8003130:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	b2d9      	uxtb	r1, r3
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	202c      	movs	r0, #44	; 0x2c
 800313c:	fb00 f303 	mul.w	r3, r0, r3
 8003140:	4413      	add	r3, r2
 8003142:	3360      	adds	r3, #96	; 0x60
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f007 f855 	bl	800a1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d12b      	bne.n	80031ae <HCD_HC_IN_IRQHandler+0x3cc>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3348      	adds	r3, #72	; 0x48
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	202c      	movs	r0, #44	; 0x2c
 800316c:	fb00 f202 	mul.w	r2, r0, r2
 8003170:	440a      	add	r2, r1
 8003172:	3240      	adds	r2, #64	; 0x40
 8003174:	8812      	ldrh	r2, [r2, #0]
 8003176:	fbb3 f3f2 	udiv	r3, r3, r2
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 818a 	beq.w	8003498 <HCD_HC_IN_IRQHandler+0x6b6>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3354      	adds	r3, #84	; 0x54
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2d8      	uxtb	r0, r3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3354      	adds	r3, #84	; 0x54
 80031a8:	4602      	mov	r2, r0
 80031aa:	701a      	strb	r2, [r3, #0]
}
 80031ac:	e174      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x6b6>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3354      	adds	r3, #84	; 0x54
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2d8      	uxtb	r0, r3
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3354      	adds	r3, #84	; 0x54
 80031d2:	4602      	mov	r2, r0
 80031d4:	701a      	strb	r2, [r3, #0]
}
 80031d6:	e15f      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	f040 80f6 	bne.w	80033dc <HCD_HC_IN_IRQHandler+0x5fa>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3361      	adds	r3, #97	; 0x61
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d109      	bne.n	8003218 <HCD_HC_IN_IRQHandler+0x436>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3360      	adds	r3, #96	; 0x60
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e0c9      	b.n	80033ac <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3361      	adds	r3, #97	; 0x61
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d109      	bne.n	8003240 <HCD_HC_IN_IRQHandler+0x45e>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3360      	adds	r3, #96	; 0x60
 800323a:	2205      	movs	r2, #5
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e0b5      	b.n	80033ac <HCD_HC_IN_IRQHandler+0x5ca>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3361      	adds	r3, #97	; 0x61
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b06      	cmp	r3, #6
 8003252:	d009      	beq.n	8003268 <HCD_HC_IN_IRQHandler+0x486>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3361      	adds	r3, #97	; 0x61
 8003262:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003264:	2b08      	cmp	r3, #8
 8003266:	d150      	bne.n	800330a <HCD_HC_IN_IRQHandler+0x528>
      hhcd->hc[ch_num].ErrCnt++;
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	335c      	adds	r3, #92	; 0x5c
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	202c      	movs	r0, #44	; 0x2c
 8003280:	fb00 f303 	mul.w	r3, r0, r3
 8003284:	440b      	add	r3, r1
 8003286:	335c      	adds	r3, #92	; 0x5c
 8003288:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	335c      	adds	r3, #92	; 0x5c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d912      	bls.n	80032c4 <HCD_HC_IN_IRQHandler+0x4e2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	335c      	adds	r3, #92	; 0x5c
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3360      	adds	r3, #96	; 0x60
 80032be:	2204      	movs	r2, #4
 80032c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032c2:	e073      	b.n	80033ac <HCD_HC_IN_IRQHandler+0x5ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3360      	adds	r3, #96	; 0x60
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003308:	e050      	b.n	80033ac <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3361      	adds	r3, #97	; 0x61
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d122      	bne.n	8003364 <HCD_HC_IN_IRQHandler+0x582>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	3360      	adds	r3, #96	; 0x60
 800332c:	2202      	movs	r2, #2
 800332e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003346:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800334e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e023      	b.n	80033ac <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3361      	adds	r3, #97	; 0x61
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b07      	cmp	r3, #7
 8003376:	d119      	bne.n	80033ac <HCD_HC_IN_IRQHandler+0x5ca>
      hhcd->hc[ch_num].ErrCnt++;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	335c      	adds	r3, #92	; 0x5c
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	202c      	movs	r0, #44	; 0x2c
 8003390:	fb00 f303 	mul.w	r3, r0, r3
 8003394:	440b      	add	r3, r1
 8003396:	335c      	adds	r3, #92	; 0x5c
 8003398:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3360      	adds	r3, #96	; 0x60
 80033a8:	2204      	movs	r2, #4
 80033aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	2302      	movs	r3, #2
 80033bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	b2d9      	uxtb	r1, r3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	202c      	movs	r0, #44	; 0x2c
 80033c8:	fb00 f303 	mul.w	r3, r0, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3360      	adds	r3, #96	; 0x60
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f006 ff0f 	bl	800a1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033da:	e05d      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d152      	bne.n	8003498 <HCD_HC_IN_IRQHandler+0x6b6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	333f      	adds	r3, #63	; 0x3f
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d111      	bne.n	800342a <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	335c      	adds	r3, #92	; 0x5c
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f003 fc0d 	bl	8006c42 <USB_HC_Halt>
 8003428:	e02d      	b.n	8003486 <HCD_HC_IN_IRQHandler+0x6a4>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	333f      	adds	r3, #63	; 0x3f
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HCD_HC_IN_IRQHandler+0x670>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	333f      	adds	r3, #63	; 0x3f
 800344c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800344e:	2b02      	cmp	r3, #2
 8003450:	d119      	bne.n	8003486 <HCD_HC_IN_IRQHandler+0x6a4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	335c      	adds	r3, #92	; 0x5c
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	2203      	movs	r2, #3
 8003474:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f003 fbde 	bl	8006c42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4413      	add	r3, r2
 800348e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003492:	461a      	mov	r2, r3
 8003494:	2310      	movs	r3, #16
 8003496:	6093      	str	r3, [r2, #8]
}
 8003498:	bf00      	nop
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11a      	bne.n	8003506 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2304      	movs	r3, #4
 80034e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	212c      	movs	r1, #44	; 0x2c
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	3361      	adds	r3, #97	; 0x61
 80034f0:	2206      	movs	r2, #6
 80034f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fb9f 	bl	8006c42 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003504:	e2ca      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d12e      	bne.n	800357a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	461a      	mov	r2, r3
 800352a:	2320      	movs	r3, #32
 800352c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	333d      	adds	r3, #61	; 0x3d
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	f040 82ac 	bne.w	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	333d      	adds	r3, #61	; 0x3d
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3360      	adds	r3, #96	; 0x60
 8003564:	2202      	movs	r2, #2
 8003566:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f003 fb65 	bl	8006c42 <USB_HC_Halt>
}
 8003578:	e290      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800358c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003590:	d112      	bne.n	80035b8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359e:	461a      	mov	r2, r3
 80035a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 fb46 	bl	8006c42 <USB_HC_Halt>
}
 80035b6:	e271      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d140      	bne.n	8003650 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	335c      	adds	r3, #92	; 0x5c
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d111      	bne.n	800361a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	333d      	adds	r3, #61	; 0x3d
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	461a      	mov	r2, r3
 8003616:	2340      	movs	r3, #64	; 0x40
 8003618:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	461a      	mov	r2, r3
 8003628:	2301      	movs	r3, #1
 800362a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	4413      	add	r3, r2
 8003638:	3361      	adds	r3, #97	; 0x61
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fafa 	bl	8006c42 <USB_HC_Halt>
}
 800364e:	e225      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d12c      	bne.n	80036c0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3361      	adds	r3, #97	; 0x61
 8003674:	2204      	movs	r2, #4
 8003676:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	333d      	adds	r3, #61	; 0x3d
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	335c      	adds	r3, #92	; 0x5c
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 facb 	bl	8006c42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	461a      	mov	r2, r3
 80036ba:	2340      	movs	r3, #64	; 0x40
 80036bc:	6093      	str	r3, [r2, #8]
}
 80036be:	e1ed      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d11a      	bne.n	800370c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e2:	461a      	mov	r2, r3
 80036e4:	2308      	movs	r3, #8
 80036e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	3361      	adds	r3, #97	; 0x61
 80036f6:	2205      	movs	r2, #5
 80036f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fa9c 	bl	8006c42 <USB_HC_Halt>
}
 800370a:	e1c7      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b10      	cmp	r3, #16
 8003720:	d123      	bne.n	800376a <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	335c      	adds	r3, #92	; 0x5c
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	2203      	movs	r2, #3
 8003744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f003 fa76 	bl	8006c42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	2310      	movs	r3, #16
 8003766:	6093      	str	r3, [r2, #8]
}
 8003768:	e198      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	2b80      	cmp	r3, #128	; 0x80
 800377e:	d11a      	bne.n	80037b6 <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3361      	adds	r3, #97	; 0x61
 800378e:	2206      	movs	r2, #6
 8003790:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fa50 	bl	8006c42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	461a      	mov	r2, r3
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	6093      	str	r3, [r2, #8]
}
 80037b4:	e172      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037cc:	d11b      	bne.n	8003806 <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	212c      	movs	r1, #44	; 0x2c
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	4413      	add	r3, r2
 80037da:	3361      	adds	r3, #97	; 0x61
 80037dc:	2208      	movs	r2, #8
 80037de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 fa29 	bl	8006c42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	461a      	mov	r2, r3
 80037fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003802:	6093      	str	r3, [r2, #8]
}
 8003804:	e14a      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	f040 813f 	bne.w	8003a9c <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3361      	adds	r3, #97	; 0x61
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d17d      	bne.n	800392e <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	3360      	adds	r3, #96	; 0x60
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	333f      	adds	r3, #63	; 0x3f
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d00a      	beq.n	800386e <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	333f      	adds	r3, #63	; 0x3f
 8003866:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003868:	2b03      	cmp	r3, #3
 800386a:	f040 8100 	bne.w	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	3355      	adds	r3, #85	; 0x55
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2d8      	uxtb	r0, r3
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3355      	adds	r3, #85	; 0x55
 800389a:	4602      	mov	r2, r0
 800389c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 80e3 	bne.w	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	334c      	adds	r3, #76	; 0x4c
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80d8 	beq.w	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	334c      	adds	r3, #76	; 0x4c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	202c      	movs	r0, #44	; 0x2c
 80038d4:	fb00 f202 	mul.w	r2, r0, r2
 80038d8:	440a      	add	r2, r1
 80038da:	3240      	adds	r2, #64	; 0x40
 80038dc:	8812      	ldrh	r2, [r2, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	3b01      	subs	r3, #1
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	202c      	movs	r0, #44	; 0x2c
 80038e8:	fb00 f202 	mul.w	r2, r0, r2
 80038ec:	440a      	add	r2, r1
 80038ee:	3240      	adds	r2, #64	; 0x40
 80038f0:	8812      	ldrh	r2, [r2, #0]
 80038f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80b5 	beq.w	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3355      	adds	r3, #85	; 0x55
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	f083 0301 	eor.w	r3, r3, #1
 8003918:	b2d8      	uxtb	r0, r3
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	3355      	adds	r3, #85	; 0x55
 8003928:	4602      	mov	r2, r0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e09f      	b.n	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3361      	adds	r3, #97	; 0x61
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d109      	bne.n	8003956 <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	3360      	adds	r3, #96	; 0x60
 8003950:	2202      	movs	r2, #2
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e08b      	b.n	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3361      	adds	r3, #97	; 0x61
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d109      	bne.n	800397e <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	212c      	movs	r1, #44	; 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	3360      	adds	r3, #96	; 0x60
 8003978:	2202      	movs	r2, #2
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e077      	b.n	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	3361      	adds	r3, #97	; 0x61
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b05      	cmp	r3, #5
 8003990:	d109      	bne.n	80039a6 <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3360      	adds	r3, #96	; 0x60
 80039a0:	2205      	movs	r2, #5
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e063      	b.n	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3361      	adds	r3, #97	; 0x61
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d009      	beq.n	80039ce <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	3361      	adds	r3, #97	; 0x61
 80039c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d14f      	bne.n	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	335c      	adds	r3, #92	; 0x5c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	202c      	movs	r0, #44	; 0x2c
 80039e6:	fb00 f303 	mul.w	r3, r0, r3
 80039ea:	440b      	add	r3, r1
 80039ec:	335c      	adds	r3, #92	; 0x5c
 80039ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	335c      	adds	r3, #92	; 0x5c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d912      	bls.n	8003a2a <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	335c      	adds	r3, #92	; 0x5c
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3360      	adds	r3, #96	; 0x60
 8003a24:	2204      	movs	r2, #4
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e021      	b.n	8003a6e <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	212c      	movs	r1, #44	; 0x2c
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	4413      	add	r3, r2
 8003a36:	3360      	adds	r3, #96	; 0x60
 8003a38:	2202      	movs	r2, #2
 8003a3a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a52:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a5a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	461a      	mov	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	b2d9      	uxtb	r1, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	202c      	movs	r0, #44	; 0x2c
 8003a8a:	fb00 f303 	mul.w	r3, r0, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3360      	adds	r3, #96	; 0x60
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f006 fbae 	bl	800a1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a9c:	bf00      	nop
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	0c5b      	lsrs	r3, r3, #17
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d004      	beq.n	8003aea <HCD_RXQLVL_IRQHandler+0x46>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b05      	cmp	r3, #5
 8003ae4:	f000 80a9 	beq.w	8003c3a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ae8:	e0aa      	b.n	8003c40 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80a6 	beq.w	8003c3e <HCD_RXQLVL_IRQHandler+0x19a>
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	3344      	adds	r3, #68	; 0x44
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 809b 	beq.w	8003c3e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	212c      	movs	r1, #44	; 0x2c
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3350      	adds	r3, #80	; 0x50
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	441a      	add	r2, r3
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	202c      	movs	r0, #44	; 0x2c
 8003b22:	fb00 f303 	mul.w	r3, r0, r3
 8003b26:	440b      	add	r3, r1
 8003b28:	334c      	adds	r3, #76	; 0x4c
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d87a      	bhi.n	8003c26 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3344      	adds	r3, #68	; 0x44
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	b292      	uxth	r2, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f002 fc75 	bl	8006438 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	212c      	movs	r1, #44	; 0x2c
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	4413      	add	r3, r2
 8003b5a:	3344      	adds	r3, #68	; 0x44
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	441a      	add	r2, r3
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	202c      	movs	r0, #44	; 0x2c
 8003b68:	fb00 f303 	mul.w	r3, r0, r3
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3344      	adds	r3, #68	; 0x44
 8003b70:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3350      	adds	r3, #80	; 0x50
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	441a      	add	r2, r3
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	202c      	movs	r0, #44	; 0x2c
 8003b8c:	fb00 f303 	mul.w	r3, r0, r3
 8003b90:	440b      	add	r3, r1
 8003b92:	3350      	adds	r3, #80	; 0x50
 8003b94:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	0cdb      	lsrs	r3, r3, #19
 8003ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003baa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3340      	adds	r3, #64	; 0x40
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d13c      	bne.n	8003c3e <HCD_RXQLVL_IRQHandler+0x19a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d039      	beq.n	8003c3e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003be0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003be8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	3354      	adds	r3, #84	; 0x54
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	f083 0301 	eor.w	r3, r3, #1
 8003c10:	b2d8      	uxtb	r0, r3
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3354      	adds	r3, #84	; 0x54
 8003c20:	4602      	mov	r2, r0
 8003c22:	701a      	strb	r2, [r3, #0]
      break;
 8003c24:	e00b      	b.n	8003c3e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	3360      	adds	r3, #96	; 0x60
 8003c34:	2204      	movs	r2, #4
 8003c36:	701a      	strb	r2, [r3, #0]
      break;
 8003c38:	e001      	b.n	8003c3e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c3e:	bf00      	nop
  }
}
 8003c40:	bf00      	nop
 8003c42:	3728      	adds	r7, #40	; 0x28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c74:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d10b      	bne.n	8003c98 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f006 fa98 	bl	800a1c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f043 0302 	orr.w	r3, r3, #2
 8003c96:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d132      	bne.n	8003d08 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f043 0308 	orr.w	r3, r3, #8
 8003ca8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d126      	bne.n	8003d02 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d113      	bne.n	8003ce4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003cc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cc6:	d106      	bne.n	8003cd6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fce0 	bl	8006694 <USB_InitFSLSPClkSel>
 8003cd4:	e011      	b.n	8003cfa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f002 fcd9 	bl	8006694 <USB_InitFSLSPClkSel>
 8003ce2:	e00a      	b.n	8003cfa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cf8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f006 fa8a 	bl	800a214 <HAL_HCD_PortEnabled_Callback>
 8003d00:	e002      	b.n	8003d08 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f006 fa94 	bl	800a230 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d103      	bne.n	8003d1a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f043 0320 	orr.w	r3, r3, #32
 8003d18:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6013      	str	r3, [r2, #0]
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d40:	d102      	bne.n	8003d48 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d46:	e00b      	b.n	8003d60 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d56:	d102      	bne.n	8003d5e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5c:	e000      	b.n	8003d60 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d5e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40007000 	.word	0x40007000

08003d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d141      	bne.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d7e:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8a:	d131      	bne.n	8003df0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d8c:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d92:	4a46      	ldr	r2, [pc, #280]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d9c:	4b43      	ldr	r3, [pc, #268]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003da4:	4a41      	ldr	r2, [pc, #260]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003daa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dac:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2232      	movs	r2, #50	; 0x32
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	4a3f      	ldr	r2, [pc, #252]	; (8003eb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	0c9b      	lsrs	r3, r3, #18
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc2:	e002      	b.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dca:	4b38      	ldr	r3, [pc, #224]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd6:	d102      	bne.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f2      	bne.n	8003dc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d158      	bne.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e057      	b.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003df0:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df6:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e00:	e04d      	b.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d141      	bne.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e16:	d131      	bne.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1e:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e30:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2232      	movs	r2, #50	; 0x32
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	0c9b      	lsrs	r3, r3, #18
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e4e:	e002      	b.n	8003e56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e62:	d102      	bne.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f2      	bne.n	8003e50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e76:	d112      	bne.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e011      	b.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e8c:	e007      	b.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e96:	4a05      	ldr	r2, [pc, #20]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e9c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40007000 	.word	0x40007000
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	431bde83 	.word	0x431bde83

08003eb8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec6:	6053      	str	r3, [r2, #4]
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40007000 	.word	0x40007000

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f000 bc76 	b.w	80047d8 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eec:	4ba1      	ldr	r3, [pc, #644]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef6:	4b9f      	ldr	r3, [pc, #636]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80e6 	beq.w	80040da <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <HAL_RCC_OscConfig+0x4c>
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	f040 808d 	bne.w	8004036 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	f040 8089 	bne.w	8004036 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f24:	4b93      	ldr	r3, [pc, #588]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d006      	beq.n	8003f3e <HAL_RCC_OscConfig+0x66>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f000 bc4d 	b.w	80047d8 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f42:	4b8c      	ldr	r3, [pc, #560]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <HAL_RCC_OscConfig+0x80>
 8003f4e:	4b89      	ldr	r3, [pc, #548]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f56:	e005      	b.n	8003f64 <HAL_RCC_OscConfig+0x8c>
 8003f58:	4b86      	ldr	r3, [pc, #536]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d224      	bcs.n	8003fb2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fe5f 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f000 bc2d 	b.w	80047d8 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f7e:	4b7d      	ldr	r3, [pc, #500]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a7c      	ldr	r2, [pc, #496]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f84:	f043 0308 	orr.w	r3, r3, #8
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b7a      	ldr	r3, [pc, #488]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	4977      	ldr	r1, [pc, #476]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f9c:	4b75      	ldr	r3, [pc, #468]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	4972      	ldr	r1, [pc, #456]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
 8003fb0:	e025      	b.n	8003ffe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fb2:	4b70      	ldr	r3, [pc, #448]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6f      	ldr	r2, [pc, #444]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003fb8:	f043 0308 	orr.w	r3, r3, #8
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b6d      	ldr	r3, [pc, #436]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	496a      	ldr	r1, [pc, #424]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fd0:	4b68      	ldr	r3, [pc, #416]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	4965      	ldr	r1, [pc, #404]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fe1e 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e3ec      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ffe:	f000 fd53 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004002:	4602      	mov	r2, r0
 8004004:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	495a      	ldr	r1, [pc, #360]	; (8004178 <HAL_RCC_OscConfig+0x2a0>)
 8004010:	5ccb      	ldrb	r3, [r1, r3]
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	4a58      	ldr	r2, [pc, #352]	; (800417c <HAL_RCC_OscConfig+0x2a4>)
 800401c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800401e:	4b58      	ldr	r3, [pc, #352]	; (8004180 <HAL_RCC_OscConfig+0x2a8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fd74 	bl	8000b10 <HAL_InitTick>
 8004028:	4603      	mov	r3, r0
 800402a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d052      	beq.n	80040d8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	e3d0      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d032      	beq.n	80040a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800403e:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a4c      	ldr	r2, [pc, #304]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800404a:	f7fc fdb1 	bl	8000bb0 <HAL_GetTick>
 800404e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004052:	f7fc fdad 	bl	8000bb0 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e3b9      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004064:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004070:	4b40      	ldr	r3, [pc, #256]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004076:	f043 0308 	orr.w	r3, r3, #8
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	493a      	ldr	r1, [pc, #232]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800408e:	4b39      	ldr	r3, [pc, #228]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	4935      	ldr	r1, [pc, #212]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
 80040a2:	e01a      	b.n	80040da <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040a4:	4b33      	ldr	r3, [pc, #204]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a32      	ldr	r2, [pc, #200]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040b0:	f7fc fd7e 	bl	8000bb0 <HAL_GetTick>
 80040b4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040b8:	f7fc fd7a 	bl	8000bb0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e386      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x1e0>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d073      	beq.n	80041ce <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_OscConfig+0x220>
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d10e      	bne.n	8004110 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d10b      	bne.n	8004110 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d063      	beq.n	80041cc <HAL_RCC_OscConfig+0x2f4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d15f      	bne.n	80041cc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e363      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d106      	bne.n	8004128 <HAL_RCC_OscConfig+0x250>
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a15      	ldr	r2, [pc, #84]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e01d      	b.n	8004164 <HAL_RCC_OscConfig+0x28c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x274>
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e00b      	b.n	8004164 <HAL_RCC_OscConfig+0x28c>
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a08      	ldr	r2, [pc, #32]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 8004152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a05      	ldr	r2, [pc, #20]	; (8004174 <HAL_RCC_OscConfig+0x29c>)
 800415e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fc fd20 	bl	8000bb0 <HAL_GetTick>
 8004170:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004172:	e010      	b.n	8004196 <HAL_RCC_OscConfig+0x2be>
 8004174:	40021000 	.word	0x40021000
 8004178:	0800b610 	.word	0x0800b610
 800417c:	20000000 	.word	0x20000000
 8004180:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fc fd14 	bl	8000bb0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e320      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004196:	4ba0      	ldr	r3, [pc, #640]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x2ac>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fc fd04 	bl	8000bb0 <HAL_GetTick>
 80041a8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fc fd00 	bl	8000bb0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e30c      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041be:	4b96      	ldr	r3, [pc, #600]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x2d4>
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d060      	beq.n	800429c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d005      	beq.n	80041ec <HAL_RCC_OscConfig+0x314>
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	2b0c      	cmp	r3, #12
 80041e4:	d119      	bne.n	800421a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d116      	bne.n	800421a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ec:	4b8a      	ldr	r3, [pc, #552]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_OscConfig+0x32c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e2e9      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b84      	ldr	r3, [pc, #528]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	061b      	lsls	r3, r3, #24
 8004212:	4981      	ldr	r1, [pc, #516]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004218:	e040      	b.n	800429c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d023      	beq.n	800426a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004222:	4b7d      	ldr	r3, [pc, #500]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7c      	ldr	r2, [pc, #496]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fc fcbf 	bl	8000bb0 <HAL_GetTick>
 8004232:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004236:	f7fc fcbb 	bl	8000bb0 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e2c7      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004248:	4b73      	ldr	r3, [pc, #460]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004254:	4b70      	ldr	r3, [pc, #448]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	496d      	ldr	r1, [pc, #436]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
 8004268:	e018      	b.n	800429c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800426a:	4b6b      	ldr	r3, [pc, #428]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6a      	ldr	r2, [pc, #424]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004276:	f7fc fc9b 	bl	8000bb0 <HAL_GetTick>
 800427a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427e:	f7fc fc97 	bl	8000bb0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e2a3      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d07f      	beq.n	80043a8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d05f      	beq.n	8004370 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80042b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d037      	beq.n	8004336 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e27c      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01b      	beq.n	8004320 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80042e8:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80042ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ee:	4a4a      	ldr	r2, [pc, #296]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042f8:	f7fc fc5a 	bl	8000bb0 <HAL_GetTick>
 80042fc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004300:	f7fc fc56 	bl	8000bb0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b11      	cmp	r3, #17
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e262      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004312:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ef      	bne.n	8004300 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004320:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004326:	f023 0210 	bic.w	r2, r3, #16
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	493a      	ldr	r1, [pc, #232]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004336:	4b38      	ldr	r3, [pc, #224]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433c:	4a36      	ldr	r2, [pc, #216]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004346:	f7fc fc33 	bl	8000bb0 <HAL_GetTick>
 800434a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434e:	f7fc fc2f 	bl	8000bb0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b11      	cmp	r3, #17
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e23b      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004360:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ef      	beq.n	800434e <HAL_RCC_OscConfig+0x476>
 800436e:	e01b      	b.n	80043a8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004370:	4b29      	ldr	r3, [pc, #164]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004376:	4a28      	ldr	r2, [pc, #160]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004380:	f7fc fc16 	bl	8000bb0 <HAL_GetTick>
 8004384:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004388:	f7fc fc12 	bl	8000bb0 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b11      	cmp	r3, #17
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e21e      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 800439c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1ef      	bne.n	8004388 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80c1 	beq.w	8004538 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10e      	bne.n	80043e6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	4a12      	ldr	r2, [pc, #72]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6593      	str	r3, [r2, #88]	; 0x58
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_OscConfig+0x540>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e6:	4b0d      	ldr	r3, [pc, #52]	; (800441c <HAL_RCC_OscConfig+0x544>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f2:	4b0a      	ldr	r3, [pc, #40]	; (800441c <HAL_RCC_OscConfig+0x544>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <HAL_RCC_OscConfig+0x544>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fe:	f7fc fbd7 	bl	8000bb0 <HAL_GetTick>
 8004402:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004404:	e00c      	b.n	8004420 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004406:	f7fc fbd3 	bl	8000bb0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d905      	bls.n	8004420 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1df      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
 8004418:	40021000 	.word	0x40021000
 800441c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004420:	4b99      	ldr	r3, [pc, #612]	; (8004688 <HAL_RCC_OscConfig+0x7b0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ec      	beq.n	8004406 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02c      	beq.n	8004492 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004438:	4b94      	ldr	r3, [pc, #592]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	4990      	ldr	r1, [pc, #576]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800445e:	4b8b      	ldr	r3, [pc, #556]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	4a89      	ldr	r2, [pc, #548]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800446e:	4b87      	ldr	r3, [pc, #540]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	4a85      	ldr	r2, [pc, #532]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800447e:	e018      	b.n	80044b2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004480:	4b82      	ldr	r3, [pc, #520]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	4a81      	ldr	r2, [pc, #516]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004490:	e00f      	b.n	80044b2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004492:	4b7e      	ldr	r3, [pc, #504]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	4a7c      	ldr	r2, [pc, #496]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044a2:	4b7a      	ldr	r3, [pc, #488]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	4a78      	ldr	r2, [pc, #480]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 80044aa:	f023 0304 	bic.w	r3, r3, #4
 80044ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fc fb79 	bl	8000bb0 <HAL_GetTick>
 80044be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fc fb75 	bl	8000bb0 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e17f      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d8:	4b6c      	ldr	r3, [pc, #432]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ed      	beq.n	80044c2 <HAL_RCC_OscConfig+0x5ea>
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fc fb62 	bl	8000bb0 <HAL_GetTick>
 80044ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f7fc fb5e 	bl	8000bb0 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e168      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004506:	4b61      	ldr	r3, [pc, #388]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ed      	bne.n	80044f0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004514:	4b5d      	ldr	r3, [pc, #372]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a5c      	ldr	r2, [pc, #368]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 800451c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452c:	4b57      	ldr	r3, [pc, #348]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a56      	ldr	r2, [pc, #344]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d03c      	beq.n	80045be <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01c      	beq.n	8004586 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800454c:	4b4f      	ldr	r3, [pc, #316]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 800454e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004552:	4a4e      	ldr	r2, [pc, #312]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fc fb28 	bl	8000bb0 <HAL_GetTick>
 8004560:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004564:	f7fc fb24 	bl	8000bb0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e130      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004576:	4b45      	ldr	r3, [pc, #276]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ef      	beq.n	8004564 <HAL_RCC_OscConfig+0x68c>
 8004584:	e01b      	b.n	80045be <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004586:	4b41      	ldr	r3, [pc, #260]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458c:	4a3f      	ldr	r2, [pc, #252]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004596:	f7fc fb0b 	bl	8000bb0 <HAL_GetTick>
 800459a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459e:	f7fc fb07 	bl	8000bb0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e113      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045b0:	4b36      	ldr	r3, [pc, #216]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 80045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ef      	bne.n	800459e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8107 	beq.w	80047d6 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	f040 80cf 	bne.w	8004770 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045d2:	4b2e      	ldr	r3, [pc, #184]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0203 	and.w	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d12c      	bne.n	8004640 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	3b01      	subs	r3, #1
 80045f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d123      	bne.n	8004640 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d11b      	bne.n	8004640 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d113      	bne.n	8004640 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	3b01      	subs	r3, #1
 8004626:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d109      	bne.n	8004640 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d071      	beq.n	8004724 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d06c      	beq.n	8004720 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0ba      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a09      	ldr	r2, [pc, #36]	; (800468c <HAL_RCC_OscConfig+0x7b4>)
 8004668:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800466e:	f7fc fa9f 	bl	8000bb0 <HAL_GetTick>
 8004672:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	e00c      	b.n	8004690 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004676:	f7fc fa9b 	bl	8000bb0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d905      	bls.n	8004690 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e0a7      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
 8004688:	40007000 	.word	0x40007000
 800468c:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1ec      	bne.n	8004676 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_RCC_OscConfig+0x90c>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046ac:	3a01      	subs	r2, #1
 80046ae:	0112      	lsls	r2, r2, #4
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b6:	0212      	lsls	r2, r2, #8
 80046b8:	4311      	orrs	r1, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046be:	0852      	lsrs	r2, r2, #1
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0552      	lsls	r2, r2, #21
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046ca:	0852      	lsrs	r2, r2, #1
 80046cc:	3a01      	subs	r2, #1
 80046ce:	0652      	lsls	r2, r2, #25
 80046d0:	4311      	orrs	r1, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046d6:	06d2      	lsls	r2, r2, #27
 80046d8:	430a      	orrs	r2, r1
 80046da:	4941      	ldr	r1, [pc, #260]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046e0:	4b3f      	ldr	r3, [pc, #252]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3e      	ldr	r2, [pc, #248]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 80046e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046ec:	4b3c      	ldr	r3, [pc, #240]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 80046f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046f8:	f7fc fa5a 	bl	8000bb0 <HAL_GetTick>
 80046fc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc fa56 	bl	8000bb0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e062      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800471e:	e05a      	b.n	80047d6 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e059      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004724:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d152      	bne.n	80047d6 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800473c:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a27      	ldr	r2, [pc, #156]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004746:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004748:	f7fc fa32 	bl	8000bb0 <HAL_GetTick>
 800474c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fc fa2e 	bl	8000bb0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e03a      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x878>
 800476e:	e032      	b.n	80047d6 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d02d      	beq.n	80047d2 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004776:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 800477c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004780:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004782:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 8004794:	f023 0303 	bic.w	r3, r3, #3
 8004798:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800479a:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	4a10      	ldr	r2, [pc, #64]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 80047a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fc fa01 	bl	8000bb0 <HAL_GetTick>
 80047ae:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fc f9fd 	bl	8000bb0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e009      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_RCC_OscConfig+0x908>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x8da>
 80047d0:	e001      	b.n	80047d6 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3728      	adds	r7, #40	; 0x28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	019d800c 	.word	0x019d800c

080047e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e10f      	b.n	8004a20 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004800:	4b89      	ldr	r3, [pc, #548]	; (8004a28 <HAL_RCC_ClockConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d910      	bls.n	8004830 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b86      	ldr	r3, [pc, #536]	; (8004a28 <HAL_RCC_ClockConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 020f 	bic.w	r2, r3, #15
 8004816:	4984      	ldr	r1, [pc, #528]	; (8004a28 <HAL_RCC_ClockConfig+0x240>)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481e:	4b82      	ldr	r3, [pc, #520]	; (8004a28 <HAL_RCC_ClockConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0f7      	b.n	8004a20 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8089 	beq.w	8004950 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d133      	bne.n	80048ae <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004846:	4b79      	ldr	r3, [pc, #484]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0e4      	b.n	8004a20 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004856:	f000 fa45 	bl	8004ce4 <RCC_GetSysClockFreqFromPLLSource>
 800485a:	4603      	mov	r3, r0
 800485c:	4a74      	ldr	r2, [pc, #464]	; (8004a30 <HAL_RCC_ClockConfig+0x248>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d955      	bls.n	800490e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004862:	4b72      	ldr	r3, [pc, #456]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800486e:	4b6f      	ldr	r3, [pc, #444]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004876:	4a6d      	ldr	r2, [pc, #436]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e044      	b.n	800490e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d03e      	beq.n	800490e <HAL_RCC_ClockConfig+0x126>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d13a      	bne.n	800490e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004898:	4b64      	ldr	r3, [pc, #400]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048a0:	4a62      	ldr	r2, [pc, #392]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e02f      	b.n	800490e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b6:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d115      	bne.n	80048ee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0ac      	b.n	8004a20 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ce:	4b57      	ldr	r3, [pc, #348]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0a0      	b.n	8004a20 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048de:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e098      	b.n	8004a20 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80048ee:	f000 f8db 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 80048f2:	4603      	mov	r3, r0
 80048f4:	4a4e      	ldr	r2, [pc, #312]	; (8004a30 <HAL_RCC_ClockConfig+0x248>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d909      	bls.n	800490e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048fa:	4b4c      	ldr	r3, [pc, #304]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004902:	4a4a      	ldr	r2, [pc, #296]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800490e:	4b47      	ldr	r3, [pc, #284]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f023 0203 	bic.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4944      	ldr	r1, [pc, #272]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 800491c:	4313      	orrs	r3, r2
 800491e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004920:	f7fc f946 	bl	8000bb0 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	e00a      	b.n	800493e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004928:	f7fc f942 	bl	8000bb0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	; 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e070      	b.n	8004a20 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 020c 	and.w	r2, r3, #12
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	429a      	cmp	r2, r3
 800494e:	d1eb      	bne.n	8004928 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495c:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4930      	ldr	r1, [pc, #192]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
 800496e:	e008      	b.n	8004982 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b80      	cmp	r3, #128	; 0x80
 8004974:	d105      	bne.n	8004982 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004976:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 800497c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004980:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004982:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <HAL_RCC_ClockConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d210      	bcs.n	80049b2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_RCC_ClockConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 020f 	bic.w	r2, r3, #15
 8004998:	4923      	ldr	r1, [pc, #140]	; (8004a28 <HAL_RCC_ClockConfig+0x240>)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCC_ClockConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e036      	b.n	8004a20 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049be:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4918      	ldr	r1, [pc, #96]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d009      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049dc:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4910      	ldr	r1, [pc, #64]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049f0:	f000 f85a 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_RCC_ClockConfig+0x244>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	490c      	ldr	r1, [pc, #48]	; (8004a34 <HAL_RCC_ClockConfig+0x24c>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <HAL_RCC_ClockConfig+0x250>)
 8004a0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <HAL_RCC_ClockConfig+0x254>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fc f87b 	bl	8000b10 <HAL_InitTick>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40022000 	.word	0x40022000
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	04c4b400 	.word	0x04c4b400
 8004a34:	0800b610 	.word	0x0800b610
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	20000004 	.word	0x20000004

08004a40 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004a4c:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <HAL_RCC_MCOConfig+0x64>)
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <HAL_RCC_MCOConfig+0x64>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a58:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <HAL_RCC_MCOConfig+0x64>)
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004a7a:	f107 0314 	add.w	r3, r7, #20
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a84:	f7fd fbe6 	bl	8002254 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_RCC_MCOConfig+0x64>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	430b      	orrs	r3, r1
 8004a96:	4903      	ldr	r1, [pc, #12]	; (8004aa4 <HAL_RCC_MCOConfig+0x64>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	3728      	adds	r7, #40	; 0x28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000

08004aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab6:	4b3e      	ldr	r3, [pc, #248]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ac0:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_GetSysClockFreq+0x34>
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	d121      	bne.n	8004b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d11e      	bne.n	8004b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004adc:	4b34      	ldr	r3, [pc, #208]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d107      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ae8:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	e005      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004af8:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b04:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10d      	bne.n	8004b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b18:	e00a      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d102      	bne.n	8004b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b20:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e004      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b2c:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8004b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d134      	bne.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b36:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d003      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0xa6>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d003      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0xac>
 8004b4c:	e005      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b4e:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b50:	617b      	str	r3, [r7, #20]
      break;
 8004b52:	e005      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b54:	4b19      	ldr	r3, [pc, #100]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8004b56:	617b      	str	r3, [r7, #20]
      break;
 8004b58:	e002      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	617b      	str	r3, [r7, #20]
      break;
 8004b5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b60:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	fb02 f203 	mul.w	r2, r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	0e5b      	lsrs	r3, r3, #25
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	3301      	adds	r3, #1
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3724      	adds	r7, #36	; 0x24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	0800b628 	.word	0x0800b628
 8004bb8:	00f42400 	.word	0x00f42400
 8004bbc:	007a1200 	.word	0x007a1200

08004bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc4:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000000 	.word	0x20000000

08004bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bdc:	f7ff fff0 	bl	8004bc0 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0a1b      	lsrs	r3, r3, #8
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4904      	ldr	r1, [pc, #16]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	0800b620 	.word	0x0800b620

08004c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c08:	f7ff ffda 	bl	8004bc0 <HAL_RCC_GetHCLKFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	0adb      	lsrs	r3, r3, #11
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	4904      	ldr	r1, [pc, #16]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800b620 	.word	0x0800b620

08004c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c48:	f7ff f872 	bl	8003d30 <HAL_PWREx_GetVoltageRange>
 8004c4c:	6178      	str	r0, [r7, #20]
 8004c4e:	e014      	b.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b22      	ldr	r3, [pc, #136]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c68:	f7ff f862 	bl	8003d30 <HAL_PWREx_GetVoltageRange>
 8004c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c80:	d10b      	bne.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d913      	bls.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8004c8c:	d902      	bls.n	8004c94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c8e:	2302      	movs	r3, #2
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e00d      	b.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c94:	2301      	movs	r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	e00a      	b.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9e:	d902      	bls.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	e004      	b.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d101      	bne.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cac:	2301      	movs	r3, #1
 8004cae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 020f 	bic.w	r2, r3, #15
 8004cb8:	4909      	ldr	r1, [pc, #36]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d001      	beq.n	8004cd2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	40022000 	.word	0x40022000

08004ce4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004cee:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d118      	bne.n	8004d2c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cfa:	4b2a      	ldr	r3, [pc, #168]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e005      	b.n	8004d22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d16:	4b23      	ldr	r3, [pc, #140]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d22:	4a21      	ldr	r2, [pc, #132]	; (8004da8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d2c:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d003      	beq.n	8004d44 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d003      	beq.n	8004d4a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004d42:	e005      	b.n	8004d50 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d44:	4b19      	ldr	r3, [pc, #100]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d46:	613b      	str	r3, [r7, #16]
    break;
 8004d48:	e005      	b.n	8004d56 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d4a:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d4c:	613b      	str	r3, [r7, #16]
    break;
 8004d4e:	e002      	b.n	8004d56 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	613b      	str	r3, [r7, #16]
    break;
 8004d54:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	3301      	adds	r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	fb02 f203 	mul.w	r2, r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	0e5b      	lsrs	r3, r3, #25
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	3301      	adds	r3, #1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004d96:	683b      	ldr	r3, [r7, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40021000 	.word	0x40021000
 8004da8:	0800b628 	.word	0x0800b628
 8004dac:	00f42400 	.word	0x00f42400
 8004db0:	007a1200 	.word	0x007a1200

08004db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d040      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d02a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d825      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d026      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004de0:	2b60      	cmp	r3, #96	; 0x60
 8004de2:	d821      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d006      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d81d      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d010      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004df4:	e018      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004df6:	4b89      	ldr	r3, [pc, #548]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	4a88      	ldr	r2, [pc, #544]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e00:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e02:	e015      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fb4e 	bl	80054ac <RCCEx_PLLSAI1_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e14:	e00c      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3320      	adds	r3, #32
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fc39 	bl	8005694 <RCCEx_PLLSAI2_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e26:	e003      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	74fb      	strb	r3, [r7, #19]
      break;
 8004e2c:	e000      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e36:	4b79      	ldr	r3, [pc, #484]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e44:	4975      	ldr	r1, [pc, #468]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e4c:	e001      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d047      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e66:	d030      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6c:	d82a      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e72:	d02a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e78:	d824      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e84:	d81e      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d010      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e90:	e018      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e92:	4b62      	ldr	r3, [pc, #392]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	4a61      	ldr	r2, [pc, #388]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e9e:	e015      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fb00 	bl	80054ac <RCCEx_PLLSAI1_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eb0:	e00c      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3320      	adds	r3, #32
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fbeb 	bl	8005694 <RCCEx_PLLSAI2_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ec8:	e000      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ed2:	4b52      	ldr	r3, [pc, #328]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	494e      	ldr	r1, [pc, #312]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ee8:	e001      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 809f 	beq.w	800503a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efc:	2300      	movs	r3, #0
 8004efe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f00:	4b46      	ldr	r3, [pc, #280]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f16:	4b41      	ldr	r3, [pc, #260]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6593      	str	r3, [r2, #88]	; 0x58
 8004f22:	4b3e      	ldr	r3, [pc, #248]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f32:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3a      	ldr	r2, [pc, #232]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f3e:	f7fb fe37 	bl	8000bb0 <HAL_GetTick>
 8004f42:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f44:	e009      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f46:	f7fb fe33 	bl	8000bb0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d902      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	74fb      	strb	r3, [r7, #19]
        break;
 8004f58:	e005      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f5a:	4b31      	ldr	r3, [pc, #196]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0ef      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d15b      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01f      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d019      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9c:	4a1f      	ldr	r2, [pc, #124]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	4a1b      	ldr	r2, [pc, #108]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fb6:	4a19      	ldr	r2, [pc, #100]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d016      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fb fdf2 	bl	8000bb0 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fce:	e00b      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7fb fdee 	bl	8000bb0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d902      	bls.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	74fb      	strb	r3, [r7, #19]
            break;
 8004fe6:	e006      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ec      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	74bb      	strb	r3, [r7, #18]
 800501a:	e005      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800501c:	40021000 	.word	0x40021000
 8005020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005028:	7c7b      	ldrb	r3, [r7, #17]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502e:	4ba0      	ldr	r3, [pc, #640]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	4a9f      	ldr	r2, [pc, #636]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005038:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005046:	4b9a      	ldr	r3, [pc, #616]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f023 0203 	bic.w	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	4996      	ldr	r1, [pc, #600]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005068:	4b91      	ldr	r3, [pc, #580]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f023 020c 	bic.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	498e      	ldr	r1, [pc, #568]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800508a:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	4985      	ldr	r1, [pc, #532]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ac:	4b80      	ldr	r3, [pc, #512]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ba:	497d      	ldr	r1, [pc, #500]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050ce:	4b78      	ldr	r3, [pc, #480]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050dc:	4974      	ldr	r1, [pc, #464]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050f0:	4b6f      	ldr	r3, [pc, #444]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	496c      	ldr	r1, [pc, #432]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005112:	4b67      	ldr	r3, [pc, #412]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005120:	4963      	ldr	r1, [pc, #396]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005134:	4b5e      	ldr	r3, [pc, #376]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005142:	495b      	ldr	r1, [pc, #364]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005156:	4b56      	ldr	r3, [pc, #344]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	4952      	ldr	r1, [pc, #328]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005178:	4b4d      	ldr	r3, [pc, #308]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005186:	494a      	ldr	r1, [pc, #296]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800519a:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	4941      	ldr	r1, [pc, #260]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051bc:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051c2:	f023 0203 	bic.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ca:	4939      	ldr	r1, [pc, #228]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d028      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051de:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ec:	4930      	ldr	r1, [pc, #192]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fc:	d106      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005208:	60d3      	str	r3, [r2, #12]
 800520a:	e011      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005214:	d10c      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	2101      	movs	r1, #1
 800521c:	4618      	mov	r0, r3
 800521e:	f000 f945 	bl	80054ac <RCCEx_PLLSAI1_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005226:	7cfb      	ldrb	r3, [r7, #19]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d04d      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005244:	d108      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005252:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005256:	e012      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005258:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005264:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005276:	490e      	ldr	r1, [pc, #56]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005286:	d106      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005292:	60d3      	str	r3, [r2, #12]
 8005294:	e020      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800529a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529e:	d109      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052a0:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a02      	ldr	r2, [pc, #8]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052aa:	60d3      	str	r3, [r2, #12]
 80052ac:	e014      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2101      	movs	r1, #1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f8f1 	bl	80054ac <RCCEx_PLLSAI1_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d028      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052e4:	4b68      	ldr	r3, [pc, #416]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f2:	4965      	ldr	r1, [pc, #404]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005302:	d106      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005304:	4b60      	ldr	r3, [pc, #384]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a5f      	ldr	r2, [pc, #380]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800530a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800530e:	60d3      	str	r3, [r2, #12]
 8005310:	e011      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800531a:	d10c      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	2101      	movs	r1, #1
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f8c2 	bl	80054ac <RCCEx_PLLSAI1_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01e      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005342:	4b51      	ldr	r3, [pc, #324]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005352:	494d      	ldr	r1, [pc, #308]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	2102      	movs	r1, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f89d 	bl	80054ac <RCCEx_PLLSAI1_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800538c:	4b3e      	ldr	r3, [pc, #248]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800538e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005392:	f023 0204 	bic.w	r2, r3, #4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539c:	493a      	ldr	r1, [pc, #232]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053b0:	4b35      	ldr	r3, [pc, #212]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b6:	f023 0218 	bic.w	r2, r3, #24
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	4931      	ldr	r1, [pc, #196]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d035      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053d4:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e0:	f7fb fbe6 	bl	8000bb0 <HAL_GetTick>
 80053e4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053e6:	e009      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053e8:	f7fb fbe2 	bl	8000bb0 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d902      	bls.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	74fb      	strb	r3, [r7, #19]
        break;
 80053fa:	e005      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053fc:	4b22      	ldr	r3, [pc, #136]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ef      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005408:	7cfb      	ldrb	r3, [r7, #19]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d113      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800540e:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541e:	491a      	ldr	r1, [pc, #104]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3320      	adds	r3, #32
 800542a:	2102      	movs	r1, #2
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f931 	bl	8005694 <RCCEx_PLLSAI2_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d017      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800544e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545c:	490a      	ldr	r1, [pc, #40]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800546e:	d105      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800547c:	7cbb      	ldrb	r3, [r7, #18]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000

0800548c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a04      	ldr	r2, [pc, #16]	; (80054a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005496:	f043 0304 	orr.w	r3, r3, #4
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000

080054ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ba:	4b72      	ldr	r3, [pc, #456]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00e      	beq.n	80054e4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054c6:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0203 	and.w	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d103      	bne.n	80054de <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
       ||
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d142      	bne.n	8005564 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
 80054e2:	e03f      	b.n	8005564 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d018      	beq.n	800551e <RCCEx_PLLSAI1_Config+0x72>
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d825      	bhi.n	800553c <RCCEx_PLLSAI1_Config+0x90>
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d002      	beq.n	80054fa <RCCEx_PLLSAI1_Config+0x4e>
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d009      	beq.n	800550c <RCCEx_PLLSAI1_Config+0x60>
 80054f8:	e020      	b.n	800553c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054fa:	4b62      	ldr	r3, [pc, #392]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d11d      	bne.n	8005542 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550a:	e01a      	b.n	8005542 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800550c:	4b5d      	ldr	r3, [pc, #372]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005514:	2b00      	cmp	r3, #0
 8005516:	d116      	bne.n	8005546 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551c:	e013      	b.n	8005546 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800551e:	4b59      	ldr	r3, [pc, #356]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800552a:	4b56      	ldr	r3, [pc, #344]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800553a:	e006      	b.n	800554a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      break;
 8005540:	e004      	b.n	800554c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005542:	bf00      	nop
 8005544:	e002      	b.n	800554c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800554a:	bf00      	nop
    }

    if(status == HAL_OK)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005552:	4b4c      	ldr	r3, [pc, #304]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f023 0203 	bic.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4949      	ldr	r1, [pc, #292]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005560:	4313      	orrs	r3, r2
 8005562:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f040 8086 	bne.w	8005678 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800556c:	4b45      	ldr	r3, [pc, #276]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a44      	ldr	r2, [pc, #272]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fb fb1a 	bl	8000bb0 <HAL_GetTick>
 800557c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800557e:	e009      	b.n	8005594 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005580:	f7fb fb16 	bl	8000bb0 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d902      	bls.n	8005594 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	73fb      	strb	r3, [r7, #15]
        break;
 8005592:	e005      	b.n	80055a0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005594:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1ef      	bne.n	8005580 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d168      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d113      	bne.n	80055d4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ac:	4b35      	ldr	r3, [pc, #212]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	4b35      	ldr	r3, [pc, #212]	; (8005688 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6892      	ldr	r2, [r2, #8]
 80055b8:	0211      	lsls	r1, r2, #8
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68d2      	ldr	r2, [r2, #12]
 80055be:	06d2      	lsls	r2, r2, #27
 80055c0:	4311      	orrs	r1, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6852      	ldr	r2, [r2, #4]
 80055c6:	3a01      	subs	r2, #1
 80055c8:	0112      	lsls	r2, r2, #4
 80055ca:	430a      	orrs	r2, r1
 80055cc:	492d      	ldr	r1, [pc, #180]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	610b      	str	r3, [r1, #16]
 80055d2:	e02d      	b.n	8005630 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d115      	bne.n	8005606 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055da:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	4b2b      	ldr	r3, [pc, #172]	; (800568c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6892      	ldr	r2, [r2, #8]
 80055e6:	0211      	lsls	r1, r2, #8
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6912      	ldr	r2, [r2, #16]
 80055ec:	0852      	lsrs	r2, r2, #1
 80055ee:	3a01      	subs	r2, #1
 80055f0:	0552      	lsls	r2, r2, #21
 80055f2:	4311      	orrs	r1, r2
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6852      	ldr	r2, [r2, #4]
 80055f8:	3a01      	subs	r2, #1
 80055fa:	0112      	lsls	r2, r2, #4
 80055fc:	430a      	orrs	r2, r1
 80055fe:	4921      	ldr	r1, [pc, #132]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005600:	4313      	orrs	r3, r2
 8005602:	610b      	str	r3, [r1, #16]
 8005604:	e014      	b.n	8005630 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005606:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	4b21      	ldr	r3, [pc, #132]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560c:	4013      	ands	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6892      	ldr	r2, [r2, #8]
 8005612:	0211      	lsls	r1, r2, #8
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6952      	ldr	r2, [r2, #20]
 8005618:	0852      	lsrs	r2, r2, #1
 800561a:	3a01      	subs	r2, #1
 800561c:	0652      	lsls	r2, r2, #25
 800561e:	4311      	orrs	r1, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6852      	ldr	r2, [r2, #4]
 8005624:	3a01      	subs	r2, #1
 8005626:	0112      	lsls	r2, r2, #4
 8005628:	430a      	orrs	r2, r1
 800562a:	4916      	ldr	r1, [pc, #88]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005630:	4b14      	ldr	r3, [pc, #80]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a13      	ldr	r2, [pc, #76]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800563a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563c:	f7fb fab8 	bl	8000bb0 <HAL_GetTick>
 8005640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005642:	e009      	b.n	8005658 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005644:	f7fb fab4 	bl	8000bb0 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d902      	bls.n	8005658 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	73fb      	strb	r3, [r7, #15]
          break;
 8005656:	e005      	b.n	8005664 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ef      	beq.n	8005644 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	4904      	ldr	r1, [pc, #16]	; (8005684 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005674:	4313      	orrs	r3, r2
 8005676:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000
 8005688:	07ff800f 	.word	0x07ff800f
 800568c:	ff9f800f 	.word	0xff9f800f
 8005690:	f9ff800f 	.word	0xf9ff800f

08005694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056a2:	4b72      	ldr	r3, [pc, #456]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00e      	beq.n	80056cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056ae:	4b6f      	ldr	r3, [pc, #444]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0203 	and.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d103      	bne.n	80056c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
       ||
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d142      	bne.n	800574c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
 80056ca:	e03f      	b.n	800574c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d018      	beq.n	8005706 <RCCEx_PLLSAI2_Config+0x72>
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d825      	bhi.n	8005724 <RCCEx_PLLSAI2_Config+0x90>
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d002      	beq.n	80056e2 <RCCEx_PLLSAI2_Config+0x4e>
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d009      	beq.n	80056f4 <RCCEx_PLLSAI2_Config+0x60>
 80056e0:	e020      	b.n	8005724 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056e2:	4b62      	ldr	r3, [pc, #392]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11d      	bne.n	800572a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f2:	e01a      	b.n	800572a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056f4:	4b5d      	ldr	r3, [pc, #372]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d116      	bne.n	800572e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005704:	e013      	b.n	800572e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005706:	4b59      	ldr	r3, [pc, #356]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10f      	bne.n	8005732 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005712:	4b56      	ldr	r3, [pc, #344]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005722:	e006      	b.n	8005732 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      break;
 8005728:	e004      	b.n	8005734 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005732:	bf00      	nop
    }

    if(status == HAL_OK)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d108      	bne.n	800574c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800573a:	4b4c      	ldr	r3, [pc, #304]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f023 0203 	bic.w	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4949      	ldr	r1, [pc, #292]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005748:	4313      	orrs	r3, r2
 800574a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f040 8086 	bne.w	8005860 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005754:	4b45      	ldr	r3, [pc, #276]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a44      	ldr	r2, [pc, #272]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005760:	f7fb fa26 	bl	8000bb0 <HAL_GetTick>
 8005764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005766:	e009      	b.n	800577c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005768:	f7fb fa22 	bl	8000bb0 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d902      	bls.n	800577c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	73fb      	strb	r3, [r7, #15]
        break;
 800577a:	e005      	b.n	8005788 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800577c:	4b3b      	ldr	r3, [pc, #236]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ef      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d168      	bne.n	8005860 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d113      	bne.n	80057bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005794:	4b35      	ldr	r3, [pc, #212]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	4b35      	ldr	r3, [pc, #212]	; (8005870 <RCCEx_PLLSAI2_Config+0x1dc>)
 800579a:	4013      	ands	r3, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6892      	ldr	r2, [r2, #8]
 80057a0:	0211      	lsls	r1, r2, #8
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68d2      	ldr	r2, [r2, #12]
 80057a6:	06d2      	lsls	r2, r2, #27
 80057a8:	4311      	orrs	r1, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6852      	ldr	r2, [r2, #4]
 80057ae:	3a01      	subs	r2, #1
 80057b0:	0112      	lsls	r2, r2, #4
 80057b2:	430a      	orrs	r2, r1
 80057b4:	492d      	ldr	r1, [pc, #180]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	614b      	str	r3, [r1, #20]
 80057ba:	e02d      	b.n	8005818 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d115      	bne.n	80057ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057c2:	4b2a      	ldr	r3, [pc, #168]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <RCCEx_PLLSAI2_Config+0x1e0>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6892      	ldr	r2, [r2, #8]
 80057ce:	0211      	lsls	r1, r2, #8
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6912      	ldr	r2, [r2, #16]
 80057d4:	0852      	lsrs	r2, r2, #1
 80057d6:	3a01      	subs	r2, #1
 80057d8:	0552      	lsls	r2, r2, #21
 80057da:	4311      	orrs	r1, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6852      	ldr	r2, [r2, #4]
 80057e0:	3a01      	subs	r2, #1
 80057e2:	0112      	lsls	r2, r2, #4
 80057e4:	430a      	orrs	r2, r1
 80057e6:	4921      	ldr	r1, [pc, #132]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	614b      	str	r3, [r1, #20]
 80057ec:	e014      	b.n	8005818 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057ee:	4b1f      	ldr	r3, [pc, #124]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	4b21      	ldr	r3, [pc, #132]	; (8005878 <RCCEx_PLLSAI2_Config+0x1e4>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6892      	ldr	r2, [r2, #8]
 80057fa:	0211      	lsls	r1, r2, #8
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6952      	ldr	r2, [r2, #20]
 8005800:	0852      	lsrs	r2, r2, #1
 8005802:	3a01      	subs	r2, #1
 8005804:	0652      	lsls	r2, r2, #25
 8005806:	4311      	orrs	r1, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6852      	ldr	r2, [r2, #4]
 800580c:	3a01      	subs	r2, #1
 800580e:	0112      	lsls	r2, r2, #4
 8005810:	430a      	orrs	r2, r1
 8005812:	4916      	ldr	r1, [pc, #88]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005814:	4313      	orrs	r3, r2
 8005816:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005818:	4b14      	ldr	r3, [pc, #80]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a13      	ldr	r2, [pc, #76]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fb f9c4 	bl	8000bb0 <HAL_GetTick>
 8005828:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800582a:	e009      	b.n	8005840 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800582c:	f7fb f9c0 	bl	8000bb0 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d902      	bls.n	8005840 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	73fb      	strb	r3, [r7, #15]
          break;
 800583e:	e005      	b.n	800584c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0ef      	beq.n	800582c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	4904      	ldr	r1, [pc, #16]	; (800586c <RCCEx_PLLSAI2_Config+0x1d8>)
 800585c:	4313      	orrs	r3, r2
 800585e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40021000 	.word	0x40021000
 8005870:	07ff800f 	.word	0x07ff800f
 8005874:	ff9f800f 	.word	0xff9f800f
 8005878:	f9ff800f 	.word	0xf9ff800f

0800587c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e03c      	b.n	8005908 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fa ff88 	bl	80007b8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f85b 	bl	800597c <USART_SetConfig>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e01b      	b.n	8005908 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058de:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ee:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb23 	bl	8005f4c <USART_CheckIdleState>
 8005906:	4603      	mov	r3, r0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005920:	e018      	b.n	8005954 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d014      	beq.n	8005954 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fb f941 	bl	8000bb0 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <USART_WaitOnFlagUntilTimeout+0x30>
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d109      	bne.n	8005954 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e00f      	b.n	8005974 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69da      	ldr	r2, [r3, #28]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	429a      	cmp	r2, r3
 8005970:	d0d7      	beq.n	8005922 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005988:	2300      	movs	r3, #0
 800598a:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	4b96      	ldr	r3, [pc, #600]	; (8005c04 <USART_SetConfig+0x288>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	430b      	orrs	r3, r1
 80059b4:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80059b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059ba:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059ea:	f023 0309 	bic.w	r3, r3, #9
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	6979      	ldr	r1, [r7, #20]
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6053      	str	r3, [r2, #4]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	f023 010f 	bic.w	r1, r3, #15
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a7d      	ldr	r2, [pc, #500]	; (8005c08 <USART_SetConfig+0x28c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d120      	bne.n	8005a5a <USART_SetConfig+0xde>
 8005a18:	4b7c      	ldr	r3, [pc, #496]	; (8005c0c <USART_SetConfig+0x290>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d816      	bhi.n	8005a54 <USART_SetConfig+0xd8>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <USART_SetConfig+0xb0>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a49 	.word	0x08005a49
 8005a34:	08005a43 	.word	0x08005a43
 8005a38:	08005a4f 	.word	0x08005a4f
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e06b      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005a42:	2302      	movs	r3, #2
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e068      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e065      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	e062      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005a54:	2310      	movs	r3, #16
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e05f      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a6c      	ldr	r2, [pc, #432]	; (8005c10 <USART_SetConfig+0x294>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d132      	bne.n	8005aca <USART_SetConfig+0x14e>
 8005a64:	4b69      	ldr	r3, [pc, #420]	; (8005c0c <USART_SetConfig+0x290>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d828      	bhi.n	8005ac4 <USART_SetConfig+0x148>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <USART_SetConfig+0xfc>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005ac5 	.word	0x08005ac5
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ab9 	.word	0x08005ab9
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005ac5 	.word	0x08005ac5
 8005a98:	08005ab3 	.word	0x08005ab3
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005ac5 	.word	0x08005ac5
 8005aa8:	08005abf 	.word	0x08005abf
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e033      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e030      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e02d      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005abe:	2308      	movs	r3, #8
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e02a      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e027      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a51      	ldr	r2, [pc, #324]	; (8005c14 <USART_SetConfig+0x298>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d120      	bne.n	8005b16 <USART_SetConfig+0x19a>
 8005ad4:	4b4d      	ldr	r3, [pc, #308]	; (8005c0c <USART_SetConfig+0x290>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ade:	2b30      	cmp	r3, #48	; 0x30
 8005ae0:	d013      	beq.n	8005b0a <USART_SetConfig+0x18e>
 8005ae2:	2b30      	cmp	r3, #48	; 0x30
 8005ae4:	d814      	bhi.n	8005b10 <USART_SetConfig+0x194>
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d009      	beq.n	8005afe <USART_SetConfig+0x182>
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d810      	bhi.n	8005b10 <USART_SetConfig+0x194>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <USART_SetConfig+0x17c>
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d006      	beq.n	8005b04 <USART_SetConfig+0x188>
 8005af6:	e00b      	b.n	8005b10 <USART_SetConfig+0x194>
 8005af8:	2300      	movs	r3, #0
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e00d      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005afe:	2302      	movs	r3, #2
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e00a      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005b04:	2304      	movs	r3, #4
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e007      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e004      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005b10:	2310      	movs	r3, #16
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e001      	b.n	8005b1a <USART_SetConfig+0x19e>
 8005b16:	2310      	movs	r3, #16
 8005b18:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005b1a:	7ffb      	ldrb	r3, [r7, #31]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	f200 81e2 	bhi.w	8005ee6 <USART_SetConfig+0x56a>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <USART_SetConfig+0x1ac>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b4d 	.word	0x08005b4d
 8005b2c:	08005c19 	.word	0x08005c19
 8005b30:	08005ccf 	.word	0x08005ccf
 8005b34:	08005ee7 	.word	0x08005ee7
 8005b38:	08005d7f 	.word	0x08005d7f
 8005b3c:	08005ee7 	.word	0x08005ee7
 8005b40:	08005ee7 	.word	0x08005ee7
 8005b44:	08005ee7 	.word	0x08005ee7
 8005b48:	08005e35 	.word	0x08005e35
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7ff f844 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 8005b50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d044      	beq.n	8005be4 <USART_SetConfig+0x268>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d03e      	beq.n	8005be0 <USART_SetConfig+0x264>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d038      	beq.n	8005bdc <USART_SetConfig+0x260>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d032      	beq.n	8005bd8 <USART_SetConfig+0x25c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d02c      	beq.n	8005bd4 <USART_SetConfig+0x258>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	d026      	beq.n	8005bd0 <USART_SetConfig+0x254>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2b06      	cmp	r3, #6
 8005b88:	d020      	beq.n	8005bcc <USART_SetConfig+0x250>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b07      	cmp	r3, #7
 8005b90:	d01a      	beq.n	8005bc8 <USART_SetConfig+0x24c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d014      	beq.n	8005bc4 <USART_SetConfig+0x248>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b09      	cmp	r3, #9
 8005ba0:	d00e      	beq.n	8005bc0 <USART_SetConfig+0x244>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b0a      	cmp	r3, #10
 8005ba8:	d008      	beq.n	8005bbc <USART_SetConfig+0x240>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	2b0b      	cmp	r3, #11
 8005bb0:	d102      	bne.n	8005bb8 <USART_SetConfig+0x23c>
 8005bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bb6:	e016      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e014      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	e012      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bc0:	2340      	movs	r3, #64	; 0x40
 8005bc2:	e010      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	e00e      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	e00c      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bcc:	230c      	movs	r3, #12
 8005bce:	e00a      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bd0:	230a      	movs	r3, #10
 8005bd2:	e008      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	e006      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bd8:	2306      	movs	r3, #6
 8005bda:	e004      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	e002      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e000      	b.n	8005be6 <USART_SetConfig+0x26a>
 8005be4:	2301      	movs	r3, #1
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bec:	005a      	lsls	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	441a      	add	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005c00:	e174      	b.n	8005eec <USART_SetConfig+0x570>
 8005c02:	bf00      	nop
 8005c04:	cfff69f3 	.word	0xcfff69f3
 8005c08:	40013800 	.word	0x40013800
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40004400 	.word	0x40004400
 8005c14:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c18:	f7fe fff4 	bl	8004c04 <HAL_RCC_GetPCLK2Freq>
 8005c1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d044      	beq.n	8005cb0 <USART_SetConfig+0x334>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d03e      	beq.n	8005cac <USART_SetConfig+0x330>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d038      	beq.n	8005ca8 <USART_SetConfig+0x32c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d032      	beq.n	8005ca4 <USART_SetConfig+0x328>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d02c      	beq.n	8005ca0 <USART_SetConfig+0x324>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	d026      	beq.n	8005c9c <USART_SetConfig+0x320>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b06      	cmp	r3, #6
 8005c54:	d020      	beq.n	8005c98 <USART_SetConfig+0x31c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b07      	cmp	r3, #7
 8005c5c:	d01a      	beq.n	8005c94 <USART_SetConfig+0x318>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d014      	beq.n	8005c90 <USART_SetConfig+0x314>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b09      	cmp	r3, #9
 8005c6c:	d00e      	beq.n	8005c8c <USART_SetConfig+0x310>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b0a      	cmp	r3, #10
 8005c74:	d008      	beq.n	8005c88 <USART_SetConfig+0x30c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b0b      	cmp	r3, #11
 8005c7c:	d102      	bne.n	8005c84 <USART_SetConfig+0x308>
 8005c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c82:	e016      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e014      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	e012      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005c8c:	2340      	movs	r3, #64	; 0x40
 8005c8e:	e010      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005c90:	2320      	movs	r3, #32
 8005c92:	e00e      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005c94:	2310      	movs	r3, #16
 8005c96:	e00c      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	e00a      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005c9c:	230a      	movs	r3, #10
 8005c9e:	e008      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	e006      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005ca4:	2306      	movs	r3, #6
 8005ca6:	e004      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	e002      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e000      	b.n	8005cb2 <USART_SetConfig+0x336>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	005a      	lsls	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	085b      	lsrs	r3, r3, #1
 8005cc0:	441a      	add	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005ccc:	e10e      	b.n	8005eec <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d044      	beq.n	8005d60 <USART_SetConfig+0x3e4>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d03e      	beq.n	8005d5c <USART_SetConfig+0x3e0>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d038      	beq.n	8005d58 <USART_SetConfig+0x3dc>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d032      	beq.n	8005d54 <USART_SetConfig+0x3d8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d02c      	beq.n	8005d50 <USART_SetConfig+0x3d4>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	d026      	beq.n	8005d4c <USART_SetConfig+0x3d0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b06      	cmp	r3, #6
 8005d04:	d020      	beq.n	8005d48 <USART_SetConfig+0x3cc>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b07      	cmp	r3, #7
 8005d0c:	d01a      	beq.n	8005d44 <USART_SetConfig+0x3c8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d014      	beq.n	8005d40 <USART_SetConfig+0x3c4>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b09      	cmp	r3, #9
 8005d1c:	d00e      	beq.n	8005d3c <USART_SetConfig+0x3c0>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b0a      	cmp	r3, #10
 8005d24:	d008      	beq.n	8005d38 <USART_SetConfig+0x3bc>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b0b      	cmp	r3, #11
 8005d2c:	d102      	bne.n	8005d34 <USART_SetConfig+0x3b8>
 8005d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d32:	e016      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e014      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	e012      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	e010      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d40:	2320      	movs	r3, #32
 8005d42:	e00e      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d44:	2310      	movs	r3, #16
 8005d46:	e00c      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d48:	230c      	movs	r3, #12
 8005d4a:	e00a      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d4c:	230a      	movs	r3, #10
 8005d4e:	e008      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d50:	2308      	movs	r3, #8
 8005d52:	e006      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d54:	2306      	movs	r3, #6
 8005d56:	e004      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	e002      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e000      	b.n	8005d62 <USART_SetConfig+0x3e6>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4a79      	ldr	r2, [pc, #484]	; (8005f48 <USART_SetConfig+0x5cc>)
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	005a      	lsls	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	441a      	add	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7a:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005d7c:	e0b6      	b.n	8005eec <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005d7e:	f7fe fe93 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8005d82:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d044      	beq.n	8005e16 <USART_SetConfig+0x49a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d03e      	beq.n	8005e12 <USART_SetConfig+0x496>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d038      	beq.n	8005e0e <USART_SetConfig+0x492>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d032      	beq.n	8005e0a <USART_SetConfig+0x48e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d02c      	beq.n	8005e06 <USART_SetConfig+0x48a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	d026      	beq.n	8005e02 <USART_SetConfig+0x486>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b06      	cmp	r3, #6
 8005dba:	d020      	beq.n	8005dfe <USART_SetConfig+0x482>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b07      	cmp	r3, #7
 8005dc2:	d01a      	beq.n	8005dfa <USART_SetConfig+0x47e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d014      	beq.n	8005df6 <USART_SetConfig+0x47a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d00e      	beq.n	8005df2 <USART_SetConfig+0x476>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b0a      	cmp	r3, #10
 8005dda:	d008      	beq.n	8005dee <USART_SetConfig+0x472>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b0b      	cmp	r3, #11
 8005de2:	d102      	bne.n	8005dea <USART_SetConfig+0x46e>
 8005de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005de8:	e016      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e014      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	e012      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005df2:	2340      	movs	r3, #64	; 0x40
 8005df4:	e010      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005df6:	2320      	movs	r3, #32
 8005df8:	e00e      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	e00c      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	e00a      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005e02:	230a      	movs	r3, #10
 8005e04:	e008      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005e06:	2308      	movs	r3, #8
 8005e08:	e006      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005e0a:	2306      	movs	r3, #6
 8005e0c:	e004      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005e0e:	2304      	movs	r3, #4
 8005e10:	e002      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e000      	b.n	8005e18 <USART_SetConfig+0x49c>
 8005e16:	2301      	movs	r3, #1
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1e:	005a      	lsls	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	441a      	add	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005e32:	e05b      	b.n	8005eec <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d044      	beq.n	8005ec6 <USART_SetConfig+0x54a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d03e      	beq.n	8005ec2 <USART_SetConfig+0x546>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d038      	beq.n	8005ebe <USART_SetConfig+0x542>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d032      	beq.n	8005eba <USART_SetConfig+0x53e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d02c      	beq.n	8005eb6 <USART_SetConfig+0x53a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b05      	cmp	r3, #5
 8005e62:	d026      	beq.n	8005eb2 <USART_SetConfig+0x536>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b06      	cmp	r3, #6
 8005e6a:	d020      	beq.n	8005eae <USART_SetConfig+0x532>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b07      	cmp	r3, #7
 8005e72:	d01a      	beq.n	8005eaa <USART_SetConfig+0x52e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d014      	beq.n	8005ea6 <USART_SetConfig+0x52a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b09      	cmp	r3, #9
 8005e82:	d00e      	beq.n	8005ea2 <USART_SetConfig+0x526>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b0a      	cmp	r3, #10
 8005e8a:	d008      	beq.n	8005e9e <USART_SetConfig+0x522>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b0b      	cmp	r3, #11
 8005e92:	d102      	bne.n	8005e9a <USART_SetConfig+0x51e>
 8005e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e98:	e016      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e014      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005e9e:	2380      	movs	r3, #128	; 0x80
 8005ea0:	e012      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005ea2:	2340      	movs	r3, #64	; 0x40
 8005ea4:	e010      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005ea6:	2320      	movs	r3, #32
 8005ea8:	e00e      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005eaa:	2310      	movs	r3, #16
 8005eac:	e00c      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	e00a      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005eb2:	230a      	movs	r3, #10
 8005eb4:	e008      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	e006      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005eba:	2306      	movs	r3, #6
 8005ebc:	e004      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	e002      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e000      	b.n	8005ec8 <USART_SetConfig+0x54c>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	005a      	lsls	r2, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	441a      	add	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee2:	61bb      	str	r3, [r7, #24]
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      break;
 8005ee4:	e002      	b.n	8005eec <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	77bb      	strb	r3, [r7, #30]
      break;
 8005eea:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	2b0f      	cmp	r3, #15
 8005ef0:	d916      	bls.n	8005f20 <USART_SetConfig+0x5a4>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef8:	d212      	bcs.n	8005f20 <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f023 030f 	bic.w	r3, r3, #15
 8005f02:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	89fb      	ldrh	r3, [r7, #14]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	89fa      	ldrh	r2, [r7, #14]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	e001      	b.n	8005f24 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	77bb      	strb	r3, [r7, #30]
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8005f3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	00f42400 	.word	0x00f42400

08005f4c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f5a:	f7fa fe29 	bl	8000bb0 <HAL_GetTick>
 8005f5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d10e      	bne.n	8005f8c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fcc7 	bl	8005910 <USART_WaitOnFlagUntilTimeout>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e01e      	b.n	8005fca <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d10e      	bne.n	8005fb8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff fcb1 	bl	8005910 <USART_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e008      	b.n	8005fca <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_USARTEx_DisableFifoMode+0x16>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e027      	b.n	8006038 <HAL_USARTEx_DisableFifoMode+0x66>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006016:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8006058:	2302      	movs	r3, #2
 800605a:	e02d      	b.n	80060b8 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f84f 	bl	800613c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e02d      	b.n	8006134 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f811 	bl	800613c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006158:	e02f      	b.n	80061ba <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800615a:	2308      	movs	r3, #8
 800615c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800615e:	2308      	movs	r3, #8
 8006160:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8006168:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8006178:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	7b3a      	ldrb	r2, [r7, #12]
 8006186:	4910      	ldr	r1, [pc, #64]	; (80061c8 <USARTEx_SetNbDataToProcess+0x8c>)
 8006188:	5c8a      	ldrb	r2, [r1, r2]
 800618a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800618e:	7b3a      	ldrb	r2, [r7, #12]
 8006190:	490e      	ldr	r1, [pc, #56]	; (80061cc <USARTEx_SetNbDataToProcess+0x90>)
 8006192:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006194:	fb93 f3f2 	sdiv	r3, r3, r2
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	7b7a      	ldrb	r2, [r7, #13]
 80061a2:	4909      	ldr	r1, [pc, #36]	; (80061c8 <USARTEx_SetNbDataToProcess+0x8c>)
 80061a4:	5c8a      	ldrb	r2, [r1, r2]
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80061aa:	7b7a      	ldrb	r2, [r7, #13]
 80061ac:	4907      	ldr	r1, [pc, #28]	; (80061cc <USARTEx_SetNbDataToProcess+0x90>)
 80061ae:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	0800b658 	.word	0x0800b658
 80061cc:	0800b660 	.word	0x0800b660

080061d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061d0:	b084      	sub	sp, #16
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	f107 001c 	add.w	r0, r7, #28
 80061de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f99c 	bl	800652c <USB_CoreReset>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80061f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
 800620a:	e005      	b.n	8006218 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006224:	b004      	add	sp, #16
 8006226:	4770      	bx	lr

08006228 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f043 0201 	orr.w	r2, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f023 0201 	bic.w	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d115      	bne.n	80062ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800629a:	2001      	movs	r0, #1
 800629c:	f7fa fc94 	bl	8000bc8 <HAL_Delay>
      ms++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3301      	adds	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f931 	bl	800650e <USB_GetMode>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d01e      	beq.n	80062f0 <USB_SetCurrentMode+0x84>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b31      	cmp	r3, #49	; 0x31
 80062b6:	d9f0      	bls.n	800629a <USB_SetCurrentMode+0x2e>
 80062b8:	e01a      	b.n	80062f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d115      	bne.n	80062ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062cc:	2001      	movs	r0, #1
 80062ce:	f7fa fc7b 	bl	8000bc8 <HAL_Delay>
      ms++;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3301      	adds	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f918 	bl	800650e <USB_GetMode>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <USB_SetCurrentMode+0x84>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b31      	cmp	r3, #49	; 0x31
 80062e8:	d9f0      	bls.n	80062cc <USB_SetCurrentMode+0x60>
 80062ea:	e001      	b.n	80062f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e005      	b.n	80062fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b32      	cmp	r3, #50	; 0x32
 80062f4:	d101      	bne.n	80062fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	4a12      	ldr	r2, [pc, #72]	; (8006364 <USB_FlushTxFifo+0x60>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d901      	bls.n	8006322 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e01a      	b.n	8006358 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	daf3      	bge.n	8006312 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	019b      	lsls	r3, r3, #6
 8006332:	f043 0220 	orr.w	r2, r3, #32
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	4a08      	ldr	r2, [pc, #32]	; (8006364 <USB_FlushTxFifo+0x60>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e006      	b.n	8006358 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b20      	cmp	r3, #32
 8006354:	d0f1      	beq.n	800633a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	00030d40 	.word	0x00030d40

08006368 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	4a11      	ldr	r2, [pc, #68]	; (80063c0 <USB_FlushRxFifo+0x58>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e017      	b.n	80063b4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	daf3      	bge.n	8006374 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2210      	movs	r2, #16
 8006394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <USB_FlushRxFifo+0x58>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d901      	bls.n	80063a6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e006      	b.n	80063b4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d0f1      	beq.n	8006396 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	00030d40 	.word	0x00030d40

080063c4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	460b      	mov	r3, r1
 80063d4:	71fb      	strb	r3, [r7, #7]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80063e2:	88bb      	ldrh	r3, [r7, #4]
 80063e4:	3303      	adds	r3, #3
 80063e6:	089b      	lsrs	r3, r3, #2
 80063e8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	e018      	b.n	8006422 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	031a      	lsls	r2, r3, #12
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fc:	461a      	mov	r2, r3
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	3301      	adds	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3301      	adds	r3, #1
 800640e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	3301      	adds	r3, #1
 8006414:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	3301      	adds	r3, #1
 800641a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	3301      	adds	r3, #1
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	d3e2      	bcc.n	80063f0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3724      	adds	r7, #36	; 0x24
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006438:	b480      	push	{r7}
 800643a:	b08b      	sub	sp, #44	; 0x2c
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	089b      	lsrs	r3, r3, #2
 8006452:	b29b      	uxth	r3, r3
 8006454:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800645e:	2300      	movs	r3, #0
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	e014      	b.n	800648e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	3301      	adds	r3, #1
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	3301      	adds	r3, #1
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	3301      	adds	r3, #1
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	3301      	adds	r3, #1
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	3301      	adds	r3, #1
 800648c:	623b      	str	r3, [r7, #32]
 800648e:	6a3a      	ldr	r2, [r7, #32]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	429a      	cmp	r2, r3
 8006494:	d3e6      	bcc.n	8006464 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006496:	8bfb      	ldrh	r3, [r7, #30]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01e      	beq.n	80064da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a6:	461a      	mov	r2, r3
 80064a8:	f107 0310 	add.w	r3, r7, #16
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	701a      	strb	r2, [r3, #0]
      i++;
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	3301      	adds	r3, #1
 80064c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	3301      	adds	r3, #1
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064ce:	8bfb      	ldrh	r3, [r7, #30]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064d4:	8bfb      	ldrh	r3, [r7, #30]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1ea      	bne.n	80064b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064dc:	4618      	mov	r0, r3
 80064de:	372c      	adds	r7, #44	; 0x2c
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4013      	ands	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006500:	68fb      	ldr	r3, [r7, #12]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0301 	and.w	r3, r3, #1
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <USB_CoreReset+0x60>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e01a      	b.n	800657e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	daf3      	bge.n	8006538 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f043 0201 	orr.w	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <USB_CoreReset+0x60>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d901      	bls.n	8006570 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e006      	b.n	800657e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b01      	cmp	r3, #1
 800657a:	d0f1      	beq.n	8006560 <USB_CoreReset+0x34>

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	00030d40 	.word	0x00030d40

08006590 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006590:	b084      	sub	sp, #16
 8006592:	b580      	push	{r7, lr}
 8006594:	b086      	sub	sp, #24
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800659e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065b0:	461a      	mov	r2, r3
 80065b2:	2300      	movs	r3, #0
 80065b4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065e2:	2110      	movs	r1, #16
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fe8d 	bl	8006304 <USB_FlushTxFifo>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff feb7 	bl	8006368 <USB_FlushRxFifo>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	e015      	b.n	8006636 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006616:	461a      	mov	r2, r3
 8006618:	f04f 33ff 	mov.w	r3, #4294967295
 800661c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	461a      	mov	r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	3301      	adds	r3, #1
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	d3e5      	bcc.n	800660a <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f04f 32ff 	mov.w	r2, #4294967295
 800664a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2280      	movs	r2, #128	; 0x80
 8006650:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <USB_HostInit+0xf8>)
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a0c      	ldr	r2, [pc, #48]	; (800668c <USB_HostInit+0xfc>)
 800665c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f043 0210 	orr.w	r2, r3, #16
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <USB_HostInit+0x100>)
 8006672:	4313      	orrs	r3, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006684:	b004      	add	sp, #16
 8006686:	4770      	bx	lr
 8006688:	00600080 	.word	0x00600080
 800668c:	004000e0 	.word	0x004000e0
 8006690:	a3200008 	.word	0xa3200008

08006694 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	68f9      	ldr	r1, [r7, #12]
 80066c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d107      	bne.n	80066e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066dc:	461a      	mov	r2, r3
 80066de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066e2:	6053      	str	r3, [r2, #4]
 80066e4:	e009      	b.n	80066fa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d106      	bne.n	80066fa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066f2:	461a      	mov	r2, r3
 80066f4:	f241 7370 	movw	r3, #6000	; 0x1770
 80066f8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006728:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006736:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006738:	2064      	movs	r0, #100	; 0x64
 800673a:	f7fa fa45 	bl	8000bc8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800674c:	200a      	movs	r0, #10
 800674e:	f7fa fa3b 	bl	8000bc8 <HAL_Delay>

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006780:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d109      	bne.n	80067a0 <USB_DriveVbus+0x44>
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d106      	bne.n	80067a0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800679a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800679e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067aa:	d109      	bne.n	80067c0 <USB_DriveVbus+0x64>
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067be:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	0c5b      	lsrs	r3, r3, #17
 80067ec:	f003 0303 	and.w	r3, r3, #3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	b29b      	uxth	r3, r3
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4603      	mov	r3, r0
 8006830:	70fb      	strb	r3, [r7, #3]
 8006832:	460b      	mov	r3, r1
 8006834:	70bb      	strb	r3, [r7, #2]
 8006836:	4613      	mov	r3, r2
 8006838:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	461a      	mov	r2, r3
 8006850:	f04f 33ff 	mov.w	r3, #4294967295
 8006854:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800685a:	2b03      	cmp	r3, #3
 800685c:	d867      	bhi.n	800692e <USB_HC_Init+0x10e>
 800685e:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <USB_HC_Init+0x44>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	08006875 	.word	0x08006875
 8006868:	080068f1 	.word	0x080068f1
 800686c:	08006875 	.word	0x08006875
 8006870:	080068b3 	.word	0x080068b3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006880:	461a      	mov	r2, r3
 8006882:	f240 439d 	movw	r3, #1181	; 0x49d
 8006886:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006888:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	da51      	bge.n	8006934 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4413      	add	r3, r2
 8006898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ae:	60d3      	str	r3, [r2, #12]
      }
      break;
 80068b0:	e040      	b.n	8006934 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068be:	461a      	mov	r2, r3
 80068c0:	f240 639d 	movw	r3, #1693	; 0x69d
 80068c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	da34      	bge.n	8006938 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ec:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068ee:	e023      	b.n	8006938 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	461a      	mov	r2, r3
 80068fe:	f240 2325 	movw	r3, #549	; 0x225
 8006902:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006904:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006908:	2b00      	cmp	r3, #0
 800690a:	da17      	bge.n	800693c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	440a      	add	r2, r1
 8006922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006926:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800692a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800692c:	e006      	b.n	800693c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	77fb      	strb	r3, [r7, #31]
      break;
 8006932:	e004      	b.n	800693e <USB_HC_Init+0x11e>
      break;
 8006934:	bf00      	nop
 8006936:	e002      	b.n	800693e <USB_HC_Init+0x11e>
      break;
 8006938:	bf00      	nop
 800693a:	e000      	b.n	800693e <USB_HC_Init+0x11e>
      break;
 800693c:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	78fa      	ldrb	r2, [r7, #3]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	440a      	add	r2, r1
 8006954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006958:	f043 0302 	orr.w	r3, r3, #2
 800695c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	2101      	movs	r1, #1
 800696e:	fa01 f303 	lsl.w	r3, r1, r3
 8006972:	6939      	ldr	r1, [r7, #16]
 8006974:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006978:	4313      	orrs	r3, r2
 800697a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006988:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800698c:	2b00      	cmp	r3, #0
 800698e:	da03      	bge.n	8006998 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	e001      	b.n	800699c <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff16 	bl	80067ce <USB_GetHostSpeed>
 80069a2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80069a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d106      	bne.n	80069ba <USB_HC_Init+0x19a>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d003      	beq.n	80069ba <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80069b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e001      	b.n	80069be <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069be:	787b      	ldrb	r3, [r7, #1]
 80069c0:	059b      	lsls	r3, r3, #22
 80069c2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069c6:	78bb      	ldrb	r3, [r7, #2]
 80069c8:	02db      	lsls	r3, r3, #11
 80069ca:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069ce:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069d4:	049b      	lsls	r3, r3, #18
 80069d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069da:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80069de:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	0159      	lsls	r1, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	440b      	add	r3, r1
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069fa:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80069fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d10f      	bne.n	8006a24 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a22:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a24:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop

08006a30 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a48:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d018      	beq.n	8006a84 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	8912      	ldrh	r2, [r2, #8]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	8912      	ldrh	r2, [r2, #8]
 8006a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a66:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006a68:	8bfa      	ldrh	r2, [r7, #30]
 8006a6a:	8a7b      	ldrh	r3, [r7, #18]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d90b      	bls.n	8006a88 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006a70:	8a7b      	ldrh	r3, [r7, #18]
 8006a72:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a74:	8bfb      	ldrh	r3, [r7, #30]
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	8912      	ldrh	r2, [r2, #8]
 8006a7a:	fb02 f203 	mul.w	r2, r2, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	611a      	str	r2, [r3, #16]
 8006a82:	e001      	b.n	8006a88 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006a84:	2301      	movs	r3, #1
 8006a86:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	78db      	ldrb	r3, [r3, #3]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a90:	8bfb      	ldrh	r3, [r7, #30]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	8912      	ldrh	r2, [r2, #8]
 8006a96:	fb02 f203 	mul.w	r2, r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	611a      	str	r2, [r3, #16]
 8006a9e:	e003      	b.n	8006aa8 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ab0:	8bfb      	ldrh	r3, [r7, #30]
 8006ab2:	04d9      	lsls	r1, r3, #19
 8006ab4:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <USB_HC_StartXfer+0x1ec>)
 8006ab6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ab8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	7a9b      	ldrb	r3, [r3, #10]
 8006abe:	075b      	lsls	r3, r3, #29
 8006ac0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	0148      	lsls	r0, r1, #5
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	4401      	add	r1, r0
 8006acc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ad0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ad2:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2301      	moveq	r3, #1
 8006ae6:	2300      	movne	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b0a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	7c7b      	ldrb	r3, [r7, #17]
 8006b1c:	075b      	lsls	r3, r3, #29
 8006b1e:	6979      	ldr	r1, [r7, #20]
 8006b20:	0148      	lsls	r0, r1, #5
 8006b22:	69b9      	ldr	r1, [r7, #24]
 8006b24:	4401      	add	r1, r0
 8006b26:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b44:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	78db      	ldrb	r3, [r3, #3]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	e003      	b.n	8006b60 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b5e:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b66:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	78db      	ldrb	r3, [r3, #3]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d147      	bne.n	8006c12 <USB_HC_StartXfer+0x1e2>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d043      	beq.n	8006c12 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	79db      	ldrb	r3, [r3, #7]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d830      	bhi.n	8006bf4 <USB_HC_StartXfer+0x1c4>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <USB_HC_StartXfer+0x168>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006ba9 	.word	0x08006ba9
 8006b9c:	08006bcd 	.word	0x08006bcd
 8006ba0:	08006ba9 	.word	0x08006ba9
 8006ba4:	08006bcd 	.word	0x08006bcd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	3303      	adds	r3, #3
 8006bae:	089b      	lsrs	r3, r3, #2
 8006bb0:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006bb2:	89fa      	ldrh	r2, [r7, #14]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d91c      	bls.n	8006bf8 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bca:	e015      	b.n	8006bf8 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	3303      	adds	r3, #3
 8006bd2:	089b      	lsrs	r3, r3, #2
 8006bd4:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006bd6:	89fa      	ldrh	r2, [r7, #14]
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d90a      	bls.n	8006bfc <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bf2:	e003      	b.n	8006bfc <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006bf4:	bf00      	nop
 8006bf6:	e002      	b.n	8006bfe <USB_HC_StartXfer+0x1ce>
        break;
 8006bf8:	bf00      	nop
 8006bfa:	e000      	b.n	8006bfe <USB_HC_StartXfer+0x1ce>
        break;
 8006bfc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68d9      	ldr	r1, [r3, #12]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	785a      	ldrb	r2, [r3, #1]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff fbd9 	bl	80063c4 <USB_WritePacket>
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	1ff80000 	.word	0x1ff80000

08006c20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	b29b      	uxth	r3, r3
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b089      	sub	sp, #36	; 0x24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	0c9b      	lsrs	r3, r3, #18
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	0fdb      	lsrs	r3, r3, #31
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d104      	bne.n	8006c9c <USB_HC_Halt+0x5a>
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e0c6      	b.n	8006e2a <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <USB_HC_Halt+0x66>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d162      	bne.n	8006d6e <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 80a9 	bne.w	8006e28 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d132      	bne.n	8006d48 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d00:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d20:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d2c:	d81d      	bhi.n	8006d6a <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d44:	d0ed      	beq.n	8006d22 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d46:	e06f      	b.n	8006e28 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d66:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d68:	e05e      	b.n	8006e28 <USB_HC_Halt+0x1e6>
            break;
 8006d6a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d6c:	e05c      	b.n	8006e28 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d8c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d132      	bne.n	8006e04 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	0151      	lsls	r1, r2, #5
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	440a      	add	r2, r1
 8006db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dbc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006de8:	d81d      	bhi.n	8006e26 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e00:	d0ed      	beq.n	8006dde <USB_HC_Halt+0x19c>
 8006e02:	e011      	b.n	8006e28 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	e000      	b.n	8006e28 <USB_HC_Halt+0x1e6>
          break;
 8006e26:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3724      	adds	r7, #36	; 0x24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b088      	sub	sp, #32
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff f9fd 	bl	800624a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e50:	2110      	movs	r1, #16
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fa56 	bl	8006304 <USB_FlushTxFifo>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fa80 	bl	8006368 <USB_FlushRxFifo>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	e01f      	b.n	8006eb8 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e8e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e96:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e9e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eac:	461a      	mov	r2, r3
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d9dc      	bls.n	8006e78 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	e033      	b.n	8006f2c <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eda:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ee2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006eea:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef8:	461a      	mov	r2, r3
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f08:	d80c      	bhi.n	8006f24 <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f20:	d0ed      	beq.n	8006efe <USB_StopHost+0xc8>
 8006f22:	e000      	b.n	8006f26 <USB_StopHost+0xf0>
        break;
 8006f24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d9c8      	bls.n	8006ec4 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f04f 32ff 	mov.w	r2, #4294967295
 8006f46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff f96d 	bl	8006228 <USB_EnableGlobalInt>

  return ret;
 8006f4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3720      	adds	r7, #32
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006f5c:	4904      	ldr	r1, [pc, #16]	; (8006f70 <MX_FATFS_Init+0x18>)
 8006f5e:	4805      	ldr	r0, [pc, #20]	; (8006f74 <MX_FATFS_Init+0x1c>)
 8006f60:	f003 f84c 	bl	8009ffc <FATFS_LinkDriver>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <MX_FATFS_Init+0x20>)
 8006f6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006f6c:	bf00      	nop
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000198 	.word	0x20000198
 8006f74:	0800b668 	.word	0x0800b668
 8006f78:	20002234 	.word	0x20002234

08006f7c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4808      	ldr	r0, [pc, #32]	; (8006fc8 <USBH_status+0x34>)
 8006fa8:	f000 fe1a 	bl	8007be0 <USBH_MSC_UnitIsReady>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <USBH_status+0x24>
  {
    res = RES_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
 8006fb6:	e001      	b.n	8006fbc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20002238 	.word	0x20002238

08006fcc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b094      	sub	sp, #80	; 0x50
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006fe2:	7bf9      	ldrb	r1, [r7, #15]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4813      	ldr	r0, [pc, #76]	; (800703c <USBH_read+0x70>)
 8006fee:	f000 fe41 	bl	8007c74 <USBH_MSC_Read>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <USBH_read+0x34>
  {
    res = RES_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006ffe:	e017      	b.n	8007030 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007000:	f107 0210 	add.w	r2, r7, #16
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	4619      	mov	r1, r3
 8007008:	480c      	ldr	r0, [pc, #48]	; (800703c <USBH_read+0x70>)
 800700a:	f000 fe0f 	bl	8007c2c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800700e:	7f7b      	ldrb	r3, [r7, #29]
 8007010:	2b3a      	cmp	r3, #58	; 0x3a
 8007012:	d005      	beq.n	8007020 <USBH_read+0x54>
 8007014:	2b3a      	cmp	r3, #58	; 0x3a
 8007016:	dc07      	bgt.n	8007028 <USBH_read+0x5c>
 8007018:	2b04      	cmp	r3, #4
 800701a:	d001      	beq.n	8007020 <USBH_read+0x54>
 800701c:	2b28      	cmp	r3, #40	; 0x28
 800701e:	d103      	bne.n	8007028 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007020:	2303      	movs	r3, #3
 8007022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007026:	e003      	b.n	8007030 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800702e:	bf00      	nop
    }
  }

  return res;
 8007030:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007034:	4618      	mov	r0, r3
 8007036:	3748      	adds	r7, #72	; 0x48
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20002238 	.word	0x20002238

08007040 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b094      	sub	sp, #80	; 0x50
 8007044:	af02      	add	r7, sp, #8
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007056:	7bf9      	ldrb	r1, [r7, #15]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	4817      	ldr	r0, [pc, #92]	; (80070c0 <USBH_write+0x80>)
 8007062:	f000 fe70 	bl	8007d46 <USBH_MSC_Write>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <USBH_write+0x34>
  {
    res = RES_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007072:	e01f      	b.n	80070b4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007074:	f107 0210 	add.w	r2, r7, #16
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	4619      	mov	r1, r3
 800707c:	4810      	ldr	r0, [pc, #64]	; (80070c0 <USBH_write+0x80>)
 800707e:	f000 fdd5 	bl	8007c2c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007082:	7f7b      	ldrb	r3, [r7, #29]
 8007084:	2b3a      	cmp	r3, #58	; 0x3a
 8007086:	d00d      	beq.n	80070a4 <USBH_write+0x64>
 8007088:	2b3a      	cmp	r3, #58	; 0x3a
 800708a:	dc0f      	bgt.n	80070ac <USBH_write+0x6c>
 800708c:	2b28      	cmp	r3, #40	; 0x28
 800708e:	d009      	beq.n	80070a4 <USBH_write+0x64>
 8007090:	2b28      	cmp	r3, #40	; 0x28
 8007092:	dc0b      	bgt.n	80070ac <USBH_write+0x6c>
 8007094:	2b04      	cmp	r3, #4
 8007096:	d005      	beq.n	80070a4 <USBH_write+0x64>
 8007098:	2b27      	cmp	r3, #39	; 0x27
 800709a:	d107      	bne.n	80070ac <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800709c:	2302      	movs	r3, #2
 800709e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070a2:	e007      	b.n	80070b4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80070a4:	2303      	movs	r3, #3
 80070a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070aa:	e003      	b.n	80070b4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070b2:	bf00      	nop
    }
  }

  return res;
 80070b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3748      	adds	r7, #72	; 0x48
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20002238 	.word	0x20002238

080070c4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b090      	sub	sp, #64	; 0x40
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	603a      	str	r2, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
 80070d0:	460b      	mov	r3, r1
 80070d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80070da:	79bb      	ldrb	r3, [r7, #6]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d852      	bhi.n	8007186 <USBH_ioctl+0xc2>
 80070e0:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <USBH_ioctl+0x24>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	080070f9 	.word	0x080070f9
 80070ec:	08007101 	.word	0x08007101
 80070f0:	0800712b 	.word	0x0800712b
 80070f4:	08007157 	.word	0x08007157
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80070fe:	e045      	b.n	800718c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007100:	f107 0208 	add.w	r2, r7, #8
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	4619      	mov	r1, r3
 8007108:	4823      	ldr	r0, [pc, #140]	; (8007198 <USBH_ioctl+0xd4>)
 800710a:	f000 fd8f 	bl	8007c2c <USBH_MSC_GetLUNInfo>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007120:	e034      	b.n	800718c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007128:	e030      	b.n	800718c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800712a:	f107 0208 	add.w	r2, r7, #8
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	4619      	mov	r1, r3
 8007132:	4819      	ldr	r0, [pc, #100]	; (8007198 <USBH_ioctl+0xd4>)
 8007134:	f000 fd7a 	bl	8007c2c <USBH_MSC_GetLUNInfo>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d107      	bne.n	800714e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800713e:	8a3b      	ldrh	r3, [r7, #16]
 8007140:	461a      	mov	r2, r3
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800714c:	e01e      	b.n	800718c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007154:	e01a      	b.n	800718c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007156:	f107 0208 	add.w	r2, r7, #8
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	4619      	mov	r1, r3
 800715e:	480e      	ldr	r0, [pc, #56]	; (8007198 <USBH_ioctl+0xd4>)
 8007160:	f000 fd64 	bl	8007c2c <USBH_MSC_GetLUNInfo>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800716a:	8a3b      	ldrh	r3, [r7, #16]
 800716c:	0a5b      	lsrs	r3, r3, #9
 800716e:	b29b      	uxth	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800717c:	e006      	b.n	800718c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007184:	e002      	b.n	800718c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007186:	2304      	movs	r3, #4
 8007188:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800718c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007190:	4618      	mov	r0, r3
 8007192:	3740      	adds	r7, #64	; 0x40
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20002238 	.word	0x20002238

0800719c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b089      	sub	sp, #36	; 0x24
 80071a0:	af04      	add	r7, sp, #16
 80071a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071aa:	7919      	ldrb	r1, [r3, #4]
 80071ac:	2350      	movs	r3, #80	; 0x50
 80071ae:	2206      	movs	r2, #6
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fc53 	bl	8008a5c <USBH_FindInterface>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	2bff      	cmp	r3, #255	; 0xff
 80071be:	d002      	beq.n	80071c6 <USBH_MSC_InterfaceInit+0x2a>
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d901      	bls.n	80071ca <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071c6:	2302      	movs	r3, #2
 80071c8:	e0ef      	b.n	80073aa <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fc28 	bl	8008a24 <USBH_SelectInterface>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80071de:	2302      	movs	r3, #2
 80071e0:	e0e3      	b.n	80073aa <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80071e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80071ec:	f003 fa7c 	bl	800a6e8 <malloc>
 80071f0:	4603      	mov	r3, r0
 80071f2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007204:	2302      	movs	r3, #2
 8007206:	e0d0      	b.n	80073aa <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800720c:	2100      	movs	r1, #0
 800720e:	68b8      	ldr	r0, [r7, #8]
 8007210:	f003 fa88 	bl	800a724 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	211a      	movs	r1, #26
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	4413      	add	r3, r2
 8007220:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	b25b      	sxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	da16      	bge.n	800725a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	211a      	movs	r1, #26
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	4413      	add	r3, r2
 8007238:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800723c:	781a      	ldrb	r2, [r3, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	211a      	movs	r1, #26
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	4413      	add	r3, r2
 800724e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007252:	881a      	ldrh	r2, [r3, #0]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	815a      	strh	r2, [r3, #10]
 8007258:	e015      	b.n	8007286 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	211a      	movs	r1, #26
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800726a:	781a      	ldrb	r2, [r3, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	211a      	movs	r1, #26
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007280:	881a      	ldrh	r2, [r3, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	211a      	movs	r1, #26
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b25b      	sxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	da16      	bge.n	80072cc <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	211a      	movs	r1, #26
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	211a      	movs	r1, #26
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072c4:	881a      	ldrh	r2, [r3, #0]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	815a      	strh	r2, [r3, #10]
 80072ca:	e015      	b.n	80072f8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	211a      	movs	r1, #26
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	211a      	movs	r1, #26
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072f2:	881a      	ldrh	r2, [r3, #0]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2200      	movs	r2, #0
 80072fc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2200      	movs	r2, #0
 8007302:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	799b      	ldrb	r3, [r3, #6]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f002 fdc4 	bl	8009e9e <USBH_AllocPipe>
 8007316:	4603      	mov	r3, r0
 8007318:	461a      	mov	r2, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	79db      	ldrb	r3, [r3, #7]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f002 fdba 	bl	8009e9e <USBH_AllocPipe>
 800732a:	4603      	mov	r3, r0
 800732c:	461a      	mov	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fdac 	bl	8007e90 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	7959      	ldrb	r1, [r3, #5]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	7998      	ldrb	r0, [r3, #6]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	8912      	ldrh	r2, [r2, #8]
 8007350:	9202      	str	r2, [sp, #8]
 8007352:	2202      	movs	r2, #2
 8007354:	9201      	str	r2, [sp, #4]
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	4623      	mov	r3, r4
 800735a:	4602      	mov	r2, r0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f002 fd6f 	bl	8009e40 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	7919      	ldrb	r1, [r3, #4]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	79d8      	ldrb	r0, [r3, #7]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	8952      	ldrh	r2, [r2, #10]
 800737a:	9202      	str	r2, [sp, #8]
 800737c:	2202      	movs	r2, #2
 800737e:	9201      	str	r2, [sp, #4]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4623      	mov	r3, r4
 8007384:	4602      	mov	r2, r0
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 fd5a 	bl	8009e40 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	791b      	ldrb	r3, [r3, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f003 f8cb 	bl	800a530 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	795b      	ldrb	r3, [r3, #5]
 800739e:	2200      	movs	r2, #0
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f003 f8c4 	bl	800a530 <USBH_LL_SetToggle>

  return USBH_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd90      	pop	{r4, r7, pc}

080073b2 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	795b      	ldrb	r3, [r3, #5]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00e      	beq.n	80073ea <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	795b      	ldrb	r3, [r3, #5]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f002 fd53 	bl	8009e7e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	795b      	ldrb	r3, [r3, #5]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f002 fd7e 	bl	8009ee0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	791b      	ldrb	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00e      	beq.n	8007410 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	791b      	ldrb	r3, [r3, #4]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f002 fd40 	bl	8009e7e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	791b      	ldrb	r3, [r3, #4]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f002 fd6b 	bl	8009ee0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	4618      	mov	r0, r3
 8007426:	f003 f967 	bl	800a6f8 <free>
    phost->pActiveClass->pData = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007430:	2200      	movs	r2, #0
 8007432:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007450:	2301      	movs	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	7b9b      	ldrb	r3, [r3, #14]
 8007458:	2b03      	cmp	r3, #3
 800745a:	d041      	beq.n	80074e0 <USBH_MSC_ClassRequest+0xa2>
 800745c:	2b03      	cmp	r3, #3
 800745e:	dc4b      	bgt.n	80074f8 <USBH_MSC_ClassRequest+0xba>
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <USBH_MSC_ClassRequest+0x2a>
 8007464:	2b02      	cmp	r3, #2
 8007466:	d147      	bne.n	80074f8 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fcf0 	bl	8007e52 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d104      	bne.n	8007486 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d137      	bne.n	80074fc <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d804      	bhi.n	800749e <USBH_MSC_ClassRequest+0x60>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	3301      	adds	r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	e000      	b.n	80074a0 <USBH_MSC_ClassRequest+0x62>
 800749e:	2202      	movs	r2, #2
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80074a4:	2300      	movs	r3, #0
 80074a6:	73bb      	strb	r3, [r7, #14]
 80074a8:	e014      	b.n	80074d4 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	2134      	movs	r1, #52	; 0x34
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	3392      	adds	r3, #146	; 0x92
 80074b8:	2202      	movs	r2, #2
 80074ba:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	2134      	movs	r1, #52	; 0x34
 80074c2:	fb01 f303 	mul.w	r3, r1, r3
 80074c6:	4413      	add	r3, r2
 80074c8:	33c1      	adds	r3, #193	; 0xc1
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	3301      	adds	r3, #1
 80074d2:	73bb      	strb	r3, [r7, #14]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	7bba      	ldrb	r2, [r7, #14]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d3e5      	bcc.n	80074aa <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80074de:	e00d      	b.n	80074fc <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f002 f87b 	bl	80095de <USBH_ClrFeature>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d108      	bne.n	8007500 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	7bda      	ldrb	r2, [r3, #15]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	739a      	strb	r2, [r3, #14]
      }
      break;
 80074f6:	e003      	b.n	8007500 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80074f8:	bf00      	nop
 80074fa:	e002      	b.n	8007502 <USBH_MSC_ClassRequest+0xc4>
      break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007500:	bf00      	nop
  }

  return status;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800751e:	2301      	movs	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007526:	2301      	movs	r3, #1
 8007528:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	7b1b      	ldrb	r3, [r3, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <USBH_MSC_Process+0x2e>
 8007532:	2b01      	cmp	r3, #1
 8007534:	f000 8271 	beq.w	8007a1a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007538:	e272      	b.n	8007a20 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b29b      	uxth	r3, r3
 8007546:	429a      	cmp	r2, r3
 8007548:	f080 824f 	bcs.w	80079ea <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007552:	4619      	mov	r1, r3
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	2334      	movs	r3, #52	; 0x34
 8007558:	fb03 f301 	mul.w	r3, r3, r1
 800755c:	4413      	add	r3, r2
 800755e:	3391      	adds	r3, #145	; 0x91
 8007560:	2201      	movs	r2, #1
 8007562:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800756a:	4619      	mov	r1, r3
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	2334      	movs	r3, #52	; 0x34
 8007570:	fb03 f301 	mul.w	r3, r3, r1
 8007574:	4413      	add	r3, r2
 8007576:	3390      	adds	r3, #144	; 0x90
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b08      	cmp	r3, #8
 800757c:	f200 8243 	bhi.w	8007a06 <USBH_MSC_Process+0x4fa>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <USBH_MSC_Process+0x7c>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	080075ad 	.word	0x080075ad
 800758c:	08007a07 	.word	0x08007a07
 8007590:	08007675 	.word	0x08007675
 8007594:	080077f9 	.word	0x080077f9
 8007598:	080075d3 	.word	0x080075d3
 800759c:	080078c5 	.word	0x080078c5
 80075a0:	08007a07 	.word	0x08007a07
 80075a4:	08007a07 	.word	0x08007a07
 80075a8:	080079d9 	.word	0x080079d9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075b2:	4619      	mov	r1, r3
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	2334      	movs	r3, #52	; 0x34
 80075b8:	fb03 f301 	mul.w	r3, r3, r1
 80075bc:	4413      	add	r3, r2
 80075be:	3390      	adds	r3, #144	; 0x90
 80075c0:	2204      	movs	r2, #4
 80075c2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80075d0:	e222      	b.n	8007a18 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075d8:	b2d9      	uxtb	r1, r3
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075e0:	461a      	mov	r2, r3
 80075e2:	2334      	movs	r3, #52	; 0x34
 80075e4:	fb03 f302 	mul.w	r3, r3, r2
 80075e8:	3398      	adds	r3, #152	; 0x98
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4413      	add	r3, r2
 80075ee:	3307      	adds	r3, #7
 80075f0:	461a      	mov	r2, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 ff6a 	bl	80084cc <USBH_MSC_SCSI_Inquiry>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10b      	bne.n	800761a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007608:	4619      	mov	r1, r3
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	2334      	movs	r3, #52	; 0x34
 800760e:	fb03 f301 	mul.w	r3, r3, r1
 8007612:	4413      	add	r3, r2
 8007614:	3390      	adds	r3, #144	; 0x90
 8007616:	2202      	movs	r2, #2
 8007618:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d10c      	bne.n	800763a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007626:	4619      	mov	r1, r3
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	2334      	movs	r3, #52	; 0x34
 800762c:	fb03 f301 	mul.w	r3, r3, r1
 8007630:	4413      	add	r3, r2
 8007632:	3390      	adds	r3, #144	; 0x90
 8007634:	2205      	movs	r2, #5
 8007636:	701a      	strb	r2, [r3, #0]
            break;
 8007638:	e1e7      	b.n	8007a0a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b04      	cmp	r3, #4
 800763e:	f040 81e4 	bne.w	8007a0a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007648:	4619      	mov	r1, r3
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	2334      	movs	r3, #52	; 0x34
 800764e:	fb03 f301 	mul.w	r3, r3, r1
 8007652:	4413      	add	r3, r2
 8007654:	3390      	adds	r3, #144	; 0x90
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007660:	4619      	mov	r1, r3
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	2334      	movs	r3, #52	; 0x34
 8007666:	fb03 f301 	mul.w	r3, r3, r1
 800766a:	4413      	add	r3, r2
 800766c:	3391      	adds	r3, #145	; 0x91
 800766e:	2202      	movs	r2, #2
 8007670:	701a      	strb	r2, [r3, #0]
            break;
 8007672:	e1ca      	b.n	8007a0a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800767a:	b2db      	uxtb	r3, r3
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fe66 	bl	8008350 <USBH_MSC_SCSI_TestUnitReady>
 8007684:	4603      	mov	r3, r0
 8007686:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d149      	bne.n	8007722 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007694:	4619      	mov	r1, r3
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	2334      	movs	r3, #52	; 0x34
 800769a:	fb03 f301 	mul.w	r3, r3, r1
 800769e:	4413      	add	r3, r2
 80076a0:	3392      	adds	r3, #146	; 0x92
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00c      	beq.n	80076c2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ae:	4619      	mov	r1, r3
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	2334      	movs	r3, #52	; 0x34
 80076b4:	fb03 f301 	mul.w	r3, r3, r1
 80076b8:	4413      	add	r3, r2
 80076ba:	33c1      	adds	r3, #193	; 0xc1
 80076bc:	2201      	movs	r2, #1
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	e00b      	b.n	80076da <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076c8:	4619      	mov	r1, r3
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	2334      	movs	r3, #52	; 0x34
 80076ce:	fb03 f301 	mul.w	r3, r3, r1
 80076d2:	4413      	add	r3, r2
 80076d4:	33c1      	adds	r3, #193	; 0xc1
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076e0:	4619      	mov	r1, r3
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	2334      	movs	r3, #52	; 0x34
 80076e6:	fb03 f301 	mul.w	r3, r3, r1
 80076ea:	4413      	add	r3, r2
 80076ec:	3390      	adds	r3, #144	; 0x90
 80076ee:	2203      	movs	r2, #3
 80076f0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076f8:	4619      	mov	r1, r3
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	2334      	movs	r3, #52	; 0x34
 80076fe:	fb03 f301 	mul.w	r3, r3, r1
 8007702:	4413      	add	r3, r2
 8007704:	3391      	adds	r3, #145	; 0x91
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007710:	4619      	mov	r1, r3
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	2334      	movs	r3, #52	; 0x34
 8007716:	fb03 f301 	mul.w	r3, r3, r1
 800771a:	4413      	add	r3, r2
 800771c:	3392      	adds	r3, #146	; 0x92
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d14a      	bne.n	80077be <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800772e:	4619      	mov	r1, r3
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	2334      	movs	r3, #52	; 0x34
 8007734:	fb03 f301 	mul.w	r3, r3, r1
 8007738:	4413      	add	r3, r2
 800773a:	3392      	adds	r3, #146	; 0x92
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d00c      	beq.n	800775c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007748:	4619      	mov	r1, r3
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	2334      	movs	r3, #52	; 0x34
 800774e:	fb03 f301 	mul.w	r3, r3, r1
 8007752:	4413      	add	r3, r2
 8007754:	33c1      	adds	r3, #193	; 0xc1
 8007756:	2201      	movs	r2, #1
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e00b      	b.n	8007774 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007762:	4619      	mov	r1, r3
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	2334      	movs	r3, #52	; 0x34
 8007768:	fb03 f301 	mul.w	r3, r3, r1
 800776c:	4413      	add	r3, r2
 800776e:	33c1      	adds	r3, #193	; 0xc1
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800777a:	4619      	mov	r1, r3
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	2334      	movs	r3, #52	; 0x34
 8007780:	fb03 f301 	mul.w	r3, r3, r1
 8007784:	4413      	add	r3, r2
 8007786:	3390      	adds	r3, #144	; 0x90
 8007788:	2205      	movs	r2, #5
 800778a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007792:	4619      	mov	r1, r3
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	2334      	movs	r3, #52	; 0x34
 8007798:	fb03 f301 	mul.w	r3, r3, r1
 800779c:	4413      	add	r3, r2
 800779e:	3391      	adds	r3, #145	; 0x91
 80077a0:	2201      	movs	r2, #1
 80077a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077aa:	4619      	mov	r1, r3
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	2334      	movs	r3, #52	; 0x34
 80077b0:	fb03 f301 	mul.w	r3, r3, r1
 80077b4:	4413      	add	r3, r2
 80077b6:	3392      	adds	r3, #146	; 0x92
 80077b8:	2202      	movs	r2, #2
 80077ba:	701a      	strb	r2, [r3, #0]
            break;
 80077bc:	e127      	b.n	8007a0e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	f040 8124 	bne.w	8007a0e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077cc:	4619      	mov	r1, r3
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	2334      	movs	r3, #52	; 0x34
 80077d2:	fb03 f301 	mul.w	r3, r3, r1
 80077d6:	4413      	add	r3, r2
 80077d8:	3390      	adds	r3, #144	; 0x90
 80077da:	2201      	movs	r2, #1
 80077dc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077e4:	4619      	mov	r1, r3
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	2334      	movs	r3, #52	; 0x34
 80077ea:	fb03 f301 	mul.w	r3, r3, r1
 80077ee:	4413      	add	r3, r2
 80077f0:	3391      	adds	r3, #145	; 0x91
 80077f2:	2202      	movs	r2, #2
 80077f4:	701a      	strb	r2, [r3, #0]
            break;
 80077f6:	e10a      	b.n	8007a0e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077fe:	b2d9      	uxtb	r1, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007806:	461a      	mov	r2, r3
 8007808:	2334      	movs	r3, #52	; 0x34
 800780a:	fb03 f302 	mul.w	r3, r3, r2
 800780e:	3390      	adds	r3, #144	; 0x90
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4413      	add	r3, r2
 8007814:	3304      	adds	r3, #4
 8007816:	461a      	mov	r2, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fddc 	bl	80083d6 <USBH_MSC_SCSI_ReadCapacity>
 800781e:	4603      	mov	r3, r0
 8007820:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d120      	bne.n	800786a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800782e:	4619      	mov	r1, r3
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	2334      	movs	r3, #52	; 0x34
 8007834:	fb03 f301 	mul.w	r3, r3, r1
 8007838:	4413      	add	r3, r2
 800783a:	3390      	adds	r3, #144	; 0x90
 800783c:	2201      	movs	r2, #1
 800783e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007846:	4619      	mov	r1, r3
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	2334      	movs	r3, #52	; 0x34
 800784c:	fb03 f301 	mul.w	r3, r3, r1
 8007850:	4413      	add	r3, r2
 8007852:	3391      	adds	r3, #145	; 0x91
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800785e:	3301      	adds	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007868:	e0d3      	b.n	8007a12 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d10c      	bne.n	800788a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007876:	4619      	mov	r1, r3
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	2334      	movs	r3, #52	; 0x34
 800787c:	fb03 f301 	mul.w	r3, r3, r1
 8007880:	4413      	add	r3, r2
 8007882:	3390      	adds	r3, #144	; 0x90
 8007884:	2205      	movs	r2, #5
 8007886:	701a      	strb	r2, [r3, #0]
            break;
 8007888:	e0c3      	b.n	8007a12 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b04      	cmp	r3, #4
 800788e:	f040 80c0 	bne.w	8007a12 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007898:	4619      	mov	r1, r3
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	2334      	movs	r3, #52	; 0x34
 800789e:	fb03 f301 	mul.w	r3, r3, r1
 80078a2:	4413      	add	r3, r2
 80078a4:	3390      	adds	r3, #144	; 0x90
 80078a6:	2201      	movs	r2, #1
 80078a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078b0:	4619      	mov	r1, r3
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	2334      	movs	r3, #52	; 0x34
 80078b6:	fb03 f301 	mul.w	r3, r3, r1
 80078ba:	4413      	add	r3, r2
 80078bc:	3391      	adds	r3, #145	; 0x91
 80078be:	2202      	movs	r2, #2
 80078c0:	701a      	strb	r2, [r3, #0]
            break;
 80078c2:	e0a6      	b.n	8007a12 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078ca:	b2d9      	uxtb	r1, r3
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078d2:	461a      	mov	r2, r3
 80078d4:	2334      	movs	r3, #52	; 0x34
 80078d6:	fb03 f302 	mul.w	r3, r3, r2
 80078da:	3398      	adds	r3, #152	; 0x98
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	461a      	mov	r2, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fe96 	bl	8008616 <USBH_MSC_SCSI_RequestSense>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d145      	bne.n	8007980 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078fa:	4619      	mov	r1, r3
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	2334      	movs	r3, #52	; 0x34
 8007900:	fb03 f301 	mul.w	r3, r3, r1
 8007904:	4413      	add	r3, r2
 8007906:	339c      	adds	r3, #156	; 0x9c
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b06      	cmp	r3, #6
 800790c:	d00c      	beq.n	8007928 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007914:	4619      	mov	r1, r3
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	2334      	movs	r3, #52	; 0x34
 800791a:	fb03 f301 	mul.w	r3, r3, r1
 800791e:	4413      	add	r3, r2
 8007920:	339c      	adds	r3, #156	; 0x9c
 8007922:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007924:	2b02      	cmp	r3, #2
 8007926:	d117      	bne.n	8007958 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	f242 720f 	movw	r2, #9999	; 0x270f
 800793a:	4293      	cmp	r3, r2
 800793c:	d80c      	bhi.n	8007958 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007944:	4619      	mov	r1, r3
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	2334      	movs	r3, #52	; 0x34
 800794a:	fb03 f301 	mul.w	r3, r3, r1
 800794e:	4413      	add	r3, r2
 8007950:	3390      	adds	r3, #144	; 0x90
 8007952:	2202      	movs	r2, #2
 8007954:	701a      	strb	r2, [r3, #0]
                  break;
 8007956:	e05f      	b.n	8007a18 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800795e:	4619      	mov	r1, r3
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	2334      	movs	r3, #52	; 0x34
 8007964:	fb03 f301 	mul.w	r3, r3, r1
 8007968:	4413      	add	r3, r2
 800796a:	3390      	adds	r3, #144	; 0x90
 800796c:	2201      	movs	r2, #1
 800796e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007976:	3301      	adds	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d10c      	bne.n	80079a0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800798c:	4619      	mov	r1, r3
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	2334      	movs	r3, #52	; 0x34
 8007992:	fb03 f301 	mul.w	r3, r3, r1
 8007996:	4413      	add	r3, r2
 8007998:	3390      	adds	r3, #144	; 0x90
 800799a:	2208      	movs	r2, #8
 800799c:	701a      	strb	r2, [r3, #0]
            break;
 800799e:	e03a      	b.n	8007a16 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d137      	bne.n	8007a16 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079ac:	4619      	mov	r1, r3
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	2334      	movs	r3, #52	; 0x34
 80079b2:	fb03 f301 	mul.w	r3, r3, r1
 80079b6:	4413      	add	r3, r2
 80079b8:	3390      	adds	r3, #144	; 0x90
 80079ba:	2201      	movs	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079c4:	4619      	mov	r1, r3
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	2334      	movs	r3, #52	; 0x34
 80079ca:	fb03 f301 	mul.w	r3, r3, r1
 80079ce:	4413      	add	r3, r2
 80079d0:	3391      	adds	r3, #145	; 0x91
 80079d2:	2202      	movs	r2, #2
 80079d4:	701a      	strb	r2, [r3, #0]
            break;
 80079d6:	e01e      	b.n	8007a16 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079de:	3301      	adds	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80079e8:	e016      	b.n	8007a18 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2201      	movs	r2, #1
 80079f6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079fe:	2102      	movs	r1, #2
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
      break;
 8007a04:	e00c      	b.n	8007a20 <USBH_MSC_Process+0x514>
            break;
 8007a06:	bf00      	nop
 8007a08:	e00a      	b.n	8007a20 <USBH_MSC_Process+0x514>
            break;
 8007a0a:	bf00      	nop
 8007a0c:	e008      	b.n	8007a20 <USBH_MSC_Process+0x514>
            break;
 8007a0e:	bf00      	nop
 8007a10:	e006      	b.n	8007a20 <USBH_MSC_Process+0x514>
            break;
 8007a12:	bf00      	nop
 8007a14:	e004      	b.n	8007a20 <USBH_MSC_Process+0x514>
            break;
 8007a16:	bf00      	nop
      break;
 8007a18:	e002      	b.n	8007a20 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1e:	bf00      	nop
  }
  return error;
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop

08007a2c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b088      	sub	sp, #32
 8007a46:	af02      	add	r7, sp, #8
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	2134      	movs	r1, #52	; 0x34
 8007a66:	fb01 f303 	mul.w	r3, r1, r3
 8007a6a:	4413      	add	r3, r2
 8007a6c:	3390      	adds	r3, #144	; 0x90
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b07      	cmp	r3, #7
 8007a72:	d03c      	beq.n	8007aee <USBH_MSC_RdWrProcess+0xac>
 8007a74:	2b07      	cmp	r3, #7
 8007a76:	f300 80a7 	bgt.w	8007bc8 <USBH_MSC_RdWrProcess+0x186>
 8007a7a:	2b05      	cmp	r3, #5
 8007a7c:	d06c      	beq.n	8007b58 <USBH_MSC_RdWrProcess+0x116>
 8007a7e:	2b06      	cmp	r3, #6
 8007a80:	f040 80a2 	bne.w	8007bc8 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007a84:	78f9      	ldrb	r1, [r7, #3]
 8007a86:	2300      	movs	r3, #0
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fea5 	bl	80087de <USBH_MSC_SCSI_Read>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10b      	bne.n	8007ab6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	2134      	movs	r1, #52	; 0x34
 8007aa4:	fb01 f303 	mul.w	r3, r1, r3
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3390      	adds	r3, #144	; 0x90
 8007aac:	2201      	movs	r2, #1
 8007aae:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ab4:	e08a      	b.n	8007bcc <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d109      	bne.n	8007ad0 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	2134      	movs	r1, #52	; 0x34
 8007ac2:	fb01 f303 	mul.w	r3, r1, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	3390      	adds	r3, #144	; 0x90
 8007aca:	2205      	movs	r2, #5
 8007acc:	701a      	strb	r2, [r3, #0]
      break;
 8007ace:	e07d      	b.n	8007bcc <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d17a      	bne.n	8007bcc <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	2134      	movs	r1, #52	; 0x34
 8007adc:	fb01 f303 	mul.w	r3, r1, r3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	3390      	adds	r3, #144	; 0x90
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	75fb      	strb	r3, [r7, #23]
      break;
 8007aec:	e06e      	b.n	8007bcc <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007aee:	78f9      	ldrb	r1, [r7, #3]
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	2200      	movs	r2, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fe05 	bl	8008708 <USBH_MSC_SCSI_Write>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	2134      	movs	r1, #52	; 0x34
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	3390      	adds	r3, #144	; 0x90
 8007b16:	2201      	movs	r2, #1
 8007b18:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b1e:	e057      	b.n	8007bd0 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d109      	bne.n	8007b3a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007b26:	78fb      	ldrb	r3, [r7, #3]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	2134      	movs	r1, #52	; 0x34
 8007b2c:	fb01 f303 	mul.w	r3, r1, r3
 8007b30:	4413      	add	r3, r2
 8007b32:	3390      	adds	r3, #144	; 0x90
 8007b34:	2205      	movs	r2, #5
 8007b36:	701a      	strb	r2, [r3, #0]
      break;
 8007b38:	e04a      	b.n	8007bd0 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d147      	bne.n	8007bd0 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	2134      	movs	r1, #52	; 0x34
 8007b46:	fb01 f303 	mul.w	r3, r1, r3
 8007b4a:	4413      	add	r3, r2
 8007b4c:	3390      	adds	r3, #144	; 0x90
 8007b4e:	2208      	movs	r2, #8
 8007b50:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007b52:	2302      	movs	r3, #2
 8007b54:	75fb      	strb	r3, [r7, #23]
      break;
 8007b56:	e03b      	b.n	8007bd0 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	2234      	movs	r2, #52	; 0x34
 8007b5c:	fb02 f303 	mul.w	r3, r2, r3
 8007b60:	3398      	adds	r3, #152	; 0x98
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4413      	add	r3, r2
 8007b66:	1d1a      	adds	r2, r3, #4
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fd52 	bl	8008616 <USBH_MSC_SCSI_RequestSense>
 8007b72:	4603      	mov	r3, r0
 8007b74:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d113      	bne.n	8007ba4 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	2134      	movs	r1, #52	; 0x34
 8007b82:	fb01 f303 	mul.w	r3, r1, r3
 8007b86:	4413      	add	r3, r2
 8007b88:	3390      	adds	r3, #144	; 0x90
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	2134      	movs	r1, #52	; 0x34
 8007b94:	fb01 f303 	mul.w	r3, r1, r3
 8007b98:	4413      	add	r3, r2
 8007b9a:	3391      	adds	r3, #145	; 0x91
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d014      	beq.n	8007bd4 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d111      	bne.n	8007bd4 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	2134      	movs	r1, #52	; 0x34
 8007bb6:	fb01 f303 	mul.w	r3, r1, r3
 8007bba:	4413      	add	r3, r2
 8007bbc:	3390      	adds	r3, #144	; 0x90
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bc6:	e005      	b.n	8007bd4 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8007bc8:	bf00      	nop
 8007bca:	e004      	b.n	8007bd6 <USBH_MSC_RdWrProcess+0x194>
      break;
 8007bcc:	bf00      	nop
 8007bce:	e002      	b.n	8007bd6 <USBH_MSC_RdWrProcess+0x194>
      break;
 8007bd0:	bf00      	nop
 8007bd2:	e000      	b.n	8007bd6 <USBH_MSC_RdWrProcess+0x194>
      break;
 8007bd4:	bf00      	nop

  }
  return error;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b0b      	cmp	r3, #11
 8007bfe:	d10c      	bne.n	8007c1a <USBH_MSC_UnitIsReady+0x3a>
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	2134      	movs	r1, #52	; 0x34
 8007c06:	fb01 f303 	mul.w	r3, r1, r3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3391      	adds	r3, #145	; 0x91
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
 8007c18:	e001      	b.n	8007c1e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	460b      	mov	r3, r1
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b0b      	cmp	r3, #11
 8007c4c:	d10d      	bne.n	8007c6a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	2234      	movs	r2, #52	; 0x34
 8007c52:	fb02 f303 	mul.w	r3, r2, r3
 8007c56:	3390      	adds	r3, #144	; 0x90
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	2234      	movs	r2, #52	; 0x34
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f002 fd51 	bl	800a708 <memcpy>
    return USBH_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e000      	b.n	8007c6c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007c6a:	2302      	movs	r3, #2
  }
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	460b      	mov	r3, r1
 8007c82:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00e      	beq.n	8007cb8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007ca0:	2b0b      	cmp	r3, #11
 8007ca2:	d109      	bne.n	8007cb8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	2134      	movs	r1, #52	; 0x34
 8007caa:	fb01 f303 	mul.w	r3, r1, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	3390      	adds	r3, #144	; 0x90
 8007cb2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d001      	beq.n	8007cbc <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e040      	b.n	8007d3e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2206      	movs	r2, #6
 8007cc0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	2134      	movs	r1, #52	; 0x34
 8007cc8:	fb01 f303 	mul.w	r3, r1, r3
 8007ccc:	4413      	add	r3, r2
 8007cce:	3390      	adds	r3, #144	; 0x90
 8007cd0:	2206      	movs	r2, #6
 8007cd2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007cde:	7af9      	ldrb	r1, [r7, #11]
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fd78 	bl	80087de <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cf4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007cf6:	e016      	b.n	8007d26 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	f242 7110 	movw	r1, #10000	; 0x2710
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d805      	bhi.n	8007d1c <USBH_MSC_Read+0xa8>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007d22:	2302      	movs	r3, #2
 8007d24:	e00b      	b.n	8007d3e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff fe89 	bl	8007a42 <USBH_MSC_RdWrProcess>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d0e0      	beq.n	8007cf8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b088      	sub	sp, #32
 8007d4a:	af02      	add	r7, sp, #8
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	603b      	str	r3, [r7, #0]
 8007d52:	460b      	mov	r3, r1
 8007d54:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00e      	beq.n	8007d8a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007d72:	2b0b      	cmp	r3, #11
 8007d74:	d109      	bne.n	8007d8a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007d76:	7afb      	ldrb	r3, [r7, #11]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	2134      	movs	r1, #52	; 0x34
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	4413      	add	r3, r2
 8007d82:	3390      	adds	r3, #144	; 0x90
 8007d84:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d001      	beq.n	8007d8e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e040      	b.n	8007e10 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2207      	movs	r2, #7
 8007d92:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	2134      	movs	r1, #52	; 0x34
 8007d9a:	fb01 f303 	mul.w	r3, r1, r3
 8007d9e:	4413      	add	r3, r2
 8007da0:	3390      	adds	r3, #144	; 0x90
 8007da2:	2207      	movs	r2, #7
 8007da4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007db0:	7af9      	ldrb	r1, [r7, #11]
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fca4 	bl	8008708 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dc6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007dc8:	e016      	b.n	8007df8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad2      	subs	r2, r2, r3
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	f242 7110 	movw	r1, #10000	; 0x2710
 8007dda:	fb01 f303 	mul.w	r3, r1, r3
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d805      	bhi.n	8007dee <USBH_MSC_Write+0xa8>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2201      	movs	r2, #1
 8007df2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007df4:	2302      	movs	r3, #2
 8007df6:	e00b      	b.n	8007e10 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f7ff fe20 	bl	8007a42 <USBH_MSC_RdWrProcess>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d0e0      	beq.n	8007dca <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2221      	movs	r2, #33	; 0x21
 8007e24:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	22ff      	movs	r2, #255	; 0xff
 8007e2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2100      	movs	r1, #0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 fdab 	bl	800999e <USBH_CtlReq>
 8007e48:	4603      	mov	r3, r0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	22a1      	movs	r2, #161	; 0xa1
 8007e60:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	22fe      	movs	r2, #254	; 0xfe
 8007e66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fd8d 	bl	800999e <USBH_CtlReq>
 8007e84:	4603      	mov	r3, r0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <USBH_MSC_BOT_Init+0x3c>)
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4a09      	ldr	r2, [pc, #36]	; (8007ed0 <USBH_MSC_BOT_Init+0x40>)
 8007eac:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	43425355 	.word	0x43425355
 8007ed0:	20304050 	.word	0x20304050

08007ed4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f04:	3b01      	subs	r3, #1
 8007f06:	2b0a      	cmp	r3, #10
 8007f08:	f200 819e 	bhi.w	8008248 <USBH_MSC_BOT_Process+0x374>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <USBH_MSC_BOT_Process+0x40>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	08007f69 	.word	0x08007f69
 8007f1c:	08007fd3 	.word	0x08007fd3
 8007f20:	08007ff1 	.word	0x08007ff1
 8007f24:	08008075 	.word	0x08008075
 8007f28:	08008097 	.word	0x08008097
 8007f2c:	0800812f 	.word	0x0800812f
 8007f30:	0800814b 	.word	0x0800814b
 8007f34:	0800819d 	.word	0x0800819d
 8007f38:	080081cd 	.word	0x080081cd
 8007f3c:	0800822f 	.word	0x0800822f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	795b      	ldrb	r3, [r3, #5]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	9200      	str	r2, [sp, #0]
 8007f5e:	221f      	movs	r2, #31
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 ff2a 	bl	8009dba <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007f66:	e17e      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	795b      	ldrb	r3, [r3, #5]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f002 fab4 	bl	800a4dc <USBH_LL_GetURBState>
 8007f74:	4603      	mov	r3, r0
 8007f76:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007f78:	7d3b      	ldrb	r3, [r7, #20]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d118      	bne.n	8007fb0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007f8c:	b25b      	sxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	da04      	bge.n	8007f9c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2203      	movs	r2, #3
 8007f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f9a:	e157      	b.n	800824c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	2205      	movs	r2, #5
 8007fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007fa4:	e152      	b.n	800824c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2207      	movs	r2, #7
 8007faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007fae:	e14d      	b.n	800824c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fb0:	7d3b      	ldrb	r3, [r7, #20]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d104      	bne.n	8007fc0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007fbe:	e145      	b.n	800824c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8007fc0:	7d3b      	ldrb	r3, [r7, #20]
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	f040 8142 	bne.w	800824c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	220a      	movs	r2, #10
 8007fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007fd0:	e13c      	b.n	800824c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	895a      	ldrh	r2, [r3, #10]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	791b      	ldrb	r3, [r3, #4]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 ff0f 	bl	8009e04 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2204      	movs	r2, #4
 8007fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007fee:	e13a      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	791b      	ldrb	r3, [r3, #4]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f002 fa70 	bl	800a4dc <USBH_LL_GetURBState>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008000:	7d3b      	ldrb	r3, [r7, #20]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d12d      	bne.n	8008062 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	8952      	ldrh	r2, [r2, #10]
 800800e:	4293      	cmp	r3, r2
 8008010:	d910      	bls.n	8008034 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	8952      	ldrh	r2, [r2, #10]
 800801c:	441a      	add	r2, r3
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	8952      	ldrh	r2, [r2, #10]
 800802c:	1a9a      	subs	r2, r3, r2
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	65da      	str	r2, [r3, #92]	; 0x5c
 8008032:	e002      	b.n	800803a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2200      	movs	r2, #0
 8008038:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	895a      	ldrh	r2, [r3, #10]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	791b      	ldrb	r3, [r3, #4]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 fed7 	bl	8009e04 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008056:	e0fb      	b.n	8008250 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2207      	movs	r2, #7
 800805c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008060:	e0f6      	b.n	8008250 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8008062:	7d3b      	ldrb	r3, [r7, #20]
 8008064:	2b05      	cmp	r3, #5
 8008066:	f040 80f3 	bne.w	8008250 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2209      	movs	r2, #9
 800806e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008072:	e0ed      	b.n	8008250 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	891a      	ldrh	r2, [r3, #8]
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	795b      	ldrb	r3, [r3, #5]
 8008082:	2001      	movs	r0, #1
 8008084:	9000      	str	r0, [sp, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fe97 	bl	8009dba <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2206      	movs	r2, #6
 8008090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008094:	e0e7      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f002 fa1d 	bl	800a4dc <USBH_LL_GetURBState>
 80080a2:	4603      	mov	r3, r0
 80080a4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80080a6:	7d3b      	ldrb	r3, [r7, #20]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d12f      	bne.n	800810c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	8912      	ldrh	r2, [r2, #8]
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d910      	bls.n	80080da <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	8912      	ldrh	r2, [r2, #8]
 80080c2:	441a      	add	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	8912      	ldrh	r2, [r2, #8]
 80080d2:	1a9a      	subs	r2, r3, r2
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80080d8:	e002      	b.n	80080e0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2200      	movs	r2, #0
 80080de:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00c      	beq.n	8008102 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	891a      	ldrh	r2, [r3, #8]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	795b      	ldrb	r3, [r3, #5]
 80080f6:	2001      	movs	r0, #1
 80080f8:	9000      	str	r0, [sp, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 fe5d 	bl	8009dba <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008100:	e0a8      	b.n	8008254 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2207      	movs	r2, #7
 8008106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800810a:	e0a3      	b.n	8008254 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800810c:	7d3b      	ldrb	r3, [r7, #20]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d104      	bne.n	800811c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2205      	movs	r2, #5
 8008116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800811a:	e09b      	b.n	8008254 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800811c:	7d3b      	ldrb	r3, [r7, #20]
 800811e:	2b05      	cmp	r3, #5
 8008120:	f040 8098 	bne.w	8008254 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	220a      	movs	r2, #10
 8008128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800812c:	e092      	b.n	8008254 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	791b      	ldrb	r3, [r3, #4]
 8008138:	220d      	movs	r2, #13
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 fe62 	bl	8009e04 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2208      	movs	r2, #8
 8008144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008148:	e08d      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	791b      	ldrb	r3, [r3, #4]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f002 f9c3 	bl	800a4dc <USBH_LL_GetURBState>
 8008156:	4603      	mov	r3, r0
 8008158:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800815a:	7d3b      	ldrb	r3, [r7, #20]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d115      	bne.n	800818c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f8a9 	bl	80082c8 <USBH_MSC_DecodeCSW>
 8008176:	4603      	mov	r3, r0
 8008178:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800817a:	7d7b      	ldrb	r3, [r7, #21]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008184:	e068      	b.n	8008258 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008186:	2302      	movs	r3, #2
 8008188:	75fb      	strb	r3, [r7, #23]
      break;
 800818a:	e065      	b.n	8008258 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800818c:	7d3b      	ldrb	r3, [r7, #20]
 800818e:	2b05      	cmp	r3, #5
 8008190:	d162      	bne.n	8008258 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2209      	movs	r2, #9
 8008196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800819a:	e05d      	b.n	8008258 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	2200      	movs	r2, #0
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f864 	bl	8008270 <USBH_MSC_BOT_Abort>
 80081a8:	4603      	mov	r3, r0
 80081aa:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80081ac:	7dbb      	ldrb	r3, [r7, #22]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2207      	movs	r2, #7
 80081b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80081ba:	e04f      	b.n	800825c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80081bc:	7dbb      	ldrb	r3, [r7, #22]
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d14c      	bne.n	800825c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	220b      	movs	r2, #11
 80081c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081ca:	e047      	b.n	800825c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	2201      	movs	r2, #1
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f84c 	bl	8008270 <USBH_MSC_BOT_Abort>
 80081d8:	4603      	mov	r3, r0
 80081da:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80081dc:	7dbb      	ldrb	r3, [r7, #22]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11d      	bne.n	800821e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	795b      	ldrb	r3, [r3, #5]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f002 f9d1 	bl	800a590 <USBH_LL_GetToggle>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	7959      	ldrb	r1, [r3, #5]
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	f1c3 0301 	rsb	r3, r3, #1
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	461a      	mov	r2, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f002 f995 	bl	800a530 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	791b      	ldrb	r3, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f002 f98e 	bl	800a530 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2209      	movs	r2, #9
 8008218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800821c:	e020      	b.n	8008260 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800821e:	7dbb      	ldrb	r3, [r7, #22]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d11d      	bne.n	8008260 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	220b      	movs	r2, #11
 8008228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800822c:	e018      	b.n	8008260 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fdf2 	bl	8007e18 <USBH_MSC_BOT_REQ_Reset>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d112      	bne.n	8008264 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008246:	e00d      	b.n	8008264 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008248:	bf00      	nop
 800824a:	e00c      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>
      break;
 800824c:	bf00      	nop
 800824e:	e00a      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>
      break;
 8008250:	bf00      	nop
 8008252:	e008      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>
      break;
 8008254:	bf00      	nop
 8008256:	e006      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>
      break;
 8008258:	bf00      	nop
 800825a:	e004      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>
      break;
 800825c:	bf00      	nop
 800825e:	e002      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>
      break;
 8008260:	bf00      	nop
 8008262:	e000      	b.n	8008266 <USBH_MSC_BOT_Process+0x392>
      break;
 8008264:	bf00      	nop
  }
  return status;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
 800827c:	4613      	mov	r3, r2
 800827e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008280:	2302      	movs	r3, #2
 8008282:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800828e:	78bb      	ldrb	r3, [r7, #2]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <USBH_MSC_BOT_Abort+0x2a>
 8008294:	2b01      	cmp	r3, #1
 8008296:	d009      	beq.n	80082ac <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008298:	e011      	b.n	80082be <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	79db      	ldrb	r3, [r3, #7]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f99c 	bl	80095de <USBH_ClrFeature>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73fb      	strb	r3, [r7, #15]
      break;
 80082aa:	e008      	b.n	80082be <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	799b      	ldrb	r3, [r3, #6]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 f993 	bl	80095de <USBH_ClrFeature>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
      break;
 80082bc:	bf00      	nop
  }
  return status;
 80082be:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80082da:	2301      	movs	r3, #1
 80082dc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	791b      	ldrb	r3, [r3, #4]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f002 f867 	bl	800a3b8 <USBH_LL_GetLastXferSize>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b0d      	cmp	r3, #13
 80082ee:	d002      	beq.n	80082f6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80082f0:	2302      	movs	r3, #2
 80082f2:	73fb      	strb	r3, [r7, #15]
 80082f4:	e024      	b.n	8008340 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fa:	4a14      	ldr	r2, [pc, #80]	; (800834c <USBH_MSC_DecodeCSW+0x84>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d11d      	bne.n	800833c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008308:	429a      	cmp	r2, r3
 800830a:	d119      	bne.n	8008340 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
 800831a:	e011      	b.n	8008340 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008322:	2b01      	cmp	r3, #1
 8008324:	d102      	bne.n	800832c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008326:	2301      	movs	r3, #1
 8008328:	73fb      	strb	r3, [r7, #15]
 800832a:	e009      	b.n	8008340 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008332:	2b02      	cmp	r3, #2
 8008334:	d104      	bne.n	8008340 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008336:	2302      	movs	r3, #2
 8008338:	73fb      	strb	r3, [r7, #15]
 800833a:	e001      	b.n	8008340 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800833c:	2302      	movs	r3, #2
 800833e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	53425355 	.word	0x53425355

08008350 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800835c:	2302      	movs	r3, #2
 800835e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008370:	2b01      	cmp	r3, #1
 8008372:	d002      	beq.n	800837a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008374:	2b02      	cmp	r3, #2
 8008376:	d021      	beq.n	80083bc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008378:	e028      	b.n	80083cc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	220a      	movs	r2, #10
 800838c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	3363      	adds	r3, #99	; 0x63
 8008394:	2210      	movs	r2, #16
 8008396:	2100      	movs	r1, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f002 f9c3 	bl	800a724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2202      	movs	r2, #2
 80083b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80083b6:	2301      	movs	r3, #1
 80083b8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ba:	e007      	b.n	80083cc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff fd87 	bl	8007ed4 <USBH_MSC_BOT_Process>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ca:	bf00      	nop
  }

  return error;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b086      	sub	sp, #24
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	460b      	mov	r3, r1
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80083e4:	2301      	movs	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d002      	beq.n	8008402 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d027      	beq.n	8008450 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008400:	e05f      	b.n	80084c2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2208      	movs	r2, #8
 8008406:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	2280      	movs	r2, #128	; 0x80
 800840c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	220a      	movs	r2, #10
 8008414:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	3363      	adds	r3, #99	; 0x63
 800841c:	2210      	movs	r2, #16
 800841e:	2100      	movs	r1, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f002 f97f 	bl	800a724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2225      	movs	r2, #37	; 0x25
 800842a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2202      	movs	r2, #2
 800843a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f103 0210 	add.w	r2, r3, #16
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800844a:	2301      	movs	r3, #1
 800844c:	75fb      	strb	r3, [r7, #23]
      break;
 800844e:	e038      	b.n	80084c2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008450:	7afb      	ldrb	r3, [r7, #11]
 8008452:	4619      	mov	r1, r3
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f7ff fd3d 	bl	8007ed4 <USBH_MSC_BOT_Process>
 800845a:	4603      	mov	r3, r0
 800845c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d12d      	bne.n	80084c0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800846a:	3303      	adds	r3, #3
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008476:	3302      	adds	r3, #2
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008484:	3301      	adds	r3, #1
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800848a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	061b      	lsls	r3, r3, #24
 8008496:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a2:	3307      	adds	r3, #7
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ae:	3306      	adds	r3, #6
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	021b      	lsls	r3, r3, #8
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	4313      	orrs	r3, r2
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	809a      	strh	r2, [r3, #4]
      break;
 80084c0:	bf00      	nop
  }

  return error;
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	460b      	mov	r3, r1
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80084da:	2302      	movs	r3, #2
 80084dc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d002      	beq.n	80084f8 <USBH_MSC_SCSI_Inquiry+0x2c>
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d03d      	beq.n	8008572 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80084f6:	e089      	b.n	800860c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2224      	movs	r2, #36	; 0x24
 80084fc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2280      	movs	r2, #128	; 0x80
 8008502:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	220a      	movs	r2, #10
 800850a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	3363      	adds	r3, #99	; 0x63
 8008512:	220a      	movs	r2, #10
 8008514:	2100      	movs	r1, #0
 8008516:	4618      	mov	r0, r3
 8008518:	f002 f904 	bl	800a724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	2212      	movs	r2, #18
 8008520:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	015b      	lsls	r3, r3, #5
 8008528:	b2da      	uxtb	r2, r3
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	2224      	movs	r2, #36	; 0x24
 8008544:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f103 0210 	add.w	r2, r3, #16
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800856c:	2301      	movs	r3, #1
 800856e:	75fb      	strb	r3, [r7, #23]
      break;
 8008570:	e04c      	b.n	800860c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008572:	7afb      	ldrb	r3, [r7, #11]
 8008574:	4619      	mov	r1, r3
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7ff fcac 	bl	8007ed4 <USBH_MSC_BOT_Process>
 800857c:	4603      	mov	r3, r0
 800857e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d141      	bne.n	800860a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008586:	2222      	movs	r2, #34	; 0x22
 8008588:	2100      	movs	r1, #0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f002 f8ca 	bl	800a724 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	b2da      	uxtb	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	095b      	lsrs	r3, r3, #5
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b8:	3301      	adds	r3, #1
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b25b      	sxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da03      	bge.n	80085ca <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	709a      	strb	r2, [r3, #2]
 80085c8:	e002      	b.n	80085d0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	1cd8      	adds	r0, r3, #3
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085da:	3308      	adds	r3, #8
 80085dc:	2208      	movs	r2, #8
 80085de:	4619      	mov	r1, r3
 80085e0:	f002 f892 	bl	800a708 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f103 000c 	add.w	r0, r3, #12
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f0:	3310      	adds	r3, #16
 80085f2:	2210      	movs	r2, #16
 80085f4:	4619      	mov	r1, r3
 80085f6:	f002 f887 	bl	800a708 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	331d      	adds	r3, #29
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008604:	3220      	adds	r2, #32
 8008606:	6812      	ldr	r2, [r2, #0]
 8008608:	601a      	str	r2, [r3, #0]
      break;
 800860a:	bf00      	nop
  }

  return error;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b086      	sub	sp, #24
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	460b      	mov	r3, r1
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008624:	2302      	movs	r3, #2
 8008626:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008638:	2b01      	cmp	r3, #1
 800863a:	d002      	beq.n	8008642 <USBH_MSC_SCSI_RequestSense+0x2c>
 800863c:	2b02      	cmp	r3, #2
 800863e:	d03d      	beq.n	80086bc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008640:	e05d      	b.n	80086fe <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	220e      	movs	r2, #14
 8008646:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2280      	movs	r2, #128	; 0x80
 800864c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	220a      	movs	r2, #10
 8008654:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	3363      	adds	r3, #99	; 0x63
 800865c:	2210      	movs	r2, #16
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f002 f85f 	bl	800a724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2203      	movs	r2, #3
 800866a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	015b      	lsls	r3, r3, #5
 8008672:	b2da      	uxtb	r2, r3
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	220e      	movs	r2, #14
 800868e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2202      	movs	r2, #2
 80086a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f103 0210 	add.w	r2, r3, #16
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80086b6:	2301      	movs	r3, #1
 80086b8:	75fb      	strb	r3, [r7, #23]
      break;
 80086ba:	e020      	b.n	80086fe <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	4619      	mov	r1, r3
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f7ff fc07 	bl	8007ed4 <USBH_MSC_BOT_Process>
 80086c6:	4603      	mov	r3, r0
 80086c8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d115      	bne.n	80086fc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086d6:	3302      	adds	r3, #2
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ea:	7b1a      	ldrb	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086f6:	7b5a      	ldrb	r2, [r3, #13]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	709a      	strb	r2, [r3, #2]
      break;
 80086fc:	bf00      	nop
  }

  return error;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	460b      	mov	r3, r1
 8008716:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008718:	2302      	movs	r3, #2
 800871a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800872c:	2b01      	cmp	r3, #1
 800872e:	d002      	beq.n	8008736 <USBH_MSC_SCSI_Write+0x2e>
 8008730:	2b02      	cmp	r3, #2
 8008732:	d047      	beq.n	80087c4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008734:	e04e      	b.n	80087d4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800873c:	461a      	mov	r2, r3
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	fb03 f202 	mul.w	r2, r3, r2
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	220a      	movs	r2, #10
 8008754:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	3363      	adds	r3, #99	; 0x63
 800875c:	2210      	movs	r2, #16
 800875e:	2100      	movs	r1, #0
 8008760:	4618      	mov	r0, r3
 8008762:	f001 ffdf 	bl	800a724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	222a      	movs	r2, #42	; 0x2a
 800876a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800876e:	79fa      	ldrb	r2, [r7, #7]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008776:	79ba      	ldrb	r2, [r7, #6]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800877e:	797a      	ldrb	r2, [r7, #5]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008786:	1d3b      	adds	r3, r7, #4
 8008788:	781a      	ldrb	r2, [r3, #0]
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008790:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800879a:	f107 0320 	add.w	r3, r7, #32
 800879e:	781a      	ldrb	r2, [r3, #0]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2202      	movs	r2, #2
 80087b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
      break;
 80087c2:	e007      	b.n	80087d4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80087c4:	7afb      	ldrb	r3, [r7, #11]
 80087c6:	4619      	mov	r1, r3
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff fb83 	bl	8007ed4 <USBH_MSC_BOT_Process>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]
      break;
 80087d2:	bf00      	nop
  }

  return error;
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	460b      	mov	r3, r1
 80087ec:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80087ee:	2302      	movs	r3, #2
 80087f0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008802:	2b01      	cmp	r3, #1
 8008804:	d002      	beq.n	800880c <USBH_MSC_SCSI_Read+0x2e>
 8008806:	2b02      	cmp	r3, #2
 8008808:	d047      	beq.n	800889a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800880a:	e04e      	b.n	80088aa <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008812:	461a      	mov	r2, r3
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	fb03 f202 	mul.w	r2, r3, r2
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2280      	movs	r2, #128	; 0x80
 8008822:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	220a      	movs	r2, #10
 800882a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	3363      	adds	r3, #99	; 0x63
 8008832:	2210      	movs	r2, #16
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f001 ff74 	bl	800a724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2228      	movs	r2, #40	; 0x28
 8008840:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008844:	79fa      	ldrb	r2, [r7, #7]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800884c:	79ba      	ldrb	r2, [r7, #6]
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008854:	797a      	ldrb	r2, [r7, #5]
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800885c:	1d3b      	adds	r3, r7, #4
 800885e:	781a      	ldrb	r2, [r3, #0]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008866:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008870:	f107 0320 	add.w	r3, r7, #32
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008894:	2301      	movs	r3, #1
 8008896:	75fb      	strb	r3, [r7, #23]
      break;
 8008898:	e007      	b.n	80088aa <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800889a:	7afb      	ldrb	r3, [r7, #11]
 800889c:	4619      	mov	r1, r3
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff fb18 	bl	8007ed4 <USBH_MSC_BOT_Process>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]
      break;
 80088a8:	bf00      	nop
  }

  return error;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80088c8:	2302      	movs	r3, #2
 80088ca:	e029      	b.n	8008920 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	79fa      	ldrb	r2, [r7, #7]
 80088d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f81f 	bl	8008928 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f001 fc97 	bl	800a24c <USBH_LL_Init>

  return USBH_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e009      	b.n	800894e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	33e0      	adds	r3, #224	; 0xe0
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	2200      	movs	r2, #0
 8008946:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b0e      	cmp	r3, #14
 8008952:	d9f2      	bls.n	800893a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008954:	2300      	movs	r3, #0
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e009      	b.n	800896e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3301      	adds	r3, #1
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008974:	d3f1      	bcc.n	800895a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2240      	movs	r2, #64	; 0x40
 800899a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d016      	beq.n	8008a12 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10e      	bne.n	8008a0c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80089f4:	1c59      	adds	r1, r3, #1
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	33de      	adds	r3, #222	; 0xde
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
 8008a0a:	e004      	b.n	8008a16 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	73fb      	strb	r3, [r7, #15]
 8008a10:	e001      	b.n	8008a16 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a12:	2302      	movs	r3, #2
 8008a14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d204      	bcs.n	8008a4a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	78fa      	ldrb	r2, [r7, #3]
 8008a44:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008a48:	e001      	b.n	8008a4e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	70fb      	strb	r3, [r7, #3]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70bb      	strb	r3, [r7, #2]
 8008a72:	4613      	mov	r3, r2
 8008a74:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a84:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a86:	e025      	b.n	8008ad4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	221a      	movs	r2, #26
 8008a8c:	fb02 f303 	mul.w	r3, r2, r3
 8008a90:	3308      	adds	r3, #8
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	4413      	add	r3, r2
 8008a96:	3302      	adds	r3, #2
 8008a98:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	795b      	ldrb	r3, [r3, #5]
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d002      	beq.n	8008aaa <USBH_FindInterface+0x4e>
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	2bff      	cmp	r3, #255	; 0xff
 8008aa8:	d111      	bne.n	8008ace <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008aae:	78ba      	ldrb	r2, [r7, #2]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d002      	beq.n	8008aba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ab4:	78bb      	ldrb	r3, [r7, #2]
 8008ab6:	2bff      	cmp	r3, #255	; 0xff
 8008ab8:	d109      	bne.n	8008ace <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008abe:	787a      	ldrb	r2, [r7, #1]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d002      	beq.n	8008aca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ac4:	787b      	ldrb	r3, [r7, #1]
 8008ac6:	2bff      	cmp	r3, #255	; 0xff
 8008ac8:	d101      	bne.n	8008ace <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	e006      	b.n	8008adc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d9d6      	bls.n	8008a88 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ada:	23ff      	movs	r3, #255	; 0xff
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 fbe9 	bl	800a2c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008af6:	2101      	movs	r1, #1
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 fd02 	bl	800a502 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af04      	add	r7, sp, #16
 8008b0e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b10:	2302      	movs	r3, #2
 8008b12:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d102      	bne.n	8008b2a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2203      	movs	r2, #3
 8008b28:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b0b      	cmp	r3, #11
 8008b32:	f200 81b3 	bhi.w	8008e9c <USBH_Process+0x394>
 8008b36:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <USBH_Process+0x34>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b6d 	.word	0x08008b6d
 8008b40:	08008b9f 	.word	0x08008b9f
 8008b44:	08008c07 	.word	0x08008c07
 8008b48:	08008e37 	.word	0x08008e37
 8008b4c:	08008e9d 	.word	0x08008e9d
 8008b50:	08008cab 	.word	0x08008cab
 8008b54:	08008ddd 	.word	0x08008ddd
 8008b58:	08008ce1 	.word	0x08008ce1
 8008b5c:	08008d01 	.word	0x08008d01
 8008b60:	08008d21 	.word	0x08008d21
 8008b64:	08008d4f 	.word	0x08008d4f
 8008b68:	08008e1f 	.word	0x08008e1f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 8193 	beq.w	8008ea0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008b80:	20c8      	movs	r0, #200	; 0xc8
 8008b82:	f001 fd35 	bl	800a5f0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f001 fbfb 	bl	800a382 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b9c:	e180      	b.n	8008ea0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d107      	bne.n	8008bb8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008bb6:	e182      	b.n	8008ebe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bc2:	d914      	bls.n	8008bee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008bca:	3301      	adds	r3, #1
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d903      	bls.n	8008be6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	220d      	movs	r2, #13
 8008be2:	701a      	strb	r2, [r3, #0]
      break;
 8008be4:	e16b      	b.n	8008ebe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	701a      	strb	r2, [r3, #0]
      break;
 8008bec:	e167      	b.n	8008ebe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008bf4:	f103 020a 	add.w	r2, r3, #10
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008bfe:	200a      	movs	r0, #10
 8008c00:	f001 fcf6 	bl	800a5f0 <USBH_Delay>
      break;
 8008c04:	e15b      	b.n	8008ebe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d005      	beq.n	8008c1c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c16:	2104      	movs	r1, #4
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c1c:	2064      	movs	r0, #100	; 0x64
 8008c1e:	f001 fce7 	bl	800a5f0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fb86 	bl	800a334 <USBH_LL_GetSpeed>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2205      	movs	r2, #5
 8008c36:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008c38:	2100      	movs	r1, #0
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 f92f 	bl	8009e9e <USBH_AllocPipe>
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008c48:	2180      	movs	r1, #128	; 0x80
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f927 	bl	8009e9e <USBH_AllocPipe>
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	7919      	ldrb	r1, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c6c:	b292      	uxth	r2, r2
 8008c6e:	9202      	str	r2, [sp, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	9201      	str	r2, [sp, #4]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4603      	mov	r3, r0
 8008c78:	2280      	movs	r2, #128	; 0x80
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f8e0 	bl	8009e40 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	7959      	ldrb	r1, [r3, #5]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c94:	b292      	uxth	r2, r2
 8008c96:	9202      	str	r2, [sp, #8]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	9201      	str	r2, [sp, #4]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 f8cc 	bl	8009e40 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ca8:	e109      	b.n	8008ebe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f90c 	bl	8008ec8 <USBH_HandleEnum>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f040 80f3 	bne.w	8008ea4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d103      	bne.n	8008cd8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008cd6:	e0e5      	b.n	8008ea4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2207      	movs	r2, #7
 8008cdc:	701a      	strb	r2, [r3, #0]
      break;
 8008cde:	e0e1      	b.n	8008ea4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 80de 	beq.w	8008ea8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008cfe:	e0d3      	b.n	8008ea8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fc20 	bl	8009550 <USBH_SetCfg>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f040 80ca 	bne.w	8008eac <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2209      	movs	r2, #9
 8008d1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d1e:	e0c5      	b.n	8008eac <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008d26:	f003 0320 	and.w	r3, r3, #32
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008d2e:	2101      	movs	r1, #1
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fc30 	bl	8009596 <USBH_SetFeature>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f040 80b9 	bne.w	8008eb0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	220a      	movs	r2, #10
 8008d42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d44:	e0b4      	b.n	8008eb0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	220a      	movs	r2, #10
 8008d4a:	701a      	strb	r2, [r3, #0]
      break;
 8008d4c:	e0b0      	b.n	8008eb0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80ad 	beq.w	8008eb4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]
 8008d66:	e016      	b.n	8008d96 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008d68:	7bfa      	ldrb	r2, [r7, #15]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	32de      	adds	r2, #222	; 0xde
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	791a      	ldrb	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d108      	bne.n	8008d90 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008d7e:	7bfa      	ldrb	r2, [r7, #15]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	32de      	adds	r2, #222	; 0xde
 8008d84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008d8e:	e005      	b.n	8008d9c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	3301      	adds	r3, #1
 8008d94:	73fb      	strb	r3, [r7, #15]
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0e5      	beq.n	8008d68 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d016      	beq.n	8008dd4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	4798      	blx	r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d109      	bne.n	8008dcc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2206      	movs	r2, #6
 8008dbc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dc4:	2103      	movs	r1, #3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008dca:	e073      	b.n	8008eb4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	220d      	movs	r2, #13
 8008dd0:	701a      	strb	r2, [r3, #0]
      break;
 8008dd2:	e06f      	b.n	8008eb4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	220d      	movs	r2, #13
 8008dd8:	701a      	strb	r2, [r3, #0]
      break;
 8008dda:	e06b      	b.n	8008eb4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d017      	beq.n	8008e16 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	4798      	blx	r3
 8008df2:	4603      	mov	r3, r0
 8008df4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d103      	bne.n	8008e06 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	220b      	movs	r2, #11
 8008e02:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e04:	e058      	b.n	8008eb8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d154      	bne.n	8008eb8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	220d      	movs	r2, #13
 8008e12:	701a      	strb	r2, [r3, #0]
      break;
 8008e14:	e050      	b.n	8008eb8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	220d      	movs	r2, #13
 8008e1a:	701a      	strb	r2, [r3, #0]
      break;
 8008e1c:	e04c      	b.n	8008eb8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d049      	beq.n	8008ebc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4798      	blx	r3
      }
      break;
 8008e34:	e042      	b.n	8008ebc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fd72 	bl	8008928 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e72:	2105      	movs	r1, #5
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d107      	bne.n	8008e94 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fe2b 	bl	8008ae8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e92:	e014      	b.n	8008ebe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fa17 	bl	800a2c8 <USBH_LL_Start>
      break;
 8008e9a:	e010      	b.n	8008ebe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e9c:	bf00      	nop
 8008e9e:	e00e      	b.n	8008ebe <USBH_Process+0x3b6>
      break;
 8008ea0:	bf00      	nop
 8008ea2:	e00c      	b.n	8008ebe <USBH_Process+0x3b6>
      break;
 8008ea4:	bf00      	nop
 8008ea6:	e00a      	b.n	8008ebe <USBH_Process+0x3b6>
    break;
 8008ea8:	bf00      	nop
 8008eaa:	e008      	b.n	8008ebe <USBH_Process+0x3b6>
      break;
 8008eac:	bf00      	nop
 8008eae:	e006      	b.n	8008ebe <USBH_Process+0x3b6>
      break;
 8008eb0:	bf00      	nop
 8008eb2:	e004      	b.n	8008ebe <USBH_Process+0x3b6>
      break;
 8008eb4:	bf00      	nop
 8008eb6:	e002      	b.n	8008ebe <USBH_Process+0x3b6>
      break;
 8008eb8:	bf00      	nop
 8008eba:	e000      	b.n	8008ebe <USBH_Process+0x3b6>
      break;
 8008ebc:	bf00      	nop
  }
  return USBH_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af04      	add	r7, sp, #16
 8008ece:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b07      	cmp	r3, #7
 8008ede:	f200 81c1 	bhi.w	8009264 <USBH_HandleEnum+0x39c>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <USBH_HandleEnum+0x20>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f09 	.word	0x08008f09
 8008eec:	08008fc7 	.word	0x08008fc7
 8008ef0:	08009031 	.word	0x08009031
 8008ef4:	080090bf 	.word	0x080090bf
 8008ef8:	08009129 	.word	0x08009129
 8008efc:	08009199 	.word	0x08009199
 8008f00:	080091df 	.word	0x080091df
 8008f04:	08009225 	.word	0x08009225
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f08:	2108      	movs	r1, #8
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa50 	bl	80093b0 <USBH_Get_DevDesc>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d130      	bne.n	8008f7c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	7919      	ldrb	r1, [r3, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f3e:	b292      	uxth	r2, r2
 8008f40:	9202      	str	r2, [sp, #8]
 8008f42:	2200      	movs	r2, #0
 8008f44:	9201      	str	r2, [sp, #4]
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2280      	movs	r2, #128	; 0x80
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 ff77 	bl	8009e40 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7959      	ldrb	r1, [r3, #5]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f66:	b292      	uxth	r2, r2
 8008f68:	9202      	str	r2, [sp, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	9201      	str	r2, [sp, #4]
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	4603      	mov	r3, r0
 8008f72:	2200      	movs	r2, #0
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 ff63 	bl	8009e40 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f7a:	e175      	b.n	8009268 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	f040 8172 	bne.w	8009268 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d903      	bls.n	8008fa6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	220d      	movs	r2, #13
 8008fa2:	701a      	strb	r2, [r3, #0]
      break;
 8008fa4:	e160      	b.n	8009268 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	795b      	ldrb	r3, [r3, #5]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 ff97 	bl	8009ee0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	791b      	ldrb	r3, [r3, #4]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 ff91 	bl	8009ee0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
      break;
 8008fc4:	e150      	b.n	8009268 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008fc6:	2112      	movs	r1, #18
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f9f1 	bl	80093b0 <USBH_Get_DevDesc>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d103      	bne.n	8008fe0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fde:	e145      	b.n	800926c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	f040 8142 	bne.w	800926c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008fee:	3301      	adds	r3, #1
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d903      	bls.n	800900a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	220d      	movs	r2, #13
 8009006:	701a      	strb	r2, [r3, #0]
      break;
 8009008:	e130      	b.n	800926c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	795b      	ldrb	r3, [r3, #5]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 ff65 	bl	8009ee0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 ff5f 	bl	8009ee0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
      break;
 800902e:	e11d      	b.n	800926c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009030:	2101      	movs	r1, #1
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa68 	bl	8009508 <USBH_SetAddress>
 8009038:	4603      	mov	r3, r0
 800903a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d132      	bne.n	80090a8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009042:	2002      	movs	r0, #2
 8009044:	f001 fad4 	bl	800a5f0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2203      	movs	r2, #3
 8009054:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	7919      	ldrb	r1, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800906a:	b292      	uxth	r2, r2
 800906c:	9202      	str	r2, [sp, #8]
 800906e:	2200      	movs	r2, #0
 8009070:	9201      	str	r2, [sp, #4]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	4603      	mov	r3, r0
 8009076:	2280      	movs	r2, #128	; 0x80
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fee1 	bl	8009e40 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7959      	ldrb	r1, [r3, #5]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009092:	b292      	uxth	r2, r2
 8009094:	9202      	str	r2, [sp, #8]
 8009096:	2200      	movs	r2, #0
 8009098:	9201      	str	r2, [sp, #4]
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	4603      	mov	r3, r0
 800909e:	2200      	movs	r2, #0
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fecd 	bl	8009e40 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090a6:	e0e3      	b.n	8009270 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	f040 80e0 	bne.w	8009270 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	220d      	movs	r2, #13
 80090b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	705a      	strb	r2, [r3, #1]
      break;
 80090bc:	e0d8      	b.n	8009270 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80090be:	2109      	movs	r1, #9
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f99d 	bl	8009400 <USBH_Get_CfgDesc>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2204      	movs	r2, #4
 80090d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090d6:	e0cd      	b.n	8009274 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b03      	cmp	r3, #3
 80090dc:	f040 80ca 	bne.w	8009274 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090e6:	3301      	adds	r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d903      	bls.n	8009102 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	220d      	movs	r2, #13
 80090fe:	701a      	strb	r2, [r3, #0]
      break;
 8009100:	e0b8      	b.n	8009274 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	795b      	ldrb	r3, [r3, #5]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fee9 	bl	8009ee0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	791b      	ldrb	r3, [r3, #4]
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fee3 	bl	8009ee0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
      break;
 8009126:	e0a5      	b.n	8009274 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f965 	bl	8009400 <USBH_Get_CfgDesc>
 8009136:	4603      	mov	r3, r0
 8009138:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2205      	movs	r2, #5
 8009144:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009146:	e097      	b.n	8009278 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2b03      	cmp	r3, #3
 800914c:	f040 8094 	bne.w	8009278 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009156:	3301      	adds	r3, #1
 8009158:	b2da      	uxtb	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009166:	2b03      	cmp	r3, #3
 8009168:	d903      	bls.n	8009172 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	220d      	movs	r2, #13
 800916e:	701a      	strb	r2, [r3, #0]
      break;
 8009170:	e082      	b.n	8009278 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	795b      	ldrb	r3, [r3, #5]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 feb1 	bl	8009ee0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	791b      	ldrb	r3, [r3, #4]
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 feab 	bl	8009ee0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	701a      	strb	r2, [r3, #0]
      break;
 8009196:	e06f      	b.n	8009278 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d019      	beq.n	80091d6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80091ae:	23ff      	movs	r3, #255	; 0xff
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f949 	bl	8009448 <USBH_Get_StringDesc>
 80091b6:	4603      	mov	r3, r0
 80091b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2206      	movs	r2, #6
 80091c4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80091c6:	e059      	b.n	800927c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d156      	bne.n	800927c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2206      	movs	r2, #6
 80091d2:	705a      	strb	r2, [r3, #1]
      break;
 80091d4:	e052      	b.n	800927c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2206      	movs	r2, #6
 80091da:	705a      	strb	r2, [r3, #1]
      break;
 80091dc:	e04e      	b.n	800927c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d019      	beq.n	800921c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091f4:	23ff      	movs	r3, #255	; 0xff
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f926 	bl	8009448 <USBH_Get_StringDesc>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d103      	bne.n	800920e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2207      	movs	r2, #7
 800920a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800920c:	e038      	b.n	8009280 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d135      	bne.n	8009280 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2207      	movs	r2, #7
 8009218:	705a      	strb	r2, [r3, #1]
      break;
 800921a:	e031      	b.n	8009280 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2207      	movs	r2, #7
 8009220:	705a      	strb	r2, [r3, #1]
      break;
 8009222:	e02d      	b.n	8009280 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800922a:	2b00      	cmp	r3, #0
 800922c:	d017      	beq.n	800925e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800923a:	23ff      	movs	r3, #255	; 0xff
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f903 	bl	8009448 <USBH_Get_StringDesc>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009250:	e018      	b.n	8009284 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d115      	bne.n	8009284 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
      break;
 800925c:	e012      	b.n	8009284 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]
      break;
 8009262:	e00f      	b.n	8009284 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009264:	bf00      	nop
 8009266:	e00e      	b.n	8009286 <USBH_HandleEnum+0x3be>
      break;
 8009268:	bf00      	nop
 800926a:	e00c      	b.n	8009286 <USBH_HandleEnum+0x3be>
      break;
 800926c:	bf00      	nop
 800926e:	e00a      	b.n	8009286 <USBH_HandleEnum+0x3be>
      break;
 8009270:	bf00      	nop
 8009272:	e008      	b.n	8009286 <USBH_HandleEnum+0x3be>
      break;
 8009274:	bf00      	nop
 8009276:	e006      	b.n	8009286 <USBH_HandleEnum+0x3be>
      break;
 8009278:	bf00      	nop
 800927a:	e004      	b.n	8009286 <USBH_HandleEnum+0x3be>
      break;
 800927c:	bf00      	nop
 800927e:	e002      	b.n	8009286 <USBH_HandleEnum+0x3be>
      break;
 8009280:	bf00      	nop
 8009282:	e000      	b.n	8009286 <USBH_HandleEnum+0x3be>
      break;
 8009284:	bf00      	nop
  }
  return Status;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f804 	bl	80092d2 <USBH_HandleSof>
}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b0b      	cmp	r3, #11
 80092e2:	d10a      	bne.n	80092fa <USBH_HandleSof+0x28>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
  }
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009312:	bf00      	nop
}
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800932e:	bf00      	nop
}
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 ffb8 	bl	800a2fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	791b      	ldrb	r3, [r3, #4]
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fda3 	bl	8009ee0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	795b      	ldrb	r3, [r3, #5]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fd9d 	bl	8009ee0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	4613      	mov	r3, r2
 80093ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093ce:	2100      	movs	r1, #0
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f864 	bl	800949e <USBH_GetDescriptor>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10a      	bne.n	80093f6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80093ec:	78fa      	ldrb	r2, [r7, #3]
 80093ee:	b292      	uxth	r2, r2
 80093f0:	4619      	mov	r1, r3
 80093f2:	f000 f918 	bl	8009626 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af02      	add	r7, sp, #8
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	331c      	adds	r3, #28
 8009410:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009412:	887b      	ldrh	r3, [r7, #2]
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800941c:	2100      	movs	r1, #0
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f83d 	bl	800949e <USBH_GetDescriptor>
 8009424:	4603      	mov	r3, r0
 8009426:	72fb      	strb	r3, [r7, #11]
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d107      	bne.n	800943e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009434:	887a      	ldrh	r2, [r7, #2]
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 f964 	bl	8009706 <USBH_ParseCfgDesc>
  }

  return status;
 800943e:	7afb      	ldrb	r3, [r7, #11]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af02      	add	r7, sp, #8
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	607a      	str	r2, [r7, #4]
 8009452:	461a      	mov	r2, r3
 8009454:	460b      	mov	r3, r1
 8009456:	72fb      	strb	r3, [r7, #11]
 8009458:	4613      	mov	r3, r2
 800945a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	b29b      	uxth	r3, r3
 8009460:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009464:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800946c:	893b      	ldrh	r3, [r7, #8]
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	460b      	mov	r3, r1
 8009472:	2100      	movs	r1, #0
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 f812 	bl	800949e <USBH_GetDescriptor>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d107      	bne.n	8009494 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800948a:	893a      	ldrh	r2, [r7, #8]
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fa37 	bl	8009902 <USBH_ParseStringDesc>
  }

  return status;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	60f8      	str	r0, [r7, #12]
 80094a6:	607b      	str	r3, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	72fb      	strb	r3, [r7, #11]
 80094ac:	4613      	mov	r3, r2
 80094ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	789b      	ldrb	r3, [r3, #2]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d11c      	bne.n	80094f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2206      	movs	r2, #6
 80094c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	893a      	ldrh	r2, [r7, #8]
 80094ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80094d0:	893b      	ldrh	r3, [r7, #8]
 80094d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094da:	d104      	bne.n	80094e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f240 4209 	movw	r2, #1033	; 0x409
 80094e2:	829a      	strh	r2, [r3, #20]
 80094e4:	e002      	b.n	80094ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8b3a      	ldrh	r2, [r7, #24]
 80094f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80094f2:	8b3b      	ldrh	r3, [r7, #24]
 80094f4:	461a      	mov	r2, r3
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 fa50 	bl	800999e <USBH_CtlReq>
 80094fe:	4603      	mov	r3, r0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	789b      	ldrb	r3, [r3, #2]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d10f      	bne.n	800953c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2205      	movs	r2, #5
 8009526:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009528:	78fb      	ldrb	r3, [r7, #3]
 800952a:	b29a      	uxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800953c:	2200      	movs	r2, #0
 800953e:	2100      	movs	r1, #0
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa2c 	bl	800999e <USBH_CtlReq>
 8009546:	4603      	mov	r3, r0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	789b      	ldrb	r3, [r3, #2]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d10e      	bne.n	8009582 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2209      	movs	r2, #9
 800956e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	887a      	ldrh	r2, [r7, #2]
 8009574:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009582:	2200      	movs	r2, #0
 8009584:	2100      	movs	r1, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fa09 	bl	800999e <USBH_CtlReq>
 800958c:	4603      	mov	r3, r0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	789b      	ldrb	r3, [r3, #2]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d10f      	bne.n	80095ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2203      	movs	r2, #3
 80095b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80095ca:	2200      	movs	r2, #0
 80095cc:	2100      	movs	r1, #0
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f9e5 	bl	800999e <USBH_CtlReq>
 80095d4:	4603      	mov	r3, r0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	460b      	mov	r3, r1
 80095e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	789b      	ldrb	r3, [r3, #2]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d10f      	bne.n	8009612 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	b29a      	uxth	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009612:	2200      	movs	r2, #0
 8009614:	2100      	movs	r1, #0
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f9c1 	bl	800999e <USBH_CtlReq>
 800961c:	4603      	mov	r3, r0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009626:	b480      	push	{r7}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	4613      	mov	r3, r2
 8009632:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	781a      	ldrb	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	785a      	ldrb	r2, [r3, #1]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	3302      	adds	r3, #2
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	b29a      	uxth	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	3303      	adds	r3, #3
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	b29b      	uxth	r3, r3
 8009654:	021b      	lsls	r3, r3, #8
 8009656:	b29b      	uxth	r3, r3
 8009658:	4313      	orrs	r3, r2
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	791a      	ldrb	r2, [r3, #4]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	795a      	ldrb	r2, [r3, #5]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	799a      	ldrb	r2, [r3, #6]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	79da      	ldrb	r2, [r3, #7]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009680:	88fb      	ldrh	r3, [r7, #6]
 8009682:	2b08      	cmp	r3, #8
 8009684:	d939      	bls.n	80096fa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	3308      	adds	r3, #8
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	b29a      	uxth	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	3309      	adds	r3, #9
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	b29b      	uxth	r3, r3
 800969a:	4313      	orrs	r3, r2
 800969c:	b29a      	uxth	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	330a      	adds	r3, #10
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	330b      	adds	r3, #11
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	021b      	lsls	r3, r3, #8
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	330c      	adds	r3, #12
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	330d      	adds	r3, #13
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	7b9a      	ldrb	r2, [r3, #14]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	7bda      	ldrb	r2, [r3, #15]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	7c1a      	ldrb	r2, [r3, #16]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	7c5a      	ldrb	r2, [r3, #17]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	745a      	strb	r2, [r3, #17]
  }
}
 80096fa:	bf00      	nop
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b08a      	sub	sp, #40	; 0x28
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	4613      	mov	r3, r2
 8009712:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	781a      	ldrb	r2, [r3, #0]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	785a      	ldrb	r2, [r3, #1]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	3302      	adds	r3, #2
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	b29a      	uxth	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	3303      	adds	r3, #3
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b29b      	uxth	r3, r3
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	b29b      	uxth	r3, r3
 800974c:	4313      	orrs	r3, r2
 800974e:	b29a      	uxth	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	791a      	ldrb	r2, [r3, #4]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	795a      	ldrb	r2, [r3, #5]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	799a      	ldrb	r2, [r3, #6]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	79da      	ldrb	r2, [r3, #7]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	7a1a      	ldrb	r2, [r3, #8]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800977c:	88fb      	ldrh	r3, [r7, #6]
 800977e:	2b09      	cmp	r3, #9
 8009780:	d95f      	bls.n	8009842 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009782:	2309      	movs	r3, #9
 8009784:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009786:	2300      	movs	r3, #0
 8009788:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800978a:	e051      	b.n	8009830 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800978c:	f107 0316 	add.w	r3, r7, #22
 8009790:	4619      	mov	r1, r3
 8009792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009794:	f000 f8e8 	bl	8009968 <USBH_GetNextDesc>
 8009798:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d146      	bne.n	8009830 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80097a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097a6:	221a      	movs	r2, #26
 80097a8:	fb02 f303 	mul.w	r3, r2, r3
 80097ac:	3308      	adds	r3, #8
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	4413      	add	r3, r2
 80097b2:	3302      	adds	r3, #2
 80097b4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80097b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097b8:	69f8      	ldr	r0, [r7, #28]
 80097ba:	f000 f846 	bl	800984a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80097c8:	e022      	b.n	8009810 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80097ca:	f107 0316 	add.w	r3, r7, #22
 80097ce:	4619      	mov	r1, r3
 80097d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097d2:	f000 f8c9 	bl	8009968 <USBH_GetNextDesc>
 80097d6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	785b      	ldrb	r3, [r3, #1]
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d117      	bne.n	8009810 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80097e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80097e8:	3201      	adds	r2, #1
 80097ea:	00d2      	lsls	r2, r2, #3
 80097ec:	211a      	movs	r1, #26
 80097ee:	fb01 f303 	mul.w	r3, r1, r3
 80097f2:	4413      	add	r3, r2
 80097f4:	3308      	adds	r3, #8
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	3304      	adds	r3, #4
 80097fc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80097fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009800:	69b8      	ldr	r0, [r7, #24]
 8009802:	f000 f851 	bl	80098a8 <USBH_ParseEPDesc>
            ep_ix++;
 8009806:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800980a:	3301      	adds	r3, #1
 800980c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	791b      	ldrb	r3, [r3, #4]
 8009814:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009818:	429a      	cmp	r2, r3
 800981a:	d204      	bcs.n	8009826 <USBH_ParseCfgDesc+0x120>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	885a      	ldrh	r2, [r3, #2]
 8009820:	8afb      	ldrh	r3, [r7, #22]
 8009822:	429a      	cmp	r2, r3
 8009824:	d8d1      	bhi.n	80097ca <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009826:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800982a:	3301      	adds	r3, #1
 800982c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009834:	2b01      	cmp	r3, #1
 8009836:	d804      	bhi.n	8009842 <USBH_ParseCfgDesc+0x13c>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	885a      	ldrh	r2, [r3, #2]
 800983c:	8afb      	ldrh	r3, [r7, #22]
 800983e:	429a      	cmp	r2, r3
 8009840:	d8a4      	bhi.n	800978c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009842:	bf00      	nop
 8009844:	3728      	adds	r7, #40	; 0x28
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	781a      	ldrb	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	785a      	ldrb	r2, [r3, #1]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	789a      	ldrb	r2, [r3, #2]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	78da      	ldrb	r2, [r3, #3]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	791a      	ldrb	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	795a      	ldrb	r2, [r3, #5]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	799a      	ldrb	r2, [r3, #6]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	79da      	ldrb	r2, [r3, #7]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	7a1a      	ldrb	r2, [r3, #8]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	721a      	strb	r2, [r3, #8]
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781a      	ldrb	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	785a      	ldrb	r2, [r3, #1]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	789a      	ldrb	r2, [r3, #2]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	78da      	ldrb	r2, [r3, #3]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	3304      	adds	r3, #4
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	b29a      	uxth	r2, r3
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	3305      	adds	r3, #5
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	4313      	orrs	r3, r2
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	799a      	ldrb	r2, [r3, #6]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	719a      	strb	r2, [r3, #6]
}
 80098f6:	bf00      	nop
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009902:	b480      	push	{r7}
 8009904:	b087      	sub	sp, #28
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	4613      	mov	r3, r2
 800990e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3301      	adds	r3, #1
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b03      	cmp	r3, #3
 8009918:	d120      	bne.n	800995c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	1e9a      	subs	r2, r3, #2
 8009920:	88fb      	ldrh	r3, [r7, #6]
 8009922:	4293      	cmp	r3, r2
 8009924:	bf28      	it	cs
 8009926:	4613      	movcs	r3, r2
 8009928:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3302      	adds	r3, #2
 800992e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009930:	2300      	movs	r3, #0
 8009932:	82fb      	strh	r3, [r7, #22]
 8009934:	e00b      	b.n	800994e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009936:	8afb      	ldrh	r3, [r7, #22]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4413      	add	r3, r2
 800993c:	781a      	ldrb	r2, [r3, #0]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	3301      	adds	r3, #1
 8009946:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009948:	8afb      	ldrh	r3, [r7, #22]
 800994a:	3302      	adds	r3, #2
 800994c:	82fb      	strh	r3, [r7, #22]
 800994e:	8afa      	ldrh	r2, [r7, #22]
 8009950:	8abb      	ldrh	r3, [r7, #20]
 8009952:	429a      	cmp	r2, r3
 8009954:	d3ef      	bcc.n	8009936 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2200      	movs	r2, #0
 800995a:	701a      	strb	r2, [r3, #0]
  }
}
 800995c:	bf00      	nop
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	881a      	ldrh	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	4413      	add	r3, r2
 800997e:	b29a      	uxth	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4413      	add	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009990:	68fb      	ldr	r3, [r7, #12]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b086      	sub	sp, #24
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	4613      	mov	r3, r2
 80099aa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80099ac:	2301      	movs	r3, #1
 80099ae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	789b      	ldrb	r3, [r3, #2]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d002      	beq.n	80099be <USBH_CtlReq+0x20>
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d00f      	beq.n	80099dc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80099bc:	e027      	b.n	8009a0e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	88fa      	ldrh	r2, [r7, #6]
 80099c8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2202      	movs	r2, #2
 80099d4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
      break;
 80099da:	e018      	b.n	8009a0e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 f81b 	bl	8009a18 <USBH_HandleControl>
 80099e2:	4603      	mov	r3, r0
 80099e4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <USBH_CtlReq+0x54>
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d106      	bne.n	8009a00 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	761a      	strb	r2, [r3, #24]
      break;
 80099fe:	e005      	b.n	8009a0c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d102      	bne.n	8009a0c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	709a      	strb	r2, [r3, #2]
      break;
 8009a0c:	bf00      	nop
  }
  return status;
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a20:	2301      	movs	r3, #1
 8009a22:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7e1b      	ldrb	r3, [r3, #24]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	2b0a      	cmp	r3, #10
 8009a30:	f200 8156 	bhi.w	8009ce0 <USBH_HandleControl+0x2c8>
 8009a34:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <USBH_HandleControl+0x24>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009a69 	.word	0x08009a69
 8009a40:	08009a83 	.word	0x08009a83
 8009a44:	08009aed 	.word	0x08009aed
 8009a48:	08009b13 	.word	0x08009b13
 8009a4c:	08009b4b 	.word	0x08009b4b
 8009a50:	08009b75 	.word	0x08009b75
 8009a54:	08009bc7 	.word	0x08009bc7
 8009a58:	08009be9 	.word	0x08009be9
 8009a5c:	08009c25 	.word	0x08009c25
 8009a60:	08009c4b 	.word	0x08009c4b
 8009a64:	08009c89 	.word	0x08009c89
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f103 0110 	add.w	r1, r3, #16
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	795b      	ldrb	r3, [r3, #5]
 8009a72:	461a      	mov	r2, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f943 	bl	8009d00 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	761a      	strb	r2, [r3, #24]
      break;
 8009a80:	e139      	b.n	8009cf6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	795b      	ldrb	r3, [r3, #5]
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fd27 	bl	800a4dc <USBH_LL_GetURBState>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d11e      	bne.n	8009ad6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7c1b      	ldrb	r3, [r3, #16]
 8009a9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009aa0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8adb      	ldrh	r3, [r3, #22]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009aaa:	7b7b      	ldrb	r3, [r7, #13]
 8009aac:	2b80      	cmp	r3, #128	; 0x80
 8009aae:	d103      	bne.n	8009ab8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2203      	movs	r2, #3
 8009ab4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ab6:	e115      	b.n	8009ce4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2205      	movs	r2, #5
 8009abc:	761a      	strb	r2, [r3, #24]
      break;
 8009abe:	e111      	b.n	8009ce4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009ac0:	7b7b      	ldrb	r3, [r7, #13]
 8009ac2:	2b80      	cmp	r3, #128	; 0x80
 8009ac4:	d103      	bne.n	8009ace <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2209      	movs	r2, #9
 8009aca:	761a      	strb	r2, [r3, #24]
      break;
 8009acc:	e10a      	b.n	8009ce4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2207      	movs	r2, #7
 8009ad2:	761a      	strb	r2, [r3, #24]
      break;
 8009ad4:	e106      	b.n	8009ce4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d003      	beq.n	8009ae4 <USBH_HandleControl+0xcc>
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	f040 8100 	bne.w	8009ce4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	220b      	movs	r2, #11
 8009ae8:	761a      	strb	r2, [r3, #24]
      break;
 8009aea:	e0fb      	b.n	8009ce4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6899      	ldr	r1, [r3, #8]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	899a      	ldrh	r2, [r3, #12]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	791b      	ldrb	r3, [r3, #4]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f93a 	bl	8009d7e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	761a      	strb	r2, [r3, #24]
      break;
 8009b10:	e0f1      	b.n	8009cf6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	791b      	ldrb	r3, [r3, #4]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fcdf 	bl	800a4dc <USBH_LL_GetURBState>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d102      	bne.n	8009b2e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2209      	movs	r2, #9
 8009b2c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	d102      	bne.n	8009b3a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b34:	2303      	movs	r3, #3
 8009b36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b38:	e0d6      	b.n	8009ce8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	f040 80d3 	bne.w	8009ce8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	220b      	movs	r2, #11
 8009b46:	761a      	strb	r2, [r3, #24]
      break;
 8009b48:	e0ce      	b.n	8009ce8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6899      	ldr	r1, [r3, #8]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	899a      	ldrh	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	795b      	ldrb	r3, [r3, #5]
 8009b56:	2001      	movs	r0, #1
 8009b58:	9000      	str	r0, [sp, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f8ea 	bl	8009d34 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2206      	movs	r2, #6
 8009b70:	761a      	strb	r2, [r3, #24]
      break;
 8009b72:	e0c0      	b.n	8009cf6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	795b      	ldrb	r3, [r3, #5]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fcae 	bl	800a4dc <USBH_LL_GetURBState>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d103      	bne.n	8009b92 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2207      	movs	r2, #7
 8009b8e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b90:	e0ac      	b.n	8009cec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
 8009b94:	2b05      	cmp	r3, #5
 8009b96:	d105      	bne.n	8009ba4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	220c      	movs	r2, #12
 8009b9c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba2:	e0a3      	b.n	8009cec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ba4:	7bbb      	ldrb	r3, [r7, #14]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d103      	bne.n	8009bb2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2205      	movs	r2, #5
 8009bae:	761a      	strb	r2, [r3, #24]
      break;
 8009bb0:	e09c      	b.n	8009cec <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	f040 8099 	bne.w	8009cec <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	220b      	movs	r2, #11
 8009bbe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bc4:	e092      	b.n	8009cec <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	791b      	ldrb	r3, [r3, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2100      	movs	r1, #0
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f8d5 	bl	8009d7e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2208      	movs	r2, #8
 8009be4:	761a      	strb	r2, [r3, #24]

      break;
 8009be6:	e086      	b.n	8009cf6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	791b      	ldrb	r3, [r3, #4]
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fc74 	bl	800a4dc <USBH_LL_GetURBState>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d105      	bne.n	8009c0a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	220d      	movs	r2, #13
 8009c02:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c08:	e072      	b.n	8009cf0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	2b04      	cmp	r3, #4
 8009c0e:	d103      	bne.n	8009c18 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	220b      	movs	r2, #11
 8009c14:	761a      	strb	r2, [r3, #24]
      break;
 8009c16:	e06b      	b.n	8009cf0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	d168      	bne.n	8009cf0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	73fb      	strb	r3, [r7, #15]
      break;
 8009c22:	e065      	b.n	8009cf0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	795b      	ldrb	r3, [r3, #5]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	9200      	str	r2, [sp, #0]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2100      	movs	r1, #0
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f87f 	bl	8009d34 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	220a      	movs	r2, #10
 8009c46:	761a      	strb	r2, [r3, #24]
      break;
 8009c48:	e055      	b.n	8009cf6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	795b      	ldrb	r3, [r3, #5]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fc43 	bl	800a4dc <USBH_LL_GetURBState>
 8009c56:	4603      	mov	r3, r0
 8009c58:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d105      	bne.n	8009c6c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	220d      	movs	r2, #13
 8009c68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c6a:	e043      	b.n	8009cf4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d103      	bne.n	8009c7a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2209      	movs	r2, #9
 8009c76:	761a      	strb	r2, [r3, #24]
      break;
 8009c78:	e03c      	b.n	8009cf4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d139      	bne.n	8009cf4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	220b      	movs	r2, #11
 8009c84:	761a      	strb	r2, [r3, #24]
      break;
 8009c86:	e035      	b.n	8009cf4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	7e5b      	ldrb	r3, [r3, #25]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	765a      	strb	r2, [r3, #25]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	7e5b      	ldrb	r3, [r3, #25]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d806      	bhi.n	8009caa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009ca8:	e025      	b.n	8009cf6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009cb0:	2106      	movs	r1, #6
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	795b      	ldrb	r3, [r3, #5]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f90c 	bl	8009ee0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	791b      	ldrb	r3, [r3, #4]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f906 	bl	8009ee0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009cda:	2302      	movs	r3, #2
 8009cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8009cde:	e00a      	b.n	8009cf6 <USBH_HandleControl+0x2de>

    default:
      break;
 8009ce0:	bf00      	nop
 8009ce2:	e008      	b.n	8009cf6 <USBH_HandleControl+0x2de>
      break;
 8009ce4:	bf00      	nop
 8009ce6:	e006      	b.n	8009cf6 <USBH_HandleControl+0x2de>
      break;
 8009ce8:	bf00      	nop
 8009cea:	e004      	b.n	8009cf6 <USBH_HandleControl+0x2de>
      break;
 8009cec:	bf00      	nop
 8009cee:	e002      	b.n	8009cf6 <USBH_HandleControl+0x2de>
      break;
 8009cf0:	bf00      	nop
 8009cf2:	e000      	b.n	8009cf6 <USBH_HandleControl+0x2de>
      break;
 8009cf4:	bf00      	nop
  }

  return status;
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af04      	add	r7, sp, #16
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009d0e:	79f9      	ldrb	r1, [r7, #7]
 8009d10:	2300      	movs	r3, #0
 8009d12:	9303      	str	r3, [sp, #12]
 8009d14:	2308      	movs	r3, #8
 8009d16:	9302      	str	r3, [sp, #8]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	2300      	movs	r3, #0
 8009d22:	2200      	movs	r2, #0
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 fba8 	bl	800a47a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af04      	add	r7, sp, #16
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	461a      	mov	r2, r3
 8009d42:	460b      	mov	r3, r1
 8009d44:	80fb      	strh	r3, [r7, #6]
 8009d46:	4613      	mov	r3, r2
 8009d48:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009d58:	7979      	ldrb	r1, [r7, #5]
 8009d5a:	7e3b      	ldrb	r3, [r7, #24]
 8009d5c:	9303      	str	r3, [sp, #12]
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	9302      	str	r3, [sp, #8]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	2301      	movs	r3, #1
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 fb83 	bl	800a47a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b088      	sub	sp, #32
 8009d82:	af04      	add	r7, sp, #16
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	4611      	mov	r1, r2
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	80fb      	strh	r3, [r7, #6]
 8009d90:	4613      	mov	r3, r2
 8009d92:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009d94:	7979      	ldrb	r1, [r7, #5]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	88fb      	ldrh	r3, [r7, #6]
 8009d9c:	9302      	str	r3, [sp, #8]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	2301      	movs	r3, #1
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	2300      	movs	r3, #0
 8009da8:	2201      	movs	r2, #1
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f000 fb65 	bl	800a47a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009db0:	2300      	movs	r3, #0

}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b088      	sub	sp, #32
 8009dbe:	af04      	add	r7, sp, #16
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	460b      	mov	r3, r1
 8009dca:	80fb      	strh	r3, [r7, #6]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009dde:	7979      	ldrb	r1, [r7, #5]
 8009de0:	7e3b      	ldrb	r3, [r7, #24]
 8009de2:	9303      	str	r3, [sp, #12]
 8009de4:	88fb      	ldrh	r3, [r7, #6]
 8009de6:	9302      	str	r3, [sp, #8]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	2301      	movs	r3, #1
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	2302      	movs	r3, #2
 8009df2:	2200      	movs	r2, #0
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 fb40 	bl	800a47a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af04      	add	r7, sp, #16
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	4611      	mov	r1, r2
 8009e10:	461a      	mov	r2, r3
 8009e12:	460b      	mov	r3, r1
 8009e14:	80fb      	strh	r3, [r7, #6]
 8009e16:	4613      	mov	r3, r2
 8009e18:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e1a:	7979      	ldrb	r1, [r7, #5]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9303      	str	r3, [sp, #12]
 8009e20:	88fb      	ldrh	r3, [r7, #6]
 8009e22:	9302      	str	r3, [sp, #8]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	9301      	str	r3, [sp, #4]
 8009e28:	2301      	movs	r3, #1
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	2201      	movs	r2, #1
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 fb22 	bl	800a47a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af04      	add	r7, sp, #16
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	4603      	mov	r3, r0
 8009e50:	70fb      	strb	r3, [r7, #3]
 8009e52:	460b      	mov	r3, r1
 8009e54:	70bb      	strb	r3, [r7, #2]
 8009e56:	4613      	mov	r3, r2
 8009e58:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009e5a:	7878      	ldrb	r0, [r7, #1]
 8009e5c:	78ba      	ldrb	r2, [r7, #2]
 8009e5e:	78f9      	ldrb	r1, [r7, #3]
 8009e60:	8b3b      	ldrh	r3, [r7, #24]
 8009e62:	9302      	str	r3, [sp, #8]
 8009e64:	7d3b      	ldrb	r3, [r7, #20]
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	7c3b      	ldrb	r3, [r7, #16]
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fab5 	bl	800a3de <USBH_LL_OpenPipe>

  return USBH_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009e8a:	78fb      	ldrb	r3, [r7, #3]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fad4 	bl	800a43c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f836 	bl	8009f1c <USBH_GetFreePipe>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009eb4:	89fb      	ldrh	r3, [r7, #14]
 8009eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d00a      	beq.n	8009ed4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009ebe:	78fa      	ldrb	r2, [r7, #3]
 8009ec0:	89fb      	ldrh	r3, [r7, #14]
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	33e0      	adds	r3, #224	; 0xe0
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009ed4:	89fb      	ldrh	r3, [r7, #14]
 8009ed6:	b2db      	uxtb	r3, r3
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	2b0a      	cmp	r3, #10
 8009ef0:	d80d      	bhi.n	8009f0e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009ef2:	78fb      	ldrb	r3, [r7, #3]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	33e0      	adds	r3, #224	; 0xe0
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	78fb      	ldrb	r3, [r7, #3]
 8009f00:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	33e0      	adds	r3, #224	; 0xe0
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	440b      	add	r3, r1
 8009f0c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
 8009f2c:	e00f      	b.n	8009f4e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	33e0      	adds	r3, #224	; 0xe0
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	e007      	b.n	8009f58 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	73fb      	strb	r3, [r7, #15]
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	2b0a      	cmp	r3, #10
 8009f52:	d9ec      	bls.n	8009f2e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f72:	2301      	movs	r3, #1
 8009f74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009f7a:	4b1f      	ldr	r3, [pc, #124]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009f7c:	7a5b      	ldrb	r3, [r3, #9]
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d131      	bne.n	8009fe8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f84:	4b1c      	ldr	r3, [pc, #112]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009f86:	7a5b      	ldrb	r3, [r3, #9]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009f8e:	2100      	movs	r1, #0
 8009f90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f92:	4b19      	ldr	r3, [pc, #100]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009f94:	7a5b      	ldrb	r3, [r3, #9]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	4a17      	ldr	r2, [pc, #92]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009fa2:	4b15      	ldr	r3, [pc, #84]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009fa4:	7a5b      	ldrb	r3, [r3, #9]
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	461a      	mov	r2, r3
 8009faa:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009fac:	4413      	add	r3, r2
 8009fae:	79fa      	ldrb	r2, [r7, #7]
 8009fb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009fb2:	4b11      	ldr	r3, [pc, #68]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009fb4:	7a5b      	ldrb	r3, [r3, #9]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	b2d1      	uxtb	r1, r2
 8009fbc:	4a0e      	ldr	r2, [pc, #56]	; (8009ff8 <FATFS_LinkDriverEx+0x94>)
 8009fbe:	7251      	strb	r1, [r2, #9]
 8009fc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009fc2:	7dbb      	ldrb	r3, [r7, #22]
 8009fc4:	3330      	adds	r3, #48	; 0x30
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	223a      	movs	r2, #58	; 0x3a
 8009fd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	3302      	adds	r3, #2
 8009fd8:	222f      	movs	r2, #47	; 0x2f
 8009fda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	3303      	adds	r3, #3
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	200000b0 	.word	0x200000b0

08009ffc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a006:	2200      	movs	r2, #0
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff ffaa 	bl	8009f64 <FATFS_LinkDriverEx>
 800a010:	4603      	mov	r3, r0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a020:	2201      	movs	r2, #1
 800a022:	490e      	ldr	r1, [pc, #56]	; (800a05c <MX_USB_HOST_Init+0x40>)
 800a024:	480e      	ldr	r0, [pc, #56]	; (800a060 <MX_USB_HOST_Init+0x44>)
 800a026:	f7fe fc45 	bl	80088b4 <USBH_Init>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a030:	f7f6 fb40 	bl	80006b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800a034:	490b      	ldr	r1, [pc, #44]	; (800a064 <MX_USB_HOST_Init+0x48>)
 800a036:	480a      	ldr	r0, [pc, #40]	; (800a060 <MX_USB_HOST_Init+0x44>)
 800a038:	f7fe fcca 	bl	80089d0 <USBH_RegisterClass>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a042:	f7f6 fb37 	bl	80006b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a046:	4806      	ldr	r0, [pc, #24]	; (800a060 <MX_USB_HOST_Init+0x44>)
 800a048:	f7fe fd4e 	bl	8008ae8 <USBH_Start>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a052:	f7f6 fb2f 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a056:	bf00      	nop
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	0800a07d 	.word	0x0800a07d
 800a060:	20002238 	.word	0x20002238
 800a064:	2000000c 	.word	0x2000000c

0800a068 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a06c:	4802      	ldr	r0, [pc, #8]	; (800a078 <MX_USB_HOST_Process+0x10>)
 800a06e:	f7fe fd4b 	bl	8008b08 <USBH_Process>
}
 800a072:	bf00      	nop
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20002238 	.word	0x20002238

0800a07c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	2b04      	cmp	r3, #4
 800a08e:	d819      	bhi.n	800a0c4 <USBH_UserProcess+0x48>
 800a090:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <USBH_UserProcess+0x1c>)
 800a092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a096:	bf00      	nop
 800a098:	0800a0c5 	.word	0x0800a0c5
 800a09c:	0800a0b5 	.word	0x0800a0b5
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0bd 	.word	0x0800a0bd
 800a0a8:	0800a0ad 	.word	0x0800a0ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a0ac:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <USBH_UserProcess+0x58>)
 800a0ae:	2203      	movs	r2, #3
 800a0b0:	701a      	strb	r2, [r3, #0]
  break;
 800a0b2:	e008      	b.n	800a0c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a0b4:	4b07      	ldr	r3, [pc, #28]	; (800a0d4 <USBH_UserProcess+0x58>)
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	701a      	strb	r2, [r3, #0]
  break;
 800a0ba:	e004      	b.n	800a0c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a0bc:	4b05      	ldr	r3, [pc, #20]	; (800a0d4 <USBH_UserProcess+0x58>)
 800a0be:	2201      	movs	r2, #1
 800a0c0:	701a      	strb	r2, [r3, #0]
  break;
 800a0c2:	e000      	b.n	800a0c6 <USBH_UserProcess+0x4a>

  default:
  break;
 800a0c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	200000bc 	.word	0x200000bc

0800a0d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08a      	sub	sp, #40	; 0x28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0e0:	f107 0314 	add.w	r3, r7, #20
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	605a      	str	r2, [r3, #4]
 800a0ea:	609a      	str	r2, [r3, #8]
 800a0ec:	60da      	str	r2, [r3, #12]
 800a0ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0f8:	d14e      	bne.n	800a198 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0fa:	4b29      	ldr	r3, [pc, #164]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fe:	4a28      	ldr	r2, [pc, #160]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a100:	f043 0301 	orr.w	r3, r3, #1
 800a104:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a106:	4b26      	ldr	r3, [pc, #152]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	613b      	str	r3, [r7, #16]
 800a110:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a112:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a118:	2302      	movs	r3, #2
 800a11a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a11c:	2300      	movs	r3, #0
 800a11e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a120:	2303      	movs	r3, #3
 800a122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a124:	230a      	movs	r3, #10
 800a126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a128:	f107 0314 	add.w	r3, r7, #20
 800a12c:	4619      	mov	r1, r3
 800a12e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a132:	f7f8 f88f 	bl	8002254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a136:	4b1a      	ldr	r3, [pc, #104]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13a:	4a19      	ldr	r2, [pc, #100]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a13c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a140:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a142:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a14e:	4b14      	ldr	r3, [pc, #80]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d114      	bne.n	800a184 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a15a:	4b11      	ldr	r3, [pc, #68]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15e:	4a10      	ldr	r2, [pc, #64]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a164:	6593      	str	r3, [r2, #88]	; 0x58
 800a166:	4b0e      	ldr	r3, [pc, #56]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a16e:	60bb      	str	r3, [r7, #8]
 800a170:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a172:	f7f9 fea1 	bl	8003eb8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a176:	4b0a      	ldr	r3, [pc, #40]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a17a:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <HAL_HCD_MspInit+0xc8>)
 800a17c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a180:	6593      	str	r3, [r2, #88]	; 0x58
 800a182:	e001      	b.n	800a188 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a184:	f7f9 fe98 	bl	8003eb8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a188:	2200      	movs	r2, #0
 800a18a:	2100      	movs	r1, #0
 800a18c:	2043      	movs	r0, #67	; 0x43
 800a18e:	f7f8 f82a 	bl	80021e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a192:	2043      	movs	r0, #67	; 0x43
 800a194:	f7f8 f843 	bl	800221e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a198:	bf00      	nop
 800a19a:	3728      	adds	r7, #40	; 0x28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	40021000 	.word	0x40021000

0800a1a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff f87b 	bl	80092ae <USBH_LL_IncTimer>
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff f8b3 	bl	800933a <USBH_LL_Connect>
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff f8bc 	bl	8009368 <USBH_LL_Disconnect>
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
 800a204:	4613      	mov	r3, r2
 800a206:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff f86d 	bl	8009302 <USBH_LL_PortEnabled>
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a23e:	4618      	mov	r0, r3
 800a240:	f7ff f86d 	bl	800931e <USBH_LL_PortDisabled>
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d12d      	bne.n	800a2ba <USBH_LL_Init+0x6e>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a25e:	4a19      	ldr	r2, [pc, #100]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a26a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a26e:	4b15      	ldr	r3, [pc, #84]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a270:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a274:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800a276:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a278:	220c      	movs	r2, #12
 800a27a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 800a27c:	4b11      	ldr	r3, [pc, #68]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a27e:	2203      	movs	r2, #3
 800a280:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a282:	4b10      	ldr	r3, [pc, #64]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a284:	2200      	movs	r2, #0
 800a286:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a288:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a28a:	2202      	movs	r2, #2
 800a28c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a28e:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a290:	2200      	movs	r2, #0
 800a292:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a294:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a296:	2200      	movs	r2, #0
 800a298:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a29a:	480a      	ldr	r0, [pc, #40]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a29c:	f7f8 f99e 	bl	80025dc <HAL_HCD_Init>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800a2a6:	f7f6 fa05 	bl	80006b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a2aa:	4806      	ldr	r0, [pc, #24]	; (800a2c4 <USBH_LL_Init+0x78>)
 800a2ac:	f7f8 fd7d 	bl	8002daa <HAL_HCD_GetCurrentFrame>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7fe ffeb 	bl	8009290 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	20002610 	.word	0x20002610

0800a2c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7f8 fced 	bl	8002cbe <HAL_HCD_Start>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 f98c 	bl	800a608 <USBH_Get_USB_Status>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a314:	4618      	mov	r0, r3
 800a316:	f7f8 fcf5 	bl	8002d04 <HAL_HCD_Stop>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	4618      	mov	r0, r3
 800a322:	f000 f971 	bl	800a608 <USBH_Get_USB_Status>
 800a326:	4603      	mov	r3, r0
 800a328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a33c:	2301      	movs	r3, #1
 800a33e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a346:	4618      	mov	r0, r3
 800a348:	f7f8 fd3d 	bl	8002dc6 <HAL_HCD_GetCurrentSpeed>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d00c      	beq.n	800a36c <USBH_LL_GetSpeed+0x38>
 800a352:	2b02      	cmp	r3, #2
 800a354:	d80d      	bhi.n	800a372 <USBH_LL_GetSpeed+0x3e>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <USBH_LL_GetSpeed+0x2c>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d003      	beq.n	800a366 <USBH_LL_GetSpeed+0x32>
 800a35e:	e008      	b.n	800a372 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
    break;
 800a364:	e008      	b.n	800a378 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a366:	2301      	movs	r3, #1
 800a368:	73fb      	strb	r3, [r7, #15]
    break;
 800a36a:	e005      	b.n	800a378 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a36c:	2302      	movs	r3, #2
 800a36e:	73fb      	strb	r3, [r7, #15]
    break;
 800a370:	e002      	b.n	800a378 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a372:	2301      	movs	r3, #1
 800a374:	73fb      	strb	r3, [r7, #15]
    break;
 800a376:	bf00      	nop
  }
  return  speed;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a398:	4618      	mov	r0, r3
 800a39a:	f7f8 fcd0 	bl	8002d3e <HAL_HCD_ResetPort>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 f92f 	bl	800a608 <USBH_Get_USB_Status>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f8 fcd7 	bl	8002d82 <HAL_HCD_HC_GetXferCount>
 800a3d4:	4603      	mov	r3, r0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a3de:	b590      	push	{r4, r7, lr}
 800a3e0:	b089      	sub	sp, #36	; 0x24
 800a3e2:	af04      	add	r7, sp, #16
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	4608      	mov	r0, r1
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	70fb      	strb	r3, [r7, #3]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70bb      	strb	r3, [r7, #2]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a406:	787c      	ldrb	r4, [r7, #1]
 800a408:	78ba      	ldrb	r2, [r7, #2]
 800a40a:	78f9      	ldrb	r1, [r7, #3]
 800a40c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a40e:	9302      	str	r3, [sp, #8]
 800a410:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	4623      	mov	r3, r4
 800a41e:	f7f8 f93f 	bl	80026a0 <HAL_HCD_HC_Init>
 800a422:	4603      	mov	r3, r0
 800a424:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a426:	7bfb      	ldrb	r3, [r7, #15]
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 f8ed 	bl	800a608 <USBH_Get_USB_Status>
 800a42e:	4603      	mov	r3, r0
 800a430:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a432:	7bbb      	ldrb	r3, [r7, #14]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd90      	pop	{r4, r7, pc}

0800a43c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a456:	78fa      	ldrb	r2, [r7, #3]
 800a458:	4611      	mov	r1, r2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7f8 f9af 	bl	80027be <HAL_HCD_HC_Halt>
 800a460:	4603      	mov	r3, r0
 800a462:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	4618      	mov	r0, r3
 800a468:	f000 f8ce 	bl	800a608 <USBH_Get_USB_Status>
 800a46c:	4603      	mov	r3, r0
 800a46e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a470:	7bbb      	ldrb	r3, [r7, #14]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a47a:	b590      	push	{r4, r7, lr}
 800a47c:	b089      	sub	sp, #36	; 0x24
 800a47e:	af04      	add	r7, sp, #16
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	4608      	mov	r0, r1
 800a484:	4611      	mov	r1, r2
 800a486:	461a      	mov	r2, r3
 800a488:	4603      	mov	r3, r0
 800a48a:	70fb      	strb	r3, [r7, #3]
 800a48c:	460b      	mov	r3, r1
 800a48e:	70bb      	strb	r3, [r7, #2]
 800a490:	4613      	mov	r3, r2
 800a492:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a4a2:	787c      	ldrb	r4, [r7, #1]
 800a4a4:	78ba      	ldrb	r2, [r7, #2]
 800a4a6:	78f9      	ldrb	r1, [r7, #3]
 800a4a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a4b0:	9302      	str	r3, [sp, #8]
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	4623      	mov	r3, r4
 800a4be:	f7f8 f9a1 	bl	8002804 <HAL_HCD_HC_SubmitRequest>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 f89d 	bl	800a608 <USBH_Get_USB_Status>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd90      	pop	{r4, r7, pc}

0800a4dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f8 fc31 	bl	8002d5a <HAL_HCD_HC_GetURBState>
 800a4f8:	4603      	mov	r3, r0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	460b      	mov	r3, r1
 800a50c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a514:	2b01      	cmp	r3, #1
 800a516:	d103      	bne.n	800a520 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f8a0 	bl	800a660 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a520:	20c8      	movs	r0, #200	; 0xc8
 800a522:	f7f6 fb51 	bl	8000bc8 <HAL_Delay>
  return USBH_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	70fb      	strb	r3, [r7, #3]
 800a53c:	4613      	mov	r3, r2
 800a53e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a546:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	212c      	movs	r1, #44	; 0x2c
 800a54e:	fb01 f303 	mul.w	r3, r1, r3
 800a552:	4413      	add	r3, r2
 800a554:	333b      	adds	r3, #59	; 0x3b
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d009      	beq.n	800a570 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	212c      	movs	r1, #44	; 0x2c
 800a562:	fb01 f303 	mul.w	r3, r1, r3
 800a566:	4413      	add	r3, r2
 800a568:	3354      	adds	r3, #84	; 0x54
 800a56a:	78ba      	ldrb	r2, [r7, #2]
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	e008      	b.n	800a582 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	212c      	movs	r1, #44	; 0x2c
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	3355      	adds	r3, #85	; 0x55
 800a57e:	78ba      	ldrb	r2, [r7, #2]
 800a580:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5a6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800a5a8:	78fb      	ldrb	r3, [r7, #3]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	212c      	movs	r1, #44	; 0x2c
 800a5ae:	fb01 f303 	mul.w	r3, r1, r3
 800a5b2:	4413      	add	r3, r2
 800a5b4:	333b      	adds	r3, #59	; 0x3b
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d009      	beq.n	800a5d0 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	212c      	movs	r1, #44	; 0x2c
 800a5c2:	fb01 f303 	mul.w	r3, r1, r3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	3354      	adds	r3, #84	; 0x54
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	73fb      	strb	r3, [r7, #15]
 800a5ce:	e008      	b.n	800a5e2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800a5d0:	78fb      	ldrb	r3, [r7, #3]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	212c      	movs	r1, #44	; 0x2c
 800a5d6:	fb01 f303 	mul.w	r3, r1, r3
 800a5da:	4413      	add	r3, r2
 800a5dc:	3355      	adds	r3, #85	; 0x55
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7f6 fae5 	bl	8000bc8 <HAL_Delay>
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a616:	79fb      	ldrb	r3, [r7, #7]
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d817      	bhi.n	800a64c <USBH_Get_USB_Status+0x44>
 800a61c:	a201      	add	r2, pc, #4	; (adr r2, 800a624 <USBH_Get_USB_Status+0x1c>)
 800a61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a622:	bf00      	nop
 800a624:	0800a635 	.word	0x0800a635
 800a628:	0800a63b 	.word	0x0800a63b
 800a62c:	0800a641 	.word	0x0800a641
 800a630:	0800a647 	.word	0x0800a647
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
    break;
 800a638:	e00b      	b.n	800a652 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a63a:	2302      	movs	r3, #2
 800a63c:	73fb      	strb	r3, [r7, #15]
    break;
 800a63e:	e008      	b.n	800a652 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a640:	2301      	movs	r3, #1
 800a642:	73fb      	strb	r3, [r7, #15]
    break;
 800a644:	e005      	b.n	800a652 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a646:	2302      	movs	r3, #2
 800a648:	73fb      	strb	r3, [r7, #15]
    break;
 800a64a:	e002      	b.n	800a652 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a64c:	2302      	movs	r3, #2
 800a64e:	73fb      	strb	r3, [r7, #15]
    break;
 800a650:	bf00      	nop
  }
  return usb_status;
 800a652:	7bfb      	ldrb	r3, [r7, #15]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]
 800a678:	e001      	b.n	800a67e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a67a:	2301      	movs	r3, #1
 800a67c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,(GPIO_PinState)data);
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	461a      	mov	r2, r3
 800a682:	2108      	movs	r1, #8
 800a684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a688:	f7f7 ff76 	bl	8002578 <HAL_GPIO_WritePin>
}
 800a68c:	bf00      	nop
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <__errno>:
 800a694:	4b01      	ldr	r3, [pc, #4]	; (800a69c <__errno+0x8>)
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	2000002c 	.word	0x2000002c

0800a6a0 <__libc_init_array>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	4d0d      	ldr	r5, [pc, #52]	; (800a6d8 <__libc_init_array+0x38>)
 800a6a4:	4c0d      	ldr	r4, [pc, #52]	; (800a6dc <__libc_init_array+0x3c>)
 800a6a6:	1b64      	subs	r4, r4, r5
 800a6a8:	10a4      	asrs	r4, r4, #2
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	42a6      	cmp	r6, r4
 800a6ae:	d109      	bne.n	800a6c4 <__libc_init_array+0x24>
 800a6b0:	4d0b      	ldr	r5, [pc, #44]	; (800a6e0 <__libc_init_array+0x40>)
 800a6b2:	4c0c      	ldr	r4, [pc, #48]	; (800a6e4 <__libc_init_array+0x44>)
 800a6b4:	f000 ff94 	bl	800b5e0 <_init>
 800a6b8:	1b64      	subs	r4, r4, r5
 800a6ba:	10a4      	asrs	r4, r4, #2
 800a6bc:	2600      	movs	r6, #0
 800a6be:	42a6      	cmp	r6, r4
 800a6c0:	d105      	bne.n	800a6ce <__libc_init_array+0x2e>
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c8:	4798      	blx	r3
 800a6ca:	3601      	adds	r6, #1
 800a6cc:	e7ee      	b.n	800a6ac <__libc_init_array+0xc>
 800a6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d2:	4798      	blx	r3
 800a6d4:	3601      	adds	r6, #1
 800a6d6:	e7f2      	b.n	800a6be <__libc_init_array+0x1e>
 800a6d8:	0800b714 	.word	0x0800b714
 800a6dc:	0800b714 	.word	0x0800b714
 800a6e0:	0800b714 	.word	0x0800b714
 800a6e4:	0800b718 	.word	0x0800b718

0800a6e8 <malloc>:
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <malloc+0xc>)
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	f000 b871 	b.w	800a7d4 <_malloc_r>
 800a6f2:	bf00      	nop
 800a6f4:	2000002c 	.word	0x2000002c

0800a6f8 <free>:
 800a6f8:	4b02      	ldr	r3, [pc, #8]	; (800a704 <free+0xc>)
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f000 b819 	b.w	800a734 <_free_r>
 800a702:	bf00      	nop
 800a704:	2000002c 	.word	0x2000002c

0800a708 <memcpy>:
 800a708:	440a      	add	r2, r1
 800a70a:	4291      	cmp	r1, r2
 800a70c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a710:	d100      	bne.n	800a714 <memcpy+0xc>
 800a712:	4770      	bx	lr
 800a714:	b510      	push	{r4, lr}
 800a716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a71a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a71e:	4291      	cmp	r1, r2
 800a720:	d1f9      	bne.n	800a716 <memcpy+0xe>
 800a722:	bd10      	pop	{r4, pc}

0800a724 <memset>:
 800a724:	4402      	add	r2, r0
 800a726:	4603      	mov	r3, r0
 800a728:	4293      	cmp	r3, r2
 800a72a:	d100      	bne.n	800a72e <memset+0xa>
 800a72c:	4770      	bx	lr
 800a72e:	f803 1b01 	strb.w	r1, [r3], #1
 800a732:	e7f9      	b.n	800a728 <memset+0x4>

0800a734 <_free_r>:
 800a734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a736:	2900      	cmp	r1, #0
 800a738:	d048      	beq.n	800a7cc <_free_r+0x98>
 800a73a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a73e:	9001      	str	r0, [sp, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f1a1 0404 	sub.w	r4, r1, #4
 800a746:	bfb8      	it	lt
 800a748:	18e4      	addlt	r4, r4, r3
 800a74a:	f000 f9bd 	bl	800aac8 <__malloc_lock>
 800a74e:	4a20      	ldr	r2, [pc, #128]	; (800a7d0 <_free_r+0x9c>)
 800a750:	9801      	ldr	r0, [sp, #4]
 800a752:	6813      	ldr	r3, [r2, #0]
 800a754:	4615      	mov	r5, r2
 800a756:	b933      	cbnz	r3, 800a766 <_free_r+0x32>
 800a758:	6063      	str	r3, [r4, #4]
 800a75a:	6014      	str	r4, [r2, #0]
 800a75c:	b003      	add	sp, #12
 800a75e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a762:	f000 b9b7 	b.w	800aad4 <__malloc_unlock>
 800a766:	42a3      	cmp	r3, r4
 800a768:	d90b      	bls.n	800a782 <_free_r+0x4e>
 800a76a:	6821      	ldr	r1, [r4, #0]
 800a76c:	1862      	adds	r2, r4, r1
 800a76e:	4293      	cmp	r3, r2
 800a770:	bf04      	itt	eq
 800a772:	681a      	ldreq	r2, [r3, #0]
 800a774:	685b      	ldreq	r3, [r3, #4]
 800a776:	6063      	str	r3, [r4, #4]
 800a778:	bf04      	itt	eq
 800a77a:	1852      	addeq	r2, r2, r1
 800a77c:	6022      	streq	r2, [r4, #0]
 800a77e:	602c      	str	r4, [r5, #0]
 800a780:	e7ec      	b.n	800a75c <_free_r+0x28>
 800a782:	461a      	mov	r2, r3
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	b10b      	cbz	r3, 800a78c <_free_r+0x58>
 800a788:	42a3      	cmp	r3, r4
 800a78a:	d9fa      	bls.n	800a782 <_free_r+0x4e>
 800a78c:	6811      	ldr	r1, [r2, #0]
 800a78e:	1855      	adds	r5, r2, r1
 800a790:	42a5      	cmp	r5, r4
 800a792:	d10b      	bne.n	800a7ac <_free_r+0x78>
 800a794:	6824      	ldr	r4, [r4, #0]
 800a796:	4421      	add	r1, r4
 800a798:	1854      	adds	r4, r2, r1
 800a79a:	42a3      	cmp	r3, r4
 800a79c:	6011      	str	r1, [r2, #0]
 800a79e:	d1dd      	bne.n	800a75c <_free_r+0x28>
 800a7a0:	681c      	ldr	r4, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	6053      	str	r3, [r2, #4]
 800a7a6:	4421      	add	r1, r4
 800a7a8:	6011      	str	r1, [r2, #0]
 800a7aa:	e7d7      	b.n	800a75c <_free_r+0x28>
 800a7ac:	d902      	bls.n	800a7b4 <_free_r+0x80>
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	e7d3      	b.n	800a75c <_free_r+0x28>
 800a7b4:	6825      	ldr	r5, [r4, #0]
 800a7b6:	1961      	adds	r1, r4, r5
 800a7b8:	428b      	cmp	r3, r1
 800a7ba:	bf04      	itt	eq
 800a7bc:	6819      	ldreq	r1, [r3, #0]
 800a7be:	685b      	ldreq	r3, [r3, #4]
 800a7c0:	6063      	str	r3, [r4, #4]
 800a7c2:	bf04      	itt	eq
 800a7c4:	1949      	addeq	r1, r1, r5
 800a7c6:	6021      	streq	r1, [r4, #0]
 800a7c8:	6054      	str	r4, [r2, #4]
 800a7ca:	e7c7      	b.n	800a75c <_free_r+0x28>
 800a7cc:	b003      	add	sp, #12
 800a7ce:	bd30      	pop	{r4, r5, pc}
 800a7d0:	200000c0 	.word	0x200000c0

0800a7d4 <_malloc_r>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	1ccd      	adds	r5, r1, #3
 800a7d8:	f025 0503 	bic.w	r5, r5, #3
 800a7dc:	3508      	adds	r5, #8
 800a7de:	2d0c      	cmp	r5, #12
 800a7e0:	bf38      	it	cc
 800a7e2:	250c      	movcc	r5, #12
 800a7e4:	2d00      	cmp	r5, #0
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	db01      	blt.n	800a7ee <_malloc_r+0x1a>
 800a7ea:	42a9      	cmp	r1, r5
 800a7ec:	d903      	bls.n	800a7f6 <_malloc_r+0x22>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	6033      	str	r3, [r6, #0]
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f6:	f000 f967 	bl	800aac8 <__malloc_lock>
 800a7fa:	4921      	ldr	r1, [pc, #132]	; (800a880 <_malloc_r+0xac>)
 800a7fc:	680a      	ldr	r2, [r1, #0]
 800a7fe:	4614      	mov	r4, r2
 800a800:	b99c      	cbnz	r4, 800a82a <_malloc_r+0x56>
 800a802:	4f20      	ldr	r7, [pc, #128]	; (800a884 <_malloc_r+0xb0>)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	b923      	cbnz	r3, 800a812 <_malloc_r+0x3e>
 800a808:	4621      	mov	r1, r4
 800a80a:	4630      	mov	r0, r6
 800a80c:	f000 f854 	bl	800a8b8 <_sbrk_r>
 800a810:	6038      	str	r0, [r7, #0]
 800a812:	4629      	mov	r1, r5
 800a814:	4630      	mov	r0, r6
 800a816:	f000 f84f 	bl	800a8b8 <_sbrk_r>
 800a81a:	1c43      	adds	r3, r0, #1
 800a81c:	d123      	bne.n	800a866 <_malloc_r+0x92>
 800a81e:	230c      	movs	r3, #12
 800a820:	6033      	str	r3, [r6, #0]
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f956 	bl	800aad4 <__malloc_unlock>
 800a828:	e7e3      	b.n	800a7f2 <_malloc_r+0x1e>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	1b5b      	subs	r3, r3, r5
 800a82e:	d417      	bmi.n	800a860 <_malloc_r+0x8c>
 800a830:	2b0b      	cmp	r3, #11
 800a832:	d903      	bls.n	800a83c <_malloc_r+0x68>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	441c      	add	r4, r3
 800a838:	6025      	str	r5, [r4, #0]
 800a83a:	e004      	b.n	800a846 <_malloc_r+0x72>
 800a83c:	6863      	ldr	r3, [r4, #4]
 800a83e:	42a2      	cmp	r2, r4
 800a840:	bf0c      	ite	eq
 800a842:	600b      	streq	r3, [r1, #0]
 800a844:	6053      	strne	r3, [r2, #4]
 800a846:	4630      	mov	r0, r6
 800a848:	f000 f944 	bl	800aad4 <__malloc_unlock>
 800a84c:	f104 000b 	add.w	r0, r4, #11
 800a850:	1d23      	adds	r3, r4, #4
 800a852:	f020 0007 	bic.w	r0, r0, #7
 800a856:	1ac2      	subs	r2, r0, r3
 800a858:	d0cc      	beq.n	800a7f4 <_malloc_r+0x20>
 800a85a:	1a1b      	subs	r3, r3, r0
 800a85c:	50a3      	str	r3, [r4, r2]
 800a85e:	e7c9      	b.n	800a7f4 <_malloc_r+0x20>
 800a860:	4622      	mov	r2, r4
 800a862:	6864      	ldr	r4, [r4, #4]
 800a864:	e7cc      	b.n	800a800 <_malloc_r+0x2c>
 800a866:	1cc4      	adds	r4, r0, #3
 800a868:	f024 0403 	bic.w	r4, r4, #3
 800a86c:	42a0      	cmp	r0, r4
 800a86e:	d0e3      	beq.n	800a838 <_malloc_r+0x64>
 800a870:	1a21      	subs	r1, r4, r0
 800a872:	4630      	mov	r0, r6
 800a874:	f000 f820 	bl	800a8b8 <_sbrk_r>
 800a878:	3001      	adds	r0, #1
 800a87a:	d1dd      	bne.n	800a838 <_malloc_r+0x64>
 800a87c:	e7cf      	b.n	800a81e <_malloc_r+0x4a>
 800a87e:	bf00      	nop
 800a880:	200000c0 	.word	0x200000c0
 800a884:	200000c4 	.word	0x200000c4

0800a888 <iprintf>:
 800a888:	b40f      	push	{r0, r1, r2, r3}
 800a88a:	4b0a      	ldr	r3, [pc, #40]	; (800a8b4 <iprintf+0x2c>)
 800a88c:	b513      	push	{r0, r1, r4, lr}
 800a88e:	681c      	ldr	r4, [r3, #0]
 800a890:	b124      	cbz	r4, 800a89c <iprintf+0x14>
 800a892:	69a3      	ldr	r3, [r4, #24]
 800a894:	b913      	cbnz	r3, 800a89c <iprintf+0x14>
 800a896:	4620      	mov	r0, r4
 800a898:	f000 f876 	bl	800a988 <__sinit>
 800a89c:	ab05      	add	r3, sp, #20
 800a89e:	9a04      	ldr	r2, [sp, #16]
 800a8a0:	68a1      	ldr	r1, [r4, #8]
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 f945 	bl	800ab34 <_vfiprintf_r>
 800a8aa:	b002      	add	sp, #8
 800a8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b0:	b004      	add	sp, #16
 800a8b2:	4770      	bx	lr
 800a8b4:	2000002c 	.word	0x2000002c

0800a8b8 <_sbrk_r>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	4d06      	ldr	r5, [pc, #24]	; (800a8d4 <_sbrk_r+0x1c>)
 800a8bc:	2300      	movs	r3, #0
 800a8be:	4604      	mov	r4, r0
 800a8c0:	4608      	mov	r0, r1
 800a8c2:	602b      	str	r3, [r5, #0]
 800a8c4:	f7f6 f89a 	bl	80009fc <_sbrk>
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	d102      	bne.n	800a8d2 <_sbrk_r+0x1a>
 800a8cc:	682b      	ldr	r3, [r5, #0]
 800a8ce:	b103      	cbz	r3, 800a8d2 <_sbrk_r+0x1a>
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	20002920 	.word	0x20002920

0800a8d8 <std>:
 800a8d8:	2300      	movs	r3, #0
 800a8da:	b510      	push	{r4, lr}
 800a8dc:	4604      	mov	r4, r0
 800a8de:	e9c0 3300 	strd	r3, r3, [r0]
 800a8e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8e6:	6083      	str	r3, [r0, #8]
 800a8e8:	8181      	strh	r1, [r0, #12]
 800a8ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a8ec:	81c2      	strh	r2, [r0, #14]
 800a8ee:	6183      	str	r3, [r0, #24]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	2208      	movs	r2, #8
 800a8f4:	305c      	adds	r0, #92	; 0x5c
 800a8f6:	f7ff ff15 	bl	800a724 <memset>
 800a8fa:	4b05      	ldr	r3, [pc, #20]	; (800a910 <std+0x38>)
 800a8fc:	6263      	str	r3, [r4, #36]	; 0x24
 800a8fe:	4b05      	ldr	r3, [pc, #20]	; (800a914 <std+0x3c>)
 800a900:	62a3      	str	r3, [r4, #40]	; 0x28
 800a902:	4b05      	ldr	r3, [pc, #20]	; (800a918 <std+0x40>)
 800a904:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a906:	4b05      	ldr	r3, [pc, #20]	; (800a91c <std+0x44>)
 800a908:	6224      	str	r4, [r4, #32]
 800a90a:	6323      	str	r3, [r4, #48]	; 0x30
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	bf00      	nop
 800a910:	0800b0bd 	.word	0x0800b0bd
 800a914:	0800b0df 	.word	0x0800b0df
 800a918:	0800b117 	.word	0x0800b117
 800a91c:	0800b13b 	.word	0x0800b13b

0800a920 <_cleanup_r>:
 800a920:	4901      	ldr	r1, [pc, #4]	; (800a928 <_cleanup_r+0x8>)
 800a922:	f000 b8af 	b.w	800aa84 <_fwalk_reent>
 800a926:	bf00      	nop
 800a928:	0800b415 	.word	0x0800b415

0800a92c <__sfmoreglue>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	1e4a      	subs	r2, r1, #1
 800a930:	2568      	movs	r5, #104	; 0x68
 800a932:	4355      	muls	r5, r2
 800a934:	460e      	mov	r6, r1
 800a936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a93a:	f7ff ff4b 	bl	800a7d4 <_malloc_r>
 800a93e:	4604      	mov	r4, r0
 800a940:	b140      	cbz	r0, 800a954 <__sfmoreglue+0x28>
 800a942:	2100      	movs	r1, #0
 800a944:	e9c0 1600 	strd	r1, r6, [r0]
 800a948:	300c      	adds	r0, #12
 800a94a:	60a0      	str	r0, [r4, #8]
 800a94c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a950:	f7ff fee8 	bl	800a724 <memset>
 800a954:	4620      	mov	r0, r4
 800a956:	bd70      	pop	{r4, r5, r6, pc}

0800a958 <__sfp_lock_acquire>:
 800a958:	4801      	ldr	r0, [pc, #4]	; (800a960 <__sfp_lock_acquire+0x8>)
 800a95a:	f000 b8b3 	b.w	800aac4 <__retarget_lock_acquire_recursive>
 800a95e:	bf00      	nop
 800a960:	2000291c 	.word	0x2000291c

0800a964 <__sfp_lock_release>:
 800a964:	4801      	ldr	r0, [pc, #4]	; (800a96c <__sfp_lock_release+0x8>)
 800a966:	f000 b8ae 	b.w	800aac6 <__retarget_lock_release_recursive>
 800a96a:	bf00      	nop
 800a96c:	2000291c 	.word	0x2000291c

0800a970 <__sinit_lock_acquire>:
 800a970:	4801      	ldr	r0, [pc, #4]	; (800a978 <__sinit_lock_acquire+0x8>)
 800a972:	f000 b8a7 	b.w	800aac4 <__retarget_lock_acquire_recursive>
 800a976:	bf00      	nop
 800a978:	20002917 	.word	0x20002917

0800a97c <__sinit_lock_release>:
 800a97c:	4801      	ldr	r0, [pc, #4]	; (800a984 <__sinit_lock_release+0x8>)
 800a97e:	f000 b8a2 	b.w	800aac6 <__retarget_lock_release_recursive>
 800a982:	bf00      	nop
 800a984:	20002917 	.word	0x20002917

0800a988 <__sinit>:
 800a988:	b510      	push	{r4, lr}
 800a98a:	4604      	mov	r4, r0
 800a98c:	f7ff fff0 	bl	800a970 <__sinit_lock_acquire>
 800a990:	69a3      	ldr	r3, [r4, #24]
 800a992:	b11b      	cbz	r3, 800a99c <__sinit+0x14>
 800a994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a998:	f7ff bff0 	b.w	800a97c <__sinit_lock_release>
 800a99c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a9a2:	4b13      	ldr	r3, [pc, #76]	; (800a9f0 <__sinit+0x68>)
 800a9a4:	4a13      	ldr	r2, [pc, #76]	; (800a9f4 <__sinit+0x6c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9aa:	42a3      	cmp	r3, r4
 800a9ac:	bf04      	itt	eq
 800a9ae:	2301      	moveq	r3, #1
 800a9b0:	61a3      	streq	r3, [r4, #24]
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 f820 	bl	800a9f8 <__sfp>
 800a9b8:	6060      	str	r0, [r4, #4]
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 f81c 	bl	800a9f8 <__sfp>
 800a9c0:	60a0      	str	r0, [r4, #8]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 f818 	bl	800a9f8 <__sfp>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	60e0      	str	r0, [r4, #12]
 800a9cc:	2104      	movs	r1, #4
 800a9ce:	6860      	ldr	r0, [r4, #4]
 800a9d0:	f7ff ff82 	bl	800a8d8 <std>
 800a9d4:	68a0      	ldr	r0, [r4, #8]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	2109      	movs	r1, #9
 800a9da:	f7ff ff7d 	bl	800a8d8 <std>
 800a9de:	68e0      	ldr	r0, [r4, #12]
 800a9e0:	2202      	movs	r2, #2
 800a9e2:	2112      	movs	r1, #18
 800a9e4:	f7ff ff78 	bl	800a8d8 <std>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	61a3      	str	r3, [r4, #24]
 800a9ec:	e7d2      	b.n	800a994 <__sinit+0xc>
 800a9ee:	bf00      	nop
 800a9f0:	0800b67c 	.word	0x0800b67c
 800a9f4:	0800a921 	.word	0x0800a921

0800a9f8 <__sfp>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	f7ff ffac 	bl	800a958 <__sfp_lock_acquire>
 800aa00:	4b1e      	ldr	r3, [pc, #120]	; (800aa7c <__sfp+0x84>)
 800aa02:	681e      	ldr	r6, [r3, #0]
 800aa04:	69b3      	ldr	r3, [r6, #24]
 800aa06:	b913      	cbnz	r3, 800aa0e <__sfp+0x16>
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f7ff ffbd 	bl	800a988 <__sinit>
 800aa0e:	3648      	adds	r6, #72	; 0x48
 800aa10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	d503      	bpl.n	800aa20 <__sfp+0x28>
 800aa18:	6833      	ldr	r3, [r6, #0]
 800aa1a:	b30b      	cbz	r3, 800aa60 <__sfp+0x68>
 800aa1c:	6836      	ldr	r6, [r6, #0]
 800aa1e:	e7f7      	b.n	800aa10 <__sfp+0x18>
 800aa20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa24:	b9d5      	cbnz	r5, 800aa5c <__sfp+0x64>
 800aa26:	4b16      	ldr	r3, [pc, #88]	; (800aa80 <__sfp+0x88>)
 800aa28:	60e3      	str	r3, [r4, #12]
 800aa2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa2e:	6665      	str	r5, [r4, #100]	; 0x64
 800aa30:	f000 f847 	bl	800aac2 <__retarget_lock_init_recursive>
 800aa34:	f7ff ff96 	bl	800a964 <__sfp_lock_release>
 800aa38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa40:	6025      	str	r5, [r4, #0]
 800aa42:	61a5      	str	r5, [r4, #24]
 800aa44:	2208      	movs	r2, #8
 800aa46:	4629      	mov	r1, r5
 800aa48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa4c:	f7ff fe6a 	bl	800a724 <memset>
 800aa50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa58:	4620      	mov	r0, r4
 800aa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa5c:	3468      	adds	r4, #104	; 0x68
 800aa5e:	e7d9      	b.n	800aa14 <__sfp+0x1c>
 800aa60:	2104      	movs	r1, #4
 800aa62:	4638      	mov	r0, r7
 800aa64:	f7ff ff62 	bl	800a92c <__sfmoreglue>
 800aa68:	4604      	mov	r4, r0
 800aa6a:	6030      	str	r0, [r6, #0]
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d1d5      	bne.n	800aa1c <__sfp+0x24>
 800aa70:	f7ff ff78 	bl	800a964 <__sfp_lock_release>
 800aa74:	230c      	movs	r3, #12
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	e7ee      	b.n	800aa58 <__sfp+0x60>
 800aa7a:	bf00      	nop
 800aa7c:	0800b67c 	.word	0x0800b67c
 800aa80:	ffff0001 	.word	0xffff0001

0800aa84 <_fwalk_reent>:
 800aa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa88:	4606      	mov	r6, r0
 800aa8a:	4688      	mov	r8, r1
 800aa8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa90:	2700      	movs	r7, #0
 800aa92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa96:	f1b9 0901 	subs.w	r9, r9, #1
 800aa9a:	d505      	bpl.n	800aaa8 <_fwalk_reent+0x24>
 800aa9c:	6824      	ldr	r4, [r4, #0]
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	d1f7      	bne.n	800aa92 <_fwalk_reent+0xe>
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa8:	89ab      	ldrh	r3, [r5, #12]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d907      	bls.n	800aabe <_fwalk_reent+0x3a>
 800aaae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aab2:	3301      	adds	r3, #1
 800aab4:	d003      	beq.n	800aabe <_fwalk_reent+0x3a>
 800aab6:	4629      	mov	r1, r5
 800aab8:	4630      	mov	r0, r6
 800aaba:	47c0      	blx	r8
 800aabc:	4307      	orrs	r7, r0
 800aabe:	3568      	adds	r5, #104	; 0x68
 800aac0:	e7e9      	b.n	800aa96 <_fwalk_reent+0x12>

0800aac2 <__retarget_lock_init_recursive>:
 800aac2:	4770      	bx	lr

0800aac4 <__retarget_lock_acquire_recursive>:
 800aac4:	4770      	bx	lr

0800aac6 <__retarget_lock_release_recursive>:
 800aac6:	4770      	bx	lr

0800aac8 <__malloc_lock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	; (800aad0 <__malloc_lock+0x8>)
 800aaca:	f7ff bffb 	b.w	800aac4 <__retarget_lock_acquire_recursive>
 800aace:	bf00      	nop
 800aad0:	20002918 	.word	0x20002918

0800aad4 <__malloc_unlock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__malloc_unlock+0x8>)
 800aad6:	f7ff bff6 	b.w	800aac6 <__retarget_lock_release_recursive>
 800aada:	bf00      	nop
 800aadc:	20002918 	.word	0x20002918

0800aae0 <__sfputc_r>:
 800aae0:	6893      	ldr	r3, [r2, #8]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	b410      	push	{r4}
 800aae8:	6093      	str	r3, [r2, #8]
 800aaea:	da08      	bge.n	800aafe <__sfputc_r+0x1e>
 800aaec:	6994      	ldr	r4, [r2, #24]
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	db01      	blt.n	800aaf6 <__sfputc_r+0x16>
 800aaf2:	290a      	cmp	r1, #10
 800aaf4:	d103      	bne.n	800aafe <__sfputc_r+0x1e>
 800aaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aafa:	f000 bb23 	b.w	800b144 <__swbuf_r>
 800aafe:	6813      	ldr	r3, [r2, #0]
 800ab00:	1c58      	adds	r0, r3, #1
 800ab02:	6010      	str	r0, [r2, #0]
 800ab04:	7019      	strb	r1, [r3, #0]
 800ab06:	4608      	mov	r0, r1
 800ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <__sfputs_r>:
 800ab0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab10:	4606      	mov	r6, r0
 800ab12:	460f      	mov	r7, r1
 800ab14:	4614      	mov	r4, r2
 800ab16:	18d5      	adds	r5, r2, r3
 800ab18:	42ac      	cmp	r4, r5
 800ab1a:	d101      	bne.n	800ab20 <__sfputs_r+0x12>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e007      	b.n	800ab30 <__sfputs_r+0x22>
 800ab20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab24:	463a      	mov	r2, r7
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7ff ffda 	bl	800aae0 <__sfputc_r>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d1f3      	bne.n	800ab18 <__sfputs_r+0xa>
 800ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab34 <_vfiprintf_r>:
 800ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	460d      	mov	r5, r1
 800ab3a:	b09d      	sub	sp, #116	; 0x74
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	4698      	mov	r8, r3
 800ab40:	4606      	mov	r6, r0
 800ab42:	b118      	cbz	r0, 800ab4c <_vfiprintf_r+0x18>
 800ab44:	6983      	ldr	r3, [r0, #24]
 800ab46:	b90b      	cbnz	r3, 800ab4c <_vfiprintf_r+0x18>
 800ab48:	f7ff ff1e 	bl	800a988 <__sinit>
 800ab4c:	4b89      	ldr	r3, [pc, #548]	; (800ad74 <_vfiprintf_r+0x240>)
 800ab4e:	429d      	cmp	r5, r3
 800ab50:	d11b      	bne.n	800ab8a <_vfiprintf_r+0x56>
 800ab52:	6875      	ldr	r5, [r6, #4]
 800ab54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab56:	07d9      	lsls	r1, r3, #31
 800ab58:	d405      	bmi.n	800ab66 <_vfiprintf_r+0x32>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	059a      	lsls	r2, r3, #22
 800ab5e:	d402      	bmi.n	800ab66 <_vfiprintf_r+0x32>
 800ab60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab62:	f7ff ffaf 	bl	800aac4 <__retarget_lock_acquire_recursive>
 800ab66:	89ab      	ldrh	r3, [r5, #12]
 800ab68:	071b      	lsls	r3, r3, #28
 800ab6a:	d501      	bpl.n	800ab70 <_vfiprintf_r+0x3c>
 800ab6c:	692b      	ldr	r3, [r5, #16]
 800ab6e:	b9eb      	cbnz	r3, 800abac <_vfiprintf_r+0x78>
 800ab70:	4629      	mov	r1, r5
 800ab72:	4630      	mov	r0, r6
 800ab74:	f000 fb4a 	bl	800b20c <__swsetup_r>
 800ab78:	b1c0      	cbz	r0, 800abac <_vfiprintf_r+0x78>
 800ab7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab7c:	07dc      	lsls	r4, r3, #31
 800ab7e:	d50e      	bpl.n	800ab9e <_vfiprintf_r+0x6a>
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	b01d      	add	sp, #116	; 0x74
 800ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8a:	4b7b      	ldr	r3, [pc, #492]	; (800ad78 <_vfiprintf_r+0x244>)
 800ab8c:	429d      	cmp	r5, r3
 800ab8e:	d101      	bne.n	800ab94 <_vfiprintf_r+0x60>
 800ab90:	68b5      	ldr	r5, [r6, #8]
 800ab92:	e7df      	b.n	800ab54 <_vfiprintf_r+0x20>
 800ab94:	4b79      	ldr	r3, [pc, #484]	; (800ad7c <_vfiprintf_r+0x248>)
 800ab96:	429d      	cmp	r5, r3
 800ab98:	bf08      	it	eq
 800ab9a:	68f5      	ldreq	r5, [r6, #12]
 800ab9c:	e7da      	b.n	800ab54 <_vfiprintf_r+0x20>
 800ab9e:	89ab      	ldrh	r3, [r5, #12]
 800aba0:	0598      	lsls	r0, r3, #22
 800aba2:	d4ed      	bmi.n	800ab80 <_vfiprintf_r+0x4c>
 800aba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aba6:	f7ff ff8e 	bl	800aac6 <__retarget_lock_release_recursive>
 800abaa:	e7e9      	b.n	800ab80 <_vfiprintf_r+0x4c>
 800abac:	2300      	movs	r3, #0
 800abae:	9309      	str	r3, [sp, #36]	; 0x24
 800abb0:	2320      	movs	r3, #32
 800abb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800abba:	2330      	movs	r3, #48	; 0x30
 800abbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad80 <_vfiprintf_r+0x24c>
 800abc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abc4:	f04f 0901 	mov.w	r9, #1
 800abc8:	4623      	mov	r3, r4
 800abca:	469a      	mov	sl, r3
 800abcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd0:	b10a      	cbz	r2, 800abd6 <_vfiprintf_r+0xa2>
 800abd2:	2a25      	cmp	r2, #37	; 0x25
 800abd4:	d1f9      	bne.n	800abca <_vfiprintf_r+0x96>
 800abd6:	ebba 0b04 	subs.w	fp, sl, r4
 800abda:	d00b      	beq.n	800abf4 <_vfiprintf_r+0xc0>
 800abdc:	465b      	mov	r3, fp
 800abde:	4622      	mov	r2, r4
 800abe0:	4629      	mov	r1, r5
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff ff93 	bl	800ab0e <__sfputs_r>
 800abe8:	3001      	adds	r0, #1
 800abea:	f000 80aa 	beq.w	800ad42 <_vfiprintf_r+0x20e>
 800abee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf0:	445a      	add	r2, fp
 800abf2:	9209      	str	r2, [sp, #36]	; 0x24
 800abf4:	f89a 3000 	ldrb.w	r3, [sl]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 80a2 	beq.w	800ad42 <_vfiprintf_r+0x20e>
 800abfe:	2300      	movs	r3, #0
 800ac00:	f04f 32ff 	mov.w	r2, #4294967295
 800ac04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac08:	f10a 0a01 	add.w	sl, sl, #1
 800ac0c:	9304      	str	r3, [sp, #16]
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac14:	931a      	str	r3, [sp, #104]	; 0x68
 800ac16:	4654      	mov	r4, sl
 800ac18:	2205      	movs	r2, #5
 800ac1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1e:	4858      	ldr	r0, [pc, #352]	; (800ad80 <_vfiprintf_r+0x24c>)
 800ac20:	f7f5 faee 	bl	8000200 <memchr>
 800ac24:	9a04      	ldr	r2, [sp, #16]
 800ac26:	b9d8      	cbnz	r0, 800ac60 <_vfiprintf_r+0x12c>
 800ac28:	06d1      	lsls	r1, r2, #27
 800ac2a:	bf44      	itt	mi
 800ac2c:	2320      	movmi	r3, #32
 800ac2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac32:	0713      	lsls	r3, r2, #28
 800ac34:	bf44      	itt	mi
 800ac36:	232b      	movmi	r3, #43	; 0x2b
 800ac38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac40:	2b2a      	cmp	r3, #42	; 0x2a
 800ac42:	d015      	beq.n	800ac70 <_vfiprintf_r+0x13c>
 800ac44:	9a07      	ldr	r2, [sp, #28]
 800ac46:	4654      	mov	r4, sl
 800ac48:	2000      	movs	r0, #0
 800ac4a:	f04f 0c0a 	mov.w	ip, #10
 800ac4e:	4621      	mov	r1, r4
 800ac50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac54:	3b30      	subs	r3, #48	; 0x30
 800ac56:	2b09      	cmp	r3, #9
 800ac58:	d94e      	bls.n	800acf8 <_vfiprintf_r+0x1c4>
 800ac5a:	b1b0      	cbz	r0, 800ac8a <_vfiprintf_r+0x156>
 800ac5c:	9207      	str	r2, [sp, #28]
 800ac5e:	e014      	b.n	800ac8a <_vfiprintf_r+0x156>
 800ac60:	eba0 0308 	sub.w	r3, r0, r8
 800ac64:	fa09 f303 	lsl.w	r3, r9, r3
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	9304      	str	r3, [sp, #16]
 800ac6c:	46a2      	mov	sl, r4
 800ac6e:	e7d2      	b.n	800ac16 <_vfiprintf_r+0xe2>
 800ac70:	9b03      	ldr	r3, [sp, #12]
 800ac72:	1d19      	adds	r1, r3, #4
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	9103      	str	r1, [sp, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bfbb      	ittet	lt
 800ac7c:	425b      	neglt	r3, r3
 800ac7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac82:	9307      	strge	r3, [sp, #28]
 800ac84:	9307      	strlt	r3, [sp, #28]
 800ac86:	bfb8      	it	lt
 800ac88:	9204      	strlt	r2, [sp, #16]
 800ac8a:	7823      	ldrb	r3, [r4, #0]
 800ac8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac8e:	d10c      	bne.n	800acaa <_vfiprintf_r+0x176>
 800ac90:	7863      	ldrb	r3, [r4, #1]
 800ac92:	2b2a      	cmp	r3, #42	; 0x2a
 800ac94:	d135      	bne.n	800ad02 <_vfiprintf_r+0x1ce>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	1d1a      	adds	r2, r3, #4
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	9203      	str	r2, [sp, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	bfb8      	it	lt
 800aca2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aca6:	3402      	adds	r4, #2
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad90 <_vfiprintf_r+0x25c>
 800acae:	7821      	ldrb	r1, [r4, #0]
 800acb0:	2203      	movs	r2, #3
 800acb2:	4650      	mov	r0, sl
 800acb4:	f7f5 faa4 	bl	8000200 <memchr>
 800acb8:	b140      	cbz	r0, 800accc <_vfiprintf_r+0x198>
 800acba:	2340      	movs	r3, #64	; 0x40
 800acbc:	eba0 000a 	sub.w	r0, r0, sl
 800acc0:	fa03 f000 	lsl.w	r0, r3, r0
 800acc4:	9b04      	ldr	r3, [sp, #16]
 800acc6:	4303      	orrs	r3, r0
 800acc8:	3401      	adds	r4, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd0:	482c      	ldr	r0, [pc, #176]	; (800ad84 <_vfiprintf_r+0x250>)
 800acd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acd6:	2206      	movs	r2, #6
 800acd8:	f7f5 fa92 	bl	8000200 <memchr>
 800acdc:	2800      	cmp	r0, #0
 800acde:	d03f      	beq.n	800ad60 <_vfiprintf_r+0x22c>
 800ace0:	4b29      	ldr	r3, [pc, #164]	; (800ad88 <_vfiprintf_r+0x254>)
 800ace2:	bb1b      	cbnz	r3, 800ad2c <_vfiprintf_r+0x1f8>
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	3307      	adds	r3, #7
 800ace8:	f023 0307 	bic.w	r3, r3, #7
 800acec:	3308      	adds	r3, #8
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf2:	443b      	add	r3, r7
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	e767      	b.n	800abc8 <_vfiprintf_r+0x94>
 800acf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acfc:	460c      	mov	r4, r1
 800acfe:	2001      	movs	r0, #1
 800ad00:	e7a5      	b.n	800ac4e <_vfiprintf_r+0x11a>
 800ad02:	2300      	movs	r3, #0
 800ad04:	3401      	adds	r4, #1
 800ad06:	9305      	str	r3, [sp, #20]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	f04f 0c0a 	mov.w	ip, #10
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad14:	3a30      	subs	r2, #48	; 0x30
 800ad16:	2a09      	cmp	r2, #9
 800ad18:	d903      	bls.n	800ad22 <_vfiprintf_r+0x1ee>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0c5      	beq.n	800acaa <_vfiprintf_r+0x176>
 800ad1e:	9105      	str	r1, [sp, #20]
 800ad20:	e7c3      	b.n	800acaa <_vfiprintf_r+0x176>
 800ad22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad26:	4604      	mov	r4, r0
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e7f0      	b.n	800ad0e <_vfiprintf_r+0x1da>
 800ad2c:	ab03      	add	r3, sp, #12
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	462a      	mov	r2, r5
 800ad32:	4b16      	ldr	r3, [pc, #88]	; (800ad8c <_vfiprintf_r+0x258>)
 800ad34:	a904      	add	r1, sp, #16
 800ad36:	4630      	mov	r0, r6
 800ad38:	f3af 8000 	nop.w
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	1c78      	adds	r0, r7, #1
 800ad40:	d1d6      	bne.n	800acf0 <_vfiprintf_r+0x1bc>
 800ad42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad44:	07d9      	lsls	r1, r3, #31
 800ad46:	d405      	bmi.n	800ad54 <_vfiprintf_r+0x220>
 800ad48:	89ab      	ldrh	r3, [r5, #12]
 800ad4a:	059a      	lsls	r2, r3, #22
 800ad4c:	d402      	bmi.n	800ad54 <_vfiprintf_r+0x220>
 800ad4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad50:	f7ff feb9 	bl	800aac6 <__retarget_lock_release_recursive>
 800ad54:	89ab      	ldrh	r3, [r5, #12]
 800ad56:	065b      	lsls	r3, r3, #25
 800ad58:	f53f af12 	bmi.w	800ab80 <_vfiprintf_r+0x4c>
 800ad5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad5e:	e711      	b.n	800ab84 <_vfiprintf_r+0x50>
 800ad60:	ab03      	add	r3, sp, #12
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	462a      	mov	r2, r5
 800ad66:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <_vfiprintf_r+0x258>)
 800ad68:	a904      	add	r1, sp, #16
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f000 f880 	bl	800ae70 <_printf_i>
 800ad70:	e7e4      	b.n	800ad3c <_vfiprintf_r+0x208>
 800ad72:	bf00      	nop
 800ad74:	0800b6a0 	.word	0x0800b6a0
 800ad78:	0800b6c0 	.word	0x0800b6c0
 800ad7c:	0800b680 	.word	0x0800b680
 800ad80:	0800b6e0 	.word	0x0800b6e0
 800ad84:	0800b6ea 	.word	0x0800b6ea
 800ad88:	00000000 	.word	0x00000000
 800ad8c:	0800ab0f 	.word	0x0800ab0f
 800ad90:	0800b6e6 	.word	0x0800b6e6

0800ad94 <_printf_common>:
 800ad94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad98:	4616      	mov	r6, r2
 800ad9a:	4699      	mov	r9, r3
 800ad9c:	688a      	ldr	r2, [r1, #8]
 800ad9e:	690b      	ldr	r3, [r1, #16]
 800ada0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ada4:	4293      	cmp	r3, r2
 800ada6:	bfb8      	it	lt
 800ada8:	4613      	movlt	r3, r2
 800adaa:	6033      	str	r3, [r6, #0]
 800adac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800adb0:	4607      	mov	r7, r0
 800adb2:	460c      	mov	r4, r1
 800adb4:	b10a      	cbz	r2, 800adba <_printf_common+0x26>
 800adb6:	3301      	adds	r3, #1
 800adb8:	6033      	str	r3, [r6, #0]
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	0699      	lsls	r1, r3, #26
 800adbe:	bf42      	ittt	mi
 800adc0:	6833      	ldrmi	r3, [r6, #0]
 800adc2:	3302      	addmi	r3, #2
 800adc4:	6033      	strmi	r3, [r6, #0]
 800adc6:	6825      	ldr	r5, [r4, #0]
 800adc8:	f015 0506 	ands.w	r5, r5, #6
 800adcc:	d106      	bne.n	800addc <_printf_common+0x48>
 800adce:	f104 0a19 	add.w	sl, r4, #25
 800add2:	68e3      	ldr	r3, [r4, #12]
 800add4:	6832      	ldr	r2, [r6, #0]
 800add6:	1a9b      	subs	r3, r3, r2
 800add8:	42ab      	cmp	r3, r5
 800adda:	dc26      	bgt.n	800ae2a <_printf_common+0x96>
 800addc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ade0:	1e13      	subs	r3, r2, #0
 800ade2:	6822      	ldr	r2, [r4, #0]
 800ade4:	bf18      	it	ne
 800ade6:	2301      	movne	r3, #1
 800ade8:	0692      	lsls	r2, r2, #26
 800adea:	d42b      	bmi.n	800ae44 <_printf_common+0xb0>
 800adec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800adf0:	4649      	mov	r1, r9
 800adf2:	4638      	mov	r0, r7
 800adf4:	47c0      	blx	r8
 800adf6:	3001      	adds	r0, #1
 800adf8:	d01e      	beq.n	800ae38 <_printf_common+0xa4>
 800adfa:	6823      	ldr	r3, [r4, #0]
 800adfc:	68e5      	ldr	r5, [r4, #12]
 800adfe:	6832      	ldr	r2, [r6, #0]
 800ae00:	f003 0306 	and.w	r3, r3, #6
 800ae04:	2b04      	cmp	r3, #4
 800ae06:	bf08      	it	eq
 800ae08:	1aad      	subeq	r5, r5, r2
 800ae0a:	68a3      	ldr	r3, [r4, #8]
 800ae0c:	6922      	ldr	r2, [r4, #16]
 800ae0e:	bf0c      	ite	eq
 800ae10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae14:	2500      	movne	r5, #0
 800ae16:	4293      	cmp	r3, r2
 800ae18:	bfc4      	itt	gt
 800ae1a:	1a9b      	subgt	r3, r3, r2
 800ae1c:	18ed      	addgt	r5, r5, r3
 800ae1e:	2600      	movs	r6, #0
 800ae20:	341a      	adds	r4, #26
 800ae22:	42b5      	cmp	r5, r6
 800ae24:	d11a      	bne.n	800ae5c <_printf_common+0xc8>
 800ae26:	2000      	movs	r0, #0
 800ae28:	e008      	b.n	800ae3c <_printf_common+0xa8>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	4652      	mov	r2, sl
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4638      	mov	r0, r7
 800ae32:	47c0      	blx	r8
 800ae34:	3001      	adds	r0, #1
 800ae36:	d103      	bne.n	800ae40 <_printf_common+0xac>
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae40:	3501      	adds	r5, #1
 800ae42:	e7c6      	b.n	800add2 <_printf_common+0x3e>
 800ae44:	18e1      	adds	r1, r4, r3
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	2030      	movs	r0, #48	; 0x30
 800ae4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae4e:	4422      	add	r2, r4
 800ae50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae58:	3302      	adds	r3, #2
 800ae5a:	e7c7      	b.n	800adec <_printf_common+0x58>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4622      	mov	r2, r4
 800ae60:	4649      	mov	r1, r9
 800ae62:	4638      	mov	r0, r7
 800ae64:	47c0      	blx	r8
 800ae66:	3001      	adds	r0, #1
 800ae68:	d0e6      	beq.n	800ae38 <_printf_common+0xa4>
 800ae6a:	3601      	adds	r6, #1
 800ae6c:	e7d9      	b.n	800ae22 <_printf_common+0x8e>
	...

0800ae70 <_printf_i>:
 800ae70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae74:	460c      	mov	r4, r1
 800ae76:	4691      	mov	r9, r2
 800ae78:	7e27      	ldrb	r7, [r4, #24]
 800ae7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae7c:	2f78      	cmp	r7, #120	; 0x78
 800ae7e:	4680      	mov	r8, r0
 800ae80:	469a      	mov	sl, r3
 800ae82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae86:	d807      	bhi.n	800ae98 <_printf_i+0x28>
 800ae88:	2f62      	cmp	r7, #98	; 0x62
 800ae8a:	d80a      	bhi.n	800aea2 <_printf_i+0x32>
 800ae8c:	2f00      	cmp	r7, #0
 800ae8e:	f000 80d8 	beq.w	800b042 <_printf_i+0x1d2>
 800ae92:	2f58      	cmp	r7, #88	; 0x58
 800ae94:	f000 80a3 	beq.w	800afde <_printf_i+0x16e>
 800ae98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ae9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aea0:	e03a      	b.n	800af18 <_printf_i+0xa8>
 800aea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aea6:	2b15      	cmp	r3, #21
 800aea8:	d8f6      	bhi.n	800ae98 <_printf_i+0x28>
 800aeaa:	a001      	add	r0, pc, #4	; (adr r0, 800aeb0 <_printf_i+0x40>)
 800aeac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aeb0:	0800af09 	.word	0x0800af09
 800aeb4:	0800af1d 	.word	0x0800af1d
 800aeb8:	0800ae99 	.word	0x0800ae99
 800aebc:	0800ae99 	.word	0x0800ae99
 800aec0:	0800ae99 	.word	0x0800ae99
 800aec4:	0800ae99 	.word	0x0800ae99
 800aec8:	0800af1d 	.word	0x0800af1d
 800aecc:	0800ae99 	.word	0x0800ae99
 800aed0:	0800ae99 	.word	0x0800ae99
 800aed4:	0800ae99 	.word	0x0800ae99
 800aed8:	0800ae99 	.word	0x0800ae99
 800aedc:	0800b029 	.word	0x0800b029
 800aee0:	0800af4d 	.word	0x0800af4d
 800aee4:	0800b00b 	.word	0x0800b00b
 800aee8:	0800ae99 	.word	0x0800ae99
 800aeec:	0800ae99 	.word	0x0800ae99
 800aef0:	0800b04b 	.word	0x0800b04b
 800aef4:	0800ae99 	.word	0x0800ae99
 800aef8:	0800af4d 	.word	0x0800af4d
 800aefc:	0800ae99 	.word	0x0800ae99
 800af00:	0800ae99 	.word	0x0800ae99
 800af04:	0800b013 	.word	0x0800b013
 800af08:	680b      	ldr	r3, [r1, #0]
 800af0a:	1d1a      	adds	r2, r3, #4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	600a      	str	r2, [r1, #0]
 800af10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af18:	2301      	movs	r3, #1
 800af1a:	e0a3      	b.n	800b064 <_printf_i+0x1f4>
 800af1c:	6825      	ldr	r5, [r4, #0]
 800af1e:	6808      	ldr	r0, [r1, #0]
 800af20:	062e      	lsls	r6, r5, #24
 800af22:	f100 0304 	add.w	r3, r0, #4
 800af26:	d50a      	bpl.n	800af3e <_printf_i+0xce>
 800af28:	6805      	ldr	r5, [r0, #0]
 800af2a:	600b      	str	r3, [r1, #0]
 800af2c:	2d00      	cmp	r5, #0
 800af2e:	da03      	bge.n	800af38 <_printf_i+0xc8>
 800af30:	232d      	movs	r3, #45	; 0x2d
 800af32:	426d      	negs	r5, r5
 800af34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af38:	485e      	ldr	r0, [pc, #376]	; (800b0b4 <_printf_i+0x244>)
 800af3a:	230a      	movs	r3, #10
 800af3c:	e019      	b.n	800af72 <_printf_i+0x102>
 800af3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800af42:	6805      	ldr	r5, [r0, #0]
 800af44:	600b      	str	r3, [r1, #0]
 800af46:	bf18      	it	ne
 800af48:	b22d      	sxthne	r5, r5
 800af4a:	e7ef      	b.n	800af2c <_printf_i+0xbc>
 800af4c:	680b      	ldr	r3, [r1, #0]
 800af4e:	6825      	ldr	r5, [r4, #0]
 800af50:	1d18      	adds	r0, r3, #4
 800af52:	6008      	str	r0, [r1, #0]
 800af54:	0628      	lsls	r0, r5, #24
 800af56:	d501      	bpl.n	800af5c <_printf_i+0xec>
 800af58:	681d      	ldr	r5, [r3, #0]
 800af5a:	e002      	b.n	800af62 <_printf_i+0xf2>
 800af5c:	0669      	lsls	r1, r5, #25
 800af5e:	d5fb      	bpl.n	800af58 <_printf_i+0xe8>
 800af60:	881d      	ldrh	r5, [r3, #0]
 800af62:	4854      	ldr	r0, [pc, #336]	; (800b0b4 <_printf_i+0x244>)
 800af64:	2f6f      	cmp	r7, #111	; 0x6f
 800af66:	bf0c      	ite	eq
 800af68:	2308      	moveq	r3, #8
 800af6a:	230a      	movne	r3, #10
 800af6c:	2100      	movs	r1, #0
 800af6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af72:	6866      	ldr	r6, [r4, #4]
 800af74:	60a6      	str	r6, [r4, #8]
 800af76:	2e00      	cmp	r6, #0
 800af78:	bfa2      	ittt	ge
 800af7a:	6821      	ldrge	r1, [r4, #0]
 800af7c:	f021 0104 	bicge.w	r1, r1, #4
 800af80:	6021      	strge	r1, [r4, #0]
 800af82:	b90d      	cbnz	r5, 800af88 <_printf_i+0x118>
 800af84:	2e00      	cmp	r6, #0
 800af86:	d04d      	beq.n	800b024 <_printf_i+0x1b4>
 800af88:	4616      	mov	r6, r2
 800af8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800af8e:	fb03 5711 	mls	r7, r3, r1, r5
 800af92:	5dc7      	ldrb	r7, [r0, r7]
 800af94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af98:	462f      	mov	r7, r5
 800af9a:	42bb      	cmp	r3, r7
 800af9c:	460d      	mov	r5, r1
 800af9e:	d9f4      	bls.n	800af8a <_printf_i+0x11a>
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d10b      	bne.n	800afbc <_printf_i+0x14c>
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	07df      	lsls	r7, r3, #31
 800afa8:	d508      	bpl.n	800afbc <_printf_i+0x14c>
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	6861      	ldr	r1, [r4, #4]
 800afae:	4299      	cmp	r1, r3
 800afb0:	bfde      	ittt	le
 800afb2:	2330      	movle	r3, #48	; 0x30
 800afb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afbc:	1b92      	subs	r2, r2, r6
 800afbe:	6122      	str	r2, [r4, #16]
 800afc0:	f8cd a000 	str.w	sl, [sp]
 800afc4:	464b      	mov	r3, r9
 800afc6:	aa03      	add	r2, sp, #12
 800afc8:	4621      	mov	r1, r4
 800afca:	4640      	mov	r0, r8
 800afcc:	f7ff fee2 	bl	800ad94 <_printf_common>
 800afd0:	3001      	adds	r0, #1
 800afd2:	d14c      	bne.n	800b06e <_printf_i+0x1fe>
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	b004      	add	sp, #16
 800afda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afde:	4835      	ldr	r0, [pc, #212]	; (800b0b4 <_printf_i+0x244>)
 800afe0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	680e      	ldr	r6, [r1, #0]
 800afe8:	061f      	lsls	r7, r3, #24
 800afea:	f856 5b04 	ldr.w	r5, [r6], #4
 800afee:	600e      	str	r6, [r1, #0]
 800aff0:	d514      	bpl.n	800b01c <_printf_i+0x1ac>
 800aff2:	07d9      	lsls	r1, r3, #31
 800aff4:	bf44      	itt	mi
 800aff6:	f043 0320 	orrmi.w	r3, r3, #32
 800affa:	6023      	strmi	r3, [r4, #0]
 800affc:	b91d      	cbnz	r5, 800b006 <_printf_i+0x196>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	f023 0320 	bic.w	r3, r3, #32
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	2310      	movs	r3, #16
 800b008:	e7b0      	b.n	800af6c <_printf_i+0xfc>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	f043 0320 	orr.w	r3, r3, #32
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	2378      	movs	r3, #120	; 0x78
 800b014:	4828      	ldr	r0, [pc, #160]	; (800b0b8 <_printf_i+0x248>)
 800b016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b01a:	e7e3      	b.n	800afe4 <_printf_i+0x174>
 800b01c:	065e      	lsls	r6, r3, #25
 800b01e:	bf48      	it	mi
 800b020:	b2ad      	uxthmi	r5, r5
 800b022:	e7e6      	b.n	800aff2 <_printf_i+0x182>
 800b024:	4616      	mov	r6, r2
 800b026:	e7bb      	b.n	800afa0 <_printf_i+0x130>
 800b028:	680b      	ldr	r3, [r1, #0]
 800b02a:	6826      	ldr	r6, [r4, #0]
 800b02c:	6960      	ldr	r0, [r4, #20]
 800b02e:	1d1d      	adds	r5, r3, #4
 800b030:	600d      	str	r5, [r1, #0]
 800b032:	0635      	lsls	r5, r6, #24
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	d501      	bpl.n	800b03c <_printf_i+0x1cc>
 800b038:	6018      	str	r0, [r3, #0]
 800b03a:	e002      	b.n	800b042 <_printf_i+0x1d2>
 800b03c:	0671      	lsls	r1, r6, #25
 800b03e:	d5fb      	bpl.n	800b038 <_printf_i+0x1c8>
 800b040:	8018      	strh	r0, [r3, #0]
 800b042:	2300      	movs	r3, #0
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	4616      	mov	r6, r2
 800b048:	e7ba      	b.n	800afc0 <_printf_i+0x150>
 800b04a:	680b      	ldr	r3, [r1, #0]
 800b04c:	1d1a      	adds	r2, r3, #4
 800b04e:	600a      	str	r2, [r1, #0]
 800b050:	681e      	ldr	r6, [r3, #0]
 800b052:	6862      	ldr	r2, [r4, #4]
 800b054:	2100      	movs	r1, #0
 800b056:	4630      	mov	r0, r6
 800b058:	f7f5 f8d2 	bl	8000200 <memchr>
 800b05c:	b108      	cbz	r0, 800b062 <_printf_i+0x1f2>
 800b05e:	1b80      	subs	r0, r0, r6
 800b060:	6060      	str	r0, [r4, #4]
 800b062:	6863      	ldr	r3, [r4, #4]
 800b064:	6123      	str	r3, [r4, #16]
 800b066:	2300      	movs	r3, #0
 800b068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b06c:	e7a8      	b.n	800afc0 <_printf_i+0x150>
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	4632      	mov	r2, r6
 800b072:	4649      	mov	r1, r9
 800b074:	4640      	mov	r0, r8
 800b076:	47d0      	blx	sl
 800b078:	3001      	adds	r0, #1
 800b07a:	d0ab      	beq.n	800afd4 <_printf_i+0x164>
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	079b      	lsls	r3, r3, #30
 800b080:	d413      	bmi.n	800b0aa <_printf_i+0x23a>
 800b082:	68e0      	ldr	r0, [r4, #12]
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	4298      	cmp	r0, r3
 800b088:	bfb8      	it	lt
 800b08a:	4618      	movlt	r0, r3
 800b08c:	e7a4      	b.n	800afd8 <_printf_i+0x168>
 800b08e:	2301      	movs	r3, #1
 800b090:	4632      	mov	r2, r6
 800b092:	4649      	mov	r1, r9
 800b094:	4640      	mov	r0, r8
 800b096:	47d0      	blx	sl
 800b098:	3001      	adds	r0, #1
 800b09a:	d09b      	beq.n	800afd4 <_printf_i+0x164>
 800b09c:	3501      	adds	r5, #1
 800b09e:	68e3      	ldr	r3, [r4, #12]
 800b0a0:	9903      	ldr	r1, [sp, #12]
 800b0a2:	1a5b      	subs	r3, r3, r1
 800b0a4:	42ab      	cmp	r3, r5
 800b0a6:	dcf2      	bgt.n	800b08e <_printf_i+0x21e>
 800b0a8:	e7eb      	b.n	800b082 <_printf_i+0x212>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	f104 0619 	add.w	r6, r4, #25
 800b0b0:	e7f5      	b.n	800b09e <_printf_i+0x22e>
 800b0b2:	bf00      	nop
 800b0b4:	0800b6f1 	.word	0x0800b6f1
 800b0b8:	0800b702 	.word	0x0800b702

0800b0bc <__sread>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	460c      	mov	r4, r1
 800b0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c4:	f000 fa58 	bl	800b578 <_read_r>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	bfab      	itete	ge
 800b0cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b0d0:	181b      	addge	r3, r3, r0
 800b0d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0d6:	bfac      	ite	ge
 800b0d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0da:	81a3      	strhlt	r3, [r4, #12]
 800b0dc:	bd10      	pop	{r4, pc}

0800b0de <__swrite>:
 800b0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e2:	461f      	mov	r7, r3
 800b0e4:	898b      	ldrh	r3, [r1, #12]
 800b0e6:	05db      	lsls	r3, r3, #23
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	d505      	bpl.n	800b0fc <__swrite+0x1e>
 800b0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f000 f9c8 	bl	800b48c <_lseek_r>
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b106:	81a3      	strh	r3, [r4, #12]
 800b108:	4632      	mov	r2, r6
 800b10a:	463b      	mov	r3, r7
 800b10c:	4628      	mov	r0, r5
 800b10e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b112:	f000 b869 	b.w	800b1e8 <_write_r>

0800b116 <__sseek>:
 800b116:	b510      	push	{r4, lr}
 800b118:	460c      	mov	r4, r1
 800b11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b11e:	f000 f9b5 	bl	800b48c <_lseek_r>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	bf15      	itete	ne
 800b128:	6560      	strne	r0, [r4, #84]	; 0x54
 800b12a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b12e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b132:	81a3      	strheq	r3, [r4, #12]
 800b134:	bf18      	it	ne
 800b136:	81a3      	strhne	r3, [r4, #12]
 800b138:	bd10      	pop	{r4, pc}

0800b13a <__sclose>:
 800b13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b13e:	f000 b8d3 	b.w	800b2e8 <_close_r>
	...

0800b144 <__swbuf_r>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	460e      	mov	r6, r1
 800b148:	4614      	mov	r4, r2
 800b14a:	4605      	mov	r5, r0
 800b14c:	b118      	cbz	r0, 800b156 <__swbuf_r+0x12>
 800b14e:	6983      	ldr	r3, [r0, #24]
 800b150:	b90b      	cbnz	r3, 800b156 <__swbuf_r+0x12>
 800b152:	f7ff fc19 	bl	800a988 <__sinit>
 800b156:	4b21      	ldr	r3, [pc, #132]	; (800b1dc <__swbuf_r+0x98>)
 800b158:	429c      	cmp	r4, r3
 800b15a:	d12b      	bne.n	800b1b4 <__swbuf_r+0x70>
 800b15c:	686c      	ldr	r4, [r5, #4]
 800b15e:	69a3      	ldr	r3, [r4, #24]
 800b160:	60a3      	str	r3, [r4, #8]
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	071a      	lsls	r2, r3, #28
 800b166:	d52f      	bpl.n	800b1c8 <__swbuf_r+0x84>
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	b36b      	cbz	r3, 800b1c8 <__swbuf_r+0x84>
 800b16c:	6923      	ldr	r3, [r4, #16]
 800b16e:	6820      	ldr	r0, [r4, #0]
 800b170:	1ac0      	subs	r0, r0, r3
 800b172:	6963      	ldr	r3, [r4, #20]
 800b174:	b2f6      	uxtb	r6, r6
 800b176:	4283      	cmp	r3, r0
 800b178:	4637      	mov	r7, r6
 800b17a:	dc04      	bgt.n	800b186 <__swbuf_r+0x42>
 800b17c:	4621      	mov	r1, r4
 800b17e:	4628      	mov	r0, r5
 800b180:	f000 f948 	bl	800b414 <_fflush_r>
 800b184:	bb30      	cbnz	r0, 800b1d4 <__swbuf_r+0x90>
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	3b01      	subs	r3, #1
 800b18a:	60a3      	str	r3, [r4, #8]
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	1c5a      	adds	r2, r3, #1
 800b190:	6022      	str	r2, [r4, #0]
 800b192:	701e      	strb	r6, [r3, #0]
 800b194:	6963      	ldr	r3, [r4, #20]
 800b196:	3001      	adds	r0, #1
 800b198:	4283      	cmp	r3, r0
 800b19a:	d004      	beq.n	800b1a6 <__swbuf_r+0x62>
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	07db      	lsls	r3, r3, #31
 800b1a0:	d506      	bpl.n	800b1b0 <__swbuf_r+0x6c>
 800b1a2:	2e0a      	cmp	r6, #10
 800b1a4:	d104      	bne.n	800b1b0 <__swbuf_r+0x6c>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	f000 f933 	bl	800b414 <_fflush_r>
 800b1ae:	b988      	cbnz	r0, 800b1d4 <__swbuf_r+0x90>
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b4:	4b0a      	ldr	r3, [pc, #40]	; (800b1e0 <__swbuf_r+0x9c>)
 800b1b6:	429c      	cmp	r4, r3
 800b1b8:	d101      	bne.n	800b1be <__swbuf_r+0x7a>
 800b1ba:	68ac      	ldr	r4, [r5, #8]
 800b1bc:	e7cf      	b.n	800b15e <__swbuf_r+0x1a>
 800b1be:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <__swbuf_r+0xa0>)
 800b1c0:	429c      	cmp	r4, r3
 800b1c2:	bf08      	it	eq
 800b1c4:	68ec      	ldreq	r4, [r5, #12]
 800b1c6:	e7ca      	b.n	800b15e <__swbuf_r+0x1a>
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f000 f81e 	bl	800b20c <__swsetup_r>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d0cb      	beq.n	800b16c <__swbuf_r+0x28>
 800b1d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b1d8:	e7ea      	b.n	800b1b0 <__swbuf_r+0x6c>
 800b1da:	bf00      	nop
 800b1dc:	0800b6a0 	.word	0x0800b6a0
 800b1e0:	0800b6c0 	.word	0x0800b6c0
 800b1e4:	0800b680 	.word	0x0800b680

0800b1e8 <_write_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4d07      	ldr	r5, [pc, #28]	; (800b208 <_write_r+0x20>)
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	4608      	mov	r0, r1
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	602a      	str	r2, [r5, #0]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	f7f5 fbaf 	bl	800095a <_write>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_write_r+0x1e>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_write_r+0x1e>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	20002920 	.word	0x20002920

0800b20c <__swsetup_r>:
 800b20c:	4b32      	ldr	r3, [pc, #200]	; (800b2d8 <__swsetup_r+0xcc>)
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	681d      	ldr	r5, [r3, #0]
 800b212:	4606      	mov	r6, r0
 800b214:	460c      	mov	r4, r1
 800b216:	b125      	cbz	r5, 800b222 <__swsetup_r+0x16>
 800b218:	69ab      	ldr	r3, [r5, #24]
 800b21a:	b913      	cbnz	r3, 800b222 <__swsetup_r+0x16>
 800b21c:	4628      	mov	r0, r5
 800b21e:	f7ff fbb3 	bl	800a988 <__sinit>
 800b222:	4b2e      	ldr	r3, [pc, #184]	; (800b2dc <__swsetup_r+0xd0>)
 800b224:	429c      	cmp	r4, r3
 800b226:	d10f      	bne.n	800b248 <__swsetup_r+0x3c>
 800b228:	686c      	ldr	r4, [r5, #4]
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b230:	0719      	lsls	r1, r3, #28
 800b232:	d42c      	bmi.n	800b28e <__swsetup_r+0x82>
 800b234:	06dd      	lsls	r5, r3, #27
 800b236:	d411      	bmi.n	800b25c <__swsetup_r+0x50>
 800b238:	2309      	movs	r3, #9
 800b23a:	6033      	str	r3, [r6, #0]
 800b23c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	f04f 30ff 	mov.w	r0, #4294967295
 800b246:	e03e      	b.n	800b2c6 <__swsetup_r+0xba>
 800b248:	4b25      	ldr	r3, [pc, #148]	; (800b2e0 <__swsetup_r+0xd4>)
 800b24a:	429c      	cmp	r4, r3
 800b24c:	d101      	bne.n	800b252 <__swsetup_r+0x46>
 800b24e:	68ac      	ldr	r4, [r5, #8]
 800b250:	e7eb      	b.n	800b22a <__swsetup_r+0x1e>
 800b252:	4b24      	ldr	r3, [pc, #144]	; (800b2e4 <__swsetup_r+0xd8>)
 800b254:	429c      	cmp	r4, r3
 800b256:	bf08      	it	eq
 800b258:	68ec      	ldreq	r4, [r5, #12]
 800b25a:	e7e6      	b.n	800b22a <__swsetup_r+0x1e>
 800b25c:	0758      	lsls	r0, r3, #29
 800b25e:	d512      	bpl.n	800b286 <__swsetup_r+0x7a>
 800b260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b262:	b141      	cbz	r1, 800b276 <__swsetup_r+0x6a>
 800b264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b268:	4299      	cmp	r1, r3
 800b26a:	d002      	beq.n	800b272 <__swsetup_r+0x66>
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff fa61 	bl	800a734 <_free_r>
 800b272:	2300      	movs	r3, #0
 800b274:	6363      	str	r3, [r4, #52]	; 0x34
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b27c:	81a3      	strh	r3, [r4, #12]
 800b27e:	2300      	movs	r3, #0
 800b280:	6063      	str	r3, [r4, #4]
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f043 0308 	orr.w	r3, r3, #8
 800b28c:	81a3      	strh	r3, [r4, #12]
 800b28e:	6923      	ldr	r3, [r4, #16]
 800b290:	b94b      	cbnz	r3, 800b2a6 <__swsetup_r+0x9a>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b29c:	d003      	beq.n	800b2a6 <__swsetup_r+0x9a>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f000 f929 	bl	800b4f8 <__smakebuf_r>
 800b2a6:	89a0      	ldrh	r0, [r4, #12]
 800b2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ac:	f010 0301 	ands.w	r3, r0, #1
 800b2b0:	d00a      	beq.n	800b2c8 <__swsetup_r+0xbc>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60a3      	str	r3, [r4, #8]
 800b2b6:	6963      	ldr	r3, [r4, #20]
 800b2b8:	425b      	negs	r3, r3
 800b2ba:	61a3      	str	r3, [r4, #24]
 800b2bc:	6923      	ldr	r3, [r4, #16]
 800b2be:	b943      	cbnz	r3, 800b2d2 <__swsetup_r+0xc6>
 800b2c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2c4:	d1ba      	bne.n	800b23c <__swsetup_r+0x30>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	0781      	lsls	r1, r0, #30
 800b2ca:	bf58      	it	pl
 800b2cc:	6963      	ldrpl	r3, [r4, #20]
 800b2ce:	60a3      	str	r3, [r4, #8]
 800b2d0:	e7f4      	b.n	800b2bc <__swsetup_r+0xb0>
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	e7f7      	b.n	800b2c6 <__swsetup_r+0xba>
 800b2d6:	bf00      	nop
 800b2d8:	2000002c 	.word	0x2000002c
 800b2dc:	0800b6a0 	.word	0x0800b6a0
 800b2e0:	0800b6c0 	.word	0x0800b6c0
 800b2e4:	0800b680 	.word	0x0800b680

0800b2e8 <_close_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d06      	ldr	r5, [pc, #24]	; (800b304 <_close_r+0x1c>)
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	602b      	str	r3, [r5, #0]
 800b2f4:	f7f5 fb4d 	bl	8000992 <_close>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	d102      	bne.n	800b302 <_close_r+0x1a>
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	b103      	cbz	r3, 800b302 <_close_r+0x1a>
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	20002920 	.word	0x20002920

0800b308 <__sflush_r>:
 800b308:	898a      	ldrh	r2, [r1, #12]
 800b30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30e:	4605      	mov	r5, r0
 800b310:	0710      	lsls	r0, r2, #28
 800b312:	460c      	mov	r4, r1
 800b314:	d458      	bmi.n	800b3c8 <__sflush_r+0xc0>
 800b316:	684b      	ldr	r3, [r1, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	dc05      	bgt.n	800b328 <__sflush_r+0x20>
 800b31c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dc02      	bgt.n	800b328 <__sflush_r+0x20>
 800b322:	2000      	movs	r0, #0
 800b324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b32a:	2e00      	cmp	r6, #0
 800b32c:	d0f9      	beq.n	800b322 <__sflush_r+0x1a>
 800b32e:	2300      	movs	r3, #0
 800b330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b334:	682f      	ldr	r7, [r5, #0]
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	d032      	beq.n	800b3a0 <__sflush_r+0x98>
 800b33a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	075a      	lsls	r2, r3, #29
 800b340:	d505      	bpl.n	800b34e <__sflush_r+0x46>
 800b342:	6863      	ldr	r3, [r4, #4]
 800b344:	1ac0      	subs	r0, r0, r3
 800b346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b348:	b10b      	cbz	r3, 800b34e <__sflush_r+0x46>
 800b34a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b34c:	1ac0      	subs	r0, r0, r3
 800b34e:	2300      	movs	r3, #0
 800b350:	4602      	mov	r2, r0
 800b352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b354:	6a21      	ldr	r1, [r4, #32]
 800b356:	4628      	mov	r0, r5
 800b358:	47b0      	blx	r6
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	d106      	bne.n	800b36e <__sflush_r+0x66>
 800b360:	6829      	ldr	r1, [r5, #0]
 800b362:	291d      	cmp	r1, #29
 800b364:	d82c      	bhi.n	800b3c0 <__sflush_r+0xb8>
 800b366:	4a2a      	ldr	r2, [pc, #168]	; (800b410 <__sflush_r+0x108>)
 800b368:	40ca      	lsrs	r2, r1
 800b36a:	07d6      	lsls	r6, r2, #31
 800b36c:	d528      	bpl.n	800b3c0 <__sflush_r+0xb8>
 800b36e:	2200      	movs	r2, #0
 800b370:	6062      	str	r2, [r4, #4]
 800b372:	04d9      	lsls	r1, r3, #19
 800b374:	6922      	ldr	r2, [r4, #16]
 800b376:	6022      	str	r2, [r4, #0]
 800b378:	d504      	bpl.n	800b384 <__sflush_r+0x7c>
 800b37a:	1c42      	adds	r2, r0, #1
 800b37c:	d101      	bne.n	800b382 <__sflush_r+0x7a>
 800b37e:	682b      	ldr	r3, [r5, #0]
 800b380:	b903      	cbnz	r3, 800b384 <__sflush_r+0x7c>
 800b382:	6560      	str	r0, [r4, #84]	; 0x54
 800b384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b386:	602f      	str	r7, [r5, #0]
 800b388:	2900      	cmp	r1, #0
 800b38a:	d0ca      	beq.n	800b322 <__sflush_r+0x1a>
 800b38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b390:	4299      	cmp	r1, r3
 800b392:	d002      	beq.n	800b39a <__sflush_r+0x92>
 800b394:	4628      	mov	r0, r5
 800b396:	f7ff f9cd 	bl	800a734 <_free_r>
 800b39a:	2000      	movs	r0, #0
 800b39c:	6360      	str	r0, [r4, #52]	; 0x34
 800b39e:	e7c1      	b.n	800b324 <__sflush_r+0x1c>
 800b3a0:	6a21      	ldr	r1, [r4, #32]
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b0      	blx	r6
 800b3a8:	1c41      	adds	r1, r0, #1
 800b3aa:	d1c7      	bne.n	800b33c <__sflush_r+0x34>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0c4      	beq.n	800b33c <__sflush_r+0x34>
 800b3b2:	2b1d      	cmp	r3, #29
 800b3b4:	d001      	beq.n	800b3ba <__sflush_r+0xb2>
 800b3b6:	2b16      	cmp	r3, #22
 800b3b8:	d101      	bne.n	800b3be <__sflush_r+0xb6>
 800b3ba:	602f      	str	r7, [r5, #0]
 800b3bc:	e7b1      	b.n	800b322 <__sflush_r+0x1a>
 800b3be:	89a3      	ldrh	r3, [r4, #12]
 800b3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	e7ad      	b.n	800b324 <__sflush_r+0x1c>
 800b3c8:	690f      	ldr	r7, [r1, #16]
 800b3ca:	2f00      	cmp	r7, #0
 800b3cc:	d0a9      	beq.n	800b322 <__sflush_r+0x1a>
 800b3ce:	0793      	lsls	r3, r2, #30
 800b3d0:	680e      	ldr	r6, [r1, #0]
 800b3d2:	bf08      	it	eq
 800b3d4:	694b      	ldreq	r3, [r1, #20]
 800b3d6:	600f      	str	r7, [r1, #0]
 800b3d8:	bf18      	it	ne
 800b3da:	2300      	movne	r3, #0
 800b3dc:	eba6 0807 	sub.w	r8, r6, r7
 800b3e0:	608b      	str	r3, [r1, #8]
 800b3e2:	f1b8 0f00 	cmp.w	r8, #0
 800b3e6:	dd9c      	ble.n	800b322 <__sflush_r+0x1a>
 800b3e8:	6a21      	ldr	r1, [r4, #32]
 800b3ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3ec:	4643      	mov	r3, r8
 800b3ee:	463a      	mov	r2, r7
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	47b0      	blx	r6
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	dc06      	bgt.n	800b406 <__sflush_r+0xfe>
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3fe:	81a3      	strh	r3, [r4, #12]
 800b400:	f04f 30ff 	mov.w	r0, #4294967295
 800b404:	e78e      	b.n	800b324 <__sflush_r+0x1c>
 800b406:	4407      	add	r7, r0
 800b408:	eba8 0800 	sub.w	r8, r8, r0
 800b40c:	e7e9      	b.n	800b3e2 <__sflush_r+0xda>
 800b40e:	bf00      	nop
 800b410:	20400001 	.word	0x20400001

0800b414 <_fflush_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	690b      	ldr	r3, [r1, #16]
 800b418:	4605      	mov	r5, r0
 800b41a:	460c      	mov	r4, r1
 800b41c:	b913      	cbnz	r3, 800b424 <_fflush_r+0x10>
 800b41e:	2500      	movs	r5, #0
 800b420:	4628      	mov	r0, r5
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	b118      	cbz	r0, 800b42e <_fflush_r+0x1a>
 800b426:	6983      	ldr	r3, [r0, #24]
 800b428:	b90b      	cbnz	r3, 800b42e <_fflush_r+0x1a>
 800b42a:	f7ff faad 	bl	800a988 <__sinit>
 800b42e:	4b14      	ldr	r3, [pc, #80]	; (800b480 <_fflush_r+0x6c>)
 800b430:	429c      	cmp	r4, r3
 800b432:	d11b      	bne.n	800b46c <_fflush_r+0x58>
 800b434:	686c      	ldr	r4, [r5, #4]
 800b436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0ef      	beq.n	800b41e <_fflush_r+0xa>
 800b43e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b440:	07d0      	lsls	r0, r2, #31
 800b442:	d404      	bmi.n	800b44e <_fflush_r+0x3a>
 800b444:	0599      	lsls	r1, r3, #22
 800b446:	d402      	bmi.n	800b44e <_fflush_r+0x3a>
 800b448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44a:	f7ff fb3b 	bl	800aac4 <__retarget_lock_acquire_recursive>
 800b44e:	4628      	mov	r0, r5
 800b450:	4621      	mov	r1, r4
 800b452:	f7ff ff59 	bl	800b308 <__sflush_r>
 800b456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b458:	07da      	lsls	r2, r3, #31
 800b45a:	4605      	mov	r5, r0
 800b45c:	d4e0      	bmi.n	800b420 <_fflush_r+0xc>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	059b      	lsls	r3, r3, #22
 800b462:	d4dd      	bmi.n	800b420 <_fflush_r+0xc>
 800b464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b466:	f7ff fb2e 	bl	800aac6 <__retarget_lock_release_recursive>
 800b46a:	e7d9      	b.n	800b420 <_fflush_r+0xc>
 800b46c:	4b05      	ldr	r3, [pc, #20]	; (800b484 <_fflush_r+0x70>)
 800b46e:	429c      	cmp	r4, r3
 800b470:	d101      	bne.n	800b476 <_fflush_r+0x62>
 800b472:	68ac      	ldr	r4, [r5, #8]
 800b474:	e7df      	b.n	800b436 <_fflush_r+0x22>
 800b476:	4b04      	ldr	r3, [pc, #16]	; (800b488 <_fflush_r+0x74>)
 800b478:	429c      	cmp	r4, r3
 800b47a:	bf08      	it	eq
 800b47c:	68ec      	ldreq	r4, [r5, #12]
 800b47e:	e7da      	b.n	800b436 <_fflush_r+0x22>
 800b480:	0800b6a0 	.word	0x0800b6a0
 800b484:	0800b6c0 	.word	0x0800b6c0
 800b488:	0800b680 	.word	0x0800b680

0800b48c <_lseek_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4d07      	ldr	r5, [pc, #28]	; (800b4ac <_lseek_r+0x20>)
 800b490:	4604      	mov	r4, r0
 800b492:	4608      	mov	r0, r1
 800b494:	4611      	mov	r1, r2
 800b496:	2200      	movs	r2, #0
 800b498:	602a      	str	r2, [r5, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f7f5 faa0 	bl	80009e0 <_lseek>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_lseek_r+0x1e>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_lseek_r+0x1e>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	20002920 	.word	0x20002920

0800b4b0 <__swhatbuf_r>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	460e      	mov	r6, r1
 800b4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b8:	2900      	cmp	r1, #0
 800b4ba:	b096      	sub	sp, #88	; 0x58
 800b4bc:	4614      	mov	r4, r2
 800b4be:	461d      	mov	r5, r3
 800b4c0:	da07      	bge.n	800b4d2 <__swhatbuf_r+0x22>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	602b      	str	r3, [r5, #0]
 800b4c6:	89b3      	ldrh	r3, [r6, #12]
 800b4c8:	061a      	lsls	r2, r3, #24
 800b4ca:	d410      	bmi.n	800b4ee <__swhatbuf_r+0x3e>
 800b4cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4d0:	e00e      	b.n	800b4f0 <__swhatbuf_r+0x40>
 800b4d2:	466a      	mov	r2, sp
 800b4d4:	f000 f862 	bl	800b59c <_fstat_r>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	dbf2      	blt.n	800b4c2 <__swhatbuf_r+0x12>
 800b4dc:	9a01      	ldr	r2, [sp, #4]
 800b4de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4e6:	425a      	negs	r2, r3
 800b4e8:	415a      	adcs	r2, r3
 800b4ea:	602a      	str	r2, [r5, #0]
 800b4ec:	e7ee      	b.n	800b4cc <__swhatbuf_r+0x1c>
 800b4ee:	2340      	movs	r3, #64	; 0x40
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	b016      	add	sp, #88	; 0x58
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}

0800b4f8 <__smakebuf_r>:
 800b4f8:	898b      	ldrh	r3, [r1, #12]
 800b4fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4fc:	079d      	lsls	r5, r3, #30
 800b4fe:	4606      	mov	r6, r0
 800b500:	460c      	mov	r4, r1
 800b502:	d507      	bpl.n	800b514 <__smakebuf_r+0x1c>
 800b504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	2301      	movs	r3, #1
 800b50e:	6163      	str	r3, [r4, #20]
 800b510:	b002      	add	sp, #8
 800b512:	bd70      	pop	{r4, r5, r6, pc}
 800b514:	ab01      	add	r3, sp, #4
 800b516:	466a      	mov	r2, sp
 800b518:	f7ff ffca 	bl	800b4b0 <__swhatbuf_r>
 800b51c:	9900      	ldr	r1, [sp, #0]
 800b51e:	4605      	mov	r5, r0
 800b520:	4630      	mov	r0, r6
 800b522:	f7ff f957 	bl	800a7d4 <_malloc_r>
 800b526:	b948      	cbnz	r0, 800b53c <__smakebuf_r+0x44>
 800b528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b52c:	059a      	lsls	r2, r3, #22
 800b52e:	d4ef      	bmi.n	800b510 <__smakebuf_r+0x18>
 800b530:	f023 0303 	bic.w	r3, r3, #3
 800b534:	f043 0302 	orr.w	r3, r3, #2
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	e7e3      	b.n	800b504 <__smakebuf_r+0xc>
 800b53c:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <__smakebuf_r+0x7c>)
 800b53e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	6020      	str	r0, [r4, #0]
 800b544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b548:	81a3      	strh	r3, [r4, #12]
 800b54a:	9b00      	ldr	r3, [sp, #0]
 800b54c:	6163      	str	r3, [r4, #20]
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	6120      	str	r0, [r4, #16]
 800b552:	b15b      	cbz	r3, 800b56c <__smakebuf_r+0x74>
 800b554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b558:	4630      	mov	r0, r6
 800b55a:	f000 f831 	bl	800b5c0 <_isatty_r>
 800b55e:	b128      	cbz	r0, 800b56c <__smakebuf_r+0x74>
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	f023 0303 	bic.w	r3, r3, #3
 800b566:	f043 0301 	orr.w	r3, r3, #1
 800b56a:	81a3      	strh	r3, [r4, #12]
 800b56c:	89a0      	ldrh	r0, [r4, #12]
 800b56e:	4305      	orrs	r5, r0
 800b570:	81a5      	strh	r5, [r4, #12]
 800b572:	e7cd      	b.n	800b510 <__smakebuf_r+0x18>
 800b574:	0800a921 	.word	0x0800a921

0800b578 <_read_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d07      	ldr	r5, [pc, #28]	; (800b598 <_read_r+0x20>)
 800b57c:	4604      	mov	r4, r0
 800b57e:	4608      	mov	r0, r1
 800b580:	4611      	mov	r1, r2
 800b582:	2200      	movs	r2, #0
 800b584:	602a      	str	r2, [r5, #0]
 800b586:	461a      	mov	r2, r3
 800b588:	f7f5 f9ca 	bl	8000920 <_read>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_read_r+0x1e>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_read_r+0x1e>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	20002920 	.word	0x20002920

0800b59c <_fstat_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d07      	ldr	r5, [pc, #28]	; (800b5bc <_fstat_r+0x20>)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	f7f5 f9fe 	bl	80009aa <_fstat>
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	d102      	bne.n	800b5b8 <_fstat_r+0x1c>
 800b5b2:	682b      	ldr	r3, [r5, #0]
 800b5b4:	b103      	cbz	r3, 800b5b8 <_fstat_r+0x1c>
 800b5b6:	6023      	str	r3, [r4, #0]
 800b5b8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20002920 	.word	0x20002920

0800b5c0 <_isatty_r>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	4d06      	ldr	r5, [pc, #24]	; (800b5dc <_isatty_r+0x1c>)
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	4608      	mov	r0, r1
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	f7f5 f9fd 	bl	80009ca <_isatty>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_isatty_r+0x1a>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_isatty_r+0x1a>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	20002920 	.word	0x20002920

0800b5e0 <_init>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr

0800b5ec <_fini>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	bf00      	nop
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr
