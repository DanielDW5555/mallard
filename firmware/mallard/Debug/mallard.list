
mallard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000854c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800874c  0800874c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800874c  0800874c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800874c  0800874c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  20000090  080087e4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  080087e4  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aafb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003640  00000000  00000000  0003abbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  0003e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  0003f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f046  00000000  00000000  0003fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fa3  00000000  00000000  0006edee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e5e9  00000000  00000000  00080d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f37a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  0018f3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000090 	.word	0x20000090
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080086f0 	.word	0x080086f0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000094 	.word	0x20000094
 80001f8:	080086f0 	.word	0x080086f0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f9a1 	bl	8000546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f807 	bl	8000216 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f84e 	bl	80002a8 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800020c:	f007 fe44 	bl	8007e98 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000210:	f007 fe68 	bl	8007ee4 <MX_USB_HOST_Process>
 8000214:	e7fc      	b.n	8000210 <main+0x14>

08000216 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	b098      	sub	sp, #96	; 0x60
 800021a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	2248      	movs	r2, #72	; 0x48
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f008 f993 	bl	8008550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000238:	f44f 7000 	mov.w	r0, #512	; 0x200
 800023c:	f002 f8a2 	bl	8002384 <HAL_PWREx_ControlVoltageScaling>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000246:	f000 f8af 	bl	80003a8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024a:	2310      	movs	r3, #16
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000256:	2360      	movs	r3, #96	; 0x60
 8000258:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	4618      	mov	r0, r3
 8000264:	f002 f942 	bl	80024ec <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800026e:	f000 f89b 	bl	80003a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fdb6 	bl	8002dfc <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000296:	f000 f887 	bl	80003a8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800029a:	f003 fb95 	bl	80039c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800029e:	bf00      	nop
 80002a0:	3760      	adds	r7, #96	; 0x60
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002be:	4b38      	ldr	r3, [pc, #224]	; (80003a0 <MX_GPIO_Init+0xf8>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	4a37      	ldr	r2, [pc, #220]	; (80003a0 <MX_GPIO_Init+0xf8>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ca:	4b35      	ldr	r3, [pc, #212]	; (80003a0 <MX_GPIO_Init+0xf8>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	f003 0301 	and.w	r3, r3, #1
 80002d2:	60bb      	str	r3, [r7, #8]
 80002d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d6:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <MX_GPIO_Init+0xf8>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a31      	ldr	r2, [pc, #196]	; (80003a0 <MX_GPIO_Init+0xf8>)
 80002dc:	f043 0302 	orr.w	r3, r3, #2
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e2:	4b2f      	ldr	r3, [pc, #188]	; (80003a0 <MX_GPIO_Init+0xf8>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	f003 0302 	and.w	r3, r3, #2
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80002ee:	2200      	movs	r2, #0
 80002f0:	21f8      	movs	r1, #248	; 0xf8
 80002f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f6:	f000 fc63 	bl	8000bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	f243 4101 	movw	r1, #13313	; 0x3401
 8000300:	4828      	ldr	r0, [pc, #160]	; (80003a4 <MX_GPIO_Init+0xfc>)
 8000302:	f000 fc5d 	bl	8000bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000306:	2307      	movs	r3, #7
 8000308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800030a:	230b      	movs	r3, #11
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000312:	f107 030c 	add.w	r3, r7, #12
 8000316:	4619      	mov	r1, r3
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f000 fabe 	bl	800089c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000320:	23f8      	movs	r3, #248	; 0xf8
 8000322:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000330:	f107 030c 	add.w	r3, r7, #12
 8000334:	4619      	mov	r1, r3
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f000 faaf 	bl	800089c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 800033e:	f243 4301 	movw	r3, #13313	; 0x3401
 8000342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	4619      	mov	r1, r3
 8000356:	4813      	ldr	r0, [pc, #76]	; (80003a4 <MX_GPIO_Init+0xfc>)
 8000358:	f000 faa0 	bl	800089c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800035c:	2302      	movs	r3, #2
 800035e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000360:	230b      	movs	r3, #11
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000368:	f107 030c 	add.w	r3, r7, #12
 800036c:	4619      	mov	r1, r3
 800036e:	480d      	ldr	r0, [pc, #52]	; (80003a4 <MX_GPIO_Init+0xfc>)
 8000370:	f000 fa94 	bl	800089c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000374:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800037a:	2302      	movs	r3, #2
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000382:	2303      	movs	r3, #3
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000386:	2307      	movs	r3, #7
 8000388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f000 fa82 	bl	800089c <HAL_GPIO_Init>

}
 8000398:	bf00      	nop
 800039a:	3720      	adds	r7, #32
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40021000 	.word	0x40021000
 80003a4:	48000400 	.word	0x48000400

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <Error_Handler+0x8>
	...

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <HAL_MspInit+0x44>)
 80003bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003be:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <HAL_MspInit+0x44>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6613      	str	r3, [r2, #96]	; 0x60
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_MspInit+0x44>)
 80003c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <HAL_MspInit+0x44>)
 80003d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003d6:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <HAL_MspInit+0x44>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003dc:	6593      	str	r3, [r2, #88]	; 0x58
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <HAL_MspInit+0x44>)
 80003e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000

080003fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <NMI_Handler+0x4>

08000402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <HardFault_Handler+0x4>

08000408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800040c:	e7fe      	b.n	800040c <MemManage_Handler+0x4>

0800040e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000412:	e7fe      	b.n	8000412 <BusFault_Handler+0x4>

08000414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <UsageFault_Handler+0x4>

0800041a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000448:	f000 f8d2 	bl	80005f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}

08000450 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000454:	4802      	ldr	r0, [pc, #8]	; (8000460 <OTG_FS_IRQHandler+0x10>)
 8000456:	f000 fe31 	bl	80010bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000498 	.word	0x20000498

08000464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800046c:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <_sbrk+0x5c>)
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <_sbrk+0x60>)
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d102      	bne.n	8000486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <_sbrk+0x64>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <_sbrk+0x68>)
 8000484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <_sbrk+0x64>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	693a      	ldr	r2, [r7, #16]
 8000490:	429a      	cmp	r2, r3
 8000492:	d207      	bcs.n	80004a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000494:	f008 f814 	bl	80084c0 <__errno>
 8000498:	4603      	mov	r3, r0
 800049a:	220c      	movs	r2, #12
 800049c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	e009      	b.n	80004b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <_sbrk+0x64>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004aa:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <_sbrk+0x64>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <_sbrk+0x64>)
 80004b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3718      	adds	r7, #24
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20050000 	.word	0x20050000
 80004c4:	00000400 	.word	0x00000400
 80004c8:	200000ac 	.word	0x200000ac
 80004cc:	200007b0 	.word	0x200007b0

080004d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <SystemInit+0x20>)
 80004d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <SystemInit+0x20>)
 80004dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800052c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f8:	f7ff ffea 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000522:	f007 ffd3 	bl	80084cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000526:	f7ff fe69 	bl	80001fc <main>

0800052a <LoopForever>:

LoopForever:
    b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800052c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000538:	08008754 	.word	0x08008754
  ldr r2, =_sbss
 800053c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000540:	200007ac 	.word	0x200007ac

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>

08000546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f961 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f80e 	bl	8000578 <HAL_InitTick>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	e001      	b.n	800056c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000568:	f7ff ff24 	bl	80003b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800056c:	79fb      	ldrb	r3, [r7, #7]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_InitTick+0x6c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d023      	beq.n	80005d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <HAL_InitTick+0x70>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <HAL_InitTick+0x6c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	fbb3 f3f1 	udiv	r3, r3, r1
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f96d 	bl	8000882 <HAL_SYSTICK_Config>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10f      	bne.n	80005ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f937 	bl	800082e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <HAL_InitTick+0x74>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	e007      	b.n	80005d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e004      	b.n	80005d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	e001      	b.n	80005d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005d4:	2301      	movs	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000008 	.word	0x20000008
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x20>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_IncTick+0x24>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_IncTick+0x24>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000008 	.word	0x20000008
 8000614:	200000bc 	.word	0x200000bc

08000618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <HAL_GetTick+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000bc 	.word	0x200000bc

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000638:	f7ff ffee 	bl	8000618 <HAL_GetTick>
 800063c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000648:	d005      	beq.n	8000656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_Delay+0x44>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000656:	bf00      	nop
 8000658:	f7ff ffde 	bl	8000618 <HAL_GetTick>
 800065c:	4602      	mov	r2, r0
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	d8f7      	bhi.n	8000658 <HAL_Delay+0x28>
  {
  }
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db0b      	blt.n	8000706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 021f 	and.w	r2, r3, #31
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <__NVIC_EnableIRQ+0x38>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	2001      	movs	r0, #1
 80006fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff8e 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff29 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff3e 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff8e 	bl	800076c <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5d 	bl	8000718 <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff31 	bl	80006dc <__NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffa2 	bl	80007d4 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800089c:	b480      	push	{r7}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008aa:	e166      	b.n	8000b7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f000 8158 	beq.w	8000b74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d005      	beq.n	80008dc <HAL_GPIO_Init+0x40>
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d130      	bne.n	800093e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000912:	2201      	movs	r2, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	f003 0201 	and.w	r2, r3, #1
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 0303 	and.w	r3, r3, #3
 8000946:	2b03      	cmp	r3, #3
 8000948:	d017      	beq.n	800097a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b02      	cmp	r3, #2
 8000984:	d123      	bne.n	80009ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	08da      	lsrs	r2, r3, #3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3208      	adds	r2, #8
 800098e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	220f      	movs	r2, #15
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	691a      	ldr	r2, [r3, #16]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	08da      	lsrs	r2, r3, #3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3208      	adds	r2, #8
 80009c8:	6939      	ldr	r1, [r7, #16]
 80009ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 0203 	and.w	r2, r3, #3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 80b2 	beq.w	8000b74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a10:	4b61      	ldr	r3, [pc, #388]	; (8000b98 <HAL_GPIO_Init+0x2fc>)
 8000a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a14:	4a60      	ldr	r2, [pc, #384]	; (8000b98 <HAL_GPIO_Init+0x2fc>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1c:	4b5e      	ldr	r3, [pc, #376]	; (8000b98 <HAL_GPIO_Init+0x2fc>)
 8000a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a28:	4a5c      	ldr	r2, [pc, #368]	; (8000b9c <HAL_GPIO_Init+0x300>)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	3302      	adds	r3, #2
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	220f      	movs	r2, #15
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a52:	d02b      	beq.n	8000aac <HAL_GPIO_Init+0x210>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a52      	ldr	r2, [pc, #328]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d025      	beq.n	8000aa8 <HAL_GPIO_Init+0x20c>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a51      	ldr	r2, [pc, #324]	; (8000ba4 <HAL_GPIO_Init+0x308>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d01f      	beq.n	8000aa4 <HAL_GPIO_Init+0x208>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a50      	ldr	r2, [pc, #320]	; (8000ba8 <HAL_GPIO_Init+0x30c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d019      	beq.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a4f      	ldr	r2, [pc, #316]	; (8000bac <HAL_GPIO_Init+0x310>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d013      	beq.n	8000a9c <HAL_GPIO_Init+0x200>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a4e      	ldr	r2, [pc, #312]	; (8000bb0 <HAL_GPIO_Init+0x314>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d00d      	beq.n	8000a98 <HAL_GPIO_Init+0x1fc>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a4d      	ldr	r2, [pc, #308]	; (8000bb4 <HAL_GPIO_Init+0x318>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d007      	beq.n	8000a94 <HAL_GPIO_Init+0x1f8>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a4c      	ldr	r2, [pc, #304]	; (8000bb8 <HAL_GPIO_Init+0x31c>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d101      	bne.n	8000a90 <HAL_GPIO_Init+0x1f4>
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	e00e      	b.n	8000aae <HAL_GPIO_Init+0x212>
 8000a90:	2308      	movs	r3, #8
 8000a92:	e00c      	b.n	8000aae <HAL_GPIO_Init+0x212>
 8000a94:	2306      	movs	r3, #6
 8000a96:	e00a      	b.n	8000aae <HAL_GPIO_Init+0x212>
 8000a98:	2305      	movs	r3, #5
 8000a9a:	e008      	b.n	8000aae <HAL_GPIO_Init+0x212>
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	e006      	b.n	8000aae <HAL_GPIO_Init+0x212>
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e004      	b.n	8000aae <HAL_GPIO_Init+0x212>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x212>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <HAL_GPIO_Init+0x212>
 8000aac:	2300      	movs	r3, #0
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	f002 0203 	and.w	r2, r2, #3
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000abe:	4937      	ldr	r1, [pc, #220]	; (8000b9c <HAL_GPIO_Init+0x300>)
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000acc:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <HAL_GPIO_Init+0x320>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000af0:	4a32      	ldr	r2, [pc, #200]	; (8000bbc <HAL_GPIO_Init+0x320>)
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <HAL_GPIO_Init+0x320>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b1a:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <HAL_GPIO_Init+0x320>)
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <HAL_GPIO_Init+0x320>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <HAL_GPIO_Init+0x320>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_GPIO_Init+0x320>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b6e:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_GPIO_Init+0x320>)
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa22 f303 	lsr.w	r3, r2, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f47f ae91 	bne.w	80008ac <HAL_GPIO_Init+0x10>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	48000c00 	.word	0x48000c00
 8000bac:	48001000 	.word	0x48001000
 8000bb0:	48001400 	.word	0x48001400
 8000bb4:	48001800 	.word	0x48001800
 8000bb8:	48001c00 	.word	0x48001c00
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bdc:	e002      	b.n	8000be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	b08f      	sub	sp, #60	; 0x3c
 8000bf4:	af0a      	add	r7, sp, #40	; 0x28
 8000bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e054      	b.n	8000cac <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d106      	bne.n	8000c22 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f007 f999 	bl	8007f54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 f8f6 	bl	8003e32 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	687e      	ldr	r6, [r7, #4]
 8000c4e:	466d      	mov	r5, sp
 8000c50:	f106 0410 	add.w	r4, r6, #16
 8000c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c60:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c64:	1d33      	adds	r3, r6, #4
 8000c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f003 f8a5 	bl	8003db8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2101      	movs	r1, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 f8ed 	bl	8003e54 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	687e      	ldr	r6, [r7, #4]
 8000c82:	466d      	mov	r5, sp
 8000c84:	f106 0410 	add.w	r4, r6, #16
 8000c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c94:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c98:	1d33      	adds	r3, r6, #4
 8000c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9c:	6838      	ldr	r0, [r7, #0]
 8000c9e:	f003 fa6b 	bl	8004178 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cb4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af04      	add	r7, sp, #16
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	70fb      	strb	r3, [r7, #3]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	70bb      	strb	r3, [r7, #2]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d101      	bne.n	8000cdc <HAL_HCD_HC_Init+0x28>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e076      	b.n	8000dca <HAL_HCD_HC_Init+0x116>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	212c      	movs	r1, #44	; 0x2c
 8000cea:	fb01 f303 	mul.w	r3, r1, r3
 8000cee:	4413      	add	r3, r2
 8000cf0:	333d      	adds	r3, #61	; 0x3d
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	212c      	movs	r1, #44	; 0x2c
 8000cfc:	fb01 f303 	mul.w	r3, r1, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	3338      	adds	r3, #56	; 0x38
 8000d04:	787a      	ldrb	r2, [r7, #1]
 8000d06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	212c      	movs	r1, #44	; 0x2c
 8000d0e:	fb01 f303 	mul.w	r3, r1, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	3340      	adds	r3, #64	; 0x40
 8000d16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d18:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	212c      	movs	r1, #44	; 0x2c
 8000d20:	fb01 f303 	mul.w	r3, r1, r3
 8000d24:	4413      	add	r3, r2
 8000d26:	3339      	adds	r3, #57	; 0x39
 8000d28:	78fa      	ldrb	r2, [r7, #3]
 8000d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	212c      	movs	r1, #44	; 0x2c
 8000d32:	fb01 f303 	mul.w	r3, r1, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	333f      	adds	r3, #63	; 0x3f
 8000d3a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	78ba      	ldrb	r2, [r7, #2]
 8000d44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d48:	b2d0      	uxtb	r0, r2
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	212c      	movs	r1, #44	; 0x2c
 8000d4e:	fb01 f303 	mul.w	r3, r1, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	333a      	adds	r3, #58	; 0x3a
 8000d56:	4602      	mov	r2, r0
 8000d58:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	da09      	bge.n	8000d76 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	212c      	movs	r1, #44	; 0x2c
 8000d68:	fb01 f303 	mul.w	r3, r1, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	333b      	adds	r3, #59	; 0x3b
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e008      	b.n	8000d88 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	212c      	movs	r1, #44	; 0x2c
 8000d7c:	fb01 f303 	mul.w	r3, r1, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	333b      	adds	r3, #59	; 0x3b
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	212c      	movs	r1, #44	; 0x2c
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	333c      	adds	r3, #60	; 0x3c
 8000d96:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d9a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	787c      	ldrb	r4, [r7, #1]
 8000da2:	78ba      	ldrb	r2, [r7, #2]
 8000da4:	78f9      	ldrb	r1, [r7, #3]
 8000da6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000da8:	9302      	str	r3, [sp, #8]
 8000daa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	4623      	mov	r3, r4
 8000db8:	f003 fb26 	bl	8004408 <USB_HC_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd90      	pop	{r4, r7, pc}

08000dd2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <HAL_HCD_HC_Halt+0x1e>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e00f      	b.n	8000e10 <HAL_HCD_HC_Halt+0x3e>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 fd12 	bl	800482a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4603      	mov	r3, r0
 8000e28:	70fb      	strb	r3, [r7, #3]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70bb      	strb	r3, [r7, #2]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	212c      	movs	r1, #44	; 0x2c
 8000e38:	fb01 f303 	mul.w	r3, r1, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	333b      	adds	r3, #59	; 0x3b
 8000e40:	78ba      	ldrb	r2, [r7, #2]
 8000e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	212c      	movs	r1, #44	; 0x2c
 8000e4a:	fb01 f303 	mul.w	r3, r1, r3
 8000e4e:	4413      	add	r3, r2
 8000e50:	333f      	adds	r3, #63	; 0x3f
 8000e52:	787a      	ldrb	r2, [r7, #1]
 8000e54:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e56:	7c3b      	ldrb	r3, [r7, #16]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d112      	bne.n	8000e82 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	212c      	movs	r1, #44	; 0x2c
 8000e62:	fb01 f303 	mul.w	r3, r1, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	3342      	adds	r3, #66	; 0x42
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	212c      	movs	r1, #44	; 0x2c
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	333d      	adds	r3, #61	; 0x3d
 8000e7c:	7f3a      	ldrb	r2, [r7, #28]
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e008      	b.n	8000e94 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	212c      	movs	r1, #44	; 0x2c
 8000e88:	fb01 f303 	mul.w	r3, r1, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3342      	adds	r3, #66	; 0x42
 8000e90:	2202      	movs	r2, #2
 8000e92:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	f200 80c6 	bhi.w	8001028 <HAL_HCD_HC_SubmitRequest+0x210>
 8000e9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08001015 	.word	0x08001015
 8000eac:	08000f19 	.word	0x08000f19
 8000eb0:	08000f97 	.word	0x08000f97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000eb4:	7c3b      	ldrb	r3, [r7, #16]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	f040 80b8 	bne.w	800102c <HAL_HCD_HC_SubmitRequest+0x214>
 8000ebc:	78bb      	ldrb	r3, [r7, #2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 80b4 	bne.w	800102c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8000ec4:	8b3b      	ldrh	r3, [r7, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d108      	bne.n	8000edc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	212c      	movs	r1, #44	; 0x2c
 8000ed0:	fb01 f303 	mul.w	r3, r1, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3355      	adds	r3, #85	; 0x55
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	212c      	movs	r1, #44	; 0x2c
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3355      	adds	r3, #85	; 0x55
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	212c      	movs	r1, #44	; 0x2c
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	3342      	adds	r3, #66	; 0x42
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f02:	e093      	b.n	800102c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	212c      	movs	r1, #44	; 0x2c
 8000f0a:	fb01 f303 	mul.w	r3, r1, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	3342      	adds	r3, #66	; 0x42
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
      break;
 8000f16:	e089      	b.n	800102c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11d      	bne.n	8000f5a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	212c      	movs	r1, #44	; 0x2c
 8000f24:	fb01 f303 	mul.w	r3, r1, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	3355      	adds	r3, #85	; 0x55
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d109      	bne.n	8000f46 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	212c      	movs	r1, #44	; 0x2c
 8000f38:	fb01 f303 	mul.w	r3, r1, r3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3342      	adds	r3, #66	; 0x42
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f44:	e073      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	212c      	movs	r1, #44	; 0x2c
 8000f4c:	fb01 f303 	mul.w	r3, r1, r3
 8000f50:	4413      	add	r3, r2
 8000f52:	3342      	adds	r3, #66	; 0x42
 8000f54:	2202      	movs	r2, #2
 8000f56:	701a      	strb	r2, [r3, #0]
      break;
 8000f58:	e069      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	212c      	movs	r1, #44	; 0x2c
 8000f60:	fb01 f303 	mul.w	r3, r1, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	3354      	adds	r3, #84	; 0x54
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d109      	bne.n	8000f82 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	212c      	movs	r1, #44	; 0x2c
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	3342      	adds	r3, #66	; 0x42
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
      break;
 8000f80:	e055      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	212c      	movs	r1, #44	; 0x2c
 8000f88:	fb01 f303 	mul.w	r3, r1, r3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3342      	adds	r3, #66	; 0x42
 8000f90:	2202      	movs	r2, #2
 8000f92:	701a      	strb	r2, [r3, #0]
      break;
 8000f94:	e04b      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f96:	78bb      	ldrb	r3, [r7, #2]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d11d      	bne.n	8000fd8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	212c      	movs	r1, #44	; 0x2c
 8000fa2:	fb01 f303 	mul.w	r3, r1, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3355      	adds	r3, #85	; 0x55
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d109      	bne.n	8000fc4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	212c      	movs	r1, #44	; 0x2c
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	3342      	adds	r3, #66	; 0x42
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000fc2:	e034      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	212c      	movs	r1, #44	; 0x2c
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	3342      	adds	r3, #66	; 0x42
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	701a      	strb	r2, [r3, #0]
      break;
 8000fd6:	e02a      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	212c      	movs	r1, #44	; 0x2c
 8000fde:	fb01 f303 	mul.w	r3, r1, r3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3354      	adds	r3, #84	; 0x54
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d109      	bne.n	8001000 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	212c      	movs	r1, #44	; 0x2c
 8000ff2:	fb01 f303 	mul.w	r3, r1, r3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3342      	adds	r3, #66	; 0x42
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
      break;
 8000ffe:	e016      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	212c      	movs	r1, #44	; 0x2c
 8001006:	fb01 f303 	mul.w	r3, r1, r3
 800100a:	4413      	add	r3, r2
 800100c:	3342      	adds	r3, #66	; 0x42
 800100e:	2202      	movs	r2, #2
 8001010:	701a      	strb	r2, [r3, #0]
      break;
 8001012:	e00c      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	212c      	movs	r1, #44	; 0x2c
 800101a:	fb01 f303 	mul.w	r3, r1, r3
 800101e:	4413      	add	r3, r2
 8001020:	3342      	adds	r3, #66	; 0x42
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
      break;
 8001026:	e002      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001028:	bf00      	nop
 800102a:	e000      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800102c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	212c      	movs	r1, #44	; 0x2c
 8001034:	fb01 f303 	mul.w	r3, r1, r3
 8001038:	4413      	add	r3, r2
 800103a:	3344      	adds	r3, #68	; 0x44
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	8b3a      	ldrh	r2, [r7, #24]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	202c      	movs	r0, #44	; 0x2c
 8001048:	fb00 f303 	mul.w	r3, r0, r3
 800104c:	440b      	add	r3, r1
 800104e:	334c      	adds	r3, #76	; 0x4c
 8001050:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	212c      	movs	r1, #44	; 0x2c
 8001058:	fb01 f303 	mul.w	r3, r1, r3
 800105c:	4413      	add	r3, r2
 800105e:	3360      	adds	r3, #96	; 0x60
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	212c      	movs	r1, #44	; 0x2c
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	4413      	add	r3, r2
 8001070:	3350      	adds	r3, #80	; 0x50
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	212c      	movs	r1, #44	; 0x2c
 800107c:	fb01 f303 	mul.w	r3, r1, r3
 8001080:	4413      	add	r3, r2
 8001082:	3339      	adds	r3, #57	; 0x39
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	212c      	movs	r1, #44	; 0x2c
 800108e:	fb01 f303 	mul.w	r3, r1, r3
 8001092:	4413      	add	r3, r2
 8001094:	3361      	adds	r3, #97	; 0x61
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	222c      	movs	r2, #44	; 0x2c
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	3338      	adds	r3, #56	; 0x38
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f003 fab3 	bl	8004618 <USB_HC_StartXfer>
 80010b2:	4603      	mov	r3, r0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 f80f 	bl	80040f6 <USB_GetMode>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	f040 80f6 	bne.w	80012cc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fff3 	bl	80040d0 <USB_ReadInterrupts>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80ec 	beq.w	80012ca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 ffea 	bl	80040d0 <USB_ReadInterrupts>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001106:	d104      	bne.n	8001112 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001110:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f002 ffda 	bl	80040d0 <USB_ReadInterrupts>
 800111c:	4603      	mov	r3, r0
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001126:	d104      	bne.n	8001132 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001130:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f002 ffca 	bl	80040d0 <USB_ReadInterrupts>
 800113c:	4603      	mov	r3, r0
 800113e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001142:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001146:	d104      	bne.n	8001152 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001150:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f002 ffba 	bl	80040d0 <USB_ReadInterrupts>
 800115c:	4603      	mov	r3, r0
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b02      	cmp	r3, #2
 8001164:	d103      	bne.n	800116e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2202      	movs	r2, #2
 800116c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 ffac 	bl	80040d0 <USB_ReadInterrupts>
 8001178:	4603      	mov	r3, r0
 800117a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800117e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001182:	d11c      	bne.n	80011be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800118c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800119e:	2110      	movs	r1, #16
 80011a0:	6938      	ldr	r0, [r7, #16]
 80011a2:	f002 fea3 	bl	8003eec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80011a6:	6938      	ldr	r0, [r7, #16]
 80011a8:	f002 fed2 	bl	8003f50 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 f862 	bl	800427c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f006 ff79 	bl	80080b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 ff84 	bl	80040d0 <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d2:	d102      	bne.n	80011da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f001 f841 	bl	800225c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 ff76 	bl	80040d0 <USB_ReadInterrupts>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d106      	bne.n	80011fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f006 ff42 	bl	8008078 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2208      	movs	r2, #8
 80011fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f002 ff65 	bl	80040d0 <USB_ReadInterrupts>
 8001206:	4603      	mov	r3, r0
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b10      	cmp	r3, #16
 800120e:	d101      	bne.n	8001214 <HAL_HCD_IRQHandler+0x158>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_HCD_IRQHandler+0x15a>
 8001214:	2300      	movs	r3, #0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d012      	beq.n	8001240 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	699a      	ldr	r2, [r3, #24]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0210 	bic.w	r2, r2, #16
 8001228:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 ff44 	bl	80020b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0210 	orr.w	r2, r2, #16
 800123e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f002 ff43 	bl	80040d0 <USB_ReadInterrupts>
 800124a:	4603      	mov	r3, r0
 800124c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001254:	d13a      	bne.n	80012cc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fad4 	bl	8004808 <USB_HC_ReadInterrupt>
 8001260:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e025      	b.n	80012b4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d018      	beq.n	80012ae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	015a      	lsls	r2, r3, #5
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800128e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001292:	d106      	bne.n	80012a2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f8ab 	bl	80013f6 <HCD_HC_IN_IRQHandler>
 80012a0:	e005      	b.n	80012ae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fc03 	bl	8001ab4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3d4      	bcc.n	8001268 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	e000      	b.n	80012cc <HAL_HCD_IRQHandler+0x210>
      return;
 80012ca:	bf00      	nop
    }
  }
}
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_HCD_Start+0x16>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e013      	b.n	8001310 <HAL_HCD_Start+0x3e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 f824 	bl	8004344 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fd85 	bl	8003e10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_HCD_Stop+0x16>
 800132a:	2302      	movs	r3, #2
 800132c:	e00d      	b.n	800134a <HAL_HCD_Stop+0x32>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fb6f 	bl	8004a1e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 ffc6 	bl	80042f0 <USB_ResetPort>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	212c      	movs	r1, #44	; 0x2c
 8001380:	fb01 f303 	mul.w	r3, r1, r3
 8001384:	4413      	add	r3, r2
 8001386:	3360      	adds	r3, #96	; 0x60
 8001388:	781b      	ldrb	r3, [r3, #0]
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	212c      	movs	r1, #44	; 0x2c
 80013a8:	fb01 f303 	mul.w	r3, r1, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	3350      	adds	r3, #80	; 0x50
 80013b0:	681b      	ldr	r3, [r3, #0]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 f80a 	bl	80043e4 <USB_GetCurrentFrame>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 ffe5 	bl	80043b6 <USB_GetHostSpeed>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	015a      	lsls	r2, r3, #5
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4413      	add	r3, r2
 8001418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b04      	cmp	r3, #4
 8001424:	d11a      	bne.n	800145c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	015a      	lsls	r2, r3, #5
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4413      	add	r3, r2
 800142e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001432:	461a      	mov	r2, r3
 8001434:	2304      	movs	r3, #4
 8001436:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	212c      	movs	r1, #44	; 0x2c
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	4413      	add	r3, r2
 8001444:	3361      	adds	r3, #97	; 0x61
 8001446:	2206      	movs	r2, #6
 8001448:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f9e8 	bl	800482a <USB_HC_Halt>
 800145a:	e0af      	b.n	80015bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	015a      	lsls	r2, r3, #5
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4413      	add	r3, r2
 8001464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001472:	d11b      	bne.n	80014ac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	015a      	lsls	r2, r3, #5
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4413      	add	r3, r2
 800147c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001480:	461a      	mov	r2, r3
 8001482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001486:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	212c      	movs	r1, #44	; 0x2c
 800148e:	fb01 f303 	mul.w	r3, r1, r3
 8001492:	4413      	add	r3, r2
 8001494:	3361      	adds	r3, #97	; 0x61
 8001496:	2207      	movs	r2, #7
 8001498:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 f9c0 	bl	800482a <USB_HC_Halt>
 80014aa:	e087      	b.n	80015bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	2b20      	cmp	r3, #32
 80014c0:	d109      	bne.n	80014d6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ce:	461a      	mov	r2, r3
 80014d0:	2320      	movs	r3, #32
 80014d2:	6093      	str	r3, [r2, #8]
 80014d4:	e072      	b.n	80015bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d11a      	bne.n	8001522 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f8:	461a      	mov	r2, r3
 80014fa:	2308      	movs	r3, #8
 80014fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	212c      	movs	r1, #44	; 0x2c
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	3361      	adds	r3, #97	; 0x61
 800150c:	2205      	movs	r2, #5
 800150e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f003 f985 	bl	800482a <USB_HC_Halt>
 8001520:	e04c      	b.n	80015bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4413      	add	r3, r2
 800152a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001538:	d11b      	bne.n	8001572 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	015a      	lsls	r2, r3, #5
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4413      	add	r3, r2
 8001542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001546:	461a      	mov	r2, r3
 8001548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	212c      	movs	r1, #44	; 0x2c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	3361      	adds	r3, #97	; 0x61
 800155c:	2208      	movs	r2, #8
 800155e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f003 f95d 	bl	800482a <USB_HC_Halt>
 8001570:	e024      	b.n	80015bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4413      	add	r3, r2
 800157a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001584:	2b80      	cmp	r3, #128	; 0x80
 8001586:	d119      	bne.n	80015bc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4413      	add	r3, r2
 8001590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001594:	461a      	mov	r2, r3
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	212c      	movs	r1, #44	; 0x2c
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	3361      	adds	r3, #97	; 0x61
 80015a8:	2206      	movs	r2, #6
 80015aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 f937 	bl	800482a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d2:	d112      	bne.n	80015fa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 f923 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f0:	461a      	mov	r2, r3
 80015f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015f8:	e258      	b.n	8001aac <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4413      	add	r3, r2
 8001602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	f040 80ed 	bne.w	80017ec <HCD_HC_IN_IRQHandler+0x3f6>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	212c      	movs	r1, #44	; 0x2c
 8001618:	fb01 f303 	mul.w	r3, r1, r3
 800161c:	4413      	add	r3, r2
 800161e:	3361      	adds	r3, #97	; 0x61
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	335c      	adds	r3, #92	; 0x5c
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4413      	add	r3, r2
 800163e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001642:	461a      	mov	r2, r3
 8001644:	2301      	movs	r3, #1
 8001646:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	333f      	adds	r3, #63	; 0x3f
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d009      	beq.n	8001670 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	212c      	movs	r1, #44	; 0x2c
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	333f      	adds	r3, #63	; 0x3f
 800166a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800166c:	2b02      	cmp	r3, #2
 800166e:	d111      	bne.n	8001694 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f003 f8d5 	bl	800482a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4413      	add	r3, r2
 8001688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800168c:	461a      	mov	r2, r3
 800168e:	2310      	movs	r3, #16
 8001690:	6093      	str	r3, [r2, #8]
 8001692:	e066      	b.n	8001762 <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	212c      	movs	r1, #44	; 0x2c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	333f      	adds	r3, #63	; 0x3f
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d127      	bne.n	80016f8 <HCD_HC_IN_IRQHandler+0x302>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	0151      	lsls	r1, r2, #5
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	440a      	add	r2, r1
 80016be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3360      	adds	r3, #96	; 0x60
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	b2d9      	uxtb	r1, r3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	202c      	movs	r0, #44	; 0x2c
 80016e4:	fb00 f303 	mul.w	r3, r0, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3360      	adds	r3, #96	; 0x60
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f006 fceb 	bl	80080cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80016f6:	e034      	b.n	8001762 <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	333f      	adds	r3, #63	; 0x3f
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d12a      	bne.n	8001762 <HCD_HC_IN_IRQHandler+0x36c>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3360      	adds	r3, #96	; 0x60
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	3354      	adds	r3, #84	; 0x54
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	f083 0301 	eor.w	r3, r3, #1
 8001732:	b2d8      	uxtb	r0, r3
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3354      	adds	r3, #84	; 0x54
 8001742:	4602      	mov	r2, r0
 8001744:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	b2d9      	uxtb	r1, r3
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	202c      	movs	r0, #44	; 0x2c
 8001750:	fb00 f303 	mul.w	r3, r0, r3
 8001754:	4413      	add	r3, r2
 8001756:	3360      	adds	r3, #96	; 0x60
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f006 fcb5 	bl	80080cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d12b      	bne.n	80017c2 <HCD_HC_IN_IRQHandler+0x3cc>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3348      	adds	r3, #72	; 0x48
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	202c      	movs	r0, #44	; 0x2c
 8001780:	fb00 f202 	mul.w	r2, r0, r2
 8001784:	440a      	add	r2, r1
 8001786:	3240      	adds	r2, #64	; 0x40
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	fbb3 f3f2 	udiv	r3, r3, r2
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 818a 	beq.w	8001aac <HCD_HC_IN_IRQHandler+0x6b6>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3354      	adds	r3, #84	; 0x54
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	f083 0301 	eor.w	r3, r3, #1
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3354      	adds	r3, #84	; 0x54
 80017bc:	4602      	mov	r2, r0
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	e174      	b.n	8001aac <HCD_HC_IN_IRQHandler+0x6b6>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3354      	adds	r3, #84	; 0x54
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f083 0301 	eor.w	r3, r3, #1
 80017d6:	b2d8      	uxtb	r0, r3
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3354      	adds	r3, #84	; 0x54
 80017e6:	4602      	mov	r2, r0
 80017e8:	701a      	strb	r2, [r3, #0]
}
 80017ea:	e15f      	b.n	8001aac <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	f040 80f6 	bne.w	80019f0 <HCD_HC_IN_IRQHandler+0x5fa>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3361      	adds	r3, #97	; 0x61
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d109      	bne.n	800182c <HCD_HC_IN_IRQHandler+0x436>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3360      	adds	r3, #96	; 0x60
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e0c9      	b.n	80019c0 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3361      	adds	r3, #97	; 0x61
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d109      	bne.n	8001854 <HCD_HC_IN_IRQHandler+0x45e>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3360      	adds	r3, #96	; 0x60
 800184e:	2205      	movs	r2, #5
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e0b5      	b.n	80019c0 <HCD_HC_IN_IRQHandler+0x5ca>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	3361      	adds	r3, #97	; 0x61
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b06      	cmp	r3, #6
 8001866:	d009      	beq.n	800187c <HCD_HC_IN_IRQHandler+0x486>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3361      	adds	r3, #97	; 0x61
 8001876:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001878:	2b08      	cmp	r3, #8
 800187a:	d150      	bne.n	800191e <HCD_HC_IN_IRQHandler+0x528>
      hhcd->hc[ch_num].ErrCnt++;
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	335c      	adds	r3, #92	; 0x5c
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	202c      	movs	r0, #44	; 0x2c
 8001894:	fb00 f303 	mul.w	r3, r0, r3
 8001898:	440b      	add	r3, r1
 800189a:	335c      	adds	r3, #92	; 0x5c
 800189c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	335c      	adds	r3, #92	; 0x5c
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d912      	bls.n	80018d8 <HCD_HC_IN_IRQHandler+0x4e2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	335c      	adds	r3, #92	; 0x5c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3360      	adds	r3, #96	; 0x60
 80018d2:	2204      	movs	r2, #4
 80018d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80018d6:	e073      	b.n	80019c0 <HCD_HC_IN_IRQHandler+0x5ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3360      	adds	r3, #96	; 0x60
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001900:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001908:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4413      	add	r3, r2
 8001912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001916:	461a      	mov	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800191c:	e050      	b.n	80019c0 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	212c      	movs	r1, #44	; 0x2c
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	3361      	adds	r3, #97	; 0x61
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d122      	bne.n	8001978 <HCD_HC_IN_IRQHandler+0x582>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	212c      	movs	r1, #44	; 0x2c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3360      	adds	r3, #96	; 0x60
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800195a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001962:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4413      	add	r3, r2
 800196c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e023      	b.n	80019c0 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	3361      	adds	r3, #97	; 0x61
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b07      	cmp	r3, #7
 800198a:	d119      	bne.n	80019c0 <HCD_HC_IN_IRQHandler+0x5ca>
      hhcd->hc[ch_num].ErrCnt++;
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	335c      	adds	r3, #92	; 0x5c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	202c      	movs	r0, #44	; 0x2c
 80019a4:	fb00 f303 	mul.w	r3, r0, r3
 80019a8:	440b      	add	r3, r1
 80019aa:	335c      	adds	r3, #92	; 0x5c
 80019ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	3360      	adds	r3, #96	; 0x60
 80019bc:	2204      	movs	r2, #4
 80019be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019cc:	461a      	mov	r2, r3
 80019ce:	2302      	movs	r3, #2
 80019d0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	202c      	movs	r0, #44	; 0x2c
 80019dc:	fb00 f303 	mul.w	r3, r0, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3360      	adds	r3, #96	; 0x60
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f006 fb6f 	bl	80080cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80019ee:	e05d      	b.n	8001aac <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d152      	bne.n	8001aac <HCD_HC_IN_IRQHandler+0x6b6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	333f      	adds	r3, #63	; 0x3f
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d111      	bne.n	8001a3e <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	335c      	adds	r3, #92	; 0x5c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fef7 	bl	800482a <USB_HC_Halt>
 8001a3c:	e02d      	b.n	8001a9a <HCD_HC_IN_IRQHandler+0x6a4>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	333f      	adds	r3, #63	; 0x3f
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HCD_HC_IN_IRQHandler+0x670>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	333f      	adds	r3, #63	; 0x3f
 8001a60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d119      	bne.n	8001a9a <HCD_HC_IN_IRQHandler+0x6a4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	335c      	adds	r3, #92	; 0x5c
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3361      	adds	r3, #97	; 0x61
 8001a86:	2203      	movs	r2, #3
 8001a88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 fec8 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	6093      	str	r3, [r2, #8]
}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d11a      	bne.n	8001b1a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af0:	461a      	mov	r2, r3
 8001af2:	2304      	movs	r3, #4
 8001af4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3361      	adds	r3, #97	; 0x61
 8001b04:	2206      	movs	r2, #6
 8001b06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 fe89 	bl	800482a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001b18:	e2ca      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d12e      	bne.n	8001b8e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2320      	movs	r3, #32
 8001b40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	333d      	adds	r3, #61	; 0x3d
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f040 82ac 	bne.w	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	333d      	adds	r3, #61	; 0x3d
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3360      	adds	r3, #96	; 0x60
 8001b78:	2202      	movs	r2, #2
 8001b7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fe4f 	bl	800482a <USB_HC_Halt>
}
 8001b8c:	e290      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba4:	d112      	bne.n	8001bcc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fe30 	bl	800482a <USB_HC_Halt>
}
 8001bca:	e271      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d140      	bne.n	8001c64 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	335c      	adds	r3, #92	; 0x5c
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c06:	2b40      	cmp	r3, #64	; 0x40
 8001c08:	d111      	bne.n	8001c2e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	333d      	adds	r3, #61	; 0x3d
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2340      	movs	r3, #64	; 0x40
 8001c2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	212c      	movs	r1, #44	; 0x2c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3361      	adds	r3, #97	; 0x61
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fde4 	bl	800482a <USB_HC_Halt>
}
 8001c62:	e225      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	d12c      	bne.n	8001cd4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3361      	adds	r3, #97	; 0x61
 8001c88:	2204      	movs	r2, #4
 8001c8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	333d      	adds	r3, #61	; 0x3d
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	335c      	adds	r3, #92	; 0x5c
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 fdb5 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2340      	movs	r3, #64	; 0x40
 8001cd0:	6093      	str	r3, [r2, #8]
}
 8001cd2:	e1ed      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11a      	bne.n	8001d20 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3361      	adds	r3, #97	; 0x61
 8001d0a:	2205      	movs	r2, #5
 8001d0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fd86 	bl	800482a <USB_HC_Halt>
}
 8001d1e:	e1c7      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d123      	bne.n	8001d7e <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	335c      	adds	r3, #92	; 0x5c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3361      	adds	r3, #97	; 0x61
 8001d56:	2203      	movs	r2, #3
 8001d58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fd60 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	461a      	mov	r2, r3
 8001d78:	2310      	movs	r3, #16
 8001d7a:	6093      	str	r3, [r2, #8]
}
 8001d7c:	e198      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d90:	2b80      	cmp	r3, #128	; 0x80
 8001d92:	d11a      	bne.n	8001dca <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3361      	adds	r3, #97	; 0x61
 8001da2:	2206      	movs	r2, #6
 8001da4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 fd3a 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	6093      	str	r3, [r2, #8]
}
 8001dc8:	e172      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d11b      	bne.n	8001e1a <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	3361      	adds	r3, #97	; 0x61
 8001df0:	2208      	movs	r2, #8
 8001df2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fd13 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	461a      	mov	r2, r3
 8001e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e16:	6093      	str	r3, [r2, #8]
}
 8001e18:	e14a      	b.n	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	f040 813f 	bne.w	80020b0 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3361      	adds	r3, #97	; 0x61
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d17d      	bne.n	8001f42 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3360      	adds	r3, #96	; 0x60
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	333f      	adds	r3, #63	; 0x3f
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d00a      	beq.n	8001e82 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	212c      	movs	r1, #44	; 0x2c
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	333f      	adds	r3, #63	; 0x3f
 8001e7a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	f040 8100 	bne.w	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d113      	bne.n	8001eb2 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3355      	adds	r3, #85	; 0x55
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2d8      	uxtb	r0, r3
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3355      	adds	r3, #85	; 0x55
 8001eae:	4602      	mov	r2, r0
 8001eb0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 80e3 	bne.w	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	212c      	movs	r1, #44	; 0x2c
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	334c      	adds	r3, #76	; 0x4c
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80d8 	beq.w	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	334c      	adds	r3, #76	; 0x4c
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	202c      	movs	r0, #44	; 0x2c
 8001ee8:	fb00 f202 	mul.w	r2, r0, r2
 8001eec:	440a      	add	r2, r1
 8001eee:	3240      	adds	r2, #64	; 0x40
 8001ef0:	8812      	ldrh	r2, [r2, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	202c      	movs	r0, #44	; 0x2c
 8001efc:	fb00 f202 	mul.w	r2, r0, r2
 8001f00:	440a      	add	r2, r1
 8001f02:	3240      	adds	r2, #64	; 0x40
 8001f04:	8812      	ldrh	r2, [r2, #0]
 8001f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80b5 	beq.w	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3355      	adds	r3, #85	; 0x55
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	f083 0301 	eor.w	r3, r3, #1
 8001f2c:	b2d8      	uxtb	r0, r3
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3355      	adds	r3, #85	; 0x55
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e09f      	b.n	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3361      	adds	r3, #97	; 0x61
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d109      	bne.n	8001f6a <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3360      	adds	r3, #96	; 0x60
 8001f64:	2202      	movs	r2, #2
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e08b      	b.n	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3361      	adds	r3, #97	; 0x61
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d109      	bne.n	8001f92 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3360      	adds	r3, #96	; 0x60
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e077      	b.n	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3361      	adds	r3, #97	; 0x61
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d109      	bne.n	8001fba <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3360      	adds	r3, #96	; 0x60
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	e063      	b.n	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3361      	adds	r3, #97	; 0x61
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d009      	beq.n	8001fe2 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3361      	adds	r3, #97	; 0x61
 8001fdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d14f      	bne.n	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	335c      	adds	r3, #92	; 0x5c
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	202c      	movs	r0, #44	; 0x2c
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	440b      	add	r3, r1
 8002000:	335c      	adds	r3, #92	; 0x5c
 8002002:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	335c      	adds	r3, #92	; 0x5c
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d912      	bls.n	800203e <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	335c      	adds	r3, #92	; 0x5c
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3360      	adds	r3, #96	; 0x60
 8002038:	2204      	movs	r2, #4
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e021      	b.n	8002082 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3360      	adds	r3, #96	; 0x60
 800204c:	2202      	movs	r2, #2
 800204e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002066:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800206e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207c:	461a      	mov	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	461a      	mov	r2, r3
 8002090:	2302      	movs	r3, #2
 8002092:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	b2d9      	uxtb	r1, r3
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	202c      	movs	r0, #44	; 0x2c
 800209e:	fb00 f303 	mul.w	r3, r0, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3360      	adds	r3, #96	; 0x60
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f006 f80e 	bl	80080cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80020b0:	bf00      	nop
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	0c5b      	lsrs	r3, r3, #17
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d004      	beq.n	80020fe <HCD_RXQLVL_IRQHandler+0x46>
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	f000 80a9 	beq.w	800224e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80020fc:	e0aa      	b.n	8002254 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a6 	beq.w	8002252 <HCD_RXQLVL_IRQHandler+0x19a>
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3344      	adds	r3, #68	; 0x44
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 809b 	beq.w	8002252 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3350      	adds	r3, #80	; 0x50
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	441a      	add	r2, r3
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	202c      	movs	r0, #44	; 0x2c
 8002136:	fb00 f303 	mul.w	r3, r0, r3
 800213a:	440b      	add	r3, r1
 800213c:	334c      	adds	r3, #76	; 0x4c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d87a      	bhi.n	800223a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3344      	adds	r3, #68	; 0x44
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	b292      	uxth	r2, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f001 ff5f 	bl	8004020 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3344      	adds	r3, #68	; 0x44
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	441a      	add	r2, r3
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	202c      	movs	r0, #44	; 0x2c
 800217c:	fb00 f303 	mul.w	r3, r0, r3
 8002180:	440b      	add	r3, r1
 8002182:	3344      	adds	r3, #68	; 0x44
 8002184:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3350      	adds	r3, #80	; 0x50
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	441a      	add	r2, r3
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	202c      	movs	r0, #44	; 0x2c
 80021a0:	fb00 f303 	mul.w	r3, r0, r3
 80021a4:	440b      	add	r3, r1
 80021a6:	3350      	adds	r3, #80	; 0x50
 80021a8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	0cdb      	lsrs	r3, r3, #19
 80021ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3340      	adds	r3, #64	; 0x40
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d13c      	bne.n	8002252 <HCD_RXQLVL_IRQHandler+0x19a>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d039      	beq.n	8002252 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021f4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021fc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3354      	adds	r3, #84	; 0x54
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	f083 0301 	eor.w	r3, r3, #1
 8002224:	b2d8      	uxtb	r0, r3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3354      	adds	r3, #84	; 0x54
 8002234:	4602      	mov	r2, r0
 8002236:	701a      	strb	r2, [r3, #0]
      break;
 8002238:	e00b      	b.n	8002252 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3360      	adds	r3, #96	; 0x60
 8002248:	2204      	movs	r2, #4
 800224a:	701a      	strb	r2, [r3, #0]
      break;
 800224c:	e001      	b.n	8002252 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800224e:	bf00      	nop
 8002250:	e000      	b.n	8002254 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002252:	bf00      	nop
  }
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002288:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b02      	cmp	r3, #2
 8002292:	d10b      	bne.n	80022ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f005 fef8 	bl	8008094 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d132      	bne.n	800231c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d126      	bne.n	8002316 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d113      	bne.n	80022f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80022d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022da:	d106      	bne.n	80022ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 ffca 	bl	800427c <USB_InitFSLSPClkSel>
 80022e8:	e011      	b.n	800230e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2101      	movs	r1, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 ffc3 	bl	800427c <USB_InitFSLSPClkSel>
 80022f6:	e00a      	b.n	800230e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d106      	bne.n	800230e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002306:	461a      	mov	r2, r3
 8002308:	f64e 2360 	movw	r3, #60000	; 0xea60
 800230c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f005 feea 	bl	80080e8 <HAL_HCD_PortEnabled_Callback>
 8002314:	e002      	b.n	800231c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f005 fef4 	bl	8008104 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b20      	cmp	r3, #32
 8002324:	d103      	bne.n	800232e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6013      	str	r3, [r2, #0]
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_PWREx_GetVoltageRange+0x3c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002354:	d102      	bne.n	800235c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235a:	e00b      	b.n	8002374 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_PWREx_GetVoltageRange+0x3c>)
 800235e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236a:	d102      	bne.n	8002372 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800236c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002370:	e000      	b.n	8002374 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002372:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40007000 	.word	0x40007000

08002384 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d141      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002392:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239e:	d131      	bne.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023a0:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023a6:	4a46      	ldr	r2, [pc, #280]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023b8:	4a41      	ldr	r2, [pc, #260]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023c0:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2232      	movs	r2, #50	; 0x32
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	0c9b      	lsrs	r3, r3, #18
 80023d2:	3301      	adds	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d6:	e002      	b.n	80023de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3b01      	subs	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d102      	bne.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f2      	bne.n	80023d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fe:	d158      	bne.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e057      	b.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800240a:	4a2d      	ldr	r2, [pc, #180]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002414:	e04d      	b.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800241c:	d141      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242a:	d131      	bne.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002432:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002444:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2232      	movs	r2, #50	; 0x32
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9b      	lsrs	r3, r3, #18
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002462:	e002      	b.n	800246a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3b01      	subs	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002476:	d102      	bne.n	800247e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f2      	bne.n	8002464 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248a:	d112      	bne.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e011      	b.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024a0:	e007      	b.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40007000 	.word	0x40007000
 80024c4:	20000000 	.word	0x20000000
 80024c8:	431bde83 	.word	0x431bde83

080024cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024da:	6053      	str	r3, [r2, #4]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40007000 	.word	0x40007000

080024ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f000 bc76 	b.w	8002dec <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002500:	4ba1      	ldr	r3, [pc, #644]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800250a:	4b9f      	ldr	r3, [pc, #636]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80e6 	beq.w	80026ee <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_RCC_OscConfig+0x4c>
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	f040 808d 	bne.w	800264a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b01      	cmp	r3, #1
 8002534:	f040 8089 	bne.w	800264a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002538:	4b93      	ldr	r3, [pc, #588]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_RCC_OscConfig+0x66>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	f000 bc4d 	b.w	8002dec <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002556:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <HAL_RCC_OscConfig+0x80>
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256a:	e005      	b.n	8002578 <HAL_RCC_OscConfig+0x8c>
 800256c:	4b86      	ldr	r3, [pc, #536]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800256e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002578:	4293      	cmp	r3, r2
 800257a:	d224      	bcs.n	80025c6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fdf3 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	f000 bc2d 	b.w	8002dec <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002592:	4b7d      	ldr	r3, [pc, #500]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a7c      	ldr	r2, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002598:	f043 0308 	orr.w	r3, r3, #8
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	4977      	ldr	r1, [pc, #476]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b0:	4b75      	ldr	r3, [pc, #468]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	4972      	ldr	r1, [pc, #456]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
 80025c4:	e025      	b.n	8002612 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c6:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6f      	ldr	r2, [pc, #444]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025cc:	f043 0308 	orr.w	r3, r3, #8
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b6d      	ldr	r3, [pc, #436]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	496a      	ldr	r1, [pc, #424]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	4965      	ldr	r1, [pc, #404]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fdb2 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e3ec      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002612:	f000 fd1f 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	495a      	ldr	r1, [pc, #360]	; (800278c <HAL_RCC_OscConfig+0x2a0>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_RCC_OscConfig+0x2a4>)
 8002630:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002632:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_RCC_OscConfig+0x2a8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff9e 	bl	8000578 <HAL_InitTick>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d052      	beq.n	80026ec <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	e3d0      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d032      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002652:	4b4d      	ldr	r3, [pc, #308]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a4c      	ldr	r2, [pc, #304]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800265e:	f7fd ffdb 	bl	8000618 <HAL_GetTick>
 8002662:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002666:	f7fd ffd7 	bl	8000618 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e3b9      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002684:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a3f      	ldr	r2, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800268a:	f043 0308 	orr.w	r3, r3, #8
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	493a      	ldr	r1, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4935      	ldr	r1, [pc, #212]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
 80026b6:	e01a      	b.n	80026ee <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a32      	ldr	r2, [pc, #200]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c4:	f7fd ffa8 	bl	8000618 <HAL_GetTick>
 80026c8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026cc:	f7fd ffa4 	bl	8000618 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e386      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1e0>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d073      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x220>
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d10e      	bne.n	8002724 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d063      	beq.n	80027e0 <HAL_RCC_OscConfig+0x2f4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d15f      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e363      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x250>
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a15      	ldr	r2, [pc, #84]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0x28c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x274>
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a0f      	ldr	r2, [pc, #60]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0x28c>
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a05      	ldr	r2, [pc, #20]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fd ff4a 	bl	8000618 <HAL_GetTick>
 8002784:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	e010      	b.n	80027aa <HAL_RCC_OscConfig+0x2be>
 8002788:	40021000 	.word	0x40021000
 800278c:	0800870c 	.word	0x0800870c
 8002790:	20000000 	.word	0x20000000
 8002794:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7fd ff3e 	bl	8000618 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e320      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027aa:	4ba0      	ldr	r3, [pc, #640]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x2ac>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fd ff2e 	bl	8000618 <HAL_GetTick>
 80027bc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fd ff2a 	bl	8000618 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e30c      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d2:	4b96      	ldr	r3, [pc, #600]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2d4>
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d060      	beq.n	80028b0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x314>
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d119      	bne.n	800282e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d116      	bne.n	800282e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002800:	4b8a      	ldr	r3, [pc, #552]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_OscConfig+0x32c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e2e9      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b84      	ldr	r3, [pc, #528]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	4981      	ldr	r1, [pc, #516]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282c:	e040      	b.n	80028b0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d023      	beq.n	800287e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002836:	4b7d      	ldr	r3, [pc, #500]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a7c      	ldr	r2, [pc, #496]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fd fee9 	bl	8000618 <HAL_GetTick>
 8002846:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284a:	f7fd fee5 	bl	8000618 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e2c7      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800285c:	4b73      	ldr	r3, [pc, #460]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	496d      	ldr	r1, [pc, #436]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
 800287c:	e018      	b.n	80028b0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fd fec5 	bl	8000618 <HAL_GetTick>
 800288e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002892:	f7fd fec1 	bl	8000618 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e2a3      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a4:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d07f      	beq.n	80029bc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05f      	beq.n	8002984 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80028c4:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d037      	beq.n	800294a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e27c      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80028fc:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002902:	4a4a      	ldr	r2, [pc, #296]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800290c:	f7fd fe84 	bl	8000618 <HAL_GetTick>
 8002910:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7fd fe80 	bl	8000618 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b11      	cmp	r3, #17
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e262      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ef      	bne.n	8002914 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002934:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293a:	f023 0210 	bic.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	493a      	ldr	r1, [pc, #232]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294a:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 800294c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002950:	4a36      	ldr	r2, [pc, #216]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fd fe5d 	bl	8000618 <HAL_GetTick>
 800295e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7fd fe59 	bl	8000618 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b11      	cmp	r3, #17
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e23b      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0ef      	beq.n	8002962 <HAL_RCC_OscConfig+0x476>
 8002982:	e01b      	b.n	80029bc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 8002986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298a:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fd fe40 	bl	8000618 <HAL_GetTick>
 8002998:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299c:	f7fd fe3c 	bl	8000618 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b11      	cmp	r3, #17
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e21e      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ef      	bne.n	800299c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80c1 	beq.w	8002b4c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10e      	bne.n	80029fa <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6593      	str	r3, [r2, #88]	; 0x58
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x540>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_RCC_OscConfig+0x544>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_RCC_OscConfig+0x544>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_OscConfig+0x544>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fd fe01 	bl	8000618 <HAL_GetTick>
 8002a16:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a18:	e00c      	b.n	8002a34 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fd fdfd 	bl	8000618 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d905      	bls.n	8002a34 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e1df      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a34:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x7b0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ec      	beq.n	8002a1a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d02c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002a4c:	4b94      	ldr	r3, [pc, #592]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	4990      	ldr	r1, [pc, #576]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a72:	4b8b      	ldr	r3, [pc, #556]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	4a89      	ldr	r2, [pc, #548]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a82:	4b87      	ldr	r3, [pc, #540]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	4a85      	ldr	r2, [pc, #532]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a92:	e018      	b.n	8002ac6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a94:	4b82      	ldr	r3, [pc, #520]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	4a81      	ldr	r2, [pc, #516]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa4:	e00f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aa6:	4b7e      	ldr	r3, [pc, #504]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	4a7c      	ldr	r2, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ab6:	4b7a      	ldr	r3, [pc, #488]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	4a78      	ldr	r2, [pc, #480]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002abe:	f023 0304 	bic.w	r3, r3, #4
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7fd fda3 	bl	8000618 <HAL_GetTick>
 8002ad2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fd fd9f 	bl	8000618 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e17f      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aec:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ed      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x5ea>
 8002afa:	e01d      	b.n	8002b38 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fd fd8c 	bl	8000618 <HAL_GetTick>
 8002b00:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fd fd88 	bl	8000618 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e168      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b1a:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ed      	bne.n	8002b04 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	4a56      	ldr	r2, [pc, #344]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d03c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b66:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fd fd52 	bl	8000618 <HAL_GetTick>
 8002b74:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b78:	f7fd fd4e 	bl	8000618 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e130      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ef      	beq.n	8002b78 <HAL_RCC_OscConfig+0x68c>
 8002b98:	e01b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ba0:	4a3f      	ldr	r2, [pc, #252]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002baa:	f7fd fd35 	bl	8000618 <HAL_GetTick>
 8002bae:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb2:	f7fd fd31 	bl	8000618 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e113      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1ef      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8107 	beq.w	8002dea <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	f040 80cf 	bne.w	8002d84 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002be6:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d12c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	3b01      	subs	r3, #1
 8002c06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d123      	bne.n	8002c54 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d11b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d113      	bne.n	8002c54 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d109      	bne.n	8002c54 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d071      	beq.n	8002d38 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d06c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0ba      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_RCC_OscConfig+0x7b4>)
 8002c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c82:	f7fd fcc9 	bl	8000618 <HAL_GetTick>
 8002c86:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	e00c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fd fcc5 	bl	8000618 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d905      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0a7      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ec      	bne.n	8002c8a <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb0:	4b50      	ldr	r3, [pc, #320]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_OscConfig+0x90c>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	4311      	orrs	r1, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0552      	lsls	r2, r2, #21
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cde:	0852      	lsrs	r2, r2, #1
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0652      	lsls	r2, r2, #25
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cea:	06d2      	lsls	r2, r2, #27
 8002cec:	430a      	orrs	r2, r1
 8002cee:	4941      	ldr	r1, [pc, #260]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3e      	ldr	r2, [pc, #248]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d00:	4b3c      	ldr	r3, [pc, #240]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d0c:	f7fd fc84 	bl	8000618 <HAL_GetTick>
 8002d10:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fd fc80 	bl	8000618 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e062      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d26:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d32:	e05a      	b.n	8002dea <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e059      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d152      	bne.n	8002dea <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d44:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d5c:	f7fd fc5c 	bl	8000618 <HAL_GetTick>
 8002d60:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fd fc58 	bl	8000618 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e03a      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d76:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x878>
 8002d82:	e032      	b.n	8002dea <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d02d      	beq.n	8002de6 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d94:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002da8:	f023 0303 	bic.w	r3, r3, #3
 8002dac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002db4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fd fc2b 	bl	8000618 <HAL_GetTick>
 8002dc2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fd fc27 	bl	8000618 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e009      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_OscConfig+0x908>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x8da>
 8002de4:	e001      	b.n	8002dea <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3728      	adds	r7, #40	; 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	019d800c 	.word	0x019d800c

08002dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e10f      	b.n	8003034 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b89      	ldr	r3, [pc, #548]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d910      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b86      	ldr	r3, [pc, #536]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 020f 	bic.w	r2, r3, #15
 8002e2a:	4984      	ldr	r1, [pc, #528]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b82      	ldr	r3, [pc, #520]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0f7      	b.n	8003034 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8089 	beq.w	8002f64 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d133      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	4b79      	ldr	r3, [pc, #484]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0e4      	b.n	8003034 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e6a:	f000 f9d9 	bl	8003220 <RCC_GetSysClockFreqFromPLLSource>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4a74      	ldr	r2, [pc, #464]	; (8003044 <HAL_RCC_ClockConfig+0x248>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d955      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e76:	4b72      	ldr	r3, [pc, #456]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e82:	4b6f      	ldr	r3, [pc, #444]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8a:	4a6d      	ldr	r2, [pc, #436]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e044      	b.n	8002f22 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d03e      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x126>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d13a      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eac:	4b64      	ldr	r3, [pc, #400]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb4:	4a62      	ldr	r2, [pc, #392]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e02f      	b.n	8002f22 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eca:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d115      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0ac      	b.n	8003034 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee2:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0a0      	b.n	8003034 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef2:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e098      	b.n	8003034 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002f02:	f000 f8a7 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <HAL_RCC_ClockConfig+0x248>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d909      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f16:	4a4a      	ldr	r2, [pc, #296]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 0203 	bic.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4944      	ldr	r1, [pc, #272]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fd fb70 	bl	8000618 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3c:	f7fd fb6c 	bl	8000618 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e070      	b.n	8003034 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 020c 	and.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1eb      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b33      	ldr	r3, [pc, #204]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4930      	ldr	r1, [pc, #192]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b80      	cmp	r3, #128	; 0x80
 8002f88:	d105      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f94:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f96:	4b29      	ldr	r3, [pc, #164]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d210      	bcs.n	8002fc6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 020f 	bic.w	r2, r3, #15
 8002fac:	4923      	ldr	r1, [pc, #140]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e036      	b.n	8003034 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4918      	ldr	r1, [pc, #96]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4910      	ldr	r1, [pc, #64]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003004:	f000 f826 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	490c      	ldr	r1, [pc, #48]	; (8003048 <HAL_RCC_ClockConfig+0x24c>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <HAL_RCC_ClockConfig+0x250>)
 8003022:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x254>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd faa5 	bl	8000578 <HAL_InitTick>
 800302e:	4603      	mov	r3, r0
 8003030:	73fb      	strb	r3, [r7, #15]

  return status;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40022000 	.word	0x40022000
 8003040:	40021000 	.word	0x40021000
 8003044:	04c4b400 	.word	0x04c4b400
 8003048:	0800870c 	.word	0x0800870c
 800304c:	20000000 	.word	0x20000000
 8003050:	20000004 	.word	0x20000004

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003062:	4b3e      	ldr	r3, [pc, #248]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800306c:	4b3b      	ldr	r3, [pc, #236]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x34>
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d121      	bne.n	80030c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d11e      	bne.n	80030c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003088:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003094:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 8003096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e005      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030b0:	4a2b      	ldr	r2, [pc, #172]	; (8003160 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10d      	bne.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d102      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	e004      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_RCC_GetSysClockFreq+0x114>)
 80030da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d134      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0xa6>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d003      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0xac>
 80030f8:	e005      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <HAL_RCC_GetSysClockFreq+0x110>)
 80030fc:	617b      	str	r3, [r7, #20]
      break;
 80030fe:	e005      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_RCC_GetSysClockFreq+0x114>)
 8003102:	617b      	str	r3, [r7, #20]
      break;
 8003104:	e002      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	617b      	str	r3, [r7, #20]
      break;
 800310a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3301      	adds	r3, #1
 8003118:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	fb02 f203 	mul.w	r2, r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	0e5b      	lsrs	r3, r3, #25
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	3301      	adds	r3, #1
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800314c:	69bb      	ldr	r3, [r7, #24]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	0800871c 	.word	0x0800871c
 8003164:	00f42400 	.word	0x00f42400
 8003168:	007a1200 	.word	0x007a1200

0800316c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003184:	f7ff f8de 	bl	8002344 <HAL_PWREx_GetVoltageRange>
 8003188:	6178      	str	r0, [r7, #20]
 800318a:	e014      	b.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b22      	ldr	r3, [pc, #136]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003196:	6593      	str	r3, [r2, #88]	; 0x58
 8003198:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031a4:	f7ff f8ce 	bl	8002344 <HAL_PWREx_GetVoltageRange>
 80031a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d10b      	bne.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d913      	bls.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2ba0      	cmp	r3, #160	; 0xa0
 80031c8:	d902      	bls.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ca:	2302      	movs	r3, #2
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	e00d      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d0:	2301      	movs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	e00a      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b7f      	cmp	r3, #127	; 0x7f
 80031da:	d902      	bls.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031dc:	2302      	movs	r3, #2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e004      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d101      	bne.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e8:	2301      	movs	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 020f 	bic.w	r2, r3, #15
 80031f4:	4909      	ldr	r1, [pc, #36]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	40022000 	.word	0x40022000

08003220 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d118      	bne.n	8003268 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e005      	b.n	800325e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003252:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800325e:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d003      	beq.n	8003280 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d003      	beq.n	8003286 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800327e:	e005      	b.n	800328c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003282:	613b      	str	r3, [r7, #16]
    break;
 8003284:	e005      	b.n	8003292 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003288:	613b      	str	r3, [r7, #16]
    break;
 800328a:	e002      	b.n	8003292 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	613b      	str	r3, [r7, #16]
    break;
 8003290:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003292:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	3301      	adds	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	fb02 f203 	mul.w	r2, r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	0e5b      	lsrs	r3, r3, #25
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	3301      	adds	r3, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032d2:	683b      	ldr	r3, [r7, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40021000 	.word	0x40021000
 80032e4:	0800871c 	.word	0x0800871c
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f8:	2300      	movs	r3, #0
 80032fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fc:	2300      	movs	r3, #0
 80032fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003308:	2b00      	cmp	r3, #0
 800330a:	d040      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d02a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d825      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003318:	2b60      	cmp	r3, #96	; 0x60
 800331a:	d026      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800331c:	2b60      	cmp	r3, #96	; 0x60
 800331e:	d821      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d006      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d81d      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800332c:	2b20      	cmp	r3, #32
 800332e:	d010      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003330:	e018      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003332:	4b89      	ldr	r3, [pc, #548]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	4a88      	ldr	r2, [pc, #544]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333e:	e015      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fb4e 	bl	80039e8 <RCCEx_PLLSAI1_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003350:	e00c      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3320      	adds	r3, #32
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fc39 	bl	8003bd0 <RCCEx_PLLSAI2_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003362:	e003      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	74fb      	strb	r3, [r7, #19]
      break;
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800336a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003372:	4b79      	ldr	r3, [pc, #484]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003378:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003380:	4975      	ldr	r1, [pc, #468]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003388:	e001      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d047      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d030      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d82a      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ae:	d02a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b4:	d824      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ba:	d008      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d81e      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ca:	d010      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033cc:	e018      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ce:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4a61      	ldr	r2, [pc, #388]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033da:	e015      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fb00 	bl	80039e8 <RCCEx_PLLSAI1_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ec:	e00c      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3320      	adds	r3, #32
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fbeb 	bl	8003bd0 <RCCEx_PLLSAI2_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033fe:	e003      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	74fb      	strb	r3, [r7, #19]
      break;
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800340e:	4b52      	ldr	r3, [pc, #328]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	494e      	ldr	r1, [pc, #312]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003424:	e001      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 809f 	beq.w	8003576 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800343c:	4b46      	ldr	r3, [pc, #280]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	4a40      	ldr	r2, [pc, #256]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6593      	str	r3, [r2, #88]	; 0x58
 800345e:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3a      	ldr	r2, [pc, #232]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800347a:	f7fd f8cd 	bl	8000618 <HAL_GetTick>
 800347e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003480:	e009      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fd f8c9 	bl	8000618 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d902      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	74fb      	strb	r3, [r7, #19]
        break;
 8003494:	e005      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0ef      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d15b      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01f      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d019      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034d2:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034f2:	4a19      	ldr	r2, [pc, #100]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd f888 	bl	8000618 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350a:	e00b      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fd f884 	bl	8000618 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d902      	bls.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	74fb      	strb	r3, [r7, #19]
            break;
 8003522:	e006      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ec      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10c      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003548:	4903      	ldr	r1, [pc, #12]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003550:	e008      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	74bb      	strb	r3, [r7, #18]
 8003556:	e005      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003558:	40021000 	.word	0x40021000
 800355c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003564:	7c7b      	ldrb	r3, [r7, #17]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d105      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4ba0      	ldr	r3, [pc, #640]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	4a9f      	ldr	r2, [pc, #636]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003582:	4b9a      	ldr	r3, [pc, #616]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f023 0203 	bic.w	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	4996      	ldr	r1, [pc, #600]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a4:	4b91      	ldr	r3, [pc, #580]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 020c 	bic.w	r2, r3, #12
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	498e      	ldr	r1, [pc, #568]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	4985      	ldr	r1, [pc, #532]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035e8:	4b80      	ldr	r3, [pc, #512]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f6:	497d      	ldr	r1, [pc, #500]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800360a:	4b78      	ldr	r3, [pc, #480]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	4974      	ldr	r1, [pc, #464]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800362c:	4b6f      	ldr	r3, [pc, #444]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363a:	496c      	ldr	r1, [pc, #432]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364e:	4b67      	ldr	r3, [pc, #412]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365c:	4963      	ldr	r1, [pc, #396]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003670:	4b5e      	ldr	r3, [pc, #376]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367e:	495b      	ldr	r1, [pc, #364]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003692:	4b56      	ldr	r3, [pc, #344]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	4952      	ldr	r1, [pc, #328]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b4:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	494a      	ldr	r1, [pc, #296]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d6:	4b45      	ldr	r3, [pc, #276]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	4941      	ldr	r1, [pc, #260]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036f8:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036fe:	f023 0203 	bic.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	4939      	ldr	r1, [pc, #228]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d028      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800371a:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	4930      	ldr	r1, [pc, #192]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003738:	d106      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4a2b      	ldr	r2, [pc, #172]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003744:	60d3      	str	r3, [r2, #12]
 8003746:	e011      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003750:	d10c      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	2101      	movs	r1, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f945 	bl	80039e8 <RCCEx_PLLSAI1_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d04d      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003780:	d108      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003792:	e012      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003794:	4b15      	ldr	r3, [pc, #84]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800379a:	4a14      	ldr	r2, [pc, #80]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b2:	490e      	ldr	r1, [pc, #56]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ce:	60d3      	str	r3, [r2, #12]
 80037d0:	e020      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037da:	d109      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a02      	ldr	r2, [pc, #8]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e6:	60d3      	str	r3, [r2, #12]
 80037e8:	e014      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2101      	movs	r1, #1
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f8f1 	bl	80039e8 <RCCEx_PLLSAI1_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d028      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003820:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382e:	4965      	ldr	r1, [pc, #404]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383e:	d106      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003840:	4b60      	ldr	r3, [pc, #384]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a5f      	ldr	r2, [pc, #380]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800384a:	60d3      	str	r3, [r2, #12]
 800384c:	e011      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003852:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003856:	d10c      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f8c2 	bl	80039e8 <RCCEx_PLLSAI1_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01e      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800387e:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800388e:	494d      	ldr	r1, [pc, #308]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f89d 	bl	80039e8 <RCCEx_PLLSAI1_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038c8:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ce:	f023 0204 	bic.w	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d8:	493a      	ldr	r1, [pc, #232]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00b      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038ec:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f2:	f023 0218 	bic.w	r2, r3, #24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	4931      	ldr	r1, [pc, #196]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d035      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003910:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2b      	ldr	r2, [pc, #172]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fc fe7c 	bl	8000618 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003922:	e009      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003924:	f7fc fe78 	bl	8000618 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	74fb      	strb	r3, [r7, #19]
        break;
 8003936:	e005      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ef      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800394c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800395a:	491a      	ldr	r1, [pc, #104]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3320      	adds	r3, #32
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f931 	bl	8003bd0 <RCCEx_PLLSAI2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d017      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800398a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800398e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	490a      	ldr	r1, [pc, #40]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039aa:	d105      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000

080039e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039f6:	4b72      	ldr	r3, [pc, #456]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a02:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0203 	and.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d103      	bne.n	8003a1a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
       ||
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d142      	bne.n	8003aa0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e03f      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d018      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x72>
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d825      	bhi.n	8003a78 <RCCEx_PLLSAI1_Config+0x90>
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d002      	beq.n	8003a36 <RCCEx_PLLSAI1_Config+0x4e>
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d009      	beq.n	8003a48 <RCCEx_PLLSAI1_Config+0x60>
 8003a34:	e020      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a36:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11d      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a46:	e01a      	b.n	8003a7e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a48:	4b5d      	ldr	r3, [pc, #372]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a58:	e013      	b.n	8003a82 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a5a:	4b59      	ldr	r3, [pc, #356]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a66:	4b56      	ldr	r3, [pc, #344]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a76:	e006      	b.n	8003a86 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7c:	e004      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a8e:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4949      	ldr	r1, [pc, #292]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 8086 	bne.w	8003bb4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aa8:	4b45      	ldr	r3, [pc, #276]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a44      	ldr	r2, [pc, #272]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab4:	f7fc fdb0 	bl	8000618 <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aba:	e009      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003abc:	f7fc fdac 	bl	8000618 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d902      	bls.n	8003ad0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ace:	e005      	b.n	8003adc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1ef      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d168      	bne.n	8003bb4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d113      	bne.n	8003b10 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae8:	4b35      	ldr	r3, [pc, #212]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	4b35      	ldr	r3, [pc, #212]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	06d2      	lsls	r2, r2, #27
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6852      	ldr	r2, [r2, #4]
 8003b02:	3a01      	subs	r2, #1
 8003b04:	0112      	lsls	r2, r2, #4
 8003b06:	430a      	orrs	r2, r1
 8003b08:	492d      	ldr	r1, [pc, #180]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
 8003b0e:	e02d      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d115      	bne.n	8003b42 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b16:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6892      	ldr	r2, [r2, #8]
 8003b22:	0211      	lsls	r1, r2, #8
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6912      	ldr	r2, [r2, #16]
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	0552      	lsls	r2, r2, #21
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6852      	ldr	r2, [r2, #4]
 8003b34:	3a01      	subs	r2, #1
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	4921      	ldr	r1, [pc, #132]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	610b      	str	r3, [r1, #16]
 8003b40:	e014      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b42:	4b1f      	ldr	r3, [pc, #124]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6892      	ldr	r2, [r2, #8]
 8003b4e:	0211      	lsls	r1, r2, #8
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6952      	ldr	r2, [r2, #20]
 8003b54:	0852      	lsrs	r2, r2, #1
 8003b56:	3a01      	subs	r2, #1
 8003b58:	0652      	lsls	r2, r2, #25
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6852      	ldr	r2, [r2, #4]
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0112      	lsls	r2, r2, #4
 8003b64:	430a      	orrs	r2, r1
 8003b66:	4916      	ldr	r1, [pc, #88]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a13      	ldr	r2, [pc, #76]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fc fd4e 	bl	8000618 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b7e:	e009      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b80:	f7fc fd4a 	bl	8000618 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d902      	bls.n	8003b94 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	73fb      	strb	r3, [r7, #15]
          break;
 8003b92:	e005      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ef      	beq.n	8003b80 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	07ff800f 	.word	0x07ff800f
 8003bc8:	ff9f800f 	.word	0xff9f800f
 8003bcc:	f9ff800f 	.word	0xf9ff800f

08003bd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bde:	4b72      	ldr	r3, [pc, #456]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00e      	beq.n	8003c08 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bea:	4b6f      	ldr	r3, [pc, #444]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0203 	and.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d103      	bne.n	8003c02 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d142      	bne.n	8003c88 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	e03f      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d018      	beq.n	8003c42 <RCCEx_PLLSAI2_Config+0x72>
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d825      	bhi.n	8003c60 <RCCEx_PLLSAI2_Config+0x90>
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d002      	beq.n	8003c1e <RCCEx_PLLSAI2_Config+0x4e>
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d009      	beq.n	8003c30 <RCCEx_PLLSAI2_Config+0x60>
 8003c1c:	e020      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c1e:	4b62      	ldr	r3, [pc, #392]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d11d      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2e:	e01a      	b.n	8003c66 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c30:	4b5d      	ldr	r3, [pc, #372]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d116      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c40:	e013      	b.n	8003c6a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c42:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c4e:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c5e:	e006      	b.n	8003c6e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
      break;
 8003c64:	e004      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c66:	bf00      	nop
 8003c68:	e002      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e000      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d108      	bne.n	8003c88 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003c76:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4949      	ldr	r1, [pc, #292]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f040 8086 	bne.w	8003d9c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c90:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a44      	ldr	r2, [pc, #272]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9c:	f7fc fcbc 	bl	8000618 <HAL_GetTick>
 8003ca0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ca2:	e009      	b.n	8003cb8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ca4:	f7fc fcb8 	bl	8000618 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d902      	bls.n	8003cb8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb6:	e005      	b.n	8003cc4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cb8:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ef      	bne.n	8003ca4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d168      	bne.n	8003d9c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d113      	bne.n	8003cf8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cd0:	4b35      	ldr	r3, [pc, #212]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	4b35      	ldr	r3, [pc, #212]	; (8003dac <RCCEx_PLLSAI2_Config+0x1dc>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6892      	ldr	r2, [r2, #8]
 8003cdc:	0211      	lsls	r1, r2, #8
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68d2      	ldr	r2, [r2, #12]
 8003ce2:	06d2      	lsls	r2, r2, #27
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6852      	ldr	r2, [r2, #4]
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0112      	lsls	r2, r2, #4
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	492d      	ldr	r1, [pc, #180]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	614b      	str	r3, [r1, #20]
 8003cf6:	e02d      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d115      	bne.n	8003d2a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6892      	ldr	r2, [r2, #8]
 8003d0a:	0211      	lsls	r1, r2, #8
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6912      	ldr	r2, [r2, #16]
 8003d10:	0852      	lsrs	r2, r2, #1
 8003d12:	3a01      	subs	r2, #1
 8003d14:	0552      	lsls	r2, r2, #21
 8003d16:	4311      	orrs	r1, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6852      	ldr	r2, [r2, #4]
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	430a      	orrs	r2, r1
 8003d22:	4921      	ldr	r1, [pc, #132]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	614b      	str	r3, [r1, #20]
 8003d28:	e014      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6892      	ldr	r2, [r2, #8]
 8003d36:	0211      	lsls	r1, r2, #8
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6952      	ldr	r2, [r2, #20]
 8003d3c:	0852      	lsrs	r2, r2, #1
 8003d3e:	3a01      	subs	r2, #1
 8003d40:	0652      	lsls	r2, r2, #25
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6852      	ldr	r2, [r2, #4]
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	4916      	ldr	r1, [pc, #88]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fc fc5a 	bl	8000618 <HAL_GetTick>
 8003d64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d66:	e009      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d68:	f7fc fc56 	bl	8000618 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d902      	bls.n	8003d7c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	73fb      	strb	r3, [r7, #15]
          break;
 8003d7a:	e005      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ef      	beq.n	8003d68 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	4904      	ldr	r1, [pc, #16]	; (8003da8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	07ff800f 	.word	0x07ff800f
 8003db0:	ff9f800f 	.word	0xff9f800f
 8003db4:	f9ff800f 	.word	0xf9ff800f

08003db8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003db8:	b084      	sub	sp, #16
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	f107 001c 	add.w	r0, r7, #28
 8003dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f99c 	bl	8004114 <USB_CoreReset>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
 8003df2:	e005      	b.n	8003e00 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0c:	b004      	add	sp, #16
 8003e0e:	4770      	bx	lr

08003e10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f043 0201 	orr.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d115      	bne.n	8003ea2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e82:	2001      	movs	r0, #1
 8003e84:	f7fc fbd4 	bl	8000630 <HAL_Delay>
      ms++;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f931 	bl	80040f6 <USB_GetMode>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d01e      	beq.n	8003ed8 <USB_SetCurrentMode+0x84>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b31      	cmp	r3, #49	; 0x31
 8003e9e:	d9f0      	bls.n	8003e82 <USB_SetCurrentMode+0x2e>
 8003ea0:	e01a      	b.n	8003ed8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d115      	bne.n	8003ed4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f7fc fbbb 	bl	8000630 <HAL_Delay>
      ms++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f918 	bl	80040f6 <USB_GetMode>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <USB_SetCurrentMode+0x84>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b31      	cmp	r3, #49	; 0x31
 8003ed0:	d9f0      	bls.n	8003eb4 <USB_SetCurrentMode+0x60>
 8003ed2:	e001      	b.n	8003ed8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e005      	b.n	8003ee4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b32      	cmp	r3, #50	; 0x32
 8003edc:	d101      	bne.n	8003ee2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <USB_FlushTxFifo+0x60>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e01a      	b.n	8003f40 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	daf3      	bge.n	8003efa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3301      	adds	r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <USB_FlushTxFifo+0x60>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e006      	b.n	8003f40 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d0f1      	beq.n	8003f22 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	00030d40 	.word	0x00030d40

08003f50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <USB_FlushRxFifo+0x58>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e017      	b.n	8003f9c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	daf3      	bge.n	8003f5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <USB_FlushRxFifo+0x58>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e006      	b.n	8003f9c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d0f1      	beq.n	8003f7e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	00030d40 	.word	0x00030d40

08003fac <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	460b      	mov	r3, r1
 8003fbc:	71fb      	strb	r3, [r7, #7]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8003fca:	88bb      	ldrh	r3, [r7, #4]
 8003fcc:	3303      	adds	r3, #3
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	e018      	b.n	800400a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	031a      	lsls	r2, r3, #12
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6013      	str	r3, [r2, #0]
    pSrc++;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	3301      	adds	r3, #1
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	429a      	cmp	r2, r3
 8004010:	d3e2      	bcc.n	8003fd8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3724      	adds	r7, #36	; 0x24
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004020:	b480      	push	{r7}
 8004022:	b08b      	sub	sp, #44	; 0x2c
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	b29b      	uxth	r3, r3
 800403c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	623b      	str	r3, [r7, #32]
 800404a:	e014      	b.n	8004076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	601a      	str	r2, [r3, #0]
    pDest++;
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	3301      	adds	r3, #1
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	3301      	adds	r3, #1
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	3301      	adds	r3, #1
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	3301      	adds	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	3301      	adds	r3, #1
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	6a3a      	ldr	r2, [r7, #32]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	429a      	cmp	r2, r3
 800407c:	d3e6      	bcc.n	800404c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800407e:	8bfb      	ldrh	r3, [r7, #30]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01e      	beq.n	80040c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408e:	461a      	mov	r2, r3
 8004090:	f107 0310 	add.w	r3, r7, #16
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	701a      	strb	r2, [r3, #0]
      i++;
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	3301      	adds	r3, #1
 80040ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	3301      	adds	r3, #1
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80040b6:	8bfb      	ldrh	r3, [r7, #30]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80040bc:	8bfb      	ldrh	r3, [r7, #30]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ea      	bne.n	8004098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	372c      	adds	r7, #44	; 0x2c
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80040e8:	68fb      	ldr	r3, [r7, #12]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0301 	and.w	r3, r3, #1
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	4a13      	ldr	r2, [pc, #76]	; (8004174 <USB_CoreReset+0x60>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e01a      	b.n	8004166 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	daf3      	bge.n	8004120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f043 0201 	orr.w	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <USB_CoreReset+0x60>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e006      	b.n	8004166 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d0f1      	beq.n	8004148 <USB_CoreReset+0x34>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	00030d40 	.word	0x00030d40

08004178 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004178:	b084      	sub	sp, #16
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004198:	461a      	mov	r2, r3
 800419a:	2300      	movs	r3, #0
 800419c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041ca:	2110      	movs	r1, #16
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff fe8d 	bl	8003eec <USB_FlushTxFifo>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff feb7 	bl	8003f50 <USB_FlushRxFifo>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	e015      	b.n	800421e <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	461a      	mov	r2, r3
 8004200:	f04f 33ff 	mov.w	r3, #4294967295
 8004204:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004212:	461a      	mov	r2, r3
 8004214:	2300      	movs	r3, #0
 8004216:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	3301      	adds	r3, #1
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3e5      	bcc.n	80041f2 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <USB_HostInit+0xf8>)
 800423e:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <USB_HostInit+0xfc>)
 8004244:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f043 0210 	orr.w	r2, r3, #16
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <USB_HostInit+0x100>)
 800425a:	4313      	orrs	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800426c:	b004      	add	sp, #16
 800426e:	4770      	bx	lr
 8004270:	00600080 	.word	0x00600080
 8004274:	004000e0 	.word	0x004000e0
 8004278:	a3200008 	.word	0xa3200008

0800427c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042c4:	461a      	mov	r2, r3
 80042c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80042ca:	6053      	str	r3, [r2, #4]
 80042cc:	e009      	b.n	80042e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d106      	bne.n	80042e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042da:	461a      	mov	r2, r3
 80042dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80042e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004310:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800431a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004320:	2064      	movs	r0, #100	; 0x64
 8004322:	f7fc f985 	bl	8000630 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800432e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004332:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004334:	200a      	movs	r0, #10
 8004336:	f7fc f97b 	bl	8000630 <HAL_Delay>

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004368:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <USB_DriveVbus+0x44>
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d106      	bne.n	8004388 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004386:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004392:	d109      	bne.n	80043a8 <USB_DriveVbus+0x64>
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80043a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	0c5b      	lsrs	r3, r3, #17
 80043d4:	f003 0303 	and.w	r3, r3, #3
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	b29b      	uxth	r3, r3
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	70fb      	strb	r3, [r7, #3]
 800441a:	460b      	mov	r3, r1
 800441c:	70bb      	strb	r3, [r7, #2]
 800441e:	4613      	mov	r3, r2
 8004420:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4413      	add	r3, r2
 8004432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004436:	461a      	mov	r2, r3
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800443e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004442:	2b03      	cmp	r3, #3
 8004444:	d867      	bhi.n	8004516 <USB_HC_Init+0x10e>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <USB_HC_Init+0x44>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	0800445d 	.word	0x0800445d
 8004450:	080044d9 	.word	0x080044d9
 8004454:	0800445d 	.word	0x0800445d
 8004458:	0800449b 	.word	0x0800449b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	461a      	mov	r2, r3
 800446a:	f240 439d 	movw	r3, #1181	; 0x49d
 800446e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004474:	2b00      	cmp	r3, #0
 8004476:	da51      	bge.n	800451c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	440a      	add	r2, r1
 800448e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004498:	e040      	b.n	800451c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	461a      	mov	r2, r3
 80044a8:	f240 639d 	movw	r3, #1693	; 0x69d
 80044ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80044ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da34      	bge.n	8004520 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80044d6:	e023      	b.n	8004520 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e4:	461a      	mov	r2, r3
 80044e6:	f240 2325 	movw	r3, #549	; 0x225
 80044ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80044ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	da17      	bge.n	8004524 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	78fa      	ldrb	r2, [r7, #3]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	440a      	add	r2, r1
 800450a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800450e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004512:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004514:	e006      	b.n	8004524 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	77fb      	strb	r3, [r7, #31]
      break;
 800451a:	e004      	b.n	8004526 <USB_HC_Init+0x11e>
      break;
 800451c:	bf00      	nop
 800451e:	e002      	b.n	8004526 <USB_HC_Init+0x11e>
      break;
 8004520:	bf00      	nop
 8004522:	e000      	b.n	8004526 <USB_HC_Init+0x11e>
      break;
 8004524:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	440a      	add	r2, r1
 800453c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004540:	f043 0302 	orr.w	r3, r3, #2
 8004544:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	6939      	ldr	r1, [r7, #16]
 800455c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004560:	4313      	orrs	r3, r2
 8004562:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004570:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004574:	2b00      	cmp	r3, #0
 8004576:	da03      	bge.n	8004580 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e001      	b.n	8004584 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff16 	bl	80043b6 <USB_GetHostSpeed>
 800458a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800458c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004590:	2b02      	cmp	r3, #2
 8004592:	d106      	bne.n	80045a2 <USB_HC_Init+0x19a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d003      	beq.n	80045a2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800459a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e001      	b.n	80045a6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80045a6:	787b      	ldrb	r3, [r7, #1]
 80045a8:	059b      	lsls	r3, r3, #22
 80045aa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80045ae:	78bb      	ldrb	r3, [r7, #2]
 80045b0:	02db      	lsls	r3, r3, #11
 80045b2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80045b6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80045b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045bc:	049b      	lsls	r3, r3, #18
 80045be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80045c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80045c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80045c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80045ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	0159      	lsls	r1, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	440b      	add	r3, r1
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045dc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80045e2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80045e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d10f      	bne.n	800460c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	440a      	add	r2, r1
 8004602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800460a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800460c:	7ffb      	ldrb	r3, [r7, #31]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop

08004618 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800462c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004630:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	8912      	ldrh	r2, [r2, #8]
 8004642:	4413      	add	r3, r2
 8004644:	3b01      	subs	r3, #1
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	8912      	ldrh	r2, [r2, #8]
 800464a:	fbb3 f3f2 	udiv	r3, r3, r2
 800464e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8004650:	8bfa      	ldrh	r2, [r7, #30]
 8004652:	8a7b      	ldrh	r3, [r7, #18]
 8004654:	429a      	cmp	r2, r3
 8004656:	d90b      	bls.n	8004670 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8004658:	8a7b      	ldrh	r3, [r7, #18]
 800465a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800465c:	8bfb      	ldrh	r3, [r7, #30]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	8912      	ldrh	r2, [r2, #8]
 8004662:	fb02 f203 	mul.w	r2, r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	611a      	str	r2, [r3, #16]
 800466a:	e001      	b.n	8004670 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800466c:	2301      	movs	r3, #1
 800466e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	78db      	ldrb	r3, [r3, #3]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004678:	8bfb      	ldrh	r3, [r7, #30]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	8912      	ldrh	r2, [r2, #8]
 800467e:	fb02 f203 	mul.w	r2, r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	611a      	str	r2, [r3, #16]
 8004686:	e003      	b.n	8004690 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004698:	8bfb      	ldrh	r3, [r7, #30]
 800469a:	04d9      	lsls	r1, r3, #19
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <USB_HC_StartXfer+0x1ec>)
 800469e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80046a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	7a9b      	ldrb	r3, [r3, #10]
 80046a6:	075b      	lsls	r3, r3, #29
 80046a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	0148      	lsls	r0, r1, #5
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	4401      	add	r1, r0
 80046b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80046b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80046ba:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046f2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	7c7b      	ldrb	r3, [r7, #17]
 8004704:	075b      	lsls	r3, r3, #29
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	0148      	lsls	r0, r1, #5
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	4401      	add	r1, r0
 800470e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	4413      	add	r3, r2
 800471e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800472c:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	78db      	ldrb	r3, [r3, #3]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	e003      	b.n	8004748 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004746:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800474e:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475c:	461a      	mov	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	78db      	ldrb	r3, [r3, #3]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d147      	bne.n	80047fa <USB_HC_StartXfer+0x1e2>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d043      	beq.n	80047fa <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	79db      	ldrb	r3, [r3, #7]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d830      	bhi.n	80047dc <USB_HC_StartXfer+0x1c4>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <USB_HC_StartXfer+0x168>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	080047b5 	.word	0x080047b5
 8004788:	08004791 	.word	0x08004791
 800478c:	080047b5 	.word	0x080047b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	3303      	adds	r3, #3
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800479a:	89fa      	ldrh	r2, [r7, #14]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d91c      	bls.n	80047e0 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80047b2:	e015      	b.n	80047e0 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	3303      	adds	r3, #3
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80047be:	89fa      	ldrh	r2, [r7, #14]
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d90a      	bls.n	80047e4 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80047da:	e003      	b.n	80047e4 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 80047dc:	bf00      	nop
 80047de:	e002      	b.n	80047e6 <USB_HC_StartXfer+0x1ce>
        break;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <USB_HC_StartXfer+0x1ce>
        break;
 80047e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68d9      	ldr	r1, [r3, #12]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	785a      	ldrb	r2, [r3, #1]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff fbd9 	bl	8003fac <USB_WritePacket>
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	1ff80000 	.word	0x1ff80000

08004808 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	b29b      	uxth	r3, r3
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800482a:	b480      	push	{r7}
 800482c:	b089      	sub	sp, #36	; 0x24
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0c9b      	lsrs	r3, r3, #18
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	0fdb      	lsrs	r3, r3, #31
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b20      	cmp	r3, #32
 8004878:	d104      	bne.n	8004884 <USB_HC_Halt+0x5a>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	e0c6      	b.n	8004a12 <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <USB_HC_Halt+0x66>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d162      	bne.n	8004956 <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 80a9 	bne.w	8004a10 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d132      	bne.n	8004930 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004908:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3301      	adds	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004914:	d81d      	bhi.n	8004952 <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800492c:	d0ed      	beq.n	800490a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800492e:	e06f      	b.n	8004a10 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	440a      	add	r2, r1
 8004946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800494a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800494e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004950:	e05e      	b.n	8004a10 <USB_HC_Halt+0x1e6>
            break;
 8004952:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004954:	e05c      	b.n	8004a10 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	440a      	add	r2, r1
 800496c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004974:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d132      	bne.n	80049ec <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	440a      	add	r2, r1
 800499c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049c4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3301      	adds	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049d0:	d81d      	bhi.n	8004a0e <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e8:	d0ed      	beq.n	80049c6 <USB_HC_Halt+0x19c>
 80049ea:	e011      	b.n	8004a10 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e000      	b.n	8004a10 <USB_HC_Halt+0x1e6>
          break;
 8004a0e:	bf00      	nop
    }
  }

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3724      	adds	r7, #36	; 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff f9fd 	bl	8003e32 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a38:	2110      	movs	r1, #16
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fa56 	bl	8003eec <USB_FlushTxFifo>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fa80 	bl	8003f50 <USB_FlushRxFifo>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	e01f      	b.n	8004aa0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a76:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a7e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a86:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a94:	461a      	mov	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	d9dc      	bls.n	8004a60 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e033      	b.n	8004b14 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ac2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aca:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ad2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004af0:	d80c      	bhi.n	8004b0c <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b08:	d0ed      	beq.n	8004ae6 <USB_StopHost+0xc8>
 8004b0a:	e000      	b.n	8004b0e <USB_StopHost+0xf0>
        break;
 8004b0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	3301      	adds	r3, #1
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b0f      	cmp	r3, #15
 8004b18:	d9c8      	bls.n	8004aac <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b20:	461a      	mov	r2, r3
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff f96d 	bl	8003e10 <USB_EnableGlobalInt>

  return ret;
 8004b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3720      	adds	r7, #32
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <USBH_MTP_InterfaceInit>:
  *         The function init the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b089      	sub	sp, #36	; 0x24
 8004b44:	af04      	add	r7, sp, #16
 8004b46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface, endpoint;
  MTP_HandleTypeDef *MTP_Handle;

  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8004b48:	2301      	movs	r3, #1
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	2106      	movs	r1, #6
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f001 ff21 	bl	8006996 <USBH_FindInterface>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2bff      	cmp	r3, #255	; 0xff
 8004b5c:	d002      	beq.n	8004b64 <USBH_MTP_InterfaceInit+0x24>
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d901      	bls.n	8004b68 <USBH_MTP_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
    return USBH_FAIL;
 8004b64:	2302      	movs	r3, #2
 8004b66:	e18d      	b.n	8004e84 <USBH_MTP_InterfaceInit+0x344>
  }

  USBH_SelectInterface(phost, interface);
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f001 fef6 	bl	800695e <USBH_SelectInterface>

  status = USBH_SelectInterface(phost, interface);
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 fef1 	bl	800695e <USBH_SelectInterface>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004b80:	7bbb      	ldrb	r3, [r7, #14]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <USBH_MTP_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8004b86:	2302      	movs	r3, #2
 8004b88:	e17c      	b.n	8004e84 <USBH_MTP_InterfaceInit+0x344>
  }

  endpoint = MTP_FindCtlEndpoint(phost);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f97e 	bl	8004e8c <MTP_FindCtlEndpoint>
 8004b90:	4603      	mov	r3, r0
 8004b92:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8004b94:	7b7b      	ldrb	r3, [r7, #13]
 8004b96:	2bff      	cmp	r3, #255	; 0xff
 8004b98:	d002      	beq.n	8004ba0 <USBH_MTP_InterfaceInit+0x60>
 8004b9a:	7b7b      	ldrb	r3, [r7, #13]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d901      	bls.n	8004ba4 <USBH_MTP_InterfaceInit+0x64>
  {
    USBH_DbgLog("Invalid Control endpoint number");
    return USBH_FAIL;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e16f      	b.n	8004e84 <USBH_MTP_InterfaceInit+0x344>
  }

  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004baa:	f242 10d0 	movw	r0, #8656	; 0x21d0
 8004bae:	f003 fcb1 	bl	8008514 <malloc>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	61e3      	str	r3, [r4, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60bb      	str	r3, [r7, #8]

  if (MTP_Handle == NULL)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <USBH_MTP_InterfaceInit+0x8a>
  {
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
    return USBH_FAIL;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e15c      	b.n	8004e84 <USBH_MTP_InterfaceInit+0x344>
  }

  /* Initialize mtp handler */
  USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 8004bca:	f242 12d0 	movw	r2, #8656	; 0x21d0
 8004bce:	2100      	movs	r1, #0
 8004bd0:	68b8      	ldr	r0, [r7, #8]
 8004bd2:	f003 fcbd 	bl	8008550 <memset>

  /*Collect the control endpoint address and length*/
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	7b79      	ldrb	r1, [r7, #13]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	3101      	adds	r1, #1
 8004bde:	00c9      	lsls	r1, r1, #3
 8004be0:	201a      	movs	r0, #26
 8004be2:	fb00 f303 	mul.w	r3, r0, r3
 8004be6:	440b      	add	r3, r1
 8004be8:	4413      	add	r3, r2
 8004bea:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004bf6:	3311      	adds	r3, #17
 8004bf8:	701a      	strb	r2, [r3, #0]
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	7b79      	ldrb	r1, [r7, #13]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	3101      	adds	r1, #1
 8004c02:	00c9      	lsls	r1, r1, #3
 8004c04:	201a      	movs	r0, #26
 8004c06:	fb00 f303 	mul.w	r3, r0, r3
 8004c0a:	440b      	add	r3, r1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004c1a:	3316      	adds	r3, #22
 8004c1c:	801a      	strh	r2, [r3, #0]
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004c24:	3311      	adds	r3, #17
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f003 f8d0 	bl	8007dd0 <USBH_AllocPipe>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004c3a:	330e      	adds	r3, #14
 8004c3c:	701a      	strb	r2, [r3, #0]
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	7b79      	ldrb	r1, [r7, #13]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	3101      	adds	r1, #1
 8004c46:	00c9      	lsls	r1, r1, #3
 8004c48:	201a      	movs	r0, #26
 8004c4a:	fb00 f303 	mul.w	r3, r0, r3
 8004c4e:	440b      	add	r3, r1
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8004c60:	3304      	adds	r3, #4
 8004c62:	801a      	strh	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, MTP_Handle->NotificationPipe,MTP_Handle->NotificationEp,
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004c6a:	330e      	adds	r3, #14
 8004c6c:	7819      	ldrb	r1, [r3, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004c74:	3311      	adds	r3, #17
 8004c76:	7818      	ldrb	r0, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 231d 	ldrb.w	r2, [r3, #797]	; 0x31d
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004c8a:	3316      	adds	r3, #22
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	9302      	str	r3, [sp, #8]
 8004c90:	2303      	movs	r3, #3
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	4623      	mov	r3, r4
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f003 f869 	bl	8007d72 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                MTP_Handle->NotificationEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004ca6:	330e      	adds	r3, #14
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f003 fb9f 	bl	80083f2 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataInEndpoint(phost);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f99d 	bl	8004ff4 <MTP_FindDataInEndpoint>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8004cbe:	7b7b      	ldrb	r3, [r7, #13]
 8004cc0:	2bff      	cmp	r3, #255	; 0xff
 8004cc2:	d002      	beq.n	8004cca <USBH_MTP_InterfaceInit+0x18a>
 8004cc4:	7b7b      	ldrb	r3, [r7, #13]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d901      	bls.n	8004cce <USBH_MTP_InterfaceInit+0x18e>
  {
    USBH_DbgLog("Invalid Data IN endpoint number");
    return USBH_FAIL;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0da      	b.n	8004e84 <USBH_MTP_InterfaceInit+0x344>
  }

  /*Collect the control endpoint address and length*/
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	7b79      	ldrb	r1, [r7, #13]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	3101      	adds	r1, #1
 8004cd6:	00c9      	lsls	r1, r1, #3
 8004cd8:	201a      	movs	r0, #26
 8004cda:	fb00 f303 	mul.w	r3, r0, r3
 8004cde:	440b      	add	r3, r1
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004ce6:	781a      	ldrb	r2, [r3, #0]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004cee:	3310      	adds	r3, #16
 8004cf0:	701a      	strb	r2, [r3, #0]
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	7b79      	ldrb	r1, [r7, #13]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	3101      	adds	r1, #1
 8004cfa:	00c9      	lsls	r1, r1, #3
 8004cfc:	201a      	movs	r0, #26
 8004cfe:	fb00 f303 	mul.w	r3, r0, r3
 8004d02:	440b      	add	r3, r1
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004d0a:	881a      	ldrh	r2, [r3, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004d12:	3314      	adds	r3, #20
 8004d14:	801a      	strh	r2, [r3, #0]
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004d1c:	3310      	adds	r3, #16
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f003 f854 	bl	8007dd0 <USBH_AllocPipe>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004d32:	330c      	adds	r3, #12
 8004d34:	701a      	strb	r2, [r3, #0]

  /* Open pipe for DATA IN endpoint */
  USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	7819      	ldrb	r1, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004d46:	3310      	adds	r3, #16
 8004d48:	7818      	ldrb	r0, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 231d 	ldrb.w	r2, [r3, #797]	; 0x31d
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	9302      	str	r3, [sp, #8]
 8004d62:	2302      	movs	r3, #2
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	9200      	str	r2, [sp, #0]
 8004d68:	4623      	mov	r3, r4
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f003 f800 	bl	8007d72 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MTP_Handle->DataInEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004d78:	330c      	adds	r3, #12
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f003 fb36 	bl	80083f2 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataOutEndpoint(phost);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f8da 	bl	8004f40 <MTP_FindDataOutEndpoint>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8004d90:	7b7b      	ldrb	r3, [r7, #13]
 8004d92:	2bff      	cmp	r3, #255	; 0xff
 8004d94:	d002      	beq.n	8004d9c <USBH_MTP_InterfaceInit+0x25c>
 8004d96:	7b7b      	ldrb	r3, [r7, #13]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d901      	bls.n	8004da0 <USBH_MTP_InterfaceInit+0x260>
  {
    USBH_DbgLog("Invalid Data OUT endpoint number");
    return USBH_FAIL;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e071      	b.n	8004e84 <USBH_MTP_InterfaceInit+0x344>
  }

  /*Collect the DATA OUT endpoint address and length*/
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	7b79      	ldrb	r1, [r7, #13]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	3101      	adds	r1, #1
 8004da8:	00c9      	lsls	r1, r1, #3
 8004daa:	201a      	movs	r0, #26
 8004dac:	fb00 f303 	mul.w	r3, r0, r3
 8004db0:	440b      	add	r3, r1
 8004db2:	4413      	add	r3, r2
 8004db4:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004dc0:	330f      	adds	r3, #15
 8004dc2:	701a      	strb	r2, [r3, #0]
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	7b79      	ldrb	r1, [r7, #13]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	3101      	adds	r1, #1
 8004dcc:	00c9      	lsls	r1, r1, #3
 8004dce:	201a      	movs	r0, #26
 8004dd0:	fb00 f303 	mul.w	r3, r0, r3
 8004dd4:	440b      	add	r3, r1
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004ddc:	881a      	ldrh	r2, [r3, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004de4:	3312      	adds	r3, #18
 8004de6:	801a      	strh	r2, [r3, #0]
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004dee:	330f      	adds	r3, #15
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f002 ffeb 	bl	8007dd0 <USBH_AllocPipe>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004e04:	330d      	adds	r3, #13
 8004e06:	701a      	strb	r2, [r3, #0]

  /* Open pipe for DATA OUT endpoint */
  USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004e0e:	330d      	adds	r3, #13
 8004e10:	7819      	ldrb	r1, [r3, #0]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004e18:	330f      	adds	r3, #15
 8004e1a:	7818      	ldrb	r0, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 231d 	ldrb.w	r2, [r3, #797]	; 0x31d
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004e2e:	3312      	adds	r3, #18
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	9302      	str	r3, [sp, #8]
 8004e34:	2302      	movs	r3, #2
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	9200      	str	r2, [sp, #0]
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f002 ff97 	bl	8007d72 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MTP_Handle->DataOutEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004e4a:	330d      	adds	r3, #13
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f003 facd 	bl	80083f2 <USBH_LL_SetToggle>

  MTP_Handle->state = MTP_OPENSESSION;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004e5e:	3318      	adds	r3, #24
 8004e60:	2202      	movs	r2, #2
 8004e62:	701a      	strb	r2, [r3, #0]
  MTP_Handle->is_ready = 0U;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8004e76:	331c      	adds	r3, #28
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]

  return USBH_PTP_Init(phost);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fb4f 	bl	8005520 <USBH_PTP_Init>
 8004e82:	4603      	mov	r3, r0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd90      	pop	{r4, r7, pc}

08004e8c <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	73fb      	strb	r3, [r7, #15]
 8004e98:	e048      	b.n	8004f2c <MTP_FindCtlEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	211a      	movs	r1, #26
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f203 3347 	addw	r3, r3, #839	; 0x347
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b06      	cmp	r3, #6
 8004eae:	d13a      	bne.n	8004f26 <MTP_FindCtlEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	73bb      	strb	r3, [r7, #14]
 8004eb4:	e034      	b.n	8004f20 <MTP_FindCtlEndpoint+0x94>
      {
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	7bb9      	ldrb	r1, [r7, #14]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	3101      	adds	r1, #1
 8004ebe:	00c9      	lsls	r1, r1, #3
 8004ec0:	201a      	movs	r0, #26
 8004ec2:	fb00 f303 	mul.w	r3, r0, r3
 8004ec6:	440b      	add	r3, r1
 8004ec8:	4413      	add	r3, r2
 8004eca:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	b25b      	sxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	da21      	bge.n	8004f1a <MTP_FindCtlEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	7bb9      	ldrb	r1, [r7, #14]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	3101      	adds	r1, #1
 8004ede:	00c9      	lsls	r1, r1, #3
 8004ee0:	201a      	movs	r0, #26
 8004ee2:	fb00 f303 	mul.w	r3, r0, r3
 8004ee6:	440b      	add	r3, r1
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004eee:	881b      	ldrh	r3, [r3, #0]
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d012      	beq.n	8004f1a <MTP_FindCtlEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	7bb9      	ldrb	r1, [r7, #14]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	3101      	adds	r1, #1
 8004efc:	00c9      	lsls	r1, r1, #3
 8004efe:	201a      	movs	r0, #26
 8004f00:	fb00 f303 	mul.w	r3, r0, r3
 8004f04:	440b      	add	r3, r1
 8004f06:	4413      	add	r3, r2
 8004f08:	f203 3347 	addw	r3, r3, #839	; 0x347
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d101      	bne.n	8004f1a <MTP_FindCtlEndpoint+0x8e>
        {
          return endpoint;
 8004f16:	7bbb      	ldrb	r3, [r7, #14]
 8004f18:	e00c      	b.n	8004f34 <MTP_FindCtlEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8004f1a:	7bbb      	ldrb	r3, [r7, #14]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	73bb      	strb	r3, [r7, #14]
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d9c7      	bls.n	8004eb6 <MTP_FindCtlEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d9b3      	bls.n	8004e9a <MTP_FindCtlEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8004f32:	23ff      	movs	r3, #255	; 0xff
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
 8004f4c:	e048      	b.n	8004fe0 <MTP_FindDataOutEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	211a      	movs	r1, #26
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	4413      	add	r3, r2
 8004f5a:	f203 3347 	addw	r3, r3, #839	; 0x347
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b06      	cmp	r3, #6
 8004f62:	d13a      	bne.n	8004fda <MTP_FindDataOutEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	73bb      	strb	r3, [r7, #14]
 8004f68:	e034      	b.n	8004fd4 <MTP_FindDataOutEndpoint+0x94>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	7bb9      	ldrb	r1, [r7, #14]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	3101      	adds	r1, #1
 8004f72:	00c9      	lsls	r1, r1, #3
 8004f74:	201a      	movs	r0, #26
 8004f76:	fb00 f303 	mul.w	r3, r0, r3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	b25b      	sxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	db21      	blt.n	8004fce <MTP_FindDataOutEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	7bb9      	ldrb	r1, [r7, #14]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	3101      	adds	r1, #1
 8004f92:	00c9      	lsls	r1, r1, #3
 8004f94:	201a      	movs	r0, #26
 8004f96:	fb00 f303 	mul.w	r3, r0, r3
 8004f9a:	440b      	add	r3, r1
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004fa2:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d012      	beq.n	8004fce <MTP_FindDataOutEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	7bb9      	ldrb	r1, [r7, #14]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	3101      	adds	r1, #1
 8004fb0:	00c9      	lsls	r1, r1, #3
 8004fb2:	201a      	movs	r0, #26
 8004fb4:	fb00 f303 	mul.w	r3, r0, r3
 8004fb8:	440b      	add	r3, r1
 8004fba:	4413      	add	r3, r2
 8004fbc:	f203 3347 	addw	r3, r3, #839	; 0x347
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <MTP_FindDataOutEndpoint+0x8e>
        {
          return endpoint;
 8004fca:	7bbb      	ldrb	r3, [r7, #14]
 8004fcc:	e00c      	b.n	8004fe8 <MTP_FindDataOutEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8004fce:	7bbb      	ldrb	r3, [r7, #14]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	73bb      	strb	r3, [r7, #14]
 8004fd4:	7bbb      	ldrb	r3, [r7, #14]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d9c7      	bls.n	8004f6a <MTP_FindDataOutEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d9b3      	bls.n	8004f4e <MTP_FindDataOutEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8004fe6:	23ff      	movs	r3, #255	; 0xff
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e048      	b.n	8005094 <MTP_FindDataInEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	211a      	movs	r1, #26
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	4413      	add	r3, r2
 800500e:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b06      	cmp	r3, #6
 8005016:	d13a      	bne.n	800508e <MTP_FindDataInEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8005018:	2300      	movs	r3, #0
 800501a:	73bb      	strb	r3, [r7, #14]
 800501c:	e034      	b.n	8005088 <MTP_FindDataInEndpoint+0x94>
      {

        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	7bb9      	ldrb	r1, [r7, #14]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	3101      	adds	r1, #1
 8005026:	00c9      	lsls	r1, r1, #3
 8005028:	201a      	movs	r0, #26
 800502a:	fb00 f303 	mul.w	r3, r0, r3
 800502e:	440b      	add	r3, r1
 8005030:	4413      	add	r3, r2
 8005032:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b25b      	sxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	da21      	bge.n	8005082 <MTP_FindDataInEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	7bb9      	ldrb	r1, [r7, #14]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	3101      	adds	r1, #1
 8005046:	00c9      	lsls	r1, r1, #3
 8005048:	201a      	movs	r0, #26
 800504a:	fb00 f303 	mul.w	r3, r0, r3
 800504e:	440b      	add	r3, r1
 8005050:	4413      	add	r3, r2
 8005052:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8005056:	881b      	ldrh	r3, [r3, #0]
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8005058:	2b00      	cmp	r3, #0
 800505a:	d012      	beq.n	8005082 <MTP_FindDataInEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	7bb9      	ldrb	r1, [r7, #14]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	3101      	adds	r1, #1
 8005064:	00c9      	lsls	r1, r1, #3
 8005066:	201a      	movs	r0, #26
 8005068:	fb00 f303 	mul.w	r3, r0, r3
 800506c:	440b      	add	r3, r1
 800506e:	4413      	add	r3, r2
 8005070:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <MTP_FindDataInEndpoint+0x8e>
        {
          return endpoint;
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	e00c      	b.n	800509c <MTP_FindDataInEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8005082:	7bbb      	ldrb	r3, [r7, #14]
 8005084:	3301      	adds	r3, #1
 8005086:	73bb      	strb	r3, [r7, #14]
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d9c7      	bls.n	800501e <MTP_FindDataInEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	3301      	adds	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d9b3      	bls.n	8005002 <MTP_FindDataInEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800509a:	23ff      	movs	r3, #255	; 0xff
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USBH_MTP_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	60fb      	str	r3, [r7, #12]

  if (MTP_Handle->DataOutPipe != 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80050c0:	330d      	adds	r3, #13
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d017      	beq.n	80050f8 <USBH_MTP_InterfaceDeInit+0x50>
  {
    USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80050ce:	330d      	adds	r3, #13
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f002 fe6b 	bl	8007db0 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80050e0:	330d      	adds	r3, #13
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 fe93 	bl	8007e12 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80050f2:	330d      	adds	r3, #13
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
  }

  if (MTP_Handle->DataInPipe != 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80050fe:	330c      	adds	r3, #12
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d017      	beq.n	8005136 <USBH_MTP_InterfaceDeInit+0x8e>
  {
    USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800510c:	330c      	adds	r3, #12
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f002 fe4c 	bl	8007db0 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800511e:	330c      	adds	r3, #12
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f002 fe74 	bl	8007e12 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005130:	330c      	adds	r3, #12
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
  }

  if (MTP_Handle->NotificationPipe != 0U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800513c:	330e      	adds	r3, #14
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d017      	beq.n	8005174 <USBH_MTP_InterfaceDeInit+0xcc>
  {
    USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800514a:	330e      	adds	r3, #14
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f002 fe2d 	bl	8007db0 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800515c:	330e      	adds	r3, #14
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f002 fe55 	bl	8007e12 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800516e:	330e      	adds	r3, #14
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <USBH_MTP_InterfaceDeInit+0xf0>
  {
    USBH_free(phost->pActiveClass->pData);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	4618      	mov	r0, r3
 800518a:	f003 f9cb 	bl	8008524 <free>
    phost->pActiveClass->pData = 0U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005194:	2200      	movs	r2, #0
 8005196:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <USBH_MTP_ClassRequest>:
  *         for MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_ClassRequest(USBH_HandleTypeDef *phost)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
#endif

  return USBH_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USBH_MTP_Process>:
  *         The function is for managing state machine for MTP data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Process(USBH_HandleTypeDef *phost)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75fb      	strb	r3, [r7, #23]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	60fb      	str	r3, [r7, #12]
  uint32_t idx = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]

  switch (MTP_Handle->state)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80051d8:	3318      	adds	r3, #24
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b05      	cmp	r3, #5
 80051de:	f200 80b4 	bhi.w	800534a <USBH_MTP_Process+0x192>
 80051e2:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <USBH_MTP_Process+0x30>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	0800533f 	.word	0x0800533f
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005201 	.word	0x08005201
 80051f4:	0800534b 	.word	0x0800534b
 80051f8:	08005247 	.word	0x08005247
 80051fc:	08005291 	.word	0x08005291
  {
    case  MTP_OPENSESSION:
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f001 f923 	bl	800644e <USBH_PTP_OpenSession>
 8005208:	4603      	mov	r3, r0
 800520a:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 809d 	bne.w	800534e <USBH_MTP_Process+0x196>
      {
        USBH_UsrLog("MTP Session #0 Opened");
        MTP_Handle->state = MTP_GETDEVICEINFO;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800521a:	3318      	adds	r3, #24
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005220:	e095      	b.n	800534e <USBH_MTP_Process+0x196>

    case MTP_GETDEVICEINFO:
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f001 f972 	bl	8006510 <USBH_PTP_GetDeviceInfo>
 800522c:	4603      	mov	r3, r0
 800522e:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 808d 	bne.w	8005352 <USBH_MTP_Process+0x19a>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);

        MTP_Handle->state = MTP_GETSTORAGEIDS;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800523e:	3318      	adds	r3, #24
 8005240:	2204      	movs	r2, #4
 8005242:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005244:	e085      	b.n	8005352 <USBH_MTP_Process+0x19a>

    case MTP_GETSTORAGEIDS:
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f603 1304 	addw	r3, r3, #2308	; 0x904
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f001 f9d7 	bl	8006602 <USBH_PTP_GetStorageIds>
 8005254:	4603      	mov	r3, r0
 8005256:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d17b      	bne.n	8005356 <USBH_MTP_Process+0x19e>
      {
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	e002      	b.n	800526a <USBH_MTP_Process+0xb2>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	3301      	adds	r3, #1
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	429a      	cmp	r2, r3
 8005274:	d3f6      	bcc.n	8005264 <USBH_MTP_Process+0xac>
        {
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
        }

        MTP_Handle->current_storage_unit = 0U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 800527c:	3308      	adds	r3, #8
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005288:	3318      	adds	r3, #24
 800528a:	2205      	movs	r2, #5
 800528c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800528e:	e062      	b.n	8005356 <USBH_MTP_Process+0x19e>

    case MTP_GETSTORAGEINFO:
      status = USBH_PTP_GetStorageInfo(phost,
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8005296:	3308      	adds	r3, #8
 8005298:	681b      	ldr	r3, [r3, #0]
      status = USBH_PTP_GetStorageInfo(phost,
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	6899      	ldr	r1, [r3, #8]
                                       &((MTP_Handle->info.storinfo)[MTP_Handle->current_storage_unit]));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80052ac:	3308      	adds	r3, #8
 80052ae:	681a      	ldr	r2, [r3, #0]
      status = USBH_PTP_GetStorageInfo(phost,
 80052b0:	4613      	mov	r3, r2
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	4413      	add	r3, r2
 80052b6:	015b      	lsls	r3, r3, #5
 80052b8:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 fa16 	bl	80066f4 <USBH_PTP_GetStorageInfo>
 80052c8:	4603      	mov	r3, r0
 80052ca:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d143      	bne.n	800535a <USBH_MTP_Process+0x1a2>
      {
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].StorageDescription,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].VolumeLabel);
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80052d8:	3308      	adds	r3, #8
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80052e4:	3308      	adds	r3, #8
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 80052ee:	3308      	adds	r3, #8
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d32e      	bcc.n	800535a <USBH_MTP_Process+0x1a2>
        {
          MTP_Handle->state = MTP_IDLE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005302:	3318      	adds	r3, #24
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
          MTP_Handle->is_ready = 1U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 800530e:	330c      	adds	r3, #12
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
          MTP_Handle->current_storage_unit = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 800531a:	3308      	adds	r3, #8
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8d3 2908 	ldr.w	r2, [r3, #2312]	; 0x908
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 800532c:	3318      	adds	r3, #24
 800532e:	601a      	str	r2, [r3, #0]

          USBH_UsrLog("MTP Class initialized.");
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005336:	2102      	movs	r1, #2
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4798      	blx	r3
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800533c:	e00d      	b.n	800535a <USBH_MTP_Process+0x1a2>

    case  MTP_IDLE:
      USBH_MTP_Events(phost);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f81d 	bl	800537e <USBH_MTP_Events>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

      status = USBH_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	75fb      	strb	r3, [r7, #23]
      break;
 8005348:	e008      	b.n	800535c <USBH_MTP_Process+0x1a4>

    default:
      break;
 800534a:	bf00      	nop
 800534c:	e006      	b.n	800535c <USBH_MTP_Process+0x1a4>
      break;
 800534e:	bf00      	nop
 8005350:	e004      	b.n	800535c <USBH_MTP_Process+0x1a4>
      break;
 8005352:	bf00      	nop
 8005354:	e002      	b.n	800535c <USBH_MTP_Process+0x1a4>
      break;
 8005356:	bf00      	nop
 8005358:	e000      	b.n	800535c <USBH_MTP_Process+0x1a4>
      break;
 800535a:	bf00      	nop
  }

  return status;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop

08005368 <USBH_MTP_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USBH_MTP_Events>:
 * @brief  Handle HID Control process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MTP_Events(USBH_HandleTypeDef *phost)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	60bb      	str	r3, [r7, #8]

  switch (MTP_Handle->events.state)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800539a:	331c      	adds	r3, #28
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <USBH_MTP_Events+0x2a>
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d027      	beq.n	80053f6 <USBH_MTP_Events+0x78>

      }
      break;

    default:
      break;
 80053a6:	e061      	b.n	800546c <USBH_MTP_Events+0xee>
      if ((phost->Timer & 1U) == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d157      	bne.n	8005466 <USBH_MTP_Events+0xe8>
        MTP_Handle->events.timer = phost->Timer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 80053c2:	601a      	str	r2, [r3, #0]
                                  (uint8_t *)(void *) & (MTP_Handle->events.container),
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 80053ca:	3108      	adds	r1, #8
                                  (uint8_t)MTP_Handle->NotificationEpSize,
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80053d2:	3316      	adds	r3, #22
 80053d4:	881b      	ldrh	r3, [r3, #0]
        USBH_InterruptReceiveData(phost,
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80053de:	330e      	adds	r3, #14
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f002 fca6 	bl	8007d34 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80053ee:	331c      	adds	r3, #28
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
      break;
 80053f4:	e037      	b.n	8005466 <USBH_MTP_Events+0xe8>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80053fc:	330e      	adds	r3, #14
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f002 ffd4 	bl	80083b0 <USBH_LL_GetURBState>
 8005408:	4603      	mov	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d102      	bne.n	8005414 <USBH_MTP_Events+0x96>
        MTP_DecodeEvent(phost);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f832 	bl	8005478 <MTP_DecodeEvent>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 800542a:	3304      	adds	r3, #4
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d31b      	bcc.n	800546a <USBH_MTP_Events+0xec>
        MTP_Handle->events.timer = phost->Timer;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 800543e:	601a      	str	r2, [r3, #0]
                                  (uint8_t *)(void *) & (MTP_Handle->events.container),
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 8005446:	3108      	adds	r1, #8
                                  (uint8_t)MTP_Handle->NotificationEpSize,
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800544e:	3316      	adds	r3, #22
 8005450:	881b      	ldrh	r3, [r3, #0]
        USBH_InterruptReceiveData(phost,
 8005452:	b2da      	uxtb	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800545a:	330e      	adds	r3, #14
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f002 fc68 	bl	8007d34 <USBH_InterruptReceiveData>
      break;
 8005464:	e001      	b.n	800546a <USBH_MTP_Events+0xec>
      break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <USBH_MTP_Events+0xee>
      break;
 800546a:	bf00      	nop
  }

  return status;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <MTP_DecodeEvent>:
  *         Decode device event sent by responder
  * @param  phost: Host handle
  * @retval None
  */
static void MTP_DecodeEvent(USBH_HandleTypeDef *phost)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	617b      	str	r3, [r7, #20]

  uint16_t code;
  uint32_t param1;

  /* Process the event */
  code = MTP_Handle->events.container.code;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8005490:	330e      	adds	r3, #14
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	827b      	strh	r3, [r7, #18]
  param1 = MTP_Handle->events.container.param1;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 800549c:	3314      	adds	r3, #20
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60fb      	str	r3, [r7, #12]

  switch (code)
 80054a2:	8a7b      	ldrh	r3, [r7, #18]
 80054a4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80054a8:	2b0e      	cmp	r3, #14
 80054aa:	d821      	bhi.n	80054f0 <MTP_DecodeEvent+0x78>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <MTP_DecodeEvent+0x3c>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054f1 	.word	0x080054f1
 80054b8:	080054f1 	.word	0x080054f1
 80054bc:	080054f1 	.word	0x080054f1
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	080054f1 	.word	0x080054f1
 80054c8:	080054f1 	.word	0x080054f1
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	080054f1 	.word	0x080054f1
 80054d4:	080054f1 	.word	0x080054f1
 80054d8:	080054f1 	.word	0x080054f1
 80054dc:	080054f1 	.word	0x080054f1
 80054e0:	080054f1 	.word	0x080054f1
 80054e4:	080054f1 	.word	0x080054f1
 80054e8:	080054f1 	.word	0x080054f1
 80054ec:	080054f1 	.word	0x080054f1
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
      break;

    default :
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
      break;
 80054f0:	bf00      	nop
  }

  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 80054f2:	8a7b      	ldrh	r3, [r7, #18]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f805 	bl	8005508 <USBH_MTP_EventsCallback>
}
 80054fe:	bf00      	nop
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop

08005508 <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 8005514:	bf00      	nop
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USBH_PTP_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Init(USBH_HandleTypeDef *phost)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	60fb      	str	r3, [r7, #12]

  /* Set state to idle to be ready for operations */
  MTP_Handle->ptp.state = PTP_IDLE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005542:	3301      	adds	r3, #1
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <USBH_PTP_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Process(USBH_HandleTypeDef *phost)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b090      	sub	sp, #64	; 0x40
 800555c:	af02      	add	r7, sp, #8
 800555e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005566:	2300      	movs	r3, #0
 8005568:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;
  uint32_t  len;

  switch (MTP_Handle->ptp.state)
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b09      	cmp	r3, #9
 8005580:	f200 825b 	bhi.w	8005a3a <USBH_PTP_Process+0x4e2>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <USBH_PTP_Process+0x34>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	08005a3b 	.word	0x08005a3b
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055e9 	.word	0x080055e9
 8005598:	08005683 	.word	0x08005683
 800559c:	080056b7 	.word	0x080056b7
 80055a0:	08005805 	.word	0x08005805
 80055a4:	08005835 	.word	0x08005835
 80055a8:	080059a1 	.word	0x080059a1
 80055ac:	080059c7 	.word	0x080059c7
 80055b0:	08005a2d 	.word	0x08005a2d
      /*Do Nothing */
      break;

    case PTP_OP_REQUEST_STATE:
      USBH_BulkSendData(phost,
                        (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	f503 51eb 	add.w	r1, r3, #7520	; 0x1d60
 80055ba:	3104      	adds	r1, #4
                        (uint16_t)MTP_Handle->ptp.op_container.length,
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80055c2:	3304      	adds	r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
      USBH_BulkSendData(phost,
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80055ce:	330d      	adds	r3, #13
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2001      	movs	r0, #1
 80055d4:	9000      	str	r0, [sp, #0]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f002 fb69 	bl	8007cae <USBH_BulkSendData>
                        MTP_Handle->DataOutPipe,
                        1U);
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80055e2:	2202      	movs	r2, #2
 80055e4:	701a      	strb	r2, [r3, #0]
      break;
 80055e6:	e231      	b.n	8005a4c <USBH_PTP_Process+0x4f4>

    case PTP_OP_REQUEST_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80055ee:	330d      	adds	r3, #13
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f002 fedb 	bl	80083b0 <USBH_LL_GetURBState>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8005600:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005604:	2b01      	cmp	r3, #1
 8005606:	d127      	bne.n	8005658 <USBH_PTP_Process+0x100>
      {
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800560e:	332c      	adds	r3, #44	; 0x2c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <USBH_PTP_Process+0xca>
        {
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800561c:	2207      	movs	r2, #7
 800561e:	701a      	strb	r2, [r3, #0]
#endif
      }
      else
      {
      }
      break;
 8005620:	e20d      	b.n	8005a3e <USBH_PTP_Process+0x4e6>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005628:	332c      	adds	r3, #44	; 0x2c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <USBH_PTP_Process+0xe4>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005636:	2203      	movs	r2, #3
 8005638:	701a      	strb	r2, [r3, #0]
      break;
 800563a:	e200      	b.n	8005a3e <USBH_PTP_Process+0x4e6>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005642:	332c      	adds	r3, #44	; 0x2c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b02      	cmp	r3, #2
 8005648:	f040 81f9 	bne.w	8005a3e <USBH_PTP_Process+0x4e6>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005652:	2205      	movs	r2, #5
 8005654:	701a      	strb	r2, [r3, #0]
      break;
 8005656:	e1f2      	b.n	8005a3e <USBH_PTP_Process+0x4e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005658:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800565c:	2b02      	cmp	r3, #2
 800565e:	d105      	bne.n	800566c <USBH_PTP_Process+0x114>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
      break;
 800566a:	e1e8      	b.n	8005a3e <USBH_PTP_Process+0x4e6>
      else if (URB_Status == USBH_URB_STALL)
 800566c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005670:	2b05      	cmp	r3, #5
 8005672:	f040 81e4 	bne.w	8005a3e <USBH_PTP_Process+0x4e6>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800567c:	2209      	movs	r2, #9
 800567e:	701a      	strb	r2, [r3, #0]
      break;
 8005680:	e1dd      	b.n	8005a3e <USBH_PTP_Process+0x4e6>

    case PTP_DATA_OUT_PHASE_STATE:

      USBH_BulkSendData(phost,
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005688:	3330      	adds	r3, #48	; 0x30
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005692:	3312      	adds	r3, #18
 8005694:	881a      	ldrh	r2, [r3, #0]
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800569c:	330d      	adds	r3, #13
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2001      	movs	r0, #1
 80056a2:	9000      	str	r0, [sp, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f002 fb02 	bl	8007cae <USBH_BulkSendData>
                        MTP_Handle->DataOutEpSize,
                        MTP_Handle->DataOutPipe,
                        1U);


      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80056b0:	2204      	movs	r2, #4
 80056b2:	701a      	strb	r2, [r3, #0]
      break;
 80056b4:	e1ca      	b.n	8005a4c <USBH_PTP_Process+0x4f4>

    case PTP_DATA_OUT_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80056bc:	330d      	adds	r3, #13
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f002 fe74 	bl	80083b0 <USBH_LL_GetURBState>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 80056ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f040 8081 	bne.w	80057da <USBH_PTP_Process+0x282>
      {
        /* Adjust Data pointer and data length */
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80056de:	3334      	adds	r3, #52	; 0x34
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80056e8:	3312      	adds	r3, #18
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d94c      	bls.n	800578a <USBH_PTP_Process+0x232>
        {
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80056f6:	3330      	adds	r3, #48	; 0x30
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005700:	3312      	adds	r3, #18
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	441a      	add	r2, r3
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800570c:	3330      	adds	r3, #48	; 0x30
 800570e:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005716:	3334      	adds	r3, #52	; 0x34
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005720:	3312      	adds	r3, #18
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800572c:	3334      	adds	r3, #52	; 0x34
 800572e:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005736:	3338      	adds	r3, #56	; 0x38
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005740:	3312      	adds	r3, #18
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	441a      	add	r2, r3
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800574c:	3338      	adds	r3, #56	; 0x38
 800574e:	601a      	str	r2, [r3, #0]

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005756:	3338      	adds	r3, #56	; 0x38
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800575e:	d31a      	bcc.n	8005796 <USBH_PTP_Process+0x23e>
          {
            PTP_BufferFullCallback(phost);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fa1f 	bl	8005ba4 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800576c:	3338      	adds	r3, #56	; 0x38
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
            MTP_Handle->ptp.iteration++;
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005778:	333c      	adds	r3, #60	; 0x3c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005784:	333c      	adds	r3, #60	; 0x3c
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e005      	b.n	8005796 <USBH_PTP_Process+0x23e>
          }
        }
        else
        {
          MTP_Handle->ptp.data_length = 0U;
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005790:	3334      	adds	r3, #52	; 0x34
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
        }

        /* More Data To be Sent */
        if (MTP_Handle->ptp.data_length > 0U)
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800579c:	3334      	adds	r3, #52	; 0x34
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d014      	beq.n	80057ce <USBH_PTP_Process+0x276>
        {
          USBH_BulkSendData(phost,
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80057aa:	3330      	adds	r3, #48	; 0x30
 80057ac:	6819      	ldr	r1, [r3, #0]
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80057b4:	3312      	adds	r3, #18
 80057b6:	881a      	ldrh	r2, [r3, #0]
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80057be:	330d      	adds	r3, #13
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2001      	movs	r0, #1
 80057c4:	9000      	str	r0, [sp, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f002 fa71 	bl	8007cae <USBH_BulkSendData>
      }
      else
      {
        /* .. */
      }
      break;
 80057cc:	e139      	b.n	8005a42 <USBH_PTP_Process+0x4ea>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80057d4:	2207      	movs	r2, #7
 80057d6:	701a      	strb	r2, [r3, #0]
      break;
 80057d8:	e133      	b.n	8005a42 <USBH_PTP_Process+0x4ea>
      else if (URB_Status == USBH_URB_NOTREADY)
 80057da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d105      	bne.n	80057ee <USBH_PTP_Process+0x296>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80057e8:	2203      	movs	r2, #3
 80057ea:	701a      	strb	r2, [r3, #0]
      break;
 80057ec:	e129      	b.n	8005a42 <USBH_PTP_Process+0x4ea>
      else if (URB_Status == USBH_URB_STALL)
 80057ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	f040 8125 	bne.w	8005a42 <USBH_PTP_Process+0x4ea>
        MTP_Handle->ptp.state  = PTP_ERROR;
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80057fe:	2209      	movs	r2, #9
 8005800:	701a      	strb	r2, [r3, #0]
      break;
 8005802:	e11e      	b.n	8005a42 <USBH_PTP_Process+0x4ea>

    case PTP_DATA_IN_PHASE_STATE:
      /* Send first packet */
      USBH_BulkReceiveData(phost,
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800580a:	3330      	adds	r3, #48	; 0x30
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005814:	3314      	adds	r3, #20
 8005816:	881a      	ldrh	r2, [r3, #0]
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800581e:	330c      	adds	r3, #12
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f002 fa68 	bl	8007cf8 <USBH_BulkReceiveData>
                           MTP_Handle->ptp.data_ptr,
                           MTP_Handle->DataInEpSize,
                           MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800582e:	2206      	movs	r2, #6
 8005830:	701a      	strb	r2, [r3, #0]
      break;
 8005832:	e10b      	b.n	8005a4c <USBH_PTP_Process+0x4f4>

    case PTP_DATA_IN_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800583a:	330c      	adds	r3, #12
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f002 fdb5 	bl	80083b0 <USBH_LL_GetURBState>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800584c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005850:	2b01      	cmp	r3, #1
 8005852:	f040 809b 	bne.w	800598c <USBH_PTP_Process+0x434>
      {
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800585c:	330c      	adds	r3, #12
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f002 fd12 	bl	800828c <USBH_LL_GetLastXferSize>
 8005868:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	1c59      	adds	r1, r3, #1
 8005874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005876:	f502 5207 	add.w	r2, r2, #8640	; 0x21c0
 800587a:	6011      	str	r1, [r2, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d110      	bne.n	80058a2 <USBH_PTP_Process+0x34a>
        {
          /* This is the first packet; so retrieve exact data length from payload */
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005886:	3330      	adds	r3, #48	; 0x30
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005892:	3334      	adds	r3, #52	; 0x34
 8005894:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.iteration = 0U;
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800589c:	333c      	adds	r3, #60	; 0x3c
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
        }

        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80058a8:	3314      	adds	r3, #20
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d359      	bcc.n	8005968 <USBH_PTP_Process+0x410>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80058ba:	3334      	adds	r3, #52	; 0x34
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d052      	beq.n	8005968 <USBH_PTP_Process+0x410>
        {
          MTP_Handle->ptp.data_ptr += len;
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80058c8:	3330      	adds	r3, #48	; 0x30
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	441a      	add	r2, r3
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80058d6:	3330      	adds	r3, #48	; 0x30
 80058d8:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.data_length -= len;
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80058e0:	3334      	adds	r3, #52	; 0x34
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80058ee:	3334      	adds	r3, #52	; 0x34
 80058f0:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.data_packet += len;
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80058f8:	3338      	adds	r3, #56	; 0x38
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	441a      	add	r2, r3
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005906:	3338      	adds	r3, #56	; 0x38
 8005908:	601a      	str	r2, [r3, #0]

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005910:	3338      	adds	r3, #56	; 0x38
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8005918:	d313      	bcc.n	8005942 <USBH_PTP_Process+0x3ea>
          {
            PTP_BufferFullCallback(phost);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f942 	bl	8005ba4 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005926:	3338      	adds	r3, #56	; 0x38
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
            MTP_Handle->ptp.iteration++;
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005932:	333c      	adds	r3, #60	; 0x3c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800593e:	333c      	adds	r3, #60	; 0x3c
 8005940:	601a      	str	r2, [r3, #0]
          }

          /* Continue receiving data*/
          USBH_BulkReceiveData(phost,
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005948:	3330      	adds	r3, #48	; 0x30
 800594a:	6819      	ldr	r1, [r3, #0]
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005952:	3314      	adds	r3, #20
 8005954:	881a      	ldrh	r2, [r3, #0]
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800595c:	330c      	adds	r3, #12
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f002 f9c9 	bl	8007cf8 <USBH_BulkReceiveData>
      }
      else
      {
        /* .. */
      }
      break;
 8005966:	e06e      	b.n	8005a46 <USBH_PTP_Process+0x4ee>
          MTP_Handle->ptp.data_length -= len;
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800596e:	3334      	adds	r3, #52	; 0x34
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800597c:	3334      	adds	r3, #52	; 0x34
 800597e:	601a      	str	r2, [r3, #0]
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005986:	2207      	movs	r2, #7
 8005988:	701a      	strb	r2, [r3, #0]
      break;
 800598a:	e05c      	b.n	8005a46 <USBH_PTP_Process+0x4ee>
      else if (URB_Status == USBH_URB_STALL)
 800598c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005990:	2b05      	cmp	r3, #5
 8005992:	d158      	bne.n	8005a46 <USBH_PTP_Process+0x4ee>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800599a:	2209      	movs	r2, #9
 800599c:	701a      	strb	r2, [r3, #0]
      break;
 800599e:	e052      	b.n	8005a46 <USBH_PTP_Process+0x4ee>

    case PTP_RESPONSE_STATE:
      USBH_BulkReceiveData(phost,
                           (uint8_t *)(void *) & (MTP_Handle->ptp.resp_container),
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	f503 5106 	add.w	r1, r3, #8576	; 0x2180
 80059a6:	3104      	adds	r1, #4
      USBH_BulkReceiveData(phost,
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80059ae:	330c      	adds	r3, #12
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	223f      	movs	r2, #63	; 0x3f
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f002 f99f 	bl	8007cf8 <USBH_BulkReceiveData>
                           PTP_USB_BULK_REQ_RESP_MAX_LEN,
                           MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80059c0:	2208      	movs	r2, #8
 80059c2:	701a      	strb	r2, [r3, #0]
      break;
 80059c4:	e042      	b.n	8005a4c <USBH_PTP_Process+0x4f4>

    case PTP_RESPONSE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 80059cc:	330c      	adds	r3, #12
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f002 fcec 	bl	80083b0 <USBH_LL_GetURBState>
 80059d8:	4603      	mov	r3, r0
 80059da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 80059de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d118      	bne.n	8005a18 <USBH_PTP_Process+0x4c0>
      {
        USBH_PTP_GetResponse(phost, &ptp_container);
 80059e6:	f107 0308 	add.w	r3, r7, #8
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f88d 	bl	8005b0c <USBH_PTP_GetResponse>

        if (ptp_container.Code == PTP_RC_OK)
 80059f2:	893b      	ldrh	r3, [r7, #8]
 80059f4:	f242 0201 	movw	r2, #8193	; 0x2001
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d103      	bne.n	8005a04 <USBH_PTP_Process+0x4ac>
        {
          status = USBH_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005a02:	e002      	b.n	8005a0a <USBH_PTP_Process+0x4b2>
        }
        else
        {
          status = USBH_FAIL;
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005a10:	3301      	adds	r3, #1
 8005a12:	2201      	movs	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        /* .. */
      }
      break;
 8005a16:	e018      	b.n	8005a4a <USBH_PTP_Process+0x4f2>
      else if (URB_Status == USBH_URB_STALL)
 8005a18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a1c:	2b05      	cmp	r3, #5
 8005a1e:	d114      	bne.n	8005a4a <USBH_PTP_Process+0x4f2>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005a26:	2209      	movs	r2, #9
 8005a28:	701a      	strb	r2, [r3, #0]
      break;
 8005a2a:	e00e      	b.n	8005a4a <USBH_PTP_Process+0x4f2>

    case PTP_ERROR:
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005a32:	3301      	adds	r3, #1
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
      break;
 8005a38:	e008      	b.n	8005a4c <USBH_PTP_Process+0x4f4>

    default:
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e006      	b.n	8005a4c <USBH_PTP_Process+0x4f4>
      break;
 8005a3e:	bf00      	nop
 8005a40:	e004      	b.n	8005a4c <USBH_PTP_Process+0x4f4>
      break;
 8005a42:	bf00      	nop
 8005a44:	e002      	b.n	8005a4c <USBH_PTP_Process+0x4f4>
      break;
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <USBH_PTP_Process+0x4f4>
      break;
 8005a4a:	bf00      	nop
  }
  return status;
 8005a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3738      	adds	r7, #56	; 0x38
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <USBH_PTP_SendRequest>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_SendRequest(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *req)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	60bb      	str	r3, [r7, #8]

  /* Clear PTP Data container*/
  USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005a76:	3304      	adds	r3, #4
 8005a78:	2220      	movs	r2, #32
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f002 fd67 	bl	8008550 <memset>

  /* build appropriate USB container */
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - (sizeof(uint32_t) * (5U - req->Nparam));
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a88:	3303      	adds	r3, #3
 8005a8a:	009a      	lsls	r2, r3, #2
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005a92:	3304      	adds	r3, #4
 8005a94:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	801a      	strh	r2, [r3, #0]
  MTP_Handle->ptp.op_container.code = req->Code;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	881a      	ldrh	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005aac:	330a      	adds	r3, #10
 8005aae:	801a      	strh	r2, [r3, #0]
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005aba:	330c      	adds	r3, #12
 8005abc:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005ac8:	3310      	adds	r3, #16
 8005aca:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005af2:	331c      	adds	r3, #28
 8005af4:	601a      	str	r2, [r3, #0]
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8005b00:	601a      	str	r2, [r3, #0]

  return status;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USBH_PTP_GetResponse>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetResponse(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *resp)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	60bb      	str	r3, [r7, #8]

  /* build an appropriate PTPContainer */
  resp->Code = MTP_Handle->ptp.resp_container.code;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005b2a:	330a      	adds	r3, #10
 8005b2c:	881a      	ldrh	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	801a      	strh	r2, [r3, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005b38:	3328      	adds	r3, #40	; 0x28
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	605a      	str	r2, [r3, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005b46:	330c      	adds	r3, #12
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	609a      	str	r2, [r3, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005b54:	3310      	adds	r3, #16
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	60da      	str	r2, [r3, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005b62:	3314      	adds	r3, #20
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	611a      	str	r2, [r3, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005b70:	3318      	adds	r3, #24
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	615a      	str	r2, [r3, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005b7e:	331c      	adds	r3, #28
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	619a      	str	r2, [r3, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005b8c:	3320      	adds	r3, #32
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	61da      	str	r2, [r3, #28]

  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <PTP_BufferFullCallback>:
  * @brief  The function informs user that data buffer is full
  *  @param  phost: host handle
  * @retval None
  */
static void PTP_BufferFullCallback(USBH_HandleTypeDef *phost)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	60fb      	str	r3, [r7, #12]

  switch (MTP_Handle->ptp.data_container.code)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8005bbc:	330a      	adds	r3, #10
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	2b1a      	cmp	r3, #26
 8005bc8:	d874      	bhi.n	8005cb4 <PTP_BufferFullCallback+0x110>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <PTP_BufferFullCallback+0x2c>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005cb5 	.word	0x08005cb5
 8005bd8:	08005cb5 	.word	0x08005cb5
 8005bdc:	08005cb5 	.word	0x08005cb5
 8005be0:	08005cb5 	.word	0x08005cb5
 8005be4:	08005cb5 	.word	0x08005cb5
 8005be8:	08005cb5 	.word	0x08005cb5
 8005bec:	08005cb5 	.word	0x08005cb5
 8005bf0:	08005c49 	.word	0x08005c49
 8005bf4:	08005cb5 	.word	0x08005cb5
 8005bf8:	08005cb5 	.word	0x08005cb5
 8005bfc:	08005cb5 	.word	0x08005cb5
 8005c00:	08005c8d 	.word	0x08005c8d
 8005c04:	08005cb5 	.word	0x08005cb5
 8005c08:	08005cb5 	.word	0x08005cb5
 8005c0c:	08005cb5 	.word	0x08005cb5
 8005c10:	08005cb5 	.word	0x08005cb5
 8005c14:	08005cb5 	.word	0x08005cb5
 8005c18:	08005cb5 	.word	0x08005cb5
 8005c1c:	08005cb5 	.word	0x08005cb5
 8005c20:	08005cb5 	.word	0x08005cb5
 8005c24:	08005cb5 	.word	0x08005cb5
 8005c28:	08005cb5 	.word	0x08005cb5
 8005c2c:	08005cb5 	.word	0x08005cb5
 8005c30:	08005cb5 	.word	0x08005cb5
 8005c34:	08005cb5 	.word	0x08005cb5
 8005c38:	08005c49 	.word	0x08005c49
  {
    case PTP_OC_GetDeviceInfo:
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f841 	bl	8005cc8 <PTP_DecodeDeviceInfo>
      break;
 8005c46:	e03a      	b.n	8005cbe <PTP_BufferFullCallback+0x11a>

    case PTP_OC_GetPartialObject:
    case PTP_OC_GetObject:

      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005c4e:	333c      	adds	r3, #60	; 0x3c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d130      	bne.n	8005cb8 <PTP_BufferFullCallback+0x114>
      {
        /* copy it to object */
        USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data, PTP_USB_BULK_PAYLOAD_LEN_READ);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8005c66:	3310      	adds	r3, #16
 8005c68:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f002 fc61 	bl	8008534 <memcpy>

        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8005c78:	3304      	adds	r3, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f503 727d 	add.w	r2, r3, #1012	; 0x3f4
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005c86:	3330      	adds	r3, #48	; 0x30
 8005c88:	601a      	str	r2, [r3, #0]
      }
      break;
 8005c8a:	e015      	b.n	8005cb8 <PTP_BufferFullCallback+0x114>

    case PTP_OC_SendObject:
      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005c92:	333c      	adds	r3, #60	; 0x3c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d110      	bne.n	8005cbc <PTP_BufferFullCallback+0x118>
      {
        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f503 727d 	add.w	r2, r3, #1012	; 0x3f4
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005cae:	3330      	adds	r3, #48	; 0x30
 8005cb0:	601a      	str	r2, [r3, #0]
      }
      break;
 8005cb2:	e003      	b.n	8005cbc <PTP_BufferFullCallback+0x118>

    default:
      break;
 8005cb4:	bf00      	nop
 8005cb6:	e002      	b.n	8005cbe <PTP_BufferFullCallback+0x11a>
      break;
 8005cb8:	bf00      	nop
 8005cba:	e000      	b.n	8005cbe <PTP_BufferFullCallback+0x11a>
      break;
 8005cbc:	bf00      	nop


  }
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop

08005cc8 <PTP_DecodeDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval None
  */
static void PTP_DecodeDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	617b      	str	r3, [r7, #20]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8005ce2:	3310      	adds	r3, #16
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Max device info is PTP_USB_BULK_HS_MAX_PACKET_LEN_READ */
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
               only available data are decoded.");

  if (MTP_Handle->ptp.iteration == 0U)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005cec:	333c      	adds	r3, #60	; 0x3c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 80fc 	bne.w	8005eee <PTP_DecodeDeviceInfo+0x226>
  {
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	801a      	strh	r2, [r3, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	3302      	adds	r3, #2
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3303      	adds	r3, #3
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	431a      	orrs	r2, r3
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3304      	adds	r3, #4
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	041b      	lsls	r3, r3, #16
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	3305      	adds	r3, #5
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	061b      	lsls	r3, r3, #24
 8005d34:	431a      	orrs	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	605a      	str	r2, [r3, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3306      	adds	r3, #6
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	3307      	adds	r3, #7
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	811a      	strh	r2, [r3, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f103 000a 	add.w	r0, r3, #10
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	f107 020a 	add.w	r2, r7, #10
 8005d64:	4619      	mov	r1, r3
 8005d66:	f000 fa9e 	bl	80062a6 <PTP_GetString>

    totallen = len * 2U + 1U;
 8005d6a:	897b      	ldrh	r3, [r7, #10]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3308      	adds	r3, #8
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3309      	adds	r3, #9
 8005d82:	6939      	ldr	r1, [r7, #16]
 8005d84:	440b      	add	r3, r1
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f503 7088 	add.w	r0, r3, #272	; 0x110
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	330a      	adds	r3, #10
 8005da2:	461a      	mov	r2, r3
 8005da4:	6939      	ldr	r1, [r7, #16]
 8005da6:	f000 faad 	bl	8006304 <PTP_GetArray16>
 8005daa:	4602      	mov	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                       data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->OperationsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005db8:	005a      	lsls	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	60fb      	str	r3, [r7, #12]
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	330a      	adds	r3, #10
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6939      	ldr	r1, [r7, #16]
 8005dd0:	f000 fa98 	bl	8006304 <PTP_GetArray16>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
                                                   data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->EventsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8005de2:	005a      	lsls	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	3304      	adds	r3, #4
 8005dea:	60fb      	str	r3, [r7, #12]
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	330a      	adds	r3, #10
 8005df6:	461a      	mov	r2, r3
 8005df8:	6939      	ldr	r1, [r7, #16]
 8005dfa:	f000 fa83 	bl	8006304 <PTP_GetArray16>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                                                             data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->DevicePropertiesSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005e0c:	005a      	lsls	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	3304      	adds	r3, #4
 8005e14:	60fb      	str	r3, [r7, #12]

    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	330a      	adds	r3, #10
 8005e20:	461a      	mov	r2, r3
 8005e22:	6939      	ldr	r1, [r7, #16]
 8005e24:	f000 fa6e 	bl	8006304 <PTP_GetArray16>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
                                                  data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->CaptureFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8005e36:	005a      	lsls	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	60fb      	str	r3, [r7, #12]
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f503 6088 	add.w	r0, r3, #1088	; 0x440
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	330a      	adds	r3, #10
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6939      	ldr	r1, [r7, #16]
 8005e4e:	f000 fa59 	bl	8006304 <PTP_GetArray16>
 8005e52:	4602      	mov	r2, r0
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                                                 data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->ImageFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8005e60:	005a      	lsls	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	3304      	adds	r3, #4
 8005e68:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f503 60a1 	add.w	r0, r3, #1288	; 0x508
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	330a      	adds	r3, #10
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f107 020a 	add.w	r2, r7, #10
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f000 fa12 	bl	80062a6 <PTP_GetString>

    totallen += len * 2U + 1U;
 8005e82:	897b      	ldrh	r3, [r7, #10]
 8005e84:	005a      	lsls	r2, r3, #1
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f203 6007 	addw	r0, r3, #1543	; 0x607
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	330a      	adds	r3, #10
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f107 020a 	add.w	r2, r7, #10
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	f000 fa00 	bl	80062a6 <PTP_GetString>

    totallen += len * 2U + 1U;
 8005ea6:	897b      	ldrh	r3, [r7, #10]
 8005ea8:	005a      	lsls	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f203 7006 	addw	r0, r3, #1798	; 0x706
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	330a      	adds	r3, #10
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f107 020a 	add.w	r2, r7, #10
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f000 f9ee 	bl	80062a6 <PTP_GetString>

    totallen += len * 2U + 1U;
 8005eca:	897b      	ldrh	r3, [r7, #10]
 8005ecc:	005a      	lsls	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f603 0005 	addw	r0, r3, #2053	; 0x805
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	330a      	adds	r3, #10
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f107 020a 	add.w	r2, r7, #10
 8005ee8:	4619      	mov	r1, r3
 8005eea:	f000 f9dc 	bl	80062a6 <PTP_GetString>
  }
}
 8005eee:	bf00      	nop
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <PTP_GetStorageIDs>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageIDs(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *stor_ids)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	60fb      	str	r3, [r7, #12]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8005f10:	3310      	adds	r3, #16
 8005f12:	60bb      	str	r3, [r7, #8]

  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	3304      	adds	r3, #4
 8005f18:	2200      	movs	r2, #0
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fa32 	bl	8006386 <PTP_GetArray32>
 8005f22:	4602      	mov	r2, r0
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	601a      	str	r2, [r3, #0]
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <PTP_GetStorageInfo>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageInfo(USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *stor_info)
{
 8005f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f34:	b0a4      	sub	sp, #144	; 0x90
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	67f8      	str	r0, [r7, #124]	; 0x7c
 8005f3a:	67b9      	str	r1, [r7, #120]	; 0x78
 8005f3c:	677a      	str	r2, [r7, #116]	; 0x74
  /* Prevent unused argument(s) compilation warning */
  UNUSED(storage_id);

  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8005f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8005f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f4e:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8005f52:	3310      	adds	r3, #16
 8005f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint16_t len;

  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 8005f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f64:	3301      	adds	r3, #1
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f74:	8013      	strh	r3, [r2, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 8005f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f84:	3303      	adds	r3, #3
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f94:	8053      	strh	r3, [r2, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 8005f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fa4:	3305      	adds	r3, #5
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005fb4:	8093      	strh	r3, [r2, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 8005fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fba:	3306      	adds	r3, #6
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2dc      	uxtb	r4, r3
 8005fc0:	f04f 0500 	mov.w	r5, #0
 8005fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fc8:	3307      	adds	r3, #7
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	0219      	lsls	r1, r3, #8
 8005fdc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8005fe0:	0210      	lsls	r0, r2, #8
 8005fe2:	ea44 0a00 	orr.w	sl, r4, r0
 8005fe6:	ea45 0b01 	orr.w	fp, r5, r1
 8005fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fee:	3308      	adds	r3, #8
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	f04f 0000 	mov.w	r0, #0
 8005ffc:	f04f 0100 	mov.w	r1, #0
 8006000:	0419      	lsls	r1, r3, #16
 8006002:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8006006:	0410      	lsls	r0, r2, #16
 8006008:	ea4a 0300 	orr.w	r3, sl, r0
 800600c:	66bb      	str	r3, [r7, #104]	; 0x68
 800600e:	ea4b 0301 	orr.w	r3, fp, r1
 8006012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006018:	3309      	adds	r3, #9
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b2da      	uxtb	r2, r3
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8006026:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800602a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800602e:	460b      	mov	r3, r1
 8006030:	ea43 0308 	orr.w	r3, r3, r8
 8006034:	663b      	str	r3, [r7, #96]	; 0x60
 8006036:	4613      	mov	r3, r2
 8006038:	ea43 0309 	orr.w	r3, r3, r9
 800603c:	667b      	str	r3, [r7, #100]	; 0x64
 800603e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006042:	330a      	adds	r3, #10
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	f04f 0000 	mov.w	r0, #0
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	0011      	movs	r1, r2
 8006056:	2000      	movs	r0, #0
 8006058:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800605c:	4623      	mov	r3, r4
 800605e:	4303      	orrs	r3, r0
 8006060:	65bb      	str	r3, [r7, #88]	; 0x58
 8006062:	462b      	mov	r3, r5
 8006064:	430b      	orrs	r3, r1
 8006066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800606c:	330b      	adds	r3, #11
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	f04f 0000 	mov.w	r0, #0
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	0211      	lsls	r1, r2, #8
 8006080:	2000      	movs	r0, #0
 8006082:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8006086:	4623      	mov	r3, r4
 8006088:	4303      	orrs	r3, r0
 800608a:	653b      	str	r3, [r7, #80]	; 0x50
 800608c:	462b      	mov	r3, r5
 800608e:	430b      	orrs	r3, r1
 8006090:	657b      	str	r3, [r7, #84]	; 0x54
 8006092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006096:	330c      	adds	r3, #12
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	f04f 0000 	mov.w	r0, #0
 80060a4:	f04f 0100 	mov.w	r1, #0
 80060a8:	0411      	lsls	r1, r2, #16
 80060aa:	2000      	movs	r0, #0
 80060ac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80060b0:	4623      	mov	r3, r4
 80060b2:	4303      	orrs	r3, r0
 80060b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b6:	462b      	mov	r3, r5
 80060b8:	430b      	orrs	r3, r1
 80060ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c0:	330d      	adds	r3, #13
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	f04f 0000 	mov.w	r0, #0
 80060ce:	f04f 0100 	mov.w	r1, #0
 80060d2:	0611      	lsls	r1, r2, #24
 80060d4:	2000      	movs	r0, #0
 80060d6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80060da:	4623      	mov	r3, r4
 80060dc:	4303      	orrs	r3, r0
 80060de:	643b      	str	r3, [r7, #64]	; 0x40
 80060e0:	462b      	mov	r3, r5
 80060e2:	430b      	orrs	r3, r1
 80060e4:	647b      	str	r3, [r7, #68]	; 0x44
 80060e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80060ec:	e9c3 1202 	strd	r1, r2, [r3, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 80060f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060f4:	330e      	adds	r3, #14
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b2dc      	uxtb	r4, r3
 80060fa:	f04f 0500 	mov.w	r5, #0
 80060fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006102:	330f      	adds	r3, #15
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b2da      	uxtb	r2, r3
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	f04f 0000 	mov.w	r0, #0
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	0219      	lsls	r1, r3, #8
 8006116:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800611a:	0210      	lsls	r0, r2, #8
 800611c:	ea44 0300 	orr.w	r3, r4, r0
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
 8006122:	ea45 0301 	orr.w	r3, r5, r1
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800612c:	3310      	adds	r3, #16
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	f04f 0000 	mov.w	r0, #0
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	0419      	lsls	r1, r3, #16
 8006140:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8006144:	0410      	lsls	r0, r2, #16
 8006146:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800614a:	4623      	mov	r3, r4
 800614c:	4303      	orrs	r3, r0
 800614e:	633b      	str	r3, [r7, #48]	; 0x30
 8006150:	462b      	mov	r3, r5
 8006152:	430b      	orrs	r3, r1
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
 8006156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800615a:	3311      	adds	r3, #17
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b2da      	uxtb	r2, r3
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	0a11      	lsrs	r1, r2, #8
 8006166:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006168:	0613      	lsls	r3, r2, #24
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
 800616c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006170:	4623      	mov	r3, r4
 8006172:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006176:	4602      	mov	r2, r0
 8006178:	4313      	orrs	r3, r2
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	462b      	mov	r3, r5
 800617e:	460a      	mov	r2, r1
 8006180:	4313      	orrs	r3, r2
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
 8006184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006188:	3312      	adds	r3, #18
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b2d8      	uxtb	r0, r3
 800618e:	f04f 0100 	mov.w	r1, #0
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	0003      	movs	r3, r0
 800619c:	2200      	movs	r2, #0
 800619e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80061a2:	4621      	mov	r1, r4
 80061a4:	4311      	orrs	r1, r2
 80061a6:	61b9      	str	r1, [r7, #24]
 80061a8:	4629      	mov	r1, r5
 80061aa:	4319      	orrs	r1, r3
 80061ac:	61f9      	str	r1, [r7, #28]
 80061ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061b2:	3313      	adds	r3, #19
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	b2d8      	uxtb	r0, r3
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	0203      	lsls	r3, r0, #8
 80061c6:	2200      	movs	r2, #0
 80061c8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80061cc:	4621      	mov	r1, r4
 80061ce:	4311      	orrs	r1, r2
 80061d0:	6139      	str	r1, [r7, #16]
 80061d2:	4629      	mov	r1, r5
 80061d4:	4319      	orrs	r1, r3
 80061d6:	6179      	str	r1, [r7, #20]
 80061d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061dc:	3314      	adds	r3, #20
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	b2d8      	uxtb	r0, r3
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	0403      	lsls	r3, r0, #16
 80061f0:	2200      	movs	r2, #0
 80061f2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80061f6:	4621      	mov	r1, r4
 80061f8:	4311      	orrs	r1, r2
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	4629      	mov	r1, r5
 80061fe:	4319      	orrs	r1, r3
 8006200:	60f9      	str	r1, [r7, #12]
 8006202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006206:	3315      	adds	r3, #21
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b2d8      	uxtb	r0, r3
 800620c:	f04f 0100 	mov.w	r1, #0
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	0603      	lsls	r3, r0, #24
 800621a:	2200      	movs	r2, #0
 800621c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006220:	4621      	mov	r1, r4
 8006222:	4311      	orrs	r1, r2
 8006224:	6039      	str	r1, [r7, #0]
 8006226:	4629      	mov	r1, r5
 8006228:	4319      	orrs	r1, r3
 800622a:	6079      	str	r1, [r7, #4]
 800622c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800622e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006232:	e9c3 1204 	strd	r1, r2, [r3, #16]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 8006236:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800623a:	3316      	adds	r3, #22
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006244:	3317      	adds	r3, #23
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	431a      	orrs	r2, r3
 800624c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006250:	3318      	adds	r3, #24
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	041b      	lsls	r3, r3, #16
 8006256:	431a      	orrs	r2, r3
 8006258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800625c:	3319      	adds	r3, #25
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	431a      	orrs	r2, r3
 8006264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006266:	619a      	str	r2, [r3, #24]

  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 8006268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800626a:	f103 001c 	add.w	r0, r3, #28
 800626e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006272:	331a      	adds	r3, #26
 8006274:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8006278:	4619      	mov	r1, r3
 800627a:	f000 f814 	bl	80062a6 <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + len * 2U + 1U], &len);
 800627e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006280:	f203 101b 	addw	r0, r3, #283	; 0x11b
 8006284:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	331b      	adds	r3, #27
 800628c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006290:	4413      	add	r3, r2
 8006292:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8006296:	4619      	mov	r1, r3
 8006298:	f000 f805 	bl	80062a6 <PTP_GetString>
}
 800629c:	bf00      	nop
 800629e:	3790      	adds	r7, #144	; 0x90
 80062a0:	46bd      	mov	sp, r7
 80062a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062a6 <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b087      	sub	sp, #28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	801a      	strh	r2, [r3, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	82bb      	strh	r3, [r7, #20]
  data ++; /* Adjust the offset ignoring the String Len */
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60bb      	str	r3, [r7, #8]

  for (idx = 0U; idx < strlength; idx += 2U)
 80062cc:	2300      	movs	r3, #0
 80062ce:	82fb      	strh	r3, [r7, #22]
 80062d0:	e00b      	b.n	80062ea <PTP_GetString+0x44>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 80062d2:	8afb      	ldrh	r3, [r7, #22]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	4413      	add	r3, r2
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	701a      	strb	r2, [r3, #0]
    str++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
  for (idx = 0U; idx < strlength; idx += 2U)
 80062e4:	8afb      	ldrh	r3, [r7, #22]
 80062e6:	3302      	adds	r3, #2
 80062e8:	82fb      	strh	r3, [r7, #22]
 80062ea:	8afa      	ldrh	r2, [r7, #22]
 80062ec:	8abb      	ldrh	r3, [r7, #20]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d3ef      	bcc.n	80062d2 <PTP_GetString+0x2c>
  }
  *str = 0U; /* mark end of string */
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	4619      	mov	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3301      	adds	r3, #1
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4413      	add	r3, r2
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	ea41 0203 	orr.w	r2, r1, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3302      	adds	r3, #2
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	440b      	add	r3, r1
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3303      	adds	r3, #3
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	440b      	add	r3, r1
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	061b      	lsls	r3, r3, #24
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800634c:	e010      	b.n	8006370 <PTP_GetArray16+0x6c>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	3302      	adds	r3, #2
 8006352:	005a      	lsls	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4413      	add	r3, r2
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	4413      	add	r3, r2
 800635c:	7819      	ldrb	r1, [r3, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	b28a      	uxth	r2, r1
 8006368:	801a      	strh	r2, [r3, #0]
    idx++;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	3301      	adds	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
  while (size > idx)
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	429a      	cmp	r2, r3
 8006376:	d8ea      	bhi.n	800634e <PTP_GetArray16+0x4a>
  }
  return size;
 8006378:	693b      	ldr	r3, [r7, #16]
}
 800637a:	4618      	mov	r0, r3
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4413      	add	r3, r2
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3301      	adds	r3, #1
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	4413      	add	r3, r2
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	ea41 0203 	orr.w	r2, r1, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3302      	adds	r3, #2
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	440b      	add	r3, r1
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3303      	adds	r3, #3
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	440b      	add	r3, r1
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	061b      	lsls	r3, r3, #24
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
  while (size > idx)
 80063ce:	e033      	b.n	8006438 <PTP_GetArray32+0xb2>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	3301      	adds	r3, #1
 80063d4:	009a      	lsls	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4413      	add	r3, r2
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4413      	add	r3, r2
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	3301      	adds	r3, #1
 80063e6:	009a      	lsls	r2, r3, #2
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4413      	add	r3, r2
 80063ec:	3301      	adds	r3, #1
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	ea41 0203 	orr.w	r2, r1, r3
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	3301      	adds	r3, #1
 80063fe:	0099      	lsls	r1, r3, #2
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	440b      	add	r3, r1
 8006404:	3302      	adds	r3, #2
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	440b      	add	r3, r1
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	041b      	lsls	r3, r3, #16
 800640e:	ea42 0103 	orr.w	r1, r2, r3
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	3301      	adds	r3, #1
 8006416:	009a      	lsls	r2, r3, #2
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	3303      	adds	r3, #3
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	4413      	add	r3, r2
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	061a      	lsls	r2, r3, #24
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	4403      	add	r3, r0
 800642e:	430a      	orrs	r2, r1
 8006430:	601a      	str	r2, [r3, #0]
    idx++;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	3301      	adds	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
  while (size > idx)
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	429a      	cmp	r2, r3
 800643e:	d8c7      	bhi.n	80063d0 <PTP_GetArray32+0x4a>
  }
  return size;
 8006440:	693b      	ldr	r3, [r7, #16]
}
 8006442:	4618      	mov	r0, r3
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b08e      	sub	sp, #56	; 0x38
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800646e:	3301      	adds	r3, #1
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d002      	beq.n	800647c <USBH_PTP_OpenSession+0x2e>
 8006476:	2b02      	cmp	r3, #2
 8006478:	d03d      	beq.n	80064f6 <USBH_PTP_OpenSession+0xa8>
    case PTP_REQ_WAIT:
      status = USBH_PTP_Process(phost);
      break;

    default:
      break;
 800647a:	e043      	b.n	8006504 <USBH_PTP_OpenSession+0xb6>
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006482:	3324      	adds	r3, #36	; 0x24
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.session_id = session;
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800648e:	3328      	adds	r3, #40	; 0x28
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800649a:	332c      	adds	r3, #44	; 0x2c
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
      ptp_container.Code = PTP_OC_OpenSession;
 80064a0:	f241 0302 	movw	r3, #4098	; 0x1002
 80064a4:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = session;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80064b0:	3324      	adds	r3, #36	; 0x24
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	1c51      	adds	r1, r2, #1
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80064bc:	3324      	adds	r3, #36	; 0x24
 80064be:	6019      	str	r1, [r3, #0]
 80064c0:	617a      	str	r2, [r7, #20]
      ptp_container.Param1 = session;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	61bb      	str	r3, [r7, #24]
      ptp_container.Nparam = 1U;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 80064cc:	f107 030c 	add.w	r3, r7, #12
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff fac0 	bl	8005a58 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80064e8:	3301      	adds	r3, #1
 80064ea:	2202      	movs	r2, #2
 80064ec:	701a      	strb	r2, [r3, #0]
      status = USBH_BUSY;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 80064f4:	e006      	b.n	8006504 <USBH_PTP_OpenSession+0xb6>
      status = USBH_PTP_Process(phost);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff f82e 	bl	8005558 <USBH_PTP_Process>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8006502:	bf00      	nop
  }
  return status;
 8006504:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006508:	4618      	mov	r0, r3
 800650a:	3738      	adds	r7, #56	; 0x38
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	; 0x38
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8006530:	3301      	adds	r3, #1
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d002      	beq.n	800653e <USBH_PTP_GetDeviceInfo+0x2e>
 8006538:	2b02      	cmp	r3, #2
 800653a:	d04d      	beq.n	80065d8 <USBH_PTP_GetDeviceInfo+0xc8>
        PTP_DecodeDeviceInfo(phost, dev_info);
      }
      break;

    default:
      break;
 800653c:	e05b      	b.n	80065f6 <USBH_PTP_GetDeviceInfo+0xe6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006544:	332c      	adds	r3, #44	; 0x2c
 8006546:	2202      	movs	r2, #2
 8006548:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	f503 52ec 	add.w	r2, r3, #7552	; 0x1d80
 8006550:	3204      	adds	r2, #4
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006558:	3330      	adds	r3, #48	; 0x30
 800655a:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_length = 0U;
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006562:	3334      	adds	r3, #52	; 0x34
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet_counter = 0U;
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006578:	3338      	adds	r3, #56	; 0x38
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 800657e:	f241 0301 	movw	r3, #4097	; 0x1001
 8006582:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800658a:	3328      	adds	r3, #40	; 0x28
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006596:	3324      	adds	r3, #36	; 0x24
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	1c51      	adds	r1, r2, #1
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 80065a2:	3324      	adds	r3, #36	; 0x24
 80065a4:	6019      	str	r1, [r3, #0]
 80065a6:	617a      	str	r2, [r7, #20]
      ptp_container.Nparam = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 80065ae:	f107 030c 	add.w	r3, r7, #12
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff fa4f 	bl	8005a58 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80065c0:	2201      	movs	r2, #1
 80065c2:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80065ca:	3301      	adds	r3, #1
 80065cc:	2202      	movs	r2, #2
 80065ce:	701a      	strb	r2, [r3, #0]
      status = USBH_BUSY;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 80065d6:	e00e      	b.n	80065f6 <USBH_PTP_GetDeviceInfo+0xe6>
      status = USBH_PTP_Process(phost);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7fe ffbd 	bl	8005558 <USBH_PTP_Process>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 80065e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <USBH_PTP_GetDeviceInfo+0xe4>
        PTP_DecodeDeviceInfo(phost, dev_info);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff fb6a 	bl	8005cc8 <PTP_DecodeDeviceInfo>
      break;
 80065f4:	bf00      	nop
  }
  return status;
 80065f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3738      	adds	r7, #56	; 0x38
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b08e      	sub	sp, #56	; 0x38
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8006622:	3301      	adds	r3, #1
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d002      	beq.n	8006630 <USBH_PTP_GetStorageIds+0x2e>
 800662a:	2b02      	cmp	r3, #2
 800662c:	d04d      	beq.n	80066ca <USBH_PTP_GetStorageIds+0xc8>
        PTP_GetStorageIDs(phost, storage_ids);
      }
      break;

    default:
      break;
 800662e:	e05b      	b.n	80066e8 <USBH_PTP_GetStorageIds+0xe6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006636:	332c      	adds	r3, #44	; 0x2c
 8006638:	2202      	movs	r2, #2
 800663a:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f503 52ec 	add.w	r2, r3, #7552	; 0x1d80
 8006642:	3204      	adds	r2, #4
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800664a:	3330      	adds	r3, #48	; 0x30
 800664c:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_length = 0U;
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006654:	3334      	adds	r3, #52	; 0x34
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet_counter = 0U;
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800666a:	3338      	adds	r3, #56	; 0x38
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
      ptp_container.Code = PTP_OC_GetStorageIDs;
 8006670:	f241 0304 	movw	r3, #4100	; 0x1004
 8006674:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800667c:	3328      	adds	r3, #40	; 0x28
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006688:	3324      	adds	r3, #36	; 0x24
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	1c51      	adds	r1, r2, #1
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006694:	3324      	adds	r3, #36	; 0x24
 8006696:	6019      	str	r1, [r3, #0]
 8006698:	617a      	str	r2, [r7, #20]
      ptp_container.Nparam = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 80066a0:	f107 030c 	add.w	r3, r7, #12
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff f9d6 	bl	8005a58 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80066b2:	2201      	movs	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80066bc:	3301      	adds	r3, #1
 80066be:	2202      	movs	r2, #2
 80066c0:	701a      	strb	r2, [r3, #0]
      status = USBH_BUSY;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 80066c8:	e00e      	b.n	80066e8 <USBH_PTP_GetStorageIds+0xe6>
      status = USBH_PTP_Process(phost);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fe ff44 	bl	8005558 <USBH_PTP_Process>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 80066d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <USBH_PTP_GetStorageIds+0xe4>
        PTP_GetStorageIDs(phost, storage_ids);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff fc08 	bl	8005ef6 <PTP_GetStorageIDs>
      break;
 80066e6:	bf00      	nop
  }
  return status;
 80066e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3738      	adds	r7, #56	; 0x38
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b090      	sub	sp, #64	; 0x40
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8006716:	3301      	adds	r3, #1
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d002      	beq.n	8006724 <USBH_PTP_GetStorageInfo+0x30>
 800671e:	2b02      	cmp	r3, #2
 8006720:	d04f      	beq.n	80067c2 <USBH_PTP_GetStorageInfo+0xce>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
      }
      break;

    default:
      break;
 8006722:	e05e      	b.n	80067e2 <USBH_PTP_GetStorageInfo+0xee>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800672a:	332c      	adds	r3, #44	; 0x2c
 800672c:	2202      	movs	r2, #2
 800672e:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	f503 52ec 	add.w	r2, r3, #7552	; 0x1d80
 8006736:	3204      	adds	r2, #4
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800673e:	3330      	adds	r3, #48	; 0x30
 8006740:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_length = 0U;
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006748:	3334      	adds	r3, #52	; 0x34
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet_counter = 0U;
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800675e:	3338      	adds	r3, #56	; 0x38
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
      ptp_container.Code = PTP_OC_GetStorageInfo;
 8006764:	f241 0305 	movw	r3, #4101	; 0x1005
 8006768:	82bb      	strh	r3, [r7, #20]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006770:	3328      	adds	r3, #40	; 0x28
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	61bb      	str	r3, [r7, #24]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800677c:	3324      	adds	r3, #36	; 0x24
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	1c51      	adds	r1, r2, #1
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8006788:	3324      	adds	r3, #36	; 0x24
 800678a:	6019      	str	r1, [r3, #0]
 800678c:	61fa      	str	r2, [r7, #28]
      ptp_container.Param1 = storage_id;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	623b      	str	r3, [r7, #32]
      ptp_container.Nparam = 1U;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      USBH_PTP_SendRequest(phost, &ptp_container);
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	4619      	mov	r1, r3
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff f95a 	bl	8005a58 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80067b4:	3301      	adds	r3, #1
 80067b6:	2202      	movs	r2, #2
 80067b8:	701a      	strb	r2, [r3, #0]
      status = USBH_BUSY;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 80067c0:	e00f      	b.n	80067e2 <USBH_PTP_GetStorageInfo+0xee>
      status = USBH_PTP_Process(phost);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7fe fec8 	bl	8005558 <USBH_PTP_Process>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if (status == USBH_OK)
 80067ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USBH_PTP_GetStorageInfo+0xec>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fba8 	bl	8005f30 <PTP_GetStorageInfo>
      break;
 80067e0:	bf00      	nop
  }
  return status;
 80067e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3740      	adds	r7, #64	; 0x40
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	4613      	mov	r3, r2
 80067fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	e029      	b.n	800685a <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	79fa      	ldrb	r2, [r7, #7]
 800680a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f81f 	bl	8006862 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f001 fc64 	bl	8008120 <USBH_LL_Init>

  return USBH_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e009      	b.n	8006888 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	33e0      	adds	r3, #224	; 0xe0
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	2200      	movs	r2, #0
 8006880:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b0e      	cmp	r3, #14
 800688c:	d9f2      	bls.n	8006874 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e009      	b.n	80068a8 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3301      	adds	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ae:	d3f1      	bcc.n	8006894 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2240      	movs	r2, #64	; 0x40
 80068d4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d016      	beq.n	800694c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10e      	bne.n	8006946 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	33de      	adds	r3, #222	; 0xde
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	e004      	b.n	8006950 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006946:	2302      	movs	r3, #2
 8006948:	73fb      	strb	r3, [r7, #15]
 800694a:	e001      	b.n	8006950 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800694c:	2302      	movs	r3, #2
 800694e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006974:	78fa      	ldrb	r2, [r7, #3]
 8006976:	429a      	cmp	r2, r3
 8006978:	d204      	bcs.n	8006984 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006982:	e001      	b.n	8006988 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006996:	b480      	push	{r7}
 8006998:	b087      	sub	sp, #28
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	4608      	mov	r0, r1
 80069a0:	4611      	mov	r1, r2
 80069a2:	461a      	mov	r2, r3
 80069a4:	4603      	mov	r3, r0
 80069a6:	70fb      	strb	r3, [r7, #3]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70bb      	strb	r3, [r7, #2]
 80069ac:	4613      	mov	r3, r2
 80069ae:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80069be:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069c0:	e025      	b.n	8006a0e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	221a      	movs	r2, #26
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	3308      	adds	r3, #8
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	3302      	adds	r3, #2
 80069d2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	795b      	ldrb	r3, [r3, #5]
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d002      	beq.n	80069e4 <USBH_FindInterface+0x4e>
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	2bff      	cmp	r3, #255	; 0xff
 80069e2:	d111      	bne.n	8006a08 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069e8:	78ba      	ldrb	r2, [r7, #2]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d002      	beq.n	80069f4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069ee:	78bb      	ldrb	r3, [r7, #2]
 80069f0:	2bff      	cmp	r3, #255	; 0xff
 80069f2:	d109      	bne.n	8006a08 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069f8:	787a      	ldrb	r2, [r7, #1]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d002      	beq.n	8006a04 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069fe:	787b      	ldrb	r3, [r7, #1]
 8006a00:	2bff      	cmp	r3, #255	; 0xff
 8006a02:	d101      	bne.n	8006a08 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	e006      	b.n	8006a16 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d9d6      	bls.n	80069c2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a14:	23ff      	movs	r3, #255	; 0xff
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fbb6 	bl	800819c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006a30:	2101      	movs	r1, #1
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fccf 	bl	80083d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af04      	add	r7, sp, #16
 8006a4a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d102      	bne.n	8006a66 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2203      	movs	r2, #3
 8006a64:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b0b      	cmp	r3, #11
 8006a6e:	f200 81b3 	bhi.w	8006dd8 <USBH_Process+0x394>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <USBH_Process+0x34>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006aa9 	.word	0x08006aa9
 8006a7c:	08006adb 	.word	0x08006adb
 8006a80:	08006b43 	.word	0x08006b43
 8006a84:	08006d73 	.word	0x08006d73
 8006a88:	08006dd9 	.word	0x08006dd9
 8006a8c:	08006be7 	.word	0x08006be7
 8006a90:	08006d19 	.word	0x08006d19
 8006a94:	08006c1d 	.word	0x08006c1d
 8006a98:	08006c3d 	.word	0x08006c3d
 8006a9c:	08006c5d 	.word	0x08006c5d
 8006aa0:	08006c8b 	.word	0x08006c8b
 8006aa4:	08006d5b 	.word	0x08006d5b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8193 	beq.w	8006ddc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006abc:	20c8      	movs	r0, #200	; 0xc8
 8006abe:	f001 fcc8 	bl	8008452 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fbc7 	bl	8008256 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ad8:	e180      	b.n	8006ddc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d107      	bne.n	8006af4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006af2:	e182      	b.n	8006dfa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afe:	d914      	bls.n	8006b2a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b06:	3301      	adds	r3, #1
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d903      	bls.n	8006b22 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	220d      	movs	r2, #13
 8006b1e:	701a      	strb	r2, [r3, #0]
      break;
 8006b20:	e16b      	b.n	8006dfa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
      break;
 8006b28:	e167      	b.n	8006dfa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b30:	f103 020a 	add.w	r2, r3, #10
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006b3a:	200a      	movs	r0, #10
 8006b3c:	f001 fc89 	bl	8008452 <USBH_Delay>
      break;
 8006b40:	e15b      	b.n	8006dfa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b52:	2104      	movs	r1, #4
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b58:	2064      	movs	r0, #100	; 0x64
 8006b5a:	f001 fc7a 	bl	8008452 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 fb52 	bl	8008208 <USBH_LL_GetSpeed>
 8006b64:	4603      	mov	r3, r0
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2205      	movs	r2, #5
 8006b72:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b74:	2100      	movs	r1, #0
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 f92a 	bl	8007dd0 <USBH_AllocPipe>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b84:	2180      	movs	r1, #128	; 0x80
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 f922 	bl	8007dd0 <USBH_AllocPipe>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	7919      	ldrb	r1, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	9202      	str	r2, [sp, #8]
 8006bac:	2200      	movs	r2, #0
 8006bae:	9201      	str	r2, [sp, #4]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2280      	movs	r2, #128	; 0x80
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 f8db 	bl	8007d72 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7959      	ldrb	r1, [r3, #5]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bd0:	b292      	uxth	r2, r2
 8006bd2:	9202      	str	r2, [sp, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	9201      	str	r2, [sp, #4]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2200      	movs	r2, #0
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 f8c7 	bl	8007d72 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006be4:	e109      	b.n	8006dfa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f90c 	bl	8006e04 <USBH_HandleEnum>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 80f3 	bne.w	8006de0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d103      	bne.n	8006c14 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2208      	movs	r2, #8
 8006c10:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006c12:	e0e5      	b.n	8006de0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2207      	movs	r2, #7
 8006c18:	701a      	strb	r2, [r3, #0]
      break;
 8006c1a:	e0e1      	b.n	8006de0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80de 	beq.w	8006de4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c2e:	2101      	movs	r1, #1
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2208      	movs	r2, #8
 8006c38:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c3a:	e0d3      	b.n	8006de4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fc20 	bl	800748c <USBH_SetCfg>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f040 80ca 	bne.w	8006de8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2209      	movs	r2, #9
 8006c58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c5a:	e0c5      	b.n	8006de8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fc30 	bl	80074d2 <USBH_SetFeature>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f040 80b9 	bne.w	8006dec <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	220a      	movs	r2, #10
 8006c7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c80:	e0b4      	b.n	8006dec <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	220a      	movs	r2, #10
 8006c86:	701a      	strb	r2, [r3, #0]
      break;
 8006c88:	e0b0      	b.n	8006dec <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80ad 	beq.w	8006df0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
 8006ca2:	e016      	b.n	8006cd2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ca4:	7bfa      	ldrb	r2, [r7, #15]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	32de      	adds	r2, #222	; 0xde
 8006caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cae:	791a      	ldrb	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d108      	bne.n	8006ccc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006cba:	7bfa      	ldrb	r2, [r7, #15]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	32de      	adds	r2, #222	; 0xde
 8006cc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006cca:	e005      	b.n	8006cd8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	73fb      	strb	r3, [r7, #15]
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0e5      	beq.n	8006ca4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d016      	beq.n	8006d10 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2206      	movs	r2, #6
 8006cf8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d00:	2103      	movs	r1, #3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d06:	e073      	b.n	8006df0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220d      	movs	r2, #13
 8006d0c:	701a      	strb	r2, [r3, #0]
      break;
 8006d0e:	e06f      	b.n	8006df0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	220d      	movs	r2, #13
 8006d14:	701a      	strb	r2, [r3, #0]
      break;
 8006d16:	e06b      	b.n	8006df0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d017      	beq.n	8006d52 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	220b      	movs	r2, #11
 8006d3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d40:	e058      	b.n	8006df4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d154      	bne.n	8006df4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	220d      	movs	r2, #13
 8006d4e:	701a      	strb	r2, [r3, #0]
      break;
 8006d50:	e050      	b.n	8006df4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	220d      	movs	r2, #13
 8006d56:	701a      	strb	r2, [r3, #0]
      break;
 8006d58:	e04c      	b.n	8006df4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d049      	beq.n	8006df8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3
      }
      break;
 8006d70:	e042      	b.n	8006df8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fd71 	bl	8006862 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dae:	2105      	movs	r1, #5
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d107      	bne.n	8006dd0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff fe2a 	bl	8006a22 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dce:	e014      	b.n	8006dfa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 f9e3 	bl	800819c <USBH_LL_Start>
      break;
 8006dd6:	e010      	b.n	8006dfa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006dd8:	bf00      	nop
 8006dda:	e00e      	b.n	8006dfa <USBH_Process+0x3b6>
      break;
 8006ddc:	bf00      	nop
 8006dde:	e00c      	b.n	8006dfa <USBH_Process+0x3b6>
      break;
 8006de0:	bf00      	nop
 8006de2:	e00a      	b.n	8006dfa <USBH_Process+0x3b6>
    break;
 8006de4:	bf00      	nop
 8006de6:	e008      	b.n	8006dfa <USBH_Process+0x3b6>
      break;
 8006de8:	bf00      	nop
 8006dea:	e006      	b.n	8006dfa <USBH_Process+0x3b6>
      break;
 8006dec:	bf00      	nop
 8006dee:	e004      	b.n	8006dfa <USBH_Process+0x3b6>
      break;
 8006df0:	bf00      	nop
 8006df2:	e002      	b.n	8006dfa <USBH_Process+0x3b6>
      break;
 8006df4:	bf00      	nop
 8006df6:	e000      	b.n	8006dfa <USBH_Process+0x3b6>
      break;
 8006df8:	bf00      	nop
  }
  return USBH_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af04      	add	r7, sp, #16
 8006e0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b07      	cmp	r3, #7
 8006e1a:	f200 81c1 	bhi.w	80071a0 <USBH_HandleEnum+0x39c>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBH_HandleEnum+0x20>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e45 	.word	0x08006e45
 8006e28:	08006f03 	.word	0x08006f03
 8006e2c:	08006f6d 	.word	0x08006f6d
 8006e30:	08006ffb 	.word	0x08006ffb
 8006e34:	08007065 	.word	0x08007065
 8006e38:	080070d5 	.word	0x080070d5
 8006e3c:	0800711b 	.word	0x0800711b
 8006e40:	08007161 	.word	0x08007161
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006e44:	2108      	movs	r1, #8
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa50 	bl	80072ec <USBH_Get_DevDesc>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d130      	bne.n	8006eb8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	7919      	ldrb	r1, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e7a:	b292      	uxth	r2, r2
 8006e7c:	9202      	str	r2, [sp, #8]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	9201      	str	r2, [sp, #4]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4603      	mov	r3, r0
 8006e86:	2280      	movs	r2, #128	; 0x80
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 ff72 	bl	8007d72 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7959      	ldrb	r1, [r3, #5]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ea2:	b292      	uxth	r2, r2
 8006ea4:	9202      	str	r2, [sp, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	9201      	str	r2, [sp, #4]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	4603      	mov	r3, r0
 8006eae:	2200      	movs	r2, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 ff5e 	bl	8007d72 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006eb6:	e175      	b.n	80071a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	f040 8172 	bne.w	80071a4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d903      	bls.n	8006ee2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	220d      	movs	r2, #13
 8006ede:	701a      	strb	r2, [r3, #0]
      break;
 8006ee0:	e160      	b.n	80071a4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	795b      	ldrb	r3, [r3, #5]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 ff92 	bl	8007e12 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	791b      	ldrb	r3, [r3, #4]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 ff8c 	bl	8007e12 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
      break;
 8006f00:	e150      	b.n	80071a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f02:	2112      	movs	r1, #18
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f9f1 	bl	80072ec <USBH_Get_DevDesc>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d103      	bne.n	8006f1c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f1a:	e145      	b.n	80071a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	f040 8142 	bne.w	80071a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d903      	bls.n	8006f46 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	220d      	movs	r2, #13
 8006f42:	701a      	strb	r2, [r3, #0]
      break;
 8006f44:	e130      	b.n	80071a8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	795b      	ldrb	r3, [r3, #5]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 ff60 	bl	8007e12 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	791b      	ldrb	r3, [r3, #4]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 ff5a 	bl	8007e12 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
      break;
 8006f6a:	e11d      	b.n	80071a8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa68 	bl	8007444 <USBH_SetAddress>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d132      	bne.n	8006fe4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006f7e:	2002      	movs	r0, #2
 8006f80:	f001 fa67 	bl	8008452 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	7919      	ldrb	r1, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fa6:	b292      	uxth	r2, r2
 8006fa8:	9202      	str	r2, [sp, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	9201      	str	r2, [sp, #4]
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2280      	movs	r2, #128	; 0x80
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fedc 	bl	8007d72 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7959      	ldrb	r1, [r3, #5]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fce:	b292      	uxth	r2, r2
 8006fd0:	9202      	str	r2, [sp, #8]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	9201      	str	r2, [sp, #4]
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2200      	movs	r2, #0
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fec8 	bl	8007d72 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006fe2:	e0e3      	b.n	80071ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	f040 80e0 	bne.w	80071ac <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	220d      	movs	r2, #13
 8006ff0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	705a      	strb	r2, [r3, #1]
      break;
 8006ff8:	e0d8      	b.n	80071ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006ffa:	2109      	movs	r1, #9
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f99d 	bl	800733c <USBH_Get_CfgDesc>
 8007002:	4603      	mov	r3, r0
 8007004:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2204      	movs	r2, #4
 8007010:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007012:	e0cd      	b.n	80071b0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	2b03      	cmp	r3, #3
 8007018:	f040 80ca 	bne.w	80071b0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007022:	3301      	adds	r3, #1
 8007024:	b2da      	uxtb	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007032:	2b03      	cmp	r3, #3
 8007034:	d903      	bls.n	800703e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	220d      	movs	r2, #13
 800703a:	701a      	strb	r2, [r3, #0]
      break;
 800703c:	e0b8      	b.n	80071b0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	795b      	ldrb	r3, [r3, #5]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fee4 	bl	8007e12 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	791b      	ldrb	r3, [r3, #4]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fede 	bl	8007e12 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
      break;
 8007062:	e0a5      	b.n	80071b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f965 	bl	800733c <USBH_Get_CfgDesc>
 8007072:	4603      	mov	r3, r0
 8007074:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d103      	bne.n	8007084 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2205      	movs	r2, #5
 8007080:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007082:	e097      	b.n	80071b4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	2b03      	cmp	r3, #3
 8007088:	f040 8094 	bne.w	80071b4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007092:	3301      	adds	r3, #1
 8007094:	b2da      	uxtb	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d903      	bls.n	80070ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	220d      	movs	r2, #13
 80070aa:	701a      	strb	r2, [r3, #0]
      break;
 80070ac:	e082      	b.n	80071b4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	795b      	ldrb	r3, [r3, #5]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 feac 	bl	8007e12 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	791b      	ldrb	r3, [r3, #4]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fea6 	bl	8007e12 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
      break;
 80070d2:	e06f      	b.n	80071b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d019      	beq.n	8007112 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80070ea:	23ff      	movs	r3, #255	; 0xff
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f949 	bl	8007384 <USBH_Get_StringDesc>
 80070f2:	4603      	mov	r3, r0
 80070f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2206      	movs	r2, #6
 8007100:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007102:	e059      	b.n	80071b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	2b03      	cmp	r3, #3
 8007108:	d156      	bne.n	80071b8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2206      	movs	r2, #6
 800710e:	705a      	strb	r2, [r3, #1]
      break;
 8007110:	e052      	b.n	80071b8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2206      	movs	r2, #6
 8007116:	705a      	strb	r2, [r3, #1]
      break;
 8007118:	e04e      	b.n	80071b8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007120:	2b00      	cmp	r3, #0
 8007122:	d019      	beq.n	8007158 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007130:	23ff      	movs	r3, #255	; 0xff
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f926 	bl	8007384 <USBH_Get_StringDesc>
 8007138:	4603      	mov	r3, r0
 800713a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d103      	bne.n	800714a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2207      	movs	r2, #7
 8007146:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007148:	e038      	b.n	80071bc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d135      	bne.n	80071bc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2207      	movs	r2, #7
 8007154:	705a      	strb	r2, [r3, #1]
      break;
 8007156:	e031      	b.n	80071bc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2207      	movs	r2, #7
 800715c:	705a      	strb	r2, [r3, #1]
      break;
 800715e:	e02d      	b.n	80071bc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007166:	2b00      	cmp	r3, #0
 8007168:	d017      	beq.n	800719a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007176:	23ff      	movs	r3, #255	; 0xff
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f903 	bl	8007384 <USBH_Get_StringDesc>
 800717e:	4603      	mov	r3, r0
 8007180:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800718c:	e018      	b.n	80071c0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d115      	bne.n	80071c0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73fb      	strb	r3, [r7, #15]
      break;
 8007198:	e012      	b.n	80071c0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]
      break;
 800719e:	e00f      	b.n	80071c0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80071a0:	bf00      	nop
 80071a2:	e00e      	b.n	80071c2 <USBH_HandleEnum+0x3be>
      break;
 80071a4:	bf00      	nop
 80071a6:	e00c      	b.n	80071c2 <USBH_HandleEnum+0x3be>
      break;
 80071a8:	bf00      	nop
 80071aa:	e00a      	b.n	80071c2 <USBH_HandleEnum+0x3be>
      break;
 80071ac:	bf00      	nop
 80071ae:	e008      	b.n	80071c2 <USBH_HandleEnum+0x3be>
      break;
 80071b0:	bf00      	nop
 80071b2:	e006      	b.n	80071c2 <USBH_HandleEnum+0x3be>
      break;
 80071b4:	bf00      	nop
 80071b6:	e004      	b.n	80071c2 <USBH_HandleEnum+0x3be>
      break;
 80071b8:	bf00      	nop
 80071ba:	e002      	b.n	80071c2 <USBH_HandleEnum+0x3be>
      break;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <USBH_HandleEnum+0x3be>
      break;
 80071c0:	bf00      	nop
  }
  return Status;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f804 	bl	800720e <USBH_HandleSof>
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b0b      	cmp	r3, #11
 800721e:	d10a      	bne.n	8007236 <USBH_HandleSof+0x28>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	4798      	blx	r3
  }
}
 8007236:	bf00      	nop
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800724e:	bf00      	nop
}
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800726a:	bf00      	nop
}
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 ff84 	bl	80081d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	791b      	ldrb	r3, [r3, #4]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fd9e 	bl	8007e12 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	795b      	ldrb	r3, [r3, #5]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fd98 	bl	8007e12 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	b29b      	uxth	r3, r3
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	4613      	mov	r3, r2
 8007306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800730a:	2100      	movs	r1, #0
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f864 	bl	80073da <USBH_GetDescriptor>
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	b292      	uxth	r2, r2
 800732c:	4619      	mov	r1, r3
 800732e:	f000 f8f4 	bl	800751a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007332:	7bfb      	ldrb	r3, [r7, #15]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af02      	add	r7, sp, #8
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	331c      	adds	r3, #28
 800734c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800734e:	887b      	ldrh	r3, [r7, #2]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007358:	2100      	movs	r1, #0
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f83d 	bl	80073da <USBH_GetDescriptor>
 8007360:	4603      	mov	r3, r0
 8007362:	72fb      	strb	r3, [r7, #11]
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d107      	bne.n	800737a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007370:	887a      	ldrh	r2, [r7, #2]
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 f940 	bl	80075fa <USBH_ParseCfgDesc>
  }

  return status;
 800737a:	7afb      	ldrb	r3, [r7, #11]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af02      	add	r7, sp, #8
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	607a      	str	r2, [r7, #4]
 800738e:	461a      	mov	r2, r3
 8007390:	460b      	mov	r3, r1
 8007392:	72fb      	strb	r3, [r7, #11]
 8007394:	4613      	mov	r3, r2
 8007396:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007398:	7afb      	ldrb	r3, [r7, #11]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073a0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80073a8:	893b      	ldrh	r3, [r7, #8]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	460b      	mov	r3, r1
 80073ae:	2100      	movs	r1, #0
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f812 	bl	80073da <USBH_GetDescriptor>
 80073b6:	4603      	mov	r3, r0
 80073b8:	75fb      	strb	r3, [r7, #23]
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d107      	bne.n	80073d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073c6:	893a      	ldrh	r2, [r7, #8]
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fa13 	bl	80077f6 <USBH_ParseStringDesc>
  }

  return status;
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	72fb      	strb	r3, [r7, #11]
 80073e8:	4613      	mov	r3, r2
 80073ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	789b      	ldrb	r3, [r3, #2]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d11c      	bne.n	800742e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2206      	movs	r2, #6
 8007404:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	893a      	ldrh	r2, [r7, #8]
 800740a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800740c:	893b      	ldrh	r3, [r7, #8]
 800740e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007416:	d104      	bne.n	8007422 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f240 4209 	movw	r2, #1033	; 0x409
 800741e:	829a      	strh	r2, [r3, #20]
 8007420:	e002      	b.n	8007428 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8b3a      	ldrh	r2, [r7, #24]
 800742c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800742e:	8b3b      	ldrh	r3, [r7, #24]
 8007430:	461a      	mov	r2, r3
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 fa2c 	bl	8007892 <USBH_CtlReq>
 800743a:	4603      	mov	r3, r0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	789b      	ldrb	r3, [r3, #2]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d10f      	bne.n	8007478 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2205      	movs	r2, #5
 8007462:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa08 	bl	8007892 <USBH_CtlReq>
 8007482:	4603      	mov	r3, r0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	789b      	ldrb	r3, [r3, #2]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d10e      	bne.n	80074be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2209      	movs	r2, #9
 80074aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	887a      	ldrh	r2, [r7, #2]
 80074b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074be:	2200      	movs	r2, #0
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f9e5 	bl	8007892 <USBH_CtlReq>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	789b      	ldrb	r3, [r3, #2]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10f      	bne.n	8007506 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2203      	movs	r2, #3
 80074f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f9c1 	bl	8007892 <USBH_CtlReq>
 8007510:	4603      	mov	r3, r0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	4613      	mov	r3, r2
 8007526:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	781a      	ldrb	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	785a      	ldrb	r2, [r3, #1]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	3302      	adds	r3, #2
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b29a      	uxth	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	3303      	adds	r3, #3
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	b29b      	uxth	r3, r3
 800754c:	4313      	orrs	r3, r2
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	791a      	ldrb	r2, [r3, #4]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	795a      	ldrb	r2, [r3, #5]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	799a      	ldrb	r2, [r3, #6]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	79da      	ldrb	r2, [r3, #7]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	2b08      	cmp	r3, #8
 8007578:	d939      	bls.n	80075ee <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	3308      	adds	r3, #8
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	b29a      	uxth	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	3309      	adds	r3, #9
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	b29b      	uxth	r3, r3
 800758e:	4313      	orrs	r3, r2
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	330a      	adds	r3, #10
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b29a      	uxth	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	330b      	adds	r3, #11
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	4313      	orrs	r3, r2
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	330c      	adds	r3, #12
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	330d      	adds	r3, #13
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4313      	orrs	r3, r2
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	7b9a      	ldrb	r2, [r3, #14]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	7bda      	ldrb	r2, [r3, #15]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	7c1a      	ldrb	r2, [r3, #16]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	7c5a      	ldrb	r2, [r3, #17]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	745a      	strb	r2, [r3, #17]
  }
}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b08a      	sub	sp, #40	; 0x28
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	4613      	mov	r3, r2
 8007606:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	785a      	ldrb	r2, [r3, #1]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	3302      	adds	r3, #2
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b29a      	uxth	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	3303      	adds	r3, #3
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	b29b      	uxth	r3, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	791a      	ldrb	r2, [r3, #4]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	795a      	ldrb	r2, [r3, #5]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	799a      	ldrb	r2, [r3, #6]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	79da      	ldrb	r2, [r3, #7]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	7a1a      	ldrb	r2, [r3, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007670:	88fb      	ldrh	r3, [r7, #6]
 8007672:	2b09      	cmp	r3, #9
 8007674:	d95f      	bls.n	8007736 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007676:	2309      	movs	r3, #9
 8007678:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800767e:	e051      	b.n	8007724 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007680:	f107 0316 	add.w	r3, r7, #22
 8007684:	4619      	mov	r1, r3
 8007686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007688:	f000 f8e8 	bl	800785c <USBH_GetNextDesc>
 800768c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	2b04      	cmp	r3, #4
 8007694:	d146      	bne.n	8007724 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800769a:	221a      	movs	r2, #26
 800769c:	fb02 f303 	mul.w	r3, r2, r3
 80076a0:	3308      	adds	r3, #8
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	3302      	adds	r3, #2
 80076a8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80076aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ac:	69f8      	ldr	r0, [r7, #28]
 80076ae:	f000 f846 	bl	800773e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076bc:	e022      	b.n	8007704 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076be:	f107 0316 	add.w	r3, r7, #22
 80076c2:	4619      	mov	r1, r3
 80076c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076c6:	f000 f8c9 	bl	800785c <USBH_GetNextDesc>
 80076ca:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b05      	cmp	r3, #5
 80076d2:	d117      	bne.n	8007704 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80076d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076dc:	3201      	adds	r2, #1
 80076de:	00d2      	lsls	r2, r2, #3
 80076e0:	211a      	movs	r1, #26
 80076e2:	fb01 f303 	mul.w	r3, r1, r3
 80076e6:	4413      	add	r3, r2
 80076e8:	3308      	adds	r3, #8
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	3304      	adds	r3, #4
 80076f0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80076f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076f4:	69b8      	ldr	r0, [r7, #24]
 80076f6:	f000 f851 	bl	800779c <USBH_ParseEPDesc>
            ep_ix++;
 80076fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076fe:	3301      	adds	r3, #1
 8007700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	791b      	ldrb	r3, [r3, #4]
 8007708:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800770c:	429a      	cmp	r2, r3
 800770e:	d204      	bcs.n	800771a <USBH_ParseCfgDesc+0x120>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	885a      	ldrh	r2, [r3, #2]
 8007714:	8afb      	ldrh	r3, [r7, #22]
 8007716:	429a      	cmp	r2, r3
 8007718:	d8d1      	bhi.n	80076be <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800771a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800771e:	3301      	adds	r3, #1
 8007720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007728:	2b01      	cmp	r3, #1
 800772a:	d804      	bhi.n	8007736 <USBH_ParseCfgDesc+0x13c>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	885a      	ldrh	r2, [r3, #2]
 8007730:	8afb      	ldrh	r3, [r7, #22]
 8007732:	429a      	cmp	r2, r3
 8007734:	d8a4      	bhi.n	8007680 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007736:	bf00      	nop
 8007738:	3728      	adds	r7, #40	; 0x28
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	785a      	ldrb	r2, [r3, #1]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	789a      	ldrb	r2, [r3, #2]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	78da      	ldrb	r2, [r3, #3]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	791a      	ldrb	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	795a      	ldrb	r2, [r3, #5]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	799a      	ldrb	r2, [r3, #6]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	79da      	ldrb	r2, [r3, #7]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	7a1a      	ldrb	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	721a      	strb	r2, [r3, #8]
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	785a      	ldrb	r2, [r3, #1]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	789a      	ldrb	r2, [r3, #2]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	78da      	ldrb	r2, [r3, #3]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	3304      	adds	r3, #4
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	3305      	adds	r3, #5
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	4313      	orrs	r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	799a      	ldrb	r2, [r3, #6]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	719a      	strb	r2, [r3, #6]
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b087      	sub	sp, #28
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	4613      	mov	r3, r2
 8007802:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b03      	cmp	r3, #3
 800780c:	d120      	bne.n	8007850 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	1e9a      	subs	r2, r3, #2
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	4293      	cmp	r3, r2
 8007818:	bf28      	it	cs
 800781a:	4613      	movcs	r3, r2
 800781c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3302      	adds	r3, #2
 8007822:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007824:	2300      	movs	r3, #0
 8007826:	82fb      	strh	r3, [r7, #22]
 8007828:	e00b      	b.n	8007842 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800782a:	8afb      	ldrh	r3, [r7, #22]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	781a      	ldrb	r2, [r3, #0]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	3301      	adds	r3, #1
 800783a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800783c:	8afb      	ldrh	r3, [r7, #22]
 800783e:	3302      	adds	r3, #2
 8007840:	82fb      	strh	r3, [r7, #22]
 8007842:	8afa      	ldrh	r2, [r7, #22]
 8007844:	8abb      	ldrh	r3, [r7, #20]
 8007846:	429a      	cmp	r2, r3
 8007848:	d3ef      	bcc.n	800782a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2200      	movs	r2, #0
 800784e:	701a      	strb	r2, [r3, #0]
  }
}
 8007850:	bf00      	nop
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	881a      	ldrh	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	4413      	add	r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4413      	add	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007884:	68fb      	ldr	r3, [r7, #12]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b086      	sub	sp, #24
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	4613      	mov	r3, r2
 800789e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80078a0:	2301      	movs	r3, #1
 80078a2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	789b      	ldrb	r3, [r3, #2]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d002      	beq.n	80078b2 <USBH_CtlReq+0x20>
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d00f      	beq.n	80078d0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80078b0:	e027      	b.n	8007902 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	88fa      	ldrh	r2, [r7, #6]
 80078bc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2202      	movs	r2, #2
 80078c8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
      break;
 80078ce:	e018      	b.n	8007902 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f81b 	bl	800790c <USBH_HandleControl>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <USBH_CtlReq+0x54>
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d106      	bne.n	80078f4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	761a      	strb	r2, [r3, #24]
      break;
 80078f2:	e005      	b.n	8007900 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d102      	bne.n	8007900 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	709a      	strb	r2, [r3, #2]
      break;
 8007900:	bf00      	nop
  }
  return status;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af02      	add	r7, sp, #8
 8007912:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007914:	2301      	movs	r3, #1
 8007916:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007918:	2300      	movs	r3, #0
 800791a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7e1b      	ldrb	r3, [r3, #24]
 8007920:	3b01      	subs	r3, #1
 8007922:	2b0a      	cmp	r3, #10
 8007924:	f200 8156 	bhi.w	8007bd4 <USBH_HandleControl+0x2c8>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <USBH_HandleControl+0x24>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	0800795d 	.word	0x0800795d
 8007934:	08007977 	.word	0x08007977
 8007938:	080079e1 	.word	0x080079e1
 800793c:	08007a07 	.word	0x08007a07
 8007940:	08007a3f 	.word	0x08007a3f
 8007944:	08007a69 	.word	0x08007a69
 8007948:	08007abb 	.word	0x08007abb
 800794c:	08007add 	.word	0x08007add
 8007950:	08007b19 	.word	0x08007b19
 8007954:	08007b3f 	.word	0x08007b3f
 8007958:	08007b7d 	.word	0x08007b7d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f103 0110 	add.w	r1, r3, #16
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	795b      	ldrb	r3, [r3, #5]
 8007966:	461a      	mov	r2, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f943 	bl	8007bf4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2202      	movs	r2, #2
 8007972:	761a      	strb	r2, [r3, #24]
      break;
 8007974:	e139      	b.n	8007bea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	795b      	ldrb	r3, [r3, #5]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fd17 	bl	80083b0 <USBH_LL_GetURBState>
 8007982:	4603      	mov	r3, r0
 8007984:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d11e      	bne.n	80079ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	7c1b      	ldrb	r3, [r3, #16]
 8007990:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007994:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	8adb      	ldrh	r3, [r3, #22]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800799e:	7b7b      	ldrb	r3, [r7, #13]
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d103      	bne.n	80079ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2203      	movs	r2, #3
 80079a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079aa:	e115      	b.n	8007bd8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2205      	movs	r2, #5
 80079b0:	761a      	strb	r2, [r3, #24]
      break;
 80079b2:	e111      	b.n	8007bd8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80079b4:	7b7b      	ldrb	r3, [r7, #13]
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d103      	bne.n	80079c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2209      	movs	r2, #9
 80079be:	761a      	strb	r2, [r3, #24]
      break;
 80079c0:	e10a      	b.n	8007bd8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2207      	movs	r2, #7
 80079c6:	761a      	strb	r2, [r3, #24]
      break;
 80079c8:	e106      	b.n	8007bd8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d003      	beq.n	80079d8 <USBH_HandleControl+0xcc>
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	f040 8100 	bne.w	8007bd8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	220b      	movs	r2, #11
 80079dc:	761a      	strb	r2, [r3, #24]
      break;
 80079de:	e0fb      	b.n	8007bd8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6899      	ldr	r1, [r3, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	899a      	ldrh	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	791b      	ldrb	r3, [r3, #4]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f93a 	bl	8007c72 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2204      	movs	r2, #4
 8007a02:	761a      	strb	r2, [r3, #24]
      break;
 8007a04:	e0f1      	b.n	8007bea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	791b      	ldrb	r3, [r3, #4]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fccf 	bl	80083b0 <USBH_LL_GetURBState>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d102      	bne.n	8007a22 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2209      	movs	r2, #9
 8007a20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b05      	cmp	r3, #5
 8007a26:	d102      	bne.n	8007a2e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a2c:	e0d6      	b.n	8007bdc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	f040 80d3 	bne.w	8007bdc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	220b      	movs	r2, #11
 8007a3a:	761a      	strb	r2, [r3, #24]
      break;
 8007a3c:	e0ce      	b.n	8007bdc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6899      	ldr	r1, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	899a      	ldrh	r2, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	795b      	ldrb	r3, [r3, #5]
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	9000      	str	r0, [sp, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f8ea 	bl	8007c28 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2206      	movs	r2, #6
 8007a64:	761a      	strb	r2, [r3, #24]
      break;
 8007a66:	e0c0      	b.n	8007bea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	795b      	ldrb	r3, [r3, #5]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fc9e 	bl	80083b0 <USBH_LL_GetURBState>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d103      	bne.n	8007a86 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2207      	movs	r2, #7
 8007a82:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a84:	e0ac      	b.n	8007be0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b05      	cmp	r3, #5
 8007a8a:	d105      	bne.n	8007a98 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	220c      	movs	r2, #12
 8007a90:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a92:	2303      	movs	r3, #3
 8007a94:	73fb      	strb	r3, [r7, #15]
      break;
 8007a96:	e0a3      	b.n	8007be0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d103      	bne.n	8007aa6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2205      	movs	r2, #5
 8007aa2:	761a      	strb	r2, [r3, #24]
      break;
 8007aa4:	e09c      	b.n	8007be0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	f040 8099 	bne.w	8007be0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	220b      	movs	r2, #11
 8007ab2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab8:	e092      	b.n	8007be0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	791b      	ldrb	r3, [r3, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f8d5 	bl	8007c72 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2208      	movs	r2, #8
 8007ad8:	761a      	strb	r2, [r3, #24]

      break;
 8007ada:	e086      	b.n	8007bea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	791b      	ldrb	r3, [r3, #4]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fc64 	bl	80083b0 <USBH_LL_GetURBState>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d105      	bne.n	8007afe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	220d      	movs	r2, #13
 8007af6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007afc:	e072      	b.n	8007be4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d103      	bne.n	8007b0c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	220b      	movs	r2, #11
 8007b08:	761a      	strb	r2, [r3, #24]
      break;
 8007b0a:	e06b      	b.n	8007be4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d168      	bne.n	8007be4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007b12:	2303      	movs	r3, #3
 8007b14:	73fb      	strb	r3, [r7, #15]
      break;
 8007b16:	e065      	b.n	8007be4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	795b      	ldrb	r3, [r3, #5]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	9200      	str	r2, [sp, #0]
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f87f 	bl	8007c28 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	220a      	movs	r2, #10
 8007b3a:	761a      	strb	r2, [r3, #24]
      break;
 8007b3c:	e055      	b.n	8007bea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	795b      	ldrb	r3, [r3, #5]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc33 	bl	80083b0 <USBH_LL_GetURBState>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d105      	bne.n	8007b60 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	220d      	movs	r2, #13
 8007b5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b5e:	e043      	b.n	8007be8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d103      	bne.n	8007b6e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2209      	movs	r2, #9
 8007b6a:	761a      	strb	r2, [r3, #24]
      break;
 8007b6c:	e03c      	b.n	8007be8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d139      	bne.n	8007be8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	220b      	movs	r2, #11
 8007b78:	761a      	strb	r2, [r3, #24]
      break;
 8007b7a:	e035      	b.n	8007be8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	7e5b      	ldrb	r3, [r3, #25]
 8007b80:	3301      	adds	r3, #1
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	765a      	strb	r2, [r3, #25]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7e5b      	ldrb	r3, [r3, #25]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d806      	bhi.n	8007b9e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b9c:	e025      	b.n	8007bea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ba4:	2106      	movs	r1, #6
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	795b      	ldrb	r3, [r3, #5]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f92b 	bl	8007e12 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	791b      	ldrb	r3, [r3, #4]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f925 	bl	8007e12 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007bce:	2302      	movs	r3, #2
 8007bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd2:	e00a      	b.n	8007bea <USBH_HandleControl+0x2de>

    default:
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e008      	b.n	8007bea <USBH_HandleControl+0x2de>
      break;
 8007bd8:	bf00      	nop
 8007bda:	e006      	b.n	8007bea <USBH_HandleControl+0x2de>
      break;
 8007bdc:	bf00      	nop
 8007bde:	e004      	b.n	8007bea <USBH_HandleControl+0x2de>
      break;
 8007be0:	bf00      	nop
 8007be2:	e002      	b.n	8007bea <USBH_HandleControl+0x2de>
      break;
 8007be4:	bf00      	nop
 8007be6:	e000      	b.n	8007bea <USBH_HandleControl+0x2de>
      break;
 8007be8:	bf00      	nop
  }

  return status;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af04      	add	r7, sp, #16
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c02:	79f9      	ldrb	r1, [r7, #7]
 8007c04:	2300      	movs	r3, #0
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	2308      	movs	r3, #8
 8007c0a:	9302      	str	r3, [sp, #8]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	2200      	movs	r2, #0
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fb98 	bl	800834e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	460b      	mov	r3, r1
 8007c38:	80fb      	strh	r3, [r7, #6]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c4c:	7979      	ldrb	r1, [r7, #5]
 8007c4e:	7e3b      	ldrb	r3, [r7, #24]
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	9302      	str	r3, [sp, #8]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2200      	movs	r2, #0
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fb73 	bl	800834e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b088      	sub	sp, #32
 8007c76:	af04      	add	r7, sp, #16
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	461a      	mov	r2, r3
 8007c80:	460b      	mov	r3, r1
 8007c82:	80fb      	strh	r3, [r7, #6]
 8007c84:	4613      	mov	r3, r2
 8007c86:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c88:	7979      	ldrb	r1, [r7, #5]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9303      	str	r3, [sp, #12]
 8007c8e:	88fb      	ldrh	r3, [r7, #6]
 8007c90:	9302      	str	r3, [sp, #8]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	2301      	movs	r3, #1
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fb55 	bl	800834e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ca4:	2300      	movs	r3, #0

}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b088      	sub	sp, #32
 8007cb2:	af04      	add	r7, sp, #16
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	461a      	mov	r2, r3
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	80fb      	strh	r3, [r7, #6]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007cd2:	7979      	ldrb	r1, [r7, #5]
 8007cd4:	7e3b      	ldrb	r3, [r7, #24]
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	88fb      	ldrh	r3, [r7, #6]
 8007cda:	9302      	str	r3, [sp, #8]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fb30 	bl	800834e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af04      	add	r7, sp, #16
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4611      	mov	r1, r2
 8007d04:	461a      	mov	r2, r3
 8007d06:	460b      	mov	r3, r1
 8007d08:	80fb      	strh	r3, [r7, #6]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d0e:	7979      	ldrb	r1, [r7, #5]
 8007d10:	2300      	movs	r3, #0
 8007d12:	9303      	str	r3, [sp, #12]
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	9302      	str	r3, [sp, #8]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2302      	movs	r3, #2
 8007d22:	2201      	movs	r2, #1
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 fb12 	bl	800834e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af04      	add	r7, sp, #16
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	4611      	mov	r1, r2
 8007d40:	461a      	mov	r2, r3
 8007d42:	460b      	mov	r3, r1
 8007d44:	71fb      	strb	r3, [r7, #7]
 8007d46:	4613      	mov	r3, r2
 8007d48:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	79b9      	ldrb	r1, [r7, #6]
 8007d50:	2200      	movs	r2, #0
 8007d52:	9203      	str	r2, [sp, #12]
 8007d54:	9302      	str	r3, [sp, #8]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	2303      	movs	r3, #3
 8007d60:	2201      	movs	r2, #1
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 faf3 	bl	800834e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af04      	add	r7, sp, #16
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4603      	mov	r3, r0
 8007d82:	70fb      	strb	r3, [r7, #3]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70bb      	strb	r3, [r7, #2]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d8c:	7878      	ldrb	r0, [r7, #1]
 8007d8e:	78ba      	ldrb	r2, [r7, #2]
 8007d90:	78f9      	ldrb	r1, [r7, #3]
 8007d92:	8b3b      	ldrh	r3, [r7, #24]
 8007d94:	9302      	str	r3, [sp, #8]
 8007d96:	7d3b      	ldrb	r3, [r7, #20]
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	7c3b      	ldrb	r3, [r7, #16]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa86 	bl	80082b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 faa5 	bl	8008310 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f836 	bl	8007e4e <USBH_GetFreePipe>
 8007de2:	4603      	mov	r3, r0
 8007de4:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007de6:	89fb      	ldrh	r3, [r7, #14]
 8007de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00a      	beq.n	8007e06 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	89fb      	ldrh	r3, [r7, #14]
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	33e0      	adds	r3, #224	; 0xe0
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e06:	89fb      	ldrh	r3, [r7, #14]
 8007e08:	b2db      	uxtb	r3, r3
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	2b0a      	cmp	r3, #10
 8007e22:	d80d      	bhi.n	8007e40 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	33e0      	adds	r3, #224	; 0xe0
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	33e0      	adds	r3, #224	; 0xe0
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
 8007e5e:	e00f      	b.n	8007e80 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	33e0      	adds	r3, #224	; 0xe0
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	e007      	b.n	8007e8a <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	73fb      	strb	r3, [r7, #15]
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b0a      	cmp	r3, #10
 8007e84:	d9ec      	bls.n	8007e60 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
	...

08007e98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	490e      	ldr	r1, [pc, #56]	; (8007ed8 <MX_USB_HOST_Init+0x40>)
 8007ea0:	480e      	ldr	r0, [pc, #56]	; (8007edc <MX_USB_HOST_Init+0x44>)
 8007ea2:	f7fe fca4 	bl	80067ee <USBH_Init>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007eac:	f7f8 fa7c 	bl	80003a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 8007eb0:	490b      	ldr	r1, [pc, #44]	; (8007ee0 <MX_USB_HOST_Init+0x48>)
 8007eb2:	480a      	ldr	r0, [pc, #40]	; (8007edc <MX_USB_HOST_Init+0x44>)
 8007eb4:	f7fe fd29 	bl	800690a <USBH_RegisterClass>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007ebe:	f7f8 fa73 	bl	80003a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007ec2:	4806      	ldr	r0, [pc, #24]	; (8007edc <MX_USB_HOST_Init+0x44>)
 8007ec4:	f7fe fdad 	bl	8006a22 <USBH_Start>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007ece:	f7f8 fa6b 	bl	80003a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007ed2:	bf00      	nop
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	08007ef9 	.word	0x08007ef9
 8007edc:	200000c0 	.word	0x200000c0
 8007ee0:	2000000c 	.word	0x2000000c

08007ee4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007ee8:	4802      	ldr	r0, [pc, #8]	; (8007ef4 <MX_USB_HOST_Process+0x10>)
 8007eea:	f7fe fdab 	bl	8006a44 <USBH_Process>
}
 8007eee:	bf00      	nop
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200000c0 	.word	0x200000c0

08007ef8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d819      	bhi.n	8007f40 <USBH_UserProcess+0x48>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <USBH_UserProcess+0x1c>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	08007f31 	.word	0x08007f31
 8007f1c:	08007f41 	.word	0x08007f41
 8007f20:	08007f39 	.word	0x08007f39
 8007f24:	08007f29 	.word	0x08007f29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007f28:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <USBH_UserProcess+0x58>)
 8007f2a:	2203      	movs	r2, #3
 8007f2c:	701a      	strb	r2, [r3, #0]
  break;
 8007f2e:	e008      	b.n	8007f42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <USBH_UserProcess+0x58>)
 8007f32:	2202      	movs	r2, #2
 8007f34:	701a      	strb	r2, [r3, #0]
  break;
 8007f36:	e004      	b.n	8007f42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007f38:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <USBH_UserProcess+0x58>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	701a      	strb	r2, [r3, #0]
  break;
 8007f3e:	e000      	b.n	8007f42 <USBH_UserProcess+0x4a>

  default:
  break;
 8007f40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	200000b0 	.word	0x200000b0

08007f54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b0b0      	sub	sp, #192	; 0xc0
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	605a      	str	r2, [r3, #4]
 8007f66:	609a      	str	r2, [r3, #8]
 8007f68:	60da      	str	r2, [r3, #12]
 8007f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f6c:	f107 0314 	add.w	r3, r7, #20
 8007f70:	2298      	movs	r2, #152	; 0x98
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 faeb 	bl	8008550 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f82:	d173      	bne.n	800806c <HAL_HCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007f8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007f92:	2301      	movs	r3, #1
 8007f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007f96:	2301      	movs	r3, #1
 8007f98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8007f9a:	2308      	movs	r3, #8
 8007f9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007faa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007fae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007fb0:	f107 0314 	add.w	r3, r7, #20
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fb f99b 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8007fc0:	f7f8 f9f2 	bl	80003a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fc4:	4b2b      	ldr	r3, [pc, #172]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8007fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc8:	4a2a      	ldr	r2, [pc, #168]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fd0:	4b28      	ldr	r3, [pc, #160]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8007fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007fdc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ff6:	230a      	movs	r3, #10
 8007ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ffc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008000:	4619      	mov	r1, r3
 8008002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008006:	f7f8 fc49 	bl	800089c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800800a:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <HAL_HCD_MspInit+0x120>)
 800800c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800e:	4a19      	ldr	r2, [pc, #100]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8008010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008016:	4b17      	ldr	r3, [pc, #92]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8008018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008022:	4b14      	ldr	r3, [pc, #80]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8008024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d114      	bne.n	8008058 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800802e:	4b11      	ldr	r3, [pc, #68]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	4a10      	ldr	r2, [pc, #64]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8008034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008038:	6593      	str	r3, [r2, #88]	; 0x58
 800803a:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <HAL_HCD_MspInit+0x120>)
 800803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008042:	60bb      	str	r3, [r7, #8]
 8008044:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008046:	f7fa fa41 	bl	80024cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800804a:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <HAL_HCD_MspInit+0x120>)
 800804c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804e:	4a09      	ldr	r2, [pc, #36]	; (8008074 <HAL_HCD_MspInit+0x120>)
 8008050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008054:	6593      	str	r3, [r2, #88]	; 0x58
 8008056:	e001      	b.n	800805c <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008058:	f7fa fa38 	bl	80024cc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800805c:	2200      	movs	r2, #0
 800805e:	2100      	movs	r1, #0
 8008060:	2043      	movs	r0, #67	; 0x43
 8008062:	f7f8 fbe4 	bl	800082e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008066:	2043      	movs	r0, #67	; 0x43
 8008068:	f7f8 fbfd 	bl	8000866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800806c:	bf00      	nop
 800806e:	37c0      	adds	r7, #192	; 0xc0
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40021000 	.word	0x40021000

08008078 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff f8af 	bl	80071ea <USBH_LL_IncTimer>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff f8e7 	bl	8007276 <USBH_LL_Connect>
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff f8f0 	bl	80072a4 <USBH_LL_Disconnect>
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
 80080d8:	4613      	mov	r3, r2
 80080da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff f8a1 	bl	800723e <USBH_LL_PortEnabled>
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff f8a1 	bl	800725a <USBH_LL_PortDisabled>
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800812e:	2b01      	cmp	r3, #1
 8008130:	d12d      	bne.n	800818e <USBH_LL_Init+0x6e>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008132:	4a19      	ldr	r2, [pc, #100]	; (8008198 <USBH_LL_Init+0x78>)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a16      	ldr	r2, [pc, #88]	; (8008198 <USBH_LL_Init+0x78>)
 800813e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <USBH_LL_Init+0x78>)
 8008144:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008148:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800814a:	4b13      	ldr	r3, [pc, #76]	; (8008198 <USBH_LL_Init+0x78>)
 800814c:	220c      	movs	r2, #12
 800814e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 8008150:	4b11      	ldr	r3, [pc, #68]	; (8008198 <USBH_LL_Init+0x78>)
 8008152:	2203      	movs	r2, #3
 8008154:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008156:	4b10      	ldr	r3, [pc, #64]	; (8008198 <USBH_LL_Init+0x78>)
 8008158:	2200      	movs	r2, #0
 800815a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800815c:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <USBH_LL_Init+0x78>)
 800815e:	2202      	movs	r2, #2
 8008160:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008162:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <USBH_LL_Init+0x78>)
 8008164:	2200      	movs	r2, #0
 8008166:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <USBH_LL_Init+0x78>)
 800816a:	2200      	movs	r2, #0
 800816c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800816e:	480a      	ldr	r0, [pc, #40]	; (8008198 <USBH_LL_Init+0x78>)
 8008170:	f7f8 fd3e 	bl	8000bf0 <HAL_HCD_Init>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800817a:	f7f8 f915 	bl	80003a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800817e:	4806      	ldr	r0, [pc, #24]	; (8008198 <USBH_LL_Init+0x78>)
 8008180:	f7f9 f91d 	bl	80013be <HAL_HCD_GetCurrentFrame>
 8008184:	4603      	mov	r3, r0
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff f81f 	bl	80071cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	20000498 	.word	0x20000498

0800819c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7f9 f88d 	bl	80012d2 <HAL_HCD_Start>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f952 	bl	8008468 <USBH_Get_USB_Status>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7f9 f895 	bl	8001318 <HAL_HCD_Stop>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f937 	bl	8008468 <USBH_Get_USB_Status>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008210:	2301      	movs	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800821a:	4618      	mov	r0, r3
 800821c:	f7f9 f8dd 	bl	80013da <HAL_HCD_GetCurrentSpeed>
 8008220:	4603      	mov	r3, r0
 8008222:	2b02      	cmp	r3, #2
 8008224:	d00c      	beq.n	8008240 <USBH_LL_GetSpeed+0x38>
 8008226:	2b02      	cmp	r3, #2
 8008228:	d80d      	bhi.n	8008246 <USBH_LL_GetSpeed+0x3e>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <USBH_LL_GetSpeed+0x2c>
 800822e:	2b01      	cmp	r3, #1
 8008230:	d003      	beq.n	800823a <USBH_LL_GetSpeed+0x32>
 8008232:	e008      	b.n	8008246 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
    break;
 8008238:	e008      	b.n	800824c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800823a:	2301      	movs	r3, #1
 800823c:	73fb      	strb	r3, [r7, #15]
    break;
 800823e:	e005      	b.n	800824c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008240:	2302      	movs	r3, #2
 8008242:	73fb      	strb	r3, [r7, #15]
    break;
 8008244:	e002      	b.n	800824c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008246:	2301      	movs	r3, #1
 8008248:	73fb      	strb	r3, [r7, #15]
    break;
 800824a:	bf00      	nop
  }
  return  speed;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800826c:	4618      	mov	r0, r3
 800826e:	f7f9 f870 	bl	8001352 <HAL_HCD_ResetPort>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	4618      	mov	r0, r3
 800827a:	f000 f8f5 	bl	8008468 <USBH_Get_USB_Status>
 800827e:	4603      	mov	r3, r0
 8008280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008282:	7bbb      	ldrb	r3, [r7, #14]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7f9 f877 	bl	8001396 <HAL_HCD_HC_GetXferCount>
 80082a8:	4603      	mov	r3, r0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082b2:	b590      	push	{r4, r7, lr}
 80082b4:	b089      	sub	sp, #36	; 0x24
 80082b6:	af04      	add	r7, sp, #16
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	4608      	mov	r0, r1
 80082bc:	4611      	mov	r1, r2
 80082be:	461a      	mov	r2, r3
 80082c0:	4603      	mov	r3, r0
 80082c2:	70fb      	strb	r3, [r7, #3]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70bb      	strb	r3, [r7, #2]
 80082c8:	4613      	mov	r3, r2
 80082ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80082da:	787c      	ldrb	r4, [r7, #1]
 80082dc:	78ba      	ldrb	r2, [r7, #2]
 80082de:	78f9      	ldrb	r1, [r7, #3]
 80082e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082e2:	9302      	str	r3, [sp, #8]
 80082e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	4623      	mov	r3, r4
 80082f2:	f7f8 fcdf 	bl	8000cb4 <HAL_HCD_HC_Init>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f8b3 	bl	8008468 <USBH_Get_USB_Status>
 8008302:	4603      	mov	r3, r0
 8008304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008306:	7bbb      	ldrb	r3, [r7, #14]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	bd90      	pop	{r4, r7, pc}

08008310 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f7f8 fd4f 	bl	8000dd2 <HAL_HCD_HC_Halt>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	4618      	mov	r0, r3
 800833c:	f000 f894 	bl	8008468 <USBH_Get_USB_Status>
 8008340:	4603      	mov	r3, r0
 8008342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008344:	7bbb      	ldrb	r3, [r7, #14]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800834e:	b590      	push	{r4, r7, lr}
 8008350:	b089      	sub	sp, #36	; 0x24
 8008352:	af04      	add	r7, sp, #16
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	4608      	mov	r0, r1
 8008358:	4611      	mov	r1, r2
 800835a:	461a      	mov	r2, r3
 800835c:	4603      	mov	r3, r0
 800835e:	70fb      	strb	r3, [r7, #3]
 8008360:	460b      	mov	r3, r1
 8008362:	70bb      	strb	r3, [r7, #2]
 8008364:	4613      	mov	r3, r2
 8008366:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008376:	787c      	ldrb	r4, [r7, #1]
 8008378:	78ba      	ldrb	r2, [r7, #2]
 800837a:	78f9      	ldrb	r1, [r7, #3]
 800837c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008380:	9303      	str	r3, [sp, #12]
 8008382:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008384:	9302      	str	r3, [sp, #8]
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	4623      	mov	r3, r4
 8008392:	f7f8 fd41 	bl	8000e18 <HAL_HCD_HC_SubmitRequest>
 8008396:	4603      	mov	r3, r0
 8008398:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f863 	bl	8008468 <USBH_Get_USB_Status>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd90      	pop	{r4, r7, pc}

080083b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083c2:	78fa      	ldrb	r2, [r7, #3]
 80083c4:	4611      	mov	r1, r2
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f8 ffd1 	bl	800136e <HAL_HCD_HC_GetURBState>
 80083cc:	4603      	mov	r3, r0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80083e2:	20c8      	movs	r0, #200	; 0xc8
 80083e4:	f7f8 f924 	bl	8000630 <HAL_Delay>
  return USBH_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	460b      	mov	r3, r1
 80083fc:	70fb      	strb	r3, [r7, #3]
 80083fe:	4613      	mov	r3, r2
 8008400:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008408:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	212c      	movs	r1, #44	; 0x2c
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	4413      	add	r3, r2
 8008416:	333b      	adds	r3, #59	; 0x3b
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	212c      	movs	r1, #44	; 0x2c
 8008424:	fb01 f303 	mul.w	r3, r1, r3
 8008428:	4413      	add	r3, r2
 800842a:	3354      	adds	r3, #84	; 0x54
 800842c:	78ba      	ldrb	r2, [r7, #2]
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e008      	b.n	8008444 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	212c      	movs	r1, #44	; 0x2c
 8008438:	fb01 f303 	mul.w	r3, r1, r3
 800843c:	4413      	add	r3, r2
 800843e:	3355      	adds	r3, #85	; 0x55
 8008440:	78ba      	ldrb	r2, [r7, #2]
 8008442:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7f8 f8e8 	bl	8000630 <HAL_Delay>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	2b03      	cmp	r3, #3
 800847a:	d817      	bhi.n	80084ac <USBH_Get_USB_Status+0x44>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <USBH_Get_USB_Status+0x1c>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	08008495 	.word	0x08008495
 8008488:	0800849b 	.word	0x0800849b
 800848c:	080084a1 	.word	0x080084a1
 8008490:	080084a7 	.word	0x080084a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
    break;
 8008498:	e00b      	b.n	80084b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800849a:	2302      	movs	r3, #2
 800849c:	73fb      	strb	r3, [r7, #15]
    break;
 800849e:	e008      	b.n	80084b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
    break;
 80084a4:	e005      	b.n	80084b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80084a6:	2302      	movs	r3, #2
 80084a8:	73fb      	strb	r3, [r7, #15]
    break;
 80084aa:	e002      	b.n	80084b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80084ac:	2302      	movs	r3, #2
 80084ae:	73fb      	strb	r3, [r7, #15]
    break;
 80084b0:	bf00      	nop
  }
  return usb_status;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <__errno>:
 80084c0:	4b01      	ldr	r3, [pc, #4]	; (80084c8 <__errno+0x8>)
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	2000002c 	.word	0x2000002c

080084cc <__libc_init_array>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	4d0d      	ldr	r5, [pc, #52]	; (8008504 <__libc_init_array+0x38>)
 80084d0:	4c0d      	ldr	r4, [pc, #52]	; (8008508 <__libc_init_array+0x3c>)
 80084d2:	1b64      	subs	r4, r4, r5
 80084d4:	10a4      	asrs	r4, r4, #2
 80084d6:	2600      	movs	r6, #0
 80084d8:	42a6      	cmp	r6, r4
 80084da:	d109      	bne.n	80084f0 <__libc_init_array+0x24>
 80084dc:	4d0b      	ldr	r5, [pc, #44]	; (800850c <__libc_init_array+0x40>)
 80084de:	4c0c      	ldr	r4, [pc, #48]	; (8008510 <__libc_init_array+0x44>)
 80084e0:	f000 f906 	bl	80086f0 <_init>
 80084e4:	1b64      	subs	r4, r4, r5
 80084e6:	10a4      	asrs	r4, r4, #2
 80084e8:	2600      	movs	r6, #0
 80084ea:	42a6      	cmp	r6, r4
 80084ec:	d105      	bne.n	80084fa <__libc_init_array+0x2e>
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f4:	4798      	blx	r3
 80084f6:	3601      	adds	r6, #1
 80084f8:	e7ee      	b.n	80084d8 <__libc_init_array+0xc>
 80084fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fe:	4798      	blx	r3
 8008500:	3601      	adds	r6, #1
 8008502:	e7f2      	b.n	80084ea <__libc_init_array+0x1e>
 8008504:	0800874c 	.word	0x0800874c
 8008508:	0800874c 	.word	0x0800874c
 800850c:	0800874c 	.word	0x0800874c
 8008510:	08008750 	.word	0x08008750

08008514 <malloc>:
 8008514:	4b02      	ldr	r3, [pc, #8]	; (8008520 <malloc+0xc>)
 8008516:	4601      	mov	r1, r0
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	f000 b871 	b.w	8008600 <_malloc_r>
 800851e:	bf00      	nop
 8008520:	2000002c 	.word	0x2000002c

08008524 <free>:
 8008524:	4b02      	ldr	r3, [pc, #8]	; (8008530 <free+0xc>)
 8008526:	4601      	mov	r1, r0
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f000 b819 	b.w	8008560 <_free_r>
 800852e:	bf00      	nop
 8008530:	2000002c 	.word	0x2000002c

08008534 <memcpy>:
 8008534:	440a      	add	r2, r1
 8008536:	4291      	cmp	r1, r2
 8008538:	f100 33ff 	add.w	r3, r0, #4294967295
 800853c:	d100      	bne.n	8008540 <memcpy+0xc>
 800853e:	4770      	bx	lr
 8008540:	b510      	push	{r4, lr}
 8008542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008546:	f803 4f01 	strb.w	r4, [r3, #1]!
 800854a:	4291      	cmp	r1, r2
 800854c:	d1f9      	bne.n	8008542 <memcpy+0xe>
 800854e:	bd10      	pop	{r4, pc}

08008550 <memset>:
 8008550:	4402      	add	r2, r0
 8008552:	4603      	mov	r3, r0
 8008554:	4293      	cmp	r3, r2
 8008556:	d100      	bne.n	800855a <memset+0xa>
 8008558:	4770      	bx	lr
 800855a:	f803 1b01 	strb.w	r1, [r3], #1
 800855e:	e7f9      	b.n	8008554 <memset+0x4>

08008560 <_free_r>:
 8008560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008562:	2900      	cmp	r1, #0
 8008564:	d048      	beq.n	80085f8 <_free_r+0x98>
 8008566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856a:	9001      	str	r0, [sp, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f1a1 0404 	sub.w	r4, r1, #4
 8008572:	bfb8      	it	lt
 8008574:	18e4      	addlt	r4, r4, r3
 8008576:	f000 f8ad 	bl	80086d4 <__malloc_lock>
 800857a:	4a20      	ldr	r2, [pc, #128]	; (80085fc <_free_r+0x9c>)
 800857c:	9801      	ldr	r0, [sp, #4]
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	4615      	mov	r5, r2
 8008582:	b933      	cbnz	r3, 8008592 <_free_r+0x32>
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	6014      	str	r4, [r2, #0]
 8008588:	b003      	add	sp, #12
 800858a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800858e:	f000 b8a7 	b.w	80086e0 <__malloc_unlock>
 8008592:	42a3      	cmp	r3, r4
 8008594:	d90b      	bls.n	80085ae <_free_r+0x4e>
 8008596:	6821      	ldr	r1, [r4, #0]
 8008598:	1862      	adds	r2, r4, r1
 800859a:	4293      	cmp	r3, r2
 800859c:	bf04      	itt	eq
 800859e:	681a      	ldreq	r2, [r3, #0]
 80085a0:	685b      	ldreq	r3, [r3, #4]
 80085a2:	6063      	str	r3, [r4, #4]
 80085a4:	bf04      	itt	eq
 80085a6:	1852      	addeq	r2, r2, r1
 80085a8:	6022      	streq	r2, [r4, #0]
 80085aa:	602c      	str	r4, [r5, #0]
 80085ac:	e7ec      	b.n	8008588 <_free_r+0x28>
 80085ae:	461a      	mov	r2, r3
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	b10b      	cbz	r3, 80085b8 <_free_r+0x58>
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d9fa      	bls.n	80085ae <_free_r+0x4e>
 80085b8:	6811      	ldr	r1, [r2, #0]
 80085ba:	1855      	adds	r5, r2, r1
 80085bc:	42a5      	cmp	r5, r4
 80085be:	d10b      	bne.n	80085d8 <_free_r+0x78>
 80085c0:	6824      	ldr	r4, [r4, #0]
 80085c2:	4421      	add	r1, r4
 80085c4:	1854      	adds	r4, r2, r1
 80085c6:	42a3      	cmp	r3, r4
 80085c8:	6011      	str	r1, [r2, #0]
 80085ca:	d1dd      	bne.n	8008588 <_free_r+0x28>
 80085cc:	681c      	ldr	r4, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	6053      	str	r3, [r2, #4]
 80085d2:	4421      	add	r1, r4
 80085d4:	6011      	str	r1, [r2, #0]
 80085d6:	e7d7      	b.n	8008588 <_free_r+0x28>
 80085d8:	d902      	bls.n	80085e0 <_free_r+0x80>
 80085da:	230c      	movs	r3, #12
 80085dc:	6003      	str	r3, [r0, #0]
 80085de:	e7d3      	b.n	8008588 <_free_r+0x28>
 80085e0:	6825      	ldr	r5, [r4, #0]
 80085e2:	1961      	adds	r1, r4, r5
 80085e4:	428b      	cmp	r3, r1
 80085e6:	bf04      	itt	eq
 80085e8:	6819      	ldreq	r1, [r3, #0]
 80085ea:	685b      	ldreq	r3, [r3, #4]
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	bf04      	itt	eq
 80085f0:	1949      	addeq	r1, r1, r5
 80085f2:	6021      	streq	r1, [r4, #0]
 80085f4:	6054      	str	r4, [r2, #4]
 80085f6:	e7c7      	b.n	8008588 <_free_r+0x28>
 80085f8:	b003      	add	sp, #12
 80085fa:	bd30      	pop	{r4, r5, pc}
 80085fc:	200000b4 	.word	0x200000b4

08008600 <_malloc_r>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	1ccd      	adds	r5, r1, #3
 8008604:	f025 0503 	bic.w	r5, r5, #3
 8008608:	3508      	adds	r5, #8
 800860a:	2d0c      	cmp	r5, #12
 800860c:	bf38      	it	cc
 800860e:	250c      	movcc	r5, #12
 8008610:	2d00      	cmp	r5, #0
 8008612:	4606      	mov	r6, r0
 8008614:	db01      	blt.n	800861a <_malloc_r+0x1a>
 8008616:	42a9      	cmp	r1, r5
 8008618:	d903      	bls.n	8008622 <_malloc_r+0x22>
 800861a:	230c      	movs	r3, #12
 800861c:	6033      	str	r3, [r6, #0]
 800861e:	2000      	movs	r0, #0
 8008620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008622:	f000 f857 	bl	80086d4 <__malloc_lock>
 8008626:	4921      	ldr	r1, [pc, #132]	; (80086ac <_malloc_r+0xac>)
 8008628:	680a      	ldr	r2, [r1, #0]
 800862a:	4614      	mov	r4, r2
 800862c:	b99c      	cbnz	r4, 8008656 <_malloc_r+0x56>
 800862e:	4f20      	ldr	r7, [pc, #128]	; (80086b0 <_malloc_r+0xb0>)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	b923      	cbnz	r3, 800863e <_malloc_r+0x3e>
 8008634:	4621      	mov	r1, r4
 8008636:	4630      	mov	r0, r6
 8008638:	f000 f83c 	bl	80086b4 <_sbrk_r>
 800863c:	6038      	str	r0, [r7, #0]
 800863e:	4629      	mov	r1, r5
 8008640:	4630      	mov	r0, r6
 8008642:	f000 f837 	bl	80086b4 <_sbrk_r>
 8008646:	1c43      	adds	r3, r0, #1
 8008648:	d123      	bne.n	8008692 <_malloc_r+0x92>
 800864a:	230c      	movs	r3, #12
 800864c:	6033      	str	r3, [r6, #0]
 800864e:	4630      	mov	r0, r6
 8008650:	f000 f846 	bl	80086e0 <__malloc_unlock>
 8008654:	e7e3      	b.n	800861e <_malloc_r+0x1e>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	1b5b      	subs	r3, r3, r5
 800865a:	d417      	bmi.n	800868c <_malloc_r+0x8c>
 800865c:	2b0b      	cmp	r3, #11
 800865e:	d903      	bls.n	8008668 <_malloc_r+0x68>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	441c      	add	r4, r3
 8008664:	6025      	str	r5, [r4, #0]
 8008666:	e004      	b.n	8008672 <_malloc_r+0x72>
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	42a2      	cmp	r2, r4
 800866c:	bf0c      	ite	eq
 800866e:	600b      	streq	r3, [r1, #0]
 8008670:	6053      	strne	r3, [r2, #4]
 8008672:	4630      	mov	r0, r6
 8008674:	f000 f834 	bl	80086e0 <__malloc_unlock>
 8008678:	f104 000b 	add.w	r0, r4, #11
 800867c:	1d23      	adds	r3, r4, #4
 800867e:	f020 0007 	bic.w	r0, r0, #7
 8008682:	1ac2      	subs	r2, r0, r3
 8008684:	d0cc      	beq.n	8008620 <_malloc_r+0x20>
 8008686:	1a1b      	subs	r3, r3, r0
 8008688:	50a3      	str	r3, [r4, r2]
 800868a:	e7c9      	b.n	8008620 <_malloc_r+0x20>
 800868c:	4622      	mov	r2, r4
 800868e:	6864      	ldr	r4, [r4, #4]
 8008690:	e7cc      	b.n	800862c <_malloc_r+0x2c>
 8008692:	1cc4      	adds	r4, r0, #3
 8008694:	f024 0403 	bic.w	r4, r4, #3
 8008698:	42a0      	cmp	r0, r4
 800869a:	d0e3      	beq.n	8008664 <_malloc_r+0x64>
 800869c:	1a21      	subs	r1, r4, r0
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 f808 	bl	80086b4 <_sbrk_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d1dd      	bne.n	8008664 <_malloc_r+0x64>
 80086a8:	e7cf      	b.n	800864a <_malloc_r+0x4a>
 80086aa:	bf00      	nop
 80086ac:	200000b4 	.word	0x200000b4
 80086b0:	200000b8 	.word	0x200000b8

080086b4 <_sbrk_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d06      	ldr	r5, [pc, #24]	; (80086d0 <_sbrk_r+0x1c>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7f7 fed0 	bl	8000464 <_sbrk>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_sbrk_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_sbrk_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	2000079c 	.word	0x2000079c

080086d4 <__malloc_lock>:
 80086d4:	4801      	ldr	r0, [pc, #4]	; (80086dc <__malloc_lock+0x8>)
 80086d6:	f000 b809 	b.w	80086ec <__retarget_lock_acquire_recursive>
 80086da:	bf00      	nop
 80086dc:	200007a4 	.word	0x200007a4

080086e0 <__malloc_unlock>:
 80086e0:	4801      	ldr	r0, [pc, #4]	; (80086e8 <__malloc_unlock+0x8>)
 80086e2:	f000 b804 	b.w	80086ee <__retarget_lock_release_recursive>
 80086e6:	bf00      	nop
 80086e8:	200007a4 	.word	0x200007a4

080086ec <__retarget_lock_acquire_recursive>:
 80086ec:	4770      	bx	lr

080086ee <__retarget_lock_release_recursive>:
 80086ee:	4770      	bx	lr

080086f0 <_init>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr

080086fc <_fini>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr
